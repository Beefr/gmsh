
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tCombine	352
#define	tBSpline	353
#define	tBezier	354
#define	tNurbs	355
#define	tOrder	356
#define	tWith	357
#define	tBounds	358
#define	tKnots	359
#define	tColor	360
#define	tColorTable	361
#define	tFor	362
#define	tIn	363
#define	tEndFor	364
#define	tIf	365
#define	tEndIf	366
#define	tExit	367
#define	tReturn	368
#define	tCall	369
#define	tFunction	370
#define	tTrimmed	371
#define	tShow	372
#define	tHide	373
#define	tB_SPLINE_SURFACE_WITH_KNOTS	374
#define	tB_SPLINE_CURVE_WITH_KNOTS	375
#define	tCARTESIAN_POINT	376
#define	tTRUE	377
#define	tFALSE	378
#define	tUNSPECIFIED	379
#define	tU	380
#define	tV	381
#define	tEDGE_CURVE	382
#define	tVERTEX_POINT	383
#define	tORIENTED_EDGE	384
#define	tPLANE	385
#define	tFACE_OUTER_BOUND	386
#define	tEDGE_LOOP	387
#define	tADVANCED_FACE	388
#define	tVECTOR	389
#define	tDIRECTION	390
#define	tAXIS2_PLACEMENT_3D	391
#define	tISO	392
#define	tENDISO	393
#define	tENDSEC	394
#define	tDATA	395
#define	tHEADER	396
#define	tFILE_DESCRIPTION	397
#define	tFILE_SCHEMA	398
#define	tFILE_NAME	399
#define	tMANIFOLD_SOLID_BREP	400
#define	tCLOSED_SHELL	401
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	402
#define	tFACE_BOUND	403
#define	tCYLINDRICAL_SURFACE	404
#define	tCONICAL_SURFACE	405
#define	tCIRCLE	406
#define	tTRIMMED_CURVE	407
#define	tGEOMETRIC_SET	408
#define	tCOMPOSITE_CURVE_SEGMENT	409
#define	tCONTINUOUS	410
#define	tCOMPOSITE_CURVE	411
#define	tTOROIDAL_SURFACE	412
#define	tPRODUCT_DEFINITION	413
#define	tPRODUCT_DEFINITION_SHAPE	414
#define	tSHAPE_DEFINITION_REPRESENTATION	415
#define	tELLIPSE	416
#define	tSolid	417
#define	tEndSolid	418
#define	tVertex	419
#define	tFacet	420
#define	tNormal	421
#define	tOuter	422
#define	tLoopSTL	423
#define	tEndLoop	424
#define	tEndFacet	425
#define	tAFFECTPLUS	426
#define	tAFFECTMINUS	427
#define	tAFFECTTIMES	428
#define	tAFFECTDIVIDE	429
#define	tOR	430
#define	tAND	431
#define	tEQUAL	432
#define	tNOTEQUAL	433
#define	tAPPROXEQUAL	434
#define	tLESSOREQUAL	435
#define	tGREATEROREQUAL	436
#define	tCROSSPRODUCT	437
#define	tPLUSPLUS	438
#define	tMINUSMINUS	439
#define	UNARYPREC	440

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.193 2004-05-29 23:22:20 geuzaine Exp $
//
// Copyright (C) 1997-2004 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

// FIXME: most tSTRING and tBIGSTRING are leaked: Free() them!

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static Surface *STL_Surf;
static ExtrudeParams extr;
static Post_View *View;
static int ntmp;

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);

#line 75 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2339
#define	YYFLAG		-32768
#define	YYNTBASE	206

#define YYTRANSLATE(x) ((unsigned)(x) <= 440 ? yytranslate[x] : 341)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   192,     2,   202,     2,   190,     2,     2,   197,
   198,   188,   186,   203,   187,   201,   189,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   182,
     2,   184,   176,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   199,     2,   200,   196,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   204,     2,   205,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   177,
   178,   179,   180,   181,   183,   185,   191,   193,   194,   195
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   644,   648,   649,   663,   665,   669,   670,   684,
   686,   690,   691,   705,   707,   711,   712,   732,   734,   738,
   739,   759,   761,   765,   766,   786,   788,   792,   793,   819,
   821,   825,   826,   852,   854,   858,   859,   885,   887,   891,
   892,   924,   926,   930,   931,   963,   965,   969,   970,  1002,
  1004,  1008,  1009,  1041,  1043,  1047,  1048,  1080,  1082,  1086,
  1087,  1119,  1121,  1125,  1126,  1182,  1184,  1188,  1189,  1245,
  1247,  1251,  1252,  1308,  1310,  1314,  1315,  1359,  1361,  1365,
  1366,  1410,  1412,  1416,  1417,  1461,  1463,  1467,  1468,  1506,
  1508,  1512,  1513,  1551,  1553,  1557,  1558,  1596,  1598,  1602,
  1603,  1617,  1619,  1623,  1624,  1640,  1642,  1644,  1646,  1648,
  1650,  1652,  1654,  1659,  1667,  1677,  1684,  1688,  1695,  1702,
  1712,  1719,  1729,  1735,  1744,  1753,  1765,  1772,  1782,  1792,
  1802,  1810,  1819,  1832,  1839,  1847,  1855,  1863,  1873,  1881,
  1891,  1909,  1917,  1925,  1937,  1946,  1959,  1968,  1977,  1986,
  1999,  2014,  2029,  2052,  2073,  2082,  2091,  2100,  2108,  2117,
  2123,  2135,  2141,  2151,  2153,  2155,  2157,  2158,  2161,  2168,
  2175,  2182,  2189,  2194,  2201,  2206,  2213,  2217,  2223,  2227,
  2231,  2236,  2241,  2245,  2253,  2257,  2265,  2269,  2272,  2275,
  2282,  2291,  2300,  2311,  2313,  2316,  2318,  2322,  2327,  2329,
  2338,  2351,  2366,  2367,  2380,  2381,  2398,  2399,  2418,  2427,
  2440,  2455,  2456,  2469,  2470,  2487,  2488,  2507,  2516,  2529,
  2544,  2545,  2558,  2559,  2576,  2577,  2596,  2598,  2601,  2611,
  2619,  2622,  2629,  2639,  2649,  2658,  2667,  2676,  2683,  2688,
  2691,  2694,  2696,  2698,  2700,  2702,  2704,  2706,  2710,  2713,
  2716,  2719,  2723,  2727,  2731,  2735,  2739,  2743,  2747,  2751,
  2755,  2759,  2763,  2767,  2771,  2775,  2781,  2786,  2791,  2796,
  2801,  2806,  2811,  2816,  2821,  2826,  2831,  2838,  2843,  2848,
  2853,  2858,  2863,  2868,  2875,  2882,  2889,  2894,  2899,  2904,
  2909,  2914,  2919,  2924,  2929,  2934,  2939,  2944,  2951,  2956,
  2961,  2966,  2971,  2976,  2981,  2988,  2995,  3002,  3007,  3009,
  3011,  3013,  3015,  3017,  3022,  3027,  3030,  3036,  3040,  3047,
  3052,  3060,  3062,  3065,  3068,  3072,  3076,  3088,  3098,  3106,
  3114,  3115,  3119,  3121,  3125,  3126,  3130,  3134,  3136,  3140,
  3142,  3144,  3148,  3153,  3157,  3163,  3168,  3170,  3172,  3174,
  3178,  3183,  3190,  3198,  3200,  3202,  3206,  3210,  3220,  3228,
  3230,  3236,  3240,  3247,  3249,  3253,  3255,  3262,  3267,  3272,
  3279,  3286
};

static const short yyrhs[] = {   210,
     0,   208,     0,   215,     0,     1,     6,     0,     3,     0,
   187,     3,     0,     0,   208,   209,     0,   163,     0,   166,
   167,   207,   207,   207,   168,   169,   165,   207,   207,   207,
   165,   207,   207,   207,   165,   207,   207,   207,   170,   171,
     0,   164,     0,     0,   210,   211,     0,   212,     0,   214,
     0,   213,     0,   138,     6,     0,   139,     6,     0,   141,
     6,     0,   140,     6,     0,   142,     6,     0,   143,   197,
   330,   203,     5,   198,     6,     0,   144,   197,   330,   198,
     6,     0,   145,   197,     5,   203,     5,   203,   330,   203,
   330,   203,     5,   203,     5,   203,     5,   198,     6,     0,
     3,     7,   122,   197,     5,   203,   328,   198,     6,     0,
     3,     7,   121,   197,     5,   203,   326,   203,   334,   203,
   325,   203,   325,   203,   325,   203,   334,   203,   334,   203,
   325,   198,     6,     0,     3,     7,   120,   197,     5,   203,
   326,   203,   326,   203,   332,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   334,   203,   334,   203,   334,   203,
   334,   203,   325,   198,     6,     0,     3,     7,   128,   197,
     5,   203,     3,   203,     3,   203,     3,   203,   325,   198,
     6,     0,     3,     7,   132,   197,     5,   203,     3,   203,
   325,   198,     6,     0,     3,     7,   149,   197,     5,   203,
     3,   203,   325,   198,     6,     0,     3,     7,   130,   197,
     5,   203,   188,   203,   188,   203,   326,   203,   325,   198,
     6,     0,     3,     7,   133,   197,     5,   203,   334,   198,
     6,     0,     3,     7,   134,   197,     5,   203,   334,   203,
     3,   203,   325,   198,     6,     0,     3,     7,   129,   197,
     5,   203,     3,   198,     6,     0,     3,     7,   135,   197,
     5,   203,     3,   203,   326,   198,     6,     0,     3,     7,
   137,   197,     5,   203,     3,   203,     3,   203,     3,   198,
     6,     0,     3,     7,   136,   197,     5,   203,   328,   198,
     6,     0,     3,     7,   131,   197,     5,   203,     3,   198,
     6,     0,     3,     7,    41,   197,     5,   203,     3,   203,
     3,   198,     6,     0,     3,     7,   147,   197,     5,   203,
   334,   198,     6,     0,     3,     7,   148,   197,     5,   203,
   334,   203,     3,   198,     6,     0,     3,     7,   146,   197,
     5,   203,     3,   198,     6,     0,     3,     7,   150,   197,
     5,   203,     3,   203,   326,   198,     6,     0,     3,     7,
   151,   197,     5,   203,     3,   203,   326,   203,   326,   198,
     6,     0,     3,     7,   158,   197,     5,   203,     3,   203,
   326,   203,   326,   198,     6,     0,     3,     7,   152,   197,
     5,   203,     3,   203,   326,   198,     6,     0,     3,     7,
   162,   197,     5,   203,     3,   203,   326,   203,   326,   198,
     6,     0,     3,     7,   153,   197,     5,   203,     3,   203,
   334,   203,   334,   203,   325,   203,   325,   198,     6,     0,
     3,     7,   154,   197,     5,   203,   334,   198,     6,     0,
     3,     7,   155,   197,   156,   203,   325,   203,     3,   198,
     6,     0,     3,     7,   157,   197,     5,   203,   334,   203,
   325,   198,     6,     0,     3,     7,   159,   197,     5,   203,
     5,   203,     3,   203,     3,   198,     6,     0,     3,     7,
   160,   197,     5,   203,     5,   203,     3,   198,     6,     0,
     3,     7,   161,   197,     3,   203,     3,   198,     6,     0,
     0,   215,   216,     0,   218,     0,   217,     0,   300,     0,
   301,     0,   302,     0,   305,     0,   306,     0,   307,     0,
   308,     0,   311,     0,   323,     0,   324,     0,   310,     0,
   309,     0,    33,   197,     5,   198,     6,     0,    33,   197,
     5,   203,   336,   198,     6,     0,     4,     5,   204,   219,
   205,     6,     0,     4,     5,     4,   328,   204,   219,   205,
     6,     0,     0,   219,   221,     0,   219,   224,     0,   219,
   227,     0,   219,   230,     0,   219,   233,     0,   219,   236,
     0,   219,   239,     0,   219,   242,     0,   219,   245,     0,
   219,   248,     0,   219,   251,     0,   219,   254,     0,   219,
   257,     0,   219,   260,     0,   219,   263,     0,   219,   266,
     0,   219,   269,     0,   219,   272,     0,   219,   275,     0,
   219,   278,     0,   219,   281,     0,   219,   284,     0,   219,
   287,     0,   219,   290,     0,   219,   293,     0,   219,   296,
     0,   326,     0,   220,   203,   326,     0,     0,    72,   197,
   326,   203,   326,   203,   326,   198,   222,   204,   220,   205,
     6,     0,   326,     0,   223,   203,   326,     0,     0,    73,
   197,   326,   203,   326,   203,   326,   198,   225,   204,   223,
   205,     6,     0,   326,     0,   226,   203,   326,     0,     0,
    74,   197,   326,   203,   326,   203,   326,   198,   228,   204,
   226,   205,     6,     0,   326,     0,   229,   203,   326,     0,
     0,    75,   197,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   231,   204,   229,   205,     6,
     0,   326,     0,   232,   203,   326,     0,     0,    76,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   234,   204,   232,   205,     6,     0,   326,     0,
   235,   203,   326,     0,     0,    77,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   198,   237,
   204,   235,   205,     6,     0,   326,     0,   238,   203,   326,
     0,     0,    78,   197,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   240,   204,   238,   205,     6,     0,   326,     0,
   241,   203,   326,     0,     0,    79,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   243,   204,   241,   205,     6,
     0,   326,     0,   244,   203,   326,     0,     0,    80,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   198,   246,   204,
   244,   205,     6,     0,   326,     0,   247,   203,   326,     0,
     0,    81,   197,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   198,   249,   204,   247,
   205,     6,     0,   326,     0,   250,   203,   326,     0,     0,
    82,   197,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   198,   252,   204,   250,   205,
     6,     0,   326,     0,   253,   203,   326,     0,     0,    83,
   197,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   255,   204,   253,   205,     6,
     0,   326,     0,   256,   203,   326,     0,     0,    84,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   198,   258,   204,   256,   205,     6,     0,
   326,     0,   259,   203,   326,     0,     0,    85,   197,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   198,   261,   204,   259,   205,     6,     0,   326,
     0,   262,   203,   326,     0,     0,    86,   197,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   264,   204,   262,   205,     6,     0,   326,     0,
   265,   203,   326,     0,     0,    87,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   198,   267,   204,   265,   205,     6,
     0,   326,     0,   268,   203,   326,     0,     0,    88,   197,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   198,   270,   204,
   268,   205,     6,     0,   326,     0,   271,   203,   326,     0,
     0,    89,   197,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   198,   273,   204,   271,   205,     6,     0,   326,     0,   274,
   203,   326,     0,     0,    90,   197,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   198,   276,   204,   274,   205,     6,     0,   326,     0,
   277,   203,   326,     0,     0,    91,   197,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   198,   279,   204,   277,   205,     6,     0,   326,
     0,   280,   203,   326,     0,     0,    92,   197,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   198,   282,   204,   280,   205,     6,     0,
   326,     0,   283,   203,   326,     0,     0,    93,   197,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   198,   285,
   204,   283,   205,     6,     0,   326,     0,   286,   203,   326,
     0,     0,    94,   197,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   203,   326,   203,   326,   203,
   326,   203,   326,   198,   288,   204,   286,   205,     6,     0,
   326,     0,   289,   203,   326,     0,     0,    95,   197,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   203,   326,
   203,   326,   203,   326,   203,   326,   203,   326,   198,   291,
   204,   289,   205,     6,     0,   340,     0,   292,   203,   340,
     0,     0,    96,   197,   326,   203,   326,   203,   326,   198,
   294,   204,   292,   205,     6,     0,   340,     0,   295,   203,
   340,     0,     0,    97,   197,   326,   203,   326,   203,   326,
   203,   326,   198,   297,   204,   295,   205,     6,     0,     7,
     0,   172,     0,   173,     0,   174,     0,   175,     0,   193,
     0,   194,     0,     4,   298,   326,     6,     0,     4,   199,
   326,   200,   298,   326,     6,     0,     4,   199,   204,   336,
   205,   200,   298,   334,     6,     0,     4,   199,   200,     7,
   334,     6,     0,     4,   299,     6,     0,     4,   199,   326,
   200,   299,     6,     0,     4,   201,     4,     7,   340,     6,
     0,     4,   199,   326,   200,   201,     4,     7,   340,     6,
     0,     4,   201,     4,   298,   326,     6,     0,     4,   199,
   326,   200,   201,     4,   298,   326,     6,     0,     4,   201,
     4,   299,     6,     0,     4,   199,   326,   200,   201,     4,
   299,     6,     0,     4,   201,   106,   201,     4,     7,   337,
     6,     0,     4,   199,   326,   200,   201,   106,   201,     4,
     7,   337,     6,     0,     4,   201,   107,     7,   338,     6,
     0,     4,   199,   326,   200,   201,   107,     7,   338,     6,
     0,    58,   197,     4,   198,   201,     4,     7,   326,     6,
     0,    58,   197,     4,   198,   201,     4,     7,   340,     6,
     0,    38,   197,   326,   198,     7,   328,     6,     0,    54,
    38,   197,   326,   198,     7,   334,     6,     0,    70,    38,
   334,     7,   204,   326,   203,   326,   203,   326,   205,     6,
     0,    45,    46,   334,     7,   326,     6,     0,    41,   197,
   326,   198,     7,   334,     6,     0,    43,   197,   326,   198,
     7,   334,     6,     0,    39,   197,   326,   198,     7,   334,
     6,     0,    39,   197,   326,   198,     7,   334,    49,   328,
     6,     0,    40,   197,   326,   198,     7,   334,     6,     0,
    40,   197,   326,   198,     7,   334,    49,   328,     6,     0,
    47,   197,   326,   198,     7,   204,   326,   203,   326,   203,
     5,   203,     5,   203,     5,   205,     6,     0,    99,   197,
   326,   198,     7,   334,     6,     0,   100,   197,   326,   198,
     7,   334,     6,     0,   101,   197,   326,   198,     7,   334,
   105,   334,   102,   326,     6,     0,    41,    65,   197,   326,
   198,     7,   334,     6,     0,    70,    41,   334,     7,   204,
   326,   203,   326,   203,   326,   205,     6,     0,    54,    41,
   197,   326,   198,     7,   334,     6,     0,    49,    42,   197,
   326,   198,     7,   334,     6,     0,    50,    42,   197,   326,
   198,     7,   334,     6,     0,   117,    42,   197,   326,   198,
     7,   204,   326,   203,   334,   205,     6,     0,    51,    42,
   204,   326,   205,     7,   197,   326,   203,   326,   198,   334,
   334,     6,     0,    51,    42,   197,   326,   198,     7,   197,
   326,   203,   326,   198,   334,   334,     6,     0,   101,    42,
   103,   104,   197,   326,   198,     7,   332,   105,   204,   334,
   203,   334,   205,   102,   204,   326,   203,   326,   205,     6,
     0,   101,    42,   197,   326,   198,     7,   332,   105,   204,
   334,   203,   334,   205,   102,   204,   326,   203,   326,   205,
     6,     0,    42,    65,   197,   326,   198,     7,   334,     6,
     0,    54,    42,   197,   326,   198,     7,   334,     6,     0,
    53,    44,   197,   326,   198,     7,   334,     6,     0,    44,
   197,   326,   198,     7,   334,     6,     0,    54,    44,   197,
   326,   198,     7,   334,     6,     0,    60,   328,   204,   303,
   205,     0,    59,   204,   328,   203,   328,   203,   326,   205,
   204,   303,   205,     0,    61,   328,   204,   303,   205,     0,
    62,   204,   328,   203,   326,   205,   204,   303,   205,     0,
   305,     0,   304,     0,   302,     0,     0,   304,   301,     0,
   304,    38,   204,   336,   205,     6,     0,   304,    41,   204,
   336,   205,     6,     0,   304,    42,   204,   336,   205,     6,
     0,   304,    44,   204,   336,   205,     6,     0,    64,   204,
   304,   205,     0,    64,     4,   199,   326,   200,     6,     0,
    67,   204,   304,   205,     0,    67,     4,   199,   326,   200,
     6,     0,    67,     4,     6,     0,   106,   337,   204,   304,
   205,     0,   118,   340,     6,     0,   119,   340,     6,     0,
   118,   204,   304,   205,     0,   119,   204,   304,   205,     0,
     4,   340,     6,     0,     4,     4,   199,   326,   200,   340,
     6,     0,     4,   326,     6,     0,    58,   197,     4,   198,
   201,     4,     6,     0,    98,     4,     6,     0,   113,     6,
     0,    37,     6,     0,   108,   197,   326,     8,   326,   198,
     0,   108,   197,   326,     8,   326,     8,   326,   198,     0,
   108,     4,   109,   204,   326,     8,   326,   205,     0,   108,
     4,   109,   204,   326,     8,   326,     8,   326,   205,     0,
   110,     0,   116,     4,     0,   114,     0,   115,     4,     6,
     0,   111,   197,   326,   198,     0,   112,     0,    63,    38,
   204,   326,   203,   328,   205,     6,     0,    63,    38,   204,
   326,   203,   328,   203,   328,   203,   326,   205,     6,     0,
    63,    38,   204,   326,   203,   328,   203,   328,   203,   328,
   203,   326,   205,     6,     0,     0,    63,    38,   204,   326,
   203,   328,   205,   312,   204,   321,   205,     6,     0,     0,
    63,    38,   204,   326,   203,   328,   203,   328,   203,   326,
   205,   313,   204,   321,   205,     6,     0,     0,    63,    38,
   204,   326,   203,   328,   203,   328,   203,   328,   203,   326,
   205,   314,   204,   321,   205,     6,     0,    63,    41,   204,
   326,   203,   328,   205,     6,     0,    63,    41,   204,   326,
   203,   328,   203,   328,   203,   326,   205,     6,     0,    63,
    41,   204,   326,   203,   328,   203,   328,   203,   328,   203,
   326,   205,     6,     0,     0,    63,    41,   204,   326,   203,
   328,   205,   315,   204,   321,   205,     6,     0,     0,    63,
    41,   204,   326,   203,   328,   203,   328,   203,   326,   205,
   316,   204,   321,   205,     6,     0,     0,    63,    41,   204,
   326,   203,   328,   203,   328,   203,   328,   203,   326,   205,
   317,   204,   321,   205,     6,     0,    63,    42,   204,   326,
   203,   328,   205,     6,     0,    63,    42,   204,   326,   203,
   328,   203,   328,   203,   326,   205,     6,     0,    63,    42,
   204,   326,   203,   328,   203,   328,   203,   328,   203,   326,
   205,     6,     0,     0,    63,    42,   204,   326,   203,   328,
   205,   318,   204,   321,   205,     6,     0,     0,    63,    42,
   204,   326,   203,   328,   203,   328,   203,   326,   205,   319,
   204,   321,   205,     6,     0,     0,    63,    42,   204,   326,
   203,   328,   203,   328,   203,   328,   203,   326,   205,   320,
   204,   321,   205,     6,     0,   322,     0,   321,   322,     0,
    71,   204,   334,   203,   334,   203,   334,   205,     6,     0,
    71,   204,   334,   203,   334,   205,     6,     0,    66,     6,
     0,    52,    41,   334,     7,   326,     6,     0,    52,    41,
   334,     7,   326,    55,    57,   326,     6,     0,    52,    41,
   334,     7,   326,    55,    56,   326,     6,     0,    52,    42,
   204,   326,   205,     7,   334,     6,     0,    48,    42,   204,
   326,   205,     7,   334,     6,     0,    52,    44,   204,   326,
   205,     7,   334,     6,     0,    66,    42,   334,     7,   326,
     6,     0,    66,    42,   334,     6,     0,    68,     6,     0,
    69,     6,     0,   123,     0,   124,     0,   125,     0,   126,
     0,   127,     0,   327,     0,   197,   326,   198,     0,   187,
   326,     0,   186,   326,     0,   192,   326,     0,   326,   187,
   326,     0,   326,   186,   326,     0,   326,   188,   326,     0,
   326,   189,   326,     0,   326,   190,   326,     0,   326,   196,
   326,     0,   326,   182,   326,     0,   326,   184,   326,     0,
   326,   183,   326,     0,   326,   185,   326,     0,   326,   179,
   326,     0,   326,   180,   326,     0,   326,   178,   326,     0,
   326,   177,   326,     0,   326,   176,   326,     8,   326,     0,
    12,   197,   326,   198,     0,    13,   197,   326,   198,     0,
    14,   197,   326,   198,     0,    15,   197,   326,   198,     0,
    16,   197,   326,   198,     0,    17,   197,   326,   198,     0,
    18,   197,   326,   198,     0,    19,   197,   326,   198,     0,
    20,   197,   326,   198,     0,    22,   197,   326,   198,     0,
    23,   197,   326,   203,   326,   198,     0,    24,   197,   326,
   198,     0,    25,   197,   326,   198,     0,    26,   197,   326,
   198,     0,    27,   197,   326,   198,     0,    28,   197,   326,
   198,     0,    29,   197,   326,   198,     0,    30,   197,   326,
   203,   326,   198,     0,    31,   197,   326,   203,   326,   198,
     0,    32,   197,   326,   203,   326,   198,     0,    21,   197,
   326,   198,     0,    12,   199,   326,   200,     0,    13,   199,
   326,   200,     0,    14,   199,   326,   200,     0,    15,   199,
   326,   200,     0,    16,   199,   326,   200,     0,    17,   199,
   326,   200,     0,    18,   199,   326,   200,     0,    19,   199,
   326,   200,     0,    20,   199,   326,   200,     0,    22,   199,
   326,   200,     0,    23,   199,   326,   203,   326,   200,     0,
    24,   199,   326,   200,     0,    25,   199,   326,   200,     0,
    26,   199,   326,   200,     0,    27,   199,   326,   200,     0,
    28,   199,   326,   200,     0,    29,   199,   326,   200,     0,
    30,   199,   326,   203,   326,   200,     0,    31,   199,   326,
   203,   326,   200,     0,    32,   199,   326,   203,   326,   200,
     0,    21,   199,   326,   200,     0,     3,     0,     9,     0,
    10,     0,    11,     0,     4,     0,     4,   199,   326,   200,
     0,   202,     4,   199,   200,     0,     4,   299,     0,     4,
   199,   326,   200,   299,     0,     4,   201,     4,     0,     4,
   199,   326,   200,   201,     4,     0,     4,   201,     4,   299,
     0,     4,   199,   326,   200,   201,     4,   299,     0,   329,
     0,   187,   328,     0,   186,   328,     0,   328,   187,   328,
     0,   328,   186,   328,     0,   204,   326,   203,   326,   203,
   326,   203,   326,   203,   326,   205,     0,   204,   326,   203,
   326,   203,   326,   203,   326,   205,     0,   204,   326,   203,
   326,   203,   326,   205,     0,   197,   326,   203,   326,   203,
   326,   198,     0,     0,   197,   331,   198,     0,     5,     0,
   331,   203,     5,     0,     0,   204,   333,   205,     0,   197,
   333,   198,     0,   334,     0,   333,   203,   334,     0,   326,
     0,   335,     0,   204,   336,   205,     0,   187,   204,   336,
   205,     0,   326,     8,   326,     0,   326,     8,   326,     8,
   326,     0,    38,   204,   326,   205,     0,   302,     0,   305,
     0,   311,     0,     4,   199,   200,     0,   187,     4,   199,
   200,     0,     4,   199,   204,   336,   205,   200,     0,   187,
     4,   199,   204,   336,   205,   200,     0,   326,     0,   335,
     0,   336,   203,   326,     0,   336,   203,   335,     0,   204,
   326,   203,   326,   203,   326,   203,   326,   205,     0,   204,
   326,   203,   326,   203,   326,   205,     0,     4,     0,     4,
   201,   106,   201,     4,     0,   204,   339,   205,     0,     4,
   199,   326,   200,   201,   107,     0,   337,     0,   339,   203,
   337,     0,     5,     0,    35,   197,   340,   203,   340,   198,
     0,    36,   197,   340,   198,     0,    34,   197,   340,   198,
     0,    34,   197,   340,   203,   336,   198,     0,    34,   197,
     4,   201,     4,   198,     0,    34,   197,     4,   199,   326,
   200,   201,     4,   198,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   160,   162,   163,   164,   169,   171,   174,   176,   179,   187,
   201,   218,   220,   223,   225,   226,   229,   235,   240,   241,
   242,   245,   249,   252,   258,   263,   269,   277,   282,   286,
   292,   297,   301,   306,   310,   313,   318,   322,   326,   330,
   335,   339,   342,   346,   350,   354,   358,   362,   366,   369,
   373,   376,   380,   383,   390,   392,   395,   397,   398,   399,
   400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
   412,   417,   433,   438,   444,   449,   450,   451,   452,   453,
   454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
   464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
   474,   477,   480,   484,   490,   496,   499,   503,   510,   519,
   522,   526,   533,   542,   545,   549,   558,   567,   570,   574,
   583,   592,   595,   599,   608,   617,   620,   624,   637,   646,
   649,   653,   666,   675,   678,   682,   695,   704,   707,   711,
   725,   734,   737,   741,   755,   764,   767,   771,   785,   794,
   797,   801,   815,   824,   827,   831,   845,   854,   857,   861,
   875,   884,   887,   891,   915,   924,   927,   931,   955,   964,
   967,   971,   995,  1004,  1007,  1011,  1030,  1039,  1042,  1046,
  1065,  1074,  1077,  1081,  1100,  1109,  1112,  1116,  1134,  1143,
  1146,  1150,  1168,  1177,  1180,  1184,  1202,  1211,  1217,  1224,
  1232,  1238,  1244,  1251,  1259,  1268,  1270,  1271,  1272,  1273,
  1276,  1278,  1281,  1313,  1349,  1398,  1414,  1424,  1442,  1455,
  1471,  1496,  1522,  1535,  1551,  1564,  1580,  1599,  1621,  1630,
  1644,  1664,  1680,  1699,  1718,  1736,  1754,  1772,  1798,  1816,
  1842,  1861,  1885,  1909,  1935,  1952,  1970,  1989,  2008,  2047,
  2072,  2094,  2110,  2129,  2148,  2164,  2183,  2200,  2217,  2237,
  2243,  2248,  2253,  2260,  2262,  2263,  2266,  2271,  2275,  2291,
  2307,  2323,  2343,  2357,  2367,  2377,  2381,  2390,  2404,  2412,
  2417,  2428,  2441,  2482,  2496,  2511,  2520,  2529,  2533,  2544,
  2560,  2574,  2599,  2624,  2651,  2657,  2662,  2667,  2671,  2679,
  2693,  2704,  2715,  2720,  2731,  2736,  2747,  2752,  2765,  2783,
  2801,  2819,  2824,  2842,  2847,  2865,  2870,  2891,  2908,  2925,
  2942,  2947,  2964,  2970,  2987,  2993,  3012,  3016,  3021,  3048,
  3072,  3080,  3099,  3117,  3135,  3162,  3188,  3214,  3228,  3246,
  3251,  3260,  3262,  3263,  3264,  3265,  3268,  3270,  3271,  3272,
  3273,  3274,  3275,  3276,  3277,  3284,  3285,  3286,  3287,  3288,
  3289,  3290,  3291,  3292,  3293,  3294,  3295,  3296,  3297,  3298,
  3299,  3300,  3301,  3302,  3303,  3304,  3305,  3306,  3307,  3308,
  3309,  3310,  3311,  3312,  3313,  3314,  3315,  3317,  3318,  3319,
  3320,  3321,  3322,  3323,  3324,  3325,  3326,  3327,  3328,  3329,
  3330,  3331,  3332,  3333,  3334,  3335,  3336,  3337,  3342,  3347,
  3348,  3349,  3353,  3365,  3384,  3397,  3409,  3431,  3448,  3465,
  3482,  3501,  3506,  3510,  3514,  3518,  3524,  3529,  3533,  3537,
  3543,  3547,  3552,  3556,  3561,  3565,  3569,  3575,  3581,  3588,
  3594,  3598,  3602,  3613,  3620,  3631,  3651,  3661,  3671,  3683,
  3699,  3717,  3740,  3767,  3773,  3777,  3781,  3793,  3798,  3810,
  3816,  3836,  3841,  3854,  3860,  3866,  3871,  3879,  3893,  3897,
  3916,  3932
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ScalarPointValues",
"ScalarPoint","@1","VectorPointValues","VectorPoint","@2","TensorPointValues",
"TensorPoint","@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine",
"@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   206,   206,   206,   206,   207,   207,   208,   208,   209,   209,
   209,   210,   210,   211,   211,   211,   212,   212,   212,   212,
   212,   213,   213,   213,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   215,   215,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   217,   217,   218,   218,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   220,   220,   222,   221,   223,   223,   225,   224,   226,
   226,   228,   227,   229,   229,   231,   230,   232,   232,   234,
   233,   235,   235,   237,   236,   238,   238,   240,   239,   241,
   241,   243,   242,   244,   244,   246,   245,   247,   247,   249,
   248,   250,   250,   252,   251,   253,   253,   255,   254,   256,
   256,   258,   257,   259,   259,   261,   260,   262,   262,   264,
   263,   265,   265,   267,   266,   268,   268,   270,   269,   271,
   271,   273,   272,   274,   274,   276,   275,   277,   277,   279,
   278,   280,   280,   282,   281,   283,   283,   285,   284,   286,
   286,   288,   287,   289,   289,   291,   290,   292,   292,   294,
   293,   295,   295,   297,   296,   298,   298,   298,   298,   298,
   299,   299,   300,   300,   300,   300,   300,   300,   300,   300,
   300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   302,
   302,   302,   302,   303,   303,   303,   304,   304,   304,   304,
   304,   304,   305,   305,   306,   306,   306,   307,   308,   308,
   308,   308,   309,   309,   309,   309,   309,   309,   309,   310,
   310,   310,   310,   310,   310,   310,   310,   310,   310,   311,
   311,   311,   312,   311,   313,   311,   314,   311,   311,   311,
   311,   315,   311,   316,   311,   317,   311,   311,   311,   311,
   318,   311,   319,   311,   320,   311,   321,   321,   322,   322,
   322,   323,   323,   323,   323,   323,   323,   323,   323,   324,
   324,   325,   325,   325,   325,   325,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   328,   328,   328,   328,   328,   329,   329,   329,   329,
   330,   330,   331,   331,   332,   332,   332,   333,   333,   334,
   334,   334,   334,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   336,   336,   336,   336,   337,   337,   337,
   337,   338,   338,   339,   339,   340,   340,   340,   340,   340,
   340,   340
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    55,     1,     3,     0,    55,     1,
     3,     0,    55,     1,     3,     0,    43,     1,     3,     0,
    43,     1,     3,     0,    43,     1,     3,     0,    37,     1,
     3,     0,    37,     1,     3,     0,    37,     1,     3,     0,
    13,     1,     3,     0,    15,     1,     1,     1,     1,     1,
     1,     1,     4,     7,     9,     6,     3,     6,     6,     9,
     6,     9,     5,     8,     8,    11,     6,     9,     9,     9,
     7,     8,    12,     6,     7,     7,     7,     9,     7,     9,
    17,     7,     7,    11,     8,    12,     8,     8,     8,    12,
    14,    14,    22,    20,     8,     8,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     6,     6,
     6,     6,     4,     6,     4,     6,     3,     5,     3,     3,
     4,     4,     3,     7,     3,     7,     3,     2,     2,     6,
     8,     8,    10,     1,     2,     1,     3,     4,     1,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     1,     2,     9,     7,
     2,     6,     9,     9,     8,     8,     8,     6,     4,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     1,     1,     4,     4,     2,     5,     3,     6,     4,
     7,     1,     2,     2,     3,     3,    11,     9,     7,     7,
     0,     3,     1,     3,     0,     3,     3,     1,     3,     1,
     1,     3,     4,     3,     5,     4,     1,     1,     1,     3,
     4,     6,     7,     1,     1,     3,     3,     9,     7,     1,
     5,     3,     6,     1,     3,     1,     6,     4,     4,     6,
     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   294,
     0,   299,     0,   296,     0,     0,     0,     0,     0,    56,
    58,    57,    59,    60,    61,    62,    63,    64,    65,    70,
    69,    66,    67,    68,     0,     0,    17,    18,    20,    19,
    21,   431,   431,     0,   409,   413,   466,   206,   410,   411,
   412,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   207,   208,   209,   210,     0,
     0,     0,   211,   212,     0,     0,     0,     0,     0,     0,
     0,   347,     0,     0,   289,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   422,     0,     0,     0,     0,     0,
     0,   267,     0,     0,   267,   340,   341,     0,     0,     0,
     0,     0,     0,     0,   460,     0,     0,     0,     0,     0,
   288,     0,   295,     0,   466,   267,     0,   267,     0,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   416,     0,
    75,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   413,   350,   349,   351,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   217,
   285,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   283,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   413,     0,     0,     0,
   447,   448,   449,   440,     0,   441,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   424,   423,     0,     0,     0,     0,   267,   267,
     0,     0,     0,     0,     0,     0,     0,   277,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,     0,
   267,     0,     0,     0,   297,     0,     0,   279,     0,   280,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   433,     0,     0,     0,     0,     0,   418,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   348,     0,
     0,   454,   455,     0,     0,   206,     0,     0,     0,     0,
     0,   213,     0,   365,   364,   362,   363,   358,   360,   359,
   361,   353,   352,   354,   355,   356,   357,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   413,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   426,   425,   266,     0,   265,   264,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   273,   268,
   339,     0,     0,   275,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   298,     0,   281,   282,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   432,     0,     0,    23,     0,   414,   420,    75,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   367,   388,   368,   389,   369,   390,   370,   391,
   371,   392,   372,   393,   373,   394,   374,   395,   375,   396,
   387,   408,   376,   397,     0,     0,   378,   399,   379,   400,
   380,   401,   381,   402,   382,   403,   383,   404,     0,     0,
     0,     0,     0,     0,     0,     0,   469,     0,     0,   468,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   223,
     0,     0,     0,     0,   415,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   450,     0,     0,     0,
     0,   442,   444,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   260,   262,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   434,
     0,   431,     0,   417,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    73,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   414,   216,   456,   457,     0,
     0,     0,     0,     0,   218,   219,   221,     0,     0,   464,
     0,   227,   366,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   446,   451,     0,   443,     0,   234,     0,
     0,     0,     0,     0,     0,   332,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   274,     0,     0,     0,     0,   338,   276,     0,
     0,     0,     0,     0,   435,     0,   461,     0,     0,     0,
   290,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   342,   343,   344,   345,
   346,     0,     0,     0,     0,     0,     0,     0,    22,     0,
   419,   284,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   377,
   398,   384,   405,   385,   406,   386,   407,     0,   471,   470,
   467,     0,   206,     0,     0,     0,     0,   214,     0,     0,
     0,   462,    72,   231,   237,     0,   239,     0,     0,   235,
     0,   236,   258,     0,     0,   445,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   286,     0,     0,     0,     0,   267,     0,   303,     0,
   312,     0,   321,     0,     0,     0,     0,     0,     0,   242,
   243,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   431,   421,    74,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   224,     0,     0,   225,     0,   465,
     0,     0,   245,   255,   452,     0,     0,   336,   248,   249,
     0,     0,     0,     0,   335,   337,   257,   232,   247,   256,
   259,     0,     0,     0,   430,     0,   429,     0,     0,   300,
     0,     0,   309,     0,     0,   318,     0,   269,   270,   271,
   272,     0,     0,   435,     0,   438,     0,     0,     0,     0,
   459,     0,   292,   291,     0,     0,     0,     0,     0,    25,
     0,    34,     0,    38,     0,    32,     0,     0,    37,     0,
    42,    40,     0,     0,     0,     0,     0,     0,    49,     0,
     0,     0,     0,     0,    54,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   215,   220,   222,     0,   228,     0,
   238,   240,   453,     0,     0,     0,   334,   333,   229,   230,
   267,     0,   263,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   437,     0,   436,     0,     0,     0,     0,     0,
     0,     0,   435,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   472,
     0,   463,     0,     0,     0,     0,     0,   428,     0,     0,
     0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   439,     0,     0,   458,
   293,     0,     0,    39,     0,     0,     0,     0,    29,     0,
    35,     0,    41,    30,    43,     0,    46,     0,    50,    51,
     0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   226,     0,     0,     0,   261,     0,     0,   305,     0,
   331,     0,     0,   328,   314,     0,     0,   323,     0,     0,
     0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
   108,   112,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   200,     0,     0,     0,     0,   427,   301,
     0,     0,     0,   304,   310,     0,     0,   313,   319,     0,
     0,   322,   233,   246,     0,     0,   250,     0,     0,     0,
     0,     0,    33,    36,    44,     0,    45,    52,    47,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,     0,   316,     0,   325,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   204,     0,   252,   251,     0,   302,     0,     0,     0,   311,
     0,     0,   320,     0,     0,     0,     0,     0,     0,    28,
    31,     0,     0,     0,   102,     0,   106,     0,   110,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   198,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   306,     0,     0,   330,   315,     0,   324,     0,     0,     0,
     0,     0,     0,    48,    24,   103,   105,   107,   109,   111,
   113,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   199,   201,     0,   202,   241,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   116,   120,   124,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   308,
   329,   317,   326,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   203,
   205,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   254,    10,
     0,     0,     0,   114,     0,   118,     0,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   253,     0,    26,   115,   117,   119,   121,
   123,   125,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,   132,   136,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
     0,   130,     0,   134,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   127,   129,   131,   133,   135,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   140,   144,   148,   152,   156,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   138,     0,   142,     0,   146,     0,   150,     0,   154,
     0,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   139,   141,   143,   145,   147,   149,   151,   153,
   155,   157,   159,   161,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   188,
   192,   196,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   186,     0,   190,
     0,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   187,   189,   191,   193,   195,   197,     0,     0,     0,   176,
   180,   184,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   174,     0,
   178,     0,   182,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   175,   177,   179,   181,   183,
   185,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
   168,   172,     0,     0,     0,     0,     0,     0,     0,   162,
     0,   166,     0,   170,     0,     0,     0,     0,     0,     0,
   163,   165,   167,   169,   171,   173,     0,     0,     0
};

static const short yydefgoto[] = {  2337,
   212,     2,     9,     3,    19,    20,    21,    22,     4,    70,
    71,    72,   441,  1654,   657,  1561,  1656,   658,  1562,  1658,
   659,  1563,  1873,   660,  1819,  1875,   661,  1820,  1877,   662,
  1821,  2009,   663,  1971,  2011,   664,  1972,  2013,   665,  1973,
  2121,   666,  2091,  2123,   667,  2092,  2125,   668,  2093,  2127,
   669,  2094,  2129,   670,  2095,  2131,   671,  2096,  2319,   672,
  2313,  2321,   673,  2314,  2323,   674,  2315,  2268,   675,  2256,
  2270,   676,  2257,  2272,   677,  2258,  2217,   678,  2199,  2219,
   679,  2200,  2221,   680,  2201,  1681,   681,  1585,  1775,   682,
  1683,   139,   249,    73,   570,   341,   556,   557,   342,    77,
    78,    79,    80,    81,   343,  1211,  1531,  1637,  1214,  1536,
  1641,  1217,  1540,  1644,  1396,  1397,    83,    84,   992,   344,
   142,   363,   175,   244,   434,  1105,  1225,  1226,   346,   494,
   197,   744,   901,   143
};

static const short yypact[] = {  2965,
    64,   334,    18,  3215,-32768,-32768,-32768,  -111,-32768,   127,
    73,   135,   138,   149,   177,   -30,   -11,   109,-32768,-32768,
-32768,-32768,  2304,   113,   272,   117,   157,   166,   -43,   307,
   239,   244,   361,   250,   411,   419,   425,   430,   517,   442,
   512,   290,   286,   161,   161,   291,   246,     8,   460,     9,
   518,   524,    81,   530,   367,   368,   -13,    10,    26,-32768,
   375,-32768,   545,-32768,   589,   597,   612,    15,    23,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    13,  2824,-32768,-32768,-32768,-32768,
-32768,   481,   481,   679,-32768,   261,    11,-32768,-32768,-32768,
-32768,  -131,   123,   156,   185,   219,   238,   267,   274,   310,
   323,   386,   389,   408,   458,   459,   468,   469,   472,   473,
   477,   478,   506,   514,   520,-32768,-32768,-32768,-32768,  1723,
  1723,  1723,-32768,-32768,  1723,   974,    30,   729,  1723,   737,
   674,-32768,   748,   753,-32768,  1723,  1723,  1723,   568,  1723,
   569,  1723,  1723,   600,  1723,   567,   578,   586,  -152,   600,
   599,   651,   593,   598,   624,   668,   677,   768,   161,   161,
   161,  1723,  1723,  -112,-32768,   -89,   161,   673,   678,   680,
   684,-32768,   600,    72,-32768,-32768,-32768,   600,   600,   880,
  1723,  1723,   -77,  1723,   686,  1723,   685,   779,  1723,  1723,
-32768,   884,-32768,   694,-32768,-32768,   886,-32768,   888,-32768,
   893,    13,   701,   702,   703,   704,   705,   707,   708,   709,
   710,   711,   712,   713,   715,   719,   720,   722,   723,   724,
   728,   730,   731,   732,   733,   734,   735,   736,   741,   742,
   743,   744,   898,   739,   746,   745,  1723,   922,-32768,   161,
-32768,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,    50,    55,    55,   300,   749,   749,   749,
  1327,   939,  1844,  1255,   187,   750,   940,   751,  1083,-32768,
-32768,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,-32768,  -157, 11124, 11147,
 11170,  1723, 11193,  1723, 11216, 11239,   320,   764,  1366,  1844,
-32768,-32768,-32768,  2457,   945,-32768, 11262,  1723,  1723,  1723,
  1723,  1723,   962,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
   772,   -92,-32768,-32768,  1479,  3585,   161,   161,   538,   538,
   182,  1723,  1723,  1723,  1723,   706,    36,-32768,  1723,  2682,
   964,   965,-32768, 11285, 11308,   870,  1723, 11331,   873,  3607,
-32768,   776,  2472, 11354,-32768,  1723,  2704,-32768,  2726,-32768,
-32768,    13,   971,   976,  1002,  1003,  1004,  1005,  1006,  1007,
  1008,  1009,  1010,  1011,  1015,  1042,  1048,  1049,  1050,  1051,
  1052,  1053,  1056,  1058,  1059,   863,  1060,  1061,  1062,  1063,
  1066,  1065,-32768,   -98,  1067,  1068,  1072, 10449,   199,   -69,
  3091, 11377, 10474, 11400, 10499, 11423, 10524, 11446, 10549, 11469,
 10574, 11492, 10599, 11515, 10624, 11538, 10649, 11561, 10674, 11584,
 10699, 11607, 10724,  3629,  3651, 11630, 10749, 11653, 10774, 11676,
 10799, 11699, 10824, 11722, 10849, 11745, 10874,  3673,  3695,  3717,
  3739,  3761,  3783,   480,   -72,   868,   875,  1723,-32768,   600,
  2338,  2457,-32768,   482,    16,    55,  1723,  1073,  1074,    14,
   881,-32768,  2487,   243,   356,   295,   295,   256,   256,   256,
   256,   327,   327,   749,   749,   749,   749,  1076,  1844,  1078,
  1079,  1084, 11768,  1085, 11791,  1086,  1087,  1014,  1723,   332,
  1844,   485,  1723,  1723,  1088,  2380, 11814, 11837, 11860,  3044,
  1723,  3115,  3159, 11883, 11906, 11929, 11952, 11975,   879,   161,
  1723,  1723,-32768,-32768,-32768,   878,  2998,-32768,   891,  1723,
  3805,  3827,  3849, 10899,  -133,   -25,   -12,   -94,-32768,-32768,
-32768,  1723, 10924,-32768,   894,   895,  1090,  1094,   905, 11998,
  1096,   903,  1723,  2791,  1723,  1723,-32768, 12021,-32768,-32768,
   937,   907,   908,   909,   910,   912,   913,   914,   916,   917,
   918,   946,   947,   948,   949,   950,   952,   953,   954,   955,
   956,   959,   960,   966,   967,   969,   970,   972,   977,   978,
   979,-32768,  1101,   981,-32768,   982,    27,-32768,-32768,   951,
   968,   980,   987,   989,   990,   991,   992,   993,   994,   996,
   998,   999,  1000,  1001,  1013,  1016,  1018,  1020,  1022,  1023,
  1024,  1025,  1026,  1028,  1030,  1161,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1723,  1723,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1164,-32768,  1844,    55,-32768,
 10949,  1193,  1844,  1012,    89,  1723,  1196,  1197,  1281,-32768,
  1198,  1032,    10,  1202,-32768,  1723,-32768,    -5,   161,   600,
   600,  1225,   600,  1227,   600,   600,-32768,  1844,  3189,  1226,
   486,-32768,  2502,  1456,  1029,  1257,  1267,  1268,  1269,  1270,
   457,  1271,  1273,  1274,  1277,  1278,  1279,  1282,  1200,   188,
  3871,  3893,-32768,-32768,  3213,   161,   161,   161,  1284,  1844,
  1844,  1844,  1844,  1612,  1286,  1723,  1723,   600,   600,  1723,
  1287,   600,  1292,  3915,-32768,  2523,   777,  1293,  1119,  1296,
  1723,  1723,   161,  1298,  1299,  1115,  1302,  1303,   600,   600,
  1304,   161,  1306,  1308,   600,   600,  1311,  1312,  1313,  1314,
  1315,   600,   525,   600,  1316,  1317,  1318,  1321,  1322,-32768,
  1324,   481,  1323,-32768,  1351,  3117,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,-32768, 12044, 10974, 12067, 10999, 12090, 11024, 12113,
 11049, 11074,  1122,   141,  1130,   354,-32768,  2457,-32768,    29,
   276,  1157,  1352,  1809,-32768,-32768,-32768,    10,  1723,-32768,
   489,-32768, 12987,  1354,    19,    31,    32,   600,  1355,   600,
  1356,  1357,   490,-32768,-32768,  1844,-32768,  1723,-32768,  1723,
   600,   600,   600,  1168,  1175,-32768,   118,   600,   600,   600,
   600,   600,   600,   600,   714,  1723,  1723,  1723,  1169,  -104,
   -99,   137,-32768,   501,   504,   509,   513,-32768,-32768,  3937,
  3959,  1368,  1393, 12136,   -83,  1295,-32768,  1723,  1723,  1723,
-32768,  1199,  1236,  1201,  3981,  4003,   -34,  1203,  1204,  1205,
  1207,  1206,  1209,  1208,  1211,   159,  1212,  1218,  1219,  1216,
  1217,  1221,  1222,  1224,  1233,  1223,-32768,-32768,-32768,-32768,
-32768,  1243,  1245,  1246,  1272,  1275,  1231,  1276,-32768,  1305,
   199,-32768,  1404,  4025,  4047,  4069,  4091,  4113,  4135,  4157,
  4179,  4201,  4223,  4245,  4267,  4289,  4311,  4333,  4355,  4377,
  4399,  4421,  4443,  4465,  4487,  4509,  4531,  4553,  4575,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1300,-32768,-32768,
-32768,   600,    55,  1723,  1466,  1469,    14,-32768,  1468, 11099,
    10,-32768,-32768,-32768,-32768,   161,-32768,   161,  1470,-32768,
  1513,-32768,-32768,  1320,   519, 12987,  4597,  1545,  1548,  1549,
  1723,  1723,  1723,  1723,  1550,  1551,  1553,  1554,  1555,  1556,
  1559,-32768,  2397,  3243, 12159,  1964,   538,   161,  1560,   161,
  1561,   161,  1563,  1565,  1566,  1567,  1568,  1723,  1723,-32768,
-32768,  1517,   600,   600,  1471,   600,  2670,   391, 12182,  1723,
    13,  1572,  1723,   600,  1571,  1575,  1573,  1392,  1576,   525,
  1602,  1578,  1723,  1604,  1608,  1606,  1607,  1611,   525,  1723,
  1723,  1723,   600,  1609,  1613,   525,  1723,  1614,  1617,  1615,
  1723,   481,-32768,-32768,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1618,  1620,  1621,  1922,-32768,  1616,  1622,-32768,  1423,-32768,
    21,    90,-32768,-32768,-32768,  1429,  1723,-32768,-32768,-32768,
  4619,  4641,  2259,  2274,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2365,  1624,  1427,-32768,  1723,-32768,  1432,   201,-32768,
  1443,   203,-32768,  1445,   209,-32768,  1446,-32768,-32768,-32768,
-32768,  4663,  4685,   -83,   210,-32768,   522,  1447,  1558,  1723,
-32768,  1723,-32768,-32768,  4707,    13,  1472,  4729,  1473,-32768,
  1475,-32768,  1477,-32768,  1474,-32768,  1504, 12205,-32768,  1506,
-32768,-32768,  1476,  1514, 12228,  4751, 12251,  1508,-32768,  1515,
  1516,  4773,  1520,  1519,-32768,  4795,  1521,  4817,  4839,  4861,
  4883,  4905,  4927,  4949,  4971,  4993,  5015,  5037,  5059,  5081,
  5103,  5125,  5147,  5169,  5191,  5213,  5235,  5257,  5279,  5301,
  5323,  5345,  5367,  1523,-32768,-32768,-32768,    10,-32768,  1623,
-32768,-32768,-32768,  5389,  1723,  1723,-32768,-32768,-32768,-32768,
   538,  2717,-32768,  1518,   344,  1518,   344,  1518,   344,  1723,
  1723,  1626,-32768,   600,-32768,   600,  1723,  3273,  3297,   600,
    13,  1667,   -83,   525,  1713,  1723,  1712,   525,  1719,  1716,
  1722,  1750,  1751,  1723,  1752,   600,  1755,  1756,  1723,  1726,
  1757,  1723,  1759,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,-32768,
  1760,-32768,  1780, 12274, 12297,  1581,  1723,-32768,  1518,  1518,
  1723,  3321,   211,  1787,  1599,   -27,-32768,  3345,   214,     6,
  3369,   216,    67,  3393,  3417,  1600,-32768,  1562,  2424,-32768,
-32768,  1601,  1640,-32768,  1610,  1619,  1642,  5411,-32768,  1625,
-32768,  1648,-32768,-32768,-32768, 12320,-32768,  1646,-32768,-32768,
 12343,  1652,-32768, 12366,  1649, 12389, 12412, 12435,  5433,  5455,
  5477,  5499,  5521,  5543,  5565,  5587,  5609,  5631,  5653,  5675,
  5697,  5719,  5741,  5763,  5785,  5807,  5829,  5851,  5873, 12458,
  5895,-32768,  1675,   600,   600,-32768,  3441,  2957,  1801,  1723,
-32768,   600,  1803,-32768,  1804,  1723,  1805,  1806,  1723,  1808,
  1810,  1811,   600,   600,-32768,  1812,    13,   525,   525,   525,
   525,  1814,  1815,  1845,   525,  1874,  1895,  1896,  1906,-32768,
-32768,-32768,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,-32768,  1723,  1907,   600,   600,-32768,-32768,
  1709,  3465,  1711,-32768,-32768,  1714,  3489,-32768,-32768,  1715,
  3513,-32768,-32768,-32768,  1718,  1717,-32768,    13,  1720,  1721,
  1728,  1729,-32768,-32768,-32768,  1727,-32768,-32768,-32768,  1744,
  1725,  1745,  1746,  5917,  5939,  5961,  5983,  6005,  6027,  6049,
  6071,  6093,  6115,  6137,  6159,  6181,  6203,  6225,  6247,  6269,
  6291,  6313,  6335,  6357,  1747, 12481,  1749,  1910,  1911,   344,
  1925,   600,   344,  1942,   344,  1947,   600,  1852,    13,   525,
   525,  1950,  1951,   525,  1953,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,    55,
-32768,  1954,-32768,-32768,    74,-32768,  1758,   523,    76,-32768,
  1761,    77,-32768,  1762,  1785,  1796,  1795,  1798,  1799,-32768,
-32768,  1763,  1765,   526, 12987,   527, 12987,   533, 12987,  6379,
  6401,  6423,  6445,  6467,  6489,  6511,  6533,  6555,  6577,  6599,
  6621,  6643,  6665,  6687,  6709,  6731,  6753,  6775,  6797,  6819,
   536,-32768,  1800,  1802,  1958,   344,   600,  1997,  2000,   344,
  2003,   344,  1909,  1723,    13,   525,   600,  2007,  2023,  1723,
  2026,  1723,  2027,  1723,  2028,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,    55,  2029,    55,  2031,
-32768,    80,  1833,-32768,-32768,    99,-32768,   116,  1835,  6841,
    13,  1837,  1839,-32768,-32768, 12987,-32768, 12987,-32768, 12987,
-32768, 12504, 12527, 12550,  6863,  6885,  6907,  6929,  6951,  6973,
  6995,  7017,  7039,  7061,  7083,  7105,  7127,  7149,  7171,  7193,
  7215,  7237,-32768,-32768,   537,-32768,-32768,  2037,  2038,  2039,
  2041,  1723,  1723,    13,   525,   600,-32768,-32768,-32768,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,    55,  2042,-32768,
-32768,-32768,-32768,  7259,  3537,  1879,  1847,  1848,  1849,  1850,
  1851,  7281,  7303,  7325,  7347,  7369,  7391,  7413,  7435,  7457,
  7479,  7501,  7523,  7545,  7567,  7589,  7611,  7633,  7655,-32768,
-32768,  1723,  2046,  1885,   600,   525,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  3561,-32768,-32768,
  1854,  1869,   558, 12987,   559, 12987,   575, 12987,  7677,  7699,
  7721,  7743,  7765,  7787,  7809,  7831,  7853,  7875,  7897,  7919,
  7941,  7963,  7985,  8007,  8029,  8051,  2062,   600,  2063,  1723,
  2064,  1723,  2065,  1723,  2066,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,-32768,  1870,-32768, 12987,-32768, 12987,-32768,
 12987,-32768, 12573, 12596, 12619,  8073,  8095,  8117,  8139,  8161,
  8183,  8205,  8227,  8249,  8271,  8293,  8315,  8337,  8359,  8381,
   600,-32768,-32768,-32768,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1871,
  1872,  1873,  1875,  8403,  8425,  8447,  8469,  8491,  8513,  8535,
  8557,  8579,  8601,  8623,  8645,  8667,  8689,  8711,   600,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1877,   576, 12987,
   579, 12987,   588, 12987,  8733,  8755,  8777,  8799,  8821,  8843,
  8865,  8887,  8909,  8931,  8953,  8975,  8997,  9019,  9041,   525,
  1723,  2069,  1723,  2072,  1723,  2075,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1884, 12987,-32768, 12987,-32768, 12987,-32768, 12642, 12665,
 12688, 12711, 12734, 12757,  9063,  9085,  9107,  9129,  9151,  9173,
  9195,  9217,  9239,  2097,-32768,-32768,-32768,-32768,-32768,-32768,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,-32768,
  1912,  1913,  1916,  1918,  1920,  1924,  9261,  9283,  9305,  9327,
  9349,  9371,  9393,  9415,  9437,  1723,  1723,  1723,  1723,  1723,
  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
   591, 12987,   595, 12987,   596, 12987,   605, 12987,   606, 12987,
   609, 12987,  9459,  9481,  9503,  9525,  9547,  9569,  9591,  9613,
  9635,  1723,  2107,  1723,  2108,  1723,  2109,  1723,  2120,  1723,
  2124,  1723,  2139,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  1723,  1723, 12987,-32768, 12987,-32768, 12987,-32768, 12987,-32768,
 12987,-32768, 12987,-32768,  9657,  9679,  9701,  9723,  9745,  9767,
 12780, 12803, 12826,  1723,  1723,  1723,  1723,  1723,  1723,-32768,
-32768,-32768,  9789,  9811,  9833,  9855,  9877,  9899,  1952,  1955,
  1966,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1723,
  9921,  9943,  9965,  9987, 10009, 10031,   610, 12987,   613, 12987,
   614, 12987,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  2149,
  1723,  2151,  1723,  2152, 10053, 10075, 10097, 12849, 12872, 12895,
 12987,-32768, 12987,-32768, 12987,-32768,  1723,  1723,  1723,-32768,
-32768,-32768, 10119, 10141, 10163,  1967,  1968,  1969,  1723,  1723,
  1723,  1723,  1723,  1723, 10185, 10207, 10229,   617, 12987,   663,
 12987,   666, 12987,  1723,  1723,  1723,  1723,  2162,  1723,  2168,
  1723,  2169, 10251, 10273, 10295, 12987,-32768, 12987,-32768, 12987,
-32768,  1723,  1723,  1723, 10317, 10339, 10361,  1723,  1723,  1723,
 10383, 10405, 10427,  1723,  1723,  1723, 12918, 12941, 12964,-32768,
-32768,-32768,  1972,  1973,  1974,  1723,  1723,  1723,   670, 12987,
   675, 12987,   676, 12987,  1723,  2182,  1723,  2183,  1723,  2184,
 12987,-32768, 12987,-32768, 12987,-32768,  2191,  2192,-32768
};

static const short yypgoto[] = {-32768,
  -177,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1564,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -296,   -19,-32768,  2190,    -3,  -368,  -175,     1,-32768,
-32768,-32768,-32768,-32768,  2193,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, -1252, -1327,-32768,-32768, -1112,   -23,
-32768,   136,-32768,   -90,-32768, -1205,  1091,  1465,  -201,  -334,
  -732,  1149,-32768,   -21
};


#define	YYLAST		13183


static const short yytable[] = {   141,
    75,   559,   245,   140,    76,   532,   376,  1245,   497,   380,
   900,   181,   184,   195,   250,   210,  1254,   742,  1322,   205,
    10,   149,    98,  1261,  1054,   386,  1301,   205,   193,   198,
   397,   205,   399,   305,   402,    98,  1055,  1057,  1394,   149,
   518,   571,   572,  1395,   351,   519,   207,   209,   123,   124,
   125,   352,   151,   484,   205,    85,   123,   124,   125,   205,
   123,   124,   125,   146,  1400,   252,  1403,   253,  1474,     5,
   790,  1394,  1474,   367,   368,  1474,  1395,   378,    87,  1056,
  1058,   367,   368,   123,   124,   125,   367,   368,   123,   124,
   125,   369,   891,   367,   368,  1302,   367,   368,  1088,   622,
  1089,   493,   153,  1090,   623,  1091,   298,   299,   300,   793,
   550,   301,   304,  1103,   370,   309,   367,   368,   188,   387,
  1104,   189,   329,   330,   331,   727,   333,  1415,   335,   336,
   728,   347,  1394,    86,   629,   306,   307,  1395,   493,  1394,
    88,  1394,  1394,    89,  1395,  1394,  1395,  1395,   365,   366,
  1395,   367,   368,   150,    90,    11,    12,    13,    14,    15,
    16,    17,    18,  1115,  1394,  1049,    92,   384,   385,  1395,
   388,   150,   390,  1073,  1074,   393,   394,  1473,   791,   174,
   176,  1394,    91,   194,   748,    93,  1395,   126,   127,   128,
   129,   792,   904,   496,   892,   893,   761,   733,   736,   211,
   126,   127,   128,   129,   367,   368,   367,   368,   133,   134,
  1477,   182,   185,   196,   251,   584,   735,   743,   206,   133,
   134,  1416,   199,   438,   591,  1420,   208,   843,   442,   443,
   444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
   454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
   464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
   474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
   379,  1480,   485,   486,   487,   367,   368,   145,  1685,   492,
  1689,  1691,  1043,   178,  1778,   498,   179,   180,   503,   504,
   505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
   515,   516,   517,  1780,   362,    94,   364,  1474,   523,   144,
   525,  1474,   371,   146,  1474,   299,   492,   493,  1180,   254,
  1781,   255,   367,   368,   536,   537,   538,   539,   540,   493,
   542,   543,   544,   545,   546,   547,   548,  1635,  1040,  1092,
  1639,  1093,  1642,   733,   367,   368,   170,   171,   561,   562,
   563,   564,   256,   147,   257,   573,  1124,   172,   126,   127,
   128,   129,   148,   580,   173,   555,   555,   367,   368,   558,
   558,   151,   588,   367,   368,  1549,  1550,  1551,  1552,   133,
   134,   258,  1556,   259,   560,   440,   367,   368,   367,   368,
   936,   133,   134,   884,   367,   368,   367,   368,  1232,   367,
   368,   367,   368,  1314,  1474,  1316,   154,  1323,  1474,  1394,
  1474,  1318,  1324,  1470,  1395,   260,  1476,   261,  1479,   628,
   314,   315,   316,   913,   317,   318,   319,   320,   321,   322,
   323,   324,   325,  1732,   262,   152,   263,  1736,   326,  1738,
   153,   321,   322,   323,   324,   325,   155,   126,   127,   128,
   129,   326,   156,   133,   134,   944,   945,   946,   947,   247,
   157,   248,   926,   264,   731,   265,   158,   299,   133,   134,
   266,   159,   267,   739,   738,   737,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   163,   168,  1648,  1649,   169,
   326,  1652,   133,   134,   177,   492,     6,     7,   488,     8,
   248,   183,   553,   554,   731,   759,   268,   492,   269,   763,
   764,   927,   133,   134,   323,   324,   325,   771,   528,   270,
   248,   271,   326,   186,   133,   134,   493,   781,   782,   187,
   760,   889,   248,   190,   315,   316,   785,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   133,   134,   794,   164,
   201,   326,   165,   166,   843,   167,   493,   160,   161,   804,
   162,   806,   807,   191,   192,  1381,   312,   313,   314,   315,
   316,   200,   317,   318,   319,   320,   321,   322,   323,   324,
   325,  1065,   272,  1742,   273,   274,   326,   275,   493,   493,
   493,   493,   202,  1042,  1044,  1233,    43,    44,    45,    46,
   203,    48,    95,   337,   276,   845,   277,   844,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   312,   313,   314,   315,   316,   338,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   987,   988,   989,
   990,   991,   326,   204,   278,   280,   279,   281,    43,    44,
    45,    46,    47,    48,   282,   284,   283,   285,   286,   288,
   287,   289,  1817,   290,   292,   291,   293,   243,   725,   311,
   726,   874,   875,   246,   733,   780,   734,   733,   733,   762,
   917,  1051,   733,  1052,  1064,   876,   877,   878,   879,   880,
   881,   882,   294,   733,   492,  1094,   733,   885,  1095,   888,
   295,   733,   894,  1096,   493,   733,   296,  1097,  1208,  1082,
  1083,   733,   903,  1186,  1324,  1687,  1325,  1688,  1700,  1702,
  1701,  1703,   308,  1872,   492,  1704,   731,  1705,  1727,  1808,
  1728,  1809,   310,   565,    27,    28,   566,   567,    31,   568,
    33,  1000,    34,   327,    36,    37,    38,   328,    40,    41,
  1900,  1902,  1901,  1903,   332,   334,   492,   492,   492,   492,
   348,   361,   950,   951,   349,    53,   954,  1904,  2031,  1905,
  2032,  2033,   350,  2034,   960,   130,   339,   965,   966,   356,
  2035,   132,  2036,  2142,   357,  2143,   135,  2144,  2146,  2145,
  2147,   138,   354,   340,    55,    56,    57,  2148,  2150,  2149,
  2151,  2152,  2229,  2153,  2230,  2231,  2233,  2232,  2234,  2277,
   358,  2278,    67,  1004,  1005,  1006,  1007,  1008,  1009,  1010,
  1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,  1020,
  1021,  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,   312,
   313,   314,   315,   316,   355,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   359,  2279,   844,  2280,  2281,   326,
  2282,  1045,  2325,   360,  2326,  1050,   372,  2327,  2329,  2328,
  2330,   373,   375,   374,   905,   383,   389,   392,   391,   395,
   396,   398,   492,   400,  1066,   401,  1067,   403,   404,   405,
   406,   407,   433,   408,   409,   410,   411,   412,   413,   414,
   569,   415,  1084,  1085,  1086,   416,   417,  2052,   418,   419,
   420,   940,   941,   942,   421,   439,   422,   423,   424,   425,
   426,   427,   428,  1236,  1107,  1108,  1109,   429,   430,   431,
   432,   435,  1386,   436,   326,   490,   500,   437,   967,   501,
   499,   534,   312,   313,   314,   315,   316,   976,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   529,   541,   549,
   575,   576,   326,   579,   961,   592,    95,   297,   582,   585,
   593,  1143,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   594,   595,   596,   597,
   598,   599,   600,   601,   602,   603,    95,   297,   615,   604,
  1174,  1173,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   605,  1191,  1192,  1193,
  1194,  1267,   606,   607,   608,   609,   610,   611,  1331,  1202,
   612,  1203,   613,   614,   616,   617,   618,   619,   620,   621,
   729,   624,   730,   625,  1222,  1223,   626,   741,   740,   779,
   745,   747,   783,   555,   749,   750,  1235,   558,   502,  1238,
   751,   753,   755,   756,   765,   784,   798,   796,   797,  1248,
   799,   800,   802,   803,   809,   840,  1255,  1256,  1257,   810,
   811,   812,   813,  1262,   814,   815,   816,  1266,   817,   818,
   819,  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,
  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  1286,
  1287,  1288,  1289,  1290,  1291,  1292,  1293,   847,   820,   821,
   822,   823,   824,  1413,   825,   826,   827,   828,   829,   130,
   131,   830,   831,  1304,   848,   132,   873,   883,   832,   833,
   135,   834,   835,   302,   836,   138,   849,   303,   841,   837,
   838,   839,  1312,   850,   842,   851,   852,   853,   854,   855,
   856,  1181,   857,  1182,   858,   859,   860,   861,   887,   130,
   131,   895,   896,   935,   898,   132,  1328,   902,  1329,   862,
   135,   890,   863,   757,   864,   138,   865,   758,   866,   867,
   868,   869,   870,  1209,   871,  1212,   872,  1215,    95,   297,
   899,   908,   920,   910,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   312,   313,
   314,   315,   316,   921,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   922,   923,   924,   925,   928,   326,   929,
   930,  1384,  1385,   931,   932,   933,   897,   963,   934,   943,
  1392,   949,  1398,   955,  1401,   957,  1404,  1405,   964,   962,
   968,   969,   970,  1409,   971,   972,   975,   555,   977,  1548,
   978,   558,  1418,   981,   982,   983,   984,   985,   994,  1039,
  1426,   995,   996,   997,   998,  1431,  1001,  1041,  1434,   999,
  1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,
  1446,  1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1455,
  1456,  1457,  1458,  1459,  1460,  1461,  1002,  1046,  1047,  1053,
  1060,  1062,  1063,  1467,  1071,   298,   299,  1468,    95,   530,
  1599,  1072,  1087,  1100,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,  1101,  1106,
  1111,  1117,  1110,  1112,  1119,  1116,  1121,  1118,  1120,  1144,
  1122,   130,   131,  1123,  1125,  1126,  1127,   132,  1128,  1129,
  1134,  1647,   135,  1130,  1131,   915,  1132,   138,  1140,   916,
   312,   313,   314,   315,   316,  1133,   317,   318,   319,   320,
   321,   322,   323,   324,   325,  1135,  1532,  1136,  1137,  1393,
   326,  1399,  1537,  1402,   495,  1541,   312,   313,   314,   315,
   316,   919,   317,   318,   319,   320,   321,   322,   323,   324,
   325,  1175,  1176,  1178,  1138,  1183,   326,  1139,  1141,  1564,
  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,  1574,
  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,  1584,
  1171,  1586,   312,   313,   314,   315,   316,  1142,   317,   318,
   319,   320,   321,   322,   323,   324,   325,  1741,  1184,  1185,
    95,   297,   326,  1224,   489,   364,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
  1188,   130,   131,  1189,  1190,  1195,  1196,   132,  1197,  1198,
  1199,  1200,   135,  1784,  1201,  1210,  1213,   138,  1216,   531,
  1218,  1219,  1220,  1221,  1237,  1228,  1240,  1241,  1242,  1243,
  1247,  1244,  1655,  1657,  1659,  1660,  1661,  1662,  1663,  1664,
  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,  1674,
  1675,  1676,  1677,  1678,  1679,  1680,  1816,  1246,  1682,  1249,
  1250,  1251,  1252,  1253,  1259,  1260,  1263,   948,   345,  1264,
  1265,  1294,  1298,  1300,   353,  1295,  1296,  1299,  1303,  1310,
  1311,   312,   313,   314,   315,   316,  1313,   317,   318,   319,
   320,   321,   322,   323,   324,   325,  1315,   377,  1317,  1319,
  1326,   326,   381,   382,   312,   313,   314,   315,   316,  1327,
   317,   318,   319,   320,   321,   322,   323,   324,   325,  1332,
  1740,  1337,  1414,  1341,   326,  1334,  1746,  1335,  1748,  1336,
  1750,   551,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,
  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,
  1770,  1771,  1772,  1389,  1390,  1773,  1338,  1776,  1340,   132,
  1346,  1342,  1347,  1348,  1391,  1417,  1351,  1419,  1422,   138,
  1380,   173,  1350,  1353,  1421,    95,   297,  1423,  1432,  1382,
  1406,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,  1424,  1425,  1427,  1814,  1815,
  1429,  1430,  1433,  1435,  1484,  1462,  1822,  1823,  1824,  1825,
  1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
  1836,  1837,  1838,  1839,  1463,  1466,  1840,   312,   313,   314,
   315,   316,  1471,   317,   318,   319,   320,   321,   322,   323,
   324,   325,  1472,  1483,  1487,  1486,  1530,   326,  1534,  1535,
  1538,  1539,  1488,  1542,  1048,  1543,  1544,  1547,  1868,  1553,
  1554,  1489,  1492,  1874,  1876,  1878,  1879,  1880,  1881,  1882,
  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,
  1893,  1894,  1895,  1896,  1490,  1493,    95,   337,  1495,  1497,
  1555,  1499,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,  1927,  1526,  1929,  1557,
  1931,   338,  1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,
  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,  1949,  1950,
  1558,  1559,    43,    44,    45,    46,    47,    48,   130,   131,
  1560,  1587,  1590,  1592,   132,  1633,  1634,  1593,  1595,   135,
  1597,  1598,  1600,  1601,   138,  1602,  1603,  1297,  1606,  1604,
  1636,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,
  1983,  1984,  1985,  1986,  1987,  1988,  1605,  1640,  1607,  1608,
  1630,  1632,  1643,  1646,   732,  1650,  1651,  1653,  1684,  1695,
  1698,  1686,  1699,  1731,  1690,  1692,  2010,  2012,  2014,  2015,
  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
  2026,  2027,  2028,  2029,   312,   313,   314,   315,   316,  1693,
   317,   318,   319,   320,   321,   322,   323,   324,   325,  1694,
  1696,  1697,  1734,  1729,   326,  1735,  1730,  2053,  1737,  2055,
  1739,  2057,  1744,  2059,  2060,  2061,  2062,  2063,  2064,  2065,
  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,  1745,   130,
   491,  1747,  1749,  1751,  1774,   132,  1777,  1779,  1782,  1785,
   135,  1786,  1810,  1811,  1812,   138,  1813,  1841,  1844,  1845,
  1846,  1869,  1847,  1848,  1849,  1870,  1898,  2097,  2098,  2099,
  2100,  2101,  2102,  2103,  2104,  2105,  1899,  1924,  1926,  1928,
  1930,  1932,  1951,  1989,  2054,  1990,  1991,  2056,  1992,  2030,
  2058,  2074,  2122,  2124,  2126,  2128,  2130,  2132,  2133,  2134,
  2135,  2136,  2137,  2138,  2139,  2140,  2141,   312,   313,   314,
   315,   316,  2090,   317,   318,   319,   320,   321,   322,   323,
   324,   325,  2164,  2166,  2168,  2106,  2107,   326,  2163,  2108,
  2165,  2109,  2167,  2110,  2169,  2170,  2171,  2111,  2173,  2172,
  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,   312,
   313,   314,   315,   316,  2174,   317,   318,   319,   320,   321,
   322,   323,   324,   325,  2242,  2208,  2244,  2246,  2209,   326,
  2193,  2194,  2195,  2196,  2197,  2198,  1206,  2287,  1207,  2210,
  2262,  2263,  2264,  2289,  2291,  2316,  2317,  2318,  2211,  2212,
  2213,  2214,  2215,  2216,  2218,  2220,  2222,  2332,  2334,  2336,
  2338,  2339,   846,    74,  1227,  1177,    82,     0,     0,  2235,
  2236,  2237,  2238,  2239,  2240,  2241,     0,  2243,     0,  2245,
     0,     0,     0,     0,   906,   907,     0,   909,     0,   911,
   912,     0,     0,  2253,  2254,  2255,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  2265,  2266,  2267,  2269,  2271,
  2273,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  2283,  2284,  2285,  2286,     0,  2288,     0,  2290,     0,     0,
     0,     0,   952,   953,  1307,     0,   956,     0,  2295,  2296,
  2297,     0,     0,     0,  2301,  2302,  2303,     0,     0,  1308,
  2307,  2308,  2309,   973,   974,     0,     0,     0,     0,   979,
   980,     0,  2320,  2322,  2324,     0,   986,     0,   993,     0,
     0,  2331,     0,  2333,     0,  2335,    95,    96,    97,     0,
    98,     0,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
    95,   530,     0,     0,     0,     0,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
  1309,     0,  1059,     0,  1061,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1068,  1069,  1070,     0,     0,
     0,     0,  1075,  1076,  1077,  1078,  1079,  1080,  1081,    95,
   297,   205,     0,     0,     0,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,  1485,
   123,   124,   125,     0,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   312,
   313,   314,   315,   316,   326,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   533,     0,     0,     0,     0,   326,
     0,     0,     0,     0,     0,   126,   127,   128,   129,   586,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
   131,     0,     0,     0,   746,   132,   133,   134,     0,     0,
   135,     0,   136,     0,   137,   138,  1172,     0,     0,   918,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   130,   131,     0,     0,     0,     0,   132,
   959,     0,     0,     0,   135,     0,     0,     0,     0,   138,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   312,   313,   314,   315,   316,
   326,   317,   318,   319,   320,   321,   322,   323,   324,   325,
  1229,     0,     0,     0,     0,   326,     0,     0,  1239,     0,
     0,     0,   130,   131,   766,     0,     0,     0,   132,     0,
     0,     0,     0,   135,     0,     0,     0,  1258,   138,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   312,   313,   314,
   315,   316,   326,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   312,   313,   314,   315,   316,   326,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   312,   313,   314,
   315,   316,   326,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,   565,
    27,    28,   566,   567,    31,   568,    33,     0,    34,     0,
    36,    37,    38,     0,    40,    41,     0,     0,     0,     0,
     0,   565,    27,    28,   566,   567,    31,   568,    33,     0,
    34,    53,    36,    37,    38,     0,    40,    41,     0,     0,
     0,     0,     0,   565,    27,    28,   566,   567,    31,   568,
    33,     0,    34,    53,    36,    37,    38,     0,    40,    41,
    55,    56,    57,     0,     0,     0,     0,     0,  1407,     0,
  1408,     0,     0,     0,  1412,    53,     0,     0,    67,     0,
     0,     0,    55,    56,    57,     0,     0,     0,     0,     0,
  1428,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    67,     0,     0,     0,    55,    56,    57,     0,   565,    27,
    28,   566,   567,    31,   568,    33,     0,    34,     0,    36,
    37,    38,    67,    40,    41,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
    53,     0,     0,     0,   213,   326,     0,     0,     0,     0,
     0,     0,  1230,     0,  1231,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   574,     0,     0,    55,
    56,    57,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,    67,   589,     0,
     0,     0,   326,     0,     0,     0,     0,     0,     0,  1387,
     0,  1388,     0,     0,     0,     0,     0,     0,  1527,  1528,
   590,     0,     0,     0,     0,     0,  1533,     0,     0,     0,
     0,     0,     0,   214,   215,   216,     0,  1545,  1546,     0,
     0,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,     0,     0,     0,    -7,     1,     0,   -12,   -55,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,     0,
   237,   238,   239,   240,   241,   242,     0,     0,     0,     0,
     0,  1588,  1589,     0,     0,   805,     0,   -55,     0,     0,
     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,
     0,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,
   -55,   -55,   -55,   -55,   -55,   565,    27,    28,   566,   567,
    31,   568,    33,     0,    34,     0,    36,    37,    38,     0,
    40,    41,     0,     0,     0,     0,  1638,     0,     0,     0,
     0,  1645,   -55,   -55,   -55,   -55,     0,    53,     0,     0,
   -55,     0,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,     0,
     0,     0,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
     0,     0,     0,     0,    67,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    -7,    -7,     0,
    -7,     0,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,  1733,   326,     0,   489,     0,     0,     0,     0,   551,
     0,  1743,   630,   631,   632,   633,   634,   635,   636,   637,
   638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
   648,   649,   650,   651,   652,   653,   654,   655,   630,   631,
   632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
   642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
   652,   653,   654,   655,     0,     0,     0,     0,    23,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,     0,     0,     0,     0,    24,   770,     0,
  1818,    25,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,    35,    36,    37,    38,    39,    40,    41,     0,
     0,     0,    42,    43,    44,    45,    46,    47,    48,     0,
    49,    50,    51,    52,    53,     0,     0,     0,     0,     0,
   312,   313,   314,   315,   316,   656,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,  1871,
   326,     0,    54,    55,    56,    57,     0,     0,     0,   772,
    58,  1003,    59,     0,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,     0,     0,
     0,     0,  1925,   773,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   312,   313,
   314,   315,   316,   914,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,     0,     0,     0,  1970,     0,   939,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,     0,     0,     0,     0,     0,  1204,   312,   313,
   314,   315,   316,  2008,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   312,   313,   314,   315,   316,  1410,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,     0,   312,   313,   314,   315,
   316,  1411,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   312,   313,   314,   315,   316,  1469,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,     0,     0,   312,   313,   314,   315,   316,  1475,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   312,   313,
   314,   315,   316,  1478,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   312,   313,   314,   315,   316,  1481,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,     0,   312,   313,   314,   315,
   316,  1482,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   312,   313,   314,   315,   316,  1529,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,     0,     0,   312,   313,   314,   315,   316,  1591,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   312,   313,
   314,   315,   316,  1594,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
     0,     0,   312,   313,   314,   315,   316,  1596,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,     0,     0,   312,   313,   314,   315,
   316,  1843,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,     0,     0,
   312,   313,   314,   315,   316,  1897,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,   552,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,   583,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,   705,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,   706,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,   719,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,   720,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,   721,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,   722,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,   723,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,   724,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,   786,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,   787,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,   788,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,   937,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,   938,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,   958,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1098,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1099,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1113,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1114,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1145,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1146,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1147,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1148,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1149,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1150,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1151,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1152,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1153,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1154,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1155,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1156,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1157,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1158,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1159,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1160,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1161,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1162,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1163,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1164,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1165,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1166,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1167,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1168,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1169,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1170,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1187,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1305,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1306,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1320,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1321,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1330,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1333,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1344,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1349,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1352,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1354,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1355,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1356,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1357,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1358,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1359,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1360,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1361,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1362,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1363,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1364,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1365,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1366,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1367,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1368,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1369,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1370,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1371,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1372,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1373,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1374,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1375,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1376,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1377,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1378,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1379,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1383,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1491,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1503,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1504,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1505,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1506,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1507,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1508,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1509,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1510,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1511,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1512,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1513,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1514,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1515,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1516,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1517,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1518,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1519,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1520,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1521,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1522,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1523,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1525,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1609,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1610,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1611,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1612,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1613,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1614,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1615,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1616,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1617,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1618,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1619,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1620,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1621,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1622,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1623,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1624,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1625,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1626,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1627,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1628,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1629,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1706,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1707,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1708,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1709,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1710,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1711,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1712,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1713,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1714,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1715,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1716,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1717,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1718,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1719,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1720,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1721,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1722,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1723,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1724,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1725,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1726,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1783,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1790,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1791,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1792,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1793,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1794,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1795,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1796,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1797,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1798,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1799,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1800,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1801,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1802,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1803,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1804,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1805,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1806,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1807,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1842,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1850,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1851,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1852,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1853,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1854,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1855,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1856,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1857,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1858,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1859,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1860,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1861,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1862,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1863,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1864,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1865,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1866,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1867,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1906,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1907,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1908,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1909,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1910,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1911,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1912,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1913,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1914,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1915,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1916,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1917,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1918,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1919,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1920,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1921,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1922,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1923,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1955,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1956,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1957,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1958,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1959,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1960,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1961,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1962,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1963,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1964,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1965,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1966,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1967,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1968,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1969,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1993,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1994,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  1995,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  1996,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  1997,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  1998,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  1999,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2000,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2001,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2002,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2003,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2004,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2005,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2006,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2007,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2037,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2038,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2039,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2040,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2041,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2042,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2043,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2044,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2045,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2046,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2047,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2048,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2049,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2050,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2051,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2081,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2082,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2083,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2084,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2085,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2086,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2087,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2088,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2089,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2112,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2113,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2114,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2115,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2116,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2117,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2118,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2119,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2120,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2154,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2155,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2156,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2157,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2158,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2159,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2160,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2161,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2162,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2184,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2185,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2186,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2187,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2188,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2189,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2202,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2203,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2204,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2205,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2206,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2207,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2223,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2224,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2225,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2226,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2227,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2228,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2247,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2248,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2249,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2259,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2260,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2261,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2274,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2275,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2276,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2292,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2293,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2294,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2298,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   312,   313,   314,   315,
   316,  2299,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   312,   313,
   314,   315,   316,  2300,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   312,   313,   314,   315,   316,  2304,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   312,   313,   314,   315,   316,  2305,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   312,   313,   314,   315,   316,  2306,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   627,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   684,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   686,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   688,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   690,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   692,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   694,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   696,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   698,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   700,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   702,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   704,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   708,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   710,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   712,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   714,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   716,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   718,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   789,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,   795,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,   886,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,  1031,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,  1033,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,  1035,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,  1037,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,     0,     0,  1038,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,     0,     0,  1179,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   520,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   521,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   522,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   524,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   526,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   527,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   535,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   577,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   578,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   581,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   587,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   683,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   685,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   687,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   689,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   691,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   693,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   695,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   697,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   699,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   701,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   703,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   707,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   709,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   711,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   713,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   715,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   717,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   752,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   754,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,   767,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,   768,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,   769,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
   774,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,   775,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,   776,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,   777,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,   778,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,   801,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,   808,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1030,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1032,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1034,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1036,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1102,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  1205,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  1234,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  1339,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  1343,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1345,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1464,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1465,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1494,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1496,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1498,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  1500,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  1501,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  1502,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  1524,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  1631,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  1787,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  1788,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  1789,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  1952,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  1953,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  1954,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  2075,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  2076,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  2077,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  2078,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  2079,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326,     0,  2080,   312,   313,   314,   315,   316,
     0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     0,     0,     0,     0,     0,   326,     0,  2190,   312,   313,
   314,   315,   316,     0,   317,   318,   319,   320,   321,   322,
   323,   324,   325,     0,     0,     0,     0,     0,   326,     0,
  2191,   312,   313,   314,   315,   316,     0,   317,   318,   319,
   320,   321,   322,   323,   324,   325,     0,     0,     0,     0,
     0,   326,     0,  2192,   312,   313,   314,   315,   316,     0,
   317,   318,   319,   320,   321,   322,   323,   324,   325,     0,
     0,     0,     0,     0,   326,     0,  2250,   312,   313,   314,
   315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
   324,   325,     0,     0,     0,     0,     0,   326,     0,  2251,
   312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
   321,   322,   323,   324,   325,     0,     0,     0,     0,     0,
   326,     0,  2252,   312,   313,   314,   315,   316,     0,   317,
   318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
     0,     0,     0,   326,     0,  2310,   312,   313,   314,   315,
   316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
   325,     0,     0,     0,     0,     0,   326,     0,  2311,   312,
   313,   314,   315,   316,     0,   317,   318,   319,   320,   321,
   322,   323,   324,   325,     0,     0,     0,     0,     0,   326,
     0,  2312,   312,   313,   314,   315,   316,     0,   317,   318,
   319,   320,   321,   322,   323,   324,   325,     0,     0,     0,
     0,     0,   326
};

static const short yycheck[] = {    23,
     4,   370,    93,    23,     4,   340,   182,  1120,   305,   185,
   743,     4,     4,     4,     4,     3,  1129,     4,  1224,     5,
     3,    65,     7,  1136,     6,   103,     6,     5,    42,     4,
   206,     5,   208,     4,   212,     7,     6,     6,    66,    65,
   198,     6,     7,    71,   197,   203,    68,    69,    34,    35,
    36,   204,    65,     4,     5,   167,    34,    35,    36,     5,
    34,    35,    36,   197,  1317,   197,  1319,   199,  1396,     6,
   204,    66,  1400,   186,   187,  1403,    71,     6,     6,    49,
    49,   186,   187,    34,    35,    36,   186,   187,    34,    35,
    36,   204,     4,   186,   187,     6,   186,   187,   203,   198,
   205,   303,   197,   203,   203,   205,   130,   131,   132,   204,
   203,   135,   136,   197,   204,   139,   186,   187,    38,   197,
   204,    41,   146,   147,   148,   198,   150,  1333,   152,   153,
   203,   155,    66,     7,   204,   106,   107,    71,   340,    66,
     6,    66,    66,     6,    71,    66,    71,    71,   172,   173,
    71,   186,   187,   197,     6,   138,   139,   140,   141,   142,
   143,   144,   145,   198,    66,   898,   197,   191,   192,    71,
   194,   197,   196,    56,    57,   199,   200,   205,   204,    44,
    45,    66,     6,   197,   519,   197,    71,   172,   173,   174,
   175,   204,   198,     7,   106,   107,   531,   203,   495,   187,
   172,   173,   174,   175,   186,   187,   186,   187,   193,   194,
   205,   204,   204,   204,   204,   391,   201,   204,   204,   193,
   194,  1334,   197,   247,   402,  1338,   204,   201,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   199,   205,   294,   295,   296,   186,   187,     6,   205,   303,
   205,   205,     7,    38,   205,   305,    41,    42,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   205,   169,   197,   171,  1635,   332,   197,
   334,  1639,   177,   197,  1642,   339,   340,   519,  1051,   197,
   205,   199,   186,   187,   348,   349,   350,   351,   352,   531,
   354,   355,   356,   357,   358,   359,   360,  1590,   198,   203,
  1593,   205,  1595,   203,   186,   187,   186,   187,   372,   373,
   374,   375,   197,   197,   199,   379,   198,   197,   172,   173,
   174,   175,   197,   387,   204,   369,   370,   186,   187,   369,
   370,    65,   396,   186,   187,  1488,  1489,  1490,  1491,   193,
   194,   197,  1495,   199,   203,   250,   186,   187,   186,   187,
   203,   193,   194,   728,   186,   187,   186,   187,     8,   186,
   187,   186,   187,   203,  1732,   203,    46,   198,  1736,    66,
  1738,   203,   203,   203,    71,   197,   203,   199,   203,   439,
   178,   179,   180,   758,   182,   183,   184,   185,   186,   187,
   188,   189,   190,  1686,   197,   197,   199,  1690,   196,  1692,
   197,   186,   187,   188,   189,   190,   197,   172,   173,   174,
   175,   196,    42,   193,   194,   790,   791,   792,   793,   199,
    42,   201,     6,   197,   488,   199,    42,   491,   193,   194,
   197,    42,   199,   497,   496,   495,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    44,   197,  1600,  1601,   204,
   196,  1604,   193,   194,   204,   519,   163,   164,   199,   166,
   201,    42,   367,   368,   528,   529,   197,   531,   199,   533,
   534,    55,   193,   194,   188,   189,   190,   541,   199,   197,
   201,   199,   196,     6,   193,   194,   728,   551,   552,     6,
   199,   733,   201,     4,   179,   180,   560,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   193,   194,   572,    38,
     6,   196,    41,    42,   201,    44,   758,    41,    42,   583,
    44,   585,   586,   197,   197,  1298,   176,   177,   178,   179,
   180,   197,   182,   183,   184,   185,   186,   187,   188,   189,
   190,   916,   197,  1696,   199,   197,   196,   199,   790,   791,
   792,   793,     4,   890,   891,   205,    59,    60,    61,    62,
     4,    64,     3,     4,   197,   627,   199,   627,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,   176,   177,   178,   179,   180,    38,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   123,   124,   125,
   126,   127,   196,    42,   197,   197,   199,   199,    59,    60,
    61,    62,    63,    64,   197,   197,   199,   199,   197,   197,
   199,   199,  1785,   197,   197,   199,   199,   197,   199,     6,
   201,   705,   706,     5,   203,   550,   205,   203,   203,   205,
   205,   203,   203,   205,   205,   719,   720,   721,   722,   723,
   724,   725,   197,   203,   728,   205,   203,   729,   205,   733,
   197,   203,   736,   205,   916,   203,   197,   205,  1087,     6,
     7,   203,   746,   205,   203,   203,   205,   205,   203,   203,
   205,   205,     4,  1846,   758,   203,   760,   205,   203,   203,
   205,   205,     6,    38,    39,    40,    41,    42,    43,    44,
    45,   842,    47,     6,    49,    50,    51,     5,    53,    54,
   203,   203,   205,   205,   197,   197,   790,   791,   792,   793,
   204,     4,   796,   797,   197,    70,   800,   203,   203,   205,
   205,   203,   197,   205,     8,   186,   187,   811,   812,   197,
   203,   192,   205,   203,   197,   205,   197,   203,   203,   205,
   205,   202,   204,   204,    99,   100,   101,   203,   203,   205,
   205,   203,   203,   205,   205,   203,   203,   205,   205,   203,
   197,   205,   117,   847,   848,   849,   850,   851,   852,   853,
   854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   866,   867,   868,   869,   870,   871,   872,   176,
   177,   178,   179,   180,   204,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   197,   203,   886,   205,   203,   196,
   205,   891,   203,   197,   205,   899,   204,   203,   203,   205,
   205,   204,   199,   204,   749,     6,   201,   109,   204,     6,
   197,     6,   916,     6,   918,     3,   920,   197,   197,   197,
   197,   197,     5,   197,   197,   197,   197,   197,   197,   197,
   205,   197,   936,   937,   938,   197,   197,  2030,   197,   197,
   197,   786,   787,   788,   197,     4,   197,   197,   197,   197,
   197,   197,   197,  1111,   958,   959,   960,   197,   197,   197,
   197,   203,  1311,   198,   196,     7,     7,   203,   813,   199,
   201,     7,   176,   177,   178,   179,   180,   822,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   204,     7,   198,
     7,     7,   196,   104,   198,     5,     3,     4,   106,   204,
     5,  1001,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     3,     4,   156,     5,
  1044,  1043,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     5,  1071,  1072,  1073,
  1074,  1142,     5,     5,     5,     5,     5,     5,  1236,  1083,
     5,  1083,     5,     5,     5,     5,     5,     5,     3,     5,
   203,     5,   198,     6,  1098,  1099,     5,     4,     6,   201,
   200,     6,   205,  1087,     7,     7,  1110,  1087,     6,  1113,
     7,     7,     7,     7,     7,   205,     7,   204,   204,  1123,
     7,   197,     7,   201,   168,     5,  1130,  1131,  1132,   203,
   203,   203,   203,  1137,   203,   203,   203,  1141,   203,   203,
   203,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,
  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,
  1164,  1165,  1166,  1167,  1168,  1169,  1170,   197,   203,   203,
   203,   203,   203,  1331,   203,   203,   203,   203,   203,   186,
   187,   203,   203,  1187,   197,   192,     6,     4,   203,   203,
   197,   203,   203,   200,   203,   202,   197,   204,   198,   203,
   203,   203,  1206,   197,   203,   197,   197,   197,   197,   197,
   197,  1056,   197,  1058,   197,   197,   197,   197,     6,   186,
   187,     6,     6,     4,     7,   192,  1230,     6,  1232,   197,
   197,   200,   197,   200,   197,   202,   197,   204,   197,   197,
   197,   197,   197,  1088,   197,  1090,   197,  1092,     3,     4,
   199,     7,   204,     7,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,   176,   177,
   178,   179,   180,     7,   182,   183,   184,   185,   186,   187,
   188,   189,   190,     7,     7,     7,     7,     7,   196,     7,
     7,  1305,  1306,     7,     7,     7,     6,   169,     7,     6,
  1314,     6,  1316,     7,  1318,     4,  1320,  1321,     3,     7,
     3,     3,   188,  1327,     3,     3,     3,  1311,     3,  1487,
     3,  1311,  1336,     3,     3,     3,     3,     3,     3,   198,
  1344,     5,     5,     3,     3,  1349,     4,   198,  1352,     6,
  1354,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1363,
  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,
  1374,  1375,  1376,  1377,  1378,  1379,     6,   201,     7,     6,
     6,     6,     6,  1387,   197,  1389,  1390,  1391,     3,     4,
  1548,   197,   204,     6,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     6,   105,
   165,   198,   204,   203,   198,   203,   198,   203,   203,     6,
   203,   186,   187,   203,   203,   198,   198,   192,   203,   203,
   198,  1599,   197,   203,   203,   200,   203,   202,   198,   204,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   203,  1470,   203,   203,  1314,
   196,  1316,  1476,  1318,   200,  1479,   176,   177,   178,   179,
   180,     6,   182,   183,   184,   185,   186,   187,   188,   189,
   190,     6,     4,     6,   203,     6,   196,   203,   203,  1503,
  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,
  1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1522,  1523,
   201,  1525,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,  1695,     6,   200,
     3,     4,   196,     7,   198,  1390,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     6,   186,   187,     6,     6,     6,     6,   192,     6,     6,
     6,     6,   197,  1741,     6,     6,     6,   202,     6,   204,
     6,     6,     6,     6,     3,   105,     6,     3,     6,   188,
     3,     6,  1606,  1607,  1608,  1609,  1610,  1611,  1612,  1613,
  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
  1624,  1625,  1626,  1627,  1628,  1629,  1784,     6,  1630,     6,
     3,     6,     6,     3,     6,     3,     3,     6,   154,     3,
     6,     4,     7,   201,   160,     6,     6,     6,   200,     6,
   204,   176,   177,   178,   179,   180,   205,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   204,   183,   204,   204,
   204,   196,   188,   189,   176,   177,   178,   179,   180,   102,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   198,
  1694,   198,     6,   198,   196,   203,  1700,   203,  1702,   203,
  1704,   203,  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1723,
  1724,  1725,  1726,   186,   187,  1727,   203,  1729,   203,   192,
   203,   198,   198,   198,   197,     3,   198,     6,     3,   202,
   198,   204,   203,   203,     6,     3,     4,     6,     3,   107,
   105,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     6,     6,     6,  1782,  1783,
     6,     6,     6,     5,   203,     6,  1790,  1791,  1792,  1793,
  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,
  1804,  1805,  1806,  1807,     5,   205,  1808,   176,   177,   178,
   179,   180,     6,   182,   183,   184,   185,   186,   187,   188,
   189,   190,   204,   204,   165,   205,     6,   196,     6,     6,
     6,     6,   203,     6,     6,     6,     6,     6,  1842,     6,
     6,   203,   198,  1847,  1848,  1849,  1850,  1851,  1852,  1853,
  1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,
  1864,  1865,  1866,  1867,   203,   198,     3,     4,   203,   198,
     6,   203,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,  1900,   203,  1902,     6,
  1904,    38,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,
  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
     6,     6,    59,    60,    61,    62,    63,    64,   186,   187,
     5,     5,   204,   203,   192,     6,     6,   204,   204,   197,
   203,   205,   203,   203,   202,   198,   198,     6,   204,   203,
     6,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,  1966,  1967,  1968,  1969,   203,     6,   204,   204,
   204,   203,     6,   102,   490,     6,     6,     5,     5,   165,
   198,   204,   198,     6,   204,   204,  1990,  1991,  1992,  1993,
  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
  2004,  2005,  2006,  2007,   176,   177,   178,   179,   180,   205,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   204,
   203,   203,     6,   204,   196,     6,   205,  2031,     6,  2033,
   102,  2035,     6,  2037,  2038,  2039,  2040,  2041,  2042,  2043,
  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,     6,   186,
   187,     6,     6,     6,     6,   192,     6,   205,   204,   203,
   197,   203,     6,     6,     6,   202,     6,     6,   170,   203,
   203,     6,   204,   204,   204,   171,   203,  2081,  2082,  2083,
  2084,  2085,  2086,  2087,  2088,  2089,   198,     6,     6,     6,
     6,     6,   203,   203,     6,   204,   204,     6,   204,   203,
     6,   198,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,
  2114,  2115,  2116,  2117,  2118,  2119,  2120,   176,   177,   178,
   179,   180,     6,   182,   183,   184,   185,   186,   187,   188,
   189,   190,     6,     6,     6,   204,   204,   196,  2142,   204,
  2144,   204,  2146,   204,  2148,     6,  2150,   204,  2152,     6,
  2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,   176,
   177,   178,   179,   180,     6,   182,   183,   184,   185,   186,
   187,   188,   189,   190,     6,   204,     6,     6,   204,   196,
  2184,  2185,  2186,  2187,  2188,  2189,   203,     6,   205,   204,
   204,   204,   204,     6,     6,   204,   204,   204,  2202,  2203,
  2204,  2205,  2206,  2207,  2208,  2209,  2210,     6,     6,     6,
     0,     0,   629,     4,  1104,  1047,     4,    -1,    -1,  2223,
  2224,  2225,  2226,  2227,  2228,  2229,    -1,  2231,    -1,  2233,
    -1,    -1,    -1,    -1,   750,   751,    -1,   753,    -1,   755,
   756,    -1,    -1,  2247,  2248,  2249,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  2259,  2260,  2261,  2262,  2263,
  2264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  2274,  2275,  2276,  2277,    -1,  2279,    -1,  2281,    -1,    -1,
    -1,    -1,   798,   799,     6,    -1,   802,    -1,  2292,  2293,
  2294,    -1,    -1,    -1,  2298,  2299,  2300,    -1,    -1,     6,
  2304,  2305,  2306,   819,   820,    -1,    -1,    -1,    -1,   825,
   826,    -1,  2316,  2317,  2318,    -1,   832,    -1,   834,    -1,
    -1,  2325,    -1,  2327,    -1,  2329,     3,     4,     5,    -1,
     7,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     6,    -1,   908,    -1,   910,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   921,   922,   923,    -1,    -1,
    -1,    -1,   928,   929,   930,   931,   932,   933,   934,     3,
     4,     5,    -1,    -1,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     6,
    34,    35,    36,    -1,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   176,
   177,   178,   179,   180,   196,   182,   183,   184,   185,   186,
   187,   188,   189,   190,     8,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,    -1,    -1,   172,   173,   174,   175,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
   187,    -1,    -1,    -1,     8,   192,   193,   194,    -1,    -1,
   197,    -1,   199,    -1,   201,   202,  1042,    -1,    -1,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   186,   187,    -1,    -1,    -1,    -1,   192,
     8,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,   202,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   176,   177,   178,   179,   180,
   196,   182,   183,   184,   185,   186,   187,   188,   189,   190,
  1106,    -1,    -1,    -1,    -1,   196,    -1,    -1,  1114,    -1,
    -1,    -1,   186,   187,   205,    -1,    -1,    -1,   192,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,  1133,   202,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   176,   177,   178,
   179,   180,   196,   182,   183,   184,   185,   186,   187,   188,
   189,   190,   176,   177,   178,   179,   180,   196,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   176,   177,   178,
   179,   180,   196,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    47,    -1,
    49,    50,    51,    -1,    53,    54,    -1,    -1,    -1,    -1,
    -1,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    47,    70,    49,    50,    51,    -1,    53,    54,    -1,    -1,
    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    47,    70,    49,    50,    51,    -1,    53,    54,
    99,   100,   101,    -1,    -1,    -1,    -1,    -1,  1324,    -1,
  1326,    -1,    -1,    -1,  1330,    70,    -1,    -1,   117,    -1,
    -1,    -1,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
  1346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    99,   100,   101,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    47,    -1,    49,
    50,    51,   117,    53,    54,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    70,    -1,    -1,    -1,    41,   196,    -1,    -1,    -1,    -1,
    -1,    -1,   203,    -1,   205,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    99,
   100,   101,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   117,   205,    -1,
    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,   203,
    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,  1464,  1465,
   205,    -1,    -1,    -1,    -1,    -1,  1472,    -1,    -1,    -1,
    -1,    -1,    -1,   120,   121,   122,    -1,  1483,  1484,    -1,
    -1,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,    -1,    -1,    -1,     0,     1,    -1,     3,     4,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,    -1,
   157,   158,   159,   160,   161,   162,    -1,    -1,    -1,    -1,
    -1,  1527,  1528,    -1,    -1,   205,    -1,    33,    -1,    -1,
    -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    64,    -1,
    66,    67,    68,    69,    70,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    47,    -1,    49,    50,    51,    -1,
    53,    54,    -1,    -1,    -1,    -1,  1592,    -1,    -1,    -1,
    -1,  1597,    98,    99,   100,   101,    -1,    70,    -1,    -1,
   106,    -1,   108,    -1,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,    -1,
    -1,    -1,   138,   139,   140,   141,   142,   143,   144,   145,
    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,
   166,    -1,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,  1687,   196,    -1,   198,    -1,    -1,    -1,    -1,   203,
    -1,  1697,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    -1,    -1,    -1,    -1,     4,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,   205,    -1,
  1786,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    64,    -1,
    66,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
   176,   177,   178,   179,   180,   205,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,  1845,
   196,    -1,    98,    99,   100,   101,    -1,    -1,    -1,   205,
   106,   205,   108,    -1,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1898,   205,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   176,   177,
   178,   179,   180,   205,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,    -1,    -1,    -1,  1951,    -1,   205,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   205,   176,   177,
   178,   179,   180,  1989,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,   176,   177,   178,   179,   180,   205,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   205,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   176,   177,   178,   179,   180,   205,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,    -1,    -1,   176,   177,   178,   179,   180,   205,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   176,   177,
   178,   179,   180,   205,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,   176,   177,   178,   179,   180,   205,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   205,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   176,   177,   178,   179,   180,   205,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,    -1,    -1,   176,   177,   178,   179,   180,   205,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   176,   177,
   178,   179,   180,   205,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,   176,   177,   178,   179,   180,   205,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   205,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
   176,   177,   178,   179,   180,   205,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   176,   177,   178,   179,
   180,   203,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   176,   177,
   178,   179,   180,   203,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   176,   177,   178,   179,   180,   203,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   176,   177,   178,   179,   180,   203,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   176,   177,   178,   179,   180,   203,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,    -1,    -1,   200,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,   180,
    -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,
   178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   198,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,   196,    -1,   198,   176,   177,   178,   179,   180,    -1,
   182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,
   179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,
   176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
   196,    -1,   198,   176,   177,   178,   179,   180,    -1,   182,
   183,   184,   185,   186,   187,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   196,    -1,   198,   176,   177,   178,   179,
   180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,   198,   176,
   177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,   196,
    -1,   198,   176,   177,   178,   179,   180,    -1,   182,   183,
   184,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,   196
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 164 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 170 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 171 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 181 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STL_Surf = Create_Surface(NEWSURFACE(), MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 10:
#line 195 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d, CTX.geom.stl_create_elementary);
      return 1;
    ;
    break;}
case 11:
#line 202 "Gmsh.y"
{
      if(CTX.geom.stl_create_elementary){
	STL_Surf->STL->ReplaceDuplicate();
	if(CTX.geom.stl_create_physical)
	  STL_Surf->STL->CreatePhysicalSurface();
      }
      else{
	Tree_Add(THEM->Surfaces, &STL_Surf);
      }
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 224 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 225 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 226 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 231 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 236 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 247 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 250 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 254 "Gmsh.y"
{
   ;
    break;}
case 25:
#line 260 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 266 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 273 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 279 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 283 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 287 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 294 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 298 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 303 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 307 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 311 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 315 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 319 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 323 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 327 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 331 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 343 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 347 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 351 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 355 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 359 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 367 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 374 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 384 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 400 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 401 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 405 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 414 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 72:
#line 418 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 74:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 75:
#line 446 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 102:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 103:
#line 481 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 104:
#line 486 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 105:
#line 491 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 106:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 107:
#line 500 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 108:
#line 505 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 109:
#line 511 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3)
	yymsg(GERROR, "Wrong number of values for vector point "
	      "(%d is not a multiple of 3)", List_Nbr(View->VP) - ntmp);
      View->NbVP++;
    ;
    break;}
case 110:
#line 521 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 111:
#line 523 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 112:
#line 528 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 113:
#line 534 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9)
	yymsg(GERROR, "Wrong number of values for tensor point "
	      "(%d is not a multiple of 9)", List_Nbr(View->TP) - ntmp);
      View->NbTP++;
    ;
    break;}
case 114:
#line 544 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 115:
#line 546 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 116:
#line 552 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 117:
#line 559 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2)
	yymsg(GERROR, "Wrong number of values for scalar line "
	      "(%d is not a multiple of 2)", List_Nbr(View->SL) - ntmp);
      View->NbSL++;
    ;
    break;}
case 118:
#line 569 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 119:
#line 571 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 120:
#line 577 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 121:
#line 584 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6)
	yymsg(GERROR, "Wrong number of values for vector line "
	      "(%d is not a multiple of 6)", List_Nbr(View->VL) - ntmp);
      View->NbVL++;
    ;
    break;}
case 122:
#line 594 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 123:
#line 596 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 124:
#line 602 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 125:
#line 609 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18)
	yymsg(GERROR, "Wrong number of values for tensor line "
	      "(%d is not a multiple of 18)", List_Nbr(View->TL) - ntmp);
      View->NbTL++;
    ;
    break;}
case 126:
#line 619 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 127:
#line 621 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 128:
#line 628 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 129:
#line 638 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3)
	yymsg(GERROR, "Wrong number of values for scalar triangle "
	      "(%d is not a multiple of 3)", List_Nbr(View->ST) - ntmp);
      View->NbST++;
    ;
    break;}
case 130:
#line 648 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 131:
#line 650 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 132:
#line 657 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 133:
#line 667 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9)
	yymsg(GERROR, "Wrong number of values for vector triangle "
	      "(%d is not a multiple of 9)", List_Nbr(View->VT) - ntmp);
      View->NbVT++;
    ;
    break;}
case 134:
#line 677 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 135:
#line 679 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 136:
#line 686 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 137:
#line 696 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27)
	yymsg(GERROR, "Wrong number of values for tensor triangle "
	      "(%d is not a multiple of 27)", List_Nbr(View->TT) - ntmp);
      View->NbTT++;
    ;
    break;}
case 138:
#line 706 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 139:
#line 708 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 140:
#line 716 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 141:
#line 726 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4)
	yymsg(GERROR, "Wrong number of values for scalar quadrangle "
	      "(%d is not a multiple of 4)", List_Nbr(View->SQ) - ntmp);
      View->NbSQ++;
    ;
    break;}
case 142:
#line 736 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 143:
#line 738 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 144:
#line 746 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 145:
#line 756 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12)
	yymsg(GERROR, "Wrong number of values for vector quadrangle "
	      "(%d is not a multiple of 12)", List_Nbr(View->VQ) - ntmp);
      View->NbVQ++;
    ;
    break;}
case 146:
#line 766 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 147:
#line 768 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 148:
#line 776 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 149:
#line 786 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36)
	yymsg(GERROR, "Wrong number of values for tensor quadrangle "
	      "(%d is not a multiple of 36)", List_Nbr(View->TQ) - ntmp);
      View->NbTQ++;
    ;
    break;}
case 150:
#line 796 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 151:
#line 798 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 152:
#line 806 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 153:
#line 816 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4)
	yymsg(GERROR, "Wrong number of values for scalar tetrahedron "
	      "(%d is not a multiple of 4)", List_Nbr(View->SS) - ntmp);
      View->NbSS++;
    ;
    break;}
case 154:
#line 826 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 155:
#line 828 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 156:
#line 836 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 157:
#line 846 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12)
	yymsg(GERROR, "Wrong number of values for vector tetrahedron "
	      "(%d is not a multiple of 12)", List_Nbr(View->VS) - ntmp);
      View->NbVS++;
    ;
    break;}
case 158:
#line 856 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 159:
#line 858 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 160:
#line 866 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 161:
#line 876 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36)
	yymsg(GERROR, "Wrong number of values for tensor tetrahedron "
	      "(%d is not a multiple of 36)", List_Nbr(View->TS) - ntmp);
      View->NbTS++;
    ;
    break;}
case 162:
#line 886 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 163:
#line 888 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 164:
#line 900 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 165:
#line 916 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8)
	yymsg(GERROR, "Wrong number of values for scalar hexahedron "
	      "(%d is not a multiple of 8)", List_Nbr(View->SH) - ntmp);
      View->NbSH++;
    ;
    break;}
case 166:
#line 926 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 167:
#line 928 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 168:
#line 940 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 169:
#line 956 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24)
	yymsg(GERROR, "Wrong number of values for vector hexahedron "
	      "(%d is not a multiple of 24)", List_Nbr(View->VH) - ntmp);
      View->NbVH++;
    ;
    break;}
case 170:
#line 966 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 171:
#line 968 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 172:
#line 980 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 173:
#line 996 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72)
	yymsg(GERROR, "Wrong number of values for tensor hexahedron "
	      "(%d is not a multiple of 72)", List_Nbr(View->TH) - ntmp);
      View->NbTH++;
    ;
    break;}
case 174:
#line 1006 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 175:
#line 1008 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 176:
#line 1018 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 177:
#line 1031 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6)
	yymsg(GERROR, "Wrong number of values for scalar prism "
	      "(%d is not a multiple of 6)", List_Nbr(View->SI) - ntmp);
      View->NbSI++;
    ;
    break;}
case 178:
#line 1041 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 179:
#line 1043 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 180:
#line 1053 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 181:
#line 1066 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18)
	yymsg(GERROR, "Wrong number of values for vector prism "
	      "(%d is not a multiple of 18)", List_Nbr(View->VI) - ntmp);
      View->NbVI++;
    ;
    break;}
case 182:
#line 1076 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 183:
#line 1078 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 184:
#line 1088 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 185:
#line 1101 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54)
	yymsg(GERROR, "Wrong number of values for tensor prism "
	      "(%d is not a multiple of 54)", List_Nbr(View->TI) - ntmp);
      View->NbTI++;
    ;
    break;}
case 186:
#line 1111 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 187:
#line 1113 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 188:
#line 1122 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 189:
#line 1135 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5)
	yymsg(GERROR, "Wrong number of values for scalar pyramid "
	      "(%d is not a multiple of 5)", List_Nbr(View->SY) - ntmp);
      View->NbSY++;
    ;
    break;}
case 190:
#line 1145 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 191:
#line 1147 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 192:
#line 1156 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 193:
#line 1169 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15)
	yymsg(GERROR, "Wrong number of values for vector pyramid "
	      "(%d is not a multiple of 15)", List_Nbr(View->VY) - ntmp);
      View->NbVY++;
    ;
    break;}
case 194:
#line 1179 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 195:
#line 1181 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 196:
#line 1190 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 197:
#line 1203 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45)
	yymsg(GERROR, "Wrong number of values for tensor pyramid "
	      "(%d is not a multiple of 45)", List_Nbr(View->TY) - ntmp);
      View->NbTY++;
    ;
    break;}
case 198:
#line 1213 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 199:
#line 1218 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1226 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 201:
#line 1233 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 202:
#line 1240 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 203:
#line 1245 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 204:
#line 1253 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 205:
#line 1260 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 206:
#line 1269 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 207:
#line 1270 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 208:
#line 1271 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 209:
#line 1272 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 210:
#line 1273 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 211:
#line 1277 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 212:
#line 1278 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 213:
#line 1286 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 214:
#line 1314 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
      }
    ;
    break;}
case 215:
#line 1350 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 216:
#line 1399 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 1415 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 218:
#line 1425 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
    ;
    break;}
case 219:
#line 1443 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 220:
#line 1456 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 221:
#line 1472 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 222:
#line 1497 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 223:
#line 1523 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 224:
#line 1536 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 225:
#line 1552 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 226:
#line 1565 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 227:
#line 1581 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 1600 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 229:
#line 1622 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 230:
#line 1631 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 231:
#line 1649 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 232:
#line 1665 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 233:
#line 1681 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 234:
#line 1700 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 235:
#line 1719 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 236:
#line 1737 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 237:
#line 1755 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1773 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1799 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 240:
#line 1817 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 241:
#line 1844 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1862 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1886 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1910 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1936 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1953 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 247:
#line 1971 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1990 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 2009 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown Line Loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 2048 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 2074 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	// FIXME: parameters not used; undocumented
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      //FIXME: do you copy the data?
      //List_Delete($12);
      //List_Delete($13);
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 252:
#line 2096 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 253:
#line 2113 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 2132 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2149 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2165 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2184 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2201 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2218 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2239 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 261:
#line 2244 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 262:
#line 2249 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 263:
#line 2254 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 264:
#line 2261 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 265:
#line 2262 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 266:
#line 2263 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 267:
#line 2268 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 268:
#line 2272 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 269:
#line 2276 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 270:
#line 2292 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 271:
#line 2308 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 272:
#line 2324 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 273:
#line 2345 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 274:
#line 2358 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 275:
#line 2369 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 276:
#line 2378 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 277:
#line 2382 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All"))
	Init_Mesh(THEM);
    ;
    break;}
case 278:
#line 2392 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 279:
#line 2406 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 280:
#line 2413 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 281:
#line 2418 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 282:
#line 2429 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 283:
#line 2443 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files. If you need to
	// include many files, use "Merge" instead: some OSes limit
	// the number of files a process can open simultaneously (500
	// for OS X)
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 284:
#line 2483 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(v, tmpstring, 0, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 285:
#line 2497 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 286:
#line 2512 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch(...) {
	yymsg(WARNING, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 287:
#line 2521 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(1, 0);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews_Time(2, 0);
      else
	yymsg(GERROR, "Unknown Combine command");
    ;
    break;}
case 288:
#line 2530 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 289:
#line 2534 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 290:
#line 2547 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 291:
#line 2561 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 292:
#line 2575 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 293:
#line 2600 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 294:
#line 2625 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  Symbol TheSymbol;
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  Symbol *pSymbol;
	  if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	    yymsg(GERROR, "Unknown loop variable");
	  else
	    *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	      LoopControlVariablesTab[ImbricatedLoop-1][2];
	}
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
	if(ImbricatedLoop < 0){
	  yymsg(GERROR, "Problem with imbricated loops");
	  ImbricatedLoop = 0;
	}
      }
    ;
    break;}
case 295:
#line 2652 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 296:
#line 2658 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 297:
#line 2663 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 298:
#line 2668 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 299:
#line 2672 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2683 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 301:
#line 2694 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 302:
#line 2705 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 303:
#line 2716 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 304:
#line 2721 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 305:
#line 2732 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 306:
#line 2737 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 307:
#line 2748 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 308:
#line 2753 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 309:
#line 2766 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 310:
#line 2784 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 311:
#line 2802 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 312:
#line 2820 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2825 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 314:
#line 2843 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 315:
#line 2848 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 316:
#line 2866 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 317:
#line 2871 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 318:
#line 2892 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 319:
#line 2909 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 320:
#line 2926 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 321:
#line 2943 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2948 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 323:
#line 2965 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 324:
#line 2971 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 325:
#line 2988 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 326:
#line 2994 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 327:
#line 3014 "Gmsh.y"
{
    ;
    break;}
case 328:
#line 3017 "Gmsh.y"
{
    ;
    break;}
case 329:
#line 3023 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 330:
#line 3049 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 331:
#line 3073 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 332:
#line 3082 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 333:
#line 3100 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 334:
#line 3118 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 335:
#line 3136 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown Point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 336:
#line 3163 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown Point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 337:
#line 3189 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown Point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 338:
#line 3215 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 339:
#line 3229 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 340:
#line 3248 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 341:
#line 3252 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 342:
#line 3261 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 343:
#line 3262 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 344:
#line 3263 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 345:
#line 3264 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 346:
#line 3265 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 347:
#line 3269 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 348:
#line 3270 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 349:
#line 3271 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 350:
#line 3272 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 351:
#line 3273 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 352:
#line 3274 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 353:
#line 3275 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 354:
#line 3276 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 355:
#line 3278 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 356:
#line 3284 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 357:
#line 3285 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 358:
#line 3286 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 359:
#line 3287 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 360:
#line 3288 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 361:
#line 3289 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 362:
#line 3290 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 363:
#line 3291 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 364:
#line 3292 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 365:
#line 3293 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 366:
#line 3294 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 367:
#line 3295 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 368:
#line 3296 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 369:
#line 3297 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 370:
#line 3298 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 371:
#line 3299 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 372:
#line 3300 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 373:
#line 3301 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 374:
#line 3302 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 375:
#line 3303 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 376:
#line 3304 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 377:
#line 3305 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 378:
#line 3306 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 379:
#line 3307 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 380:
#line 3308 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 381:
#line 3309 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 382:
#line 3310 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 383:
#line 3311 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 384:
#line 3312 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 385:
#line 3313 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 386:
#line 3314 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 387:
#line 3315 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 388:
#line 3317 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 389:
#line 3318 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 390:
#line 3319 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 391:
#line 3320 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 392:
#line 3321 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 393:
#line 3322 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 394:
#line 3323 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 395:
#line 3324 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 396:
#line 3325 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 397:
#line 3326 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 398:
#line 3327 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 399:
#line 3328 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 400:
#line 3329 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 401:
#line 3330 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 402:
#line 3331 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 403:
#line 3332 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 404:
#line 3333 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 405:
#line 3334 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 406:
#line 3335 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 407:
#line 3336 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 408:
#line 3337 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 409:
#line 3346 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 410:
#line 3347 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 411:
#line 3348 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 412:
#line 3349 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 413:
#line 3354 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
    ;
    break;}
case 414:
#line 3366 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 415:
#line 3385 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
    ;
    break;}
case 416:
#line 3398 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
    ;
    break;}
case 417:
#line 3410 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 418:
#line 3432 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 419:
#line 3449 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 420:
#line 3466 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 421:
#line 3483 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 422:
#line 3503 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 423:
#line 3507 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 424:
#line 3511 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 425:
#line 3515 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 426:
#line 3519 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 427:
#line 3526 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 428:
#line 3530 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 429:
#line 3534 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 430:
#line 3538 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 431:
#line 3545 "Gmsh.y"
{
    ;
    break;}
case 432:
#line 3548 "Gmsh.y"
{
    ;
    break;}
case 433:
#line 3554 "Gmsh.y"
{
    ;
    break;}
case 434:
#line 3557 "Gmsh.y"
{
    ;
    break;}
case 435:
#line 3563 "Gmsh.y"
{
    ;
    break;}
case 436:
#line 3566 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 437:
#line 3570 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 438:
#line 3577 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 439:
#line 3582 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 440:
#line 3590 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 441:
#line 3595 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 442:
#line 3599 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 443:
#line 3603 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 444:
#line 3615 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 445:
#line 3621 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 446:
#line 3632 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 447:
#line 3652 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 448:
#line 3662 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 449:
#line 3672 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 450:
#line 3684 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
    ;
    break;}
case 451:
#line 3700 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
    ;
    break;}
case 452:
#line 3718 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 453:
#line 3741 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 454:
#line 3769 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 455:
#line 3774 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 456:
#line 3778 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 457:
#line 3782 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 458:
#line 3795 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 459:
#line 3799 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 460:
#line 3811 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 461:
#line 3817 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
    ;
    break;}
case 462:
#line 3838 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 463:
#line 3842 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 464:
#line 3856 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 465:
#line 3861 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 466:
#line 3868 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 467:
#line 3872 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);  
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 468:
#line 3880 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 469:
#line 3894 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 470:
#line 3898 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 471:
#line 3917 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 472:
#line 3933 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3950 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  while(j < (int)strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
