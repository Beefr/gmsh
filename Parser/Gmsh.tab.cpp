
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tBSpline	352
#define	tBezier	353
#define	tNurbs	354
#define	tOrder	355
#define	tWith	356
#define	tBounds	357
#define	tKnots	358
#define	tColor	359
#define	tColorTable	360
#define	tFor	361
#define	tIn	362
#define	tEndFor	363
#define	tIf	364
#define	tEndIf	365
#define	tExit	366
#define	tReturn	367
#define	tCall	368
#define	tFunction	369
#define	tMesh	370
#define	tTrimmed	371
#define	tB_SPLINE_SURFACE_WITH_KNOTS	372
#define	tB_SPLINE_CURVE_WITH_KNOTS	373
#define	tCARTESIAN_POINT	374
#define	tTRUE	375
#define	tFALSE	376
#define	tUNSPECIFIED	377
#define	tU	378
#define	tV	379
#define	tEDGE_CURVE	380
#define	tVERTEX_POINT	381
#define	tORIENTED_EDGE	382
#define	tPLANE	383
#define	tFACE_OUTER_BOUND	384
#define	tEDGE_LOOP	385
#define	tADVANCED_FACE	386
#define	tVECTOR	387
#define	tDIRECTION	388
#define	tAXIS2_PLACEMENT_3D	389
#define	tISO	390
#define	tENDISO	391
#define	tENDSEC	392
#define	tDATA	393
#define	tHEADER	394
#define	tFILE_DESCRIPTION	395
#define	tFILE_SCHEMA	396
#define	tFILE_NAME	397
#define	tMANIFOLD_SOLID_BREP	398
#define	tCLOSED_SHELL	399
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	400
#define	tFACE_BOUND	401
#define	tCYLINDRICAL_SURFACE	402
#define	tCONICAL_SURFACE	403
#define	tCIRCLE	404
#define	tTRIMMED_CURVE	405
#define	tGEOMETRIC_SET	406
#define	tCOMPOSITE_CURVE_SEGMENT	407
#define	tCONTINUOUS	408
#define	tCOMPOSITE_CURVE	409
#define	tTOROIDAL_SURFACE	410
#define	tPRODUCT_DEFINITION	411
#define	tPRODUCT_DEFINITION_SHAPE	412
#define	tSHAPE_DEFINITION_REPRESENTATION	413
#define	tELLIPSE	414
#define	tSolid	415
#define	tEndSolid	416
#define	tVertex	417
#define	tFacet	418
#define	tNormal	419
#define	tOuter	420
#define	tLoopSTL	421
#define	tEndLoop	422
#define	tEndFacet	423
#define	tAFFECTPLUS	424
#define	tAFFECTMINUS	425
#define	tAFFECTTIMES	426
#define	tAFFECTDIVIDE	427
#define	tOR	428
#define	tAND	429
#define	tEQUAL	430
#define	tNOTEQUAL	431
#define	tAPPROXEQUAL	432
#define	tLESSOREQUAL	433
#define	tGREATEROREQUAL	434
#define	tCROSSPRODUCT	435
#define	tPLUSPLUS	436
#define	tMINUSMINUS	437
#define	UNARYPREC	438

#line 1 "Gmsh.y"
 
// $Id: Gmsh.tab.cpp,v 1.163 2003-09-19 17:23:59 geuzaine Exp $
//
// Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static FILE *yyinTab[MAX_OPEN_FILES];
static int yylinenoTab[MAX_OPEN_FILES];
static fpos_t yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char *LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char yynameTab[MAX_OPEN_FILES][256];
static char tmpstring[1024];
static Symbol TheSymbol, *pSymbol;
static Surface *STL_Surf;
static Shape TheShape;
static int i, j, k, flag, RecursionLevel = 0, ImbricatedLoop = 0;
static int Last_NumberOfPoints = 0;
static double d, *pd;
static ExtrudeParams extr;
static char *str;
static StringXString *pStrCat;
static StringXNumber *pNumCat;
static StringXColor *pColCat;
static double (*pNumOpt)(int num, int action, double value);
static char* (*pStrOpt)(int num, int action, char *value);
static unsigned int (*pColOpt)(int num, int action, unsigned int value);
static Post_View *View;

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);

#line 84 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2293
#define	YYFLAG		-32768
#define	YYNTBASE	203

#define YYTRANSLATE(x) ((unsigned)(x) <= 438 ? yytranslate[x] : 336)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   190,     2,     2,     2,   188,     2,     2,   195,
   196,   186,   184,   200,   185,   199,   187,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   180,
     2,   182,   174,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   197,     2,   198,   194,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   201,     2,   202,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   175,   176,   177,
   178,   179,   181,   183,   189,   191,   192,   193
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   533,   541,
   548,   557,   558,   561,   564,   567,   570,   573,   576,   579,
   582,   585,   588,   591,   594,   597,   600,   603,   606,   609,
   612,   615,   618,   621,   624,   627,   630,   633,   636,   638,
   642,   643,   657,   659,   663,   664,   678,   680,   684,   685,
   699,   701,   705,   706,   726,   728,   732,   733,   753,   755,
   759,   760,   780,   782,   786,   787,   813,   815,   819,   820,
   846,   848,   852,   853,   879,   881,   885,   886,   918,   920,
   924,   925,   957,   959,   963,   964,   996,   998,  1002,  1003,
  1035,  1037,  1041,  1042,  1074,  1076,  1080,  1081,  1113,  1115,
  1119,  1120,  1176,  1178,  1182,  1183,  1239,  1241,  1245,  1246,
  1302,  1304,  1308,  1309,  1353,  1355,  1359,  1360,  1404,  1406,
  1410,  1411,  1455,  1457,  1461,  1462,  1500,  1502,  1506,  1507,
  1545,  1547,  1551,  1552,  1590,  1592,  1596,  1597,  1611,  1613,
  1617,  1618,  1634,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
  1653,  1661,  1671,  1678,  1682,  1689,  1696,  1706,  1713,  1723,
  1729,  1738,  1747,  1759,  1766,  1776,  1786,  1796,  1804,  1813,
  1826,  1833,  1841,  1849,  1862,  1870,  1878,  1888,  1906,  1915,
  1924,  1932,  1940,  1952,  1961,  1974,  1983,  1998,  2021,  2042,
  2051,  2060,  2069,  2077,  2086,  2092,  2104,  2110,  2120,  2122,
  2124,  2126,  2127,  2130,  2137,  2144,  2151,  2156,  2163,  2168,
  2175,  2179,  2185,  2189,  2193,  2201,  2204,  2207,  2214,  2223,
  2232,  2243,  2245,  2248,  2250,  2254,  2259,  2261,  2270,  2283,
  2298,  2299,  2312,  2313,  2330,  2331,  2350,  2359,  2372,  2387,
  2388,  2401,  2402,  2419,  2420,  2439,  2448,  2461,  2476,  2477,
  2490,  2491,  2508,  2509,  2528,  2530,  2533,  2543,  2551,  2554,
  2561,  2571,  2581,  2590,  2599,  2608,  2615,  2620,  2623,  2626,
  2628,  2630,  2632,  2634,  2636,  2638,  2642,  2645,  2648,  2651,
  2655,  2659,  2663,  2667,  2671,  2675,  2679,  2683,  2687,  2691,
  2695,  2699,  2703,  2707,  2713,  2718,  2723,  2728,  2733,  2738,
  2743,  2748,  2753,  2758,  2763,  2770,  2775,  2780,  2785,  2790,
  2795,  2800,  2807,  2814,  2821,  2826,  2831,  2836,  2841,  2846,
  2851,  2856,  2861,  2866,  2871,  2876,  2883,  2888,  2893,  2898,
  2903,  2908,  2913,  2920,  2927,  2934,  2939,  2941,  2943,  2945,
  2947,  2949,  2954,  2957,  2963,  2967,  2974,  2979,  2987,  2989,
  2992,  2995,  2999,  3003,  3015,  3025,  3033,  3041,  3042,  3046,
  3048,  3052,  3053,  3057,  3061,  3063,  3067,  3069,  3071,  3075,
  3080,  3084,  3090,  3095,  3097,  3099,  3101,  3105,  3110,  3117,
  3125,  3127,  3129,  3133,  3137,  3147,  3155,  3157,  3163,  3167,
  3174,  3176,  3180,  3182,  3189,  3194,  3199,  3206,  3213
};

static const short yyrhs[] = {   206,
     0,   205,     0,   211,     0,     1,     6,     0,     3,     0,
   185,     3,     0,   161,     0,   164,   165,   204,   204,   204,
   166,   167,   163,   204,   204,   204,   163,   204,   204,   204,
   163,   204,   204,   204,   168,   169,     0,   162,     0,     0,
   206,   207,     0,   208,     0,   210,     0,   209,     0,   136,
     6,     0,   137,     6,     0,   139,     6,     0,   138,     6,
     0,   140,     6,     0,   141,   195,   325,   200,     5,   196,
     6,     0,   142,   195,   325,   196,     6,     0,   143,   195,
     5,   200,     5,   200,   325,   200,   325,   200,     5,   200,
     5,   200,     5,   196,     6,     0,     3,     7,   120,   195,
     5,   200,   323,   196,     6,     0,     3,     7,   119,   195,
     5,   200,   321,   200,   329,   200,   320,   200,   320,   200,
   320,   200,   329,   200,   329,   200,   320,   196,     6,     0,
     3,     7,   118,   195,     5,   200,   321,   200,   321,   200,
   327,   200,   320,   200,   320,   200,   320,   200,   320,   200,
   329,   200,   329,   200,   329,   200,   329,   200,   320,   196,
     6,     0,     3,     7,   126,   195,     5,   200,     3,   200,
     3,   200,     3,   200,   320,   196,     6,     0,     3,     7,
   130,   195,     5,   200,     3,   200,   320,   196,     6,     0,
     3,     7,   147,   195,     5,   200,     3,   200,   320,   196,
     6,     0,     3,     7,   128,   195,     5,   200,   186,   200,
   186,   200,   321,   200,   320,   196,     6,     0,     3,     7,
   131,   195,     5,   200,   329,   196,     6,     0,     3,     7,
   132,   195,     5,   200,   329,   200,     3,   200,   320,   196,
     6,     0,     3,     7,   127,   195,     5,   200,     3,   196,
     6,     0,     3,     7,   133,   195,     5,   200,     3,   200,
   321,   196,     6,     0,     3,     7,   135,   195,     5,   200,
     3,   200,     3,   200,     3,   196,     6,     0,     3,     7,
   134,   195,     5,   200,   323,   196,     6,     0,     3,     7,
   129,   195,     5,   200,     3,   196,     6,     0,     3,     7,
    41,   195,     5,   200,     3,   200,     3,   196,     6,     0,
     3,     7,   145,   195,     5,   200,   329,   196,     6,     0,
     3,     7,   146,   195,     5,   200,   329,   200,     3,   196,
     6,     0,     3,     7,   144,   195,     5,   200,     3,   196,
     6,     0,     3,     7,   148,   195,     5,   200,     3,   200,
   321,   196,     6,     0,     3,     7,   149,   195,     5,   200,
     3,   200,   321,   200,   321,   196,     6,     0,     3,     7,
   156,   195,     5,   200,     3,   200,   321,   200,   321,   196,
     6,     0,     3,     7,   150,   195,     5,   200,     3,   200,
   321,   196,     6,     0,     3,     7,   160,   195,     5,   200,
     3,   200,   321,   200,   321,   196,     6,     0,     3,     7,
   151,   195,     5,   200,     3,   200,   329,   200,   329,   200,
   320,   200,   320,   196,     6,     0,     3,     7,   152,   195,
     5,   200,   329,   196,     6,     0,     3,     7,   153,   195,
   154,   200,   320,   200,     3,   196,     6,     0,     3,     7,
   155,   195,     5,   200,   329,   200,   320,   196,     6,     0,
     3,     7,   157,   195,     5,   200,     5,   200,     3,   200,
     3,   196,     6,     0,     3,     7,   158,   195,     5,   200,
     5,   200,     3,   196,     6,     0,     3,     7,   159,   195,
     3,   200,     3,   196,     6,     0,     0,   211,   212,     0,
   214,     0,   213,     0,   296,     0,   297,     0,   298,     0,
   301,     0,   302,     0,   303,     0,   306,     0,   318,     0,
   319,     0,   305,     0,   304,     0,    33,   195,     5,   196,
     6,     0,    33,   195,     5,   200,   331,   196,     6,     0,
     4,     5,   201,   215,   202,     6,     0,     4,     5,     4,
   323,   201,   215,   202,     6,     0,     0,   215,   217,     0,
   215,   220,     0,   215,   223,     0,   215,   226,     0,   215,
   229,     0,   215,   232,     0,   215,   235,     0,   215,   238,
     0,   215,   241,     0,   215,   244,     0,   215,   247,     0,
   215,   250,     0,   215,   253,     0,   215,   256,     0,   215,
   259,     0,   215,   262,     0,   215,   265,     0,   215,   268,
     0,   215,   271,     0,   215,   274,     0,   215,   277,     0,
   215,   280,     0,   215,   283,     0,   215,   286,     0,   215,
   289,     0,   215,   292,     0,   321,     0,   216,   200,   321,
     0,     0,    72,   195,   321,   200,   321,   200,   321,   196,
   218,   201,   216,   202,     6,     0,   321,     0,   219,   200,
   321,     0,     0,    73,   195,   321,   200,   321,   200,   321,
   196,   221,   201,   219,   202,     6,     0,   321,     0,   222,
   200,   321,     0,     0,    74,   195,   321,   200,   321,   200,
   321,   196,   224,   201,   222,   202,     6,     0,   321,     0,
   225,   200,   321,     0,     0,    75,   195,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   227,
   201,   225,   202,     6,     0,   321,     0,   228,   200,   321,
     0,     0,    76,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   230,   201,   228,   202,
     6,     0,   321,     0,   231,   200,   321,     0,     0,    77,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   196,   233,   201,   231,   202,     6,     0,   321,
     0,   234,   200,   321,     0,     0,    78,   195,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   236,   201,   234,   202,
     6,     0,   321,     0,   237,   200,   321,     0,     0,    79,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   239,
   201,   237,   202,     6,     0,   321,     0,   240,   200,   321,
     0,     0,    80,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   196,   242,   201,   240,   202,     6,     0,   321,     0,
   243,   200,   321,     0,     0,    81,   195,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   196,   245,   201,   243,   202,     6,     0,   321,     0,   246,
   200,   321,     0,     0,    82,   195,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   196,
   248,   201,   246,   202,     6,     0,   321,     0,   249,   200,
   321,     0,     0,    83,   195,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   251,
   201,   249,   202,     6,     0,   321,     0,   252,   200,   321,
     0,     0,    84,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   196,   254,   201,
   252,   202,     6,     0,   321,     0,   255,   200,   321,     0,
     0,    85,   195,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   196,   257,   201,   255,
   202,     6,     0,   321,     0,   258,   200,   321,     0,     0,
    86,   195,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   260,   201,   258,   202,
     6,     0,   321,     0,   261,   200,   321,     0,     0,    87,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   263,
   201,   261,   202,     6,     0,   321,     0,   264,   200,   321,
     0,     0,    88,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   196,   266,   201,   264,   202,     6,     0,   321,     0,
   267,   200,   321,     0,     0,    89,   195,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   196,   269,   201,   267,   202,     6,
     0,   321,     0,   270,   200,   321,     0,     0,    90,   195,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   272,   201,   270,   202,
     6,     0,   321,     0,   273,   200,   321,     0,     0,    91,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   196,   275,   201,   273,
   202,     6,     0,   321,     0,   276,   200,   321,     0,     0,
    92,   195,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   196,   278,   201,
   276,   202,     6,     0,   321,     0,   279,   200,   321,     0,
     0,    93,   195,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   196,   281,   201,   279,   202,     6,     0,   321,
     0,   282,   200,   321,     0,     0,    94,   195,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   196,   284,   201,
   282,   202,     6,     0,   321,     0,   285,   200,   321,     0,
     0,    95,   195,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   196,   287,   201,   285,   202,     6,     0,   335,
     0,   288,   200,   335,     0,     0,    96,   195,   321,   200,
   321,   200,   321,   196,   290,   201,   288,   202,     6,     0,
   335,     0,   291,   200,   335,     0,     0,    97,   195,   321,
   200,   321,   200,   321,   200,   321,   196,   293,   201,   291,
   202,     6,     0,     7,     0,   170,     0,   171,     0,   172,
     0,   173,     0,   191,     0,   192,     0,     4,   294,   321,
     6,     0,     4,   197,   321,   198,   294,   321,     6,     0,
     4,   197,   201,   331,   202,   198,   294,   329,     6,     0,
     4,   197,   198,     7,   329,     6,     0,     4,   295,     6,
     0,     4,   197,   321,   198,   295,     6,     0,     4,   199,
     4,     7,   335,     6,     0,     4,   197,   321,   198,   199,
     4,     7,   335,     6,     0,     4,   199,     4,   294,   321,
     6,     0,     4,   197,   321,   198,   199,     4,   294,   321,
     6,     0,     4,   199,     4,   295,     6,     0,     4,   197,
   321,   198,   199,     4,   295,     6,     0,     4,   199,   105,
   199,     4,     7,   332,     6,     0,     4,   197,   321,   198,
   199,   105,   199,     4,     7,   332,     6,     0,     4,   199,
   106,     7,   333,     6,     0,     4,   197,   321,   198,   199,
   106,     7,   333,     6,     0,    58,   195,     4,   196,   199,
     4,     7,   321,     6,     0,    58,   195,     4,   196,   199,
     4,     7,   335,     6,     0,    38,   195,   321,   196,     7,
   323,     6,     0,    54,    38,   195,   321,   196,     7,   329,
     6,     0,    70,    38,   329,     7,   201,   321,   200,   321,
   200,   321,   202,     6,     0,    45,    46,   329,     7,   321,
     6,     0,    41,   195,   321,   196,     7,   329,     6,     0,
    43,   195,   321,   196,     7,   329,     6,     0,    70,    41,
   329,     7,   201,   321,   200,   321,   200,   321,   202,     6,
     0,    39,   195,   321,   196,     7,   329,     6,     0,    40,
   195,   321,   196,     7,   329,     6,     0,    39,   195,   321,
   196,     7,   329,    49,   323,     6,     0,    47,   195,   321,
   196,     7,   201,   321,   200,   321,   200,     5,   200,     5,
   200,     5,   202,     6,     0,    54,    41,   195,   321,   196,
     7,   329,     6,     0,    41,    65,   195,   321,   196,     7,
   329,     6,     0,    98,   195,   321,   196,     7,   329,     6,
     0,    99,   195,   321,   196,     7,   329,     6,     0,   100,
   195,   321,   196,     7,   329,   104,   329,   101,   321,     6,
     0,    49,    42,   195,   321,   196,     7,   329,     6,     0,
   117,    42,   195,   321,   196,     7,   201,   321,   200,   329,
   202,     6,     0,    50,    42,   195,   321,   196,     7,   329,
     6,     0,    51,    42,   195,   321,   196,     7,   195,   321,
   200,   321,   196,   329,   329,     6,     0,   100,    42,   102,
   103,   195,   321,   196,     7,   327,   104,   201,   329,   200,
   329,   202,   101,   201,   321,   200,   321,   202,     6,     0,
   100,    42,   195,   321,   196,     7,   327,   104,   201,   329,
   200,   329,   202,   101,   201,   321,   200,   321,   202,     6,
     0,    54,    42,   195,   321,   196,     7,   329,     6,     0,
    42,    65,   195,   321,   196,     7,   329,     6,     0,    53,
    44,   195,   321,   196,     7,   329,     6,     0,    44,   195,
   321,   196,     7,   329,     6,     0,    54,    44,   195,   321,
   196,     7,   329,     6,     0,    60,   323,   201,   299,   202,
     0,    59,   201,   323,   200,   323,   200,   321,   202,   201,
   299,   202,     0,    61,   323,   201,   299,   202,     0,    62,
   201,   323,   200,   321,   202,   201,   299,   202,     0,   301,
     0,   300,     0,   298,     0,     0,   300,   297,     0,   300,
    38,   201,   331,   202,     6,     0,   300,    41,   201,   331,
   202,     6,     0,   300,    42,   201,   331,   202,     6,     0,
    64,   201,   300,   202,     0,    64,     4,   197,   321,   198,
     6,     0,    67,   201,   300,   202,     0,    67,     4,   197,
   321,   198,     6,     0,    67,   116,     6,     0,   105,   332,
   201,   300,   202,     0,     4,   335,     6,     0,     4,   321,
     6,     0,    58,   195,     4,   196,   199,     4,     6,     0,
   112,     6,     0,    37,     6,     0,   107,   195,   321,     8,
   321,   196,     0,   107,   195,   321,     8,   321,     8,   321,
   196,     0,   107,     4,   108,   201,   321,     8,   321,   202,
     0,   107,     4,   108,   201,   321,     8,   321,     8,   321,
   202,     0,   109,     0,   115,     4,     0,   113,     0,   114,
     4,     6,     0,   110,   195,   321,   196,     0,   111,     0,
    63,    38,   201,   321,   200,   323,   202,     6,     0,    63,
    38,   201,   321,   200,   323,   200,   323,   200,   321,   202,
     6,     0,    63,    38,   201,   321,   200,   323,   200,   323,
   200,   323,   200,   321,   202,     6,     0,     0,    63,    38,
   201,   321,   200,   323,   202,   307,   201,   316,   202,     6,
     0,     0,    63,    38,   201,   321,   200,   323,   200,   323,
   200,   321,   202,   308,   201,   316,   202,     6,     0,     0,
    63,    38,   201,   321,   200,   323,   200,   323,   200,   323,
   200,   321,   202,   309,   201,   316,   202,     6,     0,    63,
    41,   201,   321,   200,   323,   202,     6,     0,    63,    41,
   201,   321,   200,   323,   200,   323,   200,   321,   202,     6,
     0,    63,    41,   201,   321,   200,   323,   200,   323,   200,
   323,   200,   321,   202,     6,     0,     0,    63,    41,   201,
   321,   200,   323,   202,   310,   201,   316,   202,     6,     0,
     0,    63,    41,   201,   321,   200,   323,   200,   323,   200,
   321,   202,   311,   201,   316,   202,     6,     0,     0,    63,
    41,   201,   321,   200,   323,   200,   323,   200,   323,   200,
   321,   202,   312,   201,   316,   202,     6,     0,    63,    42,
   201,   321,   200,   323,   202,     6,     0,    63,    42,   201,
   321,   200,   323,   200,   323,   200,   321,   202,     6,     0,
    63,    42,   201,   321,   200,   323,   200,   323,   200,   323,
   200,   321,   202,     6,     0,     0,    63,    42,   201,   321,
   200,   323,   202,   313,   201,   316,   202,     6,     0,     0,
    63,    42,   201,   321,   200,   323,   200,   323,   200,   321,
   202,   314,   201,   316,   202,     6,     0,     0,    63,    42,
   201,   321,   200,   323,   200,   323,   200,   323,   200,   321,
   202,   315,   201,   316,   202,     6,     0,   317,     0,   316,
   317,     0,    71,   201,   329,   200,   329,   200,   329,   202,
     6,     0,    71,   201,   329,   200,   329,   202,     6,     0,
    66,     6,     0,    52,    41,   329,     7,   321,     6,     0,
    52,    41,   329,     7,   321,    55,    57,   321,     6,     0,
    52,    41,   329,     7,   321,    55,    56,   321,     6,     0,
    52,    42,   201,   321,   202,     7,   329,     6,     0,    48,
    42,   201,   321,   202,     7,   329,     6,     0,    52,    44,
   201,   321,   202,     7,   329,     6,     0,    66,    42,   329,
     7,   321,     6,     0,    66,    42,   329,     6,     0,    68,
     6,     0,    69,     6,     0,   121,     0,   122,     0,   123,
     0,   124,     0,   125,     0,   322,     0,   195,   321,   196,
     0,   185,   321,     0,   184,   321,     0,   190,   321,     0,
   321,   185,   321,     0,   321,   184,   321,     0,   321,   186,
   321,     0,   321,   187,   321,     0,   321,   188,   321,     0,
   321,   194,   321,     0,   321,   180,   321,     0,   321,   182,
   321,     0,   321,   181,   321,     0,   321,   183,   321,     0,
   321,   177,   321,     0,   321,   178,   321,     0,   321,   176,
   321,     0,   321,   175,   321,     0,   321,   174,   321,     8,
   321,     0,    12,   195,   321,   196,     0,    13,   195,   321,
   196,     0,    14,   195,   321,   196,     0,    15,   195,   321,
   196,     0,    16,   195,   321,   196,     0,    17,   195,   321,
   196,     0,    18,   195,   321,   196,     0,    19,   195,   321,
   196,     0,    20,   195,   321,   196,     0,    22,   195,   321,
   196,     0,    23,   195,   321,   200,   321,   196,     0,    24,
   195,   321,   196,     0,    25,   195,   321,   196,     0,    26,
   195,   321,   196,     0,    27,   195,   321,   196,     0,    28,
   195,   321,   196,     0,    29,   195,   321,   196,     0,    30,
   195,   321,   200,   321,   196,     0,    31,   195,   321,   200,
   321,   196,     0,    32,   195,   321,   200,   321,   196,     0,
    21,   195,   321,   196,     0,    12,   197,   321,   198,     0,
    13,   197,   321,   198,     0,    14,   197,   321,   198,     0,
    15,   197,   321,   198,     0,    16,   197,   321,   198,     0,
    17,   197,   321,   198,     0,    18,   197,   321,   198,     0,
    19,   197,   321,   198,     0,    20,   197,   321,   198,     0,
    22,   197,   321,   198,     0,    23,   197,   321,   200,   321,
   198,     0,    24,   197,   321,   198,     0,    25,   197,   321,
   198,     0,    26,   197,   321,   198,     0,    27,   197,   321,
   198,     0,    28,   197,   321,   198,     0,    29,   197,   321,
   198,     0,    30,   197,   321,   200,   321,   198,     0,    31,
   197,   321,   200,   321,   198,     0,    32,   197,   321,   200,
   321,   198,     0,    21,   197,   321,   198,     0,     3,     0,
     9,     0,    10,     0,    11,     0,     4,     0,     4,   197,
   321,   198,     0,     4,   295,     0,     4,   197,   321,   198,
   295,     0,     4,   199,     4,     0,     4,   197,   321,   198,
   199,     4,     0,     4,   199,     4,   295,     0,     4,   197,
   321,   198,   199,     4,   295,     0,   324,     0,   185,   323,
     0,   184,   323,     0,   323,   185,   323,     0,   323,   184,
   323,     0,   201,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   202,     0,   201,   321,   200,   321,   200,   321,
   200,   321,   202,     0,   201,   321,   200,   321,   200,   321,
   202,     0,   195,   321,   200,   321,   200,   321,   196,     0,
     0,   195,   326,   196,     0,     5,     0,   326,   200,     5,
     0,     0,   201,   328,   202,     0,   195,   328,   196,     0,
   329,     0,   328,   200,   329,     0,   321,     0,   330,     0,
   201,   331,   202,     0,   185,   201,   331,   202,     0,   321,
     8,   321,     0,   321,     8,   321,     8,   321,     0,    38,
   201,   321,   202,     0,   298,     0,   301,     0,   306,     0,
     4,   197,   198,     0,   185,     4,   197,   198,     0,     4,
   197,   201,   331,   202,   198,     0,   185,     4,   197,   201,
   331,   202,   198,     0,   321,     0,   330,     0,   331,   200,
   321,     0,   331,   200,   330,     0,   201,   321,   200,   321,
   200,   321,   200,   321,   202,     0,   201,   321,   200,   321,
   200,   321,   202,     0,     4,     0,     4,   199,   105,   199,
     4,     0,   201,   334,   202,     0,     4,   197,   321,   198,
   199,   106,     0,   332,     0,   334,   200,   332,     0,     5,
     0,    35,   195,   335,   200,   335,   196,     0,    36,   195,
   335,   196,     0,    34,   195,   335,   196,     0,    34,   195,
   335,   200,   331,   196,     0,    34,   195,     4,   199,     4,
   196,     0,    34,   195,     4,   197,   321,   198,   199,     4,
   196,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   169,   171,   172,   173,   178,   180,   183,   191,   205,   215,
   217,   220,   222,   223,   226,   232,   237,   238,   239,   242,
   246,   249,   255,   260,   266,   274,   279,   283,   289,   294,
   298,   303,   307,   310,   315,   319,   323,   327,   332,   336,
   339,   343,   347,   351,   355,   359,   363,   366,   370,   373,
   377,   380,   387,   391,   397,   399,   400,   401,   402,   403,
   404,   405,   406,   407,   408,   409,   410,   413,   418,   433,
   438,   444,   449,   450,   451,   452,   453,   454,   455,   456,
   457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
   467,   468,   469,   470,   471,   472,   473,   474,   477,   480,
   484,   490,   496,   499,   503,   509,   515,   518,   522,   528,
   534,   537,   541,   549,   555,   558,   562,   570,   576,   579,
   583,   591,   597,   600,   604,   616,   622,   625,   629,   641,
   647,   650,   654,   666,   672,   675,   679,   692,   698,   701,
   705,   718,   724,   727,   731,   744,   750,   753,   757,   770,
   776,   779,   783,   796,   802,   805,   809,   822,   828,   831,
   835,   858,   864,   867,   871,   894,   900,   903,   907,   930,
   936,   939,   943,   961,   967,   970,   974,   992,   998,  1001,
  1005,  1023,  1029,  1032,  1036,  1053,  1059,  1062,  1066,  1083,
  1089,  1092,  1096,  1113,  1119,  1125,  1132,  1140,  1146,  1152,
  1159,  1167,  1176,  1178,  1179,  1180,  1181,  1184,  1186,  1189,
  1220,  1254,  1301,  1316,  1325,  1340,  1352,  1366,  1389,  1413,
  1425,  1439,  1451,  1465,  1485,  1507,  1519,  1535,  1546,  1552,
  1571,  1585,  1591,  1597,  1616,  1622,  1628,  1644,  1651,  1657,
  1663,  1674,  1685,  1710,  1716,  1735,  1757,  1763,  1771,  1777,
  1783,  1792,  1798,  1804,  1814,  1820,  1825,  1830,  1837,  1839,
  1840,  1843,  1848,  1852,  1866,  1880,  1898,  1909,  1919,  1927,
  1931,  1939,  1951,  2034,  2054,  2059,  2063,  2083,  2095,  2105,
  2126,  2147,  2168,  2174,  2179,  2184,  2188,  2196,  2209,  2219,
  2229,  2234,  2244,  2249,  2259,  2264,  2277,  2294,  2311,  2328,
  2333,  2350,  2355,  2372,  2377,  2397,  2413,  2429,  2445,  2450,
  2467,  2473,  2490,  2496,  2515,  2519,  2524,  2551,  2575,  2583,
  2602,  2620,  2638,  2660,  2681,  2702,  2716,  2735,  2740,  2749,
  2751,  2752,  2753,  2754,  2757,  2759,  2760,  2761,  2762,  2763,
  2764,  2765,  2766,  2773,  2774,  2775,  2776,  2777,  2778,  2779,
  2780,  2781,  2782,  2783,  2784,  2785,  2786,  2787,  2788,  2789,
  2790,  2791,  2792,  2793,  2794,  2795,  2796,  2797,  2798,  2799,
  2800,  2801,  2802,  2803,  2804,  2806,  2807,  2808,  2809,  2810,
  2811,  2812,  2813,  2814,  2815,  2816,  2817,  2818,  2819,  2820,
  2821,  2822,  2823,  2824,  2825,  2826,  2831,  2836,  2837,  2838,
  2842,  2853,  2870,  2881,  2900,  2916,  2932,  2948,  2965,  2970,
  2974,  2978,  2982,  2988,  2993,  2997,  3001,  3007,  3011,  3016,
  3020,  3025,  3029,  3033,  3039,  3045,  3052,  3058,  3062,  3066,
  3076,  3083,  3094,  3114,  3123,  3132,  3141,  3155,  3171,  3191,
  3215,  3221,  3225,  3229,  3240,  3245,  3256,  3261,  3279,  3284,
  3297,  3303,  3309,  3314,  3322,  3335,  3339,  3357,  3371
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tBSpline",
"tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tTrimmed","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Command","Loop",
"Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35","ExtrudeParameters",
"ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   203,   203,   203,   203,   204,   204,   205,   205,   205,   206,
   206,   207,   207,   207,   208,   208,   208,   208,   208,   209,
   209,   209,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   211,   211,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   213,   213,   214,
   214,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   216,   216,
   218,   217,   219,   219,   221,   220,   222,   222,   224,   223,
   225,   225,   227,   226,   228,   228,   230,   229,   231,   231,
   233,   232,   234,   234,   236,   235,   237,   237,   239,   238,
   240,   240,   242,   241,   243,   243,   245,   244,   246,   246,
   248,   247,   249,   249,   251,   250,   252,   252,   254,   253,
   255,   255,   257,   256,   258,   258,   260,   259,   261,   261,
   263,   262,   264,   264,   266,   265,   267,   267,   269,   268,
   270,   270,   272,   271,   273,   273,   275,   274,   276,   276,
   278,   277,   279,   279,   281,   280,   282,   282,   284,   283,
   285,   285,   287,   286,   288,   288,   290,   289,   291,   291,
   293,   292,   294,   294,   294,   294,   294,   295,   295,   296,
   296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
   296,   296,   296,   296,   296,   296,   296,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   298,   298,   298,   298,   299,   299,
   299,   300,   300,   300,   300,   300,   301,   301,   302,   302,
   302,   303,   304,   304,   304,   304,   304,   305,   305,   305,
   305,   305,   305,   305,   305,   305,   305,   306,   306,   306,
   307,   306,   308,   306,   309,   306,   306,   306,   306,   310,
   306,   311,   306,   312,   306,   306,   306,   306,   313,   306,
   314,   306,   315,   306,   316,   316,   317,   317,   317,   318,
   318,   318,   318,   318,   318,   318,   318,   319,   319,   320,
   320,   320,   320,   320,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   323,   323,
   323,   323,   323,   324,   324,   324,   324,   325,   325,   326,
   326,   327,   327,   327,   328,   328,   329,   329,   329,   329,
   330,   330,   330,   330,   330,   330,   330,   330,   330,   330,
   331,   331,   331,   331,   332,   332,   332,   332,   333,   333,
   334,   334,   335,   335,   335,   335,   335,   335,   335
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     7,     6,
     8,     0,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     3,
     0,    13,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    19,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    25,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    31,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    55,     1,     3,     0,    55,     1,     3,     0,    55,
     1,     3,     0,    43,     1,     3,     0,    43,     1,     3,
     0,    43,     1,     3,     0,    37,     1,     3,     0,    37,
     1,     3,     0,    37,     1,     3,     0,    13,     1,     3,
     0,    15,     1,     1,     1,     1,     1,     1,     1,     4,
     7,     9,     6,     3,     6,     6,     9,     6,     9,     5,
     8,     8,    11,     6,     9,     9,     9,     7,     8,    12,
     6,     7,     7,    12,     7,     7,     9,    17,     8,     8,
     7,     7,    11,     8,    12,     8,    14,    22,    20,     8,
     8,     8,     7,     8,     5,    11,     5,     9,     1,     1,
     1,     0,     2,     6,     6,     6,     4,     6,     4,     6,
     3,     5,     3,     3,     7,     2,     2,     6,     8,     8,
    10,     1,     2,     1,     3,     4,     1,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     1,     2,     9,     7,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     4,     2,     5,     3,     6,     4,     7,     1,     2,
     2,     3,     3,    11,     9,     7,     7,     0,     3,     1,
     3,     0,     3,     3,     1,     3,     1,     1,     3,     4,
     3,     5,     4,     1,     1,     1,     3,     4,     6,     7,
     1,     1,     3,     3,     9,     7,     1,     5,     3,     6,
     1,     3,     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   282,     0,
   287,     0,   284,     0,     0,     0,    54,    56,    55,    57,
    58,    59,    60,    61,    62,    67,    66,    63,    64,    65,
     5,     0,     0,     0,    15,    16,    18,    17,    19,   418,
   418,     0,   397,   401,   453,   203,   398,   399,   400,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   204,   205,   206,   207,     0,     0,     0,
   208,   209,     0,     0,     0,     0,     0,     0,   335,     0,
     0,   277,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   409,     0,     0,     0,     0,     0,     0,   262,     0,
     0,     0,   262,   328,   329,     0,     0,     0,     0,     0,
     0,   447,     0,     0,     0,     0,     0,   276,     0,   283,
     0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   403,
     0,    72,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   338,   337,   339,
     0,     0,     0,     0,     0,     0,     0,     0,   214,   274,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   273,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   401,     0,     0,     0,   434,
   435,   436,   427,     0,   428,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   411,   410,     0,     0,     0,     0,   262,   262,     0,     0,
     0,     0,     0,     0,     0,     0,   271,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   262,     0,     0,
     0,   285,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   420,     0,     0,     0,     0,     0,
   405,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   453,     0,     0,     0,
   336,     0,     0,   441,   442,     0,     0,   203,     0,     0,
     0,     0,   210,     0,   353,   352,   350,   351,   346,   348,
   347,   349,   341,   340,   342,   343,   344,   345,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   401,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   413,   412,   261,     0,   260,   259,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   267,   263,   327,
     0,     0,   269,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   286,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   419,     0,
     0,    21,     0,   402,   407,    72,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,   355,
   376,   356,   377,   357,   378,   358,   379,   359,   380,   360,
   381,   361,   382,   362,   383,   363,   384,   375,   396,   364,
   385,     0,     0,   366,   387,   367,   388,   368,   389,   369,
   390,   370,   391,   371,   392,     0,     0,     0,     0,     0,
     0,     0,     0,   456,     0,     0,   455,     0,     0,     0,
     0,     0,     0,     0,     0,   220,     0,     0,     0,     0,
     0,    68,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   437,     0,     0,     0,     0,   429,   431,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   255,   257,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   272,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   421,     0,   418,     0,   404,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    70,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   213,   443,   444,
     0,     0,     0,     0,     0,   215,   216,   218,     0,     0,
   451,     0,   224,   354,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   433,   438,     0,   430,     0,   231,
     0,     0,     0,     0,     0,   320,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   268,     0,     0,     0,   326,   270,     0,     0,
     0,     0,     0,   422,     0,   448,     0,     0,     0,   278,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   330,   331,   332,   333,   334,
     0,     0,     0,     0,     0,     0,     0,    20,     0,   406,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   365,   386,   372,
   393,   373,   394,   374,   395,     0,   458,   457,   454,     0,
   203,     0,     0,     0,     0,   211,     0,     0,     0,   449,
    69,   228,   235,     0,   236,     0,   232,     0,   233,   253,
     0,     0,   432,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   275,     0,     0,
     0,     0,   262,     0,   291,     0,   300,     0,   309,     0,
     0,     0,     0,     0,   241,   242,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   418,   408,    71,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   221,
     0,     0,   222,     0,   452,     0,   240,   251,   439,     0,
     0,   324,   244,   246,     0,     0,     0,   323,   325,   252,
   229,   239,   250,   254,     0,     0,     0,   417,     0,   416,
     0,     0,   288,     0,     0,   297,     0,     0,   306,     0,
   264,   265,   266,     0,     0,   422,     0,   425,     0,     0,
     0,     0,   446,     0,   280,   279,     0,     0,     0,     0,
     0,    23,     0,    32,     0,    36,     0,    30,     0,     0,
    35,     0,    40,    38,     0,     0,     0,     0,     0,     0,
    47,     0,     0,     0,     0,     0,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   212,   217,   219,     0,
   225,     0,   237,   440,     0,     0,   322,   321,   226,   227,
   262,     0,   258,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   424,     0,   423,     0,     0,     0,     0,     0,
     0,     0,   422,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   459,
     0,   450,     0,     0,     0,     0,   415,     0,     0,     0,
     0,     0,     0,     0,     0,   315,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   426,     0,     0,   445,   281,
     0,     0,    37,     0,     0,     0,     0,    27,     0,    33,
     0,    39,    28,    41,     0,    44,     0,    48,    49,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   223,     0,     0,   256,     0,     0,   293,     0,   319,     0,
     0,   316,   302,     0,     0,   311,     0,     0,     0,     0,
     0,     0,   243,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   101,   105,   109,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   197,     0,     0,     0,   414,   289,     0,     0,     0,
   292,   298,     0,     0,   301,   307,     0,     0,   310,   230,
   234,     0,     0,   245,     0,     0,     0,     0,     0,    31,
    34,    42,     0,    43,    50,    45,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   295,     0,     0,   304,
     0,   313,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   201,     0,   247,     0,
   290,     0,     0,     0,   299,     0,     0,   308,     0,     0,
     0,     0,     0,     0,    26,    29,     0,     0,     0,    99,
     0,   103,     0,   107,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   195,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   294,     0,     0,   318,   303,
     0,   312,     0,     0,     0,     0,     0,     0,    46,    22,
   100,   102,   104,   106,   108,   110,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   196,   198,     0,
   199,   238,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   113,   117,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   296,   317,   305,   314,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   200,   202,     0,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   249,     0,     0,     0,   111,     0,   115,
     0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   248,     0,    24,
   112,   114,   116,   118,   120,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   125,   129,   133,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   123,     0,   127,     0,   131,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   124,   126,   128,   130,
   132,   134,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,   141,
   145,   149,   153,   157,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   135,     0,   139,     0,   143,
     0,   147,     0,   151,     0,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   136,   138,   140,   142,
   144,   146,   148,   150,   152,   154,   156,   158,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   185,   189,   193,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   183,     0,   187,     0,   191,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   184,   186,   188,   190,   192,   194,
     0,     0,     0,   173,   177,   181,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   171,     0,   175,     0,   179,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   172,
   174,   176,   178,   180,   182,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   161,   165,   169,     0,     0,     0,     0,
     0,     0,     0,   159,     0,   163,     0,   167,     0,     0,
     0,     0,     0,     0,   160,   162,   164,   166,   168,   170,
     0,     0,     0
};

static const short yydefgoto[] = {  2291,
    83,     5,     6,    19,    20,    21,    22,     7,    67,    68,
    69,   423,  1609,   634,  1518,  1611,   635,  1519,  1613,   636,
  1520,  1827,   637,  1774,  1829,   638,  1775,  1831,   639,  1776,
  1963,   640,  1925,  1965,   641,  1926,  1967,   642,  1927,  2075,
   643,  2045,  2077,   644,  2046,  2079,   645,  2047,  2081,   646,
  2048,  2083,   647,  2049,  2085,   648,  2050,  2273,   649,  2267,
  2275,   650,  2268,  2277,   651,  2269,  2222,   652,  2210,  2224,
   653,  2211,  2226,   654,  2212,  2171,   655,  2153,  2173,   656,
  2154,  2175,   657,  2155,  1636,   658,  1542,  1730,   659,  1638,
   136,   240,    70,   549,   330,   536,   537,   331,    74,    75,
    76,    77,   332,  1174,  1488,  1592,  1177,  1493,  1596,  1180,
  1497,  1599,  1355,  1356,    79,    80,   961,   333,   139,   351,
   172,   235,   416,  1070,  1187,  1188,   335,   476,   194,   720,
   872,   140
};

static const short yypact[] = {  2645,
    58,-32768,-32768,   -92,-32768,   269,  2925,-32768,    19,    77,
   108,   122,   130,   145,   173,    14,    24,    67,-32768,-32768,
-32768,-32768,  2312,    98,   188,   101,   117,   141,   -37,   280,
   161,   171,   313,   178,   345,   362,   406,   410,   566,   428,
   148,   263,   279,   -76,   -76,   284,   433,     5,   446,     7,
   498,   512,    74,   329,   332,   -19,     9,    10,-32768,   350,
-32768,   548,-32768,   560,   614,   528,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   659,    19,  2760,-32768,-32768,-32768,-32768,-32768,   380,
   380,   575,-32768,   -36,    13,-32768,-32768,-32768,-32768,   -93,
   197,   241,   349,   379,   384,   414,   418,   419,   422,   426,
   427,   430,   431,   434,   435,   468,   469,   472,   473,   488,
   451,   476,   477,-32768,-32768,-32768,-32768,  2547,  2547,  2547,
-32768,-32768,  2547,   946,    26,  2547,   674,   650,-32768,   678,
   682,-32768,  2547,  2547,  2547,   544,  2547,   561,  2547,  2547,
   574,  2547,   517,   565,   573,   628,   574,   529,   547,   634,
   647,   676,   686,   687,   725,   -76,   -76,   -76,  2547,  2547,
  -106,-32768,   -32,   -76,   579,   653,   669,   570,-32768,   574,
   690,   887,-32768,-32768,-32768,   574,   574,  2547,  2547,   -57,
  2547,   704,  2547,   708,   802,  2547,  2547,-32768,   905,-32768,
   717,-32768,    19,   733,   734,   735,   736,   737,   740,   741,
   742,   743,   744,   745,   746,   747,   748,   749,   751,   752,
   756,   757,   759,   784,   786,   787,   788,   789,   790,   791,
   792,   793,   810,   929,   806,   811,   808,  2547,  1005,-32768,
   -76,-32768,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,    57,    54,    54,   817,   817,   817,
 10646,  1006,  2359,  9971,    25,   813,  1007,   675,-32768,-32768,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,-32768,  -125, 10669, 10692, 10715,
  2547, 10738,  2547, 10761, 10784,   252,   819,  1488,  2359,-32768,
-32768,-32768,  1765,  1011,-32768, 10807,  2547,  2547,  2547,  2547,
  1014,  2547,  2547,  2547,  2547,  2547,  2547,  2547,   826,     0,
-32768,-32768,  3419,  3440,   -76,   -76,   471,   471,   144,  2547,
  2547,  2547,  2547,    -1,   270,  2547,-32768,  2014,  1016,  1017,
 10830, 10853,   925,  2547, 10876,   926,  3461,-32768,   829,  1812,
 10899,-32768,  2547,   866,  1028,  1029,  1030,  1031,  1032,  1033,
  1034,  1037,  1038,  1039,  1040,  1041,  1042,  1044,  1048,  1049,
  1051,  1052,  1053,  1054,  1055,  1056,  1057,   909,  1059,  1061,
  1062,  1063,  1066,  1065,-32768,  -120,  1070,  1071,  1073,  9996,
   346,    -2,  2754, 10922, 10021, 10945, 10046, 10968, 10071, 10991,
 10096, 11014, 10121, 11037, 10146, 11060, 10171, 11083, 10196, 11106,
 10221, 11129, 10246, 11152, 10271,  3482,  3503, 11175, 10296, 11198,
 10321, 11221, 10346, 11244, 10371, 11267, 10396, 11290, 10421,  3524,
  3545,  3566,  3587,  3608,  3629,   204,-32768,   320,   871,   880,
-32768,   574,  2610,  1765,-32768,   490,   262,    54,  2547,  1074,
  1077,    17,-32768,  2087,   243,   282,   692,   692,   327,   327,
   327,   327,   -44,   -44,   817,   817,   817,   817,  1076,  2359,
  1078,  1079,  1111, 11313,  1122, 11336,  1125,  1127,  1171,  2547,
   308,  2359,   491,  2547,  2547,  1128,  2896, 11359, 11382, 11405,
  2547,  2932,  2955, 11428, 11451, 11474, 11497, 11520,   885,   -76,
  2547,  2547,-32768,-32768,-32768,   935,  3005,-32768,   936,  2547,
  3650,  3671,  3692, 10446,  -127,   -41,   -30,-32768,-32768,-32768,
  2547, 10471,-32768,   938,   941,  1133,  1136,   950, 11543,  1146,
   965,  2547,  2621,  2547,  2547,-32768, 11566,   998,   966,   967,
   970,   972,   976,   977,   978,   979,  1008,  1009,  1035,  1036,
  1046,  1050,  1060,  1067,  1069,  1072,  1075,  1080,  1082,  1083,
  1084,  1085,  1087,  1088,  1090,  1117,  1118,  1121,-32768,  1202,
  1010,-32768,  1124,   111,-32768,-32768,  1043,  1045,  1047,  1064,
  1068,  1081,  1134,  1135,  1141,  1151,  1153,  1154,  1155,  1158,
  1159,  1162,  1163,  1164,  1165,  1167,  1168,  1169,  1170,  1172,
  1173,  1175,  1228,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2547,  2547,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  1233,-32768,  2359,    54,-32768,  1235,  2359,  1058,
    43,  2547,  1238,  1242,   714,-32768,  1232,  1131,     9,  1246,
  2547,-32768,   323,   -76,   574,   574,  1247,   574,  1254,   574,
   574,-32768,  2359,  2986,  1201,   494,-32768,  2115,   739,  1174,
  1255,  1258,  1263,  1264,   467,  1267,  1270,  1271,  1272,  1315,
  1345,  1364,  1369,   150,  3713,  3734,-32768,-32768,  3009,   -76,
   -76,   -76,  1368,  2359,  2359,  2359,   816,  1370,  2547,  2547,
   574,   574,  2547,  1371,   574,  1373,  3755,-32768,  2286,   375,
  1372,  1217,  1378,  2547,  2547,   -76,  1379,  1380,  1198,  1384,
  1385,   574,   574,  1386,   -76,  1387,  1389,   574,   574,  1390,
  1391,  1392,  1394,  1395,   574,   372,   574,  1397,  1396,  1398,
  1401,  1403,-32768,  1402,   380,  1405,-32768,  2780,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,-32768, 11589, 10496, 11612, 10521, 11635,
 10546, 11658, 10571, 10596,  1211,   340,  1214,-32768,  1765,-32768,
   160,   311,  1213,  1406,   939,-32768,-32768,-32768,     9,  2547,
-32768,   497,-32768, 12509,  1410,    81,    51,  1412,   574,  1413,
   574,  1415,  1416,   501,-32768,-32768,  2359,-32768,  2547,-32768,
  2547,   574,   574,   574,  1229,-32768,   583,   574,   574,   574,
   574,   574,   574,   574,   651,  2547,  2547,  2547,  1222,  -119,
   -99,   -67,-32768,   502,   505,   506,-32768,-32768,  3776,  3797,
  1419,  1420, 11681,   -61,  1323,-32768,  2547,  2547,  2547,-32768,
  1227,    19,  1230,  3818,  3839,   206,  1231,  1236,  1237,  1239,
  1259,  1240,  1266,  1276,   294,  1277,  1282,  1283,  1284,  1285,
  1286,  1288,  1290,  1293,  1298,-32768,-32768,-32768,-32768,-32768,
  1295,  1321,  1322,  1324,  1325,  1327,  1326,-32768,  1328,   346,
  1423,  3860,  3881,  3902,  3923,  3944,  3965,  3986,  4007,  4028,
  4049,  4070,  4091,  4112,  4133,  4154,  4175,  4196,  4217,  4238,
  4259,  4280,  4301,  4322,  4343,  4364,  4385,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1234,-32768,-32768,-32768,   574,
    54,  2547,  1476,  1479,    17,-32768,  1521, 10621,     9,-32768,
-32768,-32768,-32768,   -76,-32768,  1523,-32768,  1524,-32768,-32768,
  1333,   511, 12509,  4406,  1526,  1527,  1528,  2547,  2547,  2547,
  1529,  1530,  1531,  1532,  1557,  1558,  1559,-32768,  2422,  3032,
 11704,  1287,   471,   -76,  1560,   -76,  1561,   -76,  1562,  1563,
  1564,  1565,  2547,  2547,-32768,-32768,  1567,   574,   574,  1471,
   574,  2353,   194, 11727,  2547,    19,  1573,  2547,   574,  1601,
  1614,  1612,  1433,  1615,   372,  1617,  1621,  2547,  1622,  1624,
  1623,  1625,  1632,   372,  2547,  2547,  2547,   574,  1631,  1656,
   372,  2547,  1657,  1658,  1659,  2547,   380,-32768,-32768,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  1616,  1660,  1661,   974,-32768,
  1655,  1662,-32768,  1431,-32768,    90,-32768,-32768,-32768,  1465,
  2547,-32768,-32768,-32768,  4427,  1157,  1428,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1627,  1663,  1473,-32768,  2547,-32768,
  1474,   157,-32768,  1478,   162,-32768,  1480,   164,-32768,  1481,
-32768,-32768,-32768,  4448,  4469,   -61,   347,-32768,   514,  1483,
  1574,  2547,-32768,  2547,-32768,-32768,  4490,    19,  1484,  4511,
  1477,-32768,  1485,-32768,  1486,-32768,  1492,-32768,  1490, 11750,
-32768,  1491,-32768,-32768,  1496,  1498, 11773,  4532, 11796,  1495,
-32768,  1500,  1501,  4553,  1502,  1505,-32768,  4574,  1503,  4595,
  4616,  4637,  4658,  4679,  4700,  4721,  4742,  4763,  4784,  4805,
  4826,  4847,  4868,  4889,  4910,  4931,  4952,  4973,  4994,  5015,
  5036,  5057,  5078,  5099,  5120,  1508,-32768,-32768,-32768,     9,
-32768,  1592,-32768,-32768,  5141,  2547,-32768,-32768,-32768,-32768,
   471,  2826,-32768,  1569,   292,  1569,   292,  1569,   292,  2547,
  2547,  1602,-32768,   574,-32768,   574,  2547,  3055,  3084,   574,
  1542,  1701,   -61,   372,  1705,  2547,  1703,   372,  1704,  1708,
  1706,  1707,  1710,  2547,  1711,   574,  1712,  1713,  2547,  1717,
  1715,  2547,  1735,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,-32768,
  1736,-32768,  1738, 11819,  1539,  2547,-32768,  1569,  1569,  2547,
  3107,   200,  1739,  1543,   -40,-32768,  3140,   213,   -15,  3169,
   257,   -11,  3192,  3215,  1545,-32768,  1547,  1681,-32768,-32768,
  1546,    19,-32768,  1549,  1550,  1551,  5162,-32768,  1556,-32768,
  1566,-32768,-32768,-32768, 11842,-32768,  1555,-32768,-32768, 11865,
  1570,-32768, 11888,  1568, 11911, 11934, 11957,  5183,  5204,  5225,
  5246,  5267,  5288,  5309,  5330,  5351,  5372,  5393,  5414,  5435,
  5456,  5477,  5498,  5519,  5540,  5561,  5582,  5603, 11980,  5624,
-32768,  1571,   574,-32768,  3245,  3392,  1750,  2547,-32768,   574,
  1751,-32768,  1752,  2547,  1754,  1755,  2547,  1757,  1759,  1761,
   574,   574,-32768,  1763,    19,   372,   372,   372,   372,  1766,
  1769,  1770,   372,  1771,  1772,  1794,  1801,-32768,-32768,-32768,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,-32768,  2547,  1811,   574,-32768,-32768,  1618,  3277,  1626,
-32768,-32768,  1628,  3300,-32768,-32768,  1629,  3323,-32768,-32768,
-32768,  1634,  1620,-32768,    19,  1636,  1670,  1664,  1675,-32768,
-32768,-32768,  1672,-32768,-32768,-32768,  1673,  1676,  1677,  1678,
  5645,  5666,  5687,  5708,  5729,  5750,  5771,  5792,  5813,  5834,
  5855,  5876,  5897,  5918,  5939,  5960,  5981,  6002,  6023,  6044,
  6065,  1679, 12003,  1674,  1817,   292,  1818,   574,   292,  1819,
   292,  1821,   574,  1716,  1665,   372,   372,  1826,  1870,   372,
  1813,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,    54,-32768,  1876,-32768,     1,
-32768,  1682,   515,    11,-32768,  1683,    93,-32768,  1684,  1680,
  1700,    19,  1702,  1709,-32768,-32768,  1714,  1718,   519, 12509,
   522, 12509,   523, 12509,  6086,  6107,  6128,  6149,  6170,  6191,
  6212,  6233,  6254,  6275,  6296,  6317,  6338,  6359,  6380,  6401,
  6422,  6443,  6464,  6485,  6506,   526,-32768,  1719,  1742,  1897,
   292,   574,  1898,  1899,   292,  1900,   292,  1806,  2547,    19,
   372,   574,  1902,  1905,  2547,  1906,  2547,  1907,  2547,  1909,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,    54,  1910,    54,  1911,-32768,   106,  1753,-32768,-32768,
   109,-32768,   238,  1756,  6527,    19,  1758,  1760,-32768,-32768,
 12509,-32768, 12509,-32768, 12509,-32768, 12026, 12049, 12072,  6548,
  6569,  6590,  6611,  6632,  6653,  6674,  6695,  6716,  6737,  6758,
  6779,  6800,  6821,  6842,  6863,  6884,  6905,-32768,-32768,   534,
-32768,-32768,  1912,  1913,  1948,  1950,  2547,  2547,  1793,   372,
   574,-32768,-32768,-32768,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,    54,  1957,-32768,-32768,-32768,-32768,  6926,  3346,
  1796,  1767,  1783,  1790,  1800,  1802,  6947,  6968,  6989,  7010,
  7031,  7052,  7073,  7094,  7115,  7136,  7157,  7178,  7199,  7220,
  7241,  7262,  7283,  7304,-32768,-32768,  2547,  1978,-32768,   574,
   372,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  3369,-32768,  1804,  1809,   535, 12509,   538, 12509,
   549, 12509,  7325,  7346,  7367,  7388,  7409,  7430,  7451,  7472,
  7493,  7514,  7535,  7556,  7577,  7598,  7619,  7640,  7661,  7682,
  1996,   574,  2001,  2547,  2002,  2547,  2003,  2547,  2004,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,-32768,  1822,-32768,
 12509,-32768, 12509,-32768, 12509,-32768, 12095, 12118, 12141,  7703,
  7724,  7745,  7766,  7787,  7808,  7829,  7850,  7871,  7892,  7913,
  7934,  7955,  7976,  7997,   574,-32768,-32768,-32768,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  1823,  1810,  1820,  1824,  8018,  8039,  8060,
  8081,  8102,  8123,  8144,  8165,  8186,  8207,  8228,  8249,  8270,
  8291,  8312,   574,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  1827,   552, 12509,   553, 12509,   563, 12509,  8333,  8354,
  8375,  8396,  8417,  8438,  8459,  8480,  8501,  8522,  8543,  8564,
  8585,  8606,  8627,   372,  2547,  2018,  2547,  2020,  2547,  2022,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  1833, 12509,-32768, 12509,-32768,
 12509,-32768, 12164, 12187, 12210, 12233, 12256, 12279,  8648,  8669,
  8690,  8711,  8732,  8753,  8774,  8795,  8816,  2024,-32768,-32768,
-32768,-32768,-32768,-32768,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,-32768,  1830,  1831,  1832,  1834,  1835,  1859,
  8837,  8858,  8879,  8900,  8921,  8942,  8963,  8984,  9005,  2547,
  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,   571, 12509,   572, 12509,   576, 12509,
   577, 12509,   581, 12509,   584, 12509,  9026,  9047,  9068,  9089,
  9110,  9131,  9152,  9173,  9194,  2547,  2028,  2547,  2056,  2547,
  2060,  2547,  2063,  2547,  2064,  2547,  2065,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  2547,  2547, 12509,-32768, 12509,-32768,
 12509,-32768, 12509,-32768, 12509,-32768, 12509,-32768,  9215,  9236,
  9257,  9278,  9299,  9320, 12302, 12325, 12348,  2547,  2547,  2547,
  2547,  2547,  2547,-32768,-32768,-32768,  9341,  9362,  9383,  9404,
  9425,  9446,  1871,  1873,  1875,  2547,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2547,  9467,  9488,  9509,  9530,  9551,  9572,
   585, 12509,   588, 12509,   589, 12509,  2547,  2547,  2547,  2547,
  2547,  2547,  2547,  2072,  2547,  2074,  2547,  2076,  9593,  9614,
  9635, 12371, 12394, 12417, 12509,-32768, 12509,-32768, 12509,-32768,
  2547,  2547,  2547,-32768,-32768,-32768,  9656,  9677,  9698,  1893,
  1895,  1896,  2547,  2547,  2547,  2547,  2547,  2547,  9719,  9740,
  9761,   592, 12509,   593, 12509,   639, 12509,  2547,  2547,  2547,
  2547,  2092,  2547,  2093,  2547,  2094,  9782,  9803,  9824, 12509,
-32768, 12509,-32768, 12509,-32768,  2547,  2547,  2547,  9845,  9866,
  9887,  2547,  2547,  2547,  9908,  9929,  9950,  2547,  2547,  2547,
 12440, 12463, 12486,-32768,-32768,-32768,  1901,  1903,  1904,  2547,
  2547,  2547,   643, 12509,   646, 12509,   665, 12509,  2547,  2095,
  2547,  2097,  2547,  2100, 12509,-32768, 12509,-32768, 12509,-32768,
  2107,  2108,-32768
};

static const short yypgoto[] = {-32768,
   -25,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1504,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -289,   -22,-32768,  2102,    -5,  -353,  -171,    -3,-32768,-32768,
-32768,-32768,  2104,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768, -1252, -1326,-32768,-32768, -1031,   -23,-32768,   -29,
-32768,   -88,-32768, -1152,  1092,  1513,  -199,  -319,  -712,  1106,
-32768,  -267
};


#define	YYLAST		12703


static const short yytable[] = {   138,
   137,    72,   236,    73,   539,   479,   871,   364,   178,   513,
   181,   368,   192,   195,   171,   173,   241,   468,   469,   470,
   718,    81,   190,   146,  1359,  1353,  1362,   146,  1432,   295,
  1354,   478,  1432,  1282,   148,  1432,   545,    27,    28,   546,
   547,    31,    32,    33,   373,    34,   862,    36,    37,    38,
  1353,    40,    41,  1207,  1353,  1354,  1023,   203,   467,  1354,
   466,   467,  1216,     8,   355,   356,  1353,   143,    53,  1223,
   499,  1354,     9,   764,   500,   599,  1353,   355,   356,   600,
  1054,  1354,  1055,    84,   355,   356,  1022,   121,   122,   123,
   121,   122,   123,   475,   357,  1263,    54,    55,    56,  1024,
  1056,   243,  1057,   244,   288,   289,   290,   167,   168,   291,
   294,   186,   298,    85,   187,    66,   355,   356,   169,   318,
   319,   320,   182,   322,   170,   324,   325,    86,   336,   475,
   296,   297,  1058,  1068,  1059,    87,   350,   374,   352,  1069,
  1374,   312,   313,   314,   359,   353,   354,   863,   864,   315,
    88,   355,   356,   147,   131,   132,  1017,   147,  1353,   765,
   238,  1431,   239,  1354,   371,   372,    96,   375,   358,   377,
   766,  1353,   380,   381,  1353,   191,  1354,   384,    89,  1354,
   723,   355,   356,   355,   356,   161,  1435,   712,   162,   163,
  1438,   164,   736,   142,   124,   125,   126,   127,   606,   530,
   548,  1194,  1640,    82,   196,   179,   563,   183,    90,   193,
   714,   422,  1644,   242,   420,   131,   132,   719,    91,   424,
   425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
   435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
   445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,    92,  1375,  1432,   355,   356,  1379,  1432,    96,   474,
  1432,    10,   480,   355,   356,   550,   551,   484,   485,   486,
   487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
   497,   498,   141,  1590,  1646,   143,  1594,   504,  1597,   506,
   475,   131,   132,  1353,   289,   474,  1145,  1733,  1354,   816,
  1735,   144,   475,   517,   518,   519,   520,  1011,   522,   523,
   524,   525,   526,   527,   528,   533,   534,   355,   356,   124,
   125,   126,   127,   355,   356,   145,   541,   542,   543,   544,
   355,   356,   552,   540,   148,   355,   356,   355,   356,   906,
   559,   535,   535,   538,   538,   149,  1274,  1353,   151,   567,
  1432,  1276,  1354,  1278,  1432,   150,  1432,   301,   302,   303,
   304,   305,   152,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   929,   355,   356,   856,   153,   315,  1687,   355,
   356,   245,  1691,   246,  1693,  1195,   355,   356,   605,  1428,
   702,  1080,   703,   154,    11,    12,    13,    14,    15,    16,
    17,    18,  1434,   884,  1506,  1507,  1508,  1509,   303,   304,
   305,  1513,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   124,   125,   126,   127,   247,   315,   248,   857,  1736,
   355,   356,   131,   132,   914,   915,   916,   155,   509,   289,
   239,   156,   131,   132,   713,   715,  1437,   165,   304,   305,
   711,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   175,   160,   896,   176,   177,   315,   474,   355,   356,   166,
   124,   125,   126,   127,   174,   420,   734,   180,   474,  1089,
   738,   739,   956,   957,   958,   959,   960,   745,   131,   132,
   754,   131,   132,   184,   735,   475,   239,   755,   756,   860,
   310,   311,   312,   313,   314,   704,   759,   185,   875,   705,
   315,   897,   709,   188,  1603,  1604,   189,   767,  1607,    43,
    44,    45,    46,   475,    48,  1008,   131,   132,   777,   709,
   779,   780,  1283,   249,   197,   250,  1284,  1341,   301,   302,
   303,   304,   305,   198,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   199,   475,   475,   475,  1032,   315,   201,
   930,  1010,  1012,   251,   234,   252,    93,   326,   253,   237,
   254,   817,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   157,   158,   255,   159,
   256,   327,   257,   259,   258,   260,   261,   200,   262,  1697,
   263,   265,   264,   266,   267,   269,   268,   270,   271,   273,
   272,   274,    43,    44,    45,    46,    47,    48,  1039,  1040,
   301,   302,   303,   304,   305,   285,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   300,  1048,  1049,   846,   847,
   315,   202,   275,   277,   276,   278,   279,   281,   280,   282,
   286,   287,   848,   849,   850,   851,   852,   853,   854,   299,
   483,   474,   283,   316,   284,   859,   317,   475,   865,   709,
   709,   710,   737,   709,   876,   888,  1019,   874,  1020,  1171,
   709,   709,  1031,  1060,   709,   709,  1061,  1062,  1772,   474,
   709,   420,  1150,  1284,  1642,  1285,  1643,   337,  1655,   868,
  1656,  1657,  1659,  1658,  1660,  1682,   969,  1683,   349,   342,
   910,   911,   912,  1763,  1854,  1764,  1855,  1856,   321,  1857,
   474,   474,   474,  1138,   890,   919,   920,   343,  1858,   923,
  1859,  1985,  1987,  1986,  1988,   323,   936,   128,   328,   338,
   934,   935,  1989,   130,  1990,   945,   363,   339,   133,  1826,
  2096,  2098,  2097,  2099,   329,  2100,  2102,  2101,  2103,   360,
  2104,  1166,  2105,  2106,  2183,  2107,  2184,  2185,  2187,  2186,
  2188,  2231,  2233,  2232,  2234,   972,   973,   974,   975,   976,
   977,   978,   979,   980,   981,   982,   983,   984,   985,   986,
   987,   988,   989,   990,   991,   992,   993,   994,   995,   996,
   997,   917,   340,   301,   302,   303,   304,   305,   344,   306,
   307,   308,   309,   310,   311,   312,   313,   314,  2235,  1013,
  2236,   345,  2279,   315,  2280,  2281,  1018,  2282,   301,   302,
   303,   304,   305,   361,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   474,  2283,  1033,  2284,  1034,   315,   362,
   346,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   347,   348,  1050,  1051,  1052,   315,   366,   301,   302,   303,
   304,   305,   367,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   376,  1072,  1073,  1074,  1076,   315,   378,   379,
   382,   383,   301,   302,   303,   304,   305,  1345,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   385,   386,   387,
   388,   389,   315,   415,   390,   391,   392,   393,   394,   395,
   396,   397,   398,   399,  1016,   400,   401,  1108,    93,    94,
   402,   403,  2006,   404,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   405,  1259,
   406,   407,   408,   409,   410,   411,   412,   413,  1139,   301,
   302,   303,   304,   305,  1146,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   414,   417,   418,   419,   421,   315,
   315,   481,   472,   482,  1155,  1156,  1157,   515,  1229,   510,
   521,   529,   554,   555,  1172,  1165,  1175,   558,  1178,   564,
   561,   568,   569,   570,   571,   572,   573,   574,   575,  1184,
  1185,   576,   577,   578,   579,   580,   581,   535,   582,   538,
  1198,  1197,   583,   584,  1200,   585,   586,   587,   588,   589,
   590,   591,   592,   593,  1210,   594,   595,   596,   597,   598,
   706,  1217,  1218,  1219,   601,   707,   602,   603,  1224,   716,
   717,   722,  1228,   753,   724,   725,  1230,  1231,  1232,  1233,
  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,
  1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
  1254,  1255,   301,   302,   303,   304,   305,   726,   306,   307,
   308,   309,   310,   311,   312,   313,   314,  1265,   728,   128,
   129,   730,   315,   731,   740,   130,   757,   758,   769,   771,
   133,   770,   772,   292,   773,  1272,   293,   301,   302,   303,
   304,   305,   775,   306,   307,   308,   309,   310,   311,   312,
   313,   314,  1267,   776,   782,   783,   784,   315,  1288,   785,
  1289,   786,  1291,    93,    94,   787,   788,   789,   790,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    93,    94,   814,   813,   791,   792,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   845,   793,   794,   855,   819,   869,   820,
   858,   821,  1344,   866,  1352,   795,  1358,   867,  1361,   796,
  1351,   873,  1357,   879,  1360,   861,  1363,  1364,   822,   797,
   881,   892,   823,  1368,   893,   535,   798,   538,   799,   894,
   895,   800,  1377,   898,   801,   824,   899,   900,   901,   802,
  1385,   803,   804,   805,   806,  1390,   807,   808,  1393,   809,
  1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,  1404,
  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,
  1415,  1416,  1417,  1418,  1419,  1420,   810,   811,  1637,   352,
   812,   902,  1425,   815,   288,   289,  1426,   870,   825,   826,
   301,   302,   303,   304,   305,   827,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   828,  1445,   829,   830,   831,
   315,   903,   832,   833,   128,   129,   834,   835,   836,   837,
   130,   838,   839,   840,   841,   133,   842,   843,   732,   844,
   904,   733,   905,   913,   891,   918,   926,   924,   931,   932,
   933,   937,   938,   939,   128,   129,   940,   941,   944,   946,
   130,   947,   950,   951,   952,   133,   953,   954,   886,   963,
   964,   887,   965,   966,  1489,   967,  1007,   968,   970,  1009,
  1494,  1014,  1015,  1498,  1728,  1021,  1731,  1025,  1027,  1505,
  1029,  1030,  1053,  1038,  1065,  1066,  1071,  1075,  1109,  1077,
  1081,  1082,  1136,  1268,  1084,  1086,  1083,  1521,  1522,  1523,
  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1085,  1543,
   301,   302,   303,   304,   305,  1087,   306,   307,   308,   309,
   310,   311,   312,   313,   314,  1088,  1090,  1091,  1092,  1555,
   315,  1140,  1141,  1093,  1094,  1095,  1169,  1096,  1170,  1097,
    93,   511,  1098,  1099,  1100,  1795,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
  1101,  1102,  1105,  1103,  1104,  1106,  1143,  1107,  1147,  1148,
  1149,  1152,  1153,  1154,  1158,  1159,  1160,  1161,  1610,  1612,
  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,
  1634,  1635,  1162,  1163,  1164,  1173,  1176,  1179,  1181,  1182,
  1183,    93,    94,  1186,  1190,  1199,  1650,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   301,   302,   303,   304,   305,  1202,   306,   307,   308,
   309,   310,   311,   312,   313,   314,  1203,  1204,  1205,  1256,
  1206,   315,  1208,  1209,  1696,  1695,  1212,  1211,  1213,  1262,
  1214,  1701,  1269,  1703,  1215,  1705,  1221,  1707,  1708,  1709,
  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,
  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1222,  1225,
  1226,  1260,  1264,   334,  1227,  1257,  1258,  1261,  1270,   341,
  1739,   128,   129,  1271,  1287,  1273,  1294,   130,  1275,  1292,
  1277,  1279,   133,  1286,  1295,  1296,  1443,  1297,   512,  1298,
  1300,  1301,   365,  1302,  1306,  1307,  1308,  1342,   369,   370,
  1311,  1310,  1313,  1340,  1372,  1365,  1373,  1376,  1378,  1380,
  1381,  1382,  1383,  1769,  1770,  1384,  1386,  1388,  1389,  1391,
  1392,  1777,  1778,  1779,  1780,  1781,  1782,  1783,  1784,  1785,
  1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1394,
  1424,  1421,  1422,  1430,  1429,  1441,  1442,  1444,  1446,  1447,
  1448,  1450,  1348,  1349,  1453,  1487,  1491,  1492,   130,  1495,
  1496,  1451,  1499,  1350,  1500,  1455,  1501,  1457,  1504,   170,
  1484,  1510,   514,  1823,  1511,  1512,  1514,  1515,  1828,  1830,
  1832,  1833,  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,
  1842,  1843,  1844,  1845,  1846,  1847,  1848,  1849,  1850,  1516,
   301,   302,   303,   304,   305,  1517,   306,   307,   308,   309,
   310,   311,   312,   313,   314,  1544,  1601,  1608,  1546,   565,
   315,  1554,  1589,  1591,  1595,  1548,  1598,  1602,  1549,  1551,
  1881,  1605,  1883,  1553,  1885,  1556,  1887,  1888,  1889,  1890,
  1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,
  1901,  1902,  1903,  1904,   301,   302,   303,   304,   305,  1558,
   306,   307,   308,   309,   310,   311,   312,   313,   314,  1557,
  1559,  1560,  1561,  1588,   315,  1606,  1562,  1563,  1564,  1586,
  1639,  1648,  1641,  1645,  1647,  1928,  1929,  1930,  1931,  1932,
  1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,
  1649,  1651,  1686,  1689,  1690,  1692,  1694,  1699,  1652,  1653,
  1700,  1702,  1704,  1654,  1706,  1729,  1732,  1765,  1766,  1684,
  1964,  1966,  1968,  1969,  1970,  1971,  1972,  1973,  1974,  1975,
  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,   301,   302,
   303,   304,   305,  1685,   306,   307,   308,   309,   310,   311,
   312,   313,   314,  1767,  1734,  1768,  1737,  1740,   315,  1741,
  1771,  2007,  1796,  2009,  1799,  2011,  1800,  2013,  2014,  2015,
  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
  2026,  2027,  1801,  1824,   708,   301,   302,   303,   304,   305,
  1802,   306,   307,   308,   309,   310,   311,   312,   313,   314,
  1803,  1878,  1804,  1852,  1853,   315,  1880,  1882,  1884,  1886,
  1944,  2051,  2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,
  1945,  1905,  1943,  2008,  1946,  2010,  1984,  2012,  2028,  2044,
  2060,  2061,  2062,  2118,  2063,  2064,  2076,  2078,  2080,  2082,
  2084,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,
  2095,   545,    27,    28,   546,   547,    31,    32,    33,  2065,
    34,  2120,    36,    37,    38,  2122,    40,    41,  2124,  2126,
  2128,  2162,  2117,  2163,  2119,  2164,  2121,  2196,  2123,  2198,
  2125,  2200,  2127,    53,  2129,  2130,  2131,  2132,  2133,  2134,
  2135,  2136,  2137,  2216,   721,  2217,  2218,  2241,  2243,  2245,
  2286,  2270,  2288,  2271,  2272,  2290,  2292,  2293,    71,   818,
    78,    54,    55,    56,  2147,  2148,  2149,  2150,  2151,  2152,
  1142,     0,   889,     0,     0,     0,     0,     0,     0,     0,
    66,     0,  2165,  2166,  2167,  2168,  2169,  2170,  2172,  2174,
  2176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2189,  2190,  2191,  2192,  2193,  2194,  2195,
  1189,  2197,     0,  2199,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  2207,  2208,  2209,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  2219,
  2220,  2221,  2223,  2225,  2227,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  2237,  2238,  2239,  2240,     0,  2242,
     0,  2244,     0,     0,     0,   553,     0,     0,     0,     0,
     0,     0,  2249,  2250,  2251,     0,     0,     0,  2255,  2256,
  2257,     0,     0,     0,  2261,  2262,  2263,   877,   878,     0,
   880,     0,   882,   883,     0,     0,  2274,  2276,  2278,     0,
     0,     0,     0,     0,     0,  2285,     0,  2287,     0,  2289,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,     0,   921,   922,     0,     0,   925,   301,   302,
   303,   304,   305,   928,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,   942,   943,     0,     0,   315,     0,
   948,   949,     0,     0,    93,    94,    95,   955,    96,   962,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    93,   326,     0,     0,     0,     0,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,  1026,     0,  1028,     0,     0,   327,     0,     0,     0,
     0,     0,     0,     0,  1035,  1036,  1037,     0,     0,     0,
  1041,  1042,  1043,  1044,  1045,  1046,  1047,    43,    44,    45,
    46,    47,    48,     0,    93,    94,   467,     0,     0,     0,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,     0,   121,   122,   123,     0,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,   124,   125,   126,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   128,   129,     0,     0,     0,
     0,   130,   131,   132,     0,     0,   133,     0,   134,     0,
   135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1137,     0,     0,     0,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,   128,   473,     0,     0,   315,     0,   130,    93,
    94,     0,  1192,   133,  1193,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     0,     0,     0,  1191,     0,     0,     0,     0,     0,     0,
     0,  1201,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   128,   129,     0,     0,     0,
  1220,   130,    93,   511,     0,     0,   133,     0,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,     0,     0,   -10,     1,     0,   -10,   -53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   545,    27,
    28,   546,   547,    31,    32,    33,     0,    34,     0,    36,
    37,    38,     0,    40,    41,     0,     0,   -53,     0,     0,
     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
    53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,
     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,
   -53,   -53,   -53,   -53,   -53,     0,     0,     0,    54,    55,
    56,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   128,   129,     0,     0,     0,     0,   130,    66,     0,     0,
     0,   133,   -53,   -53,   -53,     0,     0,     0,     0,   -53,
     0,   -53,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
     0,   -53,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -10,   -10,   -10,   -10,   -10,   -10,   -10,   -10,     0,     0,
     0,     0,     0,   128,   129,     0,  1366,     0,  1367,   130,
   204,     0,  1371,     0,   133,     2,     3,     0,     4,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1387,     0,
     0,     0,   778,     0,     0,   607,   608,   609,   610,   611,
   612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
   622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
   632,   607,   608,   609,   610,   611,   612,   613,   614,   615,
   616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
   626,   627,   628,   629,   630,   631,   632,   205,   206,   207,
     0,     0,     0,     0,     0,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   217,     0,     0,     0,     0,     0,
     0,     0,     0,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,     0,   228,   229,   230,   231,   232,   233,
     0,     0,     0,     0,     0,     0,     0,     0,    23,     0,
     0,     0,     0,     0,     0,  1485,     0,     0,     0,     0,
     0,     0,  1490,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1502,  1503,   633,     0,    24,     0,     0,
     0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
     0,    34,    35,    36,    37,    38,    39,    40,    41,     0,
     0,   971,    42,    43,    44,    45,    46,    47,    48,     0,
    49,    50,    51,    52,    53,     0,     0,  1545,     0,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,    54,    55,    56,  1346,     0,  1347,     0,    57,
     0,    58,     0,    59,    60,    61,    62,    63,    64,    65,
     0,    66,   545,    27,    28,   546,   547,    31,    32,    33,
     0,    34,     0,    36,    37,    38,     0,    40,    41,     0,
  1593,     0,     0,     0,     0,  1600,     0,     0,     0,   301,
   302,   303,   304,   305,    53,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,     0,     0,     0,     0,   741,     0,     0,
     0,     0,    54,    55,    56,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,    66,     0,     0,     0,   315,     0,     0,   301,   302,
   303,   304,   305,   746,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
     0,     0,     0,     0,  1688,     0,   747,     0,     0,   301,
   302,   303,   304,   305,  1698,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,   301,   302,   303,   304,   305,   885,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,     0,   301,   302,   303,   304,   305,
   909,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,     0,   301,   302,
   303,   304,   305,  1167,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
     0,     0,     0,  1773,     0,     0,  1369,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,     0,
   301,   302,   303,   304,   305,  1370,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,     0,     0,     0,     0,     0,     0,  1427,     0,
     0,     0,  1825,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,     0,     0,     0,     0,     0,
     0,  1433,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,  1879,   301,   302,   303,   304,   305,
  1436,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,     0,   301,   302,
   303,   304,   305,  1439,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
     0,     0,     0,     0,     0,     0,  1440,  1924,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
     0,     0,     0,     0,     0,     0,  1486,     0,     0,     0,
   301,   302,   303,   304,   305,  1962,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,     0,   301,   302,   303,   304,   305,  1547,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,     0,   301,   302,   303,   304,
   305,  1550,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,     0,   301,
   302,   303,   304,   305,  1552,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,   301,   302,   303,   304,   305,  1798,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,     0,   301,   302,   303,   304,   305,
  1851,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,   471,     0,     0,
     0,   531,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,   531,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,   532,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
   562,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,   682,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,   683,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,   696,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,   697,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,   698,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,   699,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,   700,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,   701,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,   760,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
   761,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,   762,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,   907,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,   908,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,   927,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1063,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1064,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1078,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1079,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1110,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1111,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1112,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1113,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1114,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1115,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1116,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1117,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1118,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1119,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1120,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1121,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1122,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1123,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1124,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1125,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1126,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1127,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1128,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1129,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1130,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1131,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1132,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1133,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1134,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1135,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1151,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1266,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1280,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1281,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1290,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1293,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1304,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1309,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1312,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1314,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1315,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1316,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1317,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1318,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1319,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1320,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1321,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1322,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1323,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1324,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1325,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1326,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1327,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1328,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1329,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1330,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1331,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1332,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1333,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1334,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1335,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1336,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1337,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1338,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1339,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1343,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1449,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1461,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1462,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1463,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1464,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1465,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1466,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1467,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1468,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1469,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1470,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1471,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1472,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1473,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1474,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1475,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1476,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1477,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1478,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1479,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1480,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1481,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1483,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1565,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1566,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1567,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1568,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1569,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1570,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1571,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1572,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1573,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1574,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1575,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1576,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1577,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1578,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1579,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1580,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1581,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1582,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1583,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1584,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1585,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1661,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1662,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1663,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1664,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1665,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1666,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1667,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1668,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1669,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1670,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1671,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1672,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1673,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1674,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1675,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1676,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1677,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1678,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1679,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1680,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1681,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1738,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1745,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1746,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1747,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1748,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1749,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1750,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1751,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1752,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1753,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1754,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1755,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1756,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1757,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1758,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1759,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1760,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1761,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1762,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1797,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1805,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1806,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1807,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1808,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1809,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1810,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1811,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1812,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1813,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1814,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1815,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1816,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1817,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1818,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1819,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1820,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1821,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1822,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1860,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1861,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1862,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1863,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1864,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1865,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1866,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1867,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1868,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1869,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1870,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1871,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1872,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1873,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1874,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1875,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1876,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1877,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1909,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1910,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1911,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1912,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1913,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1914,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1915,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1916,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1917,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1918,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1919,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1920,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1921,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1922,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1923,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1947,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1948,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1949,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1950,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1951,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1952,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1953,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1954,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1955,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1956,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1957,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1958,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1959,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1960,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  1961,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  1991,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  1992,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  1993,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  1994,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  1995,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  1996,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  1997,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  1998,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  1999,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  2000,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  2001,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  2002,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  2003,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  2004,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  2005,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  2035,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  2036,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  2037,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  2038,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  2039,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  2040,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  2041,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  2042,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  2043,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  2066,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  2067,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  2068,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  2069,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  2070,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  2071,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  2072,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  2073,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  2074,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  2108,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  2109,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  2110,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  2111,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  2112,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  2113,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  2114,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  2115,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  2116,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  2138,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  2139,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  2140,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  2141,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  2142,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  2143,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  2156,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  2157,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  2158,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  2159,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  2160,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  2161,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  2177,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  2178,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  2179,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  2180,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  2181,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  2182,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  2201,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  2202,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  2203,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  2213,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  2214,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  2215,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  2228,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  2229,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,   301,   302,   303,   304,   305,
  2230,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,   301,   302,   303,   304,
   305,  2246,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,   301,   302,   303,
   304,   305,  2247,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,   301,   302,
   303,   304,   305,  2248,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,   301,
   302,   303,   304,   305,  2252,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
   301,   302,   303,   304,   305,  2253,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,   301,   302,   303,   304,   305,  2254,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,   301,   302,   303,   304,   305,  2258,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,   301,   302,   303,   304,   305,  2259,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,   301,   302,   303,   304,   305,  2260,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   477,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   604,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   661,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   663,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   665,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   667,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   669,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   671,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   673,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   675,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   677,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   679,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   681,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   685,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   687,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   689,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   691,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   693,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   695,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   763,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,   768,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,   999,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,  1001,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,  1003,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,  1005,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,     0,     0,  1006,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,     0,     0,  1144,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,   471,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,   501,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,   502,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
   503,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,   505,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,   507,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,   508,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,   516,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,   556,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,   557,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,   560,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,   566,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,   660,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
   662,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,   664,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,   666,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,   668,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,   670,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,   672,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,   674,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,   676,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,   678,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,   680,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
   684,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,   686,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,   688,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,   690,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,   692,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,   694,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,   727,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,   729,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,   742,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,   743,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
   744,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,   748,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,   749,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,   750,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,   751,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,   752,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,   774,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,   781,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,   998,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,  1000,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
  1002,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,  1004,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,  1067,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,  1168,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,  1196,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,  1299,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,  1303,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,  1305,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,  1423,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,  1452,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
  1454,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,  1456,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,  1458,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,  1459,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,  1460,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,  1482,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,  1587,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,  1742,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,  1743,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,  1744,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
  1906,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,  1907,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,  1908,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,  2029,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,  2030,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,  2031,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,  2032,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,  2033,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315,     0,  2034,   301,   302,   303,   304,   305,
     0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     0,     0,     0,     0,     0,   315,     0,  2144,   301,   302,
   303,   304,   305,     0,   306,   307,   308,   309,   310,   311,
   312,   313,   314,     0,     0,     0,     0,     0,   315,     0,
  2145,   301,   302,   303,   304,   305,     0,   306,   307,   308,
   309,   310,   311,   312,   313,   314,     0,     0,     0,     0,
     0,   315,     0,  2146,   301,   302,   303,   304,   305,     0,
   306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     0,     0,     0,     0,   315,     0,  2204,   301,   302,   303,
   304,   305,     0,   306,   307,   308,   309,   310,   311,   312,
   313,   314,     0,     0,     0,     0,     0,   315,     0,  2205,
   301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
   310,   311,   312,   313,   314,     0,     0,     0,     0,     0,
   315,     0,  2206,   301,   302,   303,   304,   305,     0,   306,
   307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     0,     0,     0,   315,     0,  2264,   301,   302,   303,   304,
   305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
   314,     0,     0,     0,     0,     0,   315,     0,  2265,   301,
   302,   303,   304,   305,     0,   306,   307,   308,   309,   310,
   311,   312,   313,   314,     0,     0,     0,     0,     0,   315,
     0,  2266,   301,   302,   303,   304,   305,     0,   306,   307,
   308,   309,   310,   311,   312,   313,   314,     0,     0,     0,
     0,     0,   315
};

static const short yycheck[] = {    23,
    23,     7,    91,     7,   358,   295,   719,   179,     4,   329,
     4,   183,     4,     4,    44,    45,     4,   285,   286,   287,
     4,     3,    42,    65,  1277,    66,  1279,    65,  1355,     4,
    71,     7,  1359,  1186,    65,  1362,    38,    39,    40,    41,
    42,    43,    44,    45,   102,    47,     4,    49,    50,    51,
    66,    53,    54,  1085,    66,    71,     6,    83,     5,    71,
     4,     5,  1094,     6,   184,   185,    66,   195,    70,  1101,
   196,    71,   165,   201,   200,   196,    66,   184,   185,   200,
   200,    71,   202,     7,   184,   185,     6,    34,    35,    36,
    34,    35,    36,   293,   201,     6,    98,    99,   100,    49,
   200,   195,   202,   197,   128,   129,   130,   184,   185,   133,
   134,    38,   136,     6,    41,   117,   184,   185,   195,   143,
   144,   145,   116,   147,   201,   149,   150,     6,   152,   329,
   105,   106,   200,   195,   202,     6,   166,   195,   168,   201,
  1293,   186,   187,   188,   174,   169,   170,   105,   106,   194,
     6,   184,   185,   195,   191,   192,   869,   195,    66,   201,
   197,   202,   199,    71,   188,   189,     7,   191,   201,   193,
   201,    66,   196,   197,    66,   195,    71,   203,     6,    71,
   500,   184,   185,   184,   185,    38,   202,   477,    41,    42,
   202,    44,   512,     6,   170,   171,   172,   173,   201,   200,
   202,     8,   202,   185,   195,   201,   378,   201,   195,   201,
   478,   241,   202,   201,   238,   191,   192,   201,   195,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   195,  1294,  1590,   184,   185,  1298,  1594,     7,   293,
  1597,     3,   295,   184,   185,     6,     7,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   195,  1546,   202,   195,  1549,   321,  1551,   323,
   500,   191,   192,    66,   328,   329,  1019,   202,    71,   199,
   202,   195,   512,   337,   338,   339,   340,     7,   342,   343,
   344,   345,   346,   347,   348,   355,   356,   184,   185,   170,
   171,   172,   173,   184,   185,   195,   360,   361,   362,   363,
   184,   185,   366,   200,    65,   184,   185,   184,   185,   200,
   374,   357,   358,   357,   358,   195,   200,    66,    46,   383,
  1687,   200,    71,   200,  1691,   195,  1693,   174,   175,   176,
   177,   178,   195,   180,   181,   182,   183,   184,   185,   186,
   187,   188,     8,   184,   185,   705,    42,   194,  1641,   184,
   185,   195,  1645,   197,  1647,   202,   184,   185,   421,   200,
   197,   196,   199,    42,   136,   137,   138,   139,   140,   141,
   142,   143,   200,   733,  1446,  1447,  1448,  1449,   176,   177,
   178,  1453,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   170,   171,   172,   173,   195,   194,   197,   706,   202,
   184,   185,   191,   192,   764,   765,   766,    42,   197,   473,
   199,    42,   191,   192,   477,   479,   200,   195,   177,   178,
   199,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    38,    44,     6,    41,    42,   194,   500,   184,   185,   201,
   170,   171,   172,   173,   201,   509,   510,    42,   512,   196,
   514,   515,   121,   122,   123,   124,   125,   521,   191,   192,
   530,   191,   192,     6,   197,   705,   199,   531,   532,   709,
   184,   185,   186,   187,   188,   196,   540,     6,   196,   200,
   194,    55,   200,   195,  1556,  1557,   195,   551,  1560,    59,
    60,    61,    62,   733,    64,   196,   191,   192,   562,   200,
   564,   565,   196,   195,   195,   197,   200,  1260,   174,   175,
   176,   177,   178,     6,   180,   181,   182,   183,   184,   185,
   186,   187,   188,     4,   764,   765,   766,   887,   194,    42,
   196,   861,   862,   195,   195,   197,     3,     4,   195,     5,
   197,   604,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    41,    42,   195,    44,
   197,    38,   195,   195,   197,   197,   195,     4,   197,  1651,
   195,   195,   197,   197,   195,   195,   197,   197,   195,   195,
   197,   197,    59,    60,    61,    62,    63,    64,    56,    57,
   174,   175,   176,   177,   178,   195,   180,   181,   182,   183,
   184,   185,   186,   187,   188,     6,     6,     7,   682,   683,
   194,     3,   195,   195,   197,   197,   195,   195,   197,   197,
   195,   195,   696,   697,   698,   699,   700,   701,   702,     6,
     6,   705,   195,     6,   197,   709,     5,   887,   712,   200,
   200,   202,   202,   200,   724,   202,   200,   721,   202,  1053,
   200,   200,   202,   202,   200,   200,   202,   202,  1740,   733,
   200,   735,   202,   200,   200,   202,   202,   201,   200,     6,
   202,   200,   200,   202,   202,   200,   815,   202,     4,   201,
   760,   761,   762,   200,   200,   202,   202,   200,   195,   202,
   764,   765,   766,  1011,     6,   769,   770,   201,   200,   773,
   202,   200,   200,   202,   202,   195,   786,   184,   185,   195,
   784,   785,   200,   190,   202,   795,   197,   195,   195,  1801,
   200,   200,   202,   202,   201,   200,   200,   202,   202,   201,
   200,  1049,   202,   200,   200,   202,   202,   200,   200,   202,
   202,   200,   200,   202,   202,   819,   820,   821,   822,   823,
   824,   825,   826,   827,   828,   829,   830,   831,   832,   833,
   834,   835,   836,   837,   838,   839,   840,   841,   842,   843,
   844,     6,   195,   174,   175,   176,   177,   178,   195,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   200,   862,
   202,   195,   200,   194,   202,   200,   870,   202,   174,   175,
   176,   177,   178,   201,   180,   181,   182,   183,   184,   185,
   186,   187,   188,   887,   200,   889,   202,   891,   194,   201,
   195,   180,   181,   182,   183,   184,   185,   186,   187,   188,
   195,   195,   906,   907,   908,   194,   197,   174,   175,   176,
   177,   178,     6,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   199,   927,   928,   929,   932,   194,   201,   108,
     6,   195,   174,   175,   176,   177,   178,  1271,   180,   181,
   182,   183,   184,   185,   186,   187,   188,   195,   195,   195,
   195,   195,   194,     5,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,     6,   195,   195,   970,     3,     4,
   195,   195,  1984,   195,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,   195,     6,
   195,   195,   195,   195,   195,   195,   195,   195,  1012,   174,
   175,   176,   177,   178,  1024,   180,   181,   182,   183,   184,
   185,   186,   187,   188,   195,   200,   196,   200,     4,   194,
   194,   199,     7,     7,  1038,  1039,  1040,     7,  1107,   201,
     7,   196,     7,     7,  1054,  1049,  1056,   103,  1058,   201,
   105,   166,     5,     5,     5,     5,     5,     5,     5,  1063,
  1064,     5,     5,     5,     5,     5,     5,  1053,     5,  1053,
  1076,  1075,     5,     5,  1078,     5,     5,     5,     5,     5,
     5,     5,   154,     5,  1088,     5,     5,     5,     3,     5,
   200,  1095,  1096,  1097,     5,   196,     6,     5,  1102,     6,
     4,     6,  1106,   199,     7,     7,  1110,  1111,  1112,  1113,
  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,
  1124,  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,
  1134,  1135,   174,   175,   176,   177,   178,     7,   180,   181,
   182,   183,   184,   185,   186,   187,   188,  1151,     7,   184,
   185,     7,   194,     7,     7,   190,   202,   202,   201,     7,
   195,   201,     7,   198,   195,  1169,   201,   174,   175,   176,
   177,   178,     7,   180,   181,   182,   183,   184,   185,   186,
   187,   188,     6,   199,   167,   200,   200,   194,  1192,   200,
  1194,   200,  1198,     3,     4,   200,   200,   200,   200,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     3,     4,   196,     5,   200,   200,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     6,   200,   200,     4,   195,     7,   195,
     6,   195,  1266,     6,  1274,   200,  1276,     6,  1278,   200,
  1274,     6,  1276,     7,  1278,   198,  1280,  1281,   195,   200,
     7,     7,   195,  1287,     7,  1271,   200,  1271,   200,     7,
     7,   200,  1296,     7,   200,   195,     7,     7,     7,   200,
  1304,   200,   200,   200,   200,  1309,   200,   200,  1312,   200,
  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,  1322,  1323,
  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
  1334,  1335,  1336,  1337,  1338,  1339,   200,   200,  1586,  1349,
   200,     7,  1346,   200,  1348,  1349,  1350,   197,   195,   195,
   174,   175,   176,   177,   178,   195,   180,   181,   182,   183,
   184,   185,   186,   187,   188,   195,  1372,   195,   195,   195,
   194,     7,   195,   195,   184,   185,   195,   195,   195,   195,
   190,   195,   195,   195,   195,   195,   195,   195,   198,   195,
     7,   201,     4,     6,   201,     6,     4,     7,     7,   163,
     3,     3,     3,   186,   184,   185,     3,     3,     3,     3,
   190,     3,     3,     3,     3,   195,     3,     3,   198,     3,
     5,   201,     5,     3,  1428,     3,   196,     6,     4,   196,
  1434,   199,     7,  1437,  1682,     6,  1684,     6,     6,  1445,
     6,     6,   201,   195,     6,     6,   104,   201,     6,   200,
   200,   196,   199,     6,   196,   196,   200,  1461,  1462,  1463,
  1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,
  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,   200,  1483,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,   200,   200,   196,   196,  1505,
   194,     6,     4,   200,   200,   200,   200,   200,   202,   200,
     3,     4,   200,   196,   200,  1763,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   200,   200,   196,   200,   200,   200,     6,   200,     6,     6,
   198,     6,     6,     6,     6,     6,     6,     6,  1562,  1563,
  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,
  1584,  1585,     6,     6,     6,     6,     6,     6,     6,     6,
     6,     3,     4,     7,   104,     3,  1602,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   174,   175,   176,   177,   178,     6,   180,   181,   182,
   183,   184,   185,   186,   187,   188,     3,     6,   186,     4,
     6,   194,     6,     3,  1650,  1649,     3,     6,     6,   199,
     6,  1655,     6,  1657,     3,  1659,     6,  1661,  1662,  1663,
  1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,
  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,     3,     3,
     3,     7,   198,   151,     6,     6,     6,     6,     6,   157,
  1696,   184,   185,   201,   101,   202,   200,   190,   201,   196,
   201,   201,   195,   201,   200,   200,     6,   196,   201,   200,
   200,   196,   180,   196,   200,   196,   196,   106,   186,   187,
   196,   200,   200,   196,   163,   104,     6,     3,     6,     6,
     3,     6,     6,  1737,  1738,     6,     6,     6,     6,     3,
     6,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,
  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,     5,
   202,     6,     5,   201,     6,   201,   200,   202,   200,   200,
   200,   196,   184,   185,   200,     6,     6,     6,   190,     6,
     6,   196,     6,   195,     6,   196,     6,   200,     6,   201,
   200,     6,     8,  1797,     6,     6,     6,     6,  1802,  1803,
  1804,  1805,  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,
  1814,  1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,     6,
   174,   175,   176,   177,   178,     5,   180,   181,   182,   183,
   184,   185,   186,   187,   188,     5,   101,     5,   201,     8,
   194,   202,     6,     6,     6,   200,     6,   163,   201,   201,
  1854,     6,  1856,   200,  1858,   200,  1860,  1861,  1862,  1863,
  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,  1877,   174,   175,   176,   177,   178,   196,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   200,
   196,   200,   200,   200,   194,     6,   201,   201,   201,   201,
     5,   202,   201,   201,   201,  1909,  1910,  1911,  1912,  1913,
  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
   201,   200,     6,     6,     6,     6,   101,     6,   200,   196,
     6,     6,     6,   196,     6,     6,     6,     6,     6,   201,
  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,  1953,
  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,   174,   175,
   176,   177,   178,   202,   180,   181,   182,   183,   184,   185,
   186,   187,   188,     6,   202,     6,   201,   200,   194,   200,
   168,  1985,     6,  1987,   169,  1989,   200,  1991,  1992,  1993,
  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
  2004,  2005,   200,     6,   472,   174,   175,   176,   177,   178,
   201,   180,   181,   182,   183,   184,   185,   186,   187,   188,
   201,     6,   201,   200,   196,   194,     6,     6,     6,     6,
   201,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,
   201,   200,   200,     6,   201,     6,   200,     6,   196,     6,
   201,   201,   201,     6,   201,   201,  2060,  2061,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,
  2074,    38,    39,    40,    41,    42,    43,    44,    45,   201,
    47,     6,    49,    50,    51,     6,    53,    54,     6,     6,
     6,   201,  2096,   201,  2098,   201,  2100,     6,  2102,     6,
  2104,     6,  2106,    70,  2108,  2109,  2110,  2111,  2112,  2113,
  2114,  2115,  2116,   201,     8,   201,   201,     6,     6,     6,
     6,   201,     6,   201,   201,     6,     0,     0,     7,   606,
     7,    98,    99,   100,  2138,  2139,  2140,  2141,  2142,  2143,
  1015,    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   117,    -1,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,
  2164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2177,  2178,  2179,  2180,  2181,  2182,  2183,
  1069,  2185,    -1,  2187,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2201,  2202,  2203,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2213,
  2214,  2215,  2216,  2217,  2218,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  2228,  2229,  2230,  2231,    -1,  2233,
    -1,  2235,    -1,    -1,    -1,   202,    -1,    -1,    -1,    -1,
    -1,    -1,  2246,  2247,  2248,    -1,    -1,    -1,  2252,  2253,
  2254,    -1,    -1,    -1,  2258,  2259,  2260,   725,   726,    -1,
   728,    -1,   730,   731,    -1,    -1,  2270,  2271,  2272,    -1,
    -1,    -1,    -1,    -1,    -1,  2279,    -1,  2281,    -1,  2283,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,    -1,   771,   772,    -1,    -1,   775,   174,   175,
   176,   177,   178,     8,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,   792,   793,    -1,    -1,   194,    -1,
   798,   799,    -1,    -1,     3,     4,     5,   805,     7,   807,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    34,    35,    36,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   879,    -1,   881,    -1,    -1,    38,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   892,   893,   894,    -1,    -1,    -1,
   898,   899,   900,   901,   902,   903,   904,    59,    60,    61,
    62,    63,    64,    -1,     3,     4,     5,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    34,    35,    36,    -1,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,    -1,    -1,    -1,
    -1,   190,   191,   192,    -1,    -1,   195,    -1,   197,    -1,
   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1010,    -1,    -1,    -1,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,   184,   185,    -1,    -1,   194,    -1,   190,     3,
     4,    -1,   200,   195,   202,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,  1071,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1079,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,    -1,    -1,    -1,
  1098,   190,     3,     4,    -1,    -1,   195,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,     0,     1,    -1,     3,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    47,    -1,    49,
    50,    51,    -1,    53,    54,    -1,    -1,    33,    -1,    -1,
    -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    70,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    64,    -1,
    66,    67,    68,    69,    70,    -1,    -1,    -1,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,    -1,    -1,    -1,    -1,   190,   117,    -1,    -1,
    -1,   195,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
    -1,   107,    -1,   109,   110,   111,   112,   113,   114,   115,
    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   136,   137,   138,   139,   140,   141,   142,   143,    -1,    -1,
    -1,    -1,    -1,   184,   185,    -1,  1284,    -1,  1286,   190,
    41,    -1,  1290,    -1,   195,   161,   162,    -1,   164,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1306,    -1,
    -1,    -1,   202,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,   118,   119,   120,
    -1,    -1,    -1,    -1,    -1,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,    -1,   155,   156,   157,   158,   159,   160,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,    -1,
    -1,    -1,    -1,    -1,    -1,  1423,    -1,    -1,    -1,    -1,
    -1,    -1,  1430,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1441,  1442,   202,    -1,    33,    -1,    -1,
    -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
    -1,   202,    58,    59,    60,    61,    62,    63,    64,    -1,
    66,    67,    68,    69,    70,    -1,    -1,  1485,    -1,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    98,    99,   100,   200,    -1,   202,    -1,   105,
    -1,   107,    -1,   109,   110,   111,   112,   113,   114,   115,
    -1,   117,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    47,    -1,    49,    50,    51,    -1,    53,    54,    -1,
  1548,    -1,    -1,    -1,    -1,  1553,    -1,    -1,    -1,   174,
   175,   176,   177,   178,    70,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,
    -1,    -1,    98,    99,   100,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,   117,    -1,    -1,    -1,   194,    -1,    -1,   174,   175,
   176,   177,   178,   202,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
    -1,    -1,    -1,    -1,  1642,    -1,   202,    -1,    -1,   174,
   175,   176,   177,   178,  1652,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,   174,   175,   176,   177,   178,   202,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,    -1,   174,   175,   176,   177,   178,
   202,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   174,   175,
   176,   177,   178,   202,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
    -1,    -1,    -1,  1741,    -1,    -1,   202,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
   174,   175,   176,   177,   178,   202,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,
    -1,    -1,  1800,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   202,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,  1852,   174,   175,   176,   177,   178,
   202,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   174,   175,
   176,   177,   178,   202,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   202,  1905,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
   174,   175,   176,   177,   178,  1943,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,    -1,   174,   175,   176,   177,   178,   202,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,    -1,   174,   175,   176,   177,
   178,   202,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   174,
   175,   176,   177,   178,   202,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,   174,   175,   176,   177,   178,   202,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,    -1,   174,   175,   176,   177,   178,
   202,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,    -1,    -1,
    -1,   200,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 173 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 179 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 180 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 185 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1, MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 199 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 206 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 223 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 228 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 233 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 244 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 247 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 251 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 257 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 263 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 270 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 276 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 280 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 28:
#line 284 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 29:
#line 291 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 30:
#line 295 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 31:
#line 300 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 304 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 312 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 316 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 320 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 324 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 328 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 340 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 344 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 348 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 352 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 356 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 375 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 389 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 392 "Gmsh.y"
{
    yymsg(INFO, "Gmsh file format read");
  ;
    break;}
case 55:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 415 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 69:
#line 419 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 70:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 71:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 72:
#line 446 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 99:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 481 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 486 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 491 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 103:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 500 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 505 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 106:
#line 510 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 107:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 519 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 524 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 529 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 111:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 538 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 544 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 550 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 115:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 559 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 565 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 571 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 119:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 580 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 586 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 592 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 123:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 601 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 608 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 617 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 127:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 626 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 633 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 642 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 131:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 132:
#line 651 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 658 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 134:
#line 667 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 135:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 136:
#line 676 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 684 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 138:
#line 693 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 139:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 140:
#line 702 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 710 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 142:
#line 719 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 143:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 144:
#line 728 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 736 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 146:
#line 745 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 147:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 148:
#line 754 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 762 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 150:
#line 771 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 151:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 152:
#line 780 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 788 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 154:
#line 797 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 155:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 156:
#line 806 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 814 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 158:
#line 823 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 159:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 160:
#line 832 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 844 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 162:
#line 859 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 163:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 164:
#line 868 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 880 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 166:
#line 895 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 167:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 168:
#line 904 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 916 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 170:
#line 931 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 171:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 172:
#line 940 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 950 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 174:
#line 962 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 175:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 176:
#line 971 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 981 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 178:
#line 993 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 179:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 180:
#line 1002 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1012 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 182:
#line 1024 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 183:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 184:
#line 1033 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1042 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 186:
#line 1054 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 187:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 188:
#line 1063 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1072 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 190:
#line 1084 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 191:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 192:
#line 1093 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1102 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 194:
#line 1114 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 195:
#line 1121 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 196:
#line 1126 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1134 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 198:
#line 1141 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 199:
#line 1148 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1153 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1161 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 202:
#line 1168 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 203:
#line 1177 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 204:
#line 1178 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 205:
#line 1179 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 206:
#line 1180 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 207:
#line 1181 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 208:
#line 1185 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 209:
#line 1186 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 210:
#line 1194 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 211:
#line 1221 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 212:
#line 1255 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l, i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 213:
#line 1302 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1317 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 215:
#line 1326 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 216:
#line 1341 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 217:
#line 1353 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1367 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 219:
#line 1390 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 220:
#line 1414 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 221:
#line 1426 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1440 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 223:
#line 1452 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1466 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 1486 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1508 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
	}
      }
    ;
    break;}
case 227:
#line 1520 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
	}
      }
    ;
    break;}
case 228:
#line 1540 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d, yyvsp[-1].v[0], yyvsp[-1].v[1], yyvsp[-1].v[2], yyvsp[-1].v[3], yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 229:
#line 1547 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_POINT, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1553 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        v = FindPoint(ip, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 231:
#line 1572 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 232:
#line 1586 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_LINE, 1, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 233:
#line 1592 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_SPLN, 3, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1598 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        c = FindCurve(ip, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 235:
#line 1617 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_CIRC, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 236:
#line 1623 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_ELLI, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1629 "Gmsh.y"
{
      List_T *temp;
      int i, j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l), 1, sizeof(int));
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
      	List_Read(yyvsp[-3].l, i, &d);
        j = (int)d;
        List_Add(temp, &j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 238:
#line 1646 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d, MSH_SEGM_PARAMETRIC, 2, NULL, NULL, -1, -1, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].c, yyvsp[-4].c, yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 239:
#line 1652 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_LINE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 240:
#line 1658 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1664 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BSPLN, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 242:
#line 1675 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BEZIER, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1686 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l), 1, sizeof(int));
	for(i = 0; i < List_Nbr(yyvsp[-5].l); i++) {
	  List_Read(yyvsp[-5].l, i, &d);
	  j = (int)d;
	  List_Add(Temp, &j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d, MSH_SEGM_NURBS, (int)yyvsp[-1].d, Temp, yyvsp[-3].l, -1, -1, 0., 1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 244:
#line 1711 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 245:
#line 1717 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-2].l, NULL);
	s = FindSurface((int)yyvsp[-8].d, THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 246:
#line 1736 "Gmsh.y"
{
      List_Read(yyvsp[-1].l, 0, &d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i, THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 247:
#line 1758 "Gmsh.y"
{
    AddTriangulationToSurface ((int) yyvsp[-10].d, (int) yyvsp[-6].d, (int) yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
    yyval.s.Num = (int)yyvsp[-10].d;
  ;
    break;}
case 248:
#line 1766 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 249:
#line 1774 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 250:
#line 1778 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_SURFACE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 251:
#line 1784 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_LOOP, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 252:
#line 1793 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 253:
#line 1799 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 254:
#line 1805 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 255:
#line 1816 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 256:
#line 1821 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1826 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1831 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 259:
#line 1838 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 260:
#line 1839 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1840 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 262:
#line 1845 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 263:
#line 1849 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 264:
#line 1853 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 265:
#line 1867 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 266:
#line 1881 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 267:
#line 1900 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 268:
#line 1910 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 269:
#line 1921 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
    ;
    break;}
case 270:
#line 1928 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) FreeView((int)yyvsp[-2].d);
    ;
    break;}
case 271:
#line 1932 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 272:
#line 1941 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
    ;
    break;}
case 273:
#line 1953 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	if(yyvsp[-1].c[0] == '/' || yyvsp[-1].c[0] == '\\' || (strlen(yyvsp[-1].c)>2 && yyvsp[-1].c[1] == ':')){
	  // do nothing: $2 is an absolute path
	  strcpy(tmpstring, yyvsp[-1].c);
	}
	else{
	  // append $2 to the path of the parent file
	  strcpy(tmpstring, yyname);
	  i = strlen(yyname)-1 ;
	  while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	  tmpstring[i+1] = '\0';
	  strcat(tmpstring, yyvsp[-1].c);
	}

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1], yyname);
	  yylinenoTab[RecursionLevel-1] = yylineno;
	  yylineno = 1;
	  strcpy(yyname, tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  // warning, warning... If we close the stream, we cannot
	  // call a Function defined in another file... So we just
	  // leave it open (arghhh)
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname, yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  yymsg(GERROR, "Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
#endif
      }

      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){

	FILE *ff = yyin;
	MergeProblemWithBoundingBox(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	SystemCall(yyvsp[-1].c);

      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 274:
#line 2035 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM, (int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");

      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 275:
#line 2055 "Gmsh.y"
{
    if(CTX.default_plugins)
      GMSH_PluginManager::Instance()->Action(yyvsp[-4].c, yyvsp[-1].c, 0); 
   ;
    break;}
case 276:
#line 2060 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 277:
#line 2064 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 278:
#line 2086 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 279:
#line 2096 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 280:
#line 2106 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 281:
#line 2127 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 282:
#line 2148 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 283:
#line 2169 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 284:
#line 2175 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 285:
#line 2180 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 286:
#line 2185 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 287:
#line 2189 "Gmsh.y"
{
    ;
    break;}
case 288:
#line 2200 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 289:
#line 2210 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 290:
#line 2220 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 291:
#line 2230 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 292:
#line 2235 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 293:
#line 2245 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 294:
#line 2250 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 295:
#line 2260 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 296:
#line 2265 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 297:
#line 2278 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 298:
#line 2295 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 299:
#line 2312 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 300:
#line 2329 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 301:
#line 2334 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 302:
#line 2351 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 303:
#line 2356 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 304:
#line 2373 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 305:
#line 2378 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 306:
#line 2398 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 307:
#line 2414 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 308:
#line 2430 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 309:
#line 2446 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 310:
#line 2451 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 311:
#line 2468 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 312:
#line 2474 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 313:
#line 2491 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 314:
#line 2497 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 315:
#line 2517 "Gmsh.y"
{
    ;
    break;}
case 316:
#line 2520 "Gmsh.y"
{
    ;
    break;}
case 317:
#line 2526 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 318:
#line 2552 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 319:
#line 2576 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 320:
#line 2585 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 321:
#line 2603 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 322:
#line 2621 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 323:
#line 2639 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 324:
#line 2661 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 325:
#line 2682 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 326:
#line 2703 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)d;
	s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 327:
#line 2717 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read(yyvsp[-1].l, i, &d);
	j = (int)d;
        s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 328:
#line 2737 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 329:
#line 2741 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 330:
#line 2750 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 331:
#line 2751 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 332:
#line 2752 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 333:
#line 2753 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 334:
#line 2754 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 335:
#line 2758 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 336:
#line 2759 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 337:
#line 2760 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 338:
#line 2761 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 339:
#line 2762 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 340:
#line 2763 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 341:
#line 2764 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 342:
#line 2765 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 343:
#line 2767 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 344:
#line 2773 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 345:
#line 2774 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d) ;  ;
    break;}
case 346:
#line 2775 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 347:
#line 2776 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 348:
#line 2777 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 349:
#line 2778 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 350:
#line 2779 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 351:
#line 2780 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 352:
#line 2781 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 353:
#line 2782 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 354:
#line 2783 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 355:
#line 2784 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 356:
#line 2785 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 357:
#line 2786 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 358:
#line 2787 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 359:
#line 2788 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 360:
#line 2789 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 361:
#line 2790 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 362:
#line 2791 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 363:
#line 2792 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 364:
#line 2793 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 365:
#line 2794 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 366:
#line 2795 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 367:
#line 2796 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 368:
#line 2797 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 369:
#line 2798 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 370:
#line 2799 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 371:
#line 2800 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 372:
#line 2801 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 373:
#line 2802 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 374:
#line 2803 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 375:
#line 2804 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 376:
#line 2806 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 377:
#line 2807 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 378:
#line 2808 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 379:
#line 2809 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 380:
#line 2810 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 381:
#line 2811 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 382:
#line 2812 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 383:
#line 2813 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 384:
#line 2814 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 385:
#line 2815 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 386:
#line 2816 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 387:
#line 2817 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 388:
#line 2818 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 389:
#line 2819 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 390:
#line 2820 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 391:
#line 2821 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 392:
#line 2822 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 393:
#line 2823 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 394:
#line 2824 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 395:
#line 2825 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 396:
#line 2826 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 397:
#line 2835 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 398:
#line 2836 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 399:
#line 2837 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 400:
#line 2838 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 401:
#line 2843 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 402:
#line 2854 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 403:
#line 2871 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 404:
#line 2882 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 405:
#line 2901 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 406:
#line 2917 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 407:
#line 2933 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 408:
#line 2949 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 409:
#line 2967 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 410:
#line 2971 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 411:
#line 2975 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 412:
#line 2979 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 413:
#line 2983 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 414:
#line 2990 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 415:
#line 2994 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 416:
#line 2998 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 417:
#line 3002 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 418:
#line 3009 "Gmsh.y"
{
    ;
    break;}
case 419:
#line 3012 "Gmsh.y"
{
    ;
    break;}
case 420:
#line 3018 "Gmsh.y"
{
    ;
    break;}
case 421:
#line 3021 "Gmsh.y"
{
    ;
    break;}
case 422:
#line 3027 "Gmsh.y"
{
    ;
    break;}
case 423:
#line 3030 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 424:
#line 3034 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 425:
#line 3041 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 426:
#line 3046 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 427:
#line 3054 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 428:
#line 3059 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 429:
#line 3063 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 430:
#line 3067 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 431:
#line 3078 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      for(d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 432:
#line 3084 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 433:
#line 3095 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double)) ;      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d) ;
	double d = 0.0 ;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X) ;
	List_Add(yyval.l, &v->Pos.Y) ;
	List_Add(yyval.l, &v->Pos.Z) ;
      }
    ;
    break;}
case 434:
#line 3115 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 435:
#line 3124 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 436:
#line 3133 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 437:
#line 3142 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 438:
#line 3156 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 439:
#line 3172 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 440:
#line 3192 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 441:
#line 3217 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 442:
#line 3222 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 443:
#line 3226 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 444:
#line 3230 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[0].l); i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 445:
#line 3242 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 446:
#line 3246 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 447:
#line 3257 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 448:
#line 3262 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0) ;
	}
      }
    ;
    break;}
case 449:
#line 3281 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 450:
#line 3285 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 451:
#line 3299 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 452:
#line 3304 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 453:
#line 3311 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 454:
#line 3315 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 455:
#line 3323 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 456:
#line 3336 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 457:
#line 3340 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 458:
#line 3358 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 459:
#line 3372 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3387 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(j < strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


