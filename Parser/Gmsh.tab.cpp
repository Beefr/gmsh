
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSphere	299
#define	tSurface	300
#define	tSpline	301
#define	tVolume	302
#define	tCharacteristic	303
#define	tLength	304
#define	tParametric	305
#define	tElliptic	306
#define	tPlane	307
#define	tRuled	308
#define	tTransfinite	309
#define	tComplex	310
#define	tPhysical	311
#define	tUsing	312
#define	tBump	313
#define	tProgression	314
#define	tPlugin	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tAttractor	326
#define	tLayers	327
#define	tAlias	328
#define	tAliasWithOptions	329
#define	tText2D	330
#define	tText3D	331
#define	tInterpolationScheme	332
#define	tTime	333
#define	tGrain	334
#define	tCombine	335
#define	tBSpline	336
#define	tBezier	337
#define	tNurbs	338
#define	tOrder	339
#define	tKnots	340
#define	tColor	341
#define	tColorTable	342
#define	tFor	343
#define	tIn	344
#define	tEndFor	345
#define	tIf	346
#define	tEndIf	347
#define	tExit	348
#define	tReturn	349
#define	tCall	350
#define	tFunction	351
#define	tShow	352
#define	tHide	353
#define	tGetValue	354
#define	tGMSH_MAJOR_VERSION	355
#define	tGMSH_MINOR_VERSION	356
#define	tGMSH_PATCH_VERSION	357
#define	tAFFECTPLUS	358
#define	tAFFECTMINUS	359
#define	tAFFECTTIMES	360
#define	tAFFECTDIVIDE	361
#define	tOR	362
#define	tAND	363
#define	tEQUAL	364
#define	tNOTEQUAL	365
#define	tLESSOREQUAL	366
#define	tGREATEROREQUAL	367
#define	tPLUSPLUS	368
#define	tMINUSMINUS	369
#define	UNARYPREC	370

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.299 2007-01-31 12:27:18 remacle Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "GeoUtils.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 77 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1183
#define	YYFLAG		-32768
#define	YYNTBASE	137

#define YYTRANSLATE(x) ((unsigned)(x) <= 370 ? yytranslate[x] : 203)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   122,     2,   132,     2,   121,     2,     2,   127,
   128,   119,   117,   133,   118,   131,   120,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   113,
     2,   115,   108,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   129,     2,   130,   126,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   134,     2,   135,   136,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   109,   110,   111,   112,   114,   116,   123,   124,   125
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   190,   197,   204,   206,   208,   210,   212,   214,   216,
   218,   223,   231,   241,   248,   255,   259,   266,   273,   283,
   290,   300,   306,   315,   324,   336,   343,   353,   363,   373,
   375,   377,   378,   386,   399,   408,   421,   428,   436,   444,
   452,   462,   470,   480,   498,   506,   514,   526,   535,   548,
   557,   566,   575,   583,   592,   601,   610,   618,   627,   633,
   645,   651,   661,   663,   665,   667,   668,   671,   678,   685,
   692,   699,   704,   711,   718,   725,   730,   737,   741,   746,
   752,   756,   760,   765,   770,   774,   782,   790,   794,   802,
   806,   809,   812,   828,   831,   838,   847,   856,   867,   869,
   872,   874,   878,   883,   885,   891,   903,   917,   918,   926,
   927,   941,   942,   958,   967,   976,   985,   998,  1011,  1024,
  1039,  1054,  1069,  1070,  1083,  1084,  1097,  1098,  1111,  1112,
  1129,  1130,  1147,  1148,  1165,  1166,  1185,  1186,  1205,  1206,
  1225,  1227,  1230,  1236,  1244,  1254,  1257,  1264,  1274,  1284,
  1293,  1303,  1312,  1321,  1328,  1333,  1340,  1347,  1354,  1361,
  1364,  1366,  1370,  1373,  1376,  1379,  1383,  1387,  1391,  1395,
  1399,  1403,  1407,  1411,  1415,  1419,  1423,  1427,  1431,  1435,
  1441,  1446,  1451,  1456,  1461,  1466,  1471,  1476,  1481,  1486,
  1491,  1498,  1503,  1508,  1513,  1518,  1523,  1528,  1535,  1542,
  1549,  1554,  1559,  1564,  1569,  1574,  1579,  1584,  1589,  1594,
  1599,  1604,  1611,  1616,  1621,  1626,  1631,  1636,  1641,  1648,
  1655,  1662,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,
  1683,  1689,  1694,  1699,  1702,  1708,  1712,  1719,  1724,  1732,
  1739,  1741,  1744,  1747,  1751,  1755,  1767,  1777,  1785,  1793,
  1795,  1799,  1801,  1803,  1806,  1810,  1815,  1819,  1825,  1830,
  1832,  1834,  1836,  1840,  1845,  1852,  1860,  1862,  1864,  1868,
  1872,  1882,  1890,  1892,  1898,  1902,  1909,  1911,  1915,  1917,
  1919,  1926,  1931,  1936,  1941,  1948,  1955
};

static const short yyrhs[] = {   138,
     0,     1,     6,     0,     0,   138,   139,     0,   142,     0,
   141,     0,   161,     0,   163,     0,   164,     0,   167,     0,
   168,     0,   169,     0,   170,     0,   173,     0,   188,     0,
   189,     0,   190,     0,   172,     0,   171,     0,   115,     0,
   115,   115,     0,    33,   127,     5,   128,     6,     0,    33,
   127,     5,   128,   140,   202,     6,     0,    33,   127,     5,
   133,   198,   128,     6,     0,    33,   127,     5,   133,   198,
   128,   140,   202,     6,     0,     4,     5,   134,   143,   135,
     6,     0,     4,     5,     4,   193,   134,   143,   135,     6,
     0,     0,   143,   146,     0,   143,   150,     0,   143,   153,
     0,   143,   155,     0,   143,   156,     0,   143,   158,     0,
   191,     0,   144,   133,   191,     0,   191,     0,   145,   133,
   191,     0,     0,     0,     4,   147,   127,   144,   128,   148,
   134,   145,   135,     6,     0,   202,     0,   149,   133,   202,
     0,     0,    76,   127,   191,   133,   191,   133,   191,   128,
   151,   134,   149,   135,     6,     0,   202,     0,   152,   133,
   202,     0,     0,    77,   127,   191,   133,   191,   133,   191,
   133,   191,   128,   154,   134,   152,   135,     6,     0,    78,
   134,   195,   135,   134,   195,   135,     6,     0,     0,    79,
   157,   134,   145,   135,     6,     0,    80,   127,   191,   128,
   196,     6,     0,     7,     0,   104,     0,   105,     0,   106,
     0,   107,     0,   123,     0,   124,     0,     4,   159,   191,
     6,     0,     4,   129,   191,   130,   159,   191,     6,     0,
     4,   129,   134,   198,   135,   130,   159,   196,     6,     0,
     4,   129,   130,     7,   196,     6,     0,     4,   129,   130,
   104,   196,     6,     0,     4,   160,     6,     0,     4,   129,
   191,   130,   160,     6,     0,     4,   131,     4,     7,   202,
     6,     0,     4,   129,   191,   130,   131,     4,     7,   202,
     6,     0,     4,   131,     4,   159,   191,     6,     0,     4,
   129,   191,   130,   131,     4,   159,   191,     6,     0,     4,
   131,     4,   160,     6,     0,     4,   129,   191,   130,   131,
     4,   160,     6,     0,     4,   131,    87,   131,     4,     7,
   199,     6,     0,     4,   129,   191,   130,   131,    87,   131,
     4,     7,   199,     6,     0,     4,   131,    88,     7,   200,
     6,     0,     4,   129,   191,   130,   131,    88,     7,   200,
     6,     0,    61,   127,     4,   128,   131,     4,     7,   191,
     6,     0,    61,   127,     4,   128,   131,     4,     7,   202,
     6,     0,   191,     0,   202,     0,     0,    41,   127,   191,
   128,     7,   193,     6,     0,    41,   127,   191,   128,    90,
    46,   127,   191,   128,     7,   193,     6,     0,    57,    41,
   127,   162,   128,     7,   196,     6,     0,    72,    41,   196,
     7,   134,   191,   133,   191,   133,   191,   135,     6,     0,
    49,    50,   196,     7,   191,     6,     0,    44,   127,   191,
   128,     7,   196,     6,     0,    47,   127,   191,   128,     7,
   196,     6,     0,    42,   127,   191,   128,     7,   196,     6,
     0,    42,   127,   191,   128,     7,   196,    53,   193,     6,
     0,    43,   127,   191,   128,     7,   196,     6,     0,    43,
   127,   191,   128,     7,   196,    53,   193,     6,     0,    51,
   127,   191,   128,     7,   134,   191,   133,   191,   133,     5,
   133,     5,   133,     5,   135,     6,     0,    82,   127,   191,
   128,     7,   196,     6,     0,    83,   127,   191,   128,     7,
   196,     6,     0,    84,   127,   191,   128,     7,   196,    86,
   196,    85,   191,     6,     0,    44,    68,   127,   191,   128,
     7,   196,     6,     0,    72,    44,   196,     7,   134,   191,
   133,   191,   133,   191,   135,     6,     0,    57,    44,   127,
   162,   128,     7,   196,     6,     0,    53,    46,   127,   191,
   128,     7,   196,     6,     0,    54,    46,   127,   191,   128,
     7,   196,     6,     0,    45,   127,   191,   128,     7,   196,
     6,     0,    46,    68,   127,   191,   128,     7,   196,     6,
     0,    57,    46,   127,   162,   128,     7,   196,     6,     0,
    56,    48,   127,   191,   128,     7,   196,     6,     0,    48,
   127,   191,   128,     7,   196,     6,     0,    57,    48,   127,
   162,   128,     7,   196,     6,     0,    63,   193,   134,   165,
   135,     0,    62,   134,   193,   133,   193,   133,   191,   135,
   134,   165,   135,     0,    64,   193,   134,   165,   135,     0,
    65,   134,   193,   133,   191,   135,   134,   165,   135,     0,
   167,     0,   166,     0,   164,     0,     0,   166,   163,     0,
   166,    41,   134,   198,   135,     6,     0,   166,    44,   134,
   198,   135,     6,     0,   166,    46,   134,   198,   135,     6,
     0,   166,    48,   134,   198,   135,     6,     0,    67,   134,
   166,   135,     0,    67,     4,   129,   191,   130,     6,     0,
    74,     4,   129,   191,   130,     6,     0,    75,     4,   129,
   191,   130,     6,     0,    70,   134,   166,   135,     0,    70,
     4,   129,   191,   130,     6,     0,    70,     4,     6,     0,
    70,     4,     4,     6,     0,    87,   199,   134,   166,   135,
     0,    98,   202,     6,     0,    99,   202,     6,     0,    98,
   134,   166,   135,     0,    99,   134,   166,   135,     0,     4,
   202,     6,     0,     4,     4,   129,   191,   130,   202,     6,
     0,     4,     4,     4,   129,   191,   130,     6,     0,     4,
   191,     6,     0,    61,   127,     4,   128,   131,     4,     6,
     0,    81,     4,     6,     0,    94,     6,     0,    38,     6,
     0,    38,   134,   191,   133,   191,   133,   191,   133,   191,
   133,   191,   133,   191,   135,     6,     0,    39,     6,     0,
    89,   127,   191,     8,   191,   128,     0,    89,   127,   191,
     8,   191,     8,   191,   128,     0,    89,     4,    90,   134,
   191,     8,   191,   135,     0,    89,     4,    90,   134,   191,
     8,   191,     8,   191,   135,     0,    91,     0,    97,     4,
     0,    95,     0,    96,     4,     6,     0,    92,   127,   191,
   128,     0,    93,     0,    66,   193,   134,   166,   135,     0,
    66,   134,   193,   133,   193,   133,   191,   135,   134,   166,
   135,     0,    66,   134,   193,   133,   193,   133,   193,   133,
   191,   135,   134,   166,   135,     0,     0,    66,   193,   134,
   166,   174,   186,   135,     0,     0,    66,   134,   193,   133,
   193,   133,   191,   135,   134,   166,   175,   186,   135,     0,
     0,    66,   134,   193,   133,   193,   133,   193,   133,   191,
   135,   134,   166,   176,   186,   135,     0,    66,    41,   134,
   191,   133,   193,   135,     6,     0,    66,    44,   134,   191,
   133,   193,   135,     6,     0,    66,    46,   134,   191,   133,
   193,   135,     6,     0,    66,    41,   134,   191,   133,   193,
   133,   193,   133,   191,   135,     6,     0,    66,    44,   134,
   191,   133,   193,   133,   193,   133,   191,   135,     6,     0,
    66,    46,   134,   191,   133,   193,   133,   193,   133,   191,
   135,     6,     0,    66,    41,   134,   191,   133,   193,   133,
   193,   133,   193,   133,   191,   135,     6,     0,    66,    44,
   134,   191,   133,   193,   133,   193,   133,   193,   133,   191,
   135,     6,     0,    66,    46,   134,   191,   133,   193,   133,
   193,   133,   193,   133,   191,   135,     6,     0,     0,    66,
    41,   134,   191,   133,   193,   135,   177,   134,   186,   135,
     6,     0,     0,    66,    44,   134,   191,   133,   193,   135,
   178,   134,   186,   135,     6,     0,     0,    66,    46,   134,
   191,   133,   193,   135,   179,   134,   186,   135,     6,     0,
     0,    66,    41,   134,   191,   133,   193,   133,   193,   133,
   191,   135,   180,   134,   186,   135,     6,     0,     0,    66,
    44,   134,   191,   133,   193,   133,   193,   133,   191,   135,
   181,   134,   186,   135,     6,     0,     0,    66,    46,   134,
   191,   133,   193,   133,   193,   133,   191,   135,   182,   134,
   186,   135,     6,     0,     0,    66,    41,   134,   191,   133,
   193,   133,   193,   133,   193,   133,   191,   135,   183,   134,
   186,   135,     6,     0,     0,    66,    44,   134,   191,   133,
   193,   133,   193,   133,   193,   133,   191,   135,   184,   134,
   186,   135,     6,     0,     0,    66,    46,   134,   191,   133,
   193,   133,   193,   133,   193,   133,   191,   135,   185,   134,
   186,   135,     6,     0,   187,     0,   186,   187,     0,    73,
   134,   191,   135,     6,     0,    73,   134,   196,   133,   196,
   135,     6,     0,    73,   134,   196,   133,   196,   133,   196,
   135,     6,     0,    69,     6,     0,    55,    44,   196,     7,
   191,     6,     0,    55,    44,   196,     7,   191,    58,    60,
   191,     6,     0,    55,    44,   196,     7,   191,    58,    59,
   191,     6,     0,    55,    46,   134,   191,   135,     7,   196,
     6,     0,    55,    46,   134,   191,   135,     7,   196,     4,
     6,     0,    52,    46,   134,   191,   135,     7,   196,     6,
     0,    55,    48,   134,   191,   135,     7,   196,     6,     0,
    69,    46,   196,     7,   191,     6,     0,    69,    46,   196,
     6,     0,    41,   196,    90,    46,   191,     6,     0,    44,
   196,    90,    46,   191,     6,     0,    44,   196,    90,    48,
   191,     6,     0,    46,   196,    90,    48,   191,     6,     0,
    71,     6,     0,   192,     0,   127,   191,   128,     0,   118,
   191,     0,   117,   191,     0,   122,   191,     0,   191,   118,
   191,     0,   191,   117,   191,     0,   191,   119,   191,     0,
   191,   120,   191,     0,   191,   121,   191,     0,   191,   126,
   191,     0,   191,   113,   191,     0,   191,   115,   191,     0,
   191,   114,   191,     0,   191,   116,   191,     0,   191,   111,
   191,     0,   191,   112,   191,     0,   191,   110,   191,     0,
   191,   109,   191,     0,   191,   108,   191,     8,   191,     0,
    12,   127,   191,   128,     0,    13,   127,   191,   128,     0,
    14,   127,   191,   128,     0,    15,   127,   191,   128,     0,
    16,   127,   191,   128,     0,    17,   127,   191,   128,     0,
    18,   127,   191,   128,     0,    19,   127,   191,   128,     0,
    20,   127,   191,   128,     0,    22,   127,   191,   128,     0,
    23,   127,   191,   133,   191,   128,     0,    24,   127,   191,
   128,     0,    25,   127,   191,   128,     0,    26,   127,   191,
   128,     0,    27,   127,   191,   128,     0,    28,   127,   191,
   128,     0,    29,   127,   191,   128,     0,    30,   127,   191,
   133,   191,   128,     0,    31,   127,   191,   133,   191,   128,
     0,    32,   127,   191,   133,   191,   128,     0,    21,   127,
   191,   128,     0,    12,   129,   191,   130,     0,    13,   129,
   191,   130,     0,    14,   129,   191,   130,     0,    15,   129,
   191,   130,     0,    16,   129,   191,   130,     0,    17,   129,
   191,   130,     0,    18,   129,   191,   130,     0,    19,   129,
   191,   130,     0,    20,   129,   191,   130,     0,    22,   129,
   191,   130,     0,    23,   129,   191,   133,   191,   130,     0,
    24,   129,   191,   130,     0,    25,   129,   191,   130,     0,
    26,   129,   191,   130,     0,    27,   129,   191,   130,     0,
    28,   129,   191,   130,     0,    29,   129,   191,   130,     0,
    30,   129,   191,   133,   191,   130,     0,    31,   129,   191,
   133,   191,   130,     0,    32,   129,   191,   133,   191,   130,
     0,    21,   129,   191,   130,     0,     3,     0,     9,     0,
    10,     0,    11,     0,   101,     0,   102,     0,   103,     0,
     4,     0,     4,   136,   134,   191,   135,     0,     4,   129,
   191,   130,     0,   132,     4,   129,   130,     0,     4,   160,
     0,     4,   129,   191,   130,   160,     0,     4,   131,     4,
     0,     4,   129,   191,   130,   131,     4,     0,     4,   131,
     4,   160,     0,     4,   129,   191,   130,   131,     4,   160,
     0,   100,   127,     5,   133,   191,   128,     0,   194,     0,
   118,   193,     0,   117,   193,     0,   193,   118,   193,     0,
   193,   117,   193,     0,   134,   191,   133,   191,   133,   191,
   133,   191,   133,   191,   135,     0,   134,   191,   133,   191,
   133,   191,   133,   191,   135,     0,   134,   191,   133,   191,
   133,   191,   135,     0,   127,   191,   133,   191,   133,   191,
   128,     0,   196,     0,   195,   133,   196,     0,   191,     0,
   197,     0,   134,   135,     0,   134,   198,   135,     0,   118,
   134,   198,   135,     0,   191,     8,   191,     0,   191,     8,
   191,     8,   191,     0,    41,   134,   191,   135,     0,   164,
     0,   167,     0,   173,     0,     4,   129,   130,     0,   118,
     4,   129,   130,     0,     4,   129,   134,   198,   135,   130,
     0,   118,     4,   129,   134,   198,   135,   130,     0,   191,
     0,   197,     0,   198,   133,   191,     0,   198,   133,   197,
     0,   134,   191,   133,   191,   133,   191,   133,   191,   135,
     0,   134,   191,   133,   191,   133,   191,   135,     0,     4,
     0,     4,   131,    87,   131,     4,     0,   134,   201,   135,
     0,     4,   129,   191,   130,   131,    88,     0,   199,     0,
   201,   133,   199,     0,     5,     0,    40,     0,    35,   127,
   202,   133,   202,   128,     0,    36,   127,   202,   128,     0,
    37,   127,   202,   128,     0,    34,   127,   202,   128,     0,
    34,   127,   202,   133,   198,   128,     0,    34,   127,     4,
   131,     4,   128,     0,    34,   127,     4,   129,   191,   130,
   131,     4,   128,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   142,   144,   149,   151,   154,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   172,
   177,   183,   189,   204,   217,   245,   253,   262,   270,   271,
   272,   273,   274,   275,   278,   281,   285,   288,   292,   483,
   501,   511,   517,   524,   532,   538,   544,   551,   559,   565,
   573,   578,   582,   591,   593,   594,   595,   596,   599,   601,
   604,   639,   678,   732,   749,   767,   778,   797,   811,   828,
   854,   881,   895,   912,   926,   943,   963,   986,   996,  1010,
  1015,  1023,  1025,  1047,  1070,  1086,  1093,  1115,  1133,  1151,
  1169,  1195,  1213,  1239,  1259,  1283,  1307,  1333,  1350,  1357,
  1376,  1394,  1435,  1458,  1474,  1494,  1511,  1528,  1548,  1554,
  1559,  1564,  1571,  1573,  1574,  1577,  1582,  1586,  1602,  1618,
  1634,  1654,  1669,  1675,  1681,  1692,  1702,  1712,  1728,  1746,
  1760,  1767,  1773,  1782,  1795,  1841,  1856,  1867,  1887,  1897,
  1919,  1923,  1928,  1933,  1943,  1960,  1976,  2002,  2029,  2061,
  2068,  2073,  2079,  2083,  2091,  2100,  2108,  2116,  2121,  2129,
  2134,  2142,  2147,  2157,  2164,  2171,  2178,  2185,  2192,  2199,
  2206,  2213,  2220,  2225,  2232,  2237,  2244,  2249,  2256,  2261,
  2268,  2273,  2280,  2285,  2292,  2297,  2304,  2309,  2316,  2321,
  2331,  2335,  2340,  2350,  2372,  2396,  2404,  2423,  2441,  2459,
  2488,  2523,  2528,  2555,  2569,  2587,  2594,  2600,  2603,  2611,
  2621,  2623,  2624,  2625,  2626,  2627,  2628,  2629,  2630,  2637,
  2638,  2639,  2640,  2641,  2642,  2643,  2644,  2645,  2646,  2647,
  2648,  2649,  2650,  2651,  2652,  2653,  2654,  2655,  2656,  2657,
  2658,  2659,  2660,  2661,  2662,  2663,  2664,  2665,  2666,  2667,
  2668,  2670,  2671,  2672,  2673,  2674,  2675,  2676,  2677,  2678,
  2679,  2680,  2681,  2682,  2683,  2684,  2685,  2686,  2687,  2688,
  2689,  2690,  2695,  2700,  2701,  2702,  2703,  2704,  2705,  2709,
  2725,  2740,  2760,  2774,  2787,  2810,  2828,  2846,  2864,  2882,
  2889,  2894,  2898,  2902,  2906,  2912,  2917,  2921,  2925,  2931,
  2937,  2944,  2950,  2954,  2959,  2963,  2974,  2981,  2992,  3012,
  3022,  3032,  3042,  3059,  3078,  3102,  3130,  3136,  3140,  3144,
  3156,  3161,  3173,  3180,  3201,  3206,  3220,  3226,  3232,  3237,
  3245,  3253,  3267,  3281,  3285,  3304,  3326
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere","tSurface",
"tSpline","tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane",
"tRuled","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tPlugin","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tAttractor","tLayers","tAlias",
"tAliasWithOptions","tText2D","tText3D","tInterpolationScheme","tTime","tGrain",
"tCombine","tBSpline","tBezier","tNurbs","tOrder","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND",
"tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'",
"'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems","GeoFormatItem",
"SendToFile","Printf","View","Views","ElementCoords","ElementValues","Element",
"@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4","InterpolationMatrix",
"Time","@5","Grain","NumericAffectation","NumericIncrement","Affectation","PhysicalId",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify",
"Visibility","Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12",
"@13","@14","@15","@16","@17","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Embedding","Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   137,   137,   138,   138,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   140,
   140,   141,   141,   141,   141,   142,   142,   143,   143,   143,
   143,   143,   143,   143,   144,   144,   145,   145,   147,   148,
   146,   149,   149,   151,   150,   152,   152,   154,   153,   155,
   157,   156,   158,   159,   159,   159,   159,   159,   160,   160,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   162,
   162,    -1,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   164,   164,
   164,   164,   165,   165,   165,   166,   166,   166,   166,   166,
   166,   167,   167,   167,   167,   168,   168,   168,   168,   169,
   170,   170,   170,   170,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   173,   173,   173,   174,   173,   175,
   173,   176,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   177,   173,   178,   173,   179,   173,   180,   173,
   181,   173,   182,   173,   183,   173,   184,   173,   185,   173,
   186,   186,   187,   187,   187,   187,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   189,   189,   189,   189,   190,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   193,   193,   193,   193,   193,   194,   194,   194,   194,   195,
   195,   196,   196,   196,   196,   196,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   198,   198,   198,   198,
   199,   199,   199,   199,   200,   200,   201,   201,   202,   202,
   202,   202,   202,   202,   202,   202,   202
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
     0,     6,     6,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     6,     3,     6,     6,     9,     6,
     9,     5,     8,     8,    11,     6,     9,     9,     9,     1,
     1,     0,     7,    12,     8,    12,     6,     7,     7,     7,
     9,     7,     9,    17,     7,     7,    11,     8,    12,     8,
     8,     8,     7,     8,     8,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     6,     6,     6,
     6,     4,     6,     6,     6,     4,     6,     3,     4,     5,
     3,     3,     4,     4,     3,     7,     7,     3,     7,     3,
     2,     2,    15,     2,     6,     8,     8,    10,     1,     2,
     1,     3,     4,     1,     5,    11,    13,     0,     7,     0,
    13,     0,    15,     8,     8,     8,    12,    12,    12,    14,
    14,    14,     0,    12,     0,    12,     0,    12,     0,    16,
     0,    16,     0,    16,     0,    18,     0,    18,     0,    18,
     1,     2,     5,     7,     9,     2,     6,     9,     9,     8,
     9,     8,     8,     6,     4,     6,     6,     6,     6,     2,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     4,     4,     4,     6,     6,
     6,     4,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     4,     4,     2,     5,     3,     6,     4,     7,     6,
     1,     2,     2,     3,     3,    11,     9,     7,     7,     1,
     3,     1,     1,     2,     3,     4,     3,     5,     4,     1,
     1,     1,     3,     4,     6,     7,     1,     1,     3,     3,
     9,     7,     1,     5,     3,     6,     1,     3,     1,     1,
     6,     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   149,     0,   154,     0,   151,     0,     0,     0,
     0,     4,     6,     5,     7,     8,     9,    10,    11,    12,
    13,    19,    18,    14,    15,    16,    17,   273,   280,   329,
    54,   274,   275,   276,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     0,   277,   278,   279,    55,    56,    57,    58,     0,     0,
     0,    59,    60,     0,     0,     0,     0,     0,     0,     0,
   211,     0,     0,   142,     0,   144,   280,     0,     0,     0,
     0,   310,   311,   312,   302,     0,   303,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   291,     0,     0,
     0,     0,     0,     0,     0,     0,   116,     0,     0,   116,
   210,     0,     0,     0,     0,     0,     0,     0,     0,   323,
     0,     0,     0,     0,     0,   141,     0,   150,   329,   116,
     0,   116,     0,     0,     0,     0,     0,   284,     0,    28,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   280,   214,   213,
   215,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    66,   138,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   135,     0,     0,
     0,     0,   280,     0,     0,     0,   304,   317,   318,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   293,   292,     0,
     0,     0,     0,   116,   116,     0,     0,     0,     0,     0,
     0,     0,     0,   116,     0,     0,     0,     0,   128,     0,
     0,     0,     0,     0,     0,   140,     0,     0,     0,     0,
     0,   116,     0,     0,     0,   152,     0,   131,     0,   132,
     0,     0,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   212,     0,     0,     0,     0,
    54,     0,     0,     0,     0,     0,    61,     0,   229,   228,
   226,   227,   222,   224,   223,   225,   217,   216,   218,   219,
   220,   221,     0,     0,     0,   313,     0,     0,     0,     0,
     0,   212,     0,   305,   307,     0,     0,     0,     0,   212,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    80,    81,     0,
     0,     0,     0,     0,     0,     0,   295,   294,   115,     0,
   114,   113,     0,     0,     0,     0,     0,     0,     0,   158,
     0,     0,     0,     0,     0,   122,   117,   205,     0,   129,
     0,   126,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   153,   133,   134,     0,   282,   288,
     0,    28,    39,     0,     0,     0,    51,     0,     0,    29,
    30,    31,    32,    33,    34,   231,   252,   232,   253,   233,
   254,   234,   255,   235,   256,   236,   257,   237,   258,   238,
   259,   239,   260,   251,   272,   240,   261,     0,     0,   242,
   263,   243,   264,   244,   265,   245,   266,   246,   267,   247,
   268,     0,     0,     0,     0,     0,     0,     0,     0,   334,
     0,     0,   332,   333,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    72,     0,     0,     0,     0,   283,     0,
    22,    20,     0,     0,     0,     0,   282,   309,   314,     0,
   306,     0,     0,   319,   320,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   111,     0,     0,     0,
     0,     0,   155,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   130,     0,     0,     0,     0,   285,     0,   281,
     0,     0,     0,     0,     0,     0,     0,    26,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    64,    65,     0,     0,     0,     0,     0,    67,    68,
    70,     0,     0,   327,     0,    76,   230,    21,     0,     0,
     0,     0,     0,     0,     0,   308,   206,     0,     0,     0,
     0,   207,   208,     0,     0,   209,     0,     0,    87,     0,
     0,     0,     0,   197,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   191,   123,     0,     0,     0,     0,
     0,     0,   204,   127,     0,     0,   124,   125,     0,     0,
     0,   324,     0,     0,     0,   145,   137,   287,   136,     0,
     0,     0,     0,     0,   300,     0,     0,   241,   262,   248,
   269,   249,   270,   250,   271,     0,   336,   335,   331,   290,
     0,    54,     0,     0,     0,     0,    62,     0,     0,     0,
   325,    23,    24,     0,     0,   315,     0,    83,     0,    90,
     0,    92,     0,     0,    88,   103,     0,    89,   107,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   139,     0,     0,     0,     0,   116,     0,   173,
     0,   175,     0,   177,     0,     0,   196,     0,   159,   192,
     0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
     0,     0,     0,     0,   289,    27,     0,    35,     0,     0,
     0,     0,     0,    37,     0,     0,     0,     0,     0,    73,
     0,     0,    74,     0,   328,     0,     0,   316,     0,     0,
     0,    98,   104,     0,   202,   101,   102,     0,     0,     0,
   200,   203,   106,    85,   100,   105,   108,     0,     0,     0,
   299,     0,   298,     0,     0,   164,     0,     0,   165,     0,
     0,   166,     0,     0,     0,   302,     0,   118,   119,   120,
   121,     0,     0,     0,     0,   322,     0,   147,   146,    40,
     0,     0,     0,   301,     0,     0,     0,     0,     0,    63,
    69,    71,     0,    77,     0,    25,     0,     0,    91,    93,
     0,   199,   198,   201,    78,    79,   116,     0,   112,     0,
     0,     0,     0,     0,     0,   116,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    36,     0,     0,     0,    38,
    52,    53,   337,     0,   326,     0,     0,     0,     0,     0,
   297,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   160,     0,   193,     0,     0,     0,     0,   321,   148,     0,
     0,     0,     0,    75,     0,     0,     0,   110,     0,   179,
     0,     0,   181,     0,     0,   183,     0,     0,   156,     0,
   116,     0,     0,     0,     0,    97,     0,    44,     0,    50,
     0,    84,     0,   296,   167,     0,     0,   174,   168,     0,
     0,   176,   169,     0,     0,   178,     0,   162,     0,   194,
    86,    99,     0,     0,     0,     0,     0,     0,   185,     0,
   187,     0,   189,   161,   157,     0,     0,    41,     0,    48,
     0,     0,     0,   170,     0,     0,   171,     0,     0,   172,
     0,     0,   195,     0,    42,     0,   143,     0,     0,     0,
     0,     0,     0,     0,   163,     0,     0,     0,     0,   180,
     0,   182,     0,   184,     0,    43,    45,     0,    46,    94,
     0,     0,     0,     0,     0,   186,   188,   190,    47,    49,
     0,     0,     0
};

static const short yydefgoto[] = {  1181,
     2,    52,   623,    53,    54,   376,   907,   913,   550,   702,
  1025,  1144,   551,  1114,  1168,   552,  1146,   553,   554,   706,
   555,   118,   208,    55,   487,   517,   132,   500,   501,   133,
    59,    60,    61,    62,    63,   134,   674,  1080,  1126,   957,
   960,   963,  1096,  1100,  1104,  1135,  1138,  1141,   784,   785,
    65,    66,    67,   135,   121,   328,   168,   814,   815,   137,
   300,   192,   618,   735,   489
};

static const short yypact[] = {  2759,
    31,  2828,-32768,  2112,  -101,    10,    42,  1567,   -56,    -8,
  1315,    72,  1441,    93,   103,    91,   112,   116,   167,   196,
   521,    98,   546,   120,   123,   114,   114,   169,   266,     6,
   296,     8,   355,    56,   391,   398,   408,   258,   271,   297,
    13,    29,-32768,   317,-32768,   429,-32768,   453,   457,    20,
    27,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     2,    17,
-32768,-32768,-32768,-32768,   -50,   -42,   129,   190,   224,   289,
   325,   384,   404,   420,   428,   449,   464,   487,   502,   503,
   508,   511,   522,   526,   529,   346,   349,   366,   389,-32768,
   392,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2318,  2318,
  2318,-32768,-32768,  2318,   678,    15,   478,  2318,   495,  1284,
-32768,   516,   533,-32768,  2318,-32768,   394,   407,  1951,  2318,
  1178,-32768,-32768,-32768,  1502,   436,-32768,  2318,  2318,   425,
  2318,   523,  2318,   458,   535,  2318,  2318,  1693,  2318,   505,
   525,   530,  1693,   514,   543,   534,   544,   556,   557,   597,
   727,   114,   114,   114,  2318,  2318,   -82,-32768,    66,   114,
   598,   601,   616,  1986,   308,   622,-32768,  1693,    16,-32768,
-32768,  1693,  1693,   630,   647,   765,  2318,  2318,  2318,   653,
  2318,   652,   697,  2318,  2318,-32768,   783,-32768,-32768,-32768,
   785,-32768,   786,   664,  2318,   790,   663,-32768,   114,-32768,
  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,
  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,
  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,
  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,
  2318,  2318,   371,   435,   435,   435,   793,   427,   673,   673,
   673,  5244,    23,  2158,  4531,   332,   670,   795,   674,  1413,
-32768,-32768,  2318,  2318,  2318,  2318,  2318,  2318,  2318,  2318,
  2318,  2318,  2318,  2318,  2318,  2318,  2318,-32768,    -5,  3673,
  1760,  2318,   450,  2158,  5265,  2443,-32768,  1502,-32768,    -3,
  2318,   758,  5286,  5307,  2318,  5328,   109,  5349,  2318,   759,
  5370,  5391,   799,  5412,  2318,  2318,  2318,   804,  2318,  2318,
  2318,  2283,  2283,  2283,  2283,   694,   -74,-32768,-32768,  3699,
  3725,   114,   114,   559,   559,   -67,  2318,  2318,  2318,  1986,
  1986,  2318,   -44,-32768,  2318,   949,    92,   821,-32768,  2318,
  2887,   822,   824,  2318,  2318,-32768,  5433,  5454,  5475,   745,
  3751,-32768,   701,  1627,  5496,-32768,  2904,-32768,  2948,-32768,
  2318,  4554,   341,  2318,   316,     4,  5517,  4577,  5538,  4600,
  5559,  4623,  5580,  4646,  5601,  4669,  5622,  4692,  5643,  4715,
  5664,  4738,  5685,  4761,  5706,  4784,  5727,  4807,  3777,  3803,
  5748,  4830,  5769,  4853,  5790,  4876,  5811,  4899,  5832,  4922,
  5853,  4945,  3829,  3855,  3881,  3907,  3933,  3959,   284,    58,
   703,   709,   710,   706,  2318,-32768,  1693,  1693,   527,   122,
   435,  2318,   835,   838,    19,   715,-32768,  2598,   489,   813,
   700,   700,   547,   547,   547,   547,   451,   451,   673,   673,
   673,   673,    22,  2158,  2318,-32768,  2158,  4968,  1249,  1819,
   537,    24,  2158,-32768,  2617,  2318,   839,   840,  5874,   841,
  2318,  2318,   842,  5895,  2318,   843,   844,  2318,   848,  3025,
  5916,  5937,  2318,  3115,  3143,  5958,   728,  6252,-32768,   729,
   730,   731,   732,   114,  2318,  2318,-32768,-32768,-32768,   733,
  1059,-32768,   734,  2318,  3985,  4011,  4037,  3647,   114,  2970,
  4991,   -58,   -26,   -19,    39,-32768,-32768,-32768,  2318,-32768,
  5014,-32768,   737,   738,  5037,  5060,   855,   857,   859,   736,
  2318,  3014,  2318,  2318,-32768,-32768,-32768,  5083,    70,-32768,
  3171,-32768,-32768,   746,   747,   741,-32768,   749,   871,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2318,  2318,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2318,  2318,  2318,  2318,  2318,  2318,  2318,   874,-32768,
  2158,   435,-32768,-32768,  2318,   873,   877,   750,    34,  2318,
   878,   879,  1539,-32768,   880,   757,    13,   882,-32768,  2318,
-32768,   774,   435,    69,  4063,   541,   405,-32768,-32768,  2158,
-32768,   114,   845,  1502,-32768,  2318,  1791,  1693,  1693,   885,
  1693,  1912,  2243,  1693,   886,  2368,  1693,  1693,  2387,   760,
   888,   889,   890,  1113,   892,   893,   894,   895,   896,   897,
   898,   902,   -22,  4089,  4115,-32768,-32768,  3199,   114,   114,
   114,   329,-32768,   245,   901,  2318,  2158,  2318,  2158,  2158,
  2158,  2406,   903,  2318,  2318,   904,   906,  1693,  1693,  1693,
   911,  4141,-32768,  2636,  1147,   910,   913,-32768,   912,-32768,
    14,   792,  2318,  2318,  1693,   787,  2318,-32768,  5979,  5106,
  6000,  5129,  6021,  5152,  6042,  5175,  5198,   794,   176,   807,
  6063,-32768,-32768,   105,   373,   789,   929,  2484,-32768,-32768,
-32768,    13,  2318,-32768,   545,-32768,  6252,-32768,   932,    28,
  2318,   810,   578,    18,   814,  6252,-32768,    33,    35,  1693,
   936,-32768,-32768,   937,  1693,-32768,   938,   939,-32768,  2318,
  1693,  1693,  1693,-32768,   501,  1693,  1693,  1693,  1693,  1693,
  1693,  1693,   611,  2318,  2318,  2318,   817,    86,    89,   100,
  1986,   946,   819,    -1,-32768,-32768,  6084,   579,  6105,   583,
   584,   587,-32768,-32768,  4167,  4193,-32768,-32768,   948,   950,
   869,-32768,  2318,  2318,  2318,-32768,-32768,   341,-32768,   951,
  2318,  4219,  4245,   588,-32768,  2318,  6126,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   829,-32768,-32768,-32768,-32768,
  1693,   435,  2318,   969,   973,    19,-32768,   972,  5221,    13,
-32768,-32768,-32768,   435,  4271,-32768,   850,-32768,  2318,-32768,
   114,-32768,   114,   975,-32768,-32768,   976,-32768,-32768,  4297,
   978,   979,   980,  2318,  2318,   751,   981,   983,   993,   998,
  1001,  1002,-32768,  2283,  3227,  6147,  2656,   559,   114,  1003,
   114,  1005,   114,  1006,  3255,   350,-32768,  1693,-32768,-32768,
    24,  1007,   841,  1009,  1010,  1011,  2318,  2318,-32768,-32768,
  1693,  3059,   628,  6168,-32768,-32768,   229,  6252,  2318,  2318,
  1693,   884,   625,  6252,  1693,  1016,  1017,  1019,  2503,-32768,
  1015,  1021,-32768,   905,-32768,  1022,  2318,-32768,  6189,    52,
    59,-32768,-32768,  2318,-32768,-32768,-32768,  2522,  2541,  1023,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2560,  1028,   907,
-32768,  2318,-32768,   908,   367,-32768,   914,   369,-32768,   915,
   372,-32768,   917,   918,  2318,   853,   909,-32768,-32768,-32768,
-32768,  4323,  4349,   952,  2318,-32768,  2318,-32768,-32768,-32768,
  2318,  4375,  4401,-32768,  1693,  2318,  1032,  1033,   927,-32768,
-32768,-32768,    13,-32768,   958,-32768,  4427,  1049,-32768,-32768,
  4453,-32768,-32768,-32768,-32768,-32768,   559,  3087,-32768,  1986,
   245,  1986,   245,  1986,   245,-32768,  3283,  1034,  1693,  2318,
  2318,  2318,  3311,  3339,   923,  6252,  2318,  2318,   634,  6252,
-32768,-32768,-32768,  1052,-32768,  2318,   114,  1057,   930,  2318,
-32768,  3367,   374,    40,  3395,   377,    99,  3423,   381,   186,
  3031,   933,-32768,   635,  3451,  3479,  2579,-32768,-32768,  2318,
  6210,  4479,  1058,-32768,  4505,    64,   935,-32768,  3507,  1060,
  2318,  1066,  1067,  2318,  1068,  1069,  2318,  1072,-32768,   245,
-32768,  1693,  1073,  1074,  1075,-32768,   639,-32768,  2318,-32768,
  2318,-32768,  1077,-32768,-32768,   953,  3535,-32768,-32768,   954,
  3563,-32768,-32768,   956,  3591,-32768,   242,  3075,   957,-32768,
-32768,-32768,  1080,   959,  6231,  3619,   964,   245,  1085,   245,
  1092,   245,  1093,-32768,-32768,   245,  1105,-32768,   435,-32768,
  1108,  1078,   247,-32768,   984,   275,-32768,   987,   286,-32768,
   988,   287,-32768,   642,-32768,   990,-32768,   982,  1121,   245,
  1122,   245,  1123,   245,-32768,   435,  1127,   435,  1128,-32768,
   294,-32768,   323,-32768,   328,-32768,-32768,   650,-32768,-32768,
  1129,  1130,  1131,   435,  1133,-32768,-32768,-32768,-32768,-32768,
  1144,  1145,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   409,-32768,-32768,   604,-32768,    87,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -265,    36,-32768,   272,  1146,     3,  -332,  -173,    12,
-32768,-32768,-32768,-32768,-32768,  1148,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1002,  -599,
-32768,-32768,-32768,    49,-32768,   279,-32768,   166,   406,    85,
  -249,  -615,   321,-32768,    -4
};


#define	YYLAST		6378


static const short yytable[] = {   122,
   432,   734,   503,   346,    57,   204,   351,   543,  1044,   176,
  1047,   179,  1050,    58,   429,   124,   190,   543,   266,   348,
   209,   349,   616,   848,   199,   123,   367,   621,   369,   427,
   632,   199,   193,   843,   332,   333,     3,   725,   850,   119,
   852,   140,   332,   333,   461,   201,   203,   126,   144,   332,
   333,   334,   120,    96,    97,    98,    99,   999,   494,   100,
    96,    97,    98,    99,  1000,   504,   100,   782,   676,  1092,
   138,   783,   332,   333,   199,   677,   211,  1107,   212,   544,
   545,   546,   547,   548,   213,   851,   214,   853,   509,   544,
   545,   546,   547,   548,   332,   333,   182,   518,   519,   183,
   678,   267,   268,    96,    97,    98,    99,   679,   782,   100,
   774,    71,   783,   633,   680,  1133,   838,  1136,   139,  1139,
   726,   727,   453,  1142,   112,   113,   428,   454,    71,   463,
   205,   464,   206,   889,   332,   333,   622,   207,   549,   177,
   148,   180,   622,   125,   350,   156,   191,  1161,   810,  1163,
   210,  1165,   617,   200,   471,   194,   472,   259,   260,   261,
   202,   150,   262,   265,   610,   147,   270,   782,   332,   333,
   510,   783,   681,   290,  1072,   332,   333,   260,   295,   298,
   332,   333,   332,   333,   890,   600,   303,   304,   532,   306,
   601,   308,   112,   113,   311,   312,   740,   314,   143,   335,
   697,   463,   332,   333,   624,   332,   333,   626,   105,   106,
   107,   108,   151,   330,   331,   299,   332,   333,   879,   146,
   880,   881,   331,   882,   925,   105,   106,   107,   108,   147,
   163,   164,   883,  1075,   884,   357,   358,   359,   149,   361,
   165,   152,   364,   365,   112,   113,   161,   166,   420,   421,
   422,   423,   609,   372,   782,   215,   162,   216,   783,   377,
   378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
   398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
   408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
   418,   433,   170,   828,   167,   169,   171,   175,   463,   172,
   782,   173,   298,   782,   783,   782,   217,   783,   218,   783,
  1078,   438,   439,   440,   441,   442,   443,   444,   445,   446,
   447,   448,   449,   450,   451,   452,   499,   499,   431,   458,
   459,   178,   298,   782,   260,   502,   502,   783,   299,   465,
   219,   719,   220,   469,   782,   782,   980,   474,   783,   783,
   181,   981,   782,   480,   481,   482,   783,   484,   485,   486,
   488,   488,   488,   488,   419,   199,  1124,  1034,   299,   832,
   743,  1149,   163,   164,   187,   505,   506,   507,   259,   260,
   508,   782,   165,   511,   184,   783,   782,   188,   521,   174,
   783,   185,   525,   526,    96,    97,    98,    99,   540,  1151,
   100,   186,   598,   136,   599,   221,   142,   222,   145,   538,
  1153,  1155,   541,   189,   332,   333,   612,   788,  1171,   790,
   791,   792,   332,   333,   196,   105,   106,   107,   108,   199,
   327,   344,   329,   195,   890,   332,   333,   890,   336,   542,
   890,   223,   343,   224,   112,   113,   197,  1172,   831,   833,
   198,   781,  1173,   112,   113,   611,   332,   333,    96,    97,
    98,    99,   253,   458,   100,   254,   105,   106,   107,   108,
   613,   269,   965,   332,   333,   332,   333,   375,   332,   333,
   332,   333,   255,   332,   333,   112,   113,   332,   333,  1010,
   271,  1012,   298,   625,  1014,   298,  1071,   890,   458,  1074,
   225,   634,   226,  1077,   637,   256,   112,   113,   257,   642,
   643,   288,   291,   646,   206,   302,   649,   112,   113,   207,
   227,   654,   228,   890,   699,   697,   890,   289,   299,   890,
   292,   299,   890,   664,   665,   954,   229,   635,   230,   112,
   113,   305,   668,   313,   231,   425,   232,   206,   318,   864,
   865,   890,   207,   890,   153,   890,   154,   682,   155,   284,
   285,   286,   112,   113,   698,   233,   287,   234,   460,   692,
   206,   694,   695,   347,   309,   207,   157,   352,   353,   158,
   235,   159,   236,   160,   490,   491,   492,   720,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   497,   498,   307,   237,   287,   238,   873,   874,   739,   329,
    25,    26,    27,    28,   310,    30,   709,   710,   239,   241,
   240,   242,    35,    36,   243,   977,   244,   245,   315,   246,
   711,   712,   713,   714,   715,   716,   717,   319,   247,   298,
   248,   316,   249,   721,   250,   251,   317,   252,   728,   463,
   321,   608,   698,   282,   283,   284,   285,   286,   737,   463,
   322,   631,   287,   463,  1039,   742,   320,   840,   298,   841,
    68,   258,   323,   324,   746,   299,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
   463,   463,   847,   892,   299,   463,   463,   894,   895,   463,
   911,   896,   912,   325,   787,   298,   789,   298,   298,   298,
   326,   337,   795,   796,   338,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   339,
   345,   812,   813,   287,   940,   817,   941,   986,   354,   987,
   834,   299,   978,   299,   299,   299,   911,  1082,  1063,  1083,
   356,   986,   663,  1113,  1156,   355,  1157,   101,   102,   103,
   104,   839,  1174,   360,  1175,   362,   363,   672,   366,   845,
   368,   370,   371,   373,   109,   110,   374,   424,   287,   111,
   434,   435,   436,   466,   114,   478,   475,   263,   860,   117,
   483,   264,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   493,   875,   876,   877,   287,   520,   918,   523,   885,
   524,   530,   606,   607,   533,   602,   603,   604,   605,   926,
   614,   615,  1051,   905,   619,   638,   639,   641,   644,   647,
   648,   902,   903,   904,   650,   658,   659,   660,   661,   908,
   301,   688,   662,   689,   914,   690,   691,   666,   667,   949,
   684,   685,   703,   704,   705,   707,   708,   718,   722,   724,
   499,   919,   723,   729,   730,   733,   732,   736,   738,   502,
   745,   750,   755,   760,   761,   762,   763,   929,   766,   767,
   768,   769,   770,   771,   772,   773,   786,  1108,   794,   797,
   744,   798,   938,   939,   802,   807,   808,   809,   811,   835,
   816,   827,   948,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   829,   836,   966,   842,   287,   846,
   849,   855,   856,   858,   859,   972,   973,   778,   779,   780,
   878,   887,   888,   899,   901,   900,   906,   982,   983,   916,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   920,   997,   921,   923,   287,   928,
   932,   933,  1001,   935,   936,   937,   942,  1018,   943,   512,
     9,    10,   513,    12,   514,    14,   515,    16,   944,    17,
  1008,    19,    20,   945,    22,    23,   946,   947,   956,   499,
   959,   962,   968,  1017,   969,   970,   971,   985,   502,   989,
    34,   993,   990,  1023,   991,  1024,   994,   996,  1004,  1026,
    38,    39,    40,  1006,  1030,   995,  1022,  1031,  1032,  1053,
  1007,  1019,  1009,   748,   749,  1035,   751,  1011,  1013,   754,
  1015,  1016,   757,   758,  1033,  1037,  1060,  1064,  1042,   886,
  1045,  1067,  1048,  1090,  1068,  1095,  1081,  1093,  1055,  1056,
  1057,  1098,  1099,  1102,  1103,  1061,  1062,  1106,  1110,  1111,
  1112,  1117,  1148,   516,  1065,  1128,  1118,  1120,  1069,  1122,
  1134,  1127,  1129,   799,   800,   801,  1132,  1137,  1140,   512,
     9,    10,   513,    12,   514,    14,   515,    16,   914,    17,
  1143,    19,    20,  1147,    22,    23,  1159,  1150,   764,  1097,
  1152,  1154,  1101,  1158,  1145,  1105,  1160,  1162,  1164,   930,
    34,   931,  1167,  1170,  1176,  1177,  1178,  1115,  1180,  1116,
    38,    39,    40,  1182,  1183,   701,  1087,    56,   844,    64,
  1029,  1166,     0,  1169,   805,   854,   922,   955,     0,   958,
   857,   961,     0,     0,     0,     0,   861,   862,   863,  1179,
   765,   866,   867,   868,   869,   870,   871,   872,     0,     0,
    68,   127,     0,     0,     0,     0,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
     0,     0,     0,     0,     0,     0,     0,     0,   128,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,   917,     0,   287,    25,
    26,    27,    28,    29,    30,     0,     0,     0,     0,     0,
     0,    35,    36,     0,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,   806,     0,     0,   101,   102,   103,
   104,     0,     0,     0,     0,     0,     0,     0,  1043,   272,
  1046,     0,  1049,   967,   109,   296,     0,     0,     0,   111,
     0,     0,     0,     0,   114,     0,   974,     0,     0,   117,
     0,     0,   297,     0,     0,  1066,   984,    68,   127,     0,
   988,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,     0,     0,
     0,     0,     0,     0,     0,   128,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,    25,    26,    27,    28,
    29,    30,   140,   628,     0,     0,     0,     0,    35,    36,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,     0,     0,     0,   101,   102,   103,   104,   437,     0,
     0,     0,     0,     0,  1054,     0,     0,     0,     0,     0,
     0,   109,   129,     0,     0,     0,   111,     0,     0,     0,
     0,   141,     0,    68,   127,     0,   117,     0,   131,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,     0,     0,     0,     0,     0,     0,     0,
     0,   128,     0,     0,     0,     0,     0,  1109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    25,    26,    27,    28,    29,    30,   144,   301,
     0,     0,     0,     0,    35,    36,     0,     0,     0,     0,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
   101,   102,   103,   104,   731,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   129,     0,
     0,     0,   111,     0,     0,     0,     0,   114,     0,    68,
   127,     0,   117,     0,   131,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,     0,
     0,     0,     0,     0,     0,     0,     0,   128,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,    25,    26,
    27,    28,    29,    30,   534,     0,     0,     0,     0,     0,
    35,    36,     0,     0,     0,     0,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,   101,   102,   103,   104,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   109,   129,     0,     0,     0,   111,     0,
     0,     0,     0,   130,     0,    68,   127,     0,   117,     0,
   131,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,     0,     0,     0,     0,     0,
     0,     0,     0,   128,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,    25,    26,    27,    28,    29,    30,
     0,     0,    68,   258,     0,     0,    35,    36,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,   101,   102,   103,   104,   747,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   129,     0,     0,     0,   111,     0,     0,     0,     0,   114,
     0,    68,   258,     0,   117,     0,   131,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,     0,     0,     0,     0,     0,     0,     0,     0,   101,
   102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,   110,     0,     0,
     0,   111,     0,     0,     0,     0,   114,     0,     0,   456,
     0,   117,     0,   457,     0,     0,     0,     0,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,   752,   101,   102,
   103,   104,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   110,     0,     0,     0,
   111,     0,     0,     0,     0,   114,     0,     0,   629,     0,
   117,     0,   630,    68,   293,     0,     0,     0,     0,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,     0,     0,     0,     0,     0,    68,   258,
     0,     0,     0,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   101,   102,   103,   104,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,     0,
     0,     0,   111,     0,     0,     0,     0,   114,     0,     0,
     0,     0,   117,     0,   294,   101,   102,   103,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   340,   341,     0,     0,     0,   111,     0,     0,
     0,     0,   342,     0,    68,    69,    70,   117,    71,   166,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,     0,    96,    97,    98,    99,     0,
     0,   100,     0,     0,     0,     0,     0,     0,     0,     0,
    68,   127,     0,     0,     0,     0,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
     0,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   101,   102,   103,   104,   105,   106,   107,   108,    25,
    26,    27,    28,    29,    30,     0,     0,     0,   109,   110,
     0,    35,    36,   111,   112,   113,     0,     0,   114,     0,
   115,     0,   116,   117,     0,     0,     0,     0,   753,     0,
     0,     0,     0,     0,     0,     0,     0,   101,   102,   103,
   104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   296,     0,     0,     0,   111,
     0,     0,     0,     0,   114,    68,   258,   199,     0,   117,
     0,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,     0,    96,    97,    98,    99,
    68,   258,   100,     0,     0,     0,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,   756,     0,     0,     0,     0,     0,     0,
     0,     0,   101,   102,   103,   104,     0,     0,     0,     0,
     0,     0,   759,     0,     0,     0,     0,     0,     0,   109,
   110,     0,     0,     0,   111,     0,     0,     0,     0,   114,
     0,   793,     0,     0,   117,     0,     0,   101,   102,   103,
   104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,     0,     0,     0,   111,
     0,     0,     0,     0,   114,    68,   293,     0,     0,   117,
     0,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   837,
     0,     0,     0,   287,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   992,     0,
     0,     0,   287,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,  1002,     0,     0,
     0,   287,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   101,   102,   103,   104,  1003,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   110,     0,     0,     0,   111,  1005,     0,     0,     0,   114,
     0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1086,     0,     0,     0,     0,     0,
     0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   620,     0,     0,     0,   287,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   636,     0,     0,     0,   287,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   804,     0,     0,     0,   287,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,    -3,     1,
     0,   287,    -3,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,     0,     0,     0,     0,     0,   952,     0,
   953,    -3,     0,     0,     0,     0,    -3,    -3,     0,    -3,
    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,    -3,
    -3,    -3,    -3,    -3,    -3,    -3,     0,     0,     0,    -3,
    -3,    -3,    -3,    -3,    -3,    -3,     0,    -3,    -3,    -3,
    -3,     4,    -3,    -3,     0,     0,     0,     0,     0,    -3,
    -3,    -3,    -3,     0,     0,    -3,     0,    -3,     0,    -3,
    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,     0,
     5,     0,     0,     0,     0,     6,     7,     0,     8,     9,
    10,    11,    12,    13,    14,    15,    16,     0,    17,    18,
    19,    20,    21,    22,    23,     0,     0,     0,    24,    25,
    26,    27,    28,    29,    30,     0,    31,    32,    33,    34,
     0,    35,    36,     0,     0,     0,     0,     0,    37,    38,
    39,    40,     0,     0,    41,     0,    42,     0,    43,    44,
    45,    46,    47,    48,    49,    50,    51,   512,     9,    10,
   513,    12,   514,    14,   515,    16,     0,    17,     0,    19,
    20,     0,    22,    23,   512,     9,    10,   513,    12,   514,
    14,   515,    16,     0,    17,     0,    19,    20,    34,    22,
    23,     0,     0,     0,     0,     0,     0,     0,    38,    39,
    40,     0,     0,     0,     0,    34,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    38,    39,    40,   512,     9,
    10,   513,    12,   514,    14,   515,    16,     0,    17,     0,
    19,    20,     0,    22,    23,     0,     0,     0,     0,     0,
   512,     9,    10,   513,    12,   514,    14,   515,    16,    34,
    17,   522,    19,    20,     0,    22,    23,     0,     0,    38,
    39,    40,     0,     0,     0,     0,     0,     0,   536,     0,
     0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,    39,    40,   512,     9,    10,   513,    12,   514,
    14,   515,    16,     0,    17,     0,    19,    20,     0,    22,
    23,   512,     9,    10,   513,    12,   514,    14,   515,    16,
     0,    17,   537,    19,    20,    34,    22,    23,     0,     0,
     0,     0,     0,     0,     0,    38,    39,    40,     0,     0,
     0,     0,    34,     0,   673,     0,     0,     0,     0,     0,
     0,     0,    38,    39,    40,   512,     9,    10,   513,    12,
   514,    14,   515,    16,     0,    17,     0,    19,    20,     0,
    22,    23,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,    34,     0,   693,     0,
   287,     0,     0,     0,     0,     0,    38,    39,    40,   651,
     0,     0,     0,     0,     0,  1079,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,   975,     0,   976,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,  1125,
     0,     0,   287,     0,     0,     0,     0,     0,     0,  1040,
     0,  1041,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,     0,     0,   655,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,     0,     0,   656,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,     0,   700,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,     0,     0,   777,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,     0,
     0,   950,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,     0,     0,   964,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,     0,     0,  1052,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,     0,  1058,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,     0,     0,  1059,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,     0,
     0,  1070,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,     0,     0,  1073,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,     0,     0,  1076,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,     0,  1084,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,     0,     0,  1085,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,     0,
     0,  1094,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,     0,     0,  1119,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,     0,     0,  1121,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,     0,  1123,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,     0,     0,  1131,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,   426,     0,     0,     0,     0,   495,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,   455,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,   495,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,   496,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,   531,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,   578,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,   579,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,   592,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,   593,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,   594,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,   595,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,   596,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,   597,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,   669,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,   670,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,   671,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,   741,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,   775,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,   776,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,   803,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,   897,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,   898,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,   909,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,   910,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,   927,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,   934,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,  1020,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,  1021,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,  1027,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,  1028,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,  1036,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,  1038,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     0,  1089,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,  1091,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
   430,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,     0,     0,   539,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,   557,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,     0,     0,   559,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,   561,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,     0,     0,   563,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,   565,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,     0,
     0,   567,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,   569,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,     0,     0,   571,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
   573,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,     0,     0,   575,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,   577,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,     0,     0,   581,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,   583,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,     0,     0,   585,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,   587,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,     0,
     0,   589,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,   591,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,     0,     0,   627,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
   675,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,     0,     0,   683,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,     0,     0,   686,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,     0,     0,   687,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
     0,     0,   696,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,     0,     0,   819,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,     0,     0,   821,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,     0,
     0,   823,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,     0,     0,   825,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,     0,     0,   826,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,     0,     0,
   924,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,   426,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,   462,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,   467,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,   468,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,   470,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,   473,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,   476,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,   477,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,   479,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
   527,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,   528,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,   529,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,   535,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,   556,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,   558,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,   560,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,   562,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,   564,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,   566,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
   568,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,   570,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,   572,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,   574,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,   576,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,   580,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,   582,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,   584,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,   586,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,   588,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
   590,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,   640,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,   645,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,   652,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,   653,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,   657,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,   818,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,   820,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,   822,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287,     0,   824,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,   287,     0,
   830,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,   287,
     0,   891,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
   287,     0,   893,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,   287,     0,   915,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,   287,     0,   951,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,   287,     0,   979,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,   287,     0,   998,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,   287,     0,  1088,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,   287,     0,  1130,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,   287
};

static const short yycheck[] = {     4,
   266,   617,   335,   177,     2,     4,   180,     4,  1011,     4,
  1013,     4,  1015,     2,   264,     6,     4,     4,     4,     4,
     4,     6,     4,     6,     5,   127,   200,     6,   202,     7,
     7,     5,     4,     6,   117,   118,     6,     4,     6,     4,
     6,    68,   117,   118,   294,    50,    51,     6,    68,   117,
   118,   134,     4,    34,    35,    36,    37,     6,   133,    40,
    34,    35,    36,    37,     6,   133,    40,    69,   127,     6,
   127,    73,   117,   118,     5,   134,   127,  1080,   129,    76,
    77,    78,    79,    80,   127,    53,   129,    53,   133,    76,
    77,    78,    79,    80,   117,   118,    41,     6,     7,    44,
   127,    87,    88,    34,    35,    36,    37,   134,    69,    40,
   133,     7,    73,    90,   134,  1118,   732,  1120,   127,  1122,
    87,    88,   128,  1126,   123,   124,   104,   133,     7,   133,
   129,   135,   131,   135,   117,   118,   115,   136,   135,   134,
    50,   134,   115,   134,   129,    48,   134,  1150,   135,  1152,
   134,  1154,   134,   134,    46,   127,    48,   109,   110,   111,
   134,    46,   114,   115,   430,   127,   118,    69,   117,   118,
   344,    73,   134,   125,   135,   117,   118,   129,   130,   131,
   117,   118,   117,   118,   784,   128,   138,   139,   362,   141,
   133,   143,   123,   124,   146,   147,   128,   149,   127,   134,
   131,   133,   117,   118,   454,   117,   118,   457,   104,   105,
   106,   107,    46,   165,   166,   131,   117,   118,   133,   127,
   135,   133,   174,   135,   840,   104,   105,   106,   107,   127,
   117,   118,   133,   135,   135,   187,   188,   189,   127,   191,
   127,    46,   194,   195,   123,   124,   127,   134,   253,   254,
   255,   256,   131,   205,    69,   127,   134,   129,    73,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   266,   134,   128,    26,    27,    41,    29,   133,    44,
    69,    46,   264,    69,    73,    69,   127,    73,   129,    73,
   135,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   334,   335,     7,   291,
   292,    46,   294,    69,   296,   334,   335,    73,   264,   301,
   127,   601,   129,   305,    69,    69,   128,   309,    73,    73,
     6,   133,    69,   315,   316,   317,    73,   319,   320,   321,
   322,   323,   324,   325,     4,     5,   135,   993,   294,     7,
   630,   135,   117,   118,   127,   337,   338,   339,   340,   341,
   342,    69,   127,   345,     4,    73,    69,   127,   350,   134,
    73,     4,   354,   355,    34,    35,    36,    37,   373,   135,
    40,     4,   129,     8,   131,   127,    11,   129,    13,   371,
   135,   135,   374,   127,   117,   118,   431,   677,   135,   679,
   680,   681,   117,   118,     6,   104,   105,   106,   107,     5,
   162,   134,   164,   127,  1044,   117,   118,  1047,   170,   134,
  1050,   127,   174,   129,   123,   124,     4,   135,   724,   725,
     4,   133,   135,   123,   124,   430,   117,   118,    34,    35,
    36,    37,   127,   425,    40,   127,   104,   105,   106,   107,
   432,     4,   133,   117,   118,   117,   118,   209,   117,   118,
   117,   118,   127,   117,   118,   123,   124,   117,   118,   133,
     6,   133,   454,   455,   133,   457,   133,  1107,   460,   133,
   127,   463,   129,   133,   466,   127,   123,   124,   127,   471,
   472,     6,   129,   475,   131,    90,   478,   123,   124,   136,
   127,   483,   129,  1133,   539,   131,  1136,     5,   454,  1139,
   134,   457,  1142,   495,   496,   878,   127,   463,   129,   123,
   124,   127,   504,   148,   127,   129,   129,   131,   153,    59,
    60,  1161,   136,  1163,    44,  1165,    46,   519,    48,   119,
   120,   121,   123,   124,   539,   127,   126,   129,   129,   531,
   131,   533,   534,   178,   127,   136,    41,   182,   183,    44,
   127,    46,   129,    48,   323,   324,   325,   602,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   332,   333,    90,   127,   126,   129,     6,     7,   623,   341,
    62,    63,    64,    65,    90,    67,   578,   579,   127,   127,
   129,   129,    74,    75,   127,     8,   129,   127,   134,   129,
   592,   593,   594,   595,   596,   597,   598,   134,   127,   601,
   129,   127,   127,   605,   129,   127,   127,   129,   610,   133,
   127,   135,   627,   117,   118,   119,   120,   121,   620,   133,
   127,   135,   126,   133,  1007,   135,   134,   133,   630,   135,
     3,     4,   127,   127,   636,   601,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   133,   133,   135,   135,   630,   133,   133,   135,   135,   133,
   133,   135,   135,   127,   676,   677,   678,   679,   680,   681,
     4,   134,   684,   685,   134,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   134,
   129,   703,   704,   126,     4,   707,     6,   133,   129,   135,
   725,   677,   135,   679,   680,   681,   133,   133,   135,   135,
     6,   133,   494,   135,   133,   129,   135,   100,   101,   102,
   103,   733,   133,   131,   135,   134,    90,   509,     6,   741,
     6,     6,   129,     4,   117,   118,   134,     5,   126,   122,
   131,     7,   129,    46,   127,     7,    48,   130,   760,   132,
     7,   134,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   128,   774,   775,   776,   126,     6,   832,     7,   781,
     7,    87,   427,   428,   134,   133,   128,   128,   133,   844,
     6,     4,  1016,   808,   130,     7,     7,     7,     7,     7,
     7,   803,   804,   805,     7,   128,   128,   128,   128,   811,
     8,     7,   131,     7,   816,     7,   131,   135,   135,   874,
   134,   134,   127,   127,   134,   127,     6,     4,     6,   130,
   878,   833,     6,     6,     6,   129,     7,     6,   115,   878,
    46,     7,     7,   134,     7,     7,     7,   849,     7,     7,
     7,     7,     7,     7,     7,     4,     6,  1081,     6,     6,
   632,     6,   864,   865,     4,     6,     4,     6,   127,   131,
   134,   128,   874,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   128,     7,   888,     6,   126,   130,
   127,     6,     6,     6,     6,   897,   898,   669,   670,   671,
   134,     6,   134,     6,    86,     6,     6,   909,   910,   131,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,     6,   927,     4,     6,   126,   130,
     6,     6,   934,     6,     6,     6,     6,   135,     6,    41,
    42,    43,    44,    45,    46,    47,    48,    49,     6,    51,
   952,    53,    54,     6,    56,    57,     6,     6,     6,  1007,
     6,     6,     6,   965,     6,     6,     6,   134,  1007,     4,
    72,     7,     6,   975,     6,   977,     6,     6,     6,   981,
    82,    83,    84,     6,   986,   131,    85,     6,     6,     6,
   134,   133,   135,   638,   639,    88,   641,   134,   134,   644,
   134,   134,   647,   648,   128,     7,   134,     6,  1010,   781,
  1012,     5,  1014,     6,   135,     6,   134,   133,  1020,  1021,
  1022,     6,     6,     6,     6,  1027,  1028,     6,     6,     6,
     6,     5,     5,   135,  1036,     6,   134,   134,  1040,   134,
     6,   135,   134,   688,   689,   690,   133,     6,     6,    41,
    42,    43,    44,    45,    46,    47,    48,    49,  1060,    51,
     6,    53,    54,     6,    56,    57,   135,   134,     6,  1071,
   134,   134,  1074,   134,  1129,  1077,     6,     6,     6,   851,
    72,   853,     6,     6,     6,     6,     6,  1089,     6,  1091,
    82,    83,    84,     0,     0,   542,  1060,     2,   740,     2,
   985,  1156,    -1,  1158,     8,   750,   836,   879,    -1,   881,
   755,   883,    -1,    -1,    -1,    -1,   761,   762,   763,  1174,
    58,   766,   767,   768,   769,   770,   771,   772,    -1,    -1,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,   831,    -1,   126,    62,
    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
    -1,    74,    75,    -1,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,    -1,    -1,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1010,     6,
  1012,    -1,  1014,   888,   117,   118,    -1,    -1,    -1,   122,
    -1,    -1,    -1,    -1,   127,    -1,   901,    -1,    -1,   132,
    -1,    -1,   135,    -1,    -1,  1037,   911,     3,     4,    -1,
   915,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    41,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    62,    63,    64,    65,
    66,    67,    68,   135,    -1,    -1,    -1,    -1,    74,    75,
    -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,    -1,   100,   101,   102,   103,     6,    -1,
    -1,    -1,    -1,    -1,  1019,    -1,    -1,    -1,    -1,    -1,
    -1,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,
    -1,   127,    -1,     3,     4,    -1,   132,    -1,   134,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    41,    -1,    -1,    -1,    -1,    -1,  1082,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    62,    63,    64,    65,    66,    67,    68,     8,
    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   100,   101,   102,   103,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,
    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,     3,
     4,    -1,   132,    -1,   134,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    62,    63,
    64,    65,    66,    67,     8,    -1,    -1,    -1,    -1,    -1,
    74,    75,    -1,    -1,    -1,    -1,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   100,   101,   102,   103,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,    -1,
    -1,    -1,    -1,   127,    -1,     3,     4,    -1,   132,    -1,
   134,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    41,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    62,    63,    64,    65,    66,    67,
    -1,    -1,     3,     4,    -1,    -1,    74,    75,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,   100,   101,   102,   103,     6,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
    -1,     3,     4,    -1,   132,    -1,   134,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
   101,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,
    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,
    -1,   132,    -1,   134,    -1,    -1,    -1,    -1,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,     6,   100,   101,
   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,
   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,    -1,
   132,    -1,   134,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   100,   101,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,
    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,   134,   100,   101,   102,   103,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,
    -1,    -1,   127,    -1,     3,     4,     5,   132,     7,   134,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    34,    35,    36,    37,    -1,
    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   100,   101,   102,   103,   104,   105,   106,   107,    62,
    63,    64,    65,    66,    67,    -1,    -1,    -1,   117,   118,
    -1,    74,    75,   122,   123,   124,    -1,    -1,   127,    -1,
   129,    -1,   131,   132,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,
    -1,    -1,    -1,    -1,   127,     3,     4,     5,    -1,   132,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    34,    35,    36,    37,
     3,     4,    40,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   100,   101,   102,   103,    -1,    -1,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,   117,
   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
    -1,     6,    -1,    -1,   132,    -1,    -1,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,
    -1,    -1,    -1,    -1,   127,     3,     4,    -1,    -1,   132,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,     6,
    -1,    -1,    -1,   126,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,     6,    -1,
    -1,    -1,   126,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,     6,    -1,    -1,
    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   100,   101,   102,   103,     6,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
   118,    -1,    -1,    -1,   122,     6,    -1,    -1,    -1,   127,
    -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,     8,    -1,    -1,    -1,   126,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,     8,    -1,    -1,    -1,   126,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,     8,    -1,    -1,    -1,   126,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,     0,     1,
    -1,   126,     4,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
   135,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    -1,    51,
    52,    53,    54,    55,    56,    57,    -1,    -1,    -1,    61,
    62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
    72,     4,    74,    75,    -1,    -1,    -1,    -1,    -1,    81,
    82,    83,    84,    -1,    -1,    87,    -1,    89,    -1,    91,
    92,    93,    94,    95,    96,    97,    98,    99,    -1,    -1,
    33,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    55,    56,    57,    -1,    -1,    -1,    61,    62,
    63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    81,    82,
    83,    84,    -1,    -1,    87,    -1,    89,    -1,    91,    92,
    93,    94,    95,    96,    97,    98,    99,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    -1,    51,    -1,    53,
    54,    -1,    56,    57,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    -1,    51,    -1,    53,    54,    72,    56,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,
    84,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    82,    83,    84,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    -1,    51,    -1,
    53,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    72,
    51,   135,    53,    54,    -1,    56,    57,    -1,    -1,    82,
    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    82,    83,    84,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    -1,    51,    -1,    53,    54,    -1,    56,
    57,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    -1,    51,   135,    53,    54,    72,    56,    57,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    82,    83,    84,    -1,    -1,
    -1,    -1,    72,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    82,    83,    84,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    -1,    51,    -1,    53,    54,    -1,
    56,    57,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    72,    -1,   135,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    82,    83,    84,   135,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,   135,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 144 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 159 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 160 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 164 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 174 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 178 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 185 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 190 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 205 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 218 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 247 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 254 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 264 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 280 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 282 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 287 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 289 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 294 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 484 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 502 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 513 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 518 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 526 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 533 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 540 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 545 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 553 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 560 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 568 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 575 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 52:
#line 579 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 584 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 54:
#line 592 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 55:
#line 593 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 56:
#line 594 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 57:
#line 595 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 58:
#line 596 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 59:
#line 600 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 60:
#line 601 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 61:
#line 609 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 62:
#line 640 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 63:
#line 679 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 64:
#line 733 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 750 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 768 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 67:
#line 779 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 68:
#line 798 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 69:
#line 812 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 70:
#line 829 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 71:
#line 855 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 72:
#line 882 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 73:
#line 896 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 74:
#line 913 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 927 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 76:
#line 944 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 77:
#line 964 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 78:
#line 987 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 79:
#line 997 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 80:
#line 1012 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 81:
#line 1016 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 83:
#line 1030 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v = Create_Vertex(num, x, y, z, lc, 1.0);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(x, y, z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1048 "Gmsh.y"
{
      int num = (int)yyvsp[-9].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double u = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double v = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[2];

	gmshSurface *surf = gmshSurface::surfaceByTag ( (int) yyvsp[-4].d );

	if (!surf)
	  yymsg(GERROR, "gmshSurface %d does not exist", (int) yyvsp[-4].d);

	Vertex *vt = Create_Vertex(num, u, v, surf, lc);
	Tree_Add(THEM->Points, &vt);
	AddToTemporaryBoundingBox(vt->Pos.X,vt->Pos.Y,vt->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1071 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1087 "Gmsh.y"
{
      yymsg(WARNING, "Attractors are deprecated");
      List_Delete(yyvsp[-9].l);
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1094 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 88:
#line 1116 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 89:
#line 1134 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1152 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1170 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1196 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1214 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1241 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1260 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1284 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1308 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1334 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1351 "Gmsh.y"
{
      yymsg(WARNING, "Attractors are deprecated");
      List_Delete(yyvsp[-9].l);
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 100:
#line 1358 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1377 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1395 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1436 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;

      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + any point) and not %d", num,List_Nbr(yyvsp[-1].l));
      }
      else
      {
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if (!v1)yymsg(GERROR, "Sphere %d : unknown point %d", num,(int)p1);
	if (!v2)yymsg(GERROR, "Sphere %d : unknown point %d", num,(int)p2);
	gmshSurface *myGmshSurface = gmshSphere::NewSphere ( num , v1->Pos.X , v1->Pos.Y , v1->Pos.Z ,
							     sqrt ( ( v2->Pos.X - v1->Pos.X) *( v2->Pos.X - v1->Pos.X) +
								    ( v2->Pos.Y - v1->Pos.Y) *( v2->Pos.Y - v1->Pos.Y) +
								    ( v2->Pos.Z - v1->Pos.Z) *( v2->Pos.Z - v1->Pos.Z) ) );								    
      }      
    ;
    break;}
case 104:
#line 1459 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1475 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1495 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1512 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1529 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 109:
#line 1550 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 110:
#line 1555 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 111:
#line 1560 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 112:
#line 1565 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 113:
#line 1572 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 114:
#line 1573 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 115:
#line 1574 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 116:
#line 1579 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 117:
#line 1583 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 118:
#line 1587 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 119:
#line 1603 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 120:
#line 1619 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 121:
#line 1635 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 122:
#line 1656 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 123:
#line 1670 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 124:
#line 1676 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 125:
#line 1682 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 126:
#line 1694 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 127:
#line 1703 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 128:
#line 1713 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 129:
#line 1729 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 130:
#line 1748 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 131:
#line 1762 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 132:
#line 1768 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 133:
#line 1774 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 134:
#line 1783 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 135:
#line 1797 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 136:
#line 1842 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 137:
#line 1857 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 138:
#line 1868 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 139:
#line 1888 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 140:
#line 1898 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 141:
#line 1920 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 142:
#line 1924 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 143:
#line 1929 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 144:
#line 1934 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 145:
#line 1946 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 146:
#line 1961 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 147:
#line 1977 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 148:
#line 2003 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 149:
#line 2030 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 150:
#line 2062 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 151:
#line 2069 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 152:
#line 2074 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 153:
#line 2080 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 154:
#line 2084 "Gmsh.y"
{
    ;
    break;}
case 155:
#line 2093 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 156:
#line 2101 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 157:
#line 2109 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 158:
#line 2117 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 159:
#line 2122 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 160:
#line 2130 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 161:
#line 2135 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 162:
#line 2143 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 163:
#line 2148 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 164:
#line 2158 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 165:
#line 2165 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 166:
#line 2172 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 167:
#line 2179 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 168:
#line 2186 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 169:
#line 2193 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 170:
#line 2200 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 171:
#line 2207 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 172:
#line 2214 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 173:
#line 2221 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 174:
#line 2226 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 175:
#line 2233 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 176:
#line 2238 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 177:
#line 2245 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 178:
#line 2250 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 179:
#line 2257 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 180:
#line 2262 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 181:
#line 2269 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 182:
#line 2274 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 183:
#line 2281 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 184:
#line 2286 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 185:
#line 2293 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 186:
#line 2298 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 187:
#line 2305 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 188:
#line 2310 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 189:
#line 2317 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 190:
#line 2322 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 191:
#line 2333 "Gmsh.y"
{
    ;
    break;}
case 192:
#line 2336 "Gmsh.y"
{
    ;
    break;}
case 193:
#line 2342 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 194:
#line 2351 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 195:
#line 2373 "Gmsh.y"
{
      yymsg(WARNING, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 196:
#line 2397 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 197:
#line 2406 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 198:
#line 2424 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 199:
#line 2442 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 200:
#line 2460 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 201:
#line 2489 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 202:
#line 2524 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 203:
#line 2529 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 204:
#line 2556 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 205:
#line 2570 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 206:
#line 2589 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-1].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-4].l);
    ;
    break;}
case 207:
#line 2595 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-1].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-4].l);
    ;
    break;}
case 208:
#line 2601 "Gmsh.y"
{
    ;
    break;}
case 209:
#line 2604 "Gmsh.y"
{
    ;
    break;}
case 210:
#line 2613 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 211:
#line 2622 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 212:
#line 2623 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 213:
#line 2624 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 214:
#line 2625 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 215:
#line 2626 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 216:
#line 2627 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 217:
#line 2628 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 218:
#line 2629 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 219:
#line 2631 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 220:
#line 2637 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 221:
#line 2638 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 222:
#line 2639 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 223:
#line 2640 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 224:
#line 2641 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 225:
#line 2642 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 226:
#line 2643 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 227:
#line 2644 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 228:
#line 2645 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 229:
#line 2646 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 230:
#line 2647 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 231:
#line 2648 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 232:
#line 2649 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 233:
#line 2650 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 234:
#line 2651 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 235:
#line 2652 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 236:
#line 2653 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 237:
#line 2654 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 238:
#line 2655 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 239:
#line 2656 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 240:
#line 2657 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 241:
#line 2658 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 242:
#line 2659 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 243:
#line 2660 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 244:
#line 2661 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 245:
#line 2662 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 246:
#line 2663 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 247:
#line 2664 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 248:
#line 2665 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 249:
#line 2666 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 250:
#line 2667 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 251:
#line 2668 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 252:
#line 2670 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 253:
#line 2671 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2672 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 255:
#line 2673 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 256:
#line 2674 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 257:
#line 2675 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 258:
#line 2676 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 259:
#line 2677 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 260:
#line 2678 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 261:
#line 2679 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2680 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 263:
#line 2681 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2682 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2683 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2684 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2685 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 268:
#line 2686 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2687 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 270:
#line 2688 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 271:
#line 2689 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 272:
#line 2690 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 273:
#line 2699 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 274:
#line 2700 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 275:
#line 2701 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 276:
#line 2702 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 277:
#line 2703 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 278:
#line 2704 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 279:
#line 2705 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 280:
#line 2710 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 281:
#line 2726 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 282:
#line 2741 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 283:
#line 2761 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 284:
#line 2775 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 285:
#line 2788 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 286:
#line 2811 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 287:
#line 2829 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 288:
#line 2847 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 289:
#line 2865 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2883 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 291:
#line 2891 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 292:
#line 2895 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 293:
#line 2899 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 294:
#line 2903 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 295:
#line 2907 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 296:
#line 2914 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 297:
#line 2918 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 298:
#line 2922 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 299:
#line 2926 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 300:
#line 2933 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 301:
#line 2938 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 302:
#line 2946 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 303:
#line 2951 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 304:
#line 2955 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 305:
#line 2960 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 306:
#line 2964 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 307:
#line 2976 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 308:
#line 2982 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 309:
#line 2993 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 310:
#line 3013 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 311:
#line 3023 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 312:
#line 3033 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 313:
#line 3043 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 314:
#line 3060 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 315:
#line 3079 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 316:
#line 3103 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 317:
#line 3132 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 318:
#line 3137 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 319:
#line 3141 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 320:
#line 3145 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 321:
#line 3158 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 322:
#line 3162 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 323:
#line 3174 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 324:
#line 3181 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 325:
#line 3203 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 326:
#line 3207 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 327:
#line 3222 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 328:
#line 3227 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 329:
#line 3234 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 330:
#line 3238 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 331:
#line 3246 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 332:
#line 3254 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 333:
#line 3268 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 334:
#line 3282 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 335:
#line 3286 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 336:
#line 3305 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 337:
#line 3327 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3350 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
