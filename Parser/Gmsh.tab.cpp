
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tIntersect	317
#define	tView	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tIf	343
#define	tEndIf	344
#define	tExit	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tMesh	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.57 2001-01-08 08:05:47 geuzaine Exp $

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Mesh      *THEM;
extern Post_View *ActualView;
extern char       ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;
static char           *str;
static void           *pNumOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;

void CreateFile (char *name, int format);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 69 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1542
#define	YYFLAG		-32768
#define	YYNTBASE	182

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 261)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   167,     2,     2,   174,
   175,   165,   163,   179,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   180,     2,   181,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    33,    35,    36,    39,
    41,    43,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   526,   534,   541,   550,   551,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   589,   593,   594,   608,   610,   614,   615,   629,
   631,   635,   636,   650,   652,   656,   657,   677,   679,   683,
   684,   704,   706,   710,   711,   731,   733,   737,   738,   764,
   766,   770,   771,   797,   799,   803,   804,   830,   832,   836,
   837,   869,   871,   875,   876,   908,   910,   914,   915,   947,
   952,   960,   964,   971,   975,   982,   987,   995,  1000,  1008,
  1013,  1021,  1026,  1034,  1041,  1053,  1060,  1072,  1079,  1091,
  1098,  1110,  1117,  1129,  1136,  1148,  1154,  1166,  1172,  1184,
  1193,  1205,  1213,  1222,  1235,  1242,  1248,  1256,  1264,  1277,
  1285,  1295,  1313,  1321,  1330,  1339,  1347,  1359,  1365,  1374,
  1387,  1396,  1419,  1440,  1449,  1458,  1464,  1473,  1481,  1490,
  1496,  1508,  1514,  1524,  1526,  1528,  1530,  1531,  1534,  1539,
  1544,  1551,  1555,  1559,  1563,  1566,  1569,  1576,  1585,  1594,
  1605,  1607,  1610,  1612,  1616,  1621,  1623,  1632,  1645,  1654,
  1667,  1676,  1689,  1701,  1717,  1719,  1722,  1732,  1735,  1742,
  1752,  1762,  1771,  1780,  1789,  1796,  1801,  1804,  1807,  1809,
  1812,  1814,  1816,  1818,  1820,  1822,  1824,  1828,  1831,  1834,
  1837,  1841,  1845,  1849,  1853,  1857,  1861,  1865,  1869,  1873,
  1877,  1881,  1885,  1889,  1893,  1899,  1904,  1909,  1914,  1919,
  1924,  1929,  1934,  1939,  1944,  1949,  1956,  1961,  1966,  1971,
  1976,  1981,  1986,  1993,  2000,  2007,  2012,  2014,  2016,  2018,
  2023,  2026,  2032,  2035,  2041,  2045,  2054,  2059,  2069,  2074,
  2084,  2088,  2094,  2096,  2099,  2102,  2106,  2110,  2122,  2132,
  2140,  2148,  2149,  2153,  2155,  2159,  2160,  2164,  2168,  2170,
  2174,  2175,  2177,  2181,  2185,  2187,  2189,  2193,  2197,  2201,
  2207,  2217,  2225,  2231,  2233,  2239,  2243,  2252,  2254,  2258,
  2260,  2265
};

static const short yyrhs[] = {   184,
     0,   183,     0,   189,     0,     1,     6,     0,   140,     0,
   143,   144,   244,   244,   244,   145,   146,   142,   244,   244,
   244,   142,   244,   244,   244,   142,   244,   244,   244,   147,
   148,     0,   141,     0,     0,   184,   185,     0,   186,     0,
   188,     0,   187,     0,   114,     6,     0,   115,     6,     0,
   117,     6,     0,   116,     6,     0,   118,     6,     0,   119,
   174,   251,   179,     5,   175,     6,     0,   120,   174,   251,
   175,     6,     0,   121,   174,     5,   179,     5,   179,   251,
   179,   251,   179,     5,   179,     5,   179,     5,   175,     6,
     0,     3,     7,    98,   174,     5,   179,   249,   175,     6,
     0,     3,     7,    97,   174,     5,   179,   246,   179,   255,
   179,   245,   179,   245,   179,   245,   179,   255,   179,   255,
   179,   245,   175,     6,     0,     3,     7,    96,   174,     5,
   179,   246,   179,   246,   179,   253,   179,   245,   179,   245,
   179,   245,   179,   245,   179,   255,   179,   255,   179,   255,
   179,   255,   179,   245,   175,     6,     0,     3,     7,   104,
   174,     5,   179,     3,   179,     3,   179,     3,   179,   245,
   175,     6,     0,     3,     7,   108,   174,     5,   179,     3,
   179,   245,   175,     6,     0,     3,     7,   125,   174,     5,
   179,     3,   179,   245,   175,     6,     0,     3,     7,   106,
   174,     5,   179,   165,   179,   165,   179,   246,   179,   245,
   175,     6,     0,     3,     7,   109,   174,     5,   179,   255,
   175,     6,     0,     3,     7,   110,   174,     5,   179,   255,
   179,     3,   179,   245,   175,     6,     0,     3,     7,   105,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   111,
   174,     5,   179,     3,   179,   246,   175,     6,     0,     3,
     7,   113,   174,     5,   179,     3,   179,     3,   179,     3,
   175,     6,     0,     3,     7,   112,   174,     5,   179,   249,
   175,     6,     0,     3,     7,   107,   174,     5,   179,     3,
   175,     6,     0,     3,     7,    37,   174,     5,   179,     3,
   179,     3,   175,     6,     0,     3,     7,   123,   174,     5,
   179,   255,   175,     6,     0,     3,     7,   124,   174,     5,
   179,   255,   179,     3,   175,     6,     0,     3,     7,   122,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   126,
   174,     5,   179,     3,   179,   246,   175,     6,     0,     3,
     7,   127,   174,     5,   179,     3,   179,   246,   179,   246,
   175,     6,     0,     3,     7,   134,   174,     5,   179,     3,
   179,   246,   179,   246,   175,     6,     0,     3,     7,   128,
   174,     5,   179,     3,   179,   246,   175,     6,     0,     3,
     7,   138,   174,     5,   179,     3,   179,   246,   179,   246,
   175,     6,     0,     3,     7,   129,   174,     5,   179,     3,
   179,   255,   179,   255,   179,   245,   179,   245,   175,     6,
     0,     3,     7,   130,   174,     5,   179,   255,   175,     6,
     0,     3,     7,   131,   174,   132,   179,   245,   179,     3,
   175,     6,     0,     3,     7,   133,   174,     5,   179,   255,
   179,   245,   175,     6,     0,     3,     7,   135,   174,     5,
   179,     5,   179,     3,   179,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   179,     5,   179,     3,   175,     6,
     0,     3,     7,   137,   174,     3,   179,     3,   175,     6,
     0,     0,   189,   190,     0,   192,     0,   191,     0,   230,
     0,   231,     0,   232,     0,   235,     0,   236,     0,   239,
     0,   242,     0,   243,     0,   238,     0,   237,     0,    31,
   174,     5,   175,     6,     0,    31,   174,     5,   179,   256,
   175,     6,     0,    64,     5,   180,   193,   181,     6,     0,
    64,     5,     4,   249,   180,   193,   181,     6,     0,     0,
   193,   195,     0,   193,   198,     0,   193,   201,     0,   193,
   204,     0,   193,   207,     0,   193,   210,     0,   193,   213,
     0,   193,   216,     0,   193,   219,     0,   193,   222,     0,
   193,   225,     0,   193,   228,     0,   246,     0,   194,   179,
   246,     0,     0,    76,   174,   246,   179,   246,   179,   246,
   175,   196,   180,   194,   181,     6,     0,   246,     0,   197,
   179,   246,     0,     0,    77,   174,   246,   179,   246,   179,
   246,   175,   199,   180,   197,   181,     6,     0,   246,     0,
   200,   179,   246,     0,     0,    78,   174,   246,   179,   246,
   179,   246,   175,   202,   180,   200,   181,     6,     0,   246,
     0,   203,   179,   246,     0,     0,    73,   174,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   175,
   205,   180,   203,   181,     6,     0,   246,     0,   206,   179,
   246,     0,     0,    74,   174,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   175,   208,   180,   206,
   181,     6,     0,   246,     0,   209,   179,   246,     0,     0,
    75,   174,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   175,   211,   180,   209,   181,     6,     0,
   246,     0,   212,   179,   246,     0,     0,    70,   174,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   175,   214,   180,   212,
   181,     6,     0,   246,     0,   215,   179,   246,     0,     0,
    71,   174,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   175,
   217,   180,   215,   181,     6,     0,   246,     0,   218,   179,
   246,     0,     0,    72,   174,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   179,   246,   175,   220,   180,   218,   181,     6,     0,   246,
     0,   221,   179,   246,     0,     0,    67,   174,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   175,   223,   180,   221,   181,     6,     0,   246,     0,
   224,   179,   246,     0,     0,    68,   174,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   179,   246,   179,   246,   179,   246,   179,   246,   179,   246,
   175,   226,   180,   224,   181,     6,     0,   246,     0,   227,
   179,   246,     0,     0,    69,   174,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   179,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   175,
   229,   180,   227,   181,     6,     0,     4,     7,   246,     6,
     0,     4,   176,   246,   177,     7,   246,     6,     0,     4,
   170,     6,     0,     4,   176,   246,   177,   170,     6,     0,
     4,   171,     6,     0,     4,   176,   246,   177,   171,     6,
     0,     4,   149,   246,     6,     0,     4,   176,   246,   177,
   149,   246,     6,     0,     4,   150,   246,     6,     0,     4,
   176,   246,   177,   150,   246,     6,     0,     4,   151,   246,
     6,     0,     4,   176,   246,   177,   151,   246,     6,     0,
     4,   152,   246,     6,     0,     4,   176,   246,   177,   152,
   246,     6,     0,     4,   178,     4,     7,     5,     6,     0,
     4,   178,    64,   176,   246,   177,   178,     4,     7,     5,
     6,     0,     4,   178,     4,     7,   246,     6,     0,     4,
   178,    64,   176,   246,   177,   178,     4,     7,   246,     6,
     0,     4,   178,     4,   149,   246,     6,     0,     4,   178,
    64,   176,   246,   177,   178,     4,   149,   246,     6,     0,
     4,   178,     4,   150,   246,     6,     0,     4,   178,    64,
   176,   246,   177,   178,     4,   150,   246,     6,     0,     4,
   178,     4,   151,   246,     6,     0,     4,   178,    64,   176,
   246,   177,   178,     4,   151,   246,     6,     0,     4,   178,
     4,   152,   246,     6,     0,     4,   178,    64,   176,   246,
   177,   178,     4,   152,   246,     6,     0,     4,   178,     4,
   170,     6,     0,     4,   178,    64,   176,   246,   177,   178,
     4,   170,   246,     6,     0,     4,   178,     4,   171,     6,
     0,     4,   178,    64,   176,   246,   177,   178,     4,   171,
   246,     6,     0,     4,   178,    85,   178,     4,     7,   257,
     6,     0,     4,   178,    64,   176,   246,   177,   178,    85,
     7,   258,     6,     0,    34,   174,   246,   175,     7,   249,
     6,     0,    49,    34,   174,   246,   175,     7,   255,     6,
     0,    65,    34,   255,     7,   180,   246,   179,   246,   179,
   246,   181,     6,     0,    41,    42,   255,     7,   246,     6,
     0,    34,   180,   246,   181,     6,     0,    37,   174,   246,
   175,     7,   255,     6,     0,    39,   174,   246,   175,     7,
   255,     6,     0,    65,    37,   255,     7,   180,   246,   179,
   246,   179,   246,   181,     6,     0,    35,   174,   246,   175,
     7,   255,     6,     0,    35,   174,   246,   175,     7,   255,
    45,   249,     6,     0,    43,   174,   246,   175,     7,   180,
   246,   179,   246,   179,     5,   179,     5,   179,     5,   181,
     6,     0,    36,   174,   246,   175,     7,   255,     6,     0,
    49,    37,   174,   246,   175,     7,   255,     6,     0,    37,
    59,   174,   246,   175,     7,   255,     6,     0,    79,   174,
   246,   175,     7,   255,     6,     0,    80,   174,   246,   175,
     7,   255,    84,   255,    81,   246,     6,     0,    37,   180,
   246,   181,     6,     0,    45,    38,   174,   246,   175,     7,
   255,     6,     0,   139,    38,   174,   246,   175,     7,   180,
   246,   179,   255,   181,     6,     0,    46,    38,   174,   246,
   175,     7,   255,     6,     0,    80,    38,    82,    83,   174,
   246,   175,     7,   253,    84,   180,   255,   179,   255,   181,
    81,   180,   246,   179,   246,   181,     6,     0,    80,    38,
   174,   246,   175,     7,   253,    84,   180,   255,   179,   255,
   181,    81,   180,   246,   179,   246,   181,     6,     0,    49,
    38,   174,   246,   175,     7,   255,     6,     0,    38,    59,
   174,   246,   175,     7,   255,     6,     0,    38,   180,   246,
   181,     6,     0,    48,    40,   174,   246,   175,     7,   255,
     6,     0,    40,   174,   246,   175,     7,   255,     6,     0,
    49,    40,   174,   246,   175,     7,   255,     6,     0,    54,
   249,   180,   233,   181,     0,    53,   180,   249,   179,   249,
   179,   246,   181,   180,   233,   181,     0,    55,   249,   180,
   233,   181,     0,    56,   180,   249,   179,   246,   181,   180,
   233,   181,     0,   235,     0,   234,     0,   232,     0,     0,
   234,   231,     0,    58,   180,   234,   181,     0,    61,   180,
   234,   181,     0,    61,    64,   176,   246,   177,     6,     0,
    61,    95,     6,     0,     4,   260,     6,     0,     4,   246,
     6,     0,    91,     6,     0,    33,     6,     0,    86,   174,
   246,     8,   246,   175,     0,    86,   174,   246,     8,   246,
     8,   246,   175,     0,    86,     4,    87,   180,   246,     8,
   246,   181,     0,    86,     4,    87,   180,   246,     8,   246,
     8,   246,   181,     0,    88,     0,    94,     4,     0,    92,
     0,    93,     4,     6,     0,    89,   174,   246,   175,     0,
    90,     0,    57,    34,   180,   246,   179,   249,   181,     6,
     0,    57,    34,   180,   246,   179,   249,   179,   249,   179,
   246,   181,     6,     0,    57,    37,   180,   246,   179,   249,
   181,     6,     0,    57,    37,   180,   246,   179,   249,   179,
   249,   179,   246,   181,     6,     0,    57,    38,   180,   246,
   179,   249,   181,     6,     0,    57,    38,   180,   246,   179,
   249,   179,   249,   179,   246,   181,     6,     0,    57,    38,
   180,   246,   179,   249,   181,   180,   240,   181,     6,     0,
    57,    38,   180,   246,   179,   249,   179,   249,   179,   246,
   181,   180,   240,   181,     6,     0,   241,     0,   240,   241,
     0,    66,   180,   255,   179,   255,   179,   255,   181,     6,
     0,    60,     6,     0,    47,    37,   255,     7,   246,     6,
     0,    47,    37,   255,     7,   246,    50,    52,   246,     6,
     0,    47,    37,   255,     7,   246,    50,    51,   246,     6,
     0,    47,    38,   180,   246,   181,     7,   255,     6,     0,
    44,    38,   180,   246,   181,     7,   255,     6,     0,    47,
    40,   180,   246,   181,     7,   255,     6,     0,    60,    38,
   255,     7,   246,     6,     0,    60,    38,   255,     6,     0,
    62,     6,     0,    63,     6,     0,     3,     0,   164,     3,
     0,    99,     0,   100,     0,   101,     0,   102,     0,   103,
     0,   247,     0,   174,   246,   175,     0,   164,   246,     0,
   163,   246,     0,   169,   246,     0,   246,   164,   246,     0,
   246,   163,   246,     0,   246,   165,   246,     0,   246,   166,
   246,     0,   246,   167,   246,     0,   246,   173,   246,     0,
   246,   159,   246,     0,   246,   161,   246,     0,   246,   160,
   246,     0,   246,   162,   246,     0,   246,   156,   246,     0,
   246,   157,   246,     0,   246,   155,   246,     0,   246,   154,
   246,     0,   246,   153,   246,     8,   246,     0,    10,   174,
   246,   175,     0,    11,   174,   246,   175,     0,    12,   174,
   246,   175,     0,    13,   174,   246,   175,     0,    14,   174,
   246,   175,     0,    15,   174,   246,   175,     0,    16,   174,
   246,   175,     0,    17,   174,   246,   175,     0,    18,   174,
   246,   175,     0,    20,   174,   246,   175,     0,    21,   174,
   246,   179,   246,   175,     0,    22,   174,   246,   175,     0,
    23,   174,   246,   175,     0,    24,   174,   246,   175,     0,
    25,   174,   246,   175,     0,    26,   174,   246,   175,     0,
    27,   174,   246,   175,     0,    28,   174,   246,   179,   246,
   175,     0,    29,   174,   246,   179,   246,   175,     0,    30,
   174,   246,   179,   246,   175,     0,    19,   174,   246,   175,
     0,     3,     0,     9,     0,     4,     0,     4,   176,   246,
   177,     0,     4,   170,     0,     4,   176,   246,   177,   170,
     0,     4,   171,     0,     4,   176,   246,   177,   171,     0,
     4,   178,     4,     0,     4,   178,    64,   176,   246,   177,
   178,     4,     0,     4,   178,     4,   170,     0,     4,   178,
    64,   176,   246,   177,   178,     4,   170,     0,     4,   178,
     4,   171,     0,     4,   178,    64,   176,   246,   177,   178,
     4,   171,     0,   246,     8,   246,     0,   246,     8,   246,
     8,   246,     0,   250,     0,   164,   249,     0,   163,   249,
     0,   249,   164,   249,     0,   249,   163,   249,     0,   180,
   246,   179,   246,   179,   246,   179,   246,   179,   246,   181,
     0,   180,   246,   179,   246,   179,   246,   179,   246,   181,
     0,   180,   246,   179,   246,   179,   246,   181,     0,   174,
   246,   179,   246,   179,   246,   175,     0,     0,   174,   252,
   175,     0,     5,     0,   252,   179,     5,     0,     0,   180,
   254,   181,     0,   174,   254,   175,     0,   255,     0,   254,
   179,   255,     0,     0,   246,     0,     4,   176,   177,     0,
   180,   256,   181,     0,   246,     0,   248,     0,     4,   176,
   177,     0,   256,   179,   246,     0,   256,   179,   248,     0,
   256,   179,     4,   176,   177,     0,   180,   246,   179,   246,
   179,   246,   179,   246,   181,     0,   180,   246,   179,   246,
   179,   246,   181,     0,   180,     4,   179,   246,   181,     0,
     4,     0,     4,   178,    85,   178,     4,     0,   180,   259,
   181,     0,     4,   178,    64,   176,   246,   177,   178,    85,
     0,   257,     0,   259,   179,   257,     0,     5,     0,    32,
   174,     5,   175,     0,    32,   174,     5,   179,   256,   175,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   148,   150,   151,   152,   159,   167,   181,   193,   195,   198,
   200,   201,   204,   210,   215,   216,   217,   220,   224,   227,
   233,   238,   244,   252,   257,   261,   267,   272,   276,   281,
   285,   288,   293,   297,   301,   305,   310,   314,   317,   321,
   325,   329,   333,   337,   341,   344,   348,   351,   355,   358,
   367,   371,   377,   379,   380,   381,   382,   383,   384,   385,
   386,   387,   388,   389,   392,   398,   427,   432,   438,   443,
   444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
   454,   457,   460,   464,   470,   476,   479,   483,   489,   495,
   498,   502,   508,   514,   517,   521,   529,   535,   538,   542,
   550,   556,   559,   563,   571,   577,   580,   584,   596,   602,
   605,   609,   621,   627,   630,   634,   646,   652,   655,   659,
   672,   678,   681,   685,   698,   704,   707,   711,   724,   736,
   752,   764,   773,   785,   793,   805,   813,   825,   833,   845,
   853,   865,   877,   896,   909,   927,   944,   965,   982,  1003,
  1020,  1041,  1058,  1079,  1100,  1126,  1143,  1164,  1181,  1204,
  1217,  1242,  1253,  1259,  1278,  1289,  1297,  1303,  1309,  1328,
  1334,  1350,  1357,  1363,  1369,  1375,  1381,  1400,  1412,  1418,
  1437,  1458,  1466,  1472,  1478,  1484,  1496,  1502,  1508,  1520,
  1526,  1531,  1536,  1543,  1545,  1546,  1549,  1554,  1565,  1583,
  1591,  1595,  1606,  1658,  1677,  1681,  1702,  1718,  1732,  1757,
  1782,  1808,  1814,  1819,  1824,  1828,  1838,  1844,  1850,  1854,
  1858,  1862,  1866,  1871,  1878,  1882,  1887,  1905,  1915,  1933,
  1950,  1967,  1988,  2008,  2028,  2045,  2069,  2074,  2085,  2087,
  2090,  2092,  2093,  2094,  2095,  2098,  2100,  2101,  2102,  2103,
  2104,  2105,  2106,  2107,  2114,  2115,  2116,  2117,  2118,  2119,
  2120,  2121,  2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,
  2130,  2131,  2132,  2133,  2134,  2135,  2136,  2137,  2138,  2139,
  2140,  2141,  2142,  2143,  2144,  2145,  2150,  2155,  2159,  2171,
  2189,  2201,  2219,  2231,  2251,  2272,  2296,  2317,  2341,  2362,
  2387,  2394,  2407,  2414,  2418,  2422,  2426,  2431,  2436,  2440,
  2444,  2450,  2454,  2459,  2463,  2468,  2472,  2476,  2482,  2488,
  2494,  2498,  2504,  2519,  2526,  2532,  2541,  2553,  2557,  2565,
  2578,  2583,  2587,  2592,  2597,  2615,  2620,  2641,  2650,  2656,
  2661,  2665
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tView","tAttractor","tLayers","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarLine","tVectorLine","tTensorLine","tScalarPoint","tVectorPoint",
"tTensorPoint","tBSpline","tNurbs","tOrder","tWith","tBounds","tKnots","tColor",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Command","Loop","Extrude",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","SignedDouble",
"BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor",
"StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   185,   185,   186,   186,   186,   186,   186,   187,   187,   187,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   189,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   191,   191,   192,   192,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   196,   195,   197,   197,   199,   198,   200,
   200,   202,   201,   203,   203,   205,   204,   206,   206,   208,
   207,   209,   209,   211,   210,   212,   212,   214,   213,   215,
   215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
   222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   231,   231,   231,   231,   231,   231,   232,
   232,   232,   232,   233,   233,   233,   234,   234,   235,   236,
   236,   236,   237,   237,   237,   237,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   239,   239,   239,   239,
   239,   239,   239,   239,   240,   240,   241,   241,   242,   242,
   242,   242,   242,   242,   242,   242,   243,   243,   244,   244,
   245,   245,   245,   245,   245,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   247,   247,   247,   247,
   247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   248,   248,   249,   249,   249,   249,   249,   250,   250,   250,
   250,   251,   251,   252,   252,   253,   253,   253,   254,   254,
   255,   255,   255,   255,   256,   256,   256,   256,   256,   256,
   257,   257,   257,   257,   257,   258,   258,   259,   259,   260,
   260,   260
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,    21,     1,     0,     2,     1,
     1,     1,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     4,
     7,     3,     6,     3,     6,     4,     7,     4,     7,     4,
     7,     4,     7,     6,    11,     6,    11,     6,    11,     6,
    11,     6,    11,     6,    11,     5,    11,     5,    11,     8,
    11,     7,     8,    12,     6,     5,     7,     7,    12,     7,
     9,    17,     7,     8,     8,     7,    11,     5,     8,    12,
     8,    22,    20,     8,     8,     5,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     4,     4,
     6,     3,     3,     3,     2,     2,     6,     8,     8,    10,
     1,     2,     1,     3,     4,     1,     8,    12,     8,    12,
     8,    12,    11,    15,     1,     2,     9,     2,     6,     9,
     9,     8,     8,     8,     6,     4,     2,     2,     1,     2,
     1,     1,     1,     1,     1,     1,     3,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     5,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     4,
     2,     5,     2,     5,     3,     8,     4,     9,     4,     9,
     3,     5,     1,     2,     2,     3,     3,    11,     9,     7,
     7,     0,     3,     1,     3,     0,     3,     3,     1,     3,
     0,     1,     3,     3,     1,     1,     3,     3,     3,     5,
     9,     7,     5,     1,     5,     3,     8,     1,     3,     1,
     4,     6
};

static const short yydefact[] = {     0,
     0,     5,     7,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    12,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   211,     0,   216,     0,   213,
     0,     0,     0,    52,    54,    53,    55,    56,    57,    58,
    59,    64,    63,    60,    61,    62,   239,     0,     0,     0,
    13,    14,    16,    15,    17,   312,   312,     0,   287,   289,
   340,     0,   288,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   246,     0,
     0,   206,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   321,     0,     0,     0,     0,   321,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   303,     0,     0,     0,     0,     0,   197,   321,
     0,     0,   197,   237,   238,     0,   321,   321,     0,     0,
     0,     0,     0,     0,   205,     0,   212,     0,   240,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   291,   293,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   249,   248,   250,   132,   134,
     0,     0,     0,     0,     0,   204,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   203,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   289,     0,   322,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   305,   304,     0,     0,     0,     0,   197,   197,     0,
     0,     0,     0,     0,     0,     0,   202,     0,     0,    69,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   214,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   314,     0,     0,     0,     0,     0,   295,     0,
   130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,   138,   140,   142,   247,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
   263,   261,   262,   257,   259,   258,   260,   252,   251,   253,
   254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   289,   325,   326,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   307,   306,   196,
     0,   195,   194,     0,     0,     0,     0,     0,   199,   198,
   236,     0,     0,   200,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   215,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
    19,     0,   290,   297,   299,     0,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   286,   275,     0,   277,   278,
   279,   280,   281,   282,     0,     0,     0,   341,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   156,   158,     0,     0,     0,    65,     0,     0,
   166,   321,   321,     0,   321,   178,     0,   186,   321,   321,
   323,     0,     0,     0,   324,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   192,     0,     0,     0,     0,     0,     0,    69,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,     0,     0,   321,     0,     0,
   321,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   321,   321,     0,     0,     0,     0,
   321,   321,     0,     0,     0,     0,     0,   321,     0,   321,
     0,     0,     0,     0,     0,   315,     0,   312,   292,   294,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   133,   135,   144,   146,   148,   150,   152,   154,     0,
     0,   265,     0,     0,     0,     0,   321,     0,   321,     0,
     0,   327,   301,   289,   328,   329,   165,     0,   321,   321,
   321,   229,     0,   321,   321,   321,   321,   321,   321,   321,
     0,     0,     0,     0,     0,     0,     0,   235,   201,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    67,     0,     0,     0,     0,   316,     0,     0,
     0,   207,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   241,   242,   243,
   244,   245,     0,     0,     0,     0,     0,     0,     0,    18,
     0,     0,   276,   283,   284,   285,   342,   131,   137,   139,
   141,   143,     0,   334,     0,     0,    66,   162,   170,     0,
   173,     0,   167,     0,   168,   188,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   197,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   176,     0,   321,   321,
     0,   321,     0,     0,     0,     0,     0,     0,   321,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
     0,     0,     0,     0,     0,     0,   312,     0,     0,     0,
     0,   289,     0,   160,     0,   175,   185,   302,   330,     0,
   233,   179,   181,     0,     0,   232,   234,   187,   163,   174,
   184,   189,     0,   311,     0,   310,     0,     0,   217,     0,
   219,     0,   221,     0,    68,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   316,
     0,   319,     0,     0,     0,     0,   209,   208,     0,     0,
     0,     0,     0,    21,     0,    30,     0,    34,     0,    28,
     0,     0,    33,     0,    38,    36,     0,     0,     0,     0,
     0,     0,    45,     0,     0,     0,     0,     0,    50,     0,
     0,   296,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   171,     0,   231,   230,   197,     0,   193,
     0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   318,   321,   317,   321,     0,     0,   321,     0,
     0,   316,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   321,     0,     0,     0,     0,     0,
     0,     0,   298,   300,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   309,     0,     0,     0,   228,   321,     0,   226,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   320,     0,     0,   210,     0,     0,
    35,     0,     0,     0,     0,    25,     0,    31,     0,    37,
    26,    39,     0,    42,     0,    46,    47,     0,     0,    49,
     0,     0,   145,   147,   149,   151,   153,   155,   157,   159,
     0,   338,     0,   161,   335,   333,     0,     0,   191,     0,
     0,     0,     0,     0,   223,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
   321,   177,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   336,     0,
     0,   308,   218,   220,   222,     0,   321,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    84,    88,    92,   164,
   169,     0,     0,   180,     0,     0,     0,     0,     0,    29,
    32,    40,     0,    41,    48,    43,     0,     0,   339,     0,
   332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   321,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    27,     0,
     0,     0,   331,     0,   224,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    82,     0,    86,     0,
    90,     0,     0,     0,     0,   321,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    44,    20,   337,   172,   227,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    83,    85,    87,    89,    91,
    93,     0,     0,     0,     0,   321,     0,     0,     0,     0,
     0,     0,    96,   100,   104,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     6,   321,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   183,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    94,     0,    98,     0,   102,     0,
   321,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   182,     0,    22,     0,     0,     0,
     0,     0,     0,    95,    97,    99,   101,   103,   105,   321,
     0,     0,     0,   108,   112,   116,     0,     0,     0,     0,
     0,     0,     0,   321,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   106,     0,   110,     0,   114,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   107,   109,   111,   113,   115,   117,
     0,   120,   124,   128,    23,     0,     0,     0,     0,     0,
     0,     0,   118,     0,   122,     0,   126,     0,     0,     0,
     0,     0,     0,   119,   121,   123,   125,   127,   129,     0,
     0,     0
};

static const short yydefgoto[] = {  1540,
     5,     6,    19,    20,    21,    22,     7,    64,    65,    66,
   486,  1316,   634,  1264,  1318,   635,  1265,  1320,   636,  1266,
  1424,   637,  1397,  1426,   638,  1398,  1428,   639,  1399,  1485,
   640,  1471,  1487,   641,  1472,  1489,   642,  1473,  1522,   643,
  1516,  1524,   644,  1517,  1526,   645,  1518,    67,   480,   470,
   471,   472,   473,    71,    72,    73,    74,  1036,  1037,    75,
    76,    79,   803,   297,   129,   450,   162,   163,   222,   374,
   881,   971,   972,   451,   826,  1095,  1163,   130
};

static const short yypact[] = {  2444,
    80,-32768,-32768,  -114,-32768,   118,  2562,-32768,    20,    94,
   111,   130,   137,   153,   195,   -50,    32,    57,-32768,-32768,
-32768,-32768,   659,    68,   255,   -48,    93,   142,   -49,   -45,
   155,   212,   259,   231,   368,   394,   395,   454,   398,   114,
   174,   100,   100,   265,    28,   295,   464,   -31,   480,   481,
   302,   206,   329,   -33,    11,-32768,   340,-32768,   513,-32768,
   511,   519,   486,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   528,    20,  2600,
-32768,-32768,-32768,-32768,-32768,   361,   361,   541,-32768,   271,
-32768,    31,-32768,   375,   391,   392,   393,   403,   432,   471,
   472,   474,   475,   476,   477,   478,   479,   483,   484,   485,
   487,   491,   493,   516,   530,    31,    31,    31,    31,    31,
    31,    31,   607,   608,    31,    31,    21,   254,-32768,   616,
   627,-32768,    31,    31,    31,    31,   532,    31,    31,   534,
    31,    31,    31,   321,    31,   529,   536,   537,   321,   533,
   542,   538,   540,   543,   547,   549,   100,   100,   100,    31,
    31,   -96,-32768,   -93,   100,   544,   545,   546,-32768,   321,
   551,   648,-32768,-32768,-32768,    -2,   321,   321,    31,   -65,
    31,   568,    31,    31,-32768,   654,-32768,   566,-32768,    20,
   567,   571,   572,   597,   603,   629,   630,   631,   638,   639,
   642,   643,   650,   651,   652,   653,   658,   660,   662,   664,
   665,   666,   667,   668,   669,   671,   673,   675,   676,   677,
   711,   563,   679,   678,-32768,-32768,    31,    24,   434,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
   850,   619,   634,   975,  1051,   683,   683,   683,-32768,-32768,
  5436,  5286,   120,   682,   681,-32768,    31,    31,    31,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,-32768,   -75,  5459,  2644,  5482,  5505,    31,  5528,  2667,
    31,  2690,  5551,  5574,   350,  1614,  1207,   853,  5597,    31,
    31,    31,   854,    31,    31,    31,    31,    31,    31,    31,
   -74,-32768,-32768,  2415,  2520,   100,   100,   505,   505,   -35,
    31,    31,    31,  1256,   269,    31,-32768,  2392,   100,-32768,
   869,   870,  5620,   795,    31,  5643,   699,  2129,  5666,-32768,
    31,   736,   880,   881,   882,   883,   900,   901,   905,   906,
   907,   910,   911,   913,   914,   915,   916,   918,   919,   920,
   921,   922,   923,   924,   925,   799,   927,   940,   941,   942,
   947,   946,-32768,    23,   971,   972,   974,  5311,  -133,   776,
-32768,  5689,  5712,  5735,  5758,  5781,  5804,  5827,  5850,  5873,
  5896,  5919,  3081,  5942,  5965,  5988,  6011,  6034,  6057,  3102,
  3123,  3144,    87,-32768,-32768,-32768,-32768,-32768,   143,  1160,
    31,    31,    31,    31,   976,   977,    31,   973,  2192,   735,
   707,   345,   345,   316,   316,   316,   316,   378,   378,   683,
   683,   683,   683,   978,  1614,   979,   981,   982,   990,  6080,
   991,   995,  6103,   996,   997,   998,   353,   377,  2213,-32768,
   247,    31,   999,  2713,  6126,  6149,    31,  2736,  2759,  6172,
  6195,  6218,  6241,  6264,   100,    31,    31,-32768,-32768,-32768,
   804,  2623,-32768,   807,    31,  3165,  3186,  3207,-32768,-32768,
-32768,    31,  5336,-32768,   -72,     5,   800,   823,  1000,   837,
  6287,  1005,    31,    31,-32768,  6310,   867,   835,   836,   838,
   839,   840,   842,   843,   844,   845,   847,   851,   852,   856,
   857,   858,   859,   860,   861,   862,   864,   865,   866,   868,
   872,   873,   877,   885,   886,   887,   888,-32768,  1011,   874,
-32768,   889,   222,-32768,-32768,    31,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    31,-32768,-32768,
-32768,-32768,-32768,-32768,    31,    31,    31,-32768,  1614,    31,
    31,    31,    31,    31,  1023,  1026,  1027,  1076,  1268,  1326,
  1573,  1588,-32768,-32768,  5361,  1041,    31,-32768,   127,   100,
-32768,   321,   321,  1052,   321,-32768,  1053,-32768,   321,   321,
-32768,   740,    31,  1642,-32768,  1695,   890,  1054,  1055,  1062,
   419,  1064,  1065,  1066,  1067,  1068,  1069,  1070,   221,  3228,
  3249,-32768,-32768,  2782,   100,   100,   100,  1710,  1073,-32768,
   909,   912,   926,   928,   929,   930,   931,   932,   933,   936,
   937,   938,  1074,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    31,    31,   321,    31,  1077,
   321,  2237,   301,  1078,   939,  1096,    31,    31,   100,  1098,
  1110,   950,  1113,  1114,   321,   321,  1115,   100,  1117,  1118,
   321,   321,  1120,  1121,  1122,  1123,  1130,   321,   509,   321,
  1140,  1141,  1142,  1146,  1147,-32768,  1139,   361,-32768,-32768,
  5386,  6333,  6356,  6379,  6402,   140,  1725,  1750,  1783,  1804,
  1825,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   980,
    -1,  1207,  1145,    26,    18,  1148,   321,  1149,   321,  1150,
  1151,-32768,  2252,   386,  2213,-32768,-32768,    31,   321,   321,
   321,-32768,   237,   321,   321,   321,   321,   321,   321,   321,
    31,    31,    31,   986,   -24,   147,   267,-32768,-32768,   625,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,    31,-32768,  3270,  3291,  1153,  6425,    13,  1083,    31,
    31,-32768,  1012,    20,   983,  3312,  3333,    66,  1014,   985,
  1015,  1016,  1030,  1044,  1042,  1043,   133,  1047,  1045,  1048,
  1071,  1072,  1075,  1091,  1092,  1093,  1059,-32768,-32768,-32768,
-32768,-32768,  1094,  1097,  1099,  1100,  1101,  1080,  1102,-32768,
  1104,  1106,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    22,  1107,  1670,  1155,-32768,-32768,-32768,   100,
-32768,  1238,-32768,  1239,-32768,-32768,    31,   945,  3354,  1240,
  1241,  1242,    31,    31,  1246,  1247,  1250,  1269,  1271,  1280,
  1281,  2805,  6448,  2156,   505,   100,  1282,   100,  1283,   100,
     1,  1292,  3375,  3396,  3417,  3438,  3459,  3480,  3501,  3522,
  3543,  3564,  3585,  3606,    31,    31,-32768,  1296,   321,   321,
  1222,   321,    10,  6471,    31,    20,  1304,    31,   321,  1302,
  1316,  1319,   987,  1320,   509,  1321,  1325,    31,  1324,  1328,
  1327,  1331,  1335,   509,    31,    31,    31,   321,  1333,  1337,
   509,    31,  1338,  1339,  1340,    31,   361,  1341,   252,  1336,
  1259,   182,  3627,-32768,    33,-32768,-32768,  1207,-32768,    31,
-32768,-32768,-32768,  1840,  1887,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1167,-32768,    31,-32768,  1170,   272,-32768,   309,
-32768,   314,-32768,   102,-32768,    31,    31,    31,    31,    31,
    31,    31,    31,    31,    31,    31,    31,  3648,  3669,    13,
   180,-32768,   258,  1168,  1272,    31,-32768,-32768,  3690,    20,
  1177,  3711,  1186,-32768,  1196,-32768,  1197,-32768,  1203,-32768,
  1200,  6494,-32768,  1202,-32768,-32768,  1216,  1217,  6517,  3732,
  6540,  1214,-32768,  1219,  1221,  3753,  1218,  1223,-32768,  3774,
  1220,   227,  1548,    31,    31,    31,    31,    31,    31,     0,
  1224,    31,    31,-32768,  3795,-32768,-32768,   505,  2586,-32768,
    31,    31,    31,  1394,  1225,   -47,-32768,  3816,  3837,  3858,
  3879,  3900,  3921,  3942,  3963,  3984,  4005,  4026,  4047,    31,
    31,  1317,-32768,   321,-32768,   321,    31,  2828,   321,  1261,
  1398,    13,   509,  1403,    31,  1401,   509,  1402,  1406,  1411,
  1413,  1420,    31,  1430,   321,  1436,  1437,    31,  1441,  1439,
    31,  1442,-32768,-32768,  1440,  1915,  1946,  1967,  2004,  2019,
  2050,  2077,  1270,    -1,  1443,  1446,  2851,  4068,  1455,  1286,
    31,-32768,  2874,  2897,  2920,-32768,   321,  1445,-32768,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,  2943,  2966,  1284,-32768,  1289,  2108,-32768,  1294,    20,
-32768,  1298,  1299,  1305,  4089,-32768,  1287,-32768,  1288,-32768,
-32768,-32768,  6563,-32768,  1315,-32768,-32768,  6586,  1329,-32768,
  6609,  1322,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1089,-32768,   317,-32768,-32768,-32768,    31,  1323,-32768,  2989,
  1467,  1489,     2,  1332,-32768,  4110,  4131,  4152,  4173,  4194,
  4215,  4236,  4257,  4278,  6632,  6655,  6678,  1494,  1497,   321,
   321,-32768,  1500,    20,   509,   509,   509,   509,  1502,  1504,
  1506,   509,  1507,  1508,  1509,  1511,  1342,    -1,-32768,  2615,
  1512,-32768,-32768,-32768,-32768,   102,   321,    31,    31,    31,
    31,    31,    31,    31,    31,    31,-32768,-32768,-32768,-32768,
-32768,  1343,  1344,-32768,    20,  1347,  1349,  1345,  1346,-32768,
-32768,-32768,  1350,-32768,-32768,-32768,  1351,    31,-32768,    31,
-32768,  1352,   -39,  1353,  4299,  4320,  4341,  4362,  4383,  4404,
  4425,  4446,  4467,  1354,  1355,  1356,   321,  1438,  1381,   509,
   509,  1527,  1531,   509,  1533,  5411,  3012,  1534,  1537,   321,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,    31,  1359,  1364,    20,  1366,  1367,-32768,-32768,  1374,
  1375,  1377,-32768,  1399,-32768,  1400,  4488,  4509,  4530,  4551,
  4572,  4593,  4614,  4635,  4656,   318,  1207,   371,  1207,   436,
  1207,  1501,    31,    20,   509,   321,  1577,  1578,  1503,  1579,
  1580,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,  1581,    31,  1583,    31,  1584,  1412,  4677,    20,  1417,
  1418,-32768,-32768,-32768,-32768,-32768,  4698,  4719,  4740,  4761,
  4782,  4803,  6701,  6724,  6747,  1207,-32768,  1207,-32768,  1207,
-32768,    31,    31,  1444,   509,   321,    31,    31,    31,    31,
    31,    31,-32768,-32768,-32768,  4824,  3035,  1450,  1421,  1422,
  4845,  4866,  4887,  4908,  4929,  4950,  1419,  1423,  1424,    31,
  1596,-32768,   321,   509,    31,    31,    31,    31,    31,    31,
    31,    31,    31,  3058,-32768,  1429,  1434,  4971,  4992,  5013,
  5034,  5055,  5076,   439,  1207,   440,  1207,   448,  1207,  1613,
   321,  1615,    31,    31,    31,    31,    31,    31,    31,  1616,
    31,  1641,    31,  1643,-32768,  1469,-32768,  5097,  5118,  5139,
  6770,  6793,  6816,  1207,-32768,  1207,-32768,  1207,-32768,   321,
    31,    31,    31,-32768,-32768,-32768,  1471,  5160,  5181,  5202,
  1495,  1496,  1498,   321,    31,    31,    31,    31,    31,    31,
  1523,  5223,  5244,  5265,   449,  1207,   452,  1207,   457,  1207,
   509,    31,    31,    31,    31,  1671,    31,  1697,    31,  1698,
  1530,  6839,  6862,  6885,  1207,-32768,  1207,-32768,  1207,-32768,
  1700,-32768,-32768,-32768,-32768,  1528,  1529,  1535,    31,    31,
    31,   458,  1207,   462,  1207,   463,  1207,    31,  1701,    31,
  1704,    31,  1707,  1207,-32768,  1207,-32768,  1207,-32768,  1620,
  1714,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1103,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1711,  1712,
  -313,    30,  1713,-32768,-32768,-32768,-32768,   508, -1025,-32768,
-32768,   -67,  -875,   -23,-32768,  1127,   -12,-32768,   -86,-32768,
  -948,   879,   876,  -426, -1078,-32768,-32768,-32768
};


#define	YYLAST		7060


static const short yytable[] = {   128,
   223,   329,   824,  1093,   180,   474,   953,  1215,   579,   137,
  1109,   190,  1034,   140,   182,  1162,   334,   976,  1035,   989,
  1034,  1052,    77,   829,   263,   919,  1035,   379,   998,     9,
   164,   828,   171,    89,    90,  1005,   534,   535,  1024,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   166,   830,   172,   167,   168,   316,   317,   229,   316,
   317,   621,   622,   623,   624,   625,   626,   627,   628,   629,
   630,   631,   632,   318,   264,     8,   319,   380,   316,   317,
   316,   317,   252,   253,   254,   255,   256,   257,   258,   434,
    80,   261,   262,   435,   465,   265,   920,   620,   335,   284,
   285,   286,   287,  1132,   289,   290,    81,   292,   293,   294,
    10,   299,   342,    86,   138,   133,   410,   316,   317,  1249,
   139,   134,   696,  1108,   141,    82,   314,   315,   316,   317,
   181,  1279,    83,   475,   311,   312,   313,   153,   173,   560,
   154,   155,   320,   156,   856,   333,   857,   336,    84,   338,
   339,  1034,   267,   268,   269,   270,   271,  1035,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   330,   825,  1094,
   954,  1216,   281,    78,   183,   633,   879,  1133,   316,   317,
   977,  1137,   880,   120,   121,   316,   317,   528,   324,   122,
    85,   529,   328,   378,   125,    87,   382,   383,   384,   385,
   386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
   396,   397,   398,   399,   400,   401,   402,  1109,   316,   317,
    88,    11,    12,    13,    14,    15,    16,    17,    18,   177,
   890,   131,   178,   419,   420,   421,   422,   423,   424,   425,
   426,   427,   428,   429,   430,   431,   432,   433,  1013,   266,
   132,   558,   158,   159,   440,   559,   135,   443,   411,   412,
   413,   414,   449,   160,   481,   482,   454,   455,   456,   161,
   458,   459,   460,   461,   462,   463,   464,   843,   844,   415,
   416,   561,   562,   563,   564,   316,   317,   476,   477,   478,
   144,   713,   483,   468,   469,   594,   176,   899,   771,   316,
   317,   491,   565,   566,   817,   136,   485,   496,   594,  1236,
  1237,  1238,  1239,    89,   295,   858,  1243,   859,   142,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   225,   226,   157,  1053,    89,    90,   227,  1054,   228,
  1022,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   316,   317,   143,   568,   569,   570,   571,
   572,   689,   690,   575,  1296,  1297,  1083,  1084,  1300,   741,
  1014,  1015,  1016,  1017,   145,   146,   267,   268,   269,   270,
   271,   449,   272,   273,   274,   275,   276,   277,   278,   279,
   280,  1018,  1019,   378,   732,   594,   281,   595,   596,   316,
   317,   147,   148,   601,   316,   317,  1054,   152,  1055,   381,
   225,   226,   610,   611,   165,   860,   227,   861,   228,  1350,
  1031,   614,   609,   267,   268,   269,   270,   271,   618,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   733,   652,
   653,   316,   317,   281,   169,   772,   316,   317,   276,   277,
   278,   279,   280,   120,   121,   174,   175,  1032,   281,   122,
   149,   150,  1033,   151,   125,  1208,  1341,  1209,  1342,  1389,
   296,   170,   179,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   691,   184,   186,   120,   121,   281,   185,   225,
   226,   122,   187,   188,   692,   447,   125,   228,  1417,   591,
   189,   693,   694,   695,   221,   449,   697,   698,   699,   700,
   701,   947,   278,   279,   280,   224,   225,   226,   230,  1343,
   281,  1344,   592,   712,   228,   225,   226,    41,    42,    43,
    44,   838,    46,   228,   231,   232,   233,   714,   378,   723,
   725,   267,   268,   269,   270,   271,   234,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   267,   268,   269,   270,
   271,   281,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   811,   745,   746,   747,   235,   281,   798,   799,   800,
   801,   802,   259,   260,  1345,  1501,  1346,  1439,  1441,  1440,
  1442,   282,   764,   765,   404,   767,  1443,  1495,  1444,  1496,
  1497,   283,  1498,   776,   777,  1499,  1528,  1500,  1529,   405,
  1530,  1532,  1531,  1533,   236,   237,   778,   238,   239,   240,
   241,   242,   243,   327,   337,   787,   244,   245,   246,   340,
   247,    89,    90,    91,   248,    92,   249,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   250,
   115,   621,   622,   623,   624,   625,   626,   627,   628,   629,
   630,   631,   632,   251,   839,   288,   886,   291,   300,   301,
   302,   306,   304,   307,  1100,   373,   308,   852,   853,   854,
   309,   305,   310,   321,   322,   323,   326,   863,   864,   865,
   866,   867,   868,   869,   870,   871,   872,   873,   874,   341,
   343,   375,    89,    90,   344,   345,   883,   884,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   346,   267,   268,   269,   270,   271,   347,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   267,   268,   269,   270,
   271,   281,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   923,   348,   349,   350,   862,   281,   116,   117,   118,
   119,   351,   352,   928,   378,   353,   354,   925,   980,   934,
   935,   120,   121,   355,   356,   357,   358,   122,   123,   124,
  1011,   359,   125,   360,   126,   361,   127,   362,   363,   364,
   365,   366,   367,   948,   368,   950,   369,   952,   370,   371,
   372,   968,   969,   376,   403,   281,   377,   417,   418,   452,
   457,   979,   270,   271,   982,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   992,   487,   488,   490,   493,   281,
   497,   999,  1000,  1001,   498,   499,   500,   501,  1006,   269,
   270,   271,  1010,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   120,   121,   502,   503,  1025,   281,   122,   504,
   505,   506,  1060,   125,   507,   508,   722,   509,   510,   511,
   512,  1029,   513,   514,   515,   516,   517,   518,   519,   520,
   521,   522,  1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,
  1046,  1047,  1048,  1049,   523,   524,   525,    89,    90,   526,
   527,   536,  1058,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   530,   576,   531,   532,   646,
   406,   573,   574,   578,   612,   580,   581,   613,   582,  1086,
  1087,  1088,  1089,  1090,  1091,  1092,   583,   585,  1097,  1098,
   586,   588,   647,   589,   590,   597,   648,  1103,  1104,  1105,
   649,   651,   655,   656,   657,   686,   658,   659,   660,   298,
   661,   662,   663,   664,   303,   665,  1122,  1123,   702,   666,
   667,   703,   704,  1127,   668,   669,   670,   671,   672,   673,
   674,  1135,   675,   676,   677,   325,   678,   711,   687,  1143,
   679,   680,   331,   332,  1148,   681,   407,  1151,   717,   719,
   729,   730,  1194,   682,   683,   684,   685,   688,   731,   728,
   734,   735,   736,   737,   738,   739,   740,  1170,   749,   763,
   774,   705,   751,   768,   773,   752,  1176,  1177,  1178,  1179,
  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,   775,   753,
   779,   754,   755,   756,   757,   758,   759,   120,   121,   760,
   761,   762,   780,   122,   781,   782,   783,   786,   125,   788,
   789,   929,   792,   793,   794,   795,  1235,   267,   268,   269,
   270,   271,   796,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   805,  1210,   810,   806,   807,   281,   808,   809,
   827,   987,  1207,   831,   833,   835,   836,   823,   877,   892,
   924,   887,    89,    90,   567,   855,   882,  1269,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   894,   885,   891,   893,  1255,  1256,  1257,  1258,  1259,  1260,
  1261,  1262,  1263,   267,   268,   269,   270,   271,   895,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   896,   901,
   897,   898,   902,   281,  1276,   900,  1277,  1324,   267,   268,
   269,   270,   271,   909,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   926,   927,   931,   932,   933,   281,   903,
   904,   936,   937,   905,   915,   938,  1349,  1307,  1308,  1309,
  1310,  1311,  1312,  1313,  1314,  1315,  1317,  1319,  1321,   906,
   907,   908,   910,   706,   939,   911,   940,   912,   913,   914,
   916,  1374,   917,   918,   921,   941,   942,   949,   951,    26,
    27,    28,    29,    30,    31,    32,    33,   955,    34,  1348,
    36,    37,   970,    39,    40,   974,   981,   984,  1357,  1358,
  1359,  1360,  1361,  1362,  1363,  1364,  1365,  1366,   985,  1368,
    52,  1370,   120,   121,   986,   988,   990,   991,   122,   993,
   994,   707,   995,   125,    53,    54,   996,   997,  1003,  1004,
  1007,  1008,  1020,  1021,  1012,  1009,  1028,  1056,  1386,  1387,
  1030,  1061,  1057,  1391,  1392,  1393,  1394,  1395,  1396,   267,
   268,   269,   270,   271,  1063,   272,   273,   274,   275,   276,
   277,   278,   279,   280,  1064,  1065,  1414,  1066,  1067,   281,
  1069,  1418,  1419,  1420,  1421,  1422,  1423,  1425,  1427,  1429,
  1070,  1071,  1075,  1076,    63,  1077,  1079,  1080,  1082,  1106,
  1124,  1096,  1130,  1131,  1107,  1134,  1136,  1138,  1139,  1448,
  1449,  1450,  1451,  1452,  1453,  1454,  1140,  1456,  1141,  1458,
   267,   268,   269,   270,   271,  1142,   272,   273,   274,   275,
   276,   277,   278,   279,   280,  1144,   479,  1468,  1469,  1470,
   281,  1146,  1147,  1149,  1150,  1153,  1152,  1161,  1164,  1165,
  1175,  1482,  1483,  1484,  1486,  1488,  1490,   715,   716,  1168,
   718,  1199,  1200,  1190,   720,   721,  1169,  1191,  1502,  1503,
  1504,  1505,  1213,  1507,  1193,  1509,  1195,  1196,   267,   268,
   269,   270,   271,  1197,   272,   273,   274,   275,   276,   277,
   278,   279,   280,  1202,  1214,  1523,  1525,  1527,   281,  1230,
  1206,  1211,  1231,  1204,  1534,  1234,  1536,  1240,  1538,  1241,
  1217,  1242,  1244,  1245,  1246,  1247,  1252,  1248,  1294,  1272,
  1273,  1267,  1295,   766,  1268,  1270,   769,  1271,  1274,  1275,
  1278,  1280,  1298,  1290,  1291,  1292,  1299,  1301,  1304,  1322,
   784,   785,  1305,  1323,  1325,  1326,   790,   791,  1327,  1328,
    89,    90,  1085,   797,  1329,   804,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   708,  1330,
  1331,  1347,  1352,  1353,  1355,  1356,  1367,  1354,  1369,  1371,
  1388,  1372,   832,   709,   834,  1375,  1376,  1402,  1411,  1403,
  1404,  1415,  1412,  1413,   840,   841,   842,  1431,  1432,   845,
   846,   847,   848,   849,   850,   851,    89,   448,  1445,  1541,
  1447,  1455,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,    89,   724,  1457,  1460,  1459,  1474,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,    89,   922,  1478,  1479,  1506,  1480,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   727,  1491,  1508,  1510,  1511,  1515,  1535,  1519,  1520,  1537,
   120,   121,  1539,  1542,  1521,   748,   122,    68,    69,    70,
   726,   125,   750,  1253,     0,   267,   268,   269,   270,   271,
   818,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   267,   268,   269,   270,   271,   281,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   819,     0,   975,   973,     0,
   281,     0,     0,     0,   983,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   120,   121,     0,     0,
     0,     0,   122,  1002,     0,     0,     0,   125,   820,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   120,   121,     0,     0,     0,   821,
   122,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   822,     0,   120,   121,     0,     0,     0,     0,   122,     0,
     0,     0,     0,   125,     0,  1026,     0,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   267,   268,   269,   270,   271,   281,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   267,   268,   269,
   270,   271,   281,   272,   273,   274,   275,   276,   277,   278,
   279,   280,  1027,     0,     0,     0,     0,   281,     0,     0,
     0,     0,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
  1154,     0,   281,     0,     0,     0,     0,     0,     0,  1125,
     0,  1126,     0,     0,  1129,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
  1145,  1155,     0,     0,     0,   281,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,  1156,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1174,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   267,   268,   269,   270,   271,   281,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,  1157,
     0,     0,   281,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,  1159,     0,     0,     0,   281,
     0,     0,     0,     0,     0,  1232,  1233,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,  1160,     0,     0,     0,     0,   281,     0,     0,
     0,     0,  1254,     0,     0,     0,     0,     0,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,  1192,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,   494,     0,     0,   281,
     0,     0,  1293,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1306,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   267,   268,   269,   270,   271,   281,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,     0,     0,     0,     0,     0,     0,   577,
     0,  1351,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
   593,     0,   281,     0,     0,     0,     0,     0,     0,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   770,     0,     0,     0,     0,   281,
     0,  1390,     0,     0,     0,     0,     0,     0,     0,   837,
   267,   268,   269,   270,   271,     0,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,  1416,     0,
   281,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,     0,     0,     0,  1446,     0,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
     0,     0,     0,     0,   945,  1467,   946,     0,     0,     0,
     0,     0,     0,     0,   267,   268,   269,   270,   271,  1481,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,     0,     0,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   267,   268,   269,   270,   271,   281,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,     0,    36,    37,     0,    39,
    40,     0,     0,    -8,     1,     0,    -8,   -51,     0,     0,
     0,     0,     0,     0,     0,     0,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,    54,     0,     0,   -51,     0,   -51,   -51,   -51,   -51,
   -51,   -51,   -51,   -51,   -51,     0,   -51,   -51,   -51,   -51,
   -51,   -51,   -51,     0,     0,     0,   -51,   -51,   -51,   -51,
   -51,   -51,     0,   -51,   -51,   -51,   -51,   -51,   -51,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   -51,   -51,     0,     0,     0,     0,     0,   -51,
    63,   -51,   -51,   -51,   -51,   -51,   -51,   -51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    -8,    -8,    -8,
    -8,    -8,    -8,    -8,    -8,    23,     0,   267,   268,   269,
   270,   271,   484,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   -51,     2,     3,     0,     4,   281,     0,     0,
     0,     0,    24,   466,    25,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
    40,     0,     0,     0,    41,    42,    43,    44,    45,    46,
     0,    47,    48,    49,    50,    51,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   191,     0,     0,     0,
    53,    54,     0,     0,     0,     0,     0,    55,     0,    56,
    57,    58,    59,    60,    61,    62,    26,    27,    28,    29,
    30,    31,    32,    33,     0,    34,     0,    36,    37,     0,
    39,    40,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,    52,     0,     0,
     0,     0,   281,     0,     0,   192,   193,   194,   467,     0,
    63,    53,    54,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,     0,     0,     0,     0,     0,     0,     0,
     0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,     0,   215,   216,   217,   218,   219,   220,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
     0,    63,     0,     0,  1101,     0,  1102,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,     0,
     0,     0,     0,  1250,     0,  1251,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,     0,   267,
   268,   269,   270,   271,   437,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,     0,   267,   268,   269,   270,   271,   442,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,     0,   267,   268,   269,   270,   271,
   444,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,     0,   267,   268,
   269,   270,   271,   598,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
     0,   267,   268,   269,   270,   271,   602,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,     0,   267,   268,   269,   270,   271,   603,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,     0,   267,   268,   269,
   270,   271,   744,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,     0,
   267,   268,   269,   270,   271,   943,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,     0,   267,   268,   269,   270,   271,  1128,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,     0,   267,   268,   269,   270,
   271,  1166,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,     0,   267,
   268,   269,   270,   271,  1171,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,     0,   267,   268,   269,   270,   271,  1172,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,     0,   267,   268,   269,   270,   271,
  1173,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,     0,   267,   268,
   269,   270,   271,  1188,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
     0,   267,   268,   269,   270,   271,  1189,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,     0,   267,   268,   269,   270,   271,  1212,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,     0,   267,   268,   269,
   270,   271,  1303,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,     0,
   267,   268,   269,   270,   271,  1401,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,     0,   267,   268,   269,   270,   271,  1430,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,   548,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
   555,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,   556,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,   557,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,   615,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,   616,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,   617,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,   742,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,   743,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,   875,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,   876,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
   888,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,   889,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,   930,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,   956,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,   957,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,   958,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,   959,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,   960,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,   961,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,   962,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
   963,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,   964,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,   965,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,   966,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,   967,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1023,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1050,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1051,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1059,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1062,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1073,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1078,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1081,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1099,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,  1110,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1111,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1112,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1113,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1114,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1115,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1116,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1117,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1118,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1119,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,  1120,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1121,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1167,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1198,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1218,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1219,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1220,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1221,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1222,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1223,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,  1224,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1225,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1226,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1281,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1282,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1283,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1284,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1285,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1286,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1287,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,  1288,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1289,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1332,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1333,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1334,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1335,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1336,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1337,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1338,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1339,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,  1340,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1373,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1377,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1378,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1379,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1380,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1381,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1382,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1400,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1405,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,  1406,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1407,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1408,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1409,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1410,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1433,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1434,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1435,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1436,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1437,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,   267,
   268,   269,   270,   271,  1438,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
   267,   268,   269,   270,   271,  1461,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,   267,   268,   269,   270,   271,  1462,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,   267,   268,   269,   270,   271,  1463,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,   267,   268,   269,   270,   271,  1475,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,   267,   268,   269,   270,   271,  1476,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,   267,   268,   269,   270,   271,
  1477,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,   267,   268,   269,   270,
   271,  1492,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,   267,   268,   269,
   270,   271,  1493,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,   267,   268,
   269,   270,   271,  1494,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
     0,     0,   409,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,     0,     0,   533,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
     0,     0,   619,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,     0,     0,   710,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
     0,     0,   812,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,     0,     0,  1302,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
   408,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,   436,   267,   268,   269,   270,   271,     0,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,   438,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,   439,
   267,   268,   269,   270,   271,     0,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,   441,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,   445,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,   446,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,   453,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,   489,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,   492,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
   495,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,   537,   267,   268,   269,   270,   271,     0,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,   538,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,   539,
   267,   268,   269,   270,   271,     0,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,   540,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,   541,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,   542,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,   543,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,   544,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,   545,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
   546,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,   547,   267,   268,   269,   270,   271,     0,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,   549,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,   550,
   267,   268,   269,   270,   271,     0,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,   551,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,   552,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,   553,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,   554,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,   584,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,   587,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
   599,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,   600,   267,   268,   269,   270,   271,     0,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,   604,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,   605,
   267,   268,   269,   270,   271,     0,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,   606,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,   607,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,   608,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,   650,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,   654,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,   813,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
   814,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,   815,   267,   268,   269,   270,   271,     0,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,   816,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,   878,
   267,   268,   269,   270,   271,     0,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,   944,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,   978,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,  1068,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,  1072,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,  1074,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,  1201,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
  1203,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,  1205,   267,   268,   269,   270,   271,     0,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,  1227,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,  1228,
   267,   268,   269,   270,   271,     0,   272,   273,   274,   275,
   276,   277,   278,   279,   280,     0,     0,     0,     0,     0,
   281,     0,  1229,   267,   268,   269,   270,   271,     0,   272,
   273,   274,   275,   276,   277,   278,   279,   280,     0,     0,
     0,     0,     0,   281,     0,  1383,   267,   268,   269,   270,
   271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
   280,     0,     0,     0,     0,     0,   281,     0,  1384,   267,
   268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
   277,   278,   279,   280,     0,     0,     0,     0,     0,   281,
     0,  1385,   267,   268,   269,   270,   271,     0,   272,   273,
   274,   275,   276,   277,   278,   279,   280,     0,     0,     0,
     0,     0,   281,     0,  1464,   267,   268,   269,   270,   271,
     0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     0,     0,     0,     0,     0,   281,     0,  1465,   267,   268,
   269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
   278,   279,   280,     0,     0,     0,     0,     0,   281,     0,
  1466,   267,   268,   269,   270,   271,     0,   272,   273,   274,
   275,   276,   277,   278,   279,   280,     0,     0,     0,     0,
     0,   281,     0,  1512,   267,   268,   269,   270,   271,     0,
   272,   273,   274,   275,   276,   277,   278,   279,   280,     0,
     0,     0,     0,     0,   281,     0,  1513,   267,   268,   269,
   270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
   279,   280,     0,     0,     0,     0,     0,   281,     0,  1514
};

static const short yycheck[] = {    23,
    87,     4,     4,     4,    38,   319,     6,     6,   435,    59,
  1036,    79,    60,    59,     4,  1094,    82,     8,    66,   895,
    60,   970,     3,     6,     4,     4,    66,     4,   904,   144,
    43,     6,    64,     3,     4,   911,   170,   171,     6,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    34,    45,    95,    37,    38,   163,   164,    92,   163,
   164,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,   180,    64,     6,   180,    64,   163,   164,
   163,   164,   116,   117,   118,   119,   120,   121,   122,   175,
     7,   125,   126,   179,   179,    85,    85,   180,   174,   133,
   134,   135,   136,  1062,   138,   139,     6,   141,   142,   143,
     3,   145,   190,   174,   174,   174,     7,   163,   164,  1208,
   180,   180,   559,   181,   180,     6,   160,   161,   163,   164,
   174,   181,     6,   179,   157,   158,   159,    34,   180,     7,
    37,    38,   165,    40,   179,   179,   181,   181,     6,   183,
   184,    60,   153,   154,   155,   156,   157,    66,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   180,   180,   180,
   180,   180,   173,   164,   174,   181,   174,  1063,   163,   164,
   181,  1067,   180,   163,   164,   163,   164,   175,   169,   169,
     6,   179,   173,   227,   174,   174,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,  1253,   163,   164,
   174,   114,   115,   116,   117,   118,   119,   120,   121,    34,
   175,   174,    37,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,     7,     6,
     6,   175,   163,   164,   288,   179,   174,   291,   149,   150,
   151,   152,   296,   174,     6,     7,   300,   301,   302,   180,
   304,   305,   306,   307,   308,   309,   310,    51,    52,   170,
   171,   149,   150,   151,   152,   163,   164,   321,   322,   323,
    42,   175,   326,   316,   317,   179,     5,   175,     8,   163,
   164,   335,   170,   171,   175,   174,   329,   341,   179,  1195,
  1196,  1197,  1198,     3,     4,   179,  1202,   181,   174,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   170,   171,   180,   175,     3,     4,   176,   179,   178,
   179,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   163,   164,   174,   410,   411,   412,   413,
   414,   170,   171,   417,  1270,  1271,   170,   171,  1274,   179,
   149,   150,   151,   152,   174,    38,   153,   154,   155,   156,
   157,   435,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   170,   171,   447,     6,   179,   173,   181,   452,   163,
   164,    38,    38,   457,   163,   164,   179,    40,   181,     6,
   170,   171,   466,   467,   180,   179,   176,   181,   178,  1325,
   179,   475,   465,   153,   154,   155,   156,   157,   482,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    50,   493,
   494,   163,   164,   173,   180,   175,   163,   164,   163,   164,
   165,   166,   167,   163,   164,     6,     6,   179,   173,   169,
    37,    38,   179,    40,   174,   179,   179,   181,   181,  1375,
   180,    38,   174,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   536,   174,     4,   163,   164,   173,     6,   170,
   171,   169,     4,    38,   548,   176,   174,   178,  1404,   177,
     3,   555,   556,   557,   174,   559,   560,   561,   562,   563,
   564,   855,   165,   166,   167,     5,   170,   171,   174,   179,
   173,   181,   176,   577,   178,   170,   171,    53,    54,    55,
    56,   176,    58,   178,   174,   174,   174,   580,   592,   593,
   594,   153,   154,   155,   156,   157,   174,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   153,   154,   155,   156,
   157,   173,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   688,   615,   616,   617,   174,   173,    99,   100,   101,
   102,   103,     6,     6,   179,  1491,   181,   179,   179,   181,
   181,     6,   646,   647,     6,   649,   179,   179,   181,   181,
   179,     5,   181,   657,   658,   179,   179,   181,   181,     6,
   179,   179,   181,   181,   174,   174,   659,   174,   174,   174,
   174,   174,   174,     6,    87,   668,   174,   174,   174,     6,
   174,     3,     4,     5,   174,     7,   174,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   174,
    32,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,   174,   728,   174,   774,   174,   180,   174,
   174,   174,   180,   174,  1028,     5,   174,   741,   742,   743,
   174,   180,   174,   180,   180,   180,   176,   751,   752,   753,
   754,   755,   756,   757,   758,   759,   760,   761,   762,   174,
   174,   179,     3,     4,   174,   174,   770,   771,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
   174,   153,   154,   155,   156,   157,   174,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   153,   154,   155,   156,
   157,   173,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   825,   174,   174,   174,   181,   173,   149,   150,   151,
   152,   174,   174,   837,   838,   174,   174,   830,   886,   843,
   844,   163,   164,   174,   174,   174,   174,   169,   170,   171,
   917,   174,   174,   174,   176,   174,   178,   174,   174,   174,
   174,   174,   174,   856,   174,   858,   174,   860,   174,   174,
   174,   875,   876,   175,     5,   173,   179,   176,   178,     7,
     7,   885,   156,   157,   888,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   898,     7,     7,    83,   180,   173,
   145,   905,   906,   907,     5,     5,     5,     5,   912,   155,
   156,   157,   916,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   163,   164,     5,     5,   930,   173,   169,     5,
     5,     5,   980,   174,     5,     5,   177,     5,     5,     5,
     5,   945,     5,     5,     5,     5,     5,     5,     5,     5,
   132,     5,   956,   957,   958,   959,   960,   961,   962,   963,
   964,   965,   966,   967,     5,     5,     5,     3,     4,     3,
     5,   176,   976,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,     5,     4,     6,     5,   180,
     6,     6,     6,     6,   181,     7,     6,   181,     7,  1013,
  1014,  1015,  1016,  1017,  1018,  1019,     7,     7,  1022,  1023,
     6,     6,   180,     7,     7,     7,     7,  1031,  1032,  1033,
   174,     7,   146,   179,   179,     5,   179,   179,   179,   144,
   179,   179,   179,   179,   149,   179,  1050,  1051,     6,   179,
   179,     6,     6,  1057,   179,   179,   179,   179,   179,   179,
   179,  1065,   179,   179,   179,   170,   179,     7,   175,  1073,
   179,   179,   177,   178,  1078,   179,     6,  1081,     7,     7,
     7,     7,  1130,   179,   179,   179,   179,   179,     7,   180,
     7,     7,     7,     7,     7,     7,     7,  1101,     6,     6,
   142,     6,   174,     7,     7,   174,  1110,  1111,  1112,  1113,
  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,     3,   174,
     3,   174,   174,   174,   174,   174,   174,   163,   164,   174,
   174,   174,     3,   169,   165,     3,     3,     3,   174,     3,
     3,   177,     3,     3,     3,     3,  1194,   153,   154,   155,
   156,   157,     3,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     3,  1167,     6,     5,     5,   173,     3,     3,
     6,   165,    64,     6,     6,     6,     6,   178,     6,   175,
     6,   179,     3,     4,     5,   180,    84,  1235,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
   175,   180,   179,   179,  1218,  1219,  1220,  1221,  1222,  1223,
  1224,  1225,  1226,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   175,   175,
   179,   179,   175,   173,  1248,   179,  1250,  1295,   153,   154,
   155,   156,   157,   175,   159,   160,   161,   162,   163,   164,
   165,   166,   167,     6,     6,     6,     6,     6,   173,   179,
   179,     6,     6,   179,   175,     6,  1324,  1281,  1282,  1283,
  1284,  1285,  1286,  1287,  1288,  1289,  1290,  1291,  1292,   179,
   179,   179,   179,     6,     6,   179,     6,   179,   179,   179,
   179,  1349,   179,   178,   178,     6,     6,     6,     6,    34,
    35,    36,    37,    38,    39,    40,    41,     6,    43,  1323,
    45,    46,     7,    48,    49,    84,     3,     6,  1332,  1333,
  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,     3,  1343,
    65,  1345,   163,   164,     6,     6,     6,     3,   169,     6,
     3,     6,     6,   174,    79,    80,     6,     3,     6,     3,
     3,     3,     7,    85,     4,     6,   180,   180,  1372,  1373,
   181,   175,    81,  1377,  1378,  1379,  1380,  1381,  1382,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   179,   179,  1400,   175,   179,   173,
   179,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
   175,   175,   179,   175,   139,   175,   179,   175,   179,     6,
    84,   178,   142,     6,   180,     3,     6,     6,     3,  1433,
  1434,  1435,  1436,  1437,  1438,  1439,     6,  1441,     6,  1443,
   153,   154,   155,   156,   157,     6,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     6,   181,  1461,  1462,  1463,
   173,     6,     6,     3,     6,     6,     5,   178,     6,     4,
     6,  1475,  1476,  1477,  1478,  1479,  1480,   582,   583,     5,
   585,   175,   175,   180,   589,   590,   181,   179,  1492,  1493,
  1494,  1495,     6,  1497,   181,  1499,   179,   179,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   179,     6,  1519,  1520,  1521,   173,     6,
   179,   179,     6,   175,  1528,     6,  1530,     6,  1532,     6,
   179,     6,     6,     6,     6,     5,     5,   176,    81,   175,
   175,   179,   142,   648,   181,   179,   651,   179,   179,   179,
   179,   179,     6,   180,   180,   180,     6,     5,     5,   181,
   665,   666,     6,   180,   179,   179,   671,   672,   175,   175,
     3,     4,     5,   678,   178,   680,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     6,   181,
   181,    81,     6,     6,     6,     6,     6,    85,     6,     6,
   147,   180,   717,     6,   719,   179,   179,   148,   180,   179,
   179,     6,   180,   180,   729,   730,   731,   179,   175,   734,
   735,   736,   737,   738,   739,   740,     3,     4,     6,     0,
     6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     3,     4,     6,   179,     6,   179,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,     3,     4,   180,   180,     6,   180,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     6,   179,     6,     6,   175,     6,     6,   180,   180,     6,
   163,   164,     6,     0,   180,     6,   169,     7,     7,     7,
   594,   174,   620,  1216,    -1,   153,   154,   155,   156,   157,
     6,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   153,   154,   155,   156,   157,   173,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     6,    -1,   882,   880,    -1,
   173,    -1,    -1,    -1,   889,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,    -1,
    -1,    -1,   169,   908,    -1,    -1,    -1,   174,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   163,   164,    -1,    -1,    -1,     6,
   169,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,    -1,   163,   164,    -1,    -1,    -1,    -1,   169,    -1,
    -1,    -1,    -1,   174,    -1,     6,    -1,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   153,   154,   155,   156,   157,   173,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   153,   154,   155,
   156,   157,   173,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     6,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
     6,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,  1054,
    -1,  1056,    -1,    -1,  1059,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
  1075,     6,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,     6,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,  1107,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   153,   154,   155,   156,   157,   173,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,     6,
    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,     6,    -1,    -1,    -1,   173,
    -1,    -1,    -1,    -1,    -1,  1190,  1191,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     6,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,    -1,  1217,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,     6,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,     8,    -1,    -1,   173,
    -1,    -1,  1267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1280,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   153,   154,   155,   156,   157,   173,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    -1,  1326,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
     8,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,     8,    -1,    -1,    -1,    -1,   173,
    -1,  1376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,  1403,    -1,
   173,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,    -1,  1431,    -1,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,    -1,    -1,   179,  1460,   181,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,  1474,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   153,   154,   155,   156,   157,   173,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    34,    35,    36,    37,    38,
    39,    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,
    49,    -1,    -1,     0,     1,    -1,     3,     4,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    79,    80,    -1,    -1,    31,    -1,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    44,    45,    46,
    47,    48,    49,    -1,    -1,    -1,    53,    54,    55,    56,
    57,    58,    -1,    60,    61,    62,    63,    64,    65,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,
   139,    88,    89,    90,    91,    92,    93,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,
   117,   118,   119,   120,   121,     4,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   139,   140,   141,    -1,   143,   173,    -1,    -1,
    -1,    -1,    31,   179,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
    49,    -1,    -1,    -1,    53,    54,    55,    56,    57,    58,
    -1,    60,    61,    62,    63,    64,    65,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    -1,    88,
    89,    90,    91,    92,    93,    94,    34,    35,    36,    37,
    38,    39,    40,    41,    -1,    43,    -1,    45,    46,    -1,
    48,    49,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    65,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    96,    97,    98,   179,    -1,
   139,    79,    80,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,   133,   134,   135,   136,   137,   138,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   139,    -1,    -1,   179,    -1,   181,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,   181,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 152 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 161 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 6:
#line 175 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 7:
#line 182 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 10:
#line 199 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 200 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 201 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 206 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 211 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 222 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 225 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 229 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 235 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 241 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 248 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 254 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 258 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 262 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 269 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 273 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 278 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 282 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 286 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 290 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 294 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 298 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 302 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 306 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 315 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 318 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 322 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 326 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 330 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 334 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 339 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 342 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 353 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 356 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 369 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 372 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 394 "Gmsh.y"
{
      fprintf(stderr, yyvsp[-2].c); 
      fprintf(stderr, "\n"); 
    ;
    break;}
case 66:
#line 399 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  fprintf(stderr, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring, "%");
	  strcat(tmpstring, str);
	  fprintf(stderr, tmpstring, *(double*)List_Pointer(ListOfDouble_L,i)); 
	}
	else{
	  fprintf(stderr, "\n"); 
	  vyyerror("Missing %d Parameter(s) in Printf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      if(!yyerrorstate)
	fprintf(stderr, "\n"); 
    ;
    break;}
case 67:
#line 429 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 68:
#line 433 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 69:
#line 440 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 82:
#line 459 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 461 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 466 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 471 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 478 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 480 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 485 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 490 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 497 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 499 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 504 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 509 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 516 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 518 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 524 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 530 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 537 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 539 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 545 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 551 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 558 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 560 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 566 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 572 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 579 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 581 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 588 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 597 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 604 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 606 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 613 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 622 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 629 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 631 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 638 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 647 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 654 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 656 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 664 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 673 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 680 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 682 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 690 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 699 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 706 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 708 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 716 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 725 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 741 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-1].d);
      }
    ;
    break;}
case 131:
#line 753 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
      }
    ;
    break;}
case 132:
#line 765 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else{
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0 ;
      }
    ;
    break;}
case 133:
#line 774 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 134:
#line 786 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1. ;
    ;
    break;}
case 135:
#line 794 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd -= 1.0 ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 136:
#line 806 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 814 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd += yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 138:
#line 826 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) -= yyvsp[-1].d ;
    ;
    break;}
case 139:
#line 834 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd -= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 140:
#line 846 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) *= yyvsp[-1].d ;
    ;
    break;}
case 141:
#line 854 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	  *pd *= yyvsp[-1].d ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
      }
    ;
    break;}
case 142:
#line 866 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-3].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	else
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) /= yyvsp[-1].d ;
      }
    ;
    break;}
case 143:
#line 878 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
      else{
	TheSymbol.Name = yyvsp[-6].c ;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
	else{
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d)))
	    *pd /= yyvsp[-1].d ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 144:
#line 897 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 145:
#line 910 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 146:
#line 928 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 945 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 966 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 983 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 1004 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1021 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1042 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1059 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1080 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	  vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	else{
	  if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	    vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 155:
#line 1101 "Gmsh.y"
{
      if(!yyvsp[-1].d)
	vyyerror("Division by Zero in '%s.View[%d].%s /= %g'", 
		 yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
      else{
	if(strcmp(yyvsp[-10].c, "PostProcessing"))
	  vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
	else{
	  if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	    if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	    else      vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			       yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	  }
	  else{
	    switch(i){
	    case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	    case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	    case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	    case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	    }
	  }
	}
      }
    ;
    break;}
case 156:
#line 1127 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1144 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1165 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1182 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1205 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1218 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 162:
#line 1247 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1254 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1260 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1279 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 166:
#line 1290 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 167:
#line 1298 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1304 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1310 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1329 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1335 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 172:
#line 1352 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 173:
#line 1358 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1364 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1370 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1376 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 177:
#line 1382 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 178:
#line 1401 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 179:
#line 1413 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1419 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 181:
#line 1438 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 182:
#line 1461 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 183:
#line 1469 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 184:
#line 1473 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1479 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1485 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 187:
#line 1497 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 188:
#line 1503 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1509 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1522 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1527 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1532 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1537 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1544 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1545 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1546 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 197:
#line 1551 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 198:
#line 1555 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 199:
#line 1567 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 200:
#line 1585 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 201:
#line 1592 "Gmsh.y"
{
	FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 202:
#line 1596 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 203:
#line 1608 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;
	strcpy(tmpstring, ThePathForIncludes);
	if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,yyvsp[-1].c);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){

	if(!CTX.interactive) CreateFile(yyvsp[-1].c, CTX.print.format);

      }
      else if(!strcmp(yyvsp[-2].c, "Save")){

	CreateFile(yyvsp[-1].c, CTX.mesh.format);

      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing System Call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 204:
#line 1659 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	Maillage_Dimension_0(THEM);
	mai3d(THEM,(int)yyvsp[-1].d);
  
      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 205:
#line 1678 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 206:
#line 1682 "Gmsh.y"
{
      if(!CTX.interactive){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Init();
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 207:
#line 1705 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 208:
#line 1719 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 209:
#line 1733 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 210:
#line 1758 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 211:
#line 1783 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 212:
#line 1809 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 213:
#line 1815 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 214:
#line 1820 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 215:
#line 1825 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 216:
#line 1829 "Gmsh.y"
{
    ;
    break;}
case 217:
#line 1840 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 218:
#line 1845 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 219:
#line 1851 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 220:
#line 1855 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 221:
#line 1859 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 222:
#line 1863 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 223:
#line 1867 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 224:
#line 1872 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 225:
#line 1880 "Gmsh.y"
{
    ;
    break;}
case 226:
#line 1883 "Gmsh.y"
{
    ;
    break;}
case 227:
#line 1889 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 228:
#line 1906 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 229:
#line 1917 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 230:
#line 1934 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 231:
#line 1951 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 232:
#line 1968 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 233:
#line 1989 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 234:
#line 2009 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 235:
#line 2029 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 236:
#line 2046 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 237:
#line 2071 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 238:
#line 2075 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 239:
#line 2086 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 240:
#line 2087 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 241:
#line 2091 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 242:
#line 2092 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 243:
#line 2093 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 244:
#line 2094 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 245:
#line 2095 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 246:
#line 2099 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 247:
#line 2100 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 248:
#line 2101 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 249:
#line 2102 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 250:
#line 2103 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 251:
#line 2104 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 252:
#line 2105 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 253:
#line 2106 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 254:
#line 2108 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 255:
#line 2114 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 256:
#line 2115 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 257:
#line 2116 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 258:
#line 2117 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 259:
#line 2118 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 260:
#line 2119 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 261:
#line 2120 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 262:
#line 2121 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 263:
#line 2122 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 264:
#line 2123 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 265:
#line 2124 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 266:
#line 2125 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 267:
#line 2126 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2127 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 269:
#line 2128 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2129 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 271:
#line 2130 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2131 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 273:
#line 2132 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2133 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 275:
#line 2134 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2135 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 277:
#line 2136 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2137 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2138 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2139 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2140 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 282:
#line 2141 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 283:
#line 2142 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 284:
#line 2143 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 285:
#line 2144 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 286:
#line 2145 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 287:
#line 2154 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 288:
#line 2155 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 289:
#line 2160 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
      }
      //      Free($1);
    ;
    break;}
case 290:
#line 2172 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
      //Free($1);
    ;
    break;}
case 291:
#line 2190 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += 1.0) ;
      }
      //Free($1);
    ;
    break;}
case 292:
#line 2202 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      //Free($1);
    ;
    break;}
case 293:
#line 2220 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else{
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) -= 1.0) ;
      }
      //Free($1);
    ;
    break;}
case 294:
#line 2232 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd -= 1.0) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
      //Free($1);
    ;
    break;}
case 295:
#line 2252 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 296:
#line 2273 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 297:
#line 2297 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 298:
#line 2318 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 299:
#line 2342 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 300:
#line 2363 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing")){
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 301:
#line 2389 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 302:
#line 2395 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 303:
#line 2409 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
      //??? Avec ce qui suit, bison se plante sur DEC
      //for(i=0 ; i<5 ; i++) $$[i] = $1[i];
    ;
    break;}
case 304:
#line 2415 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 305:
#line 2419 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 306:
#line 2423 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 307:
#line 2427 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 308:
#line 2433 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 309:
#line 2437 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 310:
#line 2441 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 311:
#line 2445 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 312:
#line 2452 "Gmsh.y"
{
    ;
    break;}
case 313:
#line 2455 "Gmsh.y"
{
    ;
    break;}
case 314:
#line 2461 "Gmsh.y"
{
    ;
    break;}
case 315:
#line 2464 "Gmsh.y"
{
    ;
    break;}
case 316:
#line 2470 "Gmsh.y"
{
    ;
    break;}
case 317:
#line 2473 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 318:
#line 2477 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 319:
#line 2484 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 320:
#line 2489 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 321:
#line 2496 "Gmsh.y"
{
    ;
    break;}
case 322:
#line 2499 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 323:
#line 2505 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(ListOfDouble_L, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 324:
#line 2520 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 325:
#line 2528 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 326:
#line 2533 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 327:
#line 2542 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 328:
#line 2554 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 329:
#line 2558 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 330:
#line 2566 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(ListOfDouble_L, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 331:
#line 2580 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 332:
#line 2584 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 333:
#line 2588 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 334:
#line 2593 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 335:
#line 2598 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 336:
#line 2617 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 337:
#line 2621 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 338:
#line 2643 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 339:
#line 2651 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 340:
#line 2658 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 341:
#line 2662 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 342:
#line 2666 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(ListOfDouble_L) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(ListOfDouble_L,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Sprintf Format",
		   List_Nbr(ListOfDouble_L)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc(strlen(tmpstring)+1);
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2690 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


