
/*  A Bison parser, made from Gmsh.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	258
#define	tSTRING	259
#define	tBIGSTR	260
#define	tEND	261
#define	tAFFECT	262
#define	tDOTS	263
#define	tPi	264
#define	tExp	265
#define	tLog	266
#define	tLog10	267
#define	tSqrt	268
#define	tSin	269
#define	tAsin	270
#define	tCos	271
#define	tAcos	272
#define	tTan	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tDraw	286
#define	tSleep	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tInclude	314
#define	tRecombine	315
#define	tDelete	316
#define	tCoherence	317
#define	tView	318
#define	tAttractor	319
#define	tLayers	320
#define	tScalarTetrahedron	321
#define	tVectorTetrahedron	322
#define	tTensorTetrahedron	323
#define	tScalarTriangle	324
#define	tVectorTriangle	325
#define	tTensorTriangle	326
#define	tScalarLine	327
#define	tVectorLine	328
#define	tTensorLine	329
#define	tScalarPoint	330
#define	tVectorPoint	331
#define	tTensorPoint	332
#define	tBSpline	333
#define	tNurbs	334
#define	tOrder	335
#define	tWith	336
#define	tBounds	337
#define	tKnots	338
#define	tColor	339
#define	tFor	340
#define	tEndFor	341
#define	tScript	342
#define	tExit	343
#define	tMerge	344
#define	tB_SPLINE_SURFACE_WITH_KNOTS	345
#define	tB_SPLINE_CURVE_WITH_KNOTS	346
#define	tCARTESIAN_POINT	347
#define	tTRUE	348
#define	tFALSE	349
#define	tUNSPECIFIED	350
#define	tU	351
#define	tV	352
#define	tEDGE_CURVE	353
#define	tVERTEX_POINT	354
#define	tORIENTED_EDGE	355
#define	tPLANE	356
#define	tFACE_OUTER_BOUND	357
#define	tEDGE_LOOP	358
#define	tADVANCED_FACE	359
#define	tVECTOR	360
#define	tDIRECTION	361
#define	tAXIS2_PLACEMENT_3D	362
#define	tISO	363
#define	tENDISO	364
#define	tENDSEC	365
#define	tDATA	366
#define	tHEADER	367
#define	tFILE_DESCRIPTION	368
#define	tFILE_SCHEMA	369
#define	tFILE_NAME	370
#define	tMANIFOLD_SOLID_BREP	371
#define	tCLOSED_SHELL	372
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	373
#define	tFACE_BOUND	374
#define	tCYLINDRICAL_SURFACE	375
#define	tCONICAL_SURFACE	376
#define	tCIRCLE	377
#define	tTRIMMED_CURVE	378
#define	tGEOMETRIC_SET	379
#define	tCOMPOSITE_CURVE_SEGMENT	380
#define	tCONTINUOUS	381
#define	tCOMPOSITE_CURVE	382
#define	tTOROIDAL_SURFACE	383
#define	tPRODUCT_DEFINITION	384
#define	tPRODUCT_DEFINITION_SHAPE	385
#define	tSHAPE_DEFINITION_REPRESENTATION	386
#define	tELLIPSE	387
#define	tTrimmed	388
#define	tSolid	389
#define	tEndSolid	390
#define	tVertex	391
#define	tFacet	392
#define	tNormal	393
#define	tOuter	394
#define	tLoopSTL	395
#define	tEndLoop	396
#define	tEndFacet	397
#define	tAND	398
#define	tOR	399
#define	tNOTEQUAL	400
#define	tEQUAL	401
#define	tAPPROXEQUAL	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tLESSOREQUAL	407
#define	tGREATEROREQUAL	408
#define	tCROSSPRODUCT	409
#define	UNARYPREC	410
#define	tPLUSPLUS	411
#define	tMINUSMINUS	412

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.25 2000-12-07 09:21:34 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 59 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1484
#define	YYFLAG		-32768
#define	YYNTBASE	176

#define YYTRANSLATE(x) ((unsigned)(x) <= 412 ? yytranslate[x] : 252)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   164,     2,     2,     2,   161,     2,     2,   168,
   170,   159,   157,   169,   158,   173,   160,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   153,
     2,   154,   143,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   174,     2,   175,   165,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   171,     2,   172,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   155,   156,   162,   163,
   166,   167
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   525,   533,   540,   549,
   550,   553,   556,   559,   562,   565,   568,   571,   574,   577,
   580,   583,   586,   588,   592,   593,   607,   609,   613,   614,
   628,   630,   634,   635,   649,   651,   655,   656,   676,   678,
   682,   683,   703,   705,   709,   710,   730,   732,   736,   737,
   763,   765,   769,   770,   796,   798,   802,   803,   829,   831,
   835,   836,   868,   870,   874,   875,   907,   909,   913,   914,
   946,   951,   955,   959,   964,   969,   974,   979,   986,   998,
  1005,  1017,  1024,  1036,  1043,  1055,  1062,  1074,  1081,  1093,
  1099,  1111,  1117,  1129,  1136,  1148,  1155,  1167,  1174,  1186,
  1195,  1203,  1212,  1225,  1232,  1238,  1246,  1254,  1267,  1275,
  1285,  1303,  1311,  1320,  1329,  1337,  1349,  1355,  1364,  1374,
  1383,  1406,  1427,  1436,  1445,  1451,  1460,  1468,  1477,  1483,
  1495,  1501,  1511,  1513,  1515,  1517,  1518,  1521,  1526,  1531,
  1535,  1539,  1542,  1546,  1549,  1553,  1560,  1569,  1571,  1580,
  1593,  1602,  1615,  1624,  1637,  1649,  1665,  1667,  1670,  1680,
  1683,  1690,  1700,  1710,  1719,  1728,  1737,  1744,  1749,  1752,
  1754,  1756,  1758,  1760,  1762,  1764,  1768,  1771,  1774,  1777,
  1781,  1785,  1789,  1793,  1797,  1801,  1805,  1809,  1813,  1817,
  1821,  1825,  1829,  1833,  1839,  1844,  1849,  1854,  1859,  1864,
  1869,  1874,  1879,  1884,  1889,  1896,  1901,  1906,  1911,  1916,
  1921,  1926,  1933,  1940,  1947,  1949,  1951,  1953,  1957,  1966,
  1971,  1981,  1986,  1996,  2000,  2006,  2008,  2011,  2014,  2018,
  2022,  2034,  2044,  2052,  2060,  2064,  2073,  2074,  2078,  2080,
  2084,  2085,  2089,  2093,  2095,  2099,  2100,  2102,  2106,  2108,
  2110,  2114,  2118,  2128,  2136,  2142,  2144
};

static const short yyrhs[] = {   178,
     0,   177,     0,   183,     0,   134,     0,   137,   138,   240,
   240,   240,   139,   140,   136,   240,   240,   240,   136,   240,
   240,   240,   136,   240,   240,   240,   141,   142,     0,   135,
     0,     0,   178,   179,     0,   180,     0,   182,     0,   181,
     0,     1,     6,     0,   108,     6,     0,   109,     6,     0,
   111,     6,     0,   110,     6,     0,   112,     6,     0,   113,
   168,   245,   169,     5,   170,     6,     0,   114,   168,   245,
   170,     6,     0,   115,   168,     5,   169,     5,   169,   245,
   169,   245,   169,     5,   169,     5,   169,     5,   170,     6,
     0,     3,     7,    92,   168,     5,   169,   243,   170,     6,
     0,     3,     7,    91,   168,     5,   169,   240,   169,   249,
   169,   239,   169,   239,   169,   239,   169,   249,   169,   249,
   169,   239,   170,     6,     0,     3,     7,    90,   168,     5,
   169,   240,   169,   240,   169,   247,   169,   239,   169,   239,
   169,   239,   169,   239,   169,   249,   169,   249,   169,   249,
   169,   249,   169,   239,   170,     6,     0,     3,     7,    98,
   168,     5,   169,     3,   169,     3,   169,     3,   169,   239,
   170,     6,     0,     3,     7,   102,   168,     5,   169,     3,
   169,   239,   170,     6,     0,     3,     7,   119,   168,     5,
   169,     3,   169,   239,   170,     6,     0,     3,     7,   100,
   168,     5,   169,   159,   169,   159,   169,   240,   169,   239,
   170,     6,     0,     3,     7,   103,   168,     5,   169,   249,
   170,     6,     0,     3,     7,   104,   168,     5,   169,   249,
   169,     3,   169,   239,   170,     6,     0,     3,     7,    99,
   168,     5,   169,     3,   170,     6,     0,     3,     7,   105,
   168,     5,   169,     3,   169,   240,   170,     6,     0,     3,
     7,   107,   168,     5,   169,     3,   169,     3,   169,     3,
   170,     6,     0,     3,     7,   106,   168,     5,   169,   243,
   170,     6,     0,     3,     7,   101,   168,     5,   169,     3,
   170,     6,     0,     3,     7,    36,   168,     5,   169,     3,
   169,     3,   170,     6,     0,     3,     7,   117,   168,     5,
   169,   249,   170,     6,     0,     3,     7,   118,   168,     5,
   169,   249,   169,     3,   170,     6,     0,     3,     7,   116,
   168,     5,   169,     3,   170,     6,     0,     3,     7,   120,
   168,     5,   169,     3,   169,   240,   170,     6,     0,     3,
     7,   121,   168,     5,   169,     3,   169,   240,   169,   240,
   170,     6,     0,     3,     7,   128,   168,     5,   169,     3,
   169,   240,   169,   240,   170,     6,     0,     3,     7,   122,
   168,     5,   169,     3,   169,   240,   170,     6,     0,     3,
     7,   132,   168,     5,   169,     3,   169,   240,   169,   240,
   170,     6,     0,     3,     7,   123,   168,     5,   169,     3,
   169,   249,   169,   249,   169,   239,   169,   239,   170,     6,
     0,     3,     7,   124,   168,     5,   169,   249,   170,     6,
     0,     3,     7,   125,   168,   126,   169,   239,   169,     3,
   170,     6,     0,     3,     7,   127,   168,     5,   169,   249,
   169,   239,   170,     6,     0,     3,     7,   129,   168,     5,
   169,     5,   169,     3,   169,     3,   170,     6,     0,     3,
     7,   130,   168,     5,   169,     5,   169,     3,   170,     6,
     0,     3,     7,   131,   168,     3,   169,     3,   170,     6,
     0,     0,   183,   184,     0,   186,     0,   185,     0,   224,
     0,   225,     0,   226,     0,   229,     0,   230,     0,   234,
     0,   237,     0,   238,     0,   231,     0,   233,     0,   232,
     0,     1,     6,     0,    30,   168,     5,   169,   240,   170,
     6,     0,    63,     5,   171,   187,   172,     6,     0,    63,
     5,     4,   243,   171,   187,   172,     6,     0,     0,   187,
   189,     0,   187,   192,     0,   187,   195,     0,   187,   198,
     0,   187,   201,     0,   187,   204,     0,   187,   207,     0,
   187,   210,     0,   187,   213,     0,   187,   216,     0,   187,
   219,     0,   187,   222,     0,   240,     0,   188,   169,   240,
     0,     0,    75,   168,   240,   169,   240,   169,   240,   170,
   190,   171,   188,   172,     6,     0,   240,     0,   191,   169,
   240,     0,     0,    76,   168,   240,   169,   240,   169,   240,
   170,   193,   171,   191,   172,     6,     0,   240,     0,   194,
   169,   240,     0,     0,    77,   168,   240,   169,   240,   169,
   240,   170,   196,   171,   194,   172,     6,     0,   240,     0,
   197,   169,   240,     0,     0,    72,   168,   240,   169,   240,
   169,   240,   169,   240,   169,   240,   169,   240,   170,   199,
   171,   197,   172,     6,     0,   240,     0,   200,   169,   240,
     0,     0,    73,   168,   240,   169,   240,   169,   240,   169,
   240,   169,   240,   169,   240,   170,   202,   171,   200,   172,
     6,     0,   240,     0,   203,   169,   240,     0,     0,    74,
   168,   240,   169,   240,   169,   240,   169,   240,   169,   240,
   169,   240,   170,   205,   171,   203,   172,     6,     0,   240,
     0,   206,   169,   240,     0,     0,    69,   168,   240,   169,
   240,   169,   240,   169,   240,   169,   240,   169,   240,   169,
   240,   169,   240,   169,   240,   170,   208,   171,   206,   172,
     6,     0,   240,     0,   209,   169,   240,     0,     0,    70,
   168,   240,   169,   240,   169,   240,   169,   240,   169,   240,
   169,   240,   169,   240,   169,   240,   169,   240,   170,   211,
   171,   209,   172,     6,     0,   240,     0,   212,   169,   240,
     0,     0,    71,   168,   240,   169,   240,   169,   240,   169,
   240,   169,   240,   169,   240,   169,   240,   169,   240,   169,
   240,   170,   214,   171,   212,   172,     6,     0,   240,     0,
   215,   169,   240,     0,     0,    66,   168,   240,   169,   240,
   169,   240,   169,   240,   169,   240,   169,   240,   169,   240,
   169,   240,   169,   240,   169,   240,   169,   240,   169,   240,
   170,   217,   171,   215,   172,     6,     0,   240,     0,   218,
   169,   240,     0,     0,    67,   168,   240,   169,   240,   169,
   240,   169,   240,   169,   240,   169,   240,   169,   240,   169,
   240,   169,   240,   169,   240,   169,   240,   169,   240,   170,
   220,   171,   218,   172,     6,     0,   240,     0,   221,   169,
   240,     0,     0,    68,   168,   240,   169,   240,   169,   240,
   169,   240,   169,   240,   169,   240,   169,   240,   169,   240,
   169,   240,   169,   240,   169,   240,   169,   240,   170,   223,
   171,   221,   172,     6,     0,     4,     7,   240,     6,     0,
     4,   166,     6,     0,     4,   167,     6,     0,     4,   149,
   240,     6,     0,     4,   150,   240,     6,     0,     4,   151,
   240,     6,     0,     4,   152,   240,     6,     0,     4,   173,
     4,     7,     5,     6,     0,     4,   173,    63,   174,   240,
   175,   173,     4,     7,     5,     6,     0,     4,   173,     4,
     7,   240,     6,     0,     4,   173,    63,   174,   240,   175,
   173,     4,     7,   240,     6,     0,     4,   173,     4,   149,
   240,     6,     0,     4,   173,    63,   174,   240,   175,   173,
     4,   149,   240,     6,     0,     4,   173,     4,   150,   240,
     6,     0,     4,   173,    63,   174,   240,   175,   173,     4,
   150,   240,     6,     0,     4,   173,     4,   151,   240,     6,
     0,     4,   173,    63,   174,   240,   175,   173,     4,   151,
   240,     6,     0,     4,   173,     4,   152,   240,     6,     0,
     4,   173,    63,   174,   240,   175,   173,     4,   152,   240,
     6,     0,     4,   173,     4,   166,     6,     0,     4,   173,
    63,   174,   240,   175,   173,     4,   166,   240,     6,     0,
     4,   173,     4,   167,     6,     0,     4,   173,    63,   174,
   240,   175,   173,     4,   167,   240,     6,     0,     4,   173,
     4,     7,   243,     6,     0,     4,   173,    63,   174,   240,
   175,   173,     4,     7,   243,     6,     0,     4,   173,     4,
   149,   243,     6,     0,     4,   173,    63,   174,   240,   175,
   173,     4,   149,   243,     6,     0,     4,   173,     4,   150,
   243,     6,     0,     4,   173,    63,   174,   240,   175,   173,
     4,   150,   243,     6,     0,     4,   173,    84,   173,     4,
     7,   251,     6,     0,    33,   168,   240,   170,     7,   243,
     6,     0,    48,    33,   168,   240,   170,     7,   249,     6,
     0,    64,    33,   249,     7,   171,   240,   169,   240,   169,
   240,   172,     6,     0,    40,    41,   249,     7,   240,     6,
     0,    33,   171,   240,   172,     6,     0,    36,   168,   240,
   170,     7,   249,     6,     0,    38,   168,   240,   170,     7,
   249,     6,     0,    64,    36,   249,     7,   171,   240,   169,
   240,   169,   240,   172,     6,     0,    34,   168,   240,   170,
     7,   249,     6,     0,    34,   168,   240,   170,     7,   249,
    44,   243,     6,     0,    42,   168,   240,   170,     7,   171,
   240,   169,   240,   169,     5,   169,     5,   169,     5,   172,
     6,     0,    35,   168,   240,   170,     7,   249,     6,     0,
    48,    36,   168,   240,   170,     7,   249,     6,     0,    36,
    58,   168,   240,   170,     7,   249,     6,     0,    78,   168,
   240,   170,     7,   249,     6,     0,    79,   168,   240,   170,
     7,   249,    83,   249,    80,   240,     6,     0,    36,   171,
   240,   172,     6,     0,    44,    37,   168,   240,   170,     7,
   249,     6,     0,   133,    37,   168,   240,   170,     7,   240,
   249,     6,     0,    45,    37,   168,   240,   170,     7,   249,
     6,     0,    79,    37,    81,    82,   168,   240,   170,     7,
   247,    83,   171,   249,   169,   249,   172,    80,   171,   240,
   169,   240,   172,     6,     0,    79,    37,   168,   240,   170,
     7,   247,    83,   171,   249,   169,   249,   172,    80,   171,
   240,   169,   240,   172,     6,     0,    48,    37,   168,   240,
   170,     7,   249,     6,     0,    37,    58,   168,   240,   170,
     7,   249,     6,     0,    37,   171,   240,   172,     6,     0,
    47,    39,   168,   240,   170,     7,   249,     6,     0,    39,
   168,   240,   170,     7,   249,     6,     0,    48,    39,   168,
   240,   170,     7,   249,     6,     0,    53,   243,   171,   227,
   172,     0,    52,   171,   243,   169,   243,   169,   240,   172,
   171,   227,   172,     0,    54,   243,   171,   227,   172,     0,
    55,   171,   243,   169,   240,   172,   171,   227,   172,     0,
   229,     0,   228,     0,   226,     0,     0,   228,   225,     0,
    57,   171,   228,   172,     0,    61,   171,   228,   172,     0,
    59,     5,     6,     0,    30,     5,     6,     0,    88,     6,
     0,    89,     5,     6,     0,    31,     6,     0,    32,   240,
     6,     0,    85,   168,   240,     8,   240,   170,     0,    85,
   168,   240,     8,   240,     8,   240,   170,     0,    86,     0,
    56,    33,   171,   240,   169,   243,   172,     6,     0,    56,
    33,   171,   240,   169,   243,   169,   243,   169,   240,   172,
     6,     0,    56,    36,   171,   240,   169,   243,   172,     6,
     0,    56,    36,   171,   240,   169,   243,   169,   243,   169,
   240,   172,     6,     0,    56,    37,   171,   240,   169,   243,
   172,     6,     0,    56,    37,   171,   240,   169,   243,   169,
   243,   169,   240,   172,     6,     0,    56,    37,   171,   240,
   169,   243,   172,   171,   235,   172,     6,     0,    56,    37,
   171,   240,   169,   243,   169,   243,   169,   240,   172,   171,
   235,   172,     6,     0,   236,     0,   235,   236,     0,    65,
   171,   249,   169,   249,   169,   249,   172,     6,     0,    60,
     6,     0,    46,    36,   249,     7,   240,     6,     0,    46,
    36,   249,     7,   240,    49,    51,   240,     6,     0,    46,
    36,   249,     7,   240,    49,    50,   240,     6,     0,    46,
    37,   171,   240,   172,     7,   249,     6,     0,    43,    37,
   171,   240,   172,     7,   249,     6,     0,    46,    39,   171,
   240,   172,     7,   249,     6,     0,    60,    37,   249,     7,
   240,     6,     0,    60,    37,   249,     6,     0,    62,     6,
     0,    93,     0,    94,     0,    95,     0,    96,     0,    97,
     0,   241,     0,   168,   240,   170,     0,   158,   240,     0,
   157,   240,     0,   164,   240,     0,   240,   158,   240,     0,
   240,   157,   240,     0,   240,   159,   240,     0,   240,   160,
   240,     0,   240,   161,   240,     0,   240,   165,   240,     0,
   240,   153,   240,     0,   240,   154,   240,     0,   240,   155,
   240,     0,   240,   156,   240,     0,   240,   147,   240,     0,
   240,   146,   240,     0,   240,   144,   240,     0,   240,   145,
   240,     0,   240,   143,   240,     8,   240,     0,    10,   168,
   240,   170,     0,    11,   168,   240,   170,     0,    12,   168,
   240,   170,     0,    13,   168,   240,   170,     0,    14,   168,
   240,   170,     0,    15,   168,   240,   170,     0,    16,   168,
   240,   170,     0,    17,   168,   240,   170,     0,    18,   168,
   240,   170,     0,    19,   168,   240,   170,     0,    20,   168,
   240,   169,   240,   170,     0,    21,   168,   240,   170,     0,
    22,   168,   240,   170,     0,    23,   168,   240,   170,     0,
    24,   168,   240,   170,     0,    25,   168,   240,   170,     0,
    26,   168,   240,   170,     0,    27,   168,   240,   169,   240,
   170,     0,    28,   168,   240,   169,   240,   170,     0,    29,
   168,   240,   169,   240,   170,     0,     3,     0,     9,     0,
     4,     0,     4,   173,     4,     0,     4,   173,    63,   174,
   240,   175,   173,     4,     0,     4,   173,     4,   166,     0,
     4,   173,    63,   174,   240,   175,   173,     4,   166,     0,
     4,   173,     4,   167,     0,     4,   173,    63,   174,   240,
   175,   173,     4,   167,     0,   240,     8,   240,     0,   240,
     8,   240,     8,   240,     0,   244,     0,   158,   243,     0,
   157,   243,     0,   243,   158,   243,     0,   243,   157,   243,
     0,   171,   240,   169,   240,   169,   240,   169,   240,   169,
   240,   172,     0,   171,   240,   169,   240,   169,   240,   169,
   240,   172,     0,   171,   240,   169,   240,   169,   240,   172,
     0,   168,   240,   169,   240,   169,   240,   170,     0,     4,
   173,     4,     0,     4,   173,    63,   174,   240,   175,   173,
     4,     0,     0,   168,   246,   170,     0,     5,     0,   246,
   169,     5,     0,     0,   171,   248,   172,     0,   168,   248,
   170,     0,   249,     0,   248,   169,   249,     0,     0,   240,
     0,   171,   250,   172,     0,   240,     0,   242,     0,   250,
   169,   240,     0,   250,   169,   242,     0,   171,   240,   169,
   240,   169,   240,   169,   240,   172,     0,   171,   240,   169,
   240,   169,   240,   172,     0,   171,     4,   169,   240,   172,
     0,     4,     0,     4,   173,    84,   173,     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   138,   140,   141,   148,   156,   170,   182,   184,   187,   189,
   190,   191,   194,   200,   205,   206,   207,   210,   214,   217,
   223,   228,   234,   242,   247,   251,   257,   262,   266,   271,
   275,   278,   283,   287,   291,   295,   300,   304,   307,   311,
   315,   319,   323,   327,   331,   334,   338,   341,   345,   348,
   357,   361,   367,   369,   370,   371,   372,   373,   374,   375,
   376,   377,   378,   379,   381,   382,   385,   396,   401,   407,
   412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
   422,   423,   426,   429,   433,   439,   445,   448,   452,   458,
   464,   467,   471,   477,   483,   486,   490,   498,   504,   507,
   511,   519,   525,   528,   532,   540,   546,   549,   553,   565,
   571,   574,   578,   590,   596,   599,   603,   615,   621,   624,
   628,   641,   647,   650,   654,   667,   673,   676,   680,   693,
   705,   715,   723,   731,   739,   747,   755,   766,   779,   797,
   814,   835,   852,   873,   890,   911,   928,   949,   966,   987,
  1004,  1025,  1042,  1065,  1090,  1119,  1144,  1173,  1198,  1229,
  1249,  1260,  1266,  1285,  1296,  1304,  1310,  1316,  1335,  1341,
  1357,  1364,  1370,  1376,  1382,  1388,  1407,  1419,  1425,  1444,
  1465,  1473,  1479,  1485,  1491,  1503,  1509,  1515,  1527,  1533,
  1538,  1543,  1550,  1552,  1553,  1556,  1561,  1572,  1590,  1605,
  1633,  1664,  1668,  1674,  1679,  1693,  1708,  1721,  1759,  1765,
  1771,  1775,  1779,  1783,  1787,  1792,  1799,  1803,  1808,  1826,
  1836,  1854,  1871,  1888,  1909,  1929,  1949,  1966,  1990,  2003,
  2005,  2006,  2007,  2008,  2011,  2013,  2014,  2015,  2016,  2017,
  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,
  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,
  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,
  2048,  2049,  2050,  2051,  2054,  2056,  2057,  2066,  2083,  2104,
  2121,  2142,  2159,  2181,  2188,  2201,  2206,  2210,  2214,  2218,
  2223,  2228,  2232,  2236,  2240,  2266,  2298,  2302,  2307,  2311,
  2316,  2320,  2324,  2330,  2336,  2342,  2346,  2352,  2359,  2365,
  2374,  2378,  2388,  2393,  2397,  2402,  2407
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tDraw","tSleep",
"tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic",
"tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex",
"tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tEndFor","tScript",
"tExit","tMerge","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","'?'",
"tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL","tAFFECTPLUS","tAFFECTMINUS",
"tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL","tGREATEROREQUAL",
"'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC","'!'","'^'","tPLUSPLUS",
"tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Macro","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter",
"Transfini","Coherence","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble","Color", NULL
};
#endif

static const short yyr1[] = {     0,
   176,   176,   176,   177,   177,   177,   178,   178,   179,   179,
   179,   179,   180,   180,   180,   180,   180,   181,   181,   181,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   183,   183,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   184,   184,   184,   184,   185,   186,   186,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   188,   188,   190,   189,   191,   191,   193,   192,
   194,   194,   196,   195,   197,   197,   199,   198,   200,   200,
   202,   201,   203,   203,   205,   204,   206,   206,   208,   207,
   209,   209,   211,   210,   212,   212,   214,   213,   215,   215,
   217,   216,   218,   218,   220,   219,   221,   221,   223,   222,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   226,   226,
   226,   226,   227,   227,   227,   228,   228,   229,   230,   231,
   232,   232,   232,   232,   232,   233,   233,   233,   234,   234,
   234,   234,   234,   234,   234,   234,   235,   235,   236,   236,
   237,   237,   237,   237,   237,   237,   237,   237,   238,   239,
   239,   239,   239,   239,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   242,   242,   243,   243,   243,   243,   243,
   244,   244,   244,   244,   244,   244,   245,   245,   246,   246,
   247,   247,   247,   248,   248,   249,   249,   249,   250,   250,
   250,   250,   251,   251,   251,   251,   251
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     3,     3,     4,     4,     4,     4,     6,    11,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     5,
    11,     5,    11,     6,    11,     6,    11,     6,    11,     8,
     7,     8,    12,     6,     5,     7,     7,    12,     7,     9,
    17,     7,     8,     8,     7,    11,     5,     8,     9,     8,
    22,    20,     8,     8,     5,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     4,     4,     3,
     3,     2,     3,     2,     3,     6,     8,     1,     8,    12,
     8,    12,     8,    12,    11,    15,     1,     2,     9,     2,
     6,     9,     9,     8,     8,     8,     6,     4,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     1,     1,     1,     3,     8,     4,
     9,     4,     9,     3,     5,     1,     2,     2,     3,     3,
    11,     9,     7,     7,     3,     8,     0,     3,     1,     3,
     0,     3,     3,     1,     3,     0,     1,     3,     1,     1,
     3,     3,     9,     7,     5,     1,     5
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   208,     0,     0,     0,
    52,    54,    53,    55,    56,    57,    58,    59,    63,    65,
    64,    60,    61,    62,   275,   277,   276,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   235,    12,     0,    13,    14,    16,    15,    17,
   297,   297,     0,    66,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   306,     0,     0,
     0,     0,   306,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   286,     0,     0,
     0,     0,     0,   196,     0,   306,   196,   229,     0,   306,
   306,     0,     0,     0,     0,   202,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
   237,   239,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   132,   133,
     0,     0,     0,   201,     0,   205,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   288,   287,     0,     0,
     0,     0,   196,   196,     0,     0,     0,     0,     0,   200,
     0,     0,     0,    70,     0,     0,     0,     0,     0,     0,
     0,   203,     0,   278,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   236,     0,   252,   253,   251,
   250,   246,   247,   248,   249,   238,   237,   242,   243,   244,
   245,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   299,     0,     0,     0,     0,   131,   134,   135,
   136,   137,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   241,   240,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   309,   310,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   295,     0,     0,     0,   290,   289,   195,     0,
   194,   193,     0,     0,     0,     0,     0,   198,   197,   228,
     0,   199,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,   282,     0,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,     0,   266,   267,   268,   269,
   270,   271,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   298,     0,
    19,     0,   277,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   150,   152,     0,     0,     0,
     0,   165,   306,   306,     0,   306,   177,     0,   185,   306,
   306,     0,     0,   308,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   189,   191,     0,     0,     0,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,     0,     0,   306,     0,     0,   306,
     0,     0,     0,     0,     0,     0,     0,   254,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   306,   306,
     0,     0,     0,     0,   306,   306,     0,     0,     0,     0,
     0,   306,     0,   306,     0,     0,     0,     0,     0,   300,
     0,   297,     0,   138,     0,   140,   154,   142,   156,   144,
   158,   146,   148,     0,     0,     0,     0,     0,     0,   306,
     0,   306,     0,     0,   284,   311,   312,   164,     0,   306,
   306,   306,   221,     0,   306,   306,   306,   306,   306,   306,
   306,     0,     0,     0,     0,     0,     0,     0,     0,   227,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    68,     0,     0,     0,     0,   301,     0,
     0,   206,     0,     0,   265,   272,   273,   274,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   230,   231,   232,   233,   234,     0,     0,     0,
     0,     0,     0,     0,    18,     0,   278,     0,     0,   316,
     0,     0,    67,   161,   169,     0,   172,     0,   166,     0,
   167,   187,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   196,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   175,     0,   306,   306,     0,   306,     0,   306,
     0,     0,     0,     0,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   306,     0,     0,     0,     0,     0,     0,
     0,     0,   297,     0,     0,     0,   277,     0,   160,     0,
   174,   184,   285,     0,   225,   178,   180,     0,     0,   224,
   226,   186,   162,   173,   183,   188,     0,     0,   294,     0,
   293,     0,     0,   209,     0,   211,     0,   213,     0,    69,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   301,     0,   304,     0,     0,     0,
   207,     0,   279,     0,     0,     0,     0,    21,     0,    30,
     0,    34,     0,    28,     0,     0,    33,     0,    38,    36,
     0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
     0,     0,    50,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   170,     0,   223,   222,
   196,   296,     0,   192,     0,     0,     0,     0,     0,     0,
   217,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   306,   303,   302,   306,
     0,   179,   281,   283,     0,     0,   301,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   306,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   292,     0,     0,     0,   220,
   306,     0,   218,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   305,     0,
     0,     0,    35,     0,     0,     0,     0,    25,     0,    31,
     0,    37,    26,    39,     0,    42,     0,    46,    47,     0,
     0,    49,     0,     0,     0,   139,   141,   155,   143,   157,
   145,   159,   147,   149,   151,   153,   317,   315,     0,     0,
   190,     0,     0,     0,     0,     0,   215,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   306,   306,   176,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   279,     0,     0,
   291,   210,   212,   214,     0,   306,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    85,    89,    93,   163,   168,
     0,     0,     0,     0,     0,     0,     0,    29,    32,    40,
     0,    41,    48,    43,     0,     0,   314,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   306,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    24,    27,     0,     0,   313,     0,   216,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    83,     0,    87,     0,    91,     0,     0,     0,     0,   306,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    44,    20,   171,   219,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    84,    86,    88,
    90,    92,    94,     0,     0,     0,     0,   306,     0,     0,
     0,     0,     0,     0,    97,   101,   105,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     5,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    95,     0,    99,     0,
   103,     0,   306,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   181,     0,    22,     0,
     0,     0,     0,     0,     0,    96,    98,   100,   102,   104,
   106,   306,     0,     0,     0,   109,   113,   117,     0,     0,
     0,     0,     0,     0,     0,   306,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   107,     0,   111,
     0,   115,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   108,   110,   112,   114,
   116,   118,     0,   121,   125,   129,    23,     0,     0,     0,
     0,     0,     0,     0,   119,     0,   123,     0,   127,     0,
     0,     0,     0,     0,     0,   120,   122,   124,   126,   128,
   130,     0,     0,     0
};

static const short yydefgoto[] = {  1482,
     4,     5,    18,    19,    20,    21,     6,    61,    62,    63,
   464,  1260,   603,  1210,  1262,   604,  1211,  1264,   605,  1212,
  1366,   606,  1339,  1368,   607,  1340,  1370,   608,  1341,  1427,
   609,  1413,  1429,   610,  1414,  1431,   611,  1415,  1464,   612,
  1458,  1466,   613,  1459,  1468,   614,  1460,    64,   459,   449,
   450,   451,   452,    68,    69,    70,    71,    72,   990,   991,
    73,    74,   768,   281,   103,   427,   297,   158,   251,   394,
   837,   926,   927,   428,   782
};

static const short yypact[] = {   559,
-32768,-32768,   -92,-32768,   347,  2256,  1523,    51,    54,    65,
   134,   149,   160,   190,   -62,    49,   122,-32768,-32768,-32768,
-32768,   249,    97,    27,   296,  1523,    94,   145,   168,   -44,
   -40,   169,   173,   267,   186,   283,   324,   325,   278,   335,
   100,   231,     1,     1,   264,    81,   265,   376,   354,   271,
   413,   438,   120,   280,   -30,   281,-32768,   439,   441,   414,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   279,-32768,   282,   285,   295,
   298,   299,   301,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   312,   322,   332,   334,   336,  1523,  1523,  1523,
  1523,  1496,-32768,-32768,  2295,-32768,-32768,-32768,-32768,-32768,
   337,   337,   496,-32768,  1523,  1523,  1523,  1523,  1523,   500,
   501,    12,   504,   506,-32768,   378,  1523,  1523,  1523,  1523,
   344,  1523,  1523,   346,  1523,  1523,  1523,   919,  1523,   345,
   349,   350,   919,   348,   356,   352,   372,   377,   379,   380,
     1,   342,     1,     1,  1523,  1523,   -98,-32768,   -81,     1,
   373,   375,   381,-32768,   543,   919,-32768,-32768,    -1,   919,
   919,  1523,   -71,  1523,  1523,-32768,   544,   385,     7,  1523,
  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,   389,
   389,   389,  2948,  1523,  1523,  1523,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1496,   390,
   393,   395,   396,   397,   398,   399,   400,   401,   402,   403,
   405,   406,   410,   415,   416,   442,   444,   445,   459,   460,
   462,   463,   468,   469,   470,   492,   493,   494,   495,   552,
   437,   412,   497,   685,   828,   948,   971,  1026,-32768,-32768,
   144,   433,   491,-32768,   507,-32768,  1523,  1523,  2976,  2476,
  3004,  3032,  1523,  3060,  2499,  1523,  2522,  3088,  3116,  1523,
  7597,   658,  3144,  1523,  1523,  1523,   668,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,   -15,     9,-32768,-32768,  4712,  4739,
     1,     1,   333,   333,   -12,  1523,  1523,  1523,  1285,-32768,
    18,  2206,     1,-32768,   670,   671,  3172,   599,  1523,  3200,
  2003,-32768,  1523,    78,   509,  3228,  3256,  3284,  3312,  3340,
  3368,  3396,  3424,  3452,  3480,  4766,  3508,  3536,  3564,  3592,
  3620,  3648,  4793,  4820,  4847,-32768,  2026,  -116,  -116,   461,
   461,   -79,   -79,   -79,   -79,   -82,   -52,   389,   389,   389,
   389,  4874,   675,   679,   680,   681,   682,   683,   684,   687,
   694,   695,   696,   697,   698,   699,   712,   713,   714,   715,
   716,   717,   718,   720,   722,   564,   723,   724,   725,   726,
   734,   733,-32768,   102,   737,   739,   738,-32768,-32768,-32768,
-32768,-32768,   576,  1465,  1465,  1523,  1523,   740,   742,  1523,
   735,  1523,   115,   115,   743,   745,   746,   747,  3676,   748,
   750,  3704,   751,   752,   753,  2049,-32768,   166,  1523,   754,
  2545,  3732,  3760,  1523,  2568,  2591,  3788,  3816,  3844,  3872,
  3900,     1,-32768,   575,  1523,  1523,-32768,-32768,-32768,   580,
  2313,-32768,   586,  1523,  4897,  4924,  4951,-32768,-32768,-32768,
  1523,-32768,   -73,   257,   592,   594,   759,   602,  3928,   760,
  1523,  3956,-32768,-32768,  1523,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1523,-32768,-32768,-32768,-32768,
-32768,-32768,  1523,  1523,  1523,  1523,   631,   603,   604,   606,
   608,   610,   611,   612,   613,   614,   615,   616,   620,   621,
   624,   626,   627,   628,   634,   636,   638,   639,   640,   653,
   654,   657,   664,   667,   688,   689,   690,   794,-32768,   678,
-32768,   691,   676,   821,  1465,  1465,  1523,  1049,     3,  1438,
     6,  1600,    62,  1624,  1659,-32768,-32768,  2294,   793,  3984,
     1,-32768,   919,   919,   844,   919,-32768,   845,-32768,   919,
   919,  1523,  1523,-32768,  1682,   692,   846,   855,   857,   729,
   859,   861,   862,   863,   864,   871,   872,    85,  1523,  4978,
  5005,-32768,-32768,  2614,     1,     1,     1,  1705,-32768,   727,
   728,   730,   731,   732,   749,   756,   757,   758,   781,   782,
   783,   874,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1523,  1523,   919,  1523,   884,   919,
   338,   885,  2317,  4012,  4040,  4068,  4096,  7597,   761,   878,
  1523,  1523,     1,   898,   899,   762,   900,   915,   919,   919,
   916,     1,   917,   949,   919,   919,   950,   952,   953,   964,
   967,   919,   313,   919,   973,   985,   986,   989,   991,-32768,
   990,   337,    11,-32768,  2920,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   822,    22,   993,    93,    14,   994,   919,
   995,   919,   996,   997,  2073,  2049,-32768,-32768,  1523,   919,
   919,   919,-32768,    37,   919,   919,   919,   919,   919,   919,
   919,  1523,  2340,  1523,  1523,   834,  -107,  -105,  -103,-32768,
   744,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,-32768,  5032,  5059,  1000,  4124,   192,   924,
  1523,-32768,  1523,   835,-32768,-32768,-32768,-32768,  1523,   840,
  5086,  5113,  -122,   841,   842,   847,   848,   850,   852,   851,
   854,   -55,   856,   858,   860,   865,   866,   867,   868,   869,
   870,   873,-32768,-32768,-32768,-32768,-32768,   875,   876,   877,
   880,   881,   882,   887,-32768,   901,    78,   837,  1010,   896,
  1550,  1009,-32768,-32768,-32768,     1,-32768,  1011,-32768,  1018,
-32768,-32768,  1523,  5140,  1021,  1025,  1027,  1523,  1523,  1034,
  1035,  1036,  1041,  1045,  1047,  1048,  2637,   905,  4152,  2386,
   333,     1,  1065,     1,  1066,     1,     0,  1067,  5167,  5194,
  5221,  5248,  5275,  5302,  5329,  5356,  5383,  5410,  5437,  5464,
  1523,  1523,-32768,  1072,   919,   919,   998,   919,  4180,   212,
  1070,  1496,  1077,  1523,   919,  1076,  1081,  1079,   927,  1082,
   313,  1083,  1093,  1523,  1091,  1095,  1094,  1104,  1096,   313,
  1523,  1523,  1523,   919,  1105,  1116,   313,  1523,  1117,  1118,
  1127,  1523,   337,  1523,   155,  1038,  -152,  5491,-32768,    95,
-32768,-32768,  7597,  1523,-32768,-32768,-32768,  1728,  1766,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   963,  1119,-32768,  1523,
-32768,   965,   140,-32768,   182,-32768,   195,-32768,    87,-32768,
  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,
  1523,  1523,  5518,  5545,   192,   119,-32768,   206,   968,  1055,
-32768,  1134,   152,  1496,   972,  5572,   974,-32768,   975,-32768,
   976,-32768,   977,-32768,   979,  4208,-32768,   980,-32768,-32768,
   983,   987,  4236,  5599,  4264,   981,-32768,  1004,  1005,  5626,
  1008,  1020,-32768,  5653,  1019,  2363,   630,  1465,  1465,  1523,
  1523,  1523,  1523,   982,  1523,  1523,-32768,  5680,-32768,-32768,
   333,-32768,  2416,-32768,  1523,  1523,  1523,  1135,  1007,   -38,
-32768,  5707,  5734,  5761,  5788,  5815,  5842,  5869,  5896,  5923,
  5950,  5977,  6004,  1523,  1523,  1063,   919,-32768,-32768,   919,
  1523,-32768,-32768,-32768,  1539,  1150,   192,   313,  1194,  1523,
  1192,   313,  1193,  1197,  1195,  1205,  1206,  1523,  1207,   919,
  1210,  1211,  1523,  1228,  1226,  1523,  1229,  1062,  1230,  1791,
    99,  1838,   101,  1863,   110,  1886,  1909,  1933,  1956,  1235,
  2660,  6031,  1236,  1068,  1523,-32768,  2683,  2706,  2729,-32768,
   919,  1239,-32768,  1523,  1523,  1523,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,  1523,  2752,  2775,  1071,-32768,  1078,
  1980,  1523,-32768,  1080,  1084,  1085,  6058,-32768,  1086,-32768,
  1087,-32768,-32768,-32768,  4292,-32768,  1089,-32768,-32768,  4320,
  1092,-32768,  4348,  1090,  1242,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1523,  1097,
-32768,  2798,  1245,  1249,    23,  1098,-32768,  6085,  6112,  6139,
  6166,  6193,  6220,  6247,  6274,  6301,  4376,  4404,  4432,  1257,
  1258,   919,   919,-32768,  1496,   313,   313,   313,   313,  1259,
  1276,  1277,   313,  1278,  1280,  1281,  1243,   152,  2446,  1286,
-32768,-32768,-32768,-32768,    87,   919,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,  1523,-32768,-32768,-32768,-32768,-32768,
  1123,  1128,  1496,  1132,  1133,  1136,  1139,-32768,-32768,-32768,
  1141,-32768,-32768,-32768,  1142,  1523,-32768,  1157,   -37,  1159,
  6328,  6355,  6382,  6409,  6436,  6463,  6490,  6517,  6544,  1160,
  1163,  1165,   919,  1223,  2828,   313,   313,  1298,  1299,   313,
  1332,  2851,  1333,  1344,   919,  1523,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1167,  1180,  1523,
  1183,  1184,-32768,-32768,  1185,  1186,-32768,  1182,-32768,  1187,
  6571,  6598,  6625,  6652,  6679,  6706,  6733,  6760,  6787,   210,
  7597,   220,  7597,   232,  7597,  1282,  1523,  1496,   313,   919,
  1351,  1352,  1354,  1355,  1523,  1523,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,  1359,  1523,  1360,  1523,  1361,  1204,
  6814,  1496,  1208,  1212,-32768,-32768,-32768,-32768,  6841,  6868,
  6895,  6922,  6949,  6976,  4460,  4488,  4516,  7597,-32768,  7597,
-32768,  7597,-32768,  1523,  1523,  2118,   313,   919,  1523,  1523,
  1523,  1523,  1523,  1523,-32768,-32768,-32768,  7003,  2874,  1237,
  1213,  1214,  7030,  7057,  7084,  7111,  7138,  7165,  1209,  1215,
  1216,  1523,  1378,-32768,   919,   313,  1523,  1523,  1523,  1523,
  1523,  1523,  1523,  1523,  1523,  2897,-32768,  1219,  1220,  7192,
  7219,  7246,  7273,  7300,  7327,   242,  7597,   246,  7597,   248,
  7597,  1379,   919,  1383,  1523,  1523,  1523,  1523,  1523,  1523,
  1523,  1385,  1523,  1386,  1523,  1387,-32768,  1225,-32768,  7354,
  7381,  7408,  4544,  4572,  4600,  7597,-32768,  7597,-32768,  7597,
-32768,   919,  1523,  1523,  1523,-32768,-32768,-32768,  1231,  7435,
  7462,  7489,  1224,  1232,  1233,   919,  1523,  1523,  1523,  1523,
  1523,  1523,  1238,  7516,  7543,  7570,   252,  7597,   254,  7597,
   256,  7597,   313,  1523,  1523,  1523,  1523,  1393,  1523,  1395,
  1523,  1396,  1246,  4628,  4656,  4684,  7597,-32768,  7597,-32768,
  7597,-32768,  1399,-32768,-32768,-32768,-32768,  1248,  1250,  1251,
  1523,  1523,  1523,   261,  7597,   262,  7597,   268,  7597,  1523,
  1400,  1523,  1402,  1523,  1403,  7597,-32768,  7597,-32768,  7597,
-32768,  1417,  1420,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   836,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1418,  1425,
  -302,   277,  1427,-32768,-32768,-32768,-32768,-32768,   258,  -986,
-32768,-32768,  -804,    -7,-32768,   879,   -10,-32768,  -111,-32768,
  -917,   590,   598,-32768,-32768
};


#define	YYLAST		7762


static const short yytable[] = {   102,
   252,   453,   313,  1063,   152,   908,   173,  1006,   667,   318,
   324,   669,   443,   131,   777,   261,   975,   134,   126,   785,
   179,   988,   988,   460,   461,   780,   989,   989,  1164,   207,
   208,   123,   157,   159,   301,   302,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     7,   943,   846,   218,   301,
   302,   301,   302,   301,   302,   952,   104,   786,   301,   302,
   105,   812,   959,   814,   813,   816,   815,   671,   817,   325,
   106,   444,   303,   778,   262,   301,   302,   267,   268,   215,
   216,   217,   218,   301,   302,   218,   798,   799,  -241,   304,
   200,   201,   202,   203,   219,   263,   319,   589,   784,  1084,
   977,   301,   302,   115,  1108,   111,  1110,   254,   255,   256,
   257,   258,   218,   161,   855,  1112,   162,   163,  -240,   269,
   270,   271,   272,   132,   274,   275,   133,   277,   278,   279,
   135,   283,   147,  1062,  1224,   148,   149,   174,   150,   107,
   295,   301,   302,   298,   301,   302,   988,   299,   300,   305,
   403,   989,   170,   442,   108,   171,   454,   153,   154,   301,
   302,   967,   301,   302,   317,   109,   320,   321,   155,   314,
   909,   156,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
   344,   345,   781,  1165,   124,   110,   347,   348,   349,   350,
   351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
   361,   362,  1063,  1085,    75,    76,   112,  1089,   301,   302,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,   301,   302,   473,   474,   116,   117,   118,   119,   301,
   302,   301,   302,   702,   114,   301,   302,   301,   302,   413,
   414,   127,   120,   121,   128,   419,   301,   302,   422,   122,
   528,   529,   426,   215,   216,   217,   431,   432,   433,   218,
   435,   436,   437,   438,   439,   440,   441,  1007,  1008,   113,
   447,   448,   404,   405,   406,   407,   301,   302,   455,   456,
   457,   125,   463,   968,   969,   970,   971,   138,   985,   408,
   409,   469,   129,   143,   144,   472,   145,  1013,  1014,   140,
   972,   973,   590,   591,   592,   593,   594,   595,   596,   597,
   598,   599,   600,   601,   563,   130,   136,   564,   301,   302,
   137,  1184,  1185,  1186,  1187,   731,    -1,     8,  1191,     9,
   986,   301,   302,   139,   204,   205,   206,   207,   208,   835,
   141,   142,   836,   987,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   146,  1007,   100,   218,  1009,  1284,   101,
   165,  1285,   280,   266,    42,    43,    44,    45,  1286,    47,
   166,  1287,   539,   541,   543,   538,   540,   542,   544,   545,
  1288,   151,   548,  1289,   550,   763,   764,   765,   766,   767,
  1381,  1241,  1242,  1382,  1383,  1245,  1385,  1384,   168,  1386,
  1437,   565,  1439,  1438,  1441,  1440,   570,  1442,   602,  1470,
  1472,   578,  1471,  1473,   160,   164,  1474,   580,   581,  1475,
   309,   167,   169,   312,   176,   177,   584,   172,   175,   180,
   178,   179,   181,   588,    10,    11,    12,    13,    14,    15,
    16,    17,   182,   621,  1293,   183,   184,   623,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   194,   624,   195,
   204,   205,   206,   207,   208,   625,   626,   627,   628,   196,
   209,   210,   211,   212,   267,   268,   215,   216,   217,   197,
   253,   198,   218,   199,   250,   259,   260,   732,   902,   264,
   265,   273,  1331,   276,   296,   284,   285,   286,   288,   290,
   204,   205,   206,   207,   208,   298,   289,   200,   201,   665,
   209,   210,   211,   212,   267,   268,   215,   216,   217,   291,
   677,  1359,   218,   306,   292,   307,   293,   294,   310,   322,
   776,   308,   323,   218,   685,   686,   393,   363,    -7,    -7,
   364,    -7,   365,   366,   367,   368,   369,   370,   371,   372,
   373,   703,   374,   375,   707,   708,   709,   376,    75,   533,
   534,   396,   377,   378,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,   395,   410,   725,   726,   379,
   728,   380,   381,   209,   210,   211,   212,   267,   268,   215,
   216,   217,   743,   741,   742,   218,   382,   383,  1443,   384,
   385,   752,    75,   533,  1039,   386,   387,   388,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,   389,
   390,   391,   392,   411,   429,   397,    -7,    -7,    -7,    -7,
    -7,    -7,    -7,    -7,   434,   412,   465,   466,  1054,   498,
   468,   794,   475,   499,   500,   501,   502,   503,   504,   521,
   398,   505,     1,     2,   807,     3,   809,   810,   506,   507,
   508,   509,   510,   511,   819,   820,   821,   822,   823,   824,
   825,   826,   827,   828,   829,   830,   512,   513,   514,   515,
   516,   517,   518,   839,   519,   840,   520,   522,   523,   524,
   525,   842,   535,   536,   693,   282,   526,   527,   549,   100,
   287,   530,   532,   537,   531,   546,   156,   547,   579,   551,
   552,   582,   553,   554,   556,   557,   559,   583,   560,   561,
   566,   965,   615,   311,   616,   617,   620,   315,   316,   618,
   629,   630,   631,   878,   632,   880,   633,   694,   634,   635,
   636,   637,   638,   639,   640,   883,   535,   536,   641,   642,
   888,   889,   643,   100,   644,   645,   646,   537,   660,   675,
   156,   903,   647,   905,   648,   907,   649,   650,   651,   590,
   591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
   601,   652,   653,   923,   924,   654,   664,   204,   205,   206,
   207,   208,   655,   399,   934,   656,   936,   209,   210,   211,
   212,   267,   268,   215,   216,   217,   946,   661,   663,   218,
   680,   682,   690,   953,   954,   955,   657,   658,   659,   662,
   960,   691,   689,   692,   964,   695,   966,   696,   697,   698,
   699,   204,   205,   206,   207,   208,   978,   700,   701,   724,
   740,   209,   210,   211,   212,   267,   268,   215,   216,   217,
   729,   733,   983,   218,   712,   713,   739,   714,   715,   716,
   744,   745,   747,   992,   993,   994,   995,   996,   997,   998,
   999,  1000,  1001,  1002,  1003,   818,   717,   748,   751,   753,
   746,    75,    76,   718,   719,   720,  1015,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,   721,   722,
   723,   754,   757,   400,   758,   759,  1041,  1043,  1045,  1040,
  1042,  1044,  1046,  1047,  1048,  1049,   760,  1051,  1052,   761,
   204,   205,   206,   207,   208,   770,   401,  1057,  1058,  1059,
   209,   210,   211,   212,   267,   268,   215,   216,   217,   771,
   772,   773,   218,   774,   779,   775,  1076,  1077,   783,   787,
   789,   791,   792,  1081,   811,   833,   838,   841,   843,   847,
   874,   848,  1087,   875,   879,   849,   881,   850,   851,   853,
  1095,   852,   854,   882,   856,  1100,   885,   857,  1103,   858,
   886,   402,   887,   859,   860,   861,   862,   863,   864,   890,
   891,   892,   865,   866,   867,   868,   893,  1122,   869,   870,
   894,   871,   895,   896,   666,   872,  1128,  1129,  1130,  1131,
  1132,  1133,  1134,  1135,  1136,  1137,  1138,  1139,   876,   873,
   904,   906,   910,   933,  1145,    98,    99,   898,   925,   935,
   929,   938,   100,   939,   940,   941,   101,   942,   944,   280,
   204,   205,   206,   207,   208,   945,   947,   948,   951,   949,
   209,   210,   211,   212,   267,   268,   215,   216,   217,   950,
   957,  1159,   218,   204,   205,   206,   207,   208,   958,   961,
   962,   974,   982,   209,   210,   211,   212,   267,   268,   215,
   216,   217,   963,   981,  1011,   218,   984,  1183,  1010,  1012,
  1060,  1016,  1018,  1019,  1020,  1078,  1021,  1022,  1024,  1030,
   678,   679,  1025,   681,  1050,  1083,  1026,   683,   684,  1201,
  1202,  1203,  1204,  1205,  1206,  1207,  1208,  1209,   204,   205,
   206,   207,   208,  1031,  1032,  1215,  1034,  1061,   209,   210,
   211,   212,   267,   268,   215,   216,   217,  1037,  1222,  1035,
   218,   204,   205,   206,   207,   208,  1086,  1088,  1090,  1091,
  1092,   209,   210,   211,   212,   267,   268,   215,   216,   217,
  1093,  1094,  1096,   218,   727,  1098,  1099,   730,  1251,  1252,
  1253,  1254,  1255,  1256,  1257,  1258,  1259,  1261,  1263,  1265,
  1101,  1102,  1268,  1104,  1105,  1106,   749,   750,  1117,  1121,
  1120,  1142,   755,   756,  1127,  1158,  1143,  1195,  1146,   762,
  1162,   769,  1147,  1148,  1163,  1150,  1151,  1153,  1157,  1291,
  1292,  1155,  1179,  1180,  1188,  1160,  1166,  1299,  1300,  1301,
  1302,  1303,  1304,  1305,  1306,  1307,  1308,   788,  1310,   790,
  1312,  1189,  1190,  1192,  1316,  1193,  1194,   795,   796,   797,
  1198,  1213,   800,   801,   802,   803,   804,   805,   806,  1214,
  1216,  1217,  1239,  1243,  1244,  1218,  1328,  1329,  1219,  1220,
  1221,  1333,  1334,  1335,  1336,  1337,  1338,    27,    28,    29,
    30,    31,    32,    33,    34,  1223,    35,  1225,    37,    38,
  1235,    40,    41,  1236,  1356,  1237,  1246,  1248,  1266,  1360,
  1361,  1362,  1363,  1364,  1365,  1367,  1369,  1371,    53,  1249,
  1267,  1269,  1270,  1273,  1271,  1272,  1295,  1296,  1274,  1297,
  1298,  1290,    54,    55,  1309,  1311,  1313,  1390,  1391,  1392,
  1393,  1394,  1395,  1396,  1314,  1398,  1317,  1400,  1344,  1353,
  1318,  1345,  1346,  1357,  1387,  1354,  1355,  1373,  1389,  1374,
  1397,  1399,  1401,  1402,  1420,  1410,  1411,  1412,  1448,  1416,
  1450,  1452,  1421,  1422,  1457,  1477,  1433,  1479,  1481,  1424,
  1425,  1426,  1428,  1430,  1432,  1453,  1483,    60,  1461,  1484,
  1462,  1463,  1199,    65,   711,   928,  1444,  1445,  1446,  1447,
    66,  1449,    67,  1451,     0,   930,     0,   932,     0,     0,
     0,   687,   937,   668,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1465,  1467,  1469,   458,     0,     0,     0,
     0,   956,  1476,     0,  1478,     0,  1480,    75,   533,     0,
     0,     0,     0,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     0,     0,     0,     0,    75,    76,
     0,     0,     0,     0,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    75,    76,     0,     0,     0,
     0,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    75,   877,     0,     0,     0,     0,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     0,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,  1079,   670,     0,  1080,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   535,   536,     0,     0,     0,     0,  1097,   100,   672,
     0,     0,   537,     0,     0,   156,     0,     0,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   213,   214,   215,   216,   217,     0,  1126,   100,
   218,     0,     0,   101,   673,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1082,     0,     0,     0,     0,    98,
    99,   204,   205,   206,   207,   208,   100,   688,     0,     0,
   101,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,    98,    99,     0,     0,
   710,     0,     0,   100,     0,     0,     0,   101,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   979,     0,     0,     0,     0,     0,  1181,
  1182,     0,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,  1200,   218,     0,   204,   205,   206,   207,
   208,   980,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,     0,     0,     0,  1107,     0,     0,     0,
     0,   204,   205,   206,   207,   208,     0,     0,     0,     0,
  1238,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,  1250,   218,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,  1109,     0,     0,   218,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,  1294,  1111,   218,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,  1113,   218,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   204,   205,
   206,   207,   208,     0,  1114,  1332,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,   204,   205,   206,   207,   208,  1115,     0,
     0,     0,  1358,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,     0,
     0,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
  1388,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   204,   205,   206,   207,   208,  1144,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,  1409,
     0,     0,   218,     0,     0,   204,   205,   206,   207,   208,
   471,     0,     0,  1423,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,   204,   205,
   206,   207,   208,   496,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,   204,   205,   206,   207,   208,   562,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,   204,   205,   206,   207,   208,
   793,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,    27,    28,
    29,    30,    31,    32,    33,    34,     0,    35,     0,    37,
    38,     0,    40,    41,     0,    -3,    22,     0,  1330,    23,
   204,   205,   206,   207,   208,     0,     0,     0,     0,    53,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,    54,    55,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,     0,    35,    36,    37,
    38,    39,    40,    41,     0,     0,     0,    42,    43,    44,
    45,    46,    47,     0,    48,    49,    50,    51,    52,    53,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   220,     0,     0,    54,    55,     0,     0,     0,    60,     0,
    56,    57,     0,    58,    59,    27,    28,    29,    30,    31,
    32,    33,    34,     0,    35,     0,    37,    38,     0,    40,
    41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    53,   462,     0,     0,
     0,     0,     0,     0,   221,   222,   223,     0,    60,     0,
    54,    55,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,     0,     0,     0,     0,     0,     0,     0,     0,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     0,   244,   245,   246,   247,   248,   249,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   204,   205,   206,   207,
   208,     0,     0,     0,     0,    60,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,   204,
   205,   206,   207,   208,     0,     0,     0,     0,   674,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,   204,   205,   206,   207,   208,     0,     0,     0,
     0,   734,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,   204,   205,   206,   207,   208,
     0,     0,     0,     0,   808,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,   204,   205,
   206,   207,   208,     0,     0,     0,     0,  1038,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,   900,     0,     0,   901,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1055,     0,     0,  1056,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1196,     0,     0,  1197,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,   204,   205,   206,   207,   208,     0,   416,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,   204,   205,   206,   207,   208,     0,
   421,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,   204,   205,   206,
   207,   208,     0,   423,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
   204,   205,   206,   207,   208,     0,   567,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,   204,   205,   206,   207,   208,     0,   571,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,   204,   205,   206,   207,
   208,     0,   572,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,   204,
   205,   206,   207,   208,     0,   706,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,   204,   205,   206,   207,   208,     0,   897,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,   204,   205,   206,   207,   208,
     0,  1118,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,   204,   205,
   206,   207,   208,     0,  1123,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,   204,   205,   206,   207,   208,     0,  1124,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,   204,   205,   206,   207,   208,     0,
  1125,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,   204,   205,   206,
   207,   208,     0,  1140,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
   204,   205,   206,   207,   208,     0,  1141,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,  1240,     0,     0,     0,     0,     0,  1161,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,   204,   205,   206,   207,
   208,     0,  1247,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,   204,
   205,   206,   207,   208,     0,  1343,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,   204,   205,   206,   207,   208,     0,  1372,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,   445,   346,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   346,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   415,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   417,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   418,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   420,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   424,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   425,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   430,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   467,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   470,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   476,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   477,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   478,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   479,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   480,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   481,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   482,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   483,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   484,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   485,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   487,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   488,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   489,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   490,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   491,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   492,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   555,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   558,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   568,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   569,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   573,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   574,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   575,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   576,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   577,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   619,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   622,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   676,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   735,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   736,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,   737,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,   738,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,   834,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,   899,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,   931,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,  1023,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,  1027,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,  1029,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,  1152,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,  1154,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,  1156,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,  1176,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,  1177,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,  1178,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,  1325,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,  1326,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,  1327,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,  1406,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     0,  1407,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,     0,  1408,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,     0,  1454,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,     0,  1455,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,     0,  1456,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
   445,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,   446,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,   486,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,   493,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,   494,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,   497,     0,     0,   495,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,   585,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,   586,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,   587,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,   704,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,   705,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
   831,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,   832,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,   844,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,   845,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,   884,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,   911,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,   912,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,   913,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,   914,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,   915,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
   916,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,   917,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,   918,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,   919,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,   920,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,   921,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,   922,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,   976,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1004,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1005,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1017,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1028,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1033,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1036,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1053,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,  1064,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,  1065,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,  1066,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1067,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1068,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1069,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1070,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1071,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1072,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1073,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,  1074,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,  1075,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,  1119,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1149,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1167,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1168,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1169,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1170,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1171,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1172,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,  1173,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,  1174,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,  1175,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1226,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1227,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1228,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1229,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1230,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1231,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1232,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,  1233,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,  1234,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,  1275,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1276,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1277,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1278,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1279,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1280,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1281,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1282,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,  1283,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,  1315,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,  1319,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1320,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1321,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1322,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1323,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1324,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1342,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1347,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,  1348,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,  1349,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,  1350,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1351,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1352,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1375,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1376,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1377,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1378,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1379,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218,     0,     0,     0,  1380,   204,   205,   206,   207,
   208,     0,     0,     0,     0,     0,   209,   210,   211,   212,
   267,   268,   215,   216,   217,     0,     0,     0,   218,     0,
     0,     0,  1403,   204,   205,   206,   207,   208,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   267,   268,   215,
   216,   217,     0,     0,     0,   218,     0,     0,     0,  1404,
   204,   205,   206,   207,   208,     0,     0,     0,     0,     0,
   209,   210,   211,   212,   267,   268,   215,   216,   217,     0,
     0,     0,   218,     0,     0,     0,  1405,   204,   205,   206,
   207,   208,     0,     0,     0,     0,     0,   209,   210,   211,
   212,   267,   268,   215,   216,   217,     0,     0,     0,   218,
     0,     0,     0,  1417,   204,   205,   206,   207,   208,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   267,   268,
   215,   216,   217,     0,     0,     0,   218,     0,     0,     0,
  1418,   204,   205,   206,   207,   208,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   267,   268,   215,   216,   217,
     0,     0,     0,   218,     0,     0,     0,  1419,   204,   205,
   206,   207,   208,     0,     0,     0,     0,     0,   209,   210,
   211,   212,   267,   268,   215,   216,   217,     0,     0,     0,
   218,     0,     0,     0,  1434,   204,   205,   206,   207,   208,
     0,     0,     0,     0,     0,   209,   210,   211,   212,   267,
   268,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     0,  1435,   204,   205,   206,   207,   208,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   267,   268,   215,   216,
   217,     0,     0,     0,   218,     0,     0,     0,  1436,   204,
   205,   206,   207,   208,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   267,   268,   215,   216,   217,     0,     0,
     0,   218
};

static const short yycheck[] = {     7,
   112,   304,     4,   990,     4,     6,    37,   925,     6,    81,
     4,     6,     4,    58,     4,     4,   169,    58,    26,     6,
   173,    60,    60,     6,     7,     4,    65,    65,     6,   146,
   147,     5,    43,    44,   157,   158,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   138,   851,   170,   165,   157,
   158,   157,   158,   157,   158,   860,     6,    44,   157,   158,
     7,   169,   867,   169,   172,   169,   172,     6,   172,    63,
     6,    63,   171,    63,    63,   157,   158,   157,   158,   159,
   160,   161,   165,   157,   158,   165,    50,    51,   171,   171,
    98,    99,   100,   101,   102,    84,   168,   171,     6,  1017,
     6,   157,   158,     7,     6,   168,     6,   115,   116,   117,
   118,   119,   165,    33,   170,     6,    36,    37,   171,   127,
   128,   129,   130,   168,   132,   133,   171,   135,   136,   137,
   171,   139,    33,   172,   172,    36,    37,   168,    39,     6,
   151,   157,   158,   154,   157,   158,    60,   155,   156,   160,
     7,    65,    33,   169,     6,    36,   169,   157,   158,   157,
   158,     7,   157,   158,   172,     6,   174,   175,   168,   171,
   171,   171,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   171,   171,   168,     6,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,  1199,  1018,     3,     4,   168,  1022,   157,   158,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   157,   158,   166,   167,   149,   150,   151,   152,   157,
   158,   157,   158,   169,     6,   157,   158,   157,   158,   267,
   268,   168,   166,   167,   171,   273,   157,   158,   276,   173,
   169,   170,   280,   159,   160,   161,   284,   285,   286,   165,
   288,   289,   290,   291,   292,   293,   294,   169,   170,   168,
   301,   302,   149,   150,   151,   152,   157,   158,   306,   307,
   308,     6,   313,   149,   150,   151,   152,    41,   169,   166,
   167,   319,   168,    36,    37,   323,    39,   166,   167,    37,
   166,   167,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,   169,   168,   168,   172,   157,   158,
   168,  1146,  1147,  1148,  1149,     8,     0,     1,  1153,     3,
   169,   157,   158,   168,   143,   144,   145,   146,   147,   168,
    37,    37,   171,   169,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    39,   169,   164,   165,   172,   169,   168,
     5,   172,   171,     6,    52,    53,    54,    55,   169,    57,
    37,   172,   403,   404,   405,   403,   404,   405,   406,   407,
   169,   171,   410,   172,   412,    93,    94,    95,    96,    97,
   169,  1216,  1217,   172,   169,  1220,   169,   172,     6,   172,
   169,   429,   169,   172,   169,   172,   434,   172,   172,   169,
   169,   442,   172,   172,   171,   171,   169,   445,   446,   172,
   164,   171,     5,   167,     6,     5,   454,   168,   168,   168,
    37,   173,   168,   461,   108,   109,   110,   111,   112,   113,
   114,   115,   168,   471,  1269,   168,   168,   475,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   486,   168,
   143,   144,   145,   146,   147,   493,   494,   495,   496,   168,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   168,
     5,   168,   165,   168,   168,     6,     6,   170,   811,     6,
     5,   168,  1317,   168,   173,   171,   168,   168,   171,   168,
   143,   144,   145,   146,   147,   536,   171,   535,   536,   537,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   168,
   551,  1346,   165,   171,   168,   171,   168,   168,     6,     6,
   662,   171,   168,   165,   562,   563,     5,   168,     0,     1,
   168,     3,   168,   168,   168,   168,   168,   168,   168,   168,
   168,   579,   168,   168,   585,   586,   587,   168,     3,     4,
     5,   170,   168,   168,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,   169,   174,   615,   616,   168,
   618,   168,   168,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   633,   631,   632,   165,   168,   168,  1433,   168,
   168,   642,     3,     4,     5,   168,   168,   168,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,   168,
   168,   168,   168,   173,     7,   169,   108,   109,   110,   111,
   112,   113,   114,   115,     7,   169,     7,     7,   981,     5,
    82,   689,   174,     5,     5,     5,     5,     5,     5,   126,
     6,     5,   134,   135,   702,   137,   704,   705,     5,     5,
     5,     5,     5,     5,   712,   713,   714,   715,   716,   717,
   718,   719,   720,   721,   722,   723,     5,     5,     5,     5,
     5,     5,     5,   731,     5,   733,     5,     5,     5,     5,
     5,   739,   157,   158,     6,   138,     3,     5,     4,   164,
   143,     5,     5,   168,     6,     6,   171,     6,   174,     7,
     6,   172,     7,     7,     7,     6,     6,   172,     7,     7,
     7,   873,   171,   166,   171,     7,     7,   170,   171,   168,
   140,   169,   169,   781,   169,   786,   169,    49,   169,   169,
   169,   169,   169,   169,   169,   793,   157,   158,   169,   169,
   798,   799,   169,   164,   169,   169,   169,   168,     5,     7,
   171,   812,   169,   814,   169,   816,   169,   169,   169,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   169,   169,   831,   832,   169,     6,   143,   144,   145,
   146,   147,   169,     6,   842,   169,   844,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   854,   170,   173,   165,
     7,     7,     7,   861,   862,   863,   169,   169,   169,   169,
   868,     7,   171,     7,   872,     7,   874,     7,     7,     7,
     7,   143,   144,   145,   146,   147,   884,     7,     7,     6,
     3,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     7,     7,   900,   165,   168,   168,   136,   168,   168,   168,
     3,     3,     3,   911,   912,   913,   914,   915,   916,   917,
   918,   919,   920,   921,   922,   172,   168,     3,     3,     3,
   159,     3,     4,   168,   168,   168,   934,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,   168,   168,
   168,     3,     3,     6,     3,     3,   967,   968,   969,   967,
   968,   969,   970,   971,   972,   973,     3,   975,   976,     3,
   143,   144,   145,   146,   147,     3,     6,   985,   986,   987,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     5,
     5,     3,   165,     3,   173,     6,  1004,  1005,     6,     6,
     6,     6,     6,  1011,   171,     6,    83,   173,   169,   169,
   174,   170,  1020,     4,     6,   169,     6,   170,   169,   169,
  1028,   170,   169,     6,   169,  1033,     6,   170,  1036,   170,
     6,     6,     6,   169,   169,   169,   169,   169,   169,     6,
     6,     6,   170,   169,   169,   169,     6,  1055,   169,   169,
     6,   170,     6,     6,     6,   169,  1064,  1065,  1066,  1067,
  1068,  1069,  1070,  1071,  1072,  1073,  1074,  1075,   173,   169,
     6,     6,     6,     4,  1082,   157,   158,   173,     7,     3,
    83,     6,   164,     3,     6,   159,   168,     6,     6,   171,
   143,   144,   145,   146,   147,     3,     6,     3,     3,     6,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     6,
     6,  1119,   165,   143,   144,   145,   146,   147,     3,     3,
     3,    84,     4,   153,   154,   155,   156,   157,   158,   159,
   160,   161,     6,   171,    80,   165,   172,  1145,   171,     6,
     6,   170,   169,   169,   169,    83,   170,   169,   169,   169,
   553,   554,   170,   556,   173,     6,   170,   560,   561,  1167,
  1168,  1169,  1170,  1171,  1172,  1173,  1174,  1175,   143,   144,
   145,   146,   147,   170,   170,  1183,   169,   171,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   169,  1196,   170,
   165,   143,   144,   145,   146,   147,     3,     6,     6,     3,
     6,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     6,     6,     6,   165,   617,     6,     6,   620,  1226,  1227,
  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1235,  1236,  1237,
     3,     6,  1240,     5,   173,     6,   639,   640,     4,   172,
     5,   171,   645,   646,     6,     4,   169,     5,   169,   652,
     6,   654,   169,   169,     6,   170,   170,   169,   169,  1267,
  1268,   170,     6,     6,     6,   169,   169,  1275,  1276,  1277,
  1278,  1279,  1280,  1281,  1282,  1283,  1284,   680,  1286,   682,
  1288,     6,     6,     6,  1292,     6,     6,   690,   691,   692,
     5,   169,   695,   696,   697,   698,   699,   700,   701,   172,
   169,   169,    80,     6,     6,   170,  1314,  1315,   170,   169,
   169,  1319,  1320,  1321,  1322,  1323,  1324,    33,    34,    35,
    36,    37,    38,    39,    40,   169,    42,   169,    44,    45,
   171,    47,    48,   171,  1342,   171,     5,     5,   172,  1347,
  1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,    64,     6,
   171,   169,   169,   172,   170,   170,     6,     6,   172,     6,
     6,    80,    78,    79,     6,     6,     6,  1375,  1376,  1377,
  1378,  1379,  1380,  1381,   171,  1383,   169,  1385,   142,   171,
   169,   169,   169,     6,     6,   171,   171,   169,     6,   170,
     6,     6,     6,   169,   171,  1403,  1404,  1405,     6,   169,
     6,     6,   171,   171,     6,     6,   169,     6,     6,  1417,
  1418,  1419,  1420,  1421,  1422,   170,     0,   133,   171,     0,
   171,   171,  1165,     6,   589,   836,  1434,  1435,  1436,  1437,
     6,  1439,     6,  1441,    -1,   838,    -1,   840,    -1,    -1,
    -1,   563,   845,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1461,  1462,  1463,   172,    -1,    -1,    -1,
    -1,   864,  1470,    -1,  1472,    -1,  1474,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    -1,    -1,    -1,    -1,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,  1007,     6,    -1,  1010,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   157,   158,    -1,    -1,    -1,    -1,  1030,   164,     6,
    -1,    -1,   168,    -1,    -1,   171,    -1,    -1,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,  1061,   164,
   165,    -1,    -1,   168,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   157,
   158,   143,   144,   145,   146,   147,   164,     6,    -1,    -1,
   168,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,   157,   158,    -1,    -1,
     6,    -1,    -1,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,  1142,
  1143,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,  1166,   165,    -1,   143,   144,   145,   146,
   147,     6,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
  1213,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,  1225,   165,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,     6,    -1,    -1,   165,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,  1270,     6,   165,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,     6,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,   144,
   145,   146,   147,    -1,     6,  1318,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,   143,   144,   145,   146,   147,     6,    -1,
    -1,    -1,  1345,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   143,   144,   145,   146,   147,     6,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,  1402,
    -1,    -1,   165,    -1,    -1,   143,   144,   145,   146,   147,
     8,    -1,    -1,  1416,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,   144,
   145,   146,   147,     8,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,   143,   144,   145,   146,   147,     8,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,   143,   144,   145,   146,   147,
     8,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    33,    34,
    35,    36,    37,    38,    39,    40,    -1,    42,    -1,    44,
    45,    -1,    47,    48,    -1,     0,     1,    -1,   141,     4,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    64,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    78,    79,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
    45,    46,    47,    48,    -1,    -1,    -1,    52,    53,    54,
    55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    36,    -1,    -1,    78,    79,    -1,    -1,    -1,   133,    -1,
    85,    86,    -1,    88,    89,    33,    34,    35,    36,    37,
    38,    39,    40,    -1,    42,    -1,    44,    45,    -1,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    64,   172,    -1,    -1,
    -1,    -1,    -1,    -1,    90,    91,    92,    -1,   133,    -1,
    78,    79,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
    -1,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,   133,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,   175,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,   175,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,   175,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,   175,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,    -1,    -1,   172,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,    -1,    -1,   172,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,    -1,    -1,   172,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,   143,   144,   145,   146,   147,    -1,   172,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,   143,   144,   145,   146,   147,    -1,
   172,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,   143,   144,   145,
   146,   147,    -1,   172,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
   143,   144,   145,   146,   147,    -1,   172,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,   143,   144,   145,   146,   147,    -1,   172,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,   143,   144,   145,   146,
   147,    -1,   172,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,
   144,   145,   146,   147,    -1,   172,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,   143,   144,   145,   146,   147,    -1,   172,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,   143,   144,   145,   146,   147,
    -1,   172,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,   144,
   145,   146,   147,    -1,   172,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,   143,   144,   145,   146,   147,    -1,   172,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,   143,   144,   145,   146,   147,    -1,
   172,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,   143,   144,   145,
   146,   147,    -1,   172,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
   143,   144,   145,   146,   147,    -1,   172,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,   136,    -1,    -1,    -1,    -1,    -1,   172,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,   143,   144,   145,   146,
   147,    -1,   172,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,
   144,   145,   146,   147,    -1,   172,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,   143,   144,   145,   146,   147,    -1,   172,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
    -1,   170,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,    -1,   170,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,    -1,   170,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,    -1,   170,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,   139,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,
   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,
    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,   159,
   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,
   153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,   145,
   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,   165,
    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,    -1,
    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,   158,
   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
   155,   156,   157,   158,   159,   160,   161,    -1,    -1,    -1,
   165,    -1,    -1,    -1,   169,   143,   144,   145,   146,   147,
    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   158,   159,   160,   161,    -1,    -1,    -1,   165,    -1,    -1,
    -1,   169,   143,   144,   145,   146,   147,    -1,    -1,    -1,
    -1,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,   143,
   144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   158,   159,   160,   161,    -1,    -1,
    -1,   165
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 150 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 164 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 171 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 188 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 189 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 190 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 191 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 196 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 201 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 212 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 215 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 219 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 225 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 231 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 238 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 244 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 248 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 252 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 259 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 263 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 268 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 272 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 276 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 280 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 284 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 288 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 292 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 296 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 302 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 308 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 312 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 316 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 320 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 324 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 329 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 339 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 359 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 362 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 368 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 369 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 370 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 379 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 382 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 67:
#line 387 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 398 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 402 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 409 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 428 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 430 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 435 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 440 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 447 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 449 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 454 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 459 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 466 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 468 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 473 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 478 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 485 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 487 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 493 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 499 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 506 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 508 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 514 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 520 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 527 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 529 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 535 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 541 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 548 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 550 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 557 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 566 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 573 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 575 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 582 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 591 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 598 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 600 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 607 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 616 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 623 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 625 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 633 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 642 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 649 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 651 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 659 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 668 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 675 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 677 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 685 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 694 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 710 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 132:
#line 716 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 133:
#line 724 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 134:
#line 732 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 740 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 748 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 756 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 767 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 139:
#line 780 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 140:
#line 798 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 815 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 836 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 853 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 874 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 891 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 912 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 929 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 950 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 967 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 988 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1005 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1026 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1043 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1066 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1091 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1120 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1145 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1174 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1199 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1230 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1254 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1261 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1267 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 164:
#line 1286 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 165:
#line 1297 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 166:
#line 1305 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1311 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1317 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 169:
#line 1336 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1342 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 171:
#line 1359 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 172:
#line 1365 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1371 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1377 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1383 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1389 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 177:
#line 1408 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 178:
#line 1420 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1426 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 180:
#line 1445 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 181:
#line 1468 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 182:
#line 1476 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 183:
#line 1480 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1486 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1492 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 186:
#line 1504 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 187:
#line 1510 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 188:
#line 1516 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1529 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 190:
#line 1534 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1539 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1544 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1551 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 194:
#line 1552 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1553 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1558 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 197:
#line 1562 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 198:
#line 1574 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 199:
#line 1592 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 200:
#line 1607 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 201:
#line 1635 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 202:
#line 1665 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 203:
#line 1669 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 204:
#line 1675 "Gmsh.y"
{
     Init();
     Draw();
   ;
    break;}
case 205:
#line 1680 "Gmsh.y"
{
     extern long Get_AnimTime();
     long sleep_time = Get_AnimTime();
     while(1){
       if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
     }
   ;
    break;}
case 206:
#line 1696 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 207:
#line 1709 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 208:
#line 1722 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 209:
#line 1761 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 210:
#line 1766 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 211:
#line 1772 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 212:
#line 1776 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 213:
#line 1780 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 214:
#line 1784 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 215:
#line 1788 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 216:
#line 1793 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 217:
#line 1801 "Gmsh.y"
{
    ;
    break;}
case 218:
#line 1804 "Gmsh.y"
{
    ;
    break;}
case 219:
#line 1810 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 220:
#line 1827 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 221:
#line 1838 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 222:
#line 1855 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 223:
#line 1872 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 224:
#line 1889 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 225:
#line 1910 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 226:
#line 1930 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 227:
#line 1950 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 228:
#line 1967 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 229:
#line 1992 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 230:
#line 2004 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 231:
#line 2005 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 232:
#line 2006 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 233:
#line 2007 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 234:
#line 2008 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 2012 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 236:
#line 2013 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 237:
#line 2014 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 238:
#line 2015 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 239:
#line 2016 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 240:
#line 2017 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 241:
#line 2018 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 242:
#line 2019 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 243:
#line 2020 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 244:
#line 2021 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 245:
#line 2022 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 246:
#line 2023 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 247:
#line 2024 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 248:
#line 2025 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 249:
#line 2026 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 250:
#line 2027 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 251:
#line 2028 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 252:
#line 2029 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 253:
#line 2030 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 254:
#line 2031 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 255:
#line 2032 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 256:
#line 2033 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 257:
#line 2034 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 258:
#line 2035 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2036 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2037 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2038 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2039 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2040 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 264:
#line 2041 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2042 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 266:
#line 2043 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2044 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2045 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2046 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2047 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 271:
#line 2048 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2049 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 273:
#line 2050 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 274:
#line 2051 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 275:
#line 2055 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 276:
#line 2056 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 277:
#line 2058 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 278:
#line 2067 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 279:
#line 2084 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 280:
#line 2105 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 281:
#line 2122 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 282:
#line 2143 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 283:
#line 2160 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 284:
#line 2183 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 285:
#line 2189 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 286:
#line 2203 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 287:
#line 2207 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 288:
#line 2211 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 289:
#line 2215 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 290:
#line 2219 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 291:
#line 2225 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 292:
#line 2229 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 293:
#line 2233 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 294:
#line 2237 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 295:
#line 2241 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 296:
#line 2267 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 297:
#line 2300 "Gmsh.y"
{
    ;
    break;}
case 298:
#line 2303 "Gmsh.y"
{
    ;
    break;}
case 299:
#line 2309 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2312 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2318 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2321 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 303:
#line 2325 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 304:
#line 2332 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 305:
#line 2337 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 306:
#line 2344 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2347 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 308:
#line 2353 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 309:
#line 2361 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 310:
#line 2366 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 311:
#line 2375 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 312:
#line 2379 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 313:
#line 2390 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 314:
#line 2394 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 315:
#line 2398 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 316:
#line 2403 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 317:
#line 2408 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2421 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

