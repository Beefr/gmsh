
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipsis	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTransfinite	305
#define	tComplex	306
#define	tPhysical	307
#define	tUsing	308
#define	tBump	309
#define	tProgression	310
#define	tPlugin	311
#define	tRotate	312
#define	tTranslate	313
#define	tSymmetry	314
#define	tDilate	315
#define	tExtrude	316
#define	tDuplicata	317
#define	tLoop	318
#define	tRecombine	319
#define	tDelete	320
#define	tCoherence	321
#define	tIntersect	322
#define	tAttractor	323
#define	tLayers	324
#define	tScalarTetrahedron	325
#define	tVectorTetrahedron	326
#define	tTensorTetrahedron	327
#define	tScalarTriangle	328
#define	tVectorTriangle	329
#define	tTensorTriangle	330
#define	tScalarLine	331
#define	tVectorLine	332
#define	tTensorLine	333
#define	tScalarPoint	334
#define	tVectorPoint	335
#define	tTensorPoint	336
#define	tText2D	337
#define	tText3D	338
#define	tBSpline	339
#define	tBezier	340
#define	tNurbs	341
#define	tOrder	342
#define	tWith	343
#define	tBounds	344
#define	tKnots	345
#define	tColor	346
#define	tColorTable	347
#define	tFor	348
#define	tIn	349
#define	tEndFor	350
#define	tIf	351
#define	tEndIf	352
#define	tExit	353
#define	tReturn	354
#define	tCall	355
#define	tFunction	356
#define	tMesh	357
#define	tB_SPLINE_SURFACE_WITH_KNOTS	358
#define	tB_SPLINE_CURVE_WITH_KNOTS	359
#define	tCARTESIAN_POINT	360
#define	tTRUE	361
#define	tFALSE	362
#define	tUNSPECIFIED	363
#define	tU	364
#define	tV	365
#define	tEDGE_CURVE	366
#define	tVERTEX_POINT	367
#define	tORIENTED_EDGE	368
#define	tPLANE	369
#define	tFACE_OUTER_BOUND	370
#define	tEDGE_LOOP	371
#define	tADVANCED_FACE	372
#define	tVECTOR	373
#define	tDIRECTION	374
#define	tAXIS2_PLACEMENT_3D	375
#define	tISO	376
#define	tENDISO	377
#define	tENDSEC	378
#define	tDATA	379
#define	tHEADER	380
#define	tFILE_DESCRIPTION	381
#define	tFILE_SCHEMA	382
#define	tFILE_NAME	383
#define	tMANIFOLD_SOLID_BREP	384
#define	tCLOSED_SHELL	385
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	386
#define	tFACE_BOUND	387
#define	tCYLINDRICAL_SURFACE	388
#define	tCONICAL_SURFACE	389
#define	tCIRCLE	390
#define	tTRIMMED_CURVE	391
#define	tGEOMETRIC_SET	392
#define	tCOMPOSITE_CURVE_SEGMENT	393
#define	tCONTINUOUS	394
#define	tCOMPOSITE_CURVE	395
#define	tTOROIDAL_SURFACE	396
#define	tPRODUCT_DEFINITION	397
#define	tPRODUCT_DEFINITION_SHAPE	398
#define	tSHAPE_DEFINITION_REPRESENTATION	399
#define	tELLIPSE	400
#define	tTrimmed	401
#define	tSolid	402
#define	tEndSolid	403
#define	tVertex	404
#define	tFacet	405
#define	tNormal	406
#define	tOuter	407
#define	tLoopSTL	408
#define	tEndLoop	409
#define	tEndFacet	410
#define	tAFFECTPLUS	411
#define	tAFFECTMINUS	412
#define	tAFFECTTIMES	413
#define	tAFFECTDIVIDE	414
#define	tOR	415
#define	tAND	416
#define	tEQUAL	417
#define	tNOTEQUAL	418
#define	tAPPROXEQUAL	419
#define	tLESSOREQUAL	420
#define	tGREATEROREQUAL	421
#define	tCROSSPRODUCT	422
#define	tPLUSPLUS	423
#define	tMINUSMINUS	424
#define	UNARYPREC	425

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.134 2001-12-16 05:16:37 remacle Exp $

#include <stdarg.h>
#ifndef _NOPLUGIN
#include "PluginManager.h"
#endif
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][256];
static char           tmpstring[1024];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);
static Post_View      *View;

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);

#line 71 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1700
#define	YYFLAG		-32768
#define	YYNTBASE	190

#define YYTRANSLATE(x) ((unsigned)(x) <= 425 ? yytranslate[x] : 283)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   177,     2,     2,     2,   175,     2,     2,   182,
   183,   173,   171,   187,   172,   186,   174,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   167,
     2,   169,   161,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   184,     2,   185,   181,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   188,     2,   189,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   162,   163,   164,   165,   166,   168,
   170,   176,   178,   179,   180
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   531,   539,   546,
   555,   556,   559,   562,   565,   568,   571,   574,   577,   580,
   583,   586,   589,   592,   595,   598,   600,   604,   605,   619,
   621,   625,   626,   640,   642,   646,   647,   661,   663,   667,
   668,   688,   690,   694,   695,   715,   717,   721,   722,   742,
   744,   748,   749,   775,   777,   781,   782,   808,   810,   814,
   815,   841,   843,   847,   848,   880,   882,   886,   887,   919,
   921,   925,   926,   958,   960,   964,   965,   979,   981,   985,
   986,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,  1021,
  1029,  1039,  1046,  1050,  1057,  1064,  1074,  1081,  1091,  1097,
  1106,  1115,  1127,  1134,  1144,  1154,  1164,  1172,  1181,  1194,
  1201,  1209,  1217,  1230,  1238,  1246,  1256,  1274,  1283,  1292,
  1300,  1308,  1320,  1329,  1342,  1351,  1374,  1395,  1404,  1413,
  1422,  1430,  1439,  1445,  1457,  1463,  1473,  1475,  1477,  1479,
  1480,  1483,  1490,  1497,  1504,  1509,  1514,  1521,  1525,  1529,
  1533,  1541,  1544,  1547,  1554,  1563,  1572,  1583,  1585,  1588,
  1590,  1594,  1599,  1601,  1610,  1623,  1638,  1647,  1660,  1675,
  1676,  1689,  1690,  1707,  1708,  1727,  1736,  1749,  1764,  1765,
  1778,  1779,  1796,  1797,  1816,  1818,  1821,  1831,  1839,  1842,
  1849,  1859,  1869,  1878,  1887,  1896,  1903,  1908,  1911,  1914,
  1916,  1918,  1920,  1922,  1924,  1926,  1930,  1933,  1936,  1939,
  1943,  1947,  1951,  1955,  1959,  1963,  1967,  1971,  1975,  1979,
  1983,  1987,  1991,  1995,  2001,  2006,  2011,  2016,  2021,  2026,
  2031,  2036,  2041,  2046,  2051,  2058,  2063,  2068,  2073,  2078,
  2083,  2088,  2095,  2102,  2109,  2114,  2119,  2124,  2129,  2134,
  2139,  2144,  2149,  2154,  2159,  2164,  2171,  2176,  2181,  2186,
  2191,  2196,  2201,  2208,  2215,  2222,  2227,  2229,  2231,  2233,
  2235,  2237,  2242,  2245,  2251,  2255,  2262,  2267,  2275,  2277,
  2280,  2283,  2287,  2291,  2303,  2313,  2321,  2329,  2330,  2334,
  2336,  2340,  2341,  2345,  2349,  2351,  2355,  2357,  2359,  2363,
  2368,  2372,  2378,  2382,  2387,  2394,  2402,  2404,  2406,  2410,
  2414,  2424,  2432,  2434,  2440,  2444,  2451,  2453,  2457,  2459,
  2466,  2471,  2476,  2483,  2490
};

static const short yyrhs[] = {   193,
     0,   192,     0,   198,     0,     1,     6,     0,     3,     0,
   172,     3,     0,   148,     0,   151,   152,   191,   191,   191,
   153,   154,   150,   191,   191,   191,   150,   191,   191,   191,
   150,   191,   191,   191,   155,   156,     0,   149,     0,     0,
   193,   194,     0,   195,     0,   197,     0,   196,     0,   122,
     6,     0,   123,     6,     0,   125,     6,     0,   124,     6,
     0,   126,     6,     0,   127,   182,   272,   187,     5,   183,
     6,     0,   128,   182,   272,   183,     6,     0,   129,   182,
     5,   187,     5,   187,   272,   187,   272,   187,     5,   187,
     5,   187,     5,   183,     6,     0,     3,     7,   106,   182,
     5,   187,   270,   183,     6,     0,     3,     7,   105,   182,
     5,   187,   268,   187,   276,   187,   267,   187,   267,   187,
   267,   187,   276,   187,   276,   187,   267,   183,     6,     0,
     3,     7,   104,   182,     5,   187,   268,   187,   268,   187,
   274,   187,   267,   187,   267,   187,   267,   187,   267,   187,
   276,   187,   276,   187,   276,   187,   276,   187,   267,   183,
     6,     0,     3,     7,   112,   182,     5,   187,     3,   187,
     3,   187,     3,   187,   267,   183,     6,     0,     3,     7,
   116,   182,     5,   187,     3,   187,   267,   183,     6,     0,
     3,     7,   133,   182,     5,   187,     3,   187,   267,   183,
     6,     0,     3,     7,   114,   182,     5,   187,   173,   187,
   173,   187,   268,   187,   267,   183,     6,     0,     3,     7,
   117,   182,     5,   187,   276,   183,     6,     0,     3,     7,
   118,   182,     5,   187,   276,   187,     3,   187,   267,   183,
     6,     0,     3,     7,   113,   182,     5,   187,     3,   183,
     6,     0,     3,     7,   119,   182,     5,   187,     3,   187,
   268,   183,     6,     0,     3,     7,   121,   182,     5,   187,
     3,   187,     3,   187,     3,   183,     6,     0,     3,     7,
   120,   182,     5,   187,   270,   183,     6,     0,     3,     7,
   115,   182,     5,   187,     3,   183,     6,     0,     3,     7,
    41,   182,     5,   187,     3,   187,     3,   183,     6,     0,
     3,     7,   131,   182,     5,   187,   276,   183,     6,     0,
     3,     7,   132,   182,     5,   187,   276,   187,     3,   183,
     6,     0,     3,     7,   130,   182,     5,   187,     3,   183,
     6,     0,     3,     7,   134,   182,     5,   187,     3,   187,
   268,   183,     6,     0,     3,     7,   135,   182,     5,   187,
     3,   187,   268,   187,   268,   183,     6,     0,     3,     7,
   142,   182,     5,   187,     3,   187,   268,   187,   268,   183,
     6,     0,     3,     7,   136,   182,     5,   187,     3,   187,
   268,   183,     6,     0,     3,     7,   146,   182,     5,   187,
     3,   187,   268,   187,   268,   183,     6,     0,     3,     7,
   137,   182,     5,   187,     3,   187,   276,   187,   276,   187,
   267,   187,   267,   183,     6,     0,     3,     7,   138,   182,
     5,   187,   276,   183,     6,     0,     3,     7,   139,   182,
   140,   187,   267,   187,     3,   183,     6,     0,     3,     7,
   141,   182,     5,   187,   276,   187,   267,   183,     6,     0,
     3,     7,   143,   182,     5,   187,     5,   187,     3,   187,
     3,   183,     6,     0,     3,     7,   144,   182,     5,   187,
     5,   187,     3,   183,     6,     0,     3,     7,   145,   182,
     3,   187,     3,   183,     6,     0,     0,   198,   199,     0,
   201,     0,   200,     0,   247,     0,   248,     0,   249,     0,
   252,     0,   253,     0,   256,     0,   265,     0,   266,     0,
   255,     0,   254,     0,    33,   182,     5,   183,     6,     0,
    33,   182,     5,   187,   278,   183,     6,     0,     4,     5,
   188,   202,   189,     6,     0,     4,     5,     4,   270,   188,
   202,   189,     6,     0,     0,   202,   204,     0,   202,   207,
     0,   202,   210,     0,   202,   213,     0,   202,   216,     0,
   202,   219,     0,   202,   222,     0,   202,   225,     0,   202,
   228,     0,   202,   231,     0,   202,   234,     0,   202,   237,
     0,   202,   240,     0,   202,   243,     0,   268,     0,   203,
   187,   268,     0,     0,    80,   182,   268,   187,   268,   187,
   268,   183,   205,   188,   203,   189,     6,     0,   268,     0,
   206,   187,   268,     0,     0,    81,   182,   268,   187,   268,
   187,   268,   183,   208,   188,   206,   189,     6,     0,   268,
     0,   209,   187,   268,     0,     0,    82,   182,   268,   187,
   268,   187,   268,   183,   211,   188,   209,   189,     6,     0,
   268,     0,   212,   187,   268,     0,     0,    77,   182,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   183,   214,   188,   212,   189,     6,     0,   268,     0,   215,
   187,   268,     0,     0,    78,   182,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   183,   217,   188,
   215,   189,     6,     0,   268,     0,   218,   187,   268,     0,
     0,    79,   182,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   183,   220,   188,   218,   189,     6,
     0,   268,     0,   221,   187,   268,     0,     0,    74,   182,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   183,   223,   188,
   221,   189,     6,     0,   268,     0,   224,   187,   268,     0,
     0,    75,   182,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   183,   226,   188,   224,   189,     6,     0,   268,     0,   227,
   187,   268,     0,     0,    76,   182,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   187,   268,   183,   229,   188,   227,   189,     6,     0,
   268,     0,   230,   187,   268,     0,     0,    71,   182,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   183,   232,   188,   230,   189,     6,     0,   268,
     0,   233,   187,   268,     0,     0,    72,   182,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   187,   268,   187,   268,   187,   268,   187,   268,   187,
   268,   183,   235,   188,   233,   189,     6,     0,   268,     0,
   236,   187,   268,     0,     0,    73,   182,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   187,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   183,   238,   188,   236,   189,     6,     0,   282,     0,   239,
   187,   282,     0,     0,    83,   182,   268,   187,   268,   187,
   268,   183,   241,   188,   239,   189,     6,     0,   282,     0,
   242,   187,   282,     0,     0,    84,   182,   268,   187,   268,
   187,   268,   187,   268,   183,   244,   188,   242,   189,     6,
     0,     7,     0,   157,     0,   158,     0,   159,     0,   160,
     0,   178,     0,   179,     0,     4,   245,   268,     6,     0,
     4,   184,   268,   185,   245,   268,     6,     0,     4,   184,
   188,   278,   189,   185,   245,   276,     6,     0,     4,   184,
   185,     7,   276,     6,     0,     4,   246,     6,     0,     4,
   184,   268,   185,   246,     6,     0,     4,   186,     4,     7,
   282,     6,     0,     4,   184,   268,   185,   186,     4,     7,
   282,     6,     0,     4,   186,     4,   245,   268,     6,     0,
     4,   184,   268,   185,   186,     4,   245,   268,     6,     0,
     4,   186,     4,   246,     6,     0,     4,   184,   268,   185,
   186,     4,   246,     6,     0,     4,   186,    92,   186,     4,
     7,   279,     6,     0,     4,   184,   268,   185,   186,    92,
   186,     4,     7,   279,     6,     0,     4,   186,    93,     7,
   280,     6,     0,     4,   184,   268,   185,   186,    93,     7,
   280,     6,     0,    57,   182,     4,   183,   186,     4,     7,
   268,     6,     0,    57,   182,     4,   183,   186,     4,     7,
   282,     6,     0,    38,   182,   268,   183,     7,   270,     6,
     0,    53,    38,   182,   268,   183,     7,   276,     6,     0,
    69,    38,   276,     7,   188,   268,   187,   268,   187,   268,
   189,     6,     0,    45,    46,   276,     7,   268,     6,     0,
    41,   182,   268,   183,     7,   276,     6,     0,    43,   182,
   268,   183,     7,   276,     6,     0,    69,    41,   276,     7,
   188,   268,   187,   268,   187,   268,   189,     6,     0,    39,
   182,   268,   183,     7,   276,     6,     0,    40,   182,   268,
   183,     7,   276,     6,     0,    39,   182,   268,   183,     7,
   276,    49,   270,     6,     0,    47,   182,   268,   183,     7,
   188,   268,   187,   268,   187,     5,   187,     5,   187,     5,
   189,     6,     0,    53,    41,   182,   268,   183,     7,   276,
     6,     0,    41,    64,   182,   268,   183,     7,   276,     6,
     0,    85,   182,   268,   183,     7,   276,     6,     0,    86,
   182,   268,   183,     7,   276,     6,     0,    87,   182,   268,
   183,     7,   276,    91,   276,    88,   268,     6,     0,    49,
    42,   182,   268,   183,     7,   276,     6,     0,   147,    42,
   182,   268,   183,     7,   188,   268,   187,   276,   189,     6,
     0,    50,    42,   182,   268,   183,     7,   276,     6,     0,
    87,    42,    89,    90,   182,   268,   183,     7,   274,    91,
   188,   276,   187,   276,   189,    88,   188,   268,   187,   268,
   189,     6,     0,    87,    42,   182,   268,   183,     7,   274,
    91,   188,   276,   187,   276,   189,    88,   188,   268,   187,
   268,   189,     6,     0,    53,    42,   182,   268,   183,     7,
   276,     6,     0,    42,    64,   182,   268,   183,     7,   276,
     6,     0,    52,    44,   182,   268,   183,     7,   276,     6,
     0,    44,   182,   268,   183,     7,   276,     6,     0,    53,
    44,   182,   268,   183,     7,   276,     6,     0,    59,   270,
   188,   250,   189,     0,    58,   188,   270,   187,   270,   187,
   268,   189,   188,   250,   189,     0,    60,   270,   188,   250,
   189,     0,    61,   188,   270,   187,   268,   189,   188,   250,
   189,     0,   252,     0,   251,     0,   249,     0,     0,   251,
   248,     0,   251,    38,   188,   278,   189,     6,     0,   251,
    41,   188,   278,   189,     6,     0,   251,    42,   188,   278,
   189,     6,     0,    63,   188,   251,   189,     0,    66,   188,
   251,   189,     0,    66,     4,   184,   268,   185,     6,     0,
    66,   103,     6,     0,     4,   282,     6,     0,     4,   268,
     6,     0,    57,   182,     4,   183,   186,     4,     6,     0,
    99,     6,     0,    37,     6,     0,    94,   182,   268,     8,
   268,   183,     0,    94,   182,   268,     8,   268,     8,   268,
   183,     0,    94,     4,    95,   188,   268,     8,   268,   189,
     0,    94,     4,    95,   188,   268,     8,   268,     8,   268,
   189,     0,    96,     0,   102,     4,     0,   100,     0,   101,
     4,     6,     0,    97,   182,   268,   183,     0,    98,     0,
    62,    38,   188,   268,   187,   270,   189,     6,     0,    62,
    38,   188,   268,   187,   270,   187,   270,   187,   268,   189,
     6,     0,    62,    38,   188,   268,   187,   270,   187,   270,
   187,   270,   187,   268,   189,     6,     0,    62,    41,   188,
   268,   187,   270,   189,     6,     0,    62,    41,   188,   268,
   187,   270,   187,   270,   187,   268,   189,     6,     0,    62,
    41,   188,   268,   187,   270,   187,   270,   187,   270,   187,
   268,   189,     6,     0,     0,    62,    41,   188,   268,   187,
   270,   189,   257,   188,   263,   189,     6,     0,     0,    62,
    41,   188,   268,   187,   270,   187,   270,   187,   268,   189,
   258,   188,   263,   189,     6,     0,     0,    62,    41,   188,
   268,   187,   270,   187,   270,   187,   270,   187,   268,   189,
   259,   188,   263,   189,     6,     0,    62,    42,   188,   268,
   187,   270,   189,     6,     0,    62,    42,   188,   268,   187,
   270,   187,   270,   187,   268,   189,     6,     0,    62,    42,
   188,   268,   187,   270,   187,   270,   187,   270,   187,   268,
   189,     6,     0,     0,    62,    42,   188,   268,   187,   270,
   189,   260,   188,   263,   189,     6,     0,     0,    62,    42,
   188,   268,   187,   270,   187,   270,   187,   268,   189,   261,
   188,   263,   189,     6,     0,     0,    62,    42,   188,   268,
   187,   270,   187,   270,   187,   270,   187,   268,   189,   262,
   188,   263,   189,     6,     0,   264,     0,   263,   264,     0,
    70,   188,   276,   187,   276,   187,   276,   189,     6,     0,
    70,   188,   276,   187,   276,   189,     6,     0,    65,     6,
     0,    51,    41,   276,     7,   268,     6,     0,    51,    41,
   276,     7,   268,    54,    56,   268,     6,     0,    51,    41,
   276,     7,   268,    54,    55,   268,     6,     0,    51,    42,
   188,   268,   189,     7,   276,     6,     0,    48,    42,   188,
   268,   189,     7,   276,     6,     0,    51,    44,   188,   268,
   189,     7,   276,     6,     0,    65,    42,   276,     7,   268,
     6,     0,    65,    42,   276,     6,     0,    67,     6,     0,
    68,     6,     0,   107,     0,   108,     0,   109,     0,   110,
     0,   111,     0,   269,     0,   182,   268,   183,     0,   172,
   268,     0,   171,   268,     0,   177,   268,     0,   268,   172,
   268,     0,   268,   171,   268,     0,   268,   173,   268,     0,
   268,   174,   268,     0,   268,   175,   268,     0,   268,   181,
   268,     0,   268,   167,   268,     0,   268,   169,   268,     0,
   268,   168,   268,     0,   268,   170,   268,     0,   268,   164,
   268,     0,   268,   165,   268,     0,   268,   163,   268,     0,
   268,   162,   268,     0,   268,   161,   268,     8,   268,     0,
    12,   182,   268,   183,     0,    13,   182,   268,   183,     0,
    14,   182,   268,   183,     0,    15,   182,   268,   183,     0,
    16,   182,   268,   183,     0,    17,   182,   268,   183,     0,
    18,   182,   268,   183,     0,    19,   182,   268,   183,     0,
    20,   182,   268,   183,     0,    22,   182,   268,   183,     0,
    23,   182,   268,   187,   268,   183,     0,    24,   182,   268,
   183,     0,    25,   182,   268,   183,     0,    26,   182,   268,
   183,     0,    27,   182,   268,   183,     0,    28,   182,   268,
   183,     0,    29,   182,   268,   183,     0,    30,   182,   268,
   187,   268,   183,     0,    31,   182,   268,   187,   268,   183,
     0,    32,   182,   268,   187,   268,   183,     0,    21,   182,
   268,   183,     0,    12,   184,   268,   185,     0,    13,   184,
   268,   185,     0,    14,   184,   268,   185,     0,    15,   184,
   268,   185,     0,    16,   184,   268,   185,     0,    17,   184,
   268,   185,     0,    18,   184,   268,   185,     0,    19,   184,
   268,   185,     0,    20,   184,   268,   185,     0,    22,   184,
   268,   185,     0,    23,   184,   268,   187,   268,   185,     0,
    24,   184,   268,   185,     0,    25,   184,   268,   185,     0,
    26,   184,   268,   185,     0,    27,   184,   268,   185,     0,
    28,   184,   268,   185,     0,    29,   184,   268,   185,     0,
    30,   184,   268,   187,   268,   185,     0,    31,   184,   268,
   187,   268,   185,     0,    32,   184,   268,   187,   268,   185,
     0,    21,   184,   268,   185,     0,     3,     0,     9,     0,
    10,     0,    11,     0,     4,     0,     4,   184,   268,   185,
     0,     4,   246,     0,     4,   184,   268,   185,   246,     0,
     4,   186,     4,     0,     4,   184,   268,   185,   186,     4,
     0,     4,   186,     4,   246,     0,     4,   184,   268,   185,
   186,     4,   246,     0,   271,     0,   172,   270,     0,   171,
   270,     0,   270,   172,   270,     0,   270,   171,   270,     0,
   188,   268,   187,   268,   187,   268,   187,   268,   187,   268,
   189,     0,   188,   268,   187,   268,   187,   268,   187,   268,
   189,     0,   188,   268,   187,   268,   187,   268,   189,     0,
   182,   268,   187,   268,   187,   268,   183,     0,     0,   182,
   273,   183,     0,     5,     0,   273,   187,     5,     0,     0,
   188,   275,   189,     0,   182,   275,   183,     0,   276,     0,
   275,   187,   276,     0,   268,     0,   277,     0,   188,   278,
   189,     0,   172,   188,   278,   189,     0,   268,     8,   268,
     0,   268,     8,   268,     8,   268,     0,     4,   184,   185,
     0,   172,     4,   184,   185,     0,     4,   184,   188,   278,
   189,   185,     0,   172,     4,   184,   188,   278,   189,   185,
     0,   268,     0,   277,     0,   278,   187,   268,     0,   278,
   187,   277,     0,   188,   268,   187,   268,   187,   268,   187,
   268,   189,     0,   188,   268,   187,   268,   187,   268,   189,
     0,     4,     0,     4,   186,    92,   186,     4,     0,   188,
   281,   189,     0,     4,   184,   268,   185,   186,    93,     0,
   279,     0,   281,   187,   279,     0,     5,     0,    35,   182,
   282,   187,   282,   183,     0,    36,   182,   282,   183,     0,
    34,   182,   282,   183,     0,    34,   182,   282,   187,   278,
   183,     0,    34,   182,     4,   186,     4,   183,     0,    34,
   182,     4,   184,   268,   185,   186,     4,   183,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   154,   156,   157,   158,   165,   167,   170,   178,   192,   204,
   206,   209,   211,   212,   215,   221,   226,   227,   228,   231,
   235,   238,   244,   249,   255,   263,   268,   272,   278,   283,
   287,   292,   296,   299,   304,   308,   312,   316,   321,   325,
   328,   332,   336,   340,   344,   348,   352,   355,   359,   362,
   366,   369,   378,   382,   388,   390,   391,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   403,   408,   425,   430,
   436,   441,   442,   443,   444,   445,   446,   447,   448,   449,
   450,   451,   452,   453,   454,   457,   460,   464,   470,   476,
   479,   483,   489,   495,   498,   502,   508,   514,   517,   521,
   529,   535,   538,   542,   550,   556,   559,   563,   571,   577,
   580,   584,   596,   602,   605,   609,   621,   627,   630,   634,
   646,   652,   655,   659,   672,   678,   681,   685,   698,   704,
   707,   711,   724,   730,   736,   743,   751,   757,   763,   770,
   778,   789,   791,   792,   793,   794,   796,   798,   800,   831,
   865,   912,   927,   936,   951,   963,   977,  1000,  1024,  1036,
  1050,  1062,  1076,  1096,  1118,  1130,  1148,  1159,  1165,  1184,
  1198,  1204,  1210,  1229,  1235,  1241,  1257,  1264,  1270,  1276,
  1287,  1298,  1323,  1329,  1348,  1369,  1377,  1383,  1389,  1398,
  1404,  1410,  1422,  1428,  1433,  1438,  1445,  1447,  1448,  1451,
  1456,  1461,  1476,  1491,  1512,  1530,  1538,  1543,  1554,  1622,
  1642,  1649,  1653,  1673,  1685,  1695,  1716,  1737,  1758,  1764,
  1769,  1774,  1778,  1788,  1797,  1804,  1813,  1818,  1823,  1828,
  1833,  1838,  1843,  1848,  1853,  1861,  1866,  1871,  1876,  1881,
  1887,  1893,  1899,  1905,  1913,  1917,  1922,  1949,  1973,  1983,
  2002,  2020,  2038,  2060,  2081,  2102,  2116,  2137,  2142,  2153,
  2155,  2156,  2157,  2158,  2161,  2163,  2164,  2165,  2166,  2167,
  2168,  2169,  2170,  2177,  2178,  2179,  2180,  2181,  2182,  2183,
  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,  2192,  2193,
  2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,  2202,  2203,
  2204,  2205,  2206,  2207,  2208,  2210,  2211,  2212,  2213,  2214,
  2215,  2216,  2217,  2218,  2219,  2220,  2221,  2222,  2223,  2224,
  2225,  2226,  2227,  2228,  2229,  2230,  2235,  2240,  2241,  2242,
  2246,  2257,  2274,  2285,  2304,  2320,  2336,  2352,  2369,  2374,
  2378,  2382,  2386,  2391,  2396,  2400,  2404,  2410,  2414,  2419,
  2423,  2428,  2432,  2436,  2442,  2448,  2455,  2461,  2465,  2469,
  2479,  2486,  2497,  2511,  2527,  2547,  2571,  2577,  2581,  2585,
  2596,  2601,  2612,  2617,  2635,  2640,  2653,  2659,  2665,  2670,
  2678,  2691,  2695,  2713,  2727
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence",
"tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tText2D",
"tText3D","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn",
"tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"Text2DValues","Text2D","@13","Text3DValues","Text3D","@14","NumericAffectation",
"NumericIncrement","Affectation","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Command","Loop","Extrude","@15","@16","@17","@18","@19",
"@20","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   190,   190,   190,   190,   191,   191,   192,   192,   192,   193,
   193,   194,   194,   194,   195,   195,   195,   195,   195,   196,
   196,   196,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   198,   198,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   200,   200,   201,   201,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   203,   203,   205,   204,   206,
   206,   208,   207,   209,   209,   211,   210,   212,   212,   214,
   213,   215,   215,   217,   216,   218,   218,   220,   219,   221,
   221,   223,   222,   224,   224,   226,   225,   227,   227,   229,
   228,   230,   230,   232,   231,   233,   233,   235,   234,   236,
   236,   238,   237,   239,   239,   241,   240,   242,   242,   244,
   243,   245,   245,   245,   245,   245,   246,   246,   247,   247,
   247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   247,   247,   247,   247,   247,   247,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   249,   249,   249,   249,   250,   250,   250,   251,
   251,   251,   251,   251,   252,   253,   253,   253,   254,   254,
   254,   254,   254,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   255,   256,   256,   256,   256,   256,   256,   257,
   256,   258,   256,   259,   256,   256,   256,   256,   260,   256,
   261,   256,   262,   256,   263,   263,   264,   264,   264,   265,
   265,   265,   265,   265,   265,   265,   265,   266,   266,   267,
   267,   267,   267,   267,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   270,   270,
   270,   270,   270,   271,   271,   271,   271,   272,   272,   273,
   273,   274,   274,   274,   275,   275,   276,   276,   276,   276,
   277,   277,   277,   277,   277,   277,   278,   278,   278,   278,
   279,   279,   279,   279,   280,   280,   281,   281,   282,   282,
   282,   282,   282,   282,   282
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     7,     6,     8,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    13,     1,     3,     0,
    15,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,    12,     7,     7,     9,    17,     8,     8,     7,
     7,    11,     8,    12,     8,    22,    20,     8,     8,     8,
     7,     8,     5,    11,     5,     9,     1,     1,     1,     0,
     2,     6,     6,     6,     4,     4,     6,     3,     3,     3,
     7,     2,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     8,    12,    14,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     1,     2,     9,     7,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     4,     2,     5,     3,     6,     4,     7,     1,     2,
     2,     3,     3,    11,     9,     7,     7,     0,     3,     1,
     3,     0,     3,     3,     1,     3,     1,     1,     3,     4,
     3,     5,     3,     4,     6,     7,     1,     1,     3,     3,
     9,     7,     1,     5,     3,     6,     1,     3,     1,     6,
     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   218,     0,   223,     0,
   220,     0,     0,     0,    54,    56,    55,    57,    58,    59,
    60,    61,    66,    65,    62,    63,    64,     5,     0,     0,
     0,    15,    16,    18,    17,    19,   348,   348,     0,   327,
   331,   379,   142,   328,   329,   330,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   143,   144,   145,   146,     0,     0,     0,   147,   148,     0,
     0,     0,     0,     0,     0,   265,     0,     0,   213,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   339,     0,     0,
     0,     0,     0,   200,     0,     0,     0,   200,   258,   259,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   212,
     0,   219,     0,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   333,     0,    71,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   268,
   267,   269,     0,     0,     0,     0,     0,     0,     0,     0,
   153,   210,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   209,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
   357,     0,   358,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   341,   340,     0,
     0,     0,     0,   200,   200,     0,     0,     0,     0,     0,
     0,     0,   208,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   221,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   350,     0,     0,
     0,     0,     0,   335,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   379,
     0,     0,     0,   266,     0,     0,   367,   368,     0,     0,
   142,     0,     0,     0,     0,   149,     0,   283,   282,   280,
   281,   276,   278,   277,   279,   271,   270,   272,   273,   274,
   275,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   331,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   343,   342,   199,     0,   198,   197,     0,
     0,     0,     0,     0,     0,     0,     0,   205,   201,   257,
     0,     0,   206,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   222,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   349,     0,     0,    21,     0,
   332,   337,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,   285,   306,   286,   307,   287,   308,   288,   309,
   289,   310,   290,   311,   291,   312,   292,   313,   293,   314,
   305,   326,   294,   315,     0,     0,   296,   317,   297,   318,
   298,   319,   299,   320,   300,   321,   301,   322,     0,     0,
     0,     0,     0,     0,     0,     0,   382,     0,     0,   381,
     0,     0,     0,     0,     0,     0,     0,     0,   159,     0,
     0,     0,     0,     0,    67,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   363,     0,     0,     0,   359,   361,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   193,   195,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     0,   348,     0,   334,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    69,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   152,   369,   370,     0,     0,     0,     0,     0,
   154,   155,   157,     0,     0,   373,     0,   377,     0,   163,
   284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   364,     0,   360,     0,   170,     0,     0,     0,     0,
   250,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   256,   207,     0,     0,     0,     0,     0,   352,     0,     0,
     0,   214,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   260,   261,   262,
   263,   264,     0,     0,     0,     0,     0,     0,     0,    20,
     0,   336,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   295,   316,   302,
   323,   303,   324,   304,   325,     0,   384,   383,   380,     0,
   142,     0,     0,     0,     0,   150,     0,     0,     0,     0,
     0,   375,    68,   167,   174,     0,   175,     0,   171,     0,
   172,   191,     0,     0,   362,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   211,     0,
     0,     0,     0,   200,     0,     0,     0,   230,     0,   239,
     0,     0,     0,     0,     0,   180,   181,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   348,   338,    70,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   160,     0,     0,
   161,     0,     0,     0,   378,     0,   179,   189,   365,     0,
     0,   254,   183,   185,     0,     0,   253,   255,   190,   168,
   178,   188,   192,     0,     0,     0,   347,     0,   346,     0,
     0,   224,     0,   227,     0,     0,   236,     0,   202,   203,
   204,     0,     0,   352,     0,   355,     0,     0,     0,     0,
   216,   215,     0,     0,     0,     0,     0,    23,     0,    32,
     0,    36,     0,    30,     0,     0,    35,     0,    40,    38,
     0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
     0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   151,   156,   158,     0,   164,     0,     0,     0,   176,   366,
     0,   252,   251,   165,   166,   200,     0,   196,     0,     0,
     0,     0,     0,     0,     0,     0,   354,     0,   353,     0,
     0,     0,     0,     0,     0,   352,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   385,     0,   376,   374,     0,     0,     0,     0,   345,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   245,
     0,     0,     0,     0,     0,     0,   356,     0,     0,   217,
     0,     0,    37,     0,     0,     0,     0,    27,     0,    33,
     0,    39,    28,    41,     0,    44,     0,    48,    49,     0,
     0,    51,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   162,     0,
     0,   194,     0,     0,     0,     0,   232,     0,   249,     0,
     0,   246,   241,     0,     0,     0,     0,     0,     0,   182,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    88,    92,    96,   136,     0,     0,   372,
     0,   344,   225,     0,   228,     0,     0,     0,   231,   237,
     0,     0,   240,   169,   173,     0,     0,   184,     0,     0,
     0,     0,     0,    31,    34,    42,     0,    43,    50,    45,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   234,
     0,     0,   243,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   140,   371,     0,   226,     0,
   229,     0,     0,     0,   238,     0,     0,     0,     0,     0,
     0,    26,    29,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    86,     0,    90,     0,    94,
     0,   134,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   233,     0,     0,   248,
   242,     0,     0,     0,     0,     0,     0,    46,    22,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    87,    89,
    91,    93,    95,    97,   135,   137,     0,   138,   177,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   100,   104,   108,     0,     0,   235,   247,
   244,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,   141,     0,     0,     8,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   187,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    98,     0,   102,     0,   106,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   186,     0,    24,     0,     0,     0,     0,     0,
     0,    99,   101,   103,   105,   107,   109,     0,     0,     0,
     0,   112,   116,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   110,     0,   114,     0,   118,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   111,   113,   115,   117,   119,   121,     0,   124,
   128,   132,    25,     0,     0,     0,     0,     0,     0,     0,
   122,     0,   126,     0,   130,     0,     0,     0,     0,     0,
     0,   123,   125,   127,   129,   131,   133,     0,     0,     0
};

static const short yydefgoto[] = {  1698,
    80,     5,     6,    19,    20,    21,    22,     7,    65,    66,
    67,   406,  1445,   599,  1381,  1447,   600,  1382,  1449,   601,
  1383,  1582,   602,  1553,  1584,   603,  1554,  1586,   604,  1555,
  1643,   605,  1629,  1645,   606,  1630,  1647,   607,  1631,  1680,
   608,  1674,  1682,   609,  1675,  1684,   610,  1676,  1451,   611,
  1384,  1517,   612,  1453,   133,   232,    68,   529,   516,   517,
   518,   519,    72,    73,    74,    75,  1085,  1346,  1422,  1088,
  1351,  1426,  1239,  1240,    76,    77,   893,   321,   136,   338,
   168,   227,   399,   991,  1095,  1096,   323,   459,   808,   673,
   809,   137
};

static const short yypact[] = {  2214,
    43,-32768,-32768,  -123,-32768,     5,  2331,-32768,    21,    64,
    92,   103,   139,   158,   165,    29,   111,   131,-32768,-32768,
-32768,-32768,  1795,   146,   181,   178,   186,   193,   -45,   130,
   208,   229,   301,   235,   313,   341,   389,   300,   383,   359,
   255,   259,   -77,   -77,   284,   253,   304,   399,    12,   489,
   494,    84,   324,   328,   -15,    17,-32768,   335,-32768,   537,
-32768,   558,   565,   569,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   621,    21,
  2354,-32768,-32768,-32768,-32768,-32768,   455,   455,   643,-32768,
   315,     7,-32768,-32768,-32768,-32768,   -94,   -46,   198,   203,
   226,   254,   275,   279,   282,   321,   325,   332,   375,   376,
   397,   398,   401,   404,   405,   424,   425,   467,   470,   480,
-32768,-32768,-32768,-32768,  1979,  1979,  1979,-32768,-32768,  1979,
   901,    58,  1979,   659,   403,-32768,   662,   693,-32768,  1979,
  1979,  1979,   521,  1979,   525,  1979,  1979,  1671,  1979,   522,
   534,   544,  1671,   541,   549,   560,   576,   583,   593,   601,
   799,   -77,   -77,   -77,  1979,  1979,   -72,-32768,   -14,   -77,
   620,   633,   644,-32768,  1671,   646,   827,-32768,-32768,-32768,
  1671,  1671,  1979,  1979,   -69,  1979,   739,  1979,  1979,-32768,
   829,-32768,   654,-32768,    21,   657,   663,   673,   674,   675,
   676,   677,   684,   694,   695,   696,   697,   698,   701,   702,
   703,   704,   705,   706,   707,   708,   709,   712,   717,   718,
   719,   720,   724,   725,   726,   929,   754,   759,   756,  1979,
   941,-32768,   -77,-32768,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,    50,    47,    47,   765,
   765,   765,  2123,   942,  2009,  5254,   141,   762,   943,   429,
-32768,-32768,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,-32768,  -127,  2240,
  5904,  5927,  1979,  5950,  1979,  5973,  5996,   318,  1701,  2009,
  1609,   944,-32768,  6019,  1979,  1979,  1979,   945,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,   772,   163,-32768,-32768,  2818,
  2839,   -77,   -77,   417,   417,   174,  1979,  1979,  1979,    -8,
   257,  1979,-32768,  2155,   949,   950,  6042,  6065,   868,  1979,
  6088,   776,  1938,  6111,-32768,  1979,   812,   964,   965,   966,
   981,   982,   983,   984,   986,   990,   991,   992,   993,   995,
   996,   997,   999,  1000,  1001,  1016,  1017,  1018,  1019,  1020,
   886,  1022,  1023,  1024,  1028,  1031,  1030,-32768,   -31,  1032,
  1033,  1035,  5279,   289,    -3,   714,  6134,  5304,  6157,  5329,
  6180,  5354,  6203,  5379,  6226,  5404,  6249,  5429,  6272,  5454,
  6295,  5479,  6318,  5504,  6341,  5529,  6364,  5554,  2860,  2881,
  6387,  5579,  6410,  5604,  6433,  5629,  6456,  5654,  6479,  5679,
  6502,  5704,  2902,  2923,  2944,  2965,  2986,  3007,   430,-32768,
    23,   849,   858,-32768,  1671,  2039,  1609,-32768,   428,    19,
    47,  1979,  1039,  1042,    13,-32768,  1953,   642,   809,   486,
   486,   310,   310,   310,   310,   364,   364,   765,   765,   765,
   765,  1048,  2009,  1049,  1050,  1051,  6525,  1052,  6548,  1053,
  1054,  1227,   362,  2009,   432,  1979,  1979,  1056,  2377,  6571,
  6594,  1979,  2400,  2423,  6617,  6640,  6663,  6686,  6709,   878,
   -77,  1979,  1979,-32768,-32768,-32768,   876,  2396,-32768,   877,
  1979,  3028,  3049,  3070,   -42,   -41,   -39,-32768,-32768,-32768,
  1979,  5729,-32768,   879,   880,  1062,  1063,   892,  6732,  1068,
  1979,  1979,-32768,  6755,   922,   893,   894,   895,   897,   898,
   900,   903,   904,   905,   906,   907,   908,   917,   927,   928,
   930,   933,   934,   951,   952,   953,   954,   956,   958,   967,
   968,   969,   970,   972,   973,-32768,  1074,   978,-32768,   975,
    82,-32768,-32768,   955,   971,   985,   987,   988,   989,   994,
   998,  1021,  1029,  1034,  1040,  1041,  1043,  1082,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1979,  1979,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1112,-32768,  2009,    47,-32768,
  1142,  2009,   979,    62,  1979,  1157,  1159,   509,-32768,  1161,
  1014,    14,  1166,  1979,-32768,   135,   -77,  1671,  1671,  1168,
  1671,  1174,  1671,  1671,-32768,  2009,  1464,   433,-32768,  1968,
   550,  1011,  1176,  1193,  1194,   251,  1197,  1203,  1205,  1207,
  1208,  1210,  1214,  1169,   187,  3091,  3112,-32768,-32768,  2446,
   -77,   -77,   -77,  2009,  2009,  2009,   599,  1172,  1979,  1979,
  1671,  1671,  1979,  1217,  1671,  2064,   361,  1219,  1077,  1225,
  1979,  1979,   -77,  1226,  1230,  1061,  1232,  1257,  1671,  1671,
  1258,   -77,  1259,  1260,  1671,  1671,  1261,  1262,  1263,  1264,
  1265,  1671,   443,  1671,  1266,  1269,  1271,  1267,  1268,-32768,
  1272,   455,  1273,-32768,  1211,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,-32768,
  6778,  5754,  6801,  5779,  6824,  5804,  6847,  5829,  5854,  1097,
   153,  1113,-32768,  1609,-32768,   128,   173,  1111,  1291,   679,
-32768,-32768,-32768,    14,  1979,  1114,  1979,-32768,   436,-32768,
  2185,  1293,    32,    44,  1295,  1671,  1305,  1671,  1306,  1307,
   447,-32768,  2009,-32768,  1979,-32768,  1979,  1671,  1671,  1671,
-32768,   465,  1671,  1671,  1671,  1671,  1671,  1671,  1671,   688,
  1979,  1979,  1979,  1126,   -98,   -75,   167,   451,   454,   457,
-32768,-32768,  3133,  3154,  1311,  1312,  6870,   -29,  1228,  1979,
  1979,-32768,  1132,    21,  1134,  3175,  3196,  -103,  1135,  1140,
  1137,  1144,  1138,  1145,  1143,  1150,   -96,  1160,  1146,  1165,
  1162,  1163,  1164,  1167,  1170,  1178,  1173,-32768,-32768,-32768,
-32768,-32768,  1179,  1180,  1181,  1182,  1183,  1175,  1184,-32768,
  1185,   289,  1347,  3217,  3238,  3259,  3280,  3301,  3322,  3343,
  3364,  3385,  3406,  3427,  3448,  3469,  3490,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1177,-32768,-32768,-32768,  1671,
    47,  1979,  1349,  1355,    13,-32768,  1367,  5879,  1282,  3511,
    14,-32768,-32768,-32768,-32768,   -77,-32768,  1369,-32768,  1370,
-32768,-32768,  1192,   458,  2185,  3532,  1372,  1373,  1387,  1979,
  1979,  1389,  1395,  1396,  1397,  1399,  1400,  1401,-32768,  1913,
  2469,  6893,  1693,   417,   -77,  1402,   -77,  1404,   -77,  1405,
  1408,  1410,  1411,  1979,  1979,-32768,-32768,  1354,  1671,  1671,
  1327,  1671,   281,  6916,  1979,    21,  1416,  1979,  1671,  1414,
  1419,  1415,  1250,  1420,   443,  1421,  1422,  1979,  1423,  1425,
  1426,  1427,  1428,   443,  1979,  1979,  1979,  1671,  1429,  1431,
   443,  1979,  1433,  1434,  1432,  1979,   455,-32768,-32768,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1436,  1435,  1437,   700,-32768,  1448,  1438,
-32768,  1256,  1274,  1979,-32768,    37,-32768,-32768,-32768,  1276,
  1979,-32768,-32768,-32768,   938,   961,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1171,  1451,  1275,-32768,  1979,-32768,  1270,
   192,-32768,   194,-32768,  1277,   199,-32768,  1278,-32768,-32768,
-32768,  3553,  3574,   -29,   166,-32768,   499,  1281,  1376,  1979,
-32768,-32768,  3595,    21,  1287,  3616,  1284,-32768,  1285,-32768,
  1310,-32768,  1315,-32768,  1316,  6939,-32768,  1317,-32768,-32768,
  1319,  1328,  6962,  3637,  6985,  1325,-32768,  1330,  1332,  3658,
  1329,  1334,-32768,  3679,  1331,  3700,  3721,  3742,  3763,  3784,
  3805,  3826,  3847,  3868,  3889,  3910,  3931,  3952,  3973,  1336,
-32768,-32768,-32768,    14,-32768,  1406,  1516,  3994,-32768,-32768,
  4015,-32768,-32768,-32768,-32768,   417,  2001,-32768,  1733,  1733,
    36,  1733,    36,  1979,  1979,  1430,-32768,  1671,-32768,  1671,
  1979,  2492,  1671,  1374,  1519,   -29,   443,  1523,  1979,  1521,
   443,  1522,  1526,  1524,  1525,  1527,  1979,  1528,  1671,  1530,
  1531,  1979,  1529,  1532,  1979,  1534,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
-32768,  1543,-32768,-32768,  1979,  1545,  1362,  1979,-32768,  1733,
  1733,  1979,  2515,   201,  2538,   206,  1546,  1365,   -19,-32768,
  2561,   220,   -17,  2584,  2607,  1368,-32768,  1371,  1418,-32768,
  1375,    21,-32768,  1378,  1379,  1380,  4036,-32768,  1377,-32768,
  1392,-32768,-32768,-32768,  7008,-32768,  1390,-32768,-32768,  7031,
  1412,-32768,  7054,  1407,  4057,  4078,  4099,  4120,  4141,  4162,
  4183,  4204,  4225,  7077,  7100,  7123,  7146,  4246,-32768,  2340,
  1413,-32768,  2630,  2791,  1553,  1979,  1555,  1979,-32768,  1671,
  1556,-32768,  1557,  1979,  1578,  1595,  1596,  1671,  1671,-32768,
  1597,    21,   443,   443,   443,   443,  1598,  1600,  1601,   443,
  1603,  1612,  1613,  1615,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,-32768,-32768,-32768,-32768,  1979,  1979,-32768,
  1616,-32768,-32768,  2653,-32768,  1443,  2676,  1439,-32768,-32768,
  1445,  2699,-32768,-32768,-32768,  1450,  1449,-32768,    21,  1452,
  1453,  1440,  1441,-32768,-32768,-32768,  1455,-32768,-32768,-32768,
  1456,  4267,  4288,  4309,  4330,  4351,  4372,  4393,  4414,  4435,
  1457,  1459,  1460,  1462,  7169,  2722,  1466,  1619,    36,  1638,
  1671,    36,  1645,  1671,  1569,  1472,   443,   443,  1652,  1653,
   443,  1655,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,    47,-32768,-32768,  1656,-32768,    -7,
-32768,  1474,   500,    -6,-32768,  1476,  1477,  1480,    21,  1482,
  1483,-32768,-32768,  1489,  1490,  4456,  4477,  4498,  4519,  4540,
  4561,  4582,  4603,  4624,   512,  2185,   515,  2185,   543,  2185,
   546,-32768,  1488,  1517,  1672,    36,  1671,  1702,  1703,    36,
  1589,  1979,    21,   443,  1671,  1728,  1729,  1979,  1979,  1979,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1732,  1979,  1734,
  1979,  1760,    47,  1761,    47,  1762,-32768,     0,  1518,-32768,
-32768,     2,  1551,  4645,    21,  1582,  1599,-32768,-32768,  4666,
  4687,  4708,  4729,  4750,  4771,  7192,  7215,  7238,  2185,-32768,
  2185,-32768,  2185,-32768,-32768,-32768,   547,-32768,-32768,  1779,
  1781,  1782,  1979,  1979,  1634,   443,  1671,  1979,  1979,  1979,
  1979,  1979,  1979,-32768,-32768,-32768,    47,  1785,-32768,-32768,
-32768,  4792,  2745,  1636,  1606,  1607,  4813,  4834,  4855,  4876,
  4897,  4918,  1608,  1640,  1646,-32768,-32768,  1979,  1789,-32768,
  1671,   443,  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1979,
  1979,  2768,-32768,  1610,  1618,  4939,  4960,  4981,  5002,  5023,
  5044,   551,  2185,   552,  2185,   570,  2185,  1827,  1671,  1829,
  1979,  1979,  1979,  1979,  1979,  1979,  1979,  1830,  1979,  1831,
  1979,  1832,-32768,  1654,-32768,  5065,  5086,  5107,  7261,  7284,
  7307,  2185,-32768,  2185,-32768,  2185,-32768,  1671,  1979,  1979,
  1979,-32768,-32768,-32768,  1657,  5128,  5149,  5170,  1651,  1659,
  1661,  1671,  1979,  1979,  1979,  1979,  1979,  1979,  1658,  5191,
  5212,  5233,   589,  2185,   592,  2185,   612,  2185,   443,  1979,
  1979,  1979,  1979,  1834,  1979,  1844,  1979,  1845,  1669,  7330,
  7353,  7376,  2185,-32768,  2185,-32768,  2185,-32768,  1863,-32768,
-32768,-32768,-32768,  1682,  1683,  1687,  1979,  1979,  1979,   635,
  2185,   639,  2185,   640,  2185,  1979,  1870,  1979,  1871,  1979,
  1873,  2185,-32768,  2185,-32768,  2185,-32768,  1881,  1884,-32768
};

static const short yypgoto[] = {-32768,
   -33,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1302,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -285,   -20,-32768,  1879,  1880,  -341,
    91,  1883,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768, -1133, -1234,-32768,-32768,  -999,   -23,-32768,   385,
-32768,   -87,-32768, -1066,   902,   214,  -228,  -310,  -797,   959,
-32768,  -265
};


#define	YYLAST		7559


static const short yytable[] = {   135,
   228,   462,   134,   520,  1302,  1113,   937,    10,  1302,   495,
   233,   451,   452,   453,  1122,   176,   671,   806,   143,   359,
   187,  1129,   143,    78,   145,    93,   185,  1176,     9,   525,
    27,    28,   526,   527,    31,    32,    33,   944,    34,  1243,
    36,    37,  1159,    39,    40,  1237,   195,  1237,     8,   945,
  1238,   450,  1238,   449,   450,   482,   458,  1237,  1237,   483,
    52,   287,  1238,  1238,  1237,   797,  1237,   342,   343,  1238,
    81,  1238,   342,   343,   342,   343,    53,    54,    55,  1000,
   118,   119,   120,   118,   119,   120,  1009,   235,   975,   236,
   976,   458,   946,   163,   164,   342,   343,    82,   342,   343,
  1237,   280,   281,   282,   165,  1238,   283,   286,    83,   290,
   166,   977,   360,   978,   177,   344,   310,   311,   312,  1254,
   314,   181,   316,   317,   182,   324,    11,    12,    13,    14,
    15,    16,    17,    18,    93,   237,   144,   238,    64,   140,
   144,   340,   341,  1055,    84,   714,   715,   461,   716,   288,
   289,   576,   989,   798,   799,   577,   342,   343,   990,   357,
   358,   367,   361,    85,   363,   364,   186,   342,   343,  1301,
    86,  1305,   676,   345,   665,   121,   122,   123,   124,   931,
   528,  1455,  1459,   688,   583,  1302,   139,  1255,  1520,  1302,
  1522,  1259,    79,   145,   234,   667,   128,   129,   188,   178,
   672,   807,   342,   343,   664,   657,   403,   342,   343,   658,
    87,   407,   408,   409,   410,   411,   412,   413,   414,   415,
   416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
   426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
   436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
   446,   447,   448,  1302,   458,  1420,   831,  1302,  1424,   128,
   129,   457,   530,   531,   350,   458,   463,   763,   354,   467,
   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
   478,   479,   480,   481,   121,   122,   123,   124,  1100,   487,
   171,   489,    88,   172,   173,   281,   457,   121,   122,   123,
   124,   499,   500,   501,   832,   503,   504,   505,   506,   507,
   508,   509,    89,  1360,  1361,  1362,  1363,   812,   128,   129,
  1367,   662,  1488,   522,   523,   524,  1492,   138,   532,   121,
   122,   123,   124,   342,   343,   928,   539,   342,   343,   662,
   153,   154,   544,   155,   342,   343,   148,   791,  1177,   511,
   128,   129,  1178,   979,   150,   980,  1222,   342,   343,   140,
   521,   322,   342,   343,   342,   343,   328,   141,   861,   342,
   343,   342,   343,   841,   142,   821,   342,   343,  1169,   239,
  1170,   240,   151,   582,   241,  1172,   242,  1296,   351,   146,
   342,   343,  1298,   792,   355,   356,   157,  1430,  1431,   158,
   159,  1434,   160,   848,   849,   850,  1304,   243,   292,   244,
   147,   293,   294,   295,   296,   297,   149,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   156,   167,   169,   458,
   152,   307,   281,   795,   466,   245,   161,   246,   668,   666,
   175,   293,   294,   295,   296,   297,   162,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   247,   458,   248,   457,
   249,   307,   250,   251,  1496,   252,   128,   129,   403,  1101,
   457,   170,   690,   691,    42,    43,    44,    45,   696,    47,
   302,   303,   304,   305,   306,   458,   458,   458,   706,   707,
   307,   174,   128,   129,   179,   128,   129,   710,   230,   180,
   231,   492,   253,   231,   254,   183,   255,   717,   256,   184,
   930,   932,   954,   257,   803,   258,   189,   726,   727,   960,
   961,   293,   294,   295,   296,   297,  1545,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   304,   305,   306,   128,
   129,   307,   190,   862,   307,   687,   337,   231,   339,   888,
   889,   890,   891,   892,   346,   826,   259,   261,   260,   262,
   764,   191,  1575,   293,   294,   295,   296,   297,   192,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   263,   265,
   264,   266,   267,   307,   268,   269,   271,   270,   272,   293,
   294,   295,   296,   297,   458,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   851,   273,   275,   274,   276,   307,
   193,   781,   782,   655,   662,   656,   663,   405,   662,   662,
   689,   824,   941,   194,   942,   783,   784,   785,   786,   787,
   788,   789,  1080,   662,   457,   953,   226,   662,   794,   981,
   662,   800,   982,   662,   662,   983,  1060,   229,   277,  1659,
   811,   278,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   279,   457,   403,   291,  1046,   307,   308,   661,   293,
   294,   295,   296,   297,   901,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   936,  1178,  1457,  1179,  1458,   307,
   457,   457,   457,   969,   970,   853,   854,   309,  1477,   857,
  1478,  1479,   313,  1480,  1075,  1153,   315,   866,   867,   325,
   293,   294,   295,   296,   297,   326,   298,   299,   300,   301,
   302,   303,   304,   305,   306,   327,   514,   515,   329,  1481,
   307,  1482,  1483,  1537,  1484,  1538,   330,  1597,  1599,  1598,
  1600,   331,   904,   905,   906,   907,   908,   909,   910,   911,
   912,   913,   914,   915,   916,   917,  1601,   332,  1602,   293,
   294,   295,   296,   297,   333,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   334,  1653,   933,  1654,  1655,   307,
  1656,   938,   335,   940,   584,   585,   586,   587,   588,   589,
   590,   591,   592,   593,   594,   595,   596,   597,  1657,   457,
  1658,   955,   336,   956,   295,   296,   297,   347,   298,   299,
   300,   301,   302,   303,   304,   305,   306,   971,   972,   973,
   348,  1686,   307,  1687,  1227,  1688,  1690,  1689,  1691,   352,
   996,   349,   353,   362,   365,   366,   993,   994,   368,   293,
   294,   295,   296,   297,   369,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   370,   371,   372,   373,   374,   307,
   293,   294,   295,   296,   297,   375,   298,   299,   300,   301,
   302,   303,   304,   305,   306,   376,   377,   378,   379,   380,
   307,  1028,   381,   382,   383,   384,   385,   386,   387,   388,
   389,   814,   815,   390,   817,   705,   819,   820,   391,   392,
   393,   394,   598,    90,    91,   395,   396,   397,  1047,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   398,   855,   856,  1065,  1066,   859,  1135,
   400,   401,   402,  1162,   404,   307,  1074,   464,   455,   465,
   497,   502,   874,   875,   510,   534,   535,   538,   880,   881,
  1092,  1093,  1104,   541,   545,   887,  1163,   894,   546,   547,
   548,  1103,   296,   297,  1106,   298,   299,   300,   301,   302,
   303,   304,   305,   306,  1116,   549,   550,   551,   552,   307,
   553,  1123,  1124,  1125,   554,   555,   556,   557,  1130,   558,
   559,   560,  1134,   561,   562,   563,  1136,  1137,  1138,  1139,
  1140,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  1149,
   564,   565,   566,   567,   568,   569,   570,   571,   572,   948,
  1158,   950,   573,   574,   575,   659,   578,  1161,   579,   580,
   660,   957,   958,   959,   669,   670,   962,   963,   964,   965,
   966,   967,   968,   675,  1167,   677,   678,   679,   681,   683,
   684,   813,   692,   704,   708,   709,   719,   720,   721,   722,
  1184,   125,   126,   723,   725,   729,  1182,   127,   760,   730,
   731,   732,   130,   733,   734,   284,   735,   780,   285,   736,
   737,   738,   739,   740,   741,   845,   846,   847,   293,   294,
   295,   296,   297,   742,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   743,   744,   790,   745,   868,   307,   746,
   747,   293,   294,   295,   296,   297,   877,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   766,   748,   749,   750,
   751,   307,   752,  1045,   753,  1233,  1235,   793,  1241,  1452,
  1244,  1245,   767,   754,   755,   756,   757,  1249,   758,   759,
   761,   762,   801,   796,   802,  1257,   768,   804,   769,   770,
   771,   810,   840,  1265,   816,   772,  1164,   852,  1270,   773,
   818,  1273,   828,  1275,  1276,  1277,  1278,  1279,  1280,  1281,
  1282,  1283,  1284,  1285,  1286,  1287,  1288,   805,   827,   829,
   830,  1290,   774,   833,  1293,  1099,   280,   281,  1294,   834,
   775,   835,  1107,   836,   837,   776,   838,  1515,  1312,  1518,
   839,   777,   778,   858,   779,   863,   864,   865,   869,    90,
    91,  1126,   870,   871,   872,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   873,
   876,   878,   879,   882,   883,   884,   885,   886,   895,   898,
   899,  1556,  1344,   896,  1347,   897,   902,   900,  1359,   927,
  1352,   584,   585,   586,   587,   588,   589,   590,   591,   592,
   593,   594,   595,   596,   597,   929,   934,   935,   943,   939,
   947,  1372,  1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,
   949,   951,   952,   974,  1385,  1386,   986,   987,   992,   995,
   997,  1001,  1002,  1003,  1005,  1396,  1004,  1006,  1011,  1007,
  1056,   293,   294,   295,   296,   297,  1008,   298,   299,   300,
   301,   302,   303,   304,   305,   306,  1010,  1012,  1013,  1014,
  1015,   307,  1029,  1016,  1048,  1019,  1017,  1025,  1049,  1081,
  1094,  1083,  1044,  1086,  1018,  1020,  1021,  1022,  1023,  1024,
  1026,  1027,  1051,  1053,  1057,  1058,  1059,  1062,  1063,  1436,
  1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1446,  1448,
  1450,  1247,  1064,  1248,  1067,  1463,  1251,   125,   126,   903,
  1068,  1069,  1070,   127,  1071,  1072,  1073,  1082,   130,  1084,
  1087,   685,  1267,  1089,   686,  1090,  1091,  1098,  1105,  1108,
  1110,  1109,  1111,  1310,  1115,  1112,  1114,  1118,  1117,  1495,
  1121,  1119,  1120,  1128,  1127,  1131,  1132,  1133,  1494,  1150,
  1151,  1156,  1152,  1155,  1500,  1501,  1502,  1503,  1504,  1505,
  1506,  1507,  1508,  1509,  1154,  1511,  1165,  1513,  1168,  1157,
  1160,  1525,  1166,  1181,  1171,  1173,    90,    91,  1180,  1185,
  1187,  1188,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,  1189,  1190,  1223,  1542,
  1543,  1194,  1191,  1193,  1547,  1548,  1549,  1550,  1551,  1552,
  1195,  1199,  1200,  1348,  1201,  1203,  1204,  1206,  1221,  1224,
  1246,  1356,  1357,  1252,  1253,  1256,  1258,  1260,  1261,  1262,
  1263,  1271,  1264,  1266,  1572,  1268,  1269,  1272,  1274,  1576,
  1577,  1578,  1579,  1580,  1581,  1583,  1585,  1587,  1289,  1291,
  1292,  1299,  1300,  1234,  1236,  1308,  1242,  1309,  1343,  1317,
  1345,  1349,  1350,  1311,  1313,  1314,  1315,  1606,  1607,  1608,
  1609,  1610,  1611,  1612,  1318,  1614,  1320,  1616,   293,   294,
   295,   296,   297,  1353,   298,   299,   300,   301,   302,   303,
   304,   305,   306,  1324,  1322,  1626,  1627,  1628,   307,  1341,
  1354,  1355,  1358,  1364,  1423,  1365,  1366,  1427,  1368,  1640,
  1641,  1642,  1644,  1646,  1648,   339,   496,  1369,  1370,  1371,
  1387,  1429,  1399,  1400,  1419,  1391,  1660,  1661,  1662,  1663,
  1389,  1665,  1392,  1667,   125,   126,  1394,  1395,  1397,  1398,
   127,  1401,  1402,  1421,  1412,   130,  1413,  1414,   822,  1415,
  1425,   823,  1418,  1681,  1683,  1685,  1428,  1432,  1433,  1435,
  1454,  1456,  1692,  1460,  1694,  1461,  1696,  1462,  1464,  1465,
  1489,  1466,  1467,    90,   318,  1485,  1493,  1487,  1497,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,    90,   493,  1486,  1521,  1490,  1491,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,  1498,  1499,    90,    91,  1510,  1523,  1512,
  1546,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,  1514,  1516,  1519,  1526,   293,
   294,   295,   296,   297,  1574,   298,   299,   300,   301,   302,
   303,   304,   305,   306,  1539,  1527,  1540,  1541,  1544,   307,
  1557,  1560,  1561,  1562,  1573,  1569,  1589,    90,    91,    92,
  1590,    93,  1604,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,  1570,   118,   119,
   120,  1625,  1603,  1571,  1605,  1613,  1615,  1617,  1636,  1664,
  1618,   125,   319,  1632,  1649,  1639,  1637,   127,  1638,  1666,
  1668,  1669,   130,   293,   294,   295,   296,   297,   320,   298,
   299,   300,   301,   302,   303,   304,   305,   306,  1673,  1677,
  1678,   125,   126,   307,  1679,  1693,  1695,   127,  1697,  1078,
  1699,  1079,   130,  1700,   765,    69,    70,     0,   494,    71,
     0,  1097,     0,  1050,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1230,  1231,     0,     0,     0,     0,   127,
     0,     0,     0,     0,  1232,    90,    91,   450,     0,     0,
   166,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   542,   118,   119,   120,     0,
     0,   121,   122,   123,   124,     0,     0,     0,     0,     0,
   674,     0,     0,     0,     0,   125,   126,     0,     0,     0,
     0,   127,   128,   129,     0,   825,   130,     0,   131,     0,
   132,    90,    91,     0,     0,     0,     0,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,    90,   318,     0,     0,     0,     0,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,    90,   493,     0,     0,     0,     0,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   860,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   125,   126,     0,     0,     0,     0,   127,
     0,     0,     0,     0,   130,     0,     0,     0,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   293,   294,   295,   296,   297,   307,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   293,   294,
   295,   296,   297,   307,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   125,
   126,     0,     0,     0,     0,   127,     0,     0,     0,     0,
   130,   293,   294,   295,   296,   297,     0,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,   125,
   456,   307,     0,     0,     0,   127,     0,  1228,     0,  1229,
   130,     0,   525,    27,    28,   526,   527,    31,    32,    33,
     0,    34,     0,    36,    37,     0,    39,    40,     0,   125,
   126,     0,     0,   -10,     1,   127,   -10,   -53,     0,     0,
   130,     0,     0,    52,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,    53,
    54,    55,     0,     0,   307,     0,   -53,     0,     0,     0,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,     0,     0,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,
   -53,   -53,   -53,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   -53,   -53,
   -53,    64,     0,   307,     0,   454,     0,   -53,     0,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    23,   -10,   -10,   -10,   -10,   -10,
   -10,   -10,   -10,   533,     0,   293,   294,   295,   296,   297,
     0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   -53,     2,     3,    24,     4,   307,     0,    25,    26,    27,
    28,    29,    30,    31,    32,    33,     0,    34,    35,    36,
    37,    38,    39,    40,     0,     0,     0,    41,    42,    43,
    44,    45,    46,    47,   196,    48,    49,    50,    51,    52,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,    53,    54,    55,     0,     0,
   307,     0,   484,     0,    56,     0,    57,    58,    59,    60,
    61,    62,    63,   525,    27,    28,   526,   527,    31,    32,
    33,     0,    34,     0,    36,    37,     0,    39,    40,     0,
     0,     0,     0,     0,     0,     0,     0,   197,   198,   199,
     0,     0,     0,     0,    52,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,     0,     0,    64,     0,     0,
    53,    54,    55,   210,   211,   212,   213,   214,   215,   216,
   217,   218,   219,     0,   220,   221,   222,   223,   224,   225,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,     0,     0,     0,     0,  1339,     0,  1340,     0,
     0,     0,     0,     0,     0,     0,     0,   293,   294,   295,
   296,   297,    64,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,     0,
   293,   294,   295,   296,   297,   693,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,     0,   293,   294,   295,   296,   297,   697,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,     0,   293,   294,   295,   296,
   297,   698,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,     0,   293,
   294,   295,   296,   297,   844,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,   293,   294,   295,   296,   297,  1076,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,     0,   293,   294,   295,   296,   297,
  1250,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,     0,   293,   294,
   295,   296,   297,  1295,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
     0,   293,   294,   295,   296,   297,  1297,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,     0,   293,   294,   295,   296,   297,  1303,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,   293,   294,   295,
   296,   297,  1306,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,     0,
   293,   294,   295,   296,   297,  1307,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,     0,   293,   294,   295,   296,   297,  1342,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,     0,   293,   294,   295,   296,
   297,  1388,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,     0,   293,
   294,   295,   296,   297,  1390,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,   293,   294,   295,   296,   297,  1393,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,     0,   293,   294,   295,   296,   297,
  1417,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,     0,   293,   294,
   295,   296,   297,  1559,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
     0,   293,   294,   295,   296,   297,  1588,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,   454,     0,     0,     0,   512,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,   512,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,   513,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,   635,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,   636,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,   649,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,   650,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
   651,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,   652,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,   653,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,   654,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,   711,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,   712,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,   713,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,   842,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,   843,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,   984,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
   985,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,   998,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,   999,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1030,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1031,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1032,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1033,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1034,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1035,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1036,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1037,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1038,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1039,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1040,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1041,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1042,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1043,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1054,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1061,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1174,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1175,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1183,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1186,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1197,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1202,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1205,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1207,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1208,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1209,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1210,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1211,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1212,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1213,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1214,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1215,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1216,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1217,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1218,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1219,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1220,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1225,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1226,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1316,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1325,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1326,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1327,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1328,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1329,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1330,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1331,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1332,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1333,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1338,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1403,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1404,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1405,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1406,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1407,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1408,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1409,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1410,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1411,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1468,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1469,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1470,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1471,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1472,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1473,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1474,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1475,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1476,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1524,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1528,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1529,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1530,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1531,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1532,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1533,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1558,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1563,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1564,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1565,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1566,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1567,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1568,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1591,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1592,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1593,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1594,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1595,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,   293,   294,   295,   296,   297,
  1596,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,   293,   294,   295,   296,
   297,  1619,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,   293,   294,   295,
   296,   297,  1620,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,   293,   294,
   295,   296,   297,  1621,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,   293,
   294,   295,   296,   297,  1633,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
   293,   294,   295,   296,   297,  1634,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,   293,   294,   295,   296,   297,  1635,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,   293,   294,   295,   296,   297,  1650,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,   293,   294,   295,   296,   297,  1651,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,   293,   294,   295,   296,   297,  1652,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   460,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   581,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   614,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   616,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   618,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   620,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   622,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   624,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   626,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   628,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   630,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   632,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   634,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   638,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   640,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   642,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   644,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   646,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   648,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   718,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   919,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   921,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   923,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   925,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,     0,     0,   926,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,     0,     0,  1052,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,   485,   293,   294,   295,
   296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,   486,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,   488,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,   490,   293,   294,   295,   296,
   297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,   491,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,   498,   293,   294,   295,   296,   297,     0,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,   536,   293,   294,   295,   296,   297,
     0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,   537,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
   540,   293,   294,   295,   296,   297,     0,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,   543,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,   613,   293,   294,   295,
   296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,   615,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,   617,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,   619,   293,   294,   295,   296,
   297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,   621,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,   623,   293,   294,   295,   296,   297,     0,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,   625,   293,   294,   295,   296,   297,
     0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,   627,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
   629,   293,   294,   295,   296,   297,     0,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,   631,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,   633,   293,   294,   295,
   296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,   637,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,   639,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,   641,   293,   294,   295,   296,
   297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,   643,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,   645,   293,   294,   295,   296,   297,     0,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,   647,   293,   294,   295,   296,   297,
     0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,   680,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
   682,   293,   294,   295,   296,   297,     0,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,   694,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,   695,   293,   294,   295,
   296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,   699,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,   700,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,   701,   293,   294,   295,   296,
   297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,   702,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,   703,   293,   294,   295,   296,   297,     0,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,   724,   293,   294,   295,   296,   297,
     0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,   728,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
   918,   293,   294,   295,   296,   297,     0,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,   920,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,   922,   293,   294,   295,
   296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,   924,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,   988,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,  1077,   293,   294,   295,   296,
   297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,  1102,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,  1192,   293,   294,   295,   296,   297,     0,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,  1196,   293,   294,   295,   296,   297,
     0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,  1198,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
  1319,   293,   294,   295,   296,   297,     0,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,  1321,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,  1323,   293,   294,   295,
   296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,  1334,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,  1335,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,  1336,   293,   294,   295,   296,
   297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,  1337,   293,
   294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
   303,   304,   305,   306,     0,     0,     0,     0,     0,   307,
     0,  1416,   293,   294,   295,   296,   297,     0,   298,   299,
   300,   301,   302,   303,   304,   305,   306,     0,     0,     0,
     0,     0,   307,     0,  1534,   293,   294,   295,   296,   297,
     0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     0,     0,     0,     0,     0,   307,     0,  1535,   293,   294,
   295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
   304,   305,   306,     0,     0,     0,     0,     0,   307,     0,
  1536,   293,   294,   295,   296,   297,     0,   298,   299,   300,
   301,   302,   303,   304,   305,   306,     0,     0,     0,     0,
     0,   307,     0,  1622,   293,   294,   295,   296,   297,     0,
   298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     0,     0,     0,     0,   307,     0,  1623,   293,   294,   295,
   296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
   305,   306,     0,     0,     0,     0,     0,   307,     0,  1624,
   293,   294,   295,   296,   297,     0,   298,   299,   300,   301,
   302,   303,   304,   305,   306,     0,     0,     0,     0,     0,
   307,     0,  1670,   293,   294,   295,   296,   297,     0,   298,
   299,   300,   301,   302,   303,   304,   305,   306,     0,     0,
     0,     0,     0,   307,     0,  1671,   293,   294,   295,   296,
   297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
   306,     0,     0,     0,     0,     0,   307,     0,  1672
};

static const short yycheck[] = {    23,
    88,   287,    23,   345,  1239,  1005,   804,     3,  1243,   320,
     4,   277,   278,   279,  1014,     4,     4,     4,    64,    89,
     4,  1021,    64,     3,    64,     7,    42,  1094,   152,    38,
    39,    40,    41,    42,    43,    44,    45,     6,    47,  1173,
    49,    50,     6,    52,    53,    65,    80,    65,     6,     6,
    70,     5,    70,     4,     5,   183,   285,    65,    65,   187,
    69,     4,    70,    70,    65,     4,    65,   171,   172,    70,
     7,    70,   171,   172,   171,   172,    85,    86,    87,   183,
    34,    35,    36,    34,    35,    36,   183,   182,   187,   184,
   189,   320,    49,   171,   172,   171,   172,     6,   171,   172,
    65,   125,   126,   127,   182,    70,   130,   131,     6,   133,
   188,   187,   182,   189,   103,   188,   140,   141,   142,  1186,
   144,    38,   146,   147,    41,   149,   122,   123,   124,   125,
   126,   127,   128,   129,     7,   182,   182,   184,   147,   182,
   182,   165,   166,   941,     6,   188,   188,     7,   188,    92,
    93,   183,   182,    92,    93,   187,   171,   172,   188,   183,
   184,   195,   186,     6,   188,   189,   182,   171,   172,   189,
     6,   189,   483,   188,   460,   157,   158,   159,   160,     7,
   189,   189,   189,   494,   188,  1420,     6,  1187,   189,  1424,
   189,  1191,   172,    64,   188,   461,   178,   179,   182,   188,
   188,   188,   171,   172,   186,   183,   230,   171,   172,   187,
   182,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,  1488,   483,  1389,     6,  1492,  1392,   178,
   179,   285,     6,     7,   174,   494,   287,   186,   178,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   157,   158,   159,   160,     8,   313,
    38,   315,   182,    41,    42,   319,   320,   157,   158,   159,
   160,   325,   326,   327,    54,   329,   330,   331,   332,   333,
   334,   335,   182,  1313,  1314,  1315,  1316,   183,   178,   179,
  1320,   187,  1456,   347,   348,   349,  1460,   182,   352,   157,
   158,   159,   160,   171,   172,   183,   360,   171,   172,   187,
    41,    42,   366,    44,   171,   172,    46,   658,   183,   187,
   178,   179,   187,   187,    42,   189,  1154,   171,   172,   182,
   187,   148,   171,   172,   171,   172,   153,   182,     8,   171,
   172,   171,   172,   187,   182,   686,   171,   172,   187,   182,
   187,   184,    42,   404,   182,   187,   184,   187,   175,   182,
   171,   172,   187,   659,   181,   182,    38,  1397,  1398,    41,
    42,  1401,    44,   714,   715,   716,   187,   182,     6,   184,
   182,   161,   162,   163,   164,   165,   182,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    44,    43,    44,   658,
    42,   181,   456,   662,     6,   182,   182,   184,   462,   460,
    42,   161,   162,   163,   164,   165,   188,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   182,   686,   184,   483,
   182,   181,   184,   182,  1464,   184,   178,   179,   492,   189,
   494,   188,   496,   497,    58,    59,    60,    61,   502,    63,
   171,   172,   173,   174,   175,   714,   715,   716,   512,   513,
   181,   188,   178,   179,     6,   178,   179,   521,   184,     6,
   186,   184,   182,   186,   184,   182,   182,   531,   184,   182,
   796,   797,   823,   182,     6,   184,   182,   541,   542,    55,
    56,   161,   162,   163,   164,   165,  1526,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   173,   174,   175,   178,
   179,   181,     6,   183,   181,   184,   162,   186,   164,   107,
   108,   109,   110,   111,   170,     6,   182,   182,   184,   184,
   581,     4,  1562,   161,   162,   163,   164,   165,     4,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   182,   182,
   184,   184,   182,   181,   184,   182,   182,   184,   184,   161,
   162,   163,   164,   165,   823,   167,   168,   169,   170,   171,
   172,   173,   174,   175,     6,   182,   182,   184,   184,   181,
    42,   635,   636,   184,   187,   186,   189,   233,   187,   187,
   189,   189,   187,     3,   189,   649,   650,   651,   652,   653,
   654,   655,   974,   187,   658,   189,   182,   187,   662,   189,
   187,   665,   189,   187,   187,   189,   189,     5,   182,  1649,
   674,   182,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   182,   686,   687,     6,   931,   181,     6,   455,   161,
   162,   163,   164,   165,   762,   167,   168,   169,   170,   171,
   172,   173,   174,   175,     6,   187,   187,   189,   189,   181,
   714,   715,   716,     6,     7,   719,   720,     5,   187,   723,
   189,   187,   182,   189,   970,     6,   182,   731,   732,   188,
   161,   162,   163,   164,   165,   182,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   182,   342,   343,   188,   187,
   181,   189,   187,   187,   189,   189,   188,   187,   187,   189,
   189,   182,   766,   767,   768,   769,   770,   771,   772,   773,
   774,   775,   776,   777,   778,   779,   187,   182,   189,   161,
   162,   163,   164,   165,   182,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   182,   187,   797,   189,   187,   181,
   189,   805,   182,   807,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,   187,   823,
   189,   825,     4,   827,   163,   164,   165,   188,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   841,   842,   843,
   188,   187,   181,   189,  1166,   187,   187,   189,   189,   184,
   864,   188,     6,    95,     6,   182,   860,   861,   182,   161,
   162,   163,   164,   165,   182,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   182,   182,   182,   182,   182,   181,
   161,   162,   163,   164,   165,   182,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   182,   182,   182,   182,   182,
   181,   902,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   678,   679,   182,   681,   511,   683,   684,   182,   182,
   182,   182,   189,     3,     4,   182,   182,   182,   932,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     5,   721,   722,   960,   961,   725,  1027,
   187,   183,   187,     6,     4,   181,   970,   186,     7,     7,
     7,     7,   739,   740,   183,     7,     7,    90,   745,   746,
   984,   985,   996,   188,   153,   752,     6,   754,     5,     5,
     5,   995,   164,   165,   998,   167,   168,   169,   170,   171,
   172,   173,   174,   175,  1008,     5,     5,     5,     5,   181,
     5,  1015,  1016,  1017,     5,     5,     5,     5,  1022,     5,
     5,     5,  1026,     5,     5,     5,  1030,  1031,  1032,  1033,
  1034,  1035,  1036,  1037,  1038,  1039,  1040,  1041,  1042,  1043,
     5,     5,     5,     5,     5,   140,     5,     5,     5,   816,
  1054,   818,     5,     3,     5,   187,     5,  1061,     6,     5,
   183,   828,   829,   830,     6,     4,   833,   834,   835,   836,
   837,   838,   839,     6,  1078,     7,     7,     7,     7,     7,
     7,   677,     7,   186,   189,   189,   188,   188,     7,     7,
  1104,   171,   172,   182,     7,   154,  1100,   177,     5,   187,
   187,   187,   182,   187,   187,   185,   187,     6,   188,   187,
   187,   187,   187,   187,   187,   711,   712,   713,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   187,   187,     4,   187,   733,   181,   187,
   187,   161,   162,   163,   164,   165,   742,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   182,   187,   187,   187,
   187,   181,   187,   930,   187,  1169,  1170,     6,  1172,  1415,
  1174,  1175,   182,   187,   187,   187,   187,  1181,   187,   187,
   183,   187,     6,   185,     6,  1189,   182,     7,   182,   182,
   182,     6,     4,  1197,     7,   182,     6,     6,  1202,   182,
     7,  1205,     7,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,  1217,  1218,  1219,  1220,   184,   188,     7,
     7,  1225,   182,     7,  1228,   992,  1230,  1231,  1232,     7,
   182,     7,   999,     7,     7,   182,     7,  1483,  1252,  1485,
     7,   182,   182,     7,   182,     7,   150,     3,     3,     3,
     4,  1018,     3,   173,     3,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,  1537,  1296,     5,  1298,     5,     4,     6,  1312,   183,
  1304,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,   183,   186,     7,     6,   186,
     6,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
     6,     6,     6,   188,  1338,  1339,     6,     6,    91,   188,
   187,   187,   183,   187,   187,  1359,   183,   183,   183,   187,
   946,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   187,   183,   187,   187,
   187,   181,     6,   187,     6,   183,   187,   183,     4,   975,
     7,   977,   186,   979,   187,   187,   187,   187,   187,   187,
   187,   187,     6,    92,     6,     6,   185,     6,     6,  1403,
  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
  1414,  1178,     6,  1180,     6,  1429,  1183,   171,   172,   189,
     6,     6,     6,   177,     6,     6,     6,     6,   182,     6,
     6,   185,  1199,     6,   188,     6,     6,    91,     3,     6,
     6,     3,   173,     6,     3,     6,     6,     3,     6,  1463,
     3,     6,     6,     3,     6,     3,     3,     6,  1462,     4,
     6,   186,     6,     6,  1468,  1469,  1470,  1471,  1472,  1473,
  1474,  1475,  1476,  1477,     7,  1479,     6,  1481,   189,   186,
   185,  1495,   188,    88,   188,   188,     3,     4,   188,   183,
   187,   187,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   187,   183,    93,  1523,
  1524,   183,   187,   187,  1528,  1529,  1530,  1531,  1532,  1533,
   183,   187,   183,  1300,   183,   187,   183,   187,   183,     4,
    91,  1308,  1309,   150,     6,     3,     6,     6,     3,     6,
     6,     3,     6,     6,  1558,     6,     6,     6,     5,  1563,
  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,     6,     5,
   189,     6,   188,  1169,  1170,   188,  1172,   187,     6,   183,
     6,     6,     6,   189,   187,   187,   187,  1591,  1592,  1593,
  1594,  1595,  1596,  1597,   183,  1599,   187,  1601,   161,   162,
   163,   164,   165,     6,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   187,   183,  1619,  1620,  1621,   181,   187,
     6,     6,     6,     6,  1391,     6,     6,  1394,     6,  1633,
  1634,  1635,  1636,  1637,  1638,  1231,     8,     6,     6,     5,
     5,   150,   183,   183,     6,   187,  1650,  1651,  1652,  1653,
   188,  1655,   188,  1657,   171,   172,   187,   189,   187,   187,
   177,   187,   187,     6,   188,   182,   188,   188,   185,   188,
     6,   188,   187,  1677,  1678,  1679,    88,     6,     6,     5,
     5,   188,  1686,   188,  1688,   189,  1690,   188,   187,   187,
  1457,   183,   183,     3,     4,   188,    88,     6,  1465,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     3,     4,   189,   189,     6,     6,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     6,     6,     3,     4,     6,   188,     6,
  1527,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     6,     6,     6,   187,   161,
   162,   163,   164,   165,  1561,   167,   168,   169,   170,   171,
   172,   173,   174,   175,     6,   187,     6,     6,   155,   181,
     6,   156,   187,   187,     6,   188,   187,     3,     4,     5,
   183,     7,  1589,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   188,    34,    35,
    36,  1618,     6,   188,     6,     6,     6,     6,   188,     6,
   187,   171,   172,   187,   187,  1632,   188,   177,   188,     6,
     6,   183,   182,   161,   162,   163,   164,   165,   188,   167,
   168,   169,   170,   171,   172,   173,   174,   175,     6,   188,
   188,   171,   172,   181,   188,     6,     6,   177,     6,   187,
     0,   189,   182,     0,   583,     7,     7,    -1,   188,     7,
    -1,   990,    -1,   935,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   171,   172,    -1,    -1,    -1,    -1,   177,
    -1,    -1,    -1,    -1,   182,     3,     4,     5,    -1,    -1,
   188,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     8,    34,    35,    36,    -1,
    -1,   157,   158,   159,   160,    -1,    -1,    -1,    -1,    -1,
     8,    -1,    -1,    -1,    -1,   171,   172,    -1,    -1,    -1,
    -1,   177,   178,   179,    -1,     8,   182,    -1,   184,    -1,
   186,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   171,   172,    -1,    -1,    -1,    -1,   177,
    -1,    -1,    -1,    -1,   182,    -1,    -1,    -1,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   161,   162,   163,   164,   165,   181,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   161,   162,
   163,   164,   165,   181,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   171,
   172,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,
   182,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,   171,
   172,   181,    -1,    -1,    -1,   177,    -1,   187,    -1,   189,
   182,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    47,    -1,    49,    50,    -1,    52,    53,    -1,   171,
   172,    -1,    -1,     0,     1,   177,     3,     4,    -1,    -1,
   182,    -1,    -1,    69,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    85,
    86,    87,    -1,    -1,   181,    -1,    33,    -1,    -1,    -1,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
    57,    58,    59,    60,    61,    62,    63,    -1,    65,    66,
    67,    68,    69,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    85,    86,
    87,   147,    -1,   181,    -1,   183,    -1,    94,    -1,    96,
    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     4,   122,   123,   124,   125,   126,
   127,   128,   129,   189,    -1,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   147,   148,   149,    33,   151,   181,    -1,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    47,    48,    49,
    50,    51,    52,    53,    -1,    -1,    -1,    57,    58,    59,
    60,    61,    62,    63,    41,    65,    66,    67,    68,    69,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    85,    86,    87,    -1,    -1,
   181,    -1,   183,    -1,    94,    -1,    96,    97,    98,    99,
   100,   101,   102,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    47,    -1,    49,    50,    -1,    52,    53,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
    -1,    -1,    -1,    -1,    69,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,   147,    -1,    -1,
    85,    86,    87,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,    -1,   141,   142,   143,   144,   145,   146,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,    -1,    -1,    -1,    -1,   187,    -1,   189,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,   162,   163,
   164,   165,   147,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
   161,   162,   163,   164,   165,   189,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,    -1,   161,   162,   163,   164,   165,   189,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,    -1,   161,   162,   163,   164,
   165,   189,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,
   162,   163,   164,   165,   189,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,   161,   162,   163,   164,   165,   189,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,    -1,   161,   162,   163,   164,   165,
   189,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,   162,
   163,   164,   165,   189,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
    -1,   161,   162,   163,   164,   165,   189,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,    -1,   161,   162,   163,   164,   165,   189,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,   162,   163,
   164,   165,   189,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,
   161,   162,   163,   164,   165,   189,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,    -1,   161,   162,   163,   164,   165,   189,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,    -1,   161,   162,   163,   164,
   165,   189,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,
   162,   163,   164,   165,   189,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,   161,   162,   163,   164,   165,   189,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,    -1,   161,   162,   163,   164,   165,
   189,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,    -1,   161,   162,
   163,   164,   165,   189,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
    -1,   161,   162,   163,   164,   165,   189,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,    -1,    -1,    -1,   187,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,
   187,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,   164,
   165,   187,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,   163,
   164,   165,   187,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,   162,
   163,   164,   165,   187,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,   161,
   162,   163,   164,   165,   187,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
   161,   162,   163,   164,   165,   187,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,   161,   162,   163,   164,   165,   187,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,   161,   162,   163,   164,   165,   187,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,   161,   162,   163,   164,   165,   187,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,   161,   162,   163,   164,   165,   187,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,   185,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,    -1,    -1,   185,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,
   162,   163,   164,   165,    -1,   167,   168,   169,   170,   171,
   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,
    -1,   183,   161,   162,   163,   164,   165,    -1,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,   165,
    -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,
   163,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,
   183,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
    -1,   181,    -1,   183,   161,   162,   163,   164,   165,    -1,
   167,   168,   169,   170,   171,   172,   173,   174,   175,    -1,
    -1,    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,
   164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
   174,   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183,
   161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
   181,    -1,   183,   161,   162,   163,   164,   165,    -1,   167,
   168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    -1,    -1,    -1,   181,    -1,   183,   161,   162,   163,   164,
   165,    -1,   167,   168,   169,   170,   171,   172,   173,   174,
   175,    -1,    -1,    -1,    -1,    -1,   181,    -1,   183
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 158 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 166 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 167 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 172 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 186 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 193 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 210 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 211 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 212 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 217 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 222 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 233 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 236 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 240 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 246 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 252 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 259 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 265 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 269 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 273 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 280 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 284 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 289 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 293 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 297 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 301 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 305 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 309 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 313 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 317 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 323 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 326 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 329 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 333 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 337 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 341 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 345 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 350 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 353 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 357 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 360 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 367 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 370 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 380 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 383 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh file format read");
    ;
    break;}
case 55:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 405 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 68:
#line 409 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c,yyvsp[-2].l,tmpstring);
      if(i<0) 
	vyyerror("Too few arguments in Printf");
      else if(i>0)
	vyyerror("Too many arguments (%d) in Printf", i);
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 69:
#line 427 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 70:
#line 431 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 71:
#line 438 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 86:
#line 459 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 461 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 466 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 89:
#line 471 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 90:
#line 478 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 480 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 485 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 93:
#line 490 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 94:
#line 497 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 499 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 504 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 509 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 98:
#line 516 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 518 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 524 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 530 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 102:
#line 537 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 539 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 545 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 551 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 106:
#line 558 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 560 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 566 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 572 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 110:
#line 579 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 581 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 588 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 597 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 114:
#line 604 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 606 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 613 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 622 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 118:
#line 629 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 631 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 638 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 647 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 122:
#line 654 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 656 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 664 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 673 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 126:
#line 680 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 682 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 690 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 699 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 130:
#line 706 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 131:
#line 708 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 132:
#line 716 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 133:
#line 725 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 134:
#line 732 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 135:
#line 737 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 136:
#line 745 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 137:
#line 752 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 138:
#line 759 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 139:
#line 764 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 140:
#line 772 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 141:
#line 779 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 142:
#line 790 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 143:
#line 791 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 144:
#line 792 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 145:
#line 793 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 146:
#line 794 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 147:
#line 797 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 148:
#line 798 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 149:
#line 805 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 150:
#line 832 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 151:
#line 866 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	    }
	    List_Add(Symbol_L, &TheSymbol);
	  }
	  else
	    vyyerror("Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 152:
#line 913 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 153:
#line 928 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 154:
#line 937 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 155:
#line 952 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 156:
#line 964 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 157:
#line 978 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 158:
#line 1001 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 159:
#line 1025 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 160:
#line 1037 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 161:
#line 1051 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 162:
#line 1063 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 163:
#line 1077 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 164:
#line 1097 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 165:
#line 1119 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].d); 
	}
	catch (...) {
	  Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
	}
      }
    ;
    break;}
case 166:
#line 1131 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].c); 
	}
	catch (...) {
	  Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
	}
      }
    ;
    break;}
case 167:
#line 1153 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1160 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1166 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 170:
#line 1185 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 171:
#line 1199 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 172:
#line 1205 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1211 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 174:
#line 1230 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1236 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1242 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 177:
#line 1259 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 178:
#line 1265 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1271 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1277 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	vyyerror("Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
		 List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 181:
#line 1288 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BEZIER,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	vyyerror("Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
		 List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 182:
#line 1299 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong definition of Nurbs Curve %d: "
		 "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
		 (int)yyvsp[-8].d, 
		 List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
	for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
	  List_Read(yyvsp[-5].l,i,&d);
	  j = (int)d;
	  List_Add(Temp,&j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 183:
#line 1324 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1330 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 185:
#line 1349 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 186:
#line 1372 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 187:
#line 1380 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 188:
#line 1384 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1390 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 190:
#line 1399 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 191:
#line 1405 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 192:
#line 1411 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 193:
#line 1424 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1429 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 195:
#line 1434 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 196:
#line 1439 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 197:
#line 1446 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 198:
#line 1447 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 199:
#line 1448 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 200:
#line 1453 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 201:
#line 1457 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 202:
#line 1462 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num,THEM);
	if(!v)
	  vyyerror("Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 203:
#line 1477 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num,THEM);
	if(!c)
	  vyyerror("Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 204:
#line 1492 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num,THEM);
	if(!s)
	  vyyerror("Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 205:
#line 1514 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 206:
#line 1532 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 207:
#line 1539 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 208:
#line 1544 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 209:
#line 1556 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  //
	  //Est-ce grave de laisser le stream ouvert? Si on fait le
	  //fclose, on ne peut pas faire appel a une fonction
	  //(Function) definie en dehors de son fichier de
	  //definition...
	  //
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing system call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 210:
#line 1623 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 211:
#line 1643 "Gmsh.y"
{
#ifndef _NOPLUGIN
    if(CTX.default_plugins)
      GMSH_PluginManager::Instance()->Action(yyvsp[-4].c,yyvsp[-1].c,0); 
#endif
   ;
    break;}
case 212:
#line 1650 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 213:
#line 1654 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 214:
#line 1676 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 215:
#line 1686 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 216:
#line 1696 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 217:
#line 1717 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 218:
#line 1738 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 219:
#line 1759 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yyname,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 220:
#line 1765 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yyname,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 221:
#line 1770 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yyname,yylineno))
	vyyerror("Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 222:
#line 1775 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 223:
#line 1779 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 1791 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,
			   &pc,&prc,NULL);
    ;
    break;}
case 225:
#line 1798 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 226:
#line 1805 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 227:
#line 1814 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,1,NULL);
    ;
    break;}
case 228:
#line 1819 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,1,NULL);
    ;
    break;}
case 229:
#line 1824 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,1,NULL);
    ;
    break;}
case 230:
#line 1829 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 231:
#line 1834 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			   0.,0.,0.,0.,0.,0.,0.,1,&extr);
    ;
    break;}
case 232:
#line 1839 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 233:
#line 1844 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,1,&extr);
    ;
    break;}
case 234:
#line 1849 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 235:
#line 1854 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,1,&extr);
    ;
    break;}
case 236:
#line 1862 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			     0.,0.,0.,0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 237:
#line 1867 "Gmsh.y"
{
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 238:
#line 1872 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 239:
#line 1877 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 240:
#line 1882 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			     0.,0.,0.,0.,0.,0.,0.,vol,&extr);
    ;
    break;}
case 241:
#line 1888 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 242:
#line 1894 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 243:
#line 1900 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 244:
#line 1906 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 245:
#line 1915 "Gmsh.y"
{
    ;
    break;}
case 246:
#line 1918 "Gmsh.y"
{
    ;
    break;}
case 247:
#line 1924 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	  List_Read(yyvsp[-6].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	vyyerror("Wrong layer definition {%d, %d, %d}", 
	       List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 248:
#line 1950 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-4].l);i++){
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	vyyerror("Wrong layer definition {%d, %d}", 
	       List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 249:
#line 1974 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 250:
#line 1985 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 251:
#line 2003 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 252:
#line 2021 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 253:
#line 2039 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong definition of Transfinite Surface %d: "
		   "%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 254:
#line 2061 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong definition of Elliptic Surface %d: "
		   "%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 255:
#line 2082 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	Msg(WARNING, "Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong definition of Transfinite Volume %d: "
		   "%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 256:
#line 2103 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 257:
#line 2117 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 258:
#line 2139 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 259:
#line 2143 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 260:
#line 2154 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 261:
#line 2155 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 262:
#line 2156 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 263:
#line 2157 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 264:
#line 2158 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 265:
#line 2162 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 266:
#line 2163 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 267:
#line 2164 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 268:
#line 2165 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 269:
#line 2166 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 270:
#line 2167 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 271:
#line 2168 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 272:
#line 2169 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 273:
#line 2171 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 274:
#line 2177 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 275:
#line 2178 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 276:
#line 2179 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 277:
#line 2180 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 278:
#line 2181 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 279:
#line 2182 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 280:
#line 2183 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 281:
#line 2184 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 282:
#line 2185 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 283:
#line 2186 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 284:
#line 2187 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 285:
#line 2188 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 286:
#line 2189 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 287:
#line 2190 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 288:
#line 2191 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 289:
#line 2192 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 290:
#line 2193 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 291:
#line 2194 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 292:
#line 2195 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 293:
#line 2196 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 294:
#line 2197 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 295:
#line 2198 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 296:
#line 2199 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 297:
#line 2200 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 298:
#line 2201 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 299:
#line 2202 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 300:
#line 2203 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 301:
#line 2204 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 302:
#line 2205 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 303:
#line 2206 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 304:
#line 2207 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 305:
#line 2208 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 306:
#line 2210 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 307:
#line 2211 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 308:
#line 2212 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 309:
#line 2213 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 310:
#line 2214 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 311:
#line 2215 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 312:
#line 2216 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 313:
#line 2217 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 314:
#line 2218 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 315:
#line 2219 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 316:
#line 2220 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 317:
#line 2221 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 318:
#line 2222 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 319:
#line 2223 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 320:
#line 2224 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 321:
#line 2225 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 322:
#line 2226 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 323:
#line 2227 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 324:
#line 2228 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 325:
#line 2229 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 326:
#line 2230 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 327:
#line 2239 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 328:
#line 2240 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 329:
#line 2241 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 330:
#line 2242 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 331:
#line 2247 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 332:
#line 2258 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 333:
#line 2275 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 334:
#line 2286 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 335:
#line 2305 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 336:
#line 2321 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 337:
#line 2337 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 338:
#line 2353 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 339:
#line 2371 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 340:
#line 2375 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 341:
#line 2379 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 342:
#line 2383 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 343:
#line 2387 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 344:
#line 2393 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 345:
#line 2397 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 346:
#line 2401 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 347:
#line 2405 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 348:
#line 2412 "Gmsh.y"
{
    ;
    break;}
case 349:
#line 2415 "Gmsh.y"
{
    ;
    break;}
case 350:
#line 2421 "Gmsh.y"
{
    ;
    break;}
case 351:
#line 2424 "Gmsh.y"
{
    ;
    break;}
case 352:
#line 2430 "Gmsh.y"
{
    ;
    break;}
case 353:
#line 2433 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 354:
#line 2437 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 355:
#line 2444 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 356:
#line 2449 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 357:
#line 2457 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 358:
#line 2462 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 359:
#line 2466 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 360:
#line 2470 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 361:
#line 2481 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 362:
#line 2487 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 363:
#line 2498 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 364:
#line 2512 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 365:
#line 2528 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 366:
#line 2548 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 367:
#line 2573 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 368:
#line 2578 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 369:
#line 2582 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 370:
#line 2586 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 371:
#line 2598 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 372:
#line 2602 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 373:
#line 2613 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 374:
#line 2618 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 375:
#line 2637 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 376:
#line 2641 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 377:
#line 2655 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 378:
#line 2660 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 379:
#line 2667 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 380:
#line 2671 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 381:
#line 2679 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 382:
#line 2692 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 383:
#line 2696 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c,yyvsp[-1].l,tmpstring);
      if(i<0){
	vyyerror("Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i>0){
	vyyerror("Too many arguments (%d) in Sprintf", i);
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 384:
#line 2714 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 385:
#line 2728 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2743 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0 ; i<List_Nbr(list) ; i++){
    k = j;
    j++;
    if(j<(int)strlen(format)){
      if(format[j]=='%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j]!='%' && j<(int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]),j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list,i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
      break ;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


