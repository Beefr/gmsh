/* A Bison parser, made from Gmsh.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	tDOUBLE	257
# define	tSTRING	258
# define	tBIGSTR	259
# define	tEND	260
# define	tAFFECT	261
# define	tDOTS	262
# define	tPi	263
# define	tMPI_Rank	264
# define	tMPI_Size	265
# define	tExp	266
# define	tLog	267
# define	tLog10	268
# define	tSqrt	269
# define	tSin	270
# define	tAsin	271
# define	tCos	272
# define	tAcos	273
# define	tTan	274
# define	tRand	275
# define	tAtan	276
# define	tAtan2	277
# define	tSinh	278
# define	tCosh	279
# define	tTanh	280
# define	tFabs	281
# define	tFloor	282
# define	tCeil	283
# define	tFmod	284
# define	tModulo	285
# define	tHypot	286
# define	tPrintf	287
# define	tSprintf	288
# define	tStrCat	289
# define	tStrPrefix	290
# define	tDraw	291
# define	tPoint	292
# define	tCircle	293
# define	tEllipse	294
# define	tLine	295
# define	tSurface	296
# define	tSpline	297
# define	tVolume	298
# define	tCharacteristic	299
# define	tLength	300
# define	tParametric	301
# define	tElliptic	302
# define	tPlane	303
# define	tRuled	304
# define	tTransfinite	305
# define	tComplex	306
# define	tPhysical	307
# define	tUsing	308
# define	tBump	309
# define	tProgression	310
# define	tPlugin	311
# define	tRotate	312
# define	tTranslate	313
# define	tSymmetry	314
# define	tDilate	315
# define	tExtrude	316
# define	tDuplicata	317
# define	tLoop	318
# define	tRecombine	319
# define	tDelete	320
# define	tCoherence	321
# define	tIntersect	322
# define	tAttractor	323
# define	tLayers	324
# define	tScalarPoint	325
# define	tVectorPoint	326
# define	tTensorPoint	327
# define	tScalarLine	328
# define	tVectorLine	329
# define	tTensorLine	330
# define	tScalarTriangle	331
# define	tVectorTriangle	332
# define	tTensorTriangle	333
# define	tScalarQuadrangle	334
# define	tVectorQuadrangle	335
# define	tTensorQuadrangle	336
# define	tScalarTetrahedron	337
# define	tVectorTetrahedron	338
# define	tTensorTetrahedron	339
# define	tScalarHexahedron	340
# define	tVectorHexahedron	341
# define	tTensorHexahedron	342
# define	tScalarPrism	343
# define	tVectorPrism	344
# define	tTensorPrism	345
# define	tScalarPyramid	346
# define	tVectorPyramid	347
# define	tTensorPyramid	348
# define	tText2D	349
# define	tText3D	350
# define	tBSpline	351
# define	tBezier	352
# define	tNurbs	353
# define	tOrder	354
# define	tWith	355
# define	tBounds	356
# define	tKnots	357
# define	tColor	358
# define	tColorTable	359
# define	tFor	360
# define	tIn	361
# define	tEndFor	362
# define	tIf	363
# define	tEndIf	364
# define	tExit	365
# define	tReturn	366
# define	tCall	367
# define	tFunction	368
# define	tMesh	369
# define	tB_SPLINE_SURFACE_WITH_KNOTS	370
# define	tB_SPLINE_CURVE_WITH_KNOTS	371
# define	tCARTESIAN_POINT	372
# define	tTRUE	373
# define	tFALSE	374
# define	tUNSPECIFIED	375
# define	tU	376
# define	tV	377
# define	tEDGE_CURVE	378
# define	tVERTEX_POINT	379
# define	tORIENTED_EDGE	380
# define	tPLANE	381
# define	tFACE_OUTER_BOUND	382
# define	tEDGE_LOOP	383
# define	tADVANCED_FACE	384
# define	tVECTOR	385
# define	tDIRECTION	386
# define	tAXIS2_PLACEMENT_3D	387
# define	tISO	388
# define	tENDISO	389
# define	tENDSEC	390
# define	tDATA	391
# define	tHEADER	392
# define	tFILE_DESCRIPTION	393
# define	tFILE_SCHEMA	394
# define	tFILE_NAME	395
# define	tMANIFOLD_SOLID_BREP	396
# define	tCLOSED_SHELL	397
# define	tADVANCED_BREP_SHAPE_REPRESENTATION	398
# define	tFACE_BOUND	399
# define	tCYLINDRICAL_SURFACE	400
# define	tCONICAL_SURFACE	401
# define	tCIRCLE	402
# define	tTRIMMED_CURVE	403
# define	tGEOMETRIC_SET	404
# define	tCOMPOSITE_CURVE_SEGMENT	405
# define	tCONTINUOUS	406
# define	tCOMPOSITE_CURVE	407
# define	tTOROIDAL_SURFACE	408
# define	tPRODUCT_DEFINITION	409
# define	tPRODUCT_DEFINITION_SHAPE	410
# define	tSHAPE_DEFINITION_REPRESENTATION	411
# define	tELLIPSE	412
# define	tTrimmed	413
# define	tSolid	414
# define	tEndSolid	415
# define	tVertex	416
# define	tFacet	417
# define	tNormal	418
# define	tOuter	419
# define	tLoopSTL	420
# define	tEndLoop	421
# define	tEndFacet	422
# define	tAFFECTPLUS	423
# define	tAFFECTMINUS	424
# define	tAFFECTTIMES	425
# define	tAFFECTDIVIDE	426
# define	tOR	427
# define	tAND	428
# define	tEQUAL	429
# define	tNOTEQUAL	430
# define	tAPPROXEQUAL	431
# define	tLESSOREQUAL	432
# define	tGREATEROREQUAL	433
# define	tCROSSPRODUCT	434
# define	tPLUSPLUS	435
# define	tMINUSMINUS	436
# define	UNARYPREC	437

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.154 2003-03-21 00:52:43 geuzaine Exp $
//
// Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

List_T *Symbol_L = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static FILE *yyinTab[MAX_OPEN_FILES];
static int yylinenoTab[MAX_OPEN_FILES];
static fpos_t yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char *LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char yynameTab[MAX_OPEN_FILES][256];
static char tmpstring[1024];
static Symbol TheSymbol, *pSymbol;
static Surface *STL_Surf;
static Shape TheShape;
static int i, j, k, flag, RecursionLevel = 0, ImbricatedLoop = 0;
static int Last_NumberOfPoints = 0;
static double d, *pd;
static ExtrudeParams extr;
static char *str;
static StringXString *pStrCat;
static StringXNumber *pNumCat;
static StringXColor *pColCat;
static double (*pNumOpt)(int num, int action, double value);
static char* (*pStrOpt)(int num, int action, char *value);
static unsigned int (*pColOpt)(int num, int action, unsigned int value);
static Post_View *View;

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);

#line 85 "Gmsh.y"
#ifndef YYSTYPE
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		2272
#define	YYFLAG		-32768
#define	YYNTBASE	202

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 437 ? yytranslate[x] : 335)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   189,     2,     2,     2,   187,     2,     2,
     194,   195,   185,   183,   199,   184,   198,   186,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     179,     2,   181,   173,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   196,     2,   197,   193,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   200,     2,   201,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   174,   175,   176,
     177,   178,   180,   182,   188,   190,   191,   192
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,     9,    11,    14,    16,    38,
      40,    41,    44,    46,    48,    50,    53,    56,    59,    62,
      65,    73,    79,    97,   107,   131,   163,   179,   191,   203,
     219,   229,   243,   253,   265,   279,   289,   299,   311,   321,
     333,   343,   355,   369,   383,   395,   409,   427,   437,   449,
     461,   475,   487,   497,   498,   501,   503,   505,   507,   509,
     511,   513,   515,   517,   519,   521,   523,   525,   527,   533,
     541,   548,   557,   558,   561,   564,   567,   570,   573,   576,
     579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
     609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
     638,   642,   643,   657,   659,   663,   664,   678,   680,   684,
     685,   699,   701,   705,   706,   726,   728,   732,   733,   753,
     755,   759,   760,   780,   782,   786,   787,   813,   815,   819,
     820,   846,   848,   852,   853,   879,   881,   885,   886,   918,
     920,   924,   925,   957,   959,   963,   964,   996,   998,  1002,
    1003,  1035,  1037,  1041,  1042,  1074,  1076,  1080,  1081,  1113,
    1115,  1119,  1120,  1176,  1178,  1182,  1183,  1239,  1241,  1245,
    1246,  1302,  1304,  1308,  1309,  1353,  1355,  1359,  1360,  1404,
    1406,  1410,  1411,  1455,  1457,  1461,  1462,  1500,  1502,  1506,
    1507,  1545,  1547,  1551,  1552,  1590,  1592,  1596,  1597,  1611,
    1613,  1617,  1618,  1634,  1636,  1638,  1640,  1642,  1644,  1646,
    1648,  1653,  1661,  1671,  1678,  1682,  1689,  1696,  1706,  1713,
    1723,  1729,  1738,  1747,  1759,  1766,  1776,  1786,  1796,  1804,
    1813,  1826,  1833,  1841,  1849,  1862,  1870,  1878,  1888,  1906,
    1915,  1924,  1932,  1940,  1952,  1961,  1974,  1983,  2006,  2027,
    2036,  2045,  2054,  2062,  2071,  2077,  2089,  2095,  2105,  2107,
    2109,  2111,  2112,  2115,  2122,  2129,  2136,  2141,  2148,  2153,
    2160,  2164,  2170,  2174,  2178,  2186,  2189,  2192,  2199,  2208,
    2217,  2228,  2230,  2233,  2235,  2239,  2244,  2246,  2255,  2268,
    2283,  2284,  2297,  2298,  2315,  2316,  2335,  2344,  2357,  2372,
    2373,  2386,  2387,  2404,  2405,  2424,  2433,  2446,  2461,  2462,
    2475,  2476,  2493,  2494,  2513,  2515,  2518,  2528,  2536,  2539,
    2546,  2556,  2566,  2575,  2584,  2593,  2600,  2605,  2608,  2611,
    2613,  2615,  2617,  2619,  2621,  2623,  2627,  2630,  2633,  2636,
    2640,  2644,  2648,  2652,  2656,  2660,  2664,  2668,  2672,  2676,
    2680,  2684,  2688,  2692,  2698,  2703,  2708,  2713,  2718,  2723,
    2728,  2733,  2738,  2743,  2748,  2755,  2760,  2765,  2770,  2775,
    2780,  2785,  2792,  2799,  2806,  2811,  2816,  2821,  2826,  2831,
    2836,  2841,  2846,  2851,  2856,  2861,  2868,  2873,  2878,  2883,
    2888,  2893,  2898,  2905,  2912,  2919,  2924,  2926,  2928,  2930,
    2932,  2934,  2939,  2942,  2948,  2952,  2959,  2964,  2972,  2974,
    2977,  2980,  2984,  2988,  3000,  3010,  3018,  3026,  3027,  3031,
    3033,  3037,  3038,  3042,  3046,  3048,  3052,  3054,  3056,  3060,
    3065,  3069,  3075,  3079,  3084,  3091,  3099,  3101,  3103,  3107,
    3111,  3121,  3129,  3131,  3137,  3141,  3148,  3150,  3154,  3156,
    3163,  3168,  3173,  3180,  3187
};
static const short yyrhs[] =
{
     205,     0,   204,     0,   210,     0,     1,     6,     0,     3,
       0,   184,     3,     0,   160,     0,   163,   164,   203,   203,
     203,   165,   166,   162,   203,   203,   203,   162,   203,   203,
     203,   162,   203,   203,   203,   167,   168,     0,   161,     0,
       0,   205,   206,     0,   207,     0,   209,     0,   208,     0,
     134,     6,     0,   135,     6,     0,   137,     6,     0,   136,
       6,     0,   138,     6,     0,   139,   194,   324,   199,     5,
     195,     6,     0,   140,   194,   324,   195,     6,     0,   141,
     194,     5,   199,     5,   199,   324,   199,   324,   199,     5,
     199,     5,   199,     5,   195,     6,     0,     3,     7,   118,
     194,     5,   199,   322,   195,     6,     0,     3,     7,   117,
     194,     5,   199,   320,   199,   328,   199,   319,   199,   319,
     199,   319,   199,   328,   199,   328,   199,   319,   195,     6,
       0,     3,     7,   116,   194,     5,   199,   320,   199,   320,
     199,   326,   199,   319,   199,   319,   199,   319,   199,   319,
     199,   328,   199,   328,   199,   328,   199,   328,   199,   319,
     195,     6,     0,     3,     7,   124,   194,     5,   199,     3,
     199,     3,   199,     3,   199,   319,   195,     6,     0,     3,
       7,   128,   194,     5,   199,     3,   199,   319,   195,     6,
       0,     3,     7,   145,   194,     5,   199,     3,   199,   319,
     195,     6,     0,     3,     7,   126,   194,     5,   199,   185,
     199,   185,   199,   320,   199,   319,   195,     6,     0,     3,
       7,   129,   194,     5,   199,   328,   195,     6,     0,     3,
       7,   130,   194,     5,   199,   328,   199,     3,   199,   319,
     195,     6,     0,     3,     7,   125,   194,     5,   199,     3,
     195,     6,     0,     3,     7,   131,   194,     5,   199,     3,
     199,   320,   195,     6,     0,     3,     7,   133,   194,     5,
     199,     3,   199,     3,   199,     3,   195,     6,     0,     3,
       7,   132,   194,     5,   199,   322,   195,     6,     0,     3,
       7,   127,   194,     5,   199,     3,   195,     6,     0,     3,
       7,    41,   194,     5,   199,     3,   199,     3,   195,     6,
       0,     3,     7,   143,   194,     5,   199,   328,   195,     6,
       0,     3,     7,   144,   194,     5,   199,   328,   199,     3,
     195,     6,     0,     3,     7,   142,   194,     5,   199,     3,
     195,     6,     0,     3,     7,   146,   194,     5,   199,     3,
     199,   320,   195,     6,     0,     3,     7,   147,   194,     5,
     199,     3,   199,   320,   199,   320,   195,     6,     0,     3,
       7,   154,   194,     5,   199,     3,   199,   320,   199,   320,
     195,     6,     0,     3,     7,   148,   194,     5,   199,     3,
     199,   320,   195,     6,     0,     3,     7,   158,   194,     5,
     199,     3,   199,   320,   199,   320,   195,     6,     0,     3,
       7,   149,   194,     5,   199,     3,   199,   328,   199,   328,
     199,   319,   199,   319,   195,     6,     0,     3,     7,   150,
     194,     5,   199,   328,   195,     6,     0,     3,     7,   151,
     194,   152,   199,   319,   199,     3,   195,     6,     0,     3,
       7,   153,   194,     5,   199,   328,   199,   319,   195,     6,
       0,     3,     7,   155,   194,     5,   199,     5,   199,     3,
     199,     3,   195,     6,     0,     3,     7,   156,   194,     5,
     199,     5,   199,     3,   195,     6,     0,     3,     7,   157,
     194,     3,   199,     3,   195,     6,     0,     0,   210,   211,
       0,   213,     0,   212,     0,   295,     0,   296,     0,   297,
       0,   300,     0,   301,     0,   302,     0,   305,     0,   317,
       0,   318,     0,   304,     0,   303,     0,    33,   194,     5,
     195,     6,     0,    33,   194,     5,   199,   330,   195,     6,
       0,     4,     5,   200,   214,   201,     6,     0,     4,     5,
       4,   322,   200,   214,   201,     6,     0,     0,   214,   216,
       0,   214,   219,     0,   214,   222,     0,   214,   225,     0,
     214,   228,     0,   214,   231,     0,   214,   234,     0,   214,
     237,     0,   214,   240,     0,   214,   243,     0,   214,   246,
       0,   214,   249,     0,   214,   252,     0,   214,   255,     0,
     214,   258,     0,   214,   261,     0,   214,   264,     0,   214,
     267,     0,   214,   270,     0,   214,   273,     0,   214,   276,
       0,   214,   279,     0,   214,   282,     0,   214,   285,     0,
     214,   288,     0,   214,   291,     0,   320,     0,   215,   199,
     320,     0,     0,    71,   194,   320,   199,   320,   199,   320,
     195,   217,   200,   215,   201,     6,     0,   320,     0,   218,
     199,   320,     0,     0,    72,   194,   320,   199,   320,   199,
     320,   195,   220,   200,   218,   201,     6,     0,   320,     0,
     221,   199,   320,     0,     0,    73,   194,   320,   199,   320,
     199,   320,   195,   223,   200,   221,   201,     6,     0,   320,
       0,   224,   199,   320,     0,     0,    74,   194,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   195,
     226,   200,   224,   201,     6,     0,   320,     0,   227,   199,
     320,     0,     0,    75,   194,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   195,   229,   200,   227,
     201,     6,     0,   320,     0,   230,   199,   320,     0,     0,
      76,   194,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   195,   232,   200,   230,   201,     6,     0,
     320,     0,   233,   199,   320,     0,     0,    77,   194,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   195,   235,   200,   233,
     201,     6,     0,   320,     0,   236,   199,   320,     0,     0,
      78,   194,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   195,
     238,   200,   236,   201,     6,     0,   320,     0,   239,   199,
     320,     0,     0,    79,   194,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   195,   241,   200,   239,   201,     6,     0,   320,
       0,   242,   199,   320,     0,     0,    80,   194,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   195,   244,   200,   242,   201,     6,     0,   320,     0,
     245,   199,   320,     0,     0,    81,   194,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     195,   247,   200,   245,   201,     6,     0,   320,     0,   248,
     199,   320,     0,     0,    82,   194,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   195,
     250,   200,   248,   201,     6,     0,   320,     0,   251,   199,
     320,     0,     0,    83,   194,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   195,   253,
     200,   251,   201,     6,     0,   320,     0,   254,   199,   320,
       0,     0,    84,   194,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   195,   256,   200,
     254,   201,     6,     0,   320,     0,   257,   199,   320,     0,
       0,    85,   194,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   195,   259,   200,   257,
     201,     6,     0,   320,     0,   260,   199,   320,     0,     0,
      86,   194,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   195,
     262,   200,   260,   201,     6,     0,   320,     0,   263,   199,
     320,     0,     0,    87,   194,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   195,   265,   200,   263,   201,     6,     0,   320,
       0,   266,   199,   320,     0,     0,    88,   194,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   195,   268,   200,   266,   201,
       6,     0,   320,     0,   269,   199,   320,     0,     0,    89,
     194,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   195,   271,   200,   269,
     201,     6,     0,   320,     0,   272,   199,   320,     0,     0,
      90,   194,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   195,   274,   200,
     272,   201,     6,     0,   320,     0,   275,   199,   320,     0,
       0,    91,   194,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   195,   277,
     200,   275,   201,     6,     0,   320,     0,   278,   199,   320,
       0,     0,    92,   194,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   195,   280,   200,   278,   201,     6,     0,
     320,     0,   281,   199,   320,     0,     0,    93,   194,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   199,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   195,   283,
     200,   281,   201,     6,     0,   320,     0,   284,   199,   320,
       0,     0,    94,   194,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   199,   320,   199,   320,   199,   320,   199,
     320,   199,   320,   195,   286,   200,   284,   201,     6,     0,
     334,     0,   287,   199,   334,     0,     0,    95,   194,   320,
     199,   320,   199,   320,   195,   289,   200,   287,   201,     6,
       0,   334,     0,   290,   199,   334,     0,     0,    96,   194,
     320,   199,   320,   199,   320,   199,   320,   195,   292,   200,
     290,   201,     6,     0,     7,     0,   169,     0,   170,     0,
     171,     0,   172,     0,   190,     0,   191,     0,     4,   293,
     320,     6,     0,     4,   196,   320,   197,   293,   320,     6,
       0,     4,   196,   200,   330,   201,   197,   293,   328,     6,
       0,     4,   196,   197,     7,   328,     6,     0,     4,   294,
       6,     0,     4,   196,   320,   197,   294,     6,     0,     4,
     198,     4,     7,   334,     6,     0,     4,   196,   320,   197,
     198,     4,     7,   334,     6,     0,     4,   198,     4,   293,
     320,     6,     0,     4,   196,   320,   197,   198,     4,   293,
     320,     6,     0,     4,   198,     4,   294,     6,     0,     4,
     196,   320,   197,   198,     4,   294,     6,     0,     4,   198,
     104,   198,     4,     7,   331,     6,     0,     4,   196,   320,
     197,   198,   104,   198,     4,     7,   331,     6,     0,     4,
     198,   105,     7,   332,     6,     0,     4,   196,   320,   197,
     198,   105,     7,   332,     6,     0,    57,   194,     4,   195,
     198,     4,     7,   320,     6,     0,    57,   194,     4,   195,
     198,     4,     7,   334,     6,     0,    38,   194,   320,   195,
       7,   322,     6,     0,    53,    38,   194,   320,   195,     7,
     328,     6,     0,    69,    38,   328,     7,   200,   320,   199,
     320,   199,   320,   201,     6,     0,    45,    46,   328,     7,
     320,     6,     0,    41,   194,   320,   195,     7,   328,     6,
       0,    43,   194,   320,   195,     7,   328,     6,     0,    69,
      41,   328,     7,   200,   320,   199,   320,   199,   320,   201,
       6,     0,    39,   194,   320,   195,     7,   328,     6,     0,
      40,   194,   320,   195,     7,   328,     6,     0,    39,   194,
     320,   195,     7,   328,    49,   322,     6,     0,    47,   194,
     320,   195,     7,   200,   320,   199,   320,   199,     5,   199,
       5,   199,     5,   201,     6,     0,    53,    41,   194,   320,
     195,     7,   328,     6,     0,    41,    64,   194,   320,   195,
       7,   328,     6,     0,    97,   194,   320,   195,     7,   328,
       6,     0,    98,   194,   320,   195,     7,   328,     6,     0,
      99,   194,   320,   195,     7,   328,   103,   328,   100,   320,
       6,     0,    49,    42,   194,   320,   195,     7,   328,     6,
       0,   159,    42,   194,   320,   195,     7,   200,   320,   199,
     328,   201,     6,     0,    50,    42,   194,   320,   195,     7,
     328,     6,     0,    99,    42,   101,   102,   194,   320,   195,
       7,   326,   103,   200,   328,   199,   328,   201,   100,   200,
     320,   199,   320,   201,     6,     0,    99,    42,   194,   320,
     195,     7,   326,   103,   200,   328,   199,   328,   201,   100,
     200,   320,   199,   320,   201,     6,     0,    53,    42,   194,
     320,   195,     7,   328,     6,     0,    42,    64,   194,   320,
     195,     7,   328,     6,     0,    52,    44,   194,   320,   195,
       7,   328,     6,     0,    44,   194,   320,   195,     7,   328,
       6,     0,    53,    44,   194,   320,   195,     7,   328,     6,
       0,    59,   322,   200,   298,   201,     0,    58,   200,   322,
     199,   322,   199,   320,   201,   200,   298,   201,     0,    60,
     322,   200,   298,   201,     0,    61,   200,   322,   199,   320,
     201,   200,   298,   201,     0,   300,     0,   299,     0,   297,
       0,     0,   299,   296,     0,   299,    38,   200,   330,   201,
       6,     0,   299,    41,   200,   330,   201,     6,     0,   299,
      42,   200,   330,   201,     6,     0,    63,   200,   299,   201,
       0,    63,     4,   196,   320,   197,     6,     0,    66,   200,
     299,   201,     0,    66,     4,   196,   320,   197,     6,     0,
      66,   115,     6,     0,   104,   331,   200,   299,   201,     0,
       4,   334,     6,     0,     4,   320,     6,     0,    57,   194,
       4,   195,   198,     4,     6,     0,   111,     6,     0,    37,
       6,     0,   106,   194,   320,     8,   320,   195,     0,   106,
     194,   320,     8,   320,     8,   320,   195,     0,   106,     4,
     107,   200,   320,     8,   320,   201,     0,   106,     4,   107,
     200,   320,     8,   320,     8,   320,   201,     0,   108,     0,
     114,     4,     0,   112,     0,   113,     4,     6,     0,   109,
     194,   320,   195,     0,   110,     0,    62,    38,   200,   320,
     199,   322,   201,     6,     0,    62,    38,   200,   320,   199,
     322,   199,   322,   199,   320,   201,     6,     0,    62,    38,
     200,   320,   199,   322,   199,   322,   199,   322,   199,   320,
     201,     6,     0,     0,    62,    38,   200,   320,   199,   322,
     201,   306,   200,   315,   201,     6,     0,     0,    62,    38,
     200,   320,   199,   322,   199,   322,   199,   320,   201,   307,
     200,   315,   201,     6,     0,     0,    62,    38,   200,   320,
     199,   322,   199,   322,   199,   322,   199,   320,   201,   308,
     200,   315,   201,     6,     0,    62,    41,   200,   320,   199,
     322,   201,     6,     0,    62,    41,   200,   320,   199,   322,
     199,   322,   199,   320,   201,     6,     0,    62,    41,   200,
     320,   199,   322,   199,   322,   199,   322,   199,   320,   201,
       6,     0,     0,    62,    41,   200,   320,   199,   322,   201,
     309,   200,   315,   201,     6,     0,     0,    62,    41,   200,
     320,   199,   322,   199,   322,   199,   320,   201,   310,   200,
     315,   201,     6,     0,     0,    62,    41,   200,   320,   199,
     322,   199,   322,   199,   322,   199,   320,   201,   311,   200,
     315,   201,     6,     0,    62,    42,   200,   320,   199,   322,
     201,     6,     0,    62,    42,   200,   320,   199,   322,   199,
     322,   199,   320,   201,     6,     0,    62,    42,   200,   320,
     199,   322,   199,   322,   199,   322,   199,   320,   201,     6,
       0,     0,    62,    42,   200,   320,   199,   322,   201,   312,
     200,   315,   201,     6,     0,     0,    62,    42,   200,   320,
     199,   322,   199,   322,   199,   320,   201,   313,   200,   315,
     201,     6,     0,     0,    62,    42,   200,   320,   199,   322,
     199,   322,   199,   322,   199,   320,   201,   314,   200,   315,
     201,     6,     0,   316,     0,   315,   316,     0,    70,   200,
     328,   199,   328,   199,   328,   201,     6,     0,    70,   200,
     328,   199,   328,   201,     6,     0,    65,     6,     0,    51,
      41,   328,     7,   320,     6,     0,    51,    41,   328,     7,
     320,    54,    56,   320,     6,     0,    51,    41,   328,     7,
     320,    54,    55,   320,     6,     0,    51,    42,   200,   320,
     201,     7,   328,     6,     0,    48,    42,   200,   320,   201,
       7,   328,     6,     0,    51,    44,   200,   320,   201,     7,
     328,     6,     0,    65,    42,   328,     7,   320,     6,     0,
      65,    42,   328,     6,     0,    67,     6,     0,    68,     6,
       0,   119,     0,   120,     0,   121,     0,   122,     0,   123,
       0,   321,     0,   194,   320,   195,     0,   184,   320,     0,
     183,   320,     0,   189,   320,     0,   320,   184,   320,     0,
     320,   183,   320,     0,   320,   185,   320,     0,   320,   186,
     320,     0,   320,   187,   320,     0,   320,   193,   320,     0,
     320,   179,   320,     0,   320,   181,   320,     0,   320,   180,
     320,     0,   320,   182,   320,     0,   320,   176,   320,     0,
     320,   177,   320,     0,   320,   175,   320,     0,   320,   174,
     320,     0,   320,   173,   320,     8,   320,     0,    12,   194,
     320,   195,     0,    13,   194,   320,   195,     0,    14,   194,
     320,   195,     0,    15,   194,   320,   195,     0,    16,   194,
     320,   195,     0,    17,   194,   320,   195,     0,    18,   194,
     320,   195,     0,    19,   194,   320,   195,     0,    20,   194,
     320,   195,     0,    22,   194,   320,   195,     0,    23,   194,
     320,   199,   320,   195,     0,    24,   194,   320,   195,     0,
      25,   194,   320,   195,     0,    26,   194,   320,   195,     0,
      27,   194,   320,   195,     0,    28,   194,   320,   195,     0,
      29,   194,   320,   195,     0,    30,   194,   320,   199,   320,
     195,     0,    31,   194,   320,   199,   320,   195,     0,    32,
     194,   320,   199,   320,   195,     0,    21,   194,   320,   195,
       0,    12,   196,   320,   197,     0,    13,   196,   320,   197,
       0,    14,   196,   320,   197,     0,    15,   196,   320,   197,
       0,    16,   196,   320,   197,     0,    17,   196,   320,   197,
       0,    18,   196,   320,   197,     0,    19,   196,   320,   197,
       0,    20,   196,   320,   197,     0,    22,   196,   320,   197,
       0,    23,   196,   320,   199,   320,   197,     0,    24,   196,
     320,   197,     0,    25,   196,   320,   197,     0,    26,   196,
     320,   197,     0,    27,   196,   320,   197,     0,    28,   196,
     320,   197,     0,    29,   196,   320,   197,     0,    30,   196,
     320,   199,   320,   197,     0,    31,   196,   320,   199,   320,
     197,     0,    32,   196,   320,   199,   320,   197,     0,    21,
     196,   320,   197,     0,     3,     0,     9,     0,    10,     0,
      11,     0,     4,     0,     4,   196,   320,   197,     0,     4,
     294,     0,     4,   196,   320,   197,   294,     0,     4,   198,
       4,     0,     4,   196,   320,   197,   198,     4,     0,     4,
     198,     4,   294,     0,     4,   196,   320,   197,   198,     4,
     294,     0,   323,     0,   184,   322,     0,   183,   322,     0,
     322,   184,   322,     0,   322,   183,   322,     0,   200,   320,
     199,   320,   199,   320,   199,   320,   199,   320,   201,     0,
     200,   320,   199,   320,   199,   320,   199,   320,   201,     0,
     200,   320,   199,   320,   199,   320,   201,     0,   194,   320,
     199,   320,   199,   320,   195,     0,     0,   194,   325,   195,
       0,     5,     0,   325,   199,     5,     0,     0,   200,   327,
     201,     0,   194,   327,   195,     0,   328,     0,   327,   199,
     328,     0,   320,     0,   329,     0,   200,   330,   201,     0,
     184,   200,   330,   201,     0,   320,     8,   320,     0,   320,
       8,   320,     8,   320,     0,     4,   196,   197,     0,   184,
       4,   196,   197,     0,     4,   196,   200,   330,   201,   197,
       0,   184,     4,   196,   200,   330,   201,   197,     0,   320,
       0,   329,     0,   330,   199,   320,     0,   330,   199,   329,
       0,   200,   320,   199,   320,   199,   320,   199,   320,   201,
       0,   200,   320,   199,   320,   199,   320,   201,     0,     4,
       0,     4,   198,   104,   198,     4,     0,   200,   333,   201,
       0,     4,   196,   320,   197,   198,   105,     0,   331,     0,
     333,   199,   331,     0,     5,     0,    35,   194,   334,   199,
     334,   195,     0,    36,   194,   334,   195,     0,    34,   194,
     334,   195,     0,    34,   194,   334,   199,   330,   195,     0,
      34,   194,     4,   198,     4,   195,     0,    34,   194,     4,
     196,   320,   197,   198,     4,   195,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   170,   172,   173,   174,   179,   181,   184,   192,   206,
     216,   218,   221,   223,   224,   227,   233,   238,   239,   240,
     243,   247,   250,   256,   261,   267,   275,   280,   284,   290,
     295,   299,   304,   308,   311,   316,   320,   324,   328,   333,
     337,   340,   344,   348,   352,   356,   360,   364,   367,   371,
     374,   378,   381,   388,   392,   398,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   414,   419,
     434,   439,   445,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   478,
     481,   485,   485,   497,   500,   504,   504,   516,   519,   523,
     523,   535,   538,   542,   542,   556,   559,   563,   563,   577,
     580,   584,   584,   598,   601,   605,   605,   623,   626,   630,
     630,   648,   651,   655,   655,   673,   676,   680,   680,   699,
     702,   706,   706,   725,   728,   732,   732,   751,   754,   758,
     758,   777,   780,   784,   784,   803,   806,   810,   810,   829,
     832,   836,   836,   865,   868,   872,   872,   901,   904,   908,
     908,   937,   940,   944,   944,   968,   971,   975,   975,   999,
    1002,  1006,  1006,  1030,  1033,  1037,  1037,  1060,  1063,  1067,
    1067,  1090,  1093,  1097,  1097,  1120,  1126,  1133,  1133,  1147,
    1153,  1160,  1160,  1177,  1179,  1180,  1181,  1182,  1185,  1187,
    1190,  1221,  1255,  1302,  1317,  1326,  1341,  1353,  1367,  1390,
    1414,  1426,  1440,  1452,  1466,  1486,  1508,  1520,  1536,  1547,
    1553,  1572,  1586,  1592,  1598,  1617,  1623,  1629,  1645,  1652,
    1658,  1664,  1675,  1686,  1711,  1717,  1736,  1757,  1765,  1771,
    1777,  1786,  1792,  1798,  1808,  1814,  1819,  1824,  1831,  1833,
    1834,  1837,  1842,  1847,  1862,  1877,  1896,  1907,  1916,  1924,
    1928,  1936,  1948,  2023,  2043,  2048,  2052,  2072,  2084,  2094,
    2115,  2136,  2157,  2163,  2168,  2173,  2177,  2185,  2196,  2203,
    2210,  2210,  2222,  2222,  2234,  2234,  2249,  2254,  2259,  2264,
    2264,  2274,  2274,  2284,  2284,  2297,  2302,  2307,  2312,  2312,
    2323,  2323,  2335,  2335,  2349,  2353,  2358,  2385,  2409,  2417,
    2436,  2454,  2472,  2494,  2515,  2536,  2550,  2569,  2574,  2583,
    2585,  2586,  2587,  2588,  2591,  2593,  2594,  2595,  2596,  2597,
    2598,  2599,  2600,  2607,  2608,  2609,  2610,  2611,  2612,  2613,
    2614,  2615,  2616,  2617,  2618,  2619,  2620,  2621,  2622,  2623,
    2624,  2625,  2626,  2627,  2628,  2629,  2630,  2631,  2632,  2633,
    2634,  2635,  2636,  2637,  2638,  2640,  2641,  2642,  2643,  2644,
    2645,  2646,  2647,  2648,  2649,  2650,  2651,  2652,  2653,  2654,
    2655,  2656,  2657,  2658,  2659,  2660,  2665,  2670,  2671,  2672,
    2676,  2687,  2704,  2715,  2734,  2750,  2766,  2782,  2799,  2804,
    2808,  2812,  2816,  2822,  2827,  2831,  2835,  2841,  2845,  2850,
    2854,  2859,  2863,  2867,  2873,  2879,  2886,  2892,  2896,  2900,
    2910,  2917,  2928,  2942,  2958,  2978,  3002,  3008,  3012,  3016,
    3027,  3032,  3043,  3048,  3066,  3071,  3084,  3090,  3096,  3101,
    3109,  3122,  3126,  3144,  3158
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "tDOUBLE", "tSTRING", "tBIGSTR", "tEND", 
  "tAFFECT", "tDOTS", "tPi", "tMPI_Rank", "tMPI_Size", "tExp", "tLog", 
  "tLog10", "tSqrt", "tSin", "tAsin", "tCos", "tAcos", "tTan", "tRand", 
  "tAtan", "tAtan2", "tSinh", "tCosh", "tTanh", "tFabs", "tFloor", 
  "tCeil", "tFmod", "tModulo", "tHypot", "tPrintf", "tSprintf", "tStrCat", 
  "tStrPrefix", "tDraw", "tPoint", "tCircle", "tEllipse", "tLine", 
  "tSurface", "tSpline", "tVolume", "tCharacteristic", "tLength", 
  "tParametric", "tElliptic", "tPlane", "tRuled", "tTransfinite", 
  "tComplex", "tPhysical", "tUsing", "tBump", "tProgression", "tPlugin", 
  "tRotate", "tTranslate", "tSymmetry", "tDilate", "tExtrude", 
  "tDuplicata", "tLoop", "tRecombine", "tDelete", "tCoherence", 
  "tIntersect", "tAttractor", "tLayers", "tScalarPoint", "tVectorPoint", 
  "tTensorPoint", "tScalarLine", "tVectorLine", "tTensorLine", 
  "tScalarTriangle", "tVectorTriangle", "tTensorTriangle", 
  "tScalarQuadrangle", "tVectorQuadrangle", "tTensorQuadrangle", 
  "tScalarTetrahedron", "tVectorTetrahedron", "tTensorTetrahedron", 
  "tScalarHexahedron", "tVectorHexahedron", "tTensorHexahedron", 
  "tScalarPrism", "tVectorPrism", "tTensorPrism", "tScalarPyramid", 
  "tVectorPyramid", "tTensorPyramid", "tText2D", "tText3D", "tBSpline", 
  "tBezier", "tNurbs", "tOrder", "tWith", "tBounds", "tKnots", "tColor", 
  "tColorTable", "tFor", "tIn", "tEndFor", "tIf", "tEndIf", "tExit", 
  "tReturn", "tCall", "tFunction", "tMesh", 
  "tB_SPLINE_SURFACE_WITH_KNOTS", "tB_SPLINE_CURVE_WITH_KNOTS", 
  "tCARTESIAN_POINT", "tTRUE", "tFALSE", "tUNSPECIFIED", "tU", "tV", 
  "tEDGE_CURVE", "tVERTEX_POINT", "tORIENTED_EDGE", "tPLANE", 
  "tFACE_OUTER_BOUND", "tEDGE_LOOP", "tADVANCED_FACE", "tVECTOR", 
  "tDIRECTION", "tAXIS2_PLACEMENT_3D", "tISO", "tENDISO", "tENDSEC", 
  "tDATA", "tHEADER", "tFILE_DESCRIPTION", "tFILE_SCHEMA", "tFILE_NAME", 
  "tMANIFOLD_SOLID_BREP", "tCLOSED_SHELL", 
  "tADVANCED_BREP_SHAPE_REPRESENTATION", "tFACE_BOUND", 
  "tCYLINDRICAL_SURFACE", "tCONICAL_SURFACE", "tCIRCLE", "tTRIMMED_CURVE", 
  "tGEOMETRIC_SET", "tCOMPOSITE_CURVE_SEGMENT", "tCONTINUOUS", 
  "tCOMPOSITE_CURVE", "tTOROIDAL_SURFACE", "tPRODUCT_DEFINITION", 
  "tPRODUCT_DEFINITION_SHAPE", "tSHAPE_DEFINITION_REPRESENTATION", 
  "tELLIPSE", "tTrimmed", "tSolid", "tEndSolid", "tVertex", "tFacet", 
  "tNormal", "tOuter", "tLoopSTL", "tEndLoop", "tEndFacet", "tAFFECTPLUS", 
  "tAFFECTMINUS", "tAFFECTTIMES", "tAFFECTDIVIDE", "'?'", "tOR", "tAND", 
  "tEQUAL", "tNOTEQUAL", "tAPPROXEQUAL", "'<'", "tLESSOREQUAL", "'>'", 
  "tGREATEROREQUAL", "'+'", "'-'", "'*'", "'/'", "'%'", "tCROSSPRODUCT", 
  "'!'", "tPLUSPLUS", "tMINUSMINUS", "UNARYPREC", "'^'", "'('", "')'", 
  "'['", "']'", "'.'", "','", "'{'", "'}'", "All", "SignedDouble", 
  "STLFormatItem", "StepFormatItems", "StepFormatItem", "StepSpecial", 
  "StepHeaderItem", "StepDataItem", "GeomFormatList", "GeomFormat", 
  "Printf", "View", "Views", "ScalarPointValues", "ScalarPoint", "@1", 
  "VectorPointValues", "VectorPoint", "@2", "TensorPointValues", 
  "TensorPoint", "@3", "ScalarLineValues", "ScalarLine", "@4", 
  "VectorLineValues", "VectorLine", "@5", "TensorLineValues", 
  "TensorLine", "@6", "ScalarTriangleValues", "ScalarTriangle", "@7", 
  "VectorTriangleValues", "VectorTriangle", "@8", "TensorTriangleValues", 
  "TensorTriangle", "@9", "ScalarQuadrangleValues", "ScalarQuadrangle", 
  "@10", "VectorQuadrangleValues", "VectorQuadrangle", "@11", 
  "TensorQuadrangleValues", "TensorQuadrangle", "@12", 
  "ScalarTetrahedronValues", "ScalarTetrahedron", "@13", 
  "VectorTetrahedronValues", "VectorTetrahedron", "@14", 
  "TensorTetrahedronValues", "TensorTetrahedron", "@15", 
  "ScalarHexahedronValues", "ScalarHexahedron", "@16", 
  "VectorHexahedronValues", "VectorHexahedron", "@17", 
  "TensorHexahedronValues", "TensorHexahedron", "@18", 
  "ScalarPrismValues", "ScalarPrism", "@19", "VectorPrismValues", 
  "VectorPrism", "@20", "TensorPrismValues", "TensorPrism", "@21", 
  "ScalarPyramidValues", "ScalarPyramid", "@22", "VectorPyramidValues", 
  "VectorPyramid", "@23", "TensorPyramidValues", "TensorPyramid", "@24", 
  "Text2DValues", "Text2D", "@25", "Text3DValues", "Text3D", "@26", 
  "NumericAffectation", "NumericIncrement", "Affectation", "Shape", 
  "Transform", "MultipleShape", "ListOfShapes", "Duplicata", "Delete", 
  "Colorify", "Command", "Loop", "Extrude", "@27", "@28", "@29", "@30", 
  "@31", "@32", "@33", "@34", "@35", "ExtrudeParameters", 
  "ExtrudeParameter", "Transfini", "Coherence", "BoolExpr", "FExpr", 
  "FExpr_Single", "VExpr", "VExpr_Single", "ListOfStrings", 
  "RecursiveListOfStrings", "ListOfListOfDouble", 
  "RecursiveListOfListOfDouble", "ListOfDouble", "FExpr_Multi", 
  "RecursiveListOfDouble", "ColorExpr", "ListOfColor", 
  "RecursiveListOfColor", "StringExpr", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   202,   202,   202,   202,   203,   203,   204,   204,   204,
     205,   205,   206,   206,   206,   207,   207,   207,   207,   207,
     208,   208,   208,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   210,   210,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   212,   212,
     213,   213,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   215,
     215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
     222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
     230,   232,   231,   233,   233,   235,   234,   236,   236,   238,
     237,   239,   239,   241,   240,   242,   242,   244,   243,   245,
     245,   247,   246,   248,   248,   250,   249,   251,   251,   253,
     252,   254,   254,   256,   255,   257,   257,   259,   258,   260,
     260,   262,   261,   263,   263,   265,   264,   266,   266,   268,
     267,   269,   269,   271,   270,   272,   272,   274,   273,   275,
     275,   277,   276,   278,   278,   280,   279,   281,   281,   283,
     282,   284,   284,   286,   285,   287,   287,   289,   288,   290,
     290,   292,   291,   293,   293,   293,   293,   293,   294,   294,
     295,   295,   295,   295,   295,   295,   295,   295,   295,   295,
     295,   295,   295,   295,   295,   295,   295,   295,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
     296,   296,   296,   296,   297,   297,   297,   297,   298,   298,
     298,   299,   299,   299,   299,   299,   300,   300,   301,   301,
     301,   302,   303,   303,   303,   303,   303,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   305,   305,   305,
     306,   305,   307,   305,   308,   305,   305,   305,   305,   309,
     305,   310,   305,   311,   305,   305,   305,   305,   312,   305,
     313,   305,   314,   305,   315,   315,   316,   316,   316,   317,
     317,   317,   317,   317,   317,   317,   317,   318,   318,   319,
     319,   319,   319,   319,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
     320,   320,   320,   320,   320,   320,   321,   321,   321,   321,
     321,   321,   321,   321,   321,   321,   321,   321,   322,   322,
     322,   322,   322,   323,   323,   323,   323,   324,   324,   325,
     325,   326,   326,   326,   327,   327,   328,   328,   328,   328,
     329,   329,   329,   329,   329,   329,   330,   330,   330,   330,
     331,   331,   331,   331,   332,   332,   333,   333,   334,   334,
     334,   334,   334,   334,   334
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     2,     1,     2,     1,    21,     1,
       0,     2,     1,     1,     1,     2,     2,     2,     2,     2,
       7,     5,    17,     9,    23,    31,    15,    11,    11,    15,
       9,    13,     9,    11,    13,     9,     9,    11,     9,    11,
       9,    11,    13,    13,    11,    13,    17,     9,    11,    11,
      13,    11,     9,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     5,     7,
       6,     8,     0,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
      13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
       3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
      25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
       3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
      31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
       3,     0,    55,     1,     3,     0,    55,     1,     3,     0,
      55,     1,     3,     0,    43,     1,     3,     0,    43,     1,
       3,     0,    43,     1,     3,     0,    37,     1,     3,     0,
      37,     1,     3,     0,    37,     1,     3,     0,    13,     1,
       3,     0,    15,     1,     1,     1,     1,     1,     1,     1,
       4,     7,     9,     6,     3,     6,     6,     9,     6,     9,
       5,     8,     8,    11,     6,     9,     9,     9,     7,     8,
      12,     6,     7,     7,    12,     7,     7,     9,    17,     8,
       8,     7,     7,    11,     8,    12,     8,    22,    20,     8,
       8,     8,     7,     8,     5,    11,     5,     9,     1,     1,
       1,     0,     2,     6,     6,     6,     4,     6,     4,     6,
       3,     5,     3,     3,     7,     2,     2,     6,     8,     8,
      10,     1,     2,     1,     3,     4,     1,     8,    12,    14,
       0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
      12,     0,    16,     0,    18,     8,    12,    14,     0,    12,
       0,    16,     0,    18,     1,     2,     9,     7,     2,     6,
       9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
       4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
       4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
       1,     4,     2,     5,     3,     6,     4,     7,     1,     2,
       2,     3,     3,    11,     9,     7,     7,     0,     3,     1,
       3,     0,     3,     3,     1,     3,     1,     1,     3,     4,
       3,     5,     3,     4,     6,     7,     1,     1,     3,     3,
       9,     7,     1,     5,     3,     6,     1,     3,     1,     6,
       4,     4,     6,     6,     9
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,     0,     7,     9,     0,     2,     1,     3,     4,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
      12,    14,    13,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   281,     0,
     286,     0,   283,     0,     0,     0,    54,    56,    55,    57,
      58,    59,    60,    61,    62,    67,    66,    63,    64,    65,
       5,     0,     0,     0,    15,    16,    18,    17,    19,   417,
     417,     0,   396,   400,   448,   203,   397,   398,   399,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   204,   205,   206,   207,     0,     0,     0,
     208,   209,     0,     0,     0,     0,     0,     0,   334,     0,
       0,   276,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,     0,     0,   261,     0,     0,
       0,   261,   327,   328,     0,     0,     0,     0,     0,     0,
     442,     0,     0,     0,     0,     0,   275,     0,   282,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   402,     0,
      72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   337,   336,   338,     0,
       0,     0,     0,     0,     0,     0,     0,   214,   273,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   400,     0,     0,   426,     0,   427,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   410,   409,     0,     0,     0,     0,
     261,   261,     0,     0,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,   284,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   419,     0,
       0,     0,     0,     0,   404,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     448,     0,     0,     0,   335,     0,     0,   436,   437,     0,
       0,   203,     0,     0,     0,     0,   210,     0,   352,   351,
     349,   350,   345,   347,   346,   348,   340,   339,   341,   342,
     343,   344,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   400,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   412,   411,   260,     0,   259,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   266,
     262,   326,     0,     0,   268,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   285,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     418,     0,     0,    21,     0,   401,   406,    72,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,   354,   375,   355,   376,   356,   377,   357,   378,   358,
     379,   359,   380,   360,   381,   361,   382,   362,   383,   374,
     395,   363,   384,     0,     0,   365,   386,   366,   387,   367,
     388,   368,   389,   369,   390,   370,   391,     0,     0,     0,
       0,     0,     0,     0,     0,   451,     0,     0,   450,     0,
       0,     0,     0,     0,     0,     0,     0,   220,     0,     0,
       0,     0,     0,    68,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   432,     0,     0,     0,   428,   430,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   254,   256,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   271,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   420,     0,   417,     0,   403,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    70,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   213,   438,   439,
       0,     0,     0,     0,     0,   215,   216,   218,     0,     0,
     446,     0,   224,   353,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   433,     0,   429,     0,   231,     0,
       0,     0,     0,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     267,     0,     0,     0,   325,   269,     0,     0,     0,     0,
       0,   421,     0,   443,     0,     0,     0,   277,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,   330,   331,   332,   333,     0,     0,
       0,     0,     0,     0,     0,    20,     0,   405,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   385,   371,   392,   372,
     393,   373,   394,     0,   453,   452,   449,     0,   203,     0,
       0,     0,     0,   211,     0,     0,     0,   444,    69,   228,
     235,     0,   236,     0,   232,     0,   233,   252,     0,     0,
     431,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   274,     0,     0,     0,     0,   261,
       0,   290,     0,   299,     0,   308,     0,     0,     0,     0,
       0,   241,   242,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   417,   407,    71,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   221,     0,     0,   222,
       0,   447,     0,   240,   250,   434,     0,     0,   323,   244,
     246,     0,     0,   322,   324,   251,   229,   239,   249,   253,
       0,     0,     0,   416,     0,   415,     0,     0,   287,     0,
       0,   296,     0,     0,   305,     0,   263,   264,   265,     0,
       0,   421,     0,   424,     0,     0,     0,     0,   441,     0,
     279,   278,     0,     0,     0,     0,     0,    23,     0,    32,
       0,    36,     0,    30,     0,     0,    35,     0,    40,    38,
       0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
       0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   212,   217,   219,     0,   225,     0,   237,   435,
       0,   321,   320,   226,   227,   261,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   423,     0,   422,
       0,     0,     0,     0,     0,     0,     0,   421,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   454,     0,   445,     0,     0,     0,
     414,     0,     0,     0,     0,     0,     0,     0,     0,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   425,
       0,     0,   440,   280,     0,     0,    37,     0,     0,     0,
       0,    27,     0,    33,     0,    39,    28,    41,     0,    44,
       0,    48,    49,     0,     0,    51,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   223,     0,   255,     0,     0,   292,
       0,   318,     0,     0,   315,   301,     0,     0,   310,     0,
       0,     0,     0,     0,     0,   243,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     101,   105,   109,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   197,     0,     0,   413,   288,     0,
       0,     0,   291,   297,     0,     0,   300,   306,     0,     0,
     309,   230,   234,     0,     0,   245,     0,     0,     0,     0,
       0,    31,    34,    42,     0,    43,    50,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   294,     0,     0,
     303,     0,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   201,     0,     0,
     289,     0,     0,     0,   298,     0,     0,   307,     0,     0,
       0,     0,     0,     0,    26,    29,     0,     0,     0,    99,
       0,   103,     0,   107,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   195,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   293,     0,     0,   317,   302,
       0,   311,     0,     0,     0,     0,     0,     0,    46,    22,
     100,   102,   104,   106,   108,   110,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   196,   198,     0,
     199,   238,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   117,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,   316,   304,   313,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   200,   202,     0,     0,     8,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   248,     0,     0,     0,   111,     0,   115,
       0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   247,     0,    24,
     112,   114,   116,   118,   120,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   129,   133,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,     0,   127,     0,   131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   126,   128,   130,
     132,   134,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   137,   141,
     145,   149,   153,   157,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   135,     0,   139,     0,   143,
       0,   147,     0,   151,     0,   155,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   136,   138,   140,   142,
     144,   146,   148,   150,   152,   154,   156,   158,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   185,   189,   193,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   183,     0,   187,     0,   191,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   184,   186,   188,   190,   192,   194,
       0,     0,     0,   173,   177,   181,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   171,     0,   175,     0,   179,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   172,
     174,   176,   178,   180,   182,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   161,   165,   169,     0,     0,     0,     0,
       0,     0,     0,   159,     0,   163,     0,   167,     0,     0,
       0,     0,     0,     0,   160,   162,   164,   166,   168,   170,
       0,     0,     0
};

static const short yydefgoto[] =
{
    2270,    82,     5,     6,    19,    20,    21,    22,     7,    66,
      67,    68,   416,  1588,   625,  1499,  1590,   626,  1500,  1592,
     627,  1501,  1806,   628,  1753,  1808,   629,  1754,  1810,   630,
    1755,  1942,   631,  1904,  1944,   632,  1905,  1946,   633,  1906,
    2054,   634,  2024,  2056,   635,  2025,  2058,   636,  2026,  2060,
     637,  2027,  2062,   638,  2028,  2064,   639,  2029,  2252,   640,
    2246,  2254,   641,  2247,  2256,   642,  2248,  2201,   643,  2189,
    2203,   644,  2190,  2205,   645,  2191,  2150,   646,  2132,  2152,
     647,  2133,  2154,   648,  2134,  1615,   649,  1523,  1709,   650,
    1617,   135,   238,    69,   540,   526,   527,   528,   529,    73,
      74,    75,    76,    77,  1159,  1469,  1571,  1162,  1474,  1575,
    1165,  1478,  1578,  1338,  1339,    78,    79,   948,   327,   138,
     344,   170,   233,   409,  1056,  1172,  1173,   329,   469,   192,
     711,   861,   139
};

static const short yypact[] =
{
    2668,    22,-32768,-32768,  -104,-32768,   288,  2895,-32768,    13,
      40,    66,    95,   146,   148,   154,  -128,  -115,   -78,-32768,
  -32768,-32768,-32768,  2289,   -72,   164,   -16,    15,    75,   -47,
     121,    99,   113,   145,   135,   158,   162,   174,   376,   290,
      32,   143,   165,   -76,   -76,   184,   141,     3,   303,     2,
     348,   387,    73,   202,   216,   -18,     5,     7,-32768,   222,
  -32768,   415,-32768,   427,   430,   406,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   449,    13,  2534,-32768,-32768,-32768,-32768,-32768,   278,
     278,   472,-32768,   213,     6,-32768,-32768,-32768,-32768,  -103,
     -48,    78,   110,   211,   236,   251,   257,   275,   279,   282,
     302,   341,   364,   380,   412,   453,   458,   459,   462,   463,
     294,   297,   308,-32768,-32768,-32768,-32768,  2390,  2390,  2390,
  -32768,-32768,  2390,   569,    26,  2390,   512,   639,-32768,   516,
     521,-32768,  2390,  2390,  2390,   333,  2390,   350,  2390,  2390,
    1179,  2390,   448,   467,   469,  1179,   471,   474,   481,   494,
     519,   534,   539,   674,   -76,   -76,   -76,  2390,  2390,  -131,
  -32768,   -42,   -76,   487,   499,   500,   541,-32768,  1179,   552,
     732,-32768,-32768,-32768,  1179,  1179,  2390,  2390,   -56,  2390,
     551,  2390,   568,   704,  2390,  2390,-32768,   755,-32768,   623,
  -32768,    13,   640,   648,   665,   667,   668,   669,   670,   671,
     672,   673,   675,   679,   688,   690,   696,   700,   701,   702,
     703,   705,   706,   707,   708,   709,   710,   718,   728,   729,
     730,   731,   863,   699,   733,   727,  2390,   925,-32768,   -76,
  -32768,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,    54,    60,    60,   737,   737,   737, 10547,
     924,  2420,  9872,    24,   738,   931,   734,-32768,-32768,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,-32768,  -117, 10570, 10593, 10616,  2390,
   10639,  2390, 10662, 10685,   248,  1470,  2420,   664,   932,-32768,
   10708,  2390,  2390,  2390,   933,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,   746,   142,-32768,-32768,  3341,  3362,   -76,   -76,
     544,   544,   156,  2390,  2390,  2390,  2390,   836,   382,  2390,
  -32768,  2701,   937,   938, 10731, 10754,   844,  2390, 10777,   868,
    3383,-32768,   773,  2093, 10800,-32768,  2390,   809,   970,   987,
     988,   989,   991,   993,   994,   995,   996,  1001,  1002,  1003,
    1004,  1005,  1009,  1011,  1012,  1013,  1014,  1015,  1016,  1017,
    1018,   872,  1020,  1023,  1024,  1026,  1029,  1028,-32768,   -96,
    1030,  1033,  1031,  9897,   250,   -33,  2801, 10823,  9922, 10846,
    9947, 10869,  9972, 10892,  9997, 10915, 10022, 10938, 10047, 10961,
   10072, 10984, 10097, 11007, 10122, 11030, 10147, 11053, 10172,  3404,
    3425, 11076, 10197, 11099, 10222, 11122, 10247, 11145, 10272, 11168,
   10297, 11191, 10322,  3446,  3467,  3488,  3509,  3530,  3551,   464,
  -32768,   -63,   835,   845,-32768,  1179,  2510,   664,-32768,   172,
     152,    60,  2390,  1036,  1040,     8,-32768,  2370,   366,  1135,
     384,   384,   215,   215,   215,   215,   300,   300,   737,   737,
     737,   737,  1037,  2420,  1041,  1042,  1043, 11214,  1045, 11237,
    1046,  1047,   939,   338,  2420,   480,  2390,  2390,  1048,   804,
   11260, 11283,  2390,  2663,  2908, 11306, 11329, 11352, 11375, 11398,
     848,   -76,  2390,  2390,-32768,-32768,-32768,   846,  2927,-32768,
     855,  2390,  3572,  3593,  3614, 10347,  -146,   -38,   -51,-32768,
  -32768,-32768,  2390, 10372,-32768,   857,   861,  1055,  1056,   870,
   11421,  1059,   869,  2390,  2772,  2390,  2390,-32768, 11444,   902,
     871,   873,   905,   916,   917,   918,   919,   921,   922,   927,
     928,   930,   935,   936,   941,   942,   943,   944,   945,   946,
     947,   948,   949,   950,   951,   956,   958,   985,   986,  1035,
  -32768,  1066,   929,-32768,  1044,   137,-32768,-32768,   992,  1034,
    1050,  1051,  1052,  1053,  1057,  1058,  1060,  1061,  1062,  1064,
    1065,  1067,  1068,  1069,  1070,  1072,  1073,  1074,  1075,  1077,
    1078,  1080,  1107,  1110,  1119,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  2390,  2390,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  1126,-32768,  2420,    60,-32768,  1131,
    2420,   990,    29,  2390,  1132,  1211,   926,-32768,  1125,  1054,
       5,  1221,  2390,-32768,   -34,   -76,  1179,  1179,  1223,  1179,
    1229,  1179,  1179,-32768,  2420,  1149,   483,-32768,  2445,  1039,
    1038,  1233,  1242,  1246,   436,  1253,  1298,  1300,  1306,  1317,
    1318,  1319,  1323,   173,  3635,  3656,-32768,-32768,  2944,   -76,
     -76,   -76,  1324,  2420,  2420,  2420,  1401,  1325,  2390,  2390,
    1179,  1179,  2390,  1322,  1179,  1330,  3677,-32768,  2460,   451,
    1328,  1174,  1334,  2390,  2390,   -76,  1336,  1337,  1156,  1339,
    1341,  1179,  1179,  1342,   -76,  1344,  1345,  1179,  1179,  1347,
    1348,  1349,  1350,  1351,  1179,   520,  1179,  1352,  1353,  1354,
    1357,  1358,-32768,  1359,   278,  1360,-32768,  2984,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,-32768, 11467, 10397, 11490, 10422, 11513,
   10447, 11536, 10472, 10497,  1161,    76,  1162,-32768,   664,-32768,
      18,   177,  1168,  1362,  1606,-32768,-32768,-32768,     5,  2390,
  -32768,   484,-32768,  1563,  1361,    77,    28,  1364,  1179,  1365,
    1179,  1366,  1368,   492,-32768,  2420,-32768,  2390,-32768,  2390,
    1179,  1179,  1179,-32768,   439,  1179,  1179,  1179,  1179,  1179,
    1179,  1179,   532,  2390,  2390,  2390,  1175,   -99,   -86,   -44,
  -32768,   493,   496,   497,-32768,-32768,  3698,  3719,  1370,  1371,
   11559,  -143,  1275,-32768,  2390,  2390,  2390,-32768,  1180,    13,
    1182,  3740,  3761,   116,  1183,  1188,  1185,  1190,  1187,  1193,
    1191,  1192,   168,  1195,  1194,  1197,  1199,  1201,  1202,  1203,
    1204,  1205,  1210,-32768,-32768,-32768,-32768,-32768,  1207,  1209,
    1212,  1213,  1214,  1215,  1216,-32768,  1217,   250,  1403,  3782,
    3803,  3824,  3845,  3866,  3887,  3908,  3929,  3950,  3971,  3992,
    4013,  4034,  4055,  4076,  4097,  4118,  4139,  4160,  4181,  4202,
    4223,  4244,  4265,  4286,  4307,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  1219,-32768,-32768,-32768,  1179,    60,  2390,
    1408,  1414,     8,-32768,  1413, 10522,     5,-32768,-32768,-32768,
  -32768,   -76,-32768,  1435,-32768,  1437,-32768,-32768,  1247,   505,
    1563,  4328,  1439,  1440,  1441,  2390,  2390,  1442,  1458,  1459,
    1460,  1461,  1462,  1464,-32768,  2323,  2967, 11582,   281,   544,
     -76,  1465,   -76,  1466,   -76,  1497,  1498,  1499,  1500,  2390,
    2390,-32768,-32768,  1469,  1179,  1179,  1404,  1179,  1276,   330,
   11605,  2390,    13,  1505,  2390,  1179,  1503,  1507,  1506,  1326,
    1508,   520,  1509,  1510,  2390,  1511,  1513,  1512,  1537,  1543,
     520,  2390,  2390,  2390,  1179,  1542,  1544,   520,  2390,  1576,
    1586,  1584,  2390,   278,-32768,-32768,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  1587,  1589,  1590,  1661,-32768,  1585,  1592,-32768,
    1395,-32768,    81,-32768,-32768,-32768,  1402,  2390,-32768,-32768,
  -32768,  1745,  1794,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    1858,  1594,  1406,-32768,  2390,-32768,  1400,   175,-32768,  1407,
     178,-32768,  1409,   186,-32768,  1410,-32768,-32768,-32768,  4349,
    4370,  -143,   188,-32768,   506,  1416,  1502,  2390,-32768,  2390,
  -32768,-32768,  4391,    13,  1419,  4412,  1405,-32768,  1443,-32768,
    1445,-32768,  1444,-32768,  1446, 11628,-32768,  1447,-32768,-32768,
    1452,  1453, 11651,  4433, 11674,  1450,-32768,  1455,  1457,  4454,
    1456,  1463,-32768,  4475,  1467,  4496,  4517,  4538,  4559,  4580,
    4601,  4622,  4643,  4664,  4685,  4706,  4727,  4748,  4769,  4790,
    4811,  4832,  4853,  4874,  4895,  4916,  4937,  4958,  4979,  5000,
    5021,  1468,-32768,-32768,-32768,     5,-32768,  1533,-32768,-32768,
    5042,-32768,-32768,-32768,-32768,   544,  2414,-32768,  1541,   -30,
    1541,   -30,  1541,   -30,  2390,  2390,  1538,-32768,  1179,-32768,
    1179,  2390,  2990,  3013,  1179,  1478,  1597,  -143,   520,  1605,
    2390,  1651,   520,  1654,  1658,  1656,  1659,  1662,  2390,  1663,
    1179,  1665,  1666,  2390,  1670,  1668,  2390,  1671,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,-32768,  1669,-32768,  1672,  1477,  2390,
  -32768,  1541,  1541,  2390,  3043,   192,  1674,  1481,   -28,-32768,
    3066,   196,   -27,  3089,   198,   -24,  3112,  3135,  1482,-32768,
    1484,  2067,-32768,-32768,  1483,    13,-32768,  1488,  1489,  1490,
    5063,-32768,  1495,-32768,  1496,-32768,-32768,-32768, 11697,-32768,
    1493,-32768,-32768, 11720,  1504,-32768, 11743,  1520, 11766, 11789,
   11812,  5084,  5105,  5126,  5147,  5168,  5189,  5210,  5231,  5252,
    5273,  5294,  5315,  5336,  5357,  5378,  5399,  5420,  5441,  5462,
    5483,  5504, 11835,  5525,-32768,  1521,-32768,  3164,  3314,  1689,
    2390,-32768,  1179,  1690,-32768,  1691,  2390,  1692,  1694,  2390,
    1715,  1716,  1717,  1179,  1179,-32768,  1720,    13,   520,   520,
     520,   520,  1721,  1722,  1723,   520,  1725,  1726,  1727,  1729,
  -32768,-32768,-32768,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,-32768,  2390,  1747,-32768,-32768,  1554,
    3187,  1556,-32768,-32768,  1557,  3216,-32768,-32768,  1595,  3245,
  -32768,-32768,-32768,  1598,  1583,-32768,    13,  1599,  1602,  1601,
    1607,-32768,-32768,-32768,  1604,-32768,-32768,-32768,  1608,  1609,
    1611,  1613,  5546,  5567,  5588,  5609,  5630,  5651,  5672,  5693,
    5714,  5735,  5756,  5777,  5798,  5819,  5840,  5861,  5882,  5903,
    5924,  5945,  5966,  1615, 11858,  1640,   -30,  1788,  1179,   -30,
    1798,   -30,  1799,  1179,  1706,  1646,   520,   520,  1843,  1844,
     520,  1846,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,    60,-32768,  1847,   -21,
  -32768,  1653,   509,    -9,-32768,  1655,    -3,-32768,  1657,  1660,
    1680,    13,  1664,  1682,-32768,-32768,  1667,  1687,   510,  1563,
     513,  1563,   517,  1563,  5987,  6008,  6029,  6050,  6071,  6092,
    6113,  6134,  6155,  6176,  6197,  6218,  6239,  6260,  6281,  6302,
    6323,  6344,  6365,  6386,  6407,   518,-32768,  1683,  1684,  1850,
     -30,  1179,  1852,  1853,   -30,  1854,   -30,  1784,  2390,    13,
     520,  1179,  1880,  1881,  2390,  1882,  2390,  1883,  2390,  1884,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,    60,  1885,    60,  1886,-32768,    -2,  1693,-32768,-32768,
      10,-32768,    16,  1695,  6428,    13,  1697,  1698,-32768,-32768,
    1563,-32768,  1563,-32768,  1563,-32768, 11881, 11904, 11927,  6449,
    6470,  6491,  6512,  6533,  6554,  6575,  6596,  6617,  6638,  6659,
    6680,  6701,  6722,  6743,  6764,  6785,  6806,-32768,-32768,   524,
  -32768,-32768,  1887,  1892,  1893,  1917,  2390,  2390,  1766,   520,
    1179,-32768,-32768,-32768,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,    60,  1928,-32768,-32768,-32768,-32768,  6827,  3268,
    1767,  1737,  1738,  1739,  1740,  1742,  6848,  6869,  6890,  6911,
    6932,  6953,  6974,  6995,  7016,  7037,  7058,  7079,  7100,  7121,
    7142,  7163,  7184,  7205,-32768,-32768,  2390,  1938,-32768,  1179,
     520,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  3291,-32768,  1763,  1751,   525,  1563,   528,  1563,
     542,  1563,  7226,  7247,  7268,  7289,  7310,  7331,  7352,  7373,
    7394,  7415,  7436,  7457,  7478,  7499,  7520,  7541,  7562,  7583,
    1957,  1179,  1958,  2390,  1959,  2390,  1966,  2390,  1976,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,-32768,  1785,-32768,
    1563,-32768,  1563,-32768,  1563,-32768, 11950, 11973, 11996,  7604,
    7625,  7646,  7667,  7688,  7709,  7730,  7751,  7772,  7793,  7814,
    7835,  7856,  7877,  7898,  1179,-32768,-32768,-32768,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  1786,  1783,  1789,  1790,  7919,  7940,  7961,
    7982,  8003,  8024,  8045,  8066,  8087,  8108,  8129,  8150,  8171,
    8192,  8213,  1179,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  1787,   543,  1563,   546,  1563,   555,  1563,  8234,  8255,
    8276,  8297,  8318,  8339,  8360,  8381,  8402,  8423,  8444,  8465,
    8486,  8507,  8528,   520,  2390,  1982,  2390,  1994,  2390,  1995,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  1807,  1563,-32768,  1563,-32768,
    1563,-32768, 12019, 12042, 12065, 12088, 12111, 12134,  8549,  8570,
    8591,  8612,  8633,  8654,  8675,  8696,  8717,  1997,-32768,-32768,
  -32768,-32768,-32768,-32768,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,-32768,  1804,  1805,  1806,  1808,  1809,  1810,
    8738,  8759,  8780,  8801,  8822,  8843,  8864,  8885,  8906,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,   558,  1563,   561,  1563,   566,  1563,
     571,  1563,   574,  1563,   575,  1563,  8927,  8948,  8969,  8990,
    9011,  9032,  9053,  9074,  9095,  2390,  2001,  2390,  2005,  2390,
    2006,  2390,  2007,  2390,  2008,  2390,  2009,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  2390,  2390,  1563,-32768,  1563,-32768,
    1563,-32768,  1563,-32768,  1563,-32768,  1563,-32768,  9116,  9137,
    9158,  9179,  9200,  9221, 12157, 12180, 12203,  2390,  2390,  2390,
    2390,  2390,  2390,-32768,-32768,-32768,  9242,  9263,  9284,  9305,
    9326,  9347,  1836,  1848,  1849,  2390,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2390,  9368,  9389,  9410,  9431,  9452,  9473,
     578,  1563,   579,  1563,   582,  1563,  2390,  2390,  2390,  2390,
    2390,  2390,  2390,  2040,  2390,  2041,  2390,  2044,  9494,  9515,
    9536, 12226, 12249, 12272,  1563,-32768,  1563,-32768,  1563,-32768,
    2390,  2390,  2390,-32768,-32768,-32768,  9557,  9578,  9599,  1855,
    1857,  1859,  2390,  2390,  2390,  2390,  2390,  2390,  9620,  9641,
    9662,   583,  1563,   628,  1563,   629,  1563,  2390,  2390,  2390,
    2390,  2047,  2390,  2055,  2390,  2057,  9683,  9704,  9725,  1563,
  -32768,  1563,-32768,  1563,-32768,  2390,  2390,  2390,  9746,  9767,
    9788,  2390,  2390,  2390,  9809,  9830,  9851,  2390,  2390,  2390,
   12295, 12318, 12341,-32768,-32768,-32768,  1874,  1875,  1876,  2390,
    2390,  2390,   634,  1563,   654,  1563,   659,  1563,  2390,  2071,
    2390,  2072,  2390,  2073,  1563,-32768,  1563,-32768,  1563,-32768,
    2080,  2081,-32768
};

static const short yypgoto[] =
{
  -32768,   -32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  1485,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,  -289,   -20,-32768,  2076,  2077,  -349,  -159,  2078,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768, -1234, -1306,-32768,-32768, -1016,   -23,-32768,
     -29,-32768,   -89,-32768, -1148,  1032,  1501,  -199,  -318,  -705,
    1084,-32768,  -264
};


#define	YYLAST		12536


static const short yytable[] =
{
     137,   234,   530,   136,   472,   860,   179,   176,   505,   190,
     239,   193,   709,   147,   169,   171,    80,   145,   357,   461,
     462,   463,   361,  1266,   188,    95,   145,  1342,     8,  1345,
     293,   471,  1414,   851,  1010,  1336,  1414,  1336,  1336,  1414,
    1337,  1336,  1337,  1337,  1336,   366,  1337,    83,   142,  1337,
     201,  1054,   348,   349,   753,  1192,  1336,  1055,   459,   460,
       9,  1337,  1336,  1336,  1201,   460,    89,  1337,  1337,   350,
     159,  1208,    84,   160,   161,  1336,   162,  1011,   492,    90,
    1337,  1336,   493,  1009,   348,   349,  1337,  1248,   120,   121,
     122,   241,   468,   242,   120,   121,   122,   348,   349,   590,
    1040,    85,  1041,   591,   286,   287,   288,   165,   166,   289,
     292,   184,   296,  1042,   185,  1043,    91,   180,   167,   316,
     317,   318,   140,   320,   168,   322,   323,   468,   330,  1357,
     294,   295,   695,   852,   853,   343,   696,   345,   367,   348,
     349,   348,   349,   352,   346,   347,   243,   146,   244,   755,
     348,   349,    86,  1004,    87,  1044,   146,  1045,   351,    95,
      88,   864,   754,   364,   365,   700,   368,   597,   370,   377,
     141,   373,   374,  1413,  1417,   714,   189,  1420,   142,   173,
    1619,   703,   174,   175,   998,   147,   726,   123,   124,   125,
     126,   150,  1623,   123,   124,   125,   126,    81,  1625,  1712,
     152,   194,   181,   177,   153,   191,   240,   705,   710,   143,
     415,  1714,   554,   413,   130,   131,   154,  1715,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     348,   349,  1358,  1414,   348,   349,  1362,  1414,   467,   144,
    1414,   995,   245,   473,   246,   700,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,    10,  1569,   148,   468,  1573,   497,  1576,   499,   348,
     349,  1131,   287,   467,   247,   468,   248,   149,   509,   510,
     511,  1066,   513,   514,   515,   516,   517,   518,   519,   524,
     525,   123,   124,   125,   126,   348,   349,   130,   131,   151,
     532,   533,   534,   535,   158,   805,   543,   163,  1179,   348,
     349,   521,   130,   131,   550,   178,   123,   124,   125,   126,
     702,   348,   349,   558,   182,   531,   348,   349,   348,   349,
    1414,   348,   349,  1075,  1414,   164,  1414,   130,   131,   348,
     349,   700,   893,   701,  1258,   348,   349,  1260,   845,   348,
     349,   348,   349,  1267,   172,  1262,  1666,  1268,   541,   542,
    1670,  1410,  1672,   183,   596,  1416,   186,  1419,   308,   309,
     310,   311,   312,   130,   131,   249,   873,   250,   313,   236,
     187,   237,  1487,  1488,  1489,  1490,   195,   155,   156,  1494,
     157,   196,    11,    12,    13,    14,    15,    16,    17,    18,
     251,   197,   252,   846,   198,   901,   902,   903,   130,   131,
     130,   131,   883,   287,   502,   253,   237,   254,   199,   706,
     704,   255,   200,   256,   299,   300,   301,   302,   303,   916,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   257,
     467,   258,   232,   259,   313,   260,   261,   235,   262,   413,
    1154,   467,  1155,   728,   729,   310,   311,   312,   283,   734,
     884,   284,   743,   313,  1025,  1026,   263,   468,   264,   744,
     745,   849,   285,   299,   300,   301,   302,   303,   748,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   297,   756,
    1582,  1583,   314,   313,  1586,   468,   315,   319,   130,   131,
     766,  1180,   768,   769,   725,   265,   237,   266,  1034,  1035,
    1325,   301,   302,   303,   321,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   468,   468,   468,  1019,   267,   313,
     268,   997,   999,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    92,    93,   269,   806,   270,   313,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    42,    43,    44,    45,   271,    47,   272,   299,
     300,   301,   302,   303,  1676,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   299,   300,   301,   302,   303,   313,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   943,
     944,   945,   946,   947,   313,   298,   917,   273,   331,   274,
     835,   836,   275,   277,   276,   278,   279,   281,   280,   282,
     693,   332,   694,   333,   837,   838,   839,   840,   841,   842,
     843,   335,   506,   467,   336,   337,   468,   848,   342,   700,
     854,   727,   700,  1006,   876,  1007,   865,   353,   338,   863,
    1156,   700,   700,  1018,  1046,   700,   700,  1047,  1048,   354,
     355,   467,   413,  1751,   700,  1268,  1136,  1269,  1621,  1634,
    1622,  1635,  1636,   339,  1637,   956,  1638,  1661,  1639,  1662,
     897,   898,   899,  1742,  1833,  1743,  1834,  1835,   340,  1836,
     467,   467,   467,   341,  1124,   906,   907,   356,   360,   910,
     476,  1837,  1964,  1838,  1965,  1966,   923,  1967,   359,   369,
     921,   922,   127,   128,  1968,   932,  1969,  2075,   129,  2076,
    2077,   375,  2078,   132,  1805,  2079,   290,  2080,   371,   291,
    2081,  1151,  2082,  2083,  2085,  2084,  2086,  2162,  2164,  2163,
    2165,  2166,  2210,  2167,  2211,   959,   960,   961,   962,   963,
     964,   965,   966,   967,   968,   969,   970,   971,   972,   973,
     974,   975,   976,   977,   978,   979,   980,   981,   982,   983,
     984,   372,   299,   300,   301,   302,   303,   376,   304,   305,
     306,   307,   308,   309,   310,   311,   312,  2212,  2214,  2213,
    2215,  1000,   313,  2258,   378,  2259,  1005,   299,   300,   301,
     302,   303,   379,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   467,  2260,  1020,  2261,  1021,   313,  2262,   380,
    2263,   381,   382,   383,   384,   385,   386,   387,   408,   388,
    1036,  1037,  1038,   389,   536,    27,    28,   537,   538,    31,
      32,    33,   390,    34,   391,    36,    37,  1062,    39,    40,
     392,  1058,  1059,  1060,   393,   394,   395,   396,   410,   397,
     398,   399,   400,   401,   402,    52,  1328,   299,   300,   301,
     302,   303,   403,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   404,   405,   406,   407,   412,   313,   411,   414,
     313,   465,   857,    53,    54,    55,   474,  1094,   475,   507,
     512,   520,    92,    93,   545,   546,   549,  1985,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   552,   555,   559,   560,  1125,   299,   300,   301,
     302,   303,  1132,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   561,   562,   563,    65,   564,   313,   565,   566,
     567,   568,  1141,  1142,  1214,   731,   569,   570,   571,   572,
     573,  1157,  1150,  1160,   574,  1163,   575,   576,   577,   578,
     579,   580,   581,   582,   583,   584,  1169,  1170,   585,   586,
    1183,   587,   588,   589,   697,   592,   594,   539,  1182,   593,
     698,  1185,   707,   713,   708,   878,   742,   746,   715,   716,
     717,  1195,   719,   721,   722,   730,   747,   758,  1202,  1203,
    1204,   759,   760,   761,   762,  1209,   764,   765,   771,  1213,
     772,   802,   773,  1215,  1216,  1217,  1218,  1219,  1220,  1221,
    1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,
    1232,  1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,   299,
     300,   301,   302,   303,   774,   304,   305,   306,   307,   308,
     309,   310,   311,   312,  1250,   775,   776,   777,   778,   313,
     779,   780,   127,   128,   803,   834,   781,   782,   129,   783,
     844,  1256,   858,   132,   784,   785,   723,   847,   855,   724,
     786,   787,   788,   789,   790,   791,   792,   793,   794,   795,
     796,  1275,    92,    93,  1272,   797,  1273,   798,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    92,   324,   799,   800,   808,   850,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   299,   300,   301,   302,   303,   856,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   862,   809,  1335,
     868,  1341,   313,  1344,   801,  1334,   870,  1340,   879,  1343,
     880,  1346,  1347,   804,   810,   811,   812,   813,  1351,   881,
     859,   814,   815,   882,   816,   817,   818,  1360,   819,   820,
     885,   821,   822,   823,   824,  1368,   825,   826,   827,   828,
    1373,   829,   830,  1376,   831,  1378,  1379,  1380,  1381,  1382,
    1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,
    1393,  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,
    1403,   832,  1616,   345,   833,   886,  1407,   887,   286,   287,
    1408,   302,   303,   888,   304,   305,   306,   307,   308,   309,
     310,   311,   312,  1427,   889,   890,   891,   892,   313,   911,
     900,   905,   127,   128,   913,   918,   919,   920,   129,   924,
     925,   926,   927,   132,   928,   931,   874,   933,   934,   875,
     937,   938,   939,   940,   941,   950,   994,   996,   951,   952,
     953,   954,   127,   325,   957,   955,  1001,  1008,   129,  1002,
    1012,  1014,  1016,   132,  1017,  1039,  1051,  1052,  1057,   326,
    1061,  1063,  1067,  1068,  1069,  1070,  1071,  1470,  1072,  1077,
    1073,  1074,  1078,  1475,  1076,  1486,  1479,  1707,  1079,  1710,
    1080,  1081,  1082,  1083,  1084,  1085,  1086,   904,  1087,  1095,
    1091,  1088,  1089,  1090,  1126,  1092,  1093,  1122,  1127,  1129,
    1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,
    1512,  1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,
    1522,  1133,  1524,  1134,  1135,  1138,  1139,  1140,  1143,   299,
     300,   301,   302,   303,  1535,   304,   305,   306,   307,   308,
     309,   310,   311,   312,  1144,  1145,  1146,  1147,  1148,   313,
    1149,  1158,  1161,    92,   503,  1177,  1171,  1178,  1774,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,  1164,  1166,  1167,  1168,  1175,  1184,  1187,
    1188,  1190,  1189,  1194,  1191,  1193,  1197,  1196,  1198,  1589,
    1591,  1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,
    1602,  1603,  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,
    1612,  1613,  1614,  1199,    92,    93,  1200,  1207,  1206,  1629,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   299,   300,   301,   302,   303,  1210,
     304,   305,   306,   307,   308,   309,   310,   311,   312,  1211,
    1212,  1241,  1245,  1247,   313,  1242,  1243,  1675,  1246,  1249,
    1254,  1257,  1271,  1356,  1278,  1674,  1255,  1259,  1359,  1261,
    1263,  1680,  1003,  1682,  1276,  1684,  1270,  1686,  1687,  1688,
    1689,  1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,
    1699,  1700,  1701,  1702,  1703,  1704,  1705,  1706,  1326,  1281,
    1355,  1348,  1279,  1718,  1280,  1282,  1284,  1285,  1286,  1290,
    1291,   328,  1292,   127,   128,  1294,   334,  1361,  1295,   129,
    1363,  1364,  1365,  1324,   132,  1366,  1297,  1244,  1367,  1369,
     504,  1371,  1372,  1374,  1375,  1404,  1377,  1405,  1406,   358,
    1411,  1412,  1423,  1424,  1426,   362,   363,  1428,  1429,  1430,
    1432,  1433,  1435,  1748,  1749,  1468,  1472,  1473,  1476,  1437,
    1477,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,
    1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,  1773,  1439,
    1466,  1480,  1481,  1482,  1331,  1332,  1485,  1491,  1492,  1493,
     129,  1495,  1496,  1497,  1498,  1333,   299,   300,   301,   302,
     303,   168,   304,   305,   306,   307,   308,   309,   310,   311,
     312,  1251,  1525,  1802,  1526,  1528,   313,  1529,  1807,  1809,
    1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,  1819,  1820,
    1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,   299,
     300,   301,   302,   303,  1534,   304,   305,   306,   307,   308,
     309,   310,   311,   312,  1570,  1531,  1538,  1533,  1536,   313,
    1252,  1537,  1539,  1540,  1574,  1577,  1580,  1541,  1581,  1542,
    1860,  1543,  1862,  1544,  1864,  1566,  1866,  1867,  1868,  1869,
    1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,  1878,  1879,
    1880,  1881,  1882,  1883,   299,   300,   301,   302,   303,  1568,
     304,   305,   306,   307,   308,   309,   310,   311,   312,  1584,
    1585,  1587,  1618,  1620,   313,  1624,  1665,  1626,  1668,  1669,
    1671,  1627,  1632,  1630,  1253,  1907,  1908,  1909,  1910,  1911,
    1912,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,
    1628,  1631,  1633,  1663,  1673,  1664,  1678,  1679,  1681,  1683,
    1685,  1708,  1711,  1744,  1713,  1716,  1719,  1720,  1745,  1746,
    1943,  1945,  1947,  1948,  1949,  1950,  1951,  1952,  1953,  1954,
    1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,   299,   300,
     301,   302,   303,  1747,   304,   305,   306,   307,   308,   309,
     310,   311,   312,  1750,  1775,  1778,  1779,  1780,   313,  1781,
    1782,  1986,  1783,  1988,  1803,  1990,  1832,  1992,  1993,  1994,
    1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,
    2005,  2006,  1831,  1857,  1859,  1861,   699,   299,   300,   301,
     302,   303,  1863,   304,   305,   306,   307,   308,   309,   310,
     311,   312,  1865,  1923,  1884,  1922,  1963,   313,  1987,  1924,
    1925,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,  2038,
    1989,  1991,  2007,  2023,  2039,  2040,  2041,  2097,  2042,  2043,
    2044,  2099,  2101,  2103,  2105,  2107,  2055,  2057,  2059,  2061,
    2063,  2065,  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,
    2074,   299,   300,   301,   302,   303,  2141,   304,   305,   306,
     307,   308,   309,   310,   311,   312,  2175,  2177,  2142,  2143,
    2179,   313,  2096,  2220,  2098,  2195,  2100,  2196,  2102,  2197,
    2104,  2222,  2106,  2224,  2108,  2109,  2110,  2111,  2112,  2113,
    2114,  2115,  2116,  1425,  2249,  2250,  2251,  2265,  2267,  2269,
    2271,  2272,   807,    70,    71,    72,  1128,  1174,     0,     0,
       0,     0,     0,     0,  2126,  2127,  2128,  2129,  2130,  2131,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2144,  2145,  2146,  2147,  2148,  2149,  2151,  2153,
    2155,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2168,  2169,  2170,  2171,  2172,  2173,  2174,
       0,  2176,     0,  2178,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2186,  2187,  2188,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2198,
    2199,  2200,  2202,  2204,  2206,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2216,  2217,  2218,  2219,     0,  2221,
       0,  2223,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2228,  2229,  2230,     0,     0,     0,  2234,  2235,
    2236,     0,     0,     0,  2240,  2241,  2242,   866,   867,     0,
     869,     0,   871,   872,     0,     0,  2253,  2255,  2257,     0,
       0,     0,     0,     0,     0,  2264,     0,  2266,     0,  2268,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   908,   909,     0,     0,   912,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,   929,   930,     0,     0,   313,     0,   935,   936,
       0,     0,    92,    93,    94,   942,    95,   949,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,     0,   120,   121,   122,    92,    93,   460,     0,
       0,     0,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1013,
       0,  1015,     0,     0,     0,     0,     0,     0,   712,     0,
       0,  1022,  1023,  1024,     0,     0,  1027,  1028,  1029,  1030,
    1031,  1032,  1033,    92,    93,     0,     0,     0,     0,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    92,   324,     0,     0,     0,     0,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   877,     0,     0,     0,     0,   123,   124,
     125,   126,     0,     0,     0,     0,     0,     0,   915,     0,
       0,     0,   127,   128,     0,     0,     0,     0,   129,   130,
     131,     0,     0,   132,     0,   133,     0,   134,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1123,     0,
       0,     0,     0,     0,     0,     0,   127,   128,     0,     0,
       0,     0,   129,    92,   503,     0,     0,   132,     0,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,  1176,     0,
       0,     0,     0,   313,     0,     0,  1186,     0,     0,     0,
       0,     0,     0,   127,   128,   202,     0,     0,     0,   129,
       0,     0,     0,     0,   132,  1205,     0,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,   127,   466,     0,     0,   313,     0,   129,
       0,     0,     0,  1329,   132,  1330,     0,     0,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   299,   300,   301,   302,   303,   313,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     203,   204,   205,   313,     0,     0,     0,     0,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   -10,     1,
       0,   -10,   -53,     0,     0,     0,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   127,   128,     0,     0,     0,     0,   129,
       0,   -53,     0,     0,   132,   -53,   -53,   -53,   -53,   -53,
     -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,
     -53,   -53,     0,     0,     0,   -53,   -53,   -53,   -53,   -53,
     -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,     0,   536,
      27,    28,   537,   538,    31,    32,    33,     0,    34,     0,
      36,    37,     0,    39,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -53,   -53,   -53,     0,  1349,
      52,  1350,   -53,     0,   -53,  1354,   -53,   -53,   -53,   -53,
     -53,   -53,   -53,     0,     0,     0,     0,     0,     0,     0,
       0,  1370,     0,     0,     0,     0,     0,     0,    53,    54,
      55,     0,   -10,   -10,   -10,   -10,   -10,   -10,   -10,   -10,
     536,    27,    28,   537,   538,    31,    32,    33,     0,    34,
       0,    36,    37,     0,    39,    40,     0,   -53,     2,     3,
       0,     4,     0,     0,     0,     0,   299,   300,   301,   302,
     303,    52,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,     0,     0,
      65,     0,     0,     0,   735,     0,     0,     0,     0,    53,
      54,    55,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,     0,    23,
       0,     0,   544,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1471,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1483,  1484,     0,     0,    24,     0,
       0,    65,    25,    26,    27,    28,    29,    30,    31,    32,
      33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,     0,
      48,    49,    50,    51,    52,   536,    27,    28,   537,   538,
      31,    32,    33,   767,    34,     0,    36,    37,     0,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    53,    54,    55,     0,    52,     0,     0,    56,
       0,    57,   624,    58,    59,    60,    61,    62,    63,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    53,    54,    55,     0,     0,  1572,
       0,     0,     0,     0,  1579,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   299,   300,   301,   302,   303,    65,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,     0,     0,     0,     0,     0,     0,   736,
       0,     0,     0,     0,     0,     0,     0,   299,   300,   301,
     302,   303,  1667,   304,   305,   306,   307,   308,   309,   310,
     311,   312,  1677,     0,     0,     0,     0,   313,     0,     0,
     299,   300,   301,   302,   303,   896,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,   299,   300,   301,   302,   303,  1152,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   958,   299,   300,   301,   302,
     303,  1352,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,     0,     0,
       0,     0,     0,     0,  1353,     0,   299,   300,   301,   302,
     303,  1752,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,     0,   299,
     300,   301,   302,   303,  1409,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,     0,   299,   300,   301,   302,   303,  1415,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
    1804,     0,   313,     0,     0,   299,   300,   301,   302,   303,
    1418,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,   299,   300,
     301,   302,   303,  1421,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
       0,     0,  1858,     0,     0,     0,  1422,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,     0,
     299,   300,   301,   302,   303,  1467,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,     0,  1903,     0,     0,  1527,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,     0,     0,     0,     0,     0,     0,  1530,   299,   300,
     301,   302,   303,  1941,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
       0,   299,   300,   301,   302,   303,  1532,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,     0,   299,   300,   301,   302,   303,  1777,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,     0,   299,   300,   301,
     302,   303,  1830,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   464,
       0,     0,     0,   522,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
     522,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,   523,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,   553,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,   673,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,   674,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,   687,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,   688,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,   689,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,   690,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,   691,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
     692,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,   749,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,   750,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,   751,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,   894,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,   895,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,   914,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1049,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1050,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1064,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1065,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1096,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1097,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1098,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1099,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1100,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1101,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1102,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1103,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1104,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1105,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1106,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1107,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1108,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1109,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1110,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1111,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1112,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1113,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1114,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1115,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1116,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1117,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1118,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1119,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1120,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1121,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1137,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1264,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1265,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1274,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1277,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1288,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1293,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1296,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1298,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1299,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1300,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1301,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1302,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1304,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1305,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1306,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1307,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1308,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1309,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1310,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1311,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1312,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1313,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1314,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1315,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1316,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1317,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1318,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1319,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1320,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1321,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1322,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1323,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1327,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1431,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1443,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1444,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1445,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1446,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1447,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1448,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1449,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1450,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1451,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1452,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1453,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1454,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1455,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1456,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1457,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1458,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1459,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1460,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1461,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1462,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1463,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1465,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1545,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1546,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1547,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1548,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1549,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1550,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1551,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1552,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1553,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1554,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1555,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1556,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1557,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1558,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1559,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1560,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1561,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1562,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1563,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1564,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1565,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1640,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1641,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1642,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1643,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1644,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1645,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1646,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1647,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1648,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1649,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1650,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1651,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1652,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1653,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1654,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1655,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1656,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1657,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1658,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1659,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1660,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1717,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1724,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1725,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1726,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1727,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1728,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1729,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1730,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1731,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1732,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1733,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1734,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1735,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1736,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1737,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1738,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1739,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1740,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1741,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1776,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1784,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1785,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1786,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1787,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1788,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1789,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1790,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1791,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1792,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1793,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1794,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1795,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1796,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1797,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1798,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1799,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1800,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1801,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1839,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1840,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1841,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1842,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1843,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1844,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1845,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1846,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1847,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1848,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1849,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1850,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1851,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1852,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1853,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1854,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1855,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1856,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1888,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1889,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1890,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1891,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1892,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1893,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1894,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1895,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1896,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1897,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1898,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1899,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1900,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1901,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1902,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1926,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1927,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1928,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1929,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1930,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1931,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1932,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1933,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1934,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1935,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1936,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1937,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1938,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1939,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1940,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1970,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1971,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1972,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1973,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1974,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1975,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1976,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1977,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1978,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1979,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1980,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1981,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1982,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1983,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1984,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2014,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2015,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2016,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2017,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2018,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2019,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2020,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2021,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2022,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2045,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2046,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2047,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2048,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2049,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2050,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2051,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2052,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2053,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2087,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2088,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2089,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2090,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2091,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2092,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2093,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2094,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2095,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2117,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2118,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2119,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2120,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2121,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2122,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2135,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2136,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2137,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2138,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2139,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2140,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2156,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2157,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2158,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2159,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2160,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2161,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2180,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2181,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2182,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2192,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2193,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2194,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2207,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2208,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2209,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2225,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2226,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2227,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2231,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2232,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2233,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2237,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2238,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2239,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   470,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   595,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   652,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   654,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   656,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   658,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   660,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   662,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   664,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   666,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   668,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   670,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   672,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   676,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   678,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   680,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   682,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   684,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   686,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   752,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   757,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   986,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   988,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   990,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   992,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   993,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,  1130,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   464,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   494,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   495,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   496,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   498,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   500,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     501,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   508,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   547,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   548,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   551,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   557,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   651,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   653,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   655,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   657,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     659,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   661,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   663,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   665,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   667,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   669,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   671,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   675,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   677,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   679,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     681,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   683,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   685,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   718,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   720,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   732,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   733,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   737,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   738,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   739,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     740,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   741,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   763,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   770,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   985,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   987,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   989,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   991,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  1053,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  1153,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    1181,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  1283,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  1287,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,  1289,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,  1434,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,  1436,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,  1438,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,  1440,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  1441,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  1442,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    1464,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  1567,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  1721,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,  1722,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,  1723,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,  1885,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,  1886,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,  1887,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  2008,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  2009,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    2010,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  2011,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  2012,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,  2013,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,  2123,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,  2124,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,  2125,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,  2183,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  2184,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  2185,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    2243,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  2244,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  2245
};

static const short yycheck[] =
{
      23,    90,   351,    23,   293,   710,     4,     4,   326,     4,
       4,     4,     4,    64,    43,    44,     3,    64,   177,   283,
     284,   285,   181,  1171,    42,     7,    64,  1261,     6,  1263,
       4,     7,  1338,     4,     6,    65,  1342,    65,    65,  1345,
      70,    65,    70,    70,    65,   101,    70,     7,   194,    70,
      82,   194,   183,   184,   200,  1071,    65,   200,     4,     5,
     164,    70,    65,    65,  1080,     5,   194,    70,    70,   200,
      38,  1087,     6,    41,    42,    65,    44,    49,   195,   194,
      70,    65,   199,     6,   183,   184,    70,     6,    34,    35,
      36,   194,   291,   196,    34,    35,    36,   183,   184,   195,
     199,     6,   201,   199,   127,   128,   129,   183,   184,   132,
     133,    38,   135,   199,    41,   201,   194,   115,   194,   142,
     143,   144,   194,   146,   200,   148,   149,   326,   151,  1277,
     104,   105,   195,   104,   105,   164,   199,   166,   194,   183,
     184,   183,   184,   172,   167,   168,   194,   194,   196,   200,
     183,   184,     6,   858,     6,   199,   194,   201,   200,     7,
       6,   195,   200,   186,   187,   199,   189,   200,   191,   201,
       6,   194,   195,   201,   201,   493,   194,   201,   194,    38,
     201,   470,    41,    42,     7,    64,   504,   169,   170,   171,
     172,    46,   201,   169,   170,   171,   172,   184,   201,   201,
      42,   194,   200,   200,    42,   200,   200,   471,   200,   194,
     239,   201,   371,   236,   190,   191,    42,   201,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     183,   184,  1278,  1569,   183,   184,  1282,  1573,   291,   194,
    1576,   195,   194,   293,   196,   199,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     3,  1526,   194,   493,  1529,   319,  1531,   321,   183,
     184,  1006,   325,   326,   194,   504,   196,   194,   331,   332,
     333,   195,   335,   336,   337,   338,   339,   340,   341,   348,
     349,   169,   170,   171,   172,   183,   184,   190,   191,   194,
     353,   354,   355,   356,    44,   198,   359,   194,     8,   183,
     184,   199,   190,   191,   367,    42,   169,   170,   171,   172,
     198,   183,   184,   376,     6,   199,   183,   184,   183,   184,
    1666,   183,   184,   195,  1670,   200,  1672,   190,   191,   183,
     184,   199,   199,   201,   199,   183,   184,   199,   696,   183,
     184,   183,   184,   195,   200,   199,  1620,   199,     6,     7,
    1624,   199,  1626,     6,   414,   199,   194,   199,   183,   184,
     185,   186,   187,   190,   191,   194,   724,   196,   193,   196,
     194,   198,  1428,  1429,  1430,  1431,   194,    41,    42,  1435,
      44,     6,   134,   135,   136,   137,   138,   139,   140,   141,
     194,     4,   196,   697,     4,   753,   754,   755,   190,   191,
     190,   191,     6,   466,   196,   194,   198,   196,    42,   472,
     470,   194,     3,   196,   173,   174,   175,   176,   177,     8,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   194,
     493,   196,   194,   194,   193,   196,   194,     5,   196,   502,
     199,   504,   201,   506,   507,   185,   186,   187,   194,   512,
      54,   194,   521,   193,    55,    56,   194,   696,   196,   522,
     523,   700,   194,   173,   174,   175,   176,   177,   531,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     6,   542,
    1536,  1537,     6,   193,  1540,   724,     5,   194,   190,   191,
     553,   201,   555,   556,   196,   194,   198,   196,     6,     7,
    1245,   175,   176,   177,   194,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   753,   754,   755,   875,   194,   193,
     196,   850,   851,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     3,     4,   194,   595,   196,   193,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    58,    59,    60,    61,   194,    63,   196,   173,
     174,   175,   176,   177,  1630,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   173,   174,   175,   176,   177,   193,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   119,
     120,   121,   122,   123,   193,     6,   195,   194,   200,   196,
     673,   674,   194,   194,   196,   196,   194,   194,   196,   196,
     196,   194,   198,   194,   687,   688,   689,   690,   691,   692,
     693,   200,     8,   696,   200,   194,   875,   700,     4,   199,
     703,   201,   199,   199,   201,   201,   715,   200,   194,   712,
    1039,   199,   199,   201,   201,   199,   199,   201,   201,   200,
     200,   724,   725,  1719,   199,   199,   201,   201,   199,   199,
     201,   201,   199,   194,   201,   804,   199,   199,   201,   201,
     749,   750,   751,   199,   199,   201,   201,   199,   194,   201,
     753,   754,   755,   194,   998,   758,   759,   196,     6,   762,
       6,   199,   199,   201,   201,   199,   775,   201,   196,   198,
     773,   774,   183,   184,   199,   784,   201,   199,   189,   201,
     199,     6,   201,   194,  1780,   199,   197,   201,   200,   200,
     199,  1035,   201,   199,   199,   201,   201,   199,   199,   201,
     201,   199,   199,   201,   201,   808,   809,   810,   811,   812,
     813,   814,   815,   816,   817,   818,   819,   820,   821,   822,
     823,   824,   825,   826,   827,   828,   829,   830,   831,   832,
     833,   107,   173,   174,   175,   176,   177,   194,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   199,   199,   201,
     201,   851,   193,   199,   194,   201,   859,   173,   174,   175,
     176,   177,   194,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   875,   199,   877,   201,   879,   193,   199,   194,
     201,   194,   194,   194,   194,   194,   194,   194,     5,   194,
     893,   894,   895,   194,    38,    39,    40,    41,    42,    43,
      44,    45,   194,    47,   194,    49,    50,   919,    52,    53,
     194,   914,   915,   916,   194,   194,   194,   194,   199,   194,
     194,   194,   194,   194,   194,    69,  1255,   173,   174,   175,
     176,   177,   194,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   194,   194,   194,   194,   199,   193,   195,     4,
     193,     7,     6,    97,    98,    99,   198,   957,     7,     7,
       7,   195,     3,     4,     7,     7,   102,  1963,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,   104,   200,   165,     5,   999,   173,   174,   175,
     176,   177,  1011,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     5,     5,     5,   159,     5,   193,     5,     5,
       5,     5,  1025,  1026,  1093,   201,     5,     5,     5,     5,
       5,  1040,  1035,  1042,     5,  1044,     5,     5,     5,     5,
       5,     5,     5,     5,   152,     5,  1049,  1050,     5,     5,
    1062,     5,     3,     5,   199,     5,     5,   201,  1061,     6,
     195,  1064,     6,     6,     4,     6,   198,   201,     7,     7,
       7,  1074,     7,     7,     7,     7,   201,   200,  1081,  1082,
    1083,   200,     7,     7,   194,  1088,     7,   198,   166,  1092,
     199,     5,   199,  1096,  1097,  1098,  1099,  1100,  1101,  1102,
    1103,  1104,  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1112,
    1113,  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,  1137,   199,   199,   199,   199,   193,
     199,   199,   183,   184,   195,     6,   199,   199,   189,   199,
       4,  1154,     7,   194,   199,   199,   197,     6,     6,   200,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,  1183,     3,     4,  1177,   199,  1179,   199,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,     3,     4,   199,   199,   194,   197,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,   173,   174,   175,   176,   177,     6,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     6,   194,  1258,
       7,  1260,   193,  1262,   199,  1258,     7,  1260,   200,  1262,
       7,  1264,  1265,   199,   194,   194,   194,   194,  1271,     7,
     196,   194,   194,     7,   194,   194,   194,  1280,   194,   194,
       7,   194,   194,   194,   194,  1288,   194,   194,   194,   194,
    1293,   194,   194,  1296,   194,  1298,  1299,  1300,  1301,  1302,
    1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,  1311,  1312,
    1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,  1322,
    1323,   194,  1566,  1332,   194,     7,  1329,     7,  1331,  1332,
    1333,   176,   177,     7,   179,   180,   181,   182,   183,   184,
     185,   186,   187,  1355,     7,     7,     7,     4,   193,     7,
       6,     6,   183,   184,     4,     7,   162,     3,   189,     3,
       3,   185,     3,   194,     3,     3,   197,     3,     3,   200,
       3,     3,     3,     3,     3,     3,   195,   195,     5,     5,
       3,     3,   183,   184,     4,     6,   198,     6,   189,     7,
       6,     6,     6,   194,     6,   200,     6,     6,   103,   200,
     200,   199,   199,   195,   199,   195,   199,  1410,   195,   195,
     199,   199,   195,  1416,   199,  1427,  1419,  1661,   199,  1663,
     199,   199,   199,   199,   199,   195,   199,     6,   199,     6,
     195,   199,   199,   199,     6,   199,   199,   198,     4,     6,
    1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,
    1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,
    1463,     6,  1465,     6,   197,     6,     6,     6,     6,   173,
     174,   175,   176,   177,  1486,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     6,     6,     6,     6,     6,   193,
       6,     6,     6,     3,     4,   199,     7,   201,  1742,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,     6,     6,     6,     6,   103,     3,     6,
       3,   185,     6,     3,     6,     6,     3,     6,     6,  1542,
    1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,
    1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,
    1563,  1564,  1565,     6,     3,     4,     3,     3,     6,  1581,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,   173,   174,   175,   176,   177,     3,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     3,
       6,     4,     7,   198,   193,     6,     6,  1629,     6,   197,
       6,   201,   100,     6,   199,  1628,   200,   200,     3,   200,
     200,  1634,     6,  1636,   195,  1638,   200,  1640,  1641,  1642,
    1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,  1656,  1657,  1658,  1659,  1660,   105,   195,
     162,   103,   199,  1675,   199,   199,   199,   195,   195,   199,
     195,   150,   195,   183,   184,   199,   155,     6,   195,   189,
       6,     3,     6,   195,   194,     6,   199,     6,     6,     6,
     200,     6,     6,     3,     6,     6,     5,     5,   201,   178,
       6,   200,   200,   199,   201,   184,   185,   199,   199,   199,
     195,   195,   199,  1716,  1717,     6,     6,     6,     6,   195,
       6,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,   199,
     199,     6,     6,     6,   183,   184,     6,     6,     6,     6,
     189,     6,     6,     6,     5,   194,   173,   174,   175,   176,
     177,   200,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     6,     5,  1776,   200,   199,   193,   200,  1781,  1782,
    1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,  1792,
    1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,   173,
     174,   175,   176,   177,   201,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     6,   200,   195,   199,   199,   193,
       6,   199,   195,   199,     6,     6,   100,   199,   162,   200,
    1833,   200,  1835,   200,  1837,   200,  1839,  1840,  1841,  1842,
    1843,  1844,  1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,
    1853,  1854,  1855,  1856,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     6,
       6,     5,     5,   200,   193,   200,     6,   200,     6,     6,
       6,   201,   195,   199,     6,  1888,  1889,  1890,  1891,  1892,
    1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,
     200,   199,   195,   200,   100,   201,     6,     6,     6,     6,
       6,     6,     6,     6,   201,   200,   199,   199,     6,     6,
    1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,
    1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,   173,   174,
     175,   176,   177,     6,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   167,     6,   168,   199,   199,   193,   200,
     200,  1964,   200,  1966,     6,  1968,   195,  1970,  1971,  1972,
    1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,
    1983,  1984,   199,     6,     6,     6,   465,   173,   174,   175,
     176,   177,     6,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     6,   200,   199,   199,   199,   193,     6,   200,
     200,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,
       6,     6,   195,     6,   200,   200,   200,     6,   200,   200,
     200,     6,     6,     6,     6,     6,  2039,  2040,  2041,  2042,
    2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,
    2053,   173,   174,   175,   176,   177,   200,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     6,     6,   200,   200,
       6,   193,  2075,     6,  2077,   200,  2079,   200,  2081,   200,
    2083,     6,  2085,     6,  2087,  2088,  2089,  2090,  2091,  2092,
    2093,  2094,  2095,     6,   200,   200,   200,     6,     6,     6,
       0,     0,   597,     7,     7,     7,  1002,  1055,    -1,    -1,
      -1,    -1,    -1,    -1,  2117,  2118,  2119,  2120,  2121,  2122,
      -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,
    2143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2156,  2157,  2158,  2159,  2160,  2161,  2162,
      -1,  2164,    -1,  2166,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2180,  2181,  2182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2192,
    2193,  2194,  2195,  2196,  2197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2207,  2208,  2209,  2210,    -1,  2212,
      -1,  2214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2225,  2226,  2227,    -1,    -1,    -1,  2231,  2232,
    2233,    -1,    -1,    -1,  2237,  2238,  2239,   716,   717,    -1,
     719,    -1,   721,   722,    -1,    -1,  2249,  2250,  2251,    -1,
      -1,    -1,    -1,    -1,    -1,  2258,    -1,  2260,    -1,  2262,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   760,   761,    -1,    -1,   764,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   781,   782,    -1,    -1,   193,    -1,   787,   788,
      -1,    -1,     3,     4,     5,   794,     7,   796,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    35,    36,     3,     4,     5,    -1,
      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   868,
      -1,   870,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,   880,   881,   882,    -1,    -1,   885,   886,   887,   888,
     889,   890,   891,     3,     4,    -1,    -1,    -1,    -1,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,     8,    -1,    -1,    -1,    -1,   169,   170,
     171,   172,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    -1,   183,   184,    -1,    -1,    -1,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,   196,    -1,   198,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   997,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   183,   184,    -1,    -1,
      -1,    -1,   189,     3,     4,    -1,    -1,   194,    -1,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,  1057,    -1,
      -1,    -1,    -1,   193,    -1,    -1,  1065,    -1,    -1,    -1,
      -1,    -1,    -1,   183,   184,    41,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,  1084,    -1,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   183,   184,    -1,    -1,   193,    -1,   189,
      -1,    -1,    -1,   199,   194,   201,    -1,    -1,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   173,   174,   175,   176,   177,   193,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
     116,   117,   118,   193,    -1,    -1,    -1,    -1,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,     0,     1,
      -1,     3,     4,    -1,    -1,    -1,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,   183,   184,    -1,    -1,    -1,    -1,   189,
      -1,    33,    -1,    -1,   194,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    57,    58,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,  1268,
      69,  1270,   104,    -1,   106,  1274,   108,   109,   110,   111,
     112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1290,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
      38,    39,    40,    41,    42,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    52,    53,    -1,   159,   160,   161,
      -1,   163,    -1,    -1,    -1,    -1,   173,   174,   175,   176,
     177,    69,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
     159,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    97,
      98,    99,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,     4,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1412,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1423,  1424,    -1,    -1,    33,    -1,
      -1,   159,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    57,    58,    59,    60,    61,    62,    63,    -1,
      65,    66,    67,    68,    69,    38,    39,    40,    41,    42,
      43,    44,    45,   201,    47,    -1,    49,    50,    -1,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    69,    -1,    -1,   104,
      -1,   106,   201,   108,   109,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,  1528,
      -1,    -1,    -1,    -1,  1533,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   159,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,   173,   174,   175,   176,   177,   159,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,   175,
     176,   177,  1621,   179,   180,   181,   182,   183,   184,   185,
     186,   187,  1631,    -1,    -1,    -1,    -1,   193,    -1,    -1,
     173,   174,   175,   176,   177,   201,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,   173,   174,   175,   176,   177,   201,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   201,   173,   174,   175,   176,
     177,   201,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   201,    -1,   173,   174,   175,   176,
     177,  1720,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,   173,
     174,   175,   176,   177,   201,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,   173,   174,   175,   176,   177,   201,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
    1779,    -1,   193,    -1,    -1,   173,   174,   175,   176,   177,
     201,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,   173,   174,
     175,   176,   177,   201,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
      -1,    -1,  1831,    -1,    -1,    -1,   201,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
     173,   174,   175,   176,   177,   201,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,    -1,  1884,    -1,    -1,   201,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,   173,   174,
     175,   176,   177,  1922,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
      -1,   173,   174,   175,   176,   177,   201,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,   173,   174,   175,   176,   177,   201,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,    -1,   173,   174,   175,
     176,   177,   201,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
      -1,    -1,    -1,   199,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 4:
#line 174 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 180 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 181 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 186 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 200 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 207 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 223 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 224 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 229 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 234 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 245 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 248 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 252 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 258 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 264 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 271 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 277 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 281 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 285 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 292 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 296 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 301 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 305 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 309 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 313 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 317 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 321 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 325 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 329 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 338 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 341 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 345 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 349 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 353 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 357 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 365 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 372 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 382 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 390 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 393 "Gmsh.y"
{
    yymsg(INFO, "Gmsh file format read");
  ;
    break;}
case 55:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 411 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 416 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 69:
#line 420 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c,yyvsp[-2].l,tmpstring);
      if(i<0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i>0)
	yymsg(GERROR, "Too many arguments (%d) in Printf", i);
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 70:
#line 436 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 71:
#line 440 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 72:
#line 447 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 99:
#line 480 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 482 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 487 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 492 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 103:
#line 499 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 501 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 506 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 106:
#line 511 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 107:
#line 518 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 520 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 525 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 530 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 111:
#line 537 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 539 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 545 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 551 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 115:
#line 558 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 560 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 566 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 572 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 119:
#line 579 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 581 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 587 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 593 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 123:
#line 600 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 602 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 609 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 618 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 127:
#line 625 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 627 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 634 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 643 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 131:
#line 650 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 132:
#line 652 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 659 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 134:
#line 668 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 135:
#line 675 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 136:
#line 677 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 685 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 138:
#line 694 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 139:
#line 701 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 140:
#line 703 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 711 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 142:
#line 720 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 143:
#line 727 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 144:
#line 729 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 737 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 146:
#line 746 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 147:
#line 753 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 148:
#line 755 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 763 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 150:
#line 772 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 151:
#line 779 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 152:
#line 781 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 789 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 154:
#line 798 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 155:
#line 805 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 156:
#line 807 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 815 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 158:
#line 824 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 159:
#line 831 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 160:
#line 833 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 845 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 162:
#line 860 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 163:
#line 867 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 164:
#line 869 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 881 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 166:
#line 896 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 167:
#line 903 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 168:
#line 905 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 917 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 170:
#line 932 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 171:
#line 939 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 172:
#line 941 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 951 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 174:
#line 963 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 175:
#line 970 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 176:
#line 972 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 982 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 178:
#line 994 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 179:
#line 1001 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 180:
#line 1003 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1013 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 182:
#line 1025 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 183:
#line 1032 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 184:
#line 1034 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1043 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 186:
#line 1055 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 187:
#line 1062 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 188:
#line 1064 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1073 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 190:
#line 1085 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 191:
#line 1092 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 192:
#line 1094 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1103 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 194:
#line 1115 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 195:
#line 1122 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 196:
#line 1127 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1135 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 198:
#line 1142 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 199:
#line 1149 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1154 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1162 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 202:
#line 1169 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 203:
#line 1178 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 204:
#line 1179 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 205:
#line 1180 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 206:
#line 1181 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 207:
#line 1182 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 208:
#line 1186 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 209:
#line 1187 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 210:
#line 1195 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 211:
#line 1222 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 212:
#line 1256 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	    }
	    List_Add(Symbol_L, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 213:
#line 1303 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1318 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 215:
#line 1327 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 216:
#line 1342 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 217:
#line 1354 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1368 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 219:
#line 1391 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 220:
#line 1415 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 221:
#line 1427 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1441 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 223:
#line 1453 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1467 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 1487 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1509 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].d); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
	}
      }
    ;
    break;}
case 227:
#line 1521 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].c); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
	}
      }
    ;
    break;}
case 228:
#line 1541 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 229:
#line 1548 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1554 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 231:
#line 1573 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 232:
#line 1587 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 233:
#line 1593 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1599 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 235:
#line 1618 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 236:
#line 1624 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1630 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 238:
#line 1647 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 239:
#line 1653 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 240:
#line 1659 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1665 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 242:
#line 1676 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BEZIER,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1687 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
	for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
	  List_Read(yyvsp[-5].l,i,&d);
	  j = (int)d;
	  List_Add(Temp,&j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 244:
#line 1712 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 245:
#line 1718 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 246:
#line 1737 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 247:
#line 1760 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 248:
#line 1768 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 249:
#line 1772 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 250:
#line 1778 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 251:
#line 1787 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 252:
#line 1793 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 253:
#line 1799 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 254:
#line 1810 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 255:
#line 1815 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 256:
#line 1820 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1825 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1832 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 259:
#line 1833 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 260:
#line 1834 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1839 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 262:
#line 1843 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 263:
#line 1848 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num,THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 264:
#line 1863 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 265:
#line 1878 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num,THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 266:
#line 1898 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 267:
#line 1908 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d,0);
    ;
    break;}
case 268:
#line 1918 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 269:
#line 1925 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) FreeView((int)yyvsp[-2].d);
    ;
    break;}
case 270:
#line 1929 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 271:
#line 1938 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	ColorShape(TheShape.Type,TheShape.Num,yyvsp[-3].u);
      }
    ;
    break;}
case 272:
#line 1950 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  // FIXME: If we do fclose, we cannot call a Function defined
	  // in another file...
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  yymsg(GERROR, "Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
#endif
      }

      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){

	FILE *ff = yyin;
	MergeProblemWithBoundingBox(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	SystemCall(yyvsp[-1].c);

      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 273:
#line 2024 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");

      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 274:
#line 2044 "Gmsh.y"
{
    if(CTX.default_plugins)
      GMSH_PluginManager::Instance()->Action(yyvsp[-4].c,yyvsp[-1].c,0); 
   ;
    break;}
case 275:
#line 2049 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 276:
#line 2053 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 277:
#line 2075 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 278:
#line 2085 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 279:
#line 2095 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 280:
#line 2116 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 281:
#line 2137 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 282:
#line 2158 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yyname,yylineno))
	yymsg(GERROR, "Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 283:
#line 2164 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yyname,yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 284:
#line 2169 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yyname,yylineno))
	yymsg(GERROR, "Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 285:
#line 2174 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 286:
#line 2178 "Gmsh.y"
{
    ;
    break;}
case 287:
#line 2190 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,
			   &pc,&prc,1,NULL);
    ;
    break;}
case 288:
#line 2197 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,1,NULL);
    ;
    break;}
case 289:
#line 2204 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,1,NULL);
    ;
    break;}
case 290:
#line 2211 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 291:
#line 2216 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			   0.,0.,0.,0.,0.,0.,0.,
			   &pc,&prc,1,&extr);
    ;
    break;}
case 292:
#line 2223 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 293:
#line 2228 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,
			   &pc,&prc,1,&extr);
    ;
    break;}
case 294:
#line 2235 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 295:
#line 2240 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,
			   &pc,&prc,1,&extr);
    ;
    break;}
case 296:
#line 2250 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,1,NULL);
    ;
    break;}
case 297:
#line 2255 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,1,NULL);
    ;
    break;}
case 298:
#line 2260 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,1,NULL);
    ;
    break;}
case 299:
#line 2265 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 300:
#line 2270 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			   0.,0.,0.,0.,0.,0.,0.,1,&extr);
    ;
    break;}
case 301:
#line 2275 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 302:
#line 2280 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,1,&extr);
    ;
    break;}
case 303:
#line 2285 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 304:
#line 2290 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,1,&extr);
    ;
    break;}
case 305:
#line 2298 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			     0.,0.,0.,0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 306:
#line 2303 "Gmsh.y"
{
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 307:
#line 2308 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 308:
#line 2313 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 309:
#line 2318 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			     0.,0.,0.,0.,0.,0.,0.,vol,&extr);
    ;
    break;}
case 310:
#line 2324 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 311:
#line 2330 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 312:
#line 2336 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2342 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 314:
#line 2351 "Gmsh.y"
{
    ;
    break;}
case 315:
#line 2354 "Gmsh.y"
{
    ;
    break;}
case 316:
#line 2360 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	  List_Read(yyvsp[-6].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 317:
#line 2386 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-4].l);i++){
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 318:
#line 2410 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 319:
#line 2419 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 320:
#line 2437 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 321:
#line 2455 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 322:
#line 2473 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 323:
#line 2495 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 324:
#line 2516 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 325:
#line 2537 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 326:
#line 2551 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 327:
#line 2571 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 328:
#line 2575 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 329:
#line 2584 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 330:
#line 2585 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 331:
#line 2586 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 332:
#line 2587 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 333:
#line 2588 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 334:
#line 2592 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 335:
#line 2593 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 336:
#line 2594 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 337:
#line 2595 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 338:
#line 2596 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 339:
#line 2597 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 340:
#line 2598 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 341:
#line 2599 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 342:
#line 2601 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 343:
#line 2607 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 344:
#line 2608 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 345:
#line 2609 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 346:
#line 2610 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 347:
#line 2611 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 348:
#line 2612 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 349:
#line 2613 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 350:
#line 2614 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 351:
#line 2615 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 352:
#line 2616 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 353:
#line 2617 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 354:
#line 2618 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 355:
#line 2619 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 356:
#line 2620 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 357:
#line 2621 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 358:
#line 2622 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 359:
#line 2623 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 360:
#line 2624 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 361:
#line 2625 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 362:
#line 2626 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 363:
#line 2627 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 364:
#line 2628 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 365:
#line 2629 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 366:
#line 2630 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 367:
#line 2631 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 368:
#line 2632 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 369:
#line 2633 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 370:
#line 2634 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 371:
#line 2635 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 372:
#line 2636 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 373:
#line 2637 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 374:
#line 2638 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 375:
#line 2640 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 376:
#line 2641 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 377:
#line 2642 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 378:
#line 2643 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 379:
#line 2644 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 380:
#line 2645 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 381:
#line 2646 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 382:
#line 2647 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 383:
#line 2648 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 384:
#line 2649 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 385:
#line 2650 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 386:
#line 2651 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 387:
#line 2652 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 388:
#line 2653 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 389:
#line 2654 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 390:
#line 2655 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 391:
#line 2656 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 392:
#line 2657 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 393:
#line 2658 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 394:
#line 2659 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 395:
#line 2660 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 396:
#line 2669 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 397:
#line 2670 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 398:
#line 2671 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 399:
#line 2672 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 400:
#line 2677 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 401:
#line 2688 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 402:
#line 2705 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 403:
#line 2716 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 404:
#line 2735 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 405:
#line 2751 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 406:
#line 2767 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 407:
#line 2783 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 408:
#line 2801 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 409:
#line 2805 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 410:
#line 2809 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 411:
#line 2813 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 412:
#line 2817 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 413:
#line 2824 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 414:
#line 2828 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 415:
#line 2832 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 416:
#line 2836 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 417:
#line 2843 "Gmsh.y"
{
    ;
    break;}
case 418:
#line 2846 "Gmsh.y"
{
    ;
    break;}
case 419:
#line 2852 "Gmsh.y"
{
    ;
    break;}
case 420:
#line 2855 "Gmsh.y"
{
    ;
    break;}
case 421:
#line 2861 "Gmsh.y"
{
    ;
    break;}
case 422:
#line 2864 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 423:
#line 2868 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 424:
#line 2875 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 425:
#line 2880 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 426:
#line 2888 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 427:
#line 2893 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 428:
#line 2897 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 429:
#line 2901 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 430:
#line 2912 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 431:
#line 2918 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 432:
#line 2929 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 433:
#line 2943 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 434:
#line 2959 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 435:
#line 2979 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 436:
#line 3004 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 437:
#line 3009 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 438:
#line 3013 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 439:
#line 3017 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 440:
#line 3029 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 441:
#line 3033 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 442:
#line 3044 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 443:
#line 3049 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 444:
#line 3068 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 445:
#line 3072 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 446:
#line 3086 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 447:
#line 3091 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 448:
#line 3098 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 449:
#line 3102 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 450:
#line 3110 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 451:
#line 3123 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 452:
#line 3127 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c,yyvsp[-1].l,tmpstring);
      if(i<0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i>0){
	yymsg(GERROR, "Too many arguments (%d) in Sprintf", i);
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 453:
#line 3145 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 454:
#line 3159 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 3174 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0 ; i<List_Nbr(list) ; i++){
    k = j;
    j++;
    if(j<(int)strlen(format)){
      if(format[j]=='%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j]!='%' && j<(int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]),j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list,i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
      break ;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


