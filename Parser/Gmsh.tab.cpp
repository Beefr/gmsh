
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tPoint	293
#define	tCircle	294
#define	tEllipse	295
#define	tLine	296
#define	tSurface	297
#define	tSpline	298
#define	tVolume	299
#define	tCharacteristic	300
#define	tLength	301
#define	tParametric	302
#define	tElliptic	303
#define	tPlane	304
#define	tRuled	305
#define	tTriangulation	306
#define	tTransfinite	307
#define	tComplex	308
#define	tPhysical	309
#define	tUsing	310
#define	tBump	311
#define	tProgression	312
#define	tPlugin	313
#define	tRotate	314
#define	tTranslate	315
#define	tSymmetry	316
#define	tDilate	317
#define	tExtrude	318
#define	tDuplicata	319
#define	tLoop	320
#define	tRecombine	321
#define	tDelete	322
#define	tCoherence	323
#define	tIntersect	324
#define	tAttractor	325
#define	tLayers	326
#define	tScalarPoint	327
#define	tVectorPoint	328
#define	tTensorPoint	329
#define	tScalarLine	330
#define	tVectorLine	331
#define	tTensorLine	332
#define	tScalarTriangle	333
#define	tVectorTriangle	334
#define	tTensorTriangle	335
#define	tScalarQuadrangle	336
#define	tVectorQuadrangle	337
#define	tTensorQuadrangle	338
#define	tScalarTetrahedron	339
#define	tVectorTetrahedron	340
#define	tTensorTetrahedron	341
#define	tScalarHexahedron	342
#define	tVectorHexahedron	343
#define	tTensorHexahedron	344
#define	tScalarPrism	345
#define	tVectorPrism	346
#define	tTensorPrism	347
#define	tScalarPyramid	348
#define	tVectorPyramid	349
#define	tTensorPyramid	350
#define	tText2D	351
#define	tText3D	352
#define	tInterpolationScheme	353
#define	tTime	354
#define	tCombine	355
#define	tBSpline	356
#define	tBezier	357
#define	tNurbs	358
#define	tOrder	359
#define	tWith	360
#define	tBounds	361
#define	tKnots	362
#define	tColor	363
#define	tColorTable	364
#define	tFor	365
#define	tIn	366
#define	tEndFor	367
#define	tIf	368
#define	tEndIf	369
#define	tExit	370
#define	tReturn	371
#define	tCall	372
#define	tFunction	373
#define	tTrimmed	374
#define	tShow	375
#define	tHide	376
#define	tGetValue	377
#define	tB_SPLINE_SURFACE_WITH_KNOTS	378
#define	tB_SPLINE_CURVE_WITH_KNOTS	379
#define	tCARTESIAN_POINT	380
#define	tTRUE	381
#define	tFALSE	382
#define	tUNSPECIFIED	383
#define	tU	384
#define	tV	385
#define	tEDGE_CURVE	386
#define	tVERTEX_POINT	387
#define	tORIENTED_EDGE	388
#define	tPLANE	389
#define	tFACE_OUTER_BOUND	390
#define	tEDGE_LOOP	391
#define	tADVANCED_FACE	392
#define	tVECTOR	393
#define	tDIRECTION	394
#define	tAXIS2_PLACEMENT_3D	395
#define	tISO	396
#define	tENDISO	397
#define	tENDSEC	398
#define	tDATA	399
#define	tHEADER	400
#define	tFILE_DESCRIPTION	401
#define	tFILE_SCHEMA	402
#define	tFILE_NAME	403
#define	tMANIFOLD_SOLID_BREP	404
#define	tCLOSED_SHELL	405
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	406
#define	tFACE_BOUND	407
#define	tCYLINDRICAL_SURFACE	408
#define	tCONICAL_SURFACE	409
#define	tCIRCLE	410
#define	tTRIMMED_CURVE	411
#define	tGEOMETRIC_SET	412
#define	tCOMPOSITE_CURVE_SEGMENT	413
#define	tCONTINUOUS	414
#define	tCOMPOSITE_CURVE	415
#define	tTOROIDAL_SURFACE	416
#define	tPRODUCT_DEFINITION	417
#define	tPRODUCT_DEFINITION_SHAPE	418
#define	tSHAPE_DEFINITION_REPRESENTATION	419
#define	tELLIPSE	420
#define	tSolid	421
#define	tEndSolid	422
#define	tVertex	423
#define	tFacet	424
#define	tNormal	425
#define	tOuter	426
#define	tLoopSTL	427
#define	tEndLoop	428
#define	tEndFacet	429
#define	tAFFECTPLUS	430
#define	tAFFECTMINUS	431
#define	tAFFECTTIMES	432
#define	tAFFECTDIVIDE	433
#define	tOR	434
#define	tAND	435
#define	tEQUAL	436
#define	tNOTEQUAL	437
#define	tAPPROXEQUAL	438
#define	tLESSOREQUAL	439
#define	tGREATEROREQUAL	440
#define	tCROSSPRODUCT	441
#define	tPLUSPLUS	442
#define	tMINUSMINUS	443
#define	UNARYPREC	444

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.220 2004-12-30 01:36:14 geuzaine Exp $
//
// Copyright (C) 1997-2004 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

// FIXME: most tSTRING and tBIGSTRING are leaked: Free() them!

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static Surface *STL_Surf;
static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

#if defined(HAVE_FLTK)
void UpdateViewsInGUI();
#endif

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 81 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2381
#define	YYFLAG		-32768
#define	YYNTBASE	210

#define YYTRANSLATE(x) ((unsigned)(x) <= 444 ? yytranslate[x] : 348)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   196,     2,   206,     2,   194,     2,     2,   201,
   202,   192,   190,   207,   191,   205,   193,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   186,
     2,   188,   180,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   203,     2,   204,   200,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   208,     2,   209,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   181,   182,   183,   184,   185,   187,   189,
   195,   197,   198,   199
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1973,  1986,  1995,  2004,  2013,  2026,  2041,  2056,  2079,
  2100,  2109,  2118,  2127,  2135,  2144,  2150,  2162,  2168,  2178,
  2180,  2182,  2184,  2185,  2188,  2195,  2202,  2209,  2216,  2221,
  2228,  2233,  2240,  2244,  2249,  2255,  2259,  2263,  2268,  2273,
  2277,  2285,  2289,  2297,  2301,  2304,  2307,  2323,  2326,  2333,
  2342,  2351,  2362,  2364,  2367,  2369,  2373,  2378,  2380,  2389,
  2402,  2417,  2418,  2431,  2432,  2449,  2450,  2469,  2478,  2491,
  2506,  2507,  2520,  2521,  2538,  2539,  2558,  2567,  2580,  2595,
  2596,  2609,  2610,  2627,  2628,  2647,  2649,  2652,  2662,  2670,
  2673,  2680,  2690,  2700,  2709,  2718,  2727,  2734,  2739,  2742,
  2745,  2747,  2749,  2751,  2753,  2755,  2757,  2761,  2764,  2767,
  2770,  2774,  2778,  2782,  2786,  2790,  2794,  2798,  2802,  2806,
  2810,  2814,  2818,  2822,  2826,  2832,  2837,  2842,  2847,  2852,
  2857,  2862,  2867,  2872,  2877,  2882,  2889,  2894,  2899,  2904,
  2909,  2914,  2919,  2926,  2933,  2940,  2945,  2950,  2955,  2960,
  2965,  2970,  2975,  2980,  2985,  2990,  2995,  3002,  3007,  3012,
  3017,  3022,  3027,  3032,  3039,  3046,  3053,  3058,  3060,  3062,
  3064,  3066,  3068,  3073,  3078,  3081,  3087,  3091,  3098,  3103,
  3111,  3118,  3120,  3123,  3126,  3130,  3134,  3146,  3156,  3164,
  3172,  3173,  3177,  3179,  3183,  3184,  3188,  3192,  3194,  3198,
  3200,  3202,  3206,  3211,  3215,  3221,  3226,  3228,  3230,  3232,
  3236,  3241,  3248,  3256,  3258,  3260,  3264,  3268,  3278,  3286,
  3288,  3294,  3298,  3305,  3307,  3311,  3313,  3320,  3325,  3330,
  3337,  3344
};

static const short yyrhs[] = {   214,
     0,   212,     0,   219,     0,     1,     6,     0,     3,     0,
   191,     3,     0,     0,   212,   213,     0,   167,     0,   170,
   171,   211,   211,   211,   172,   173,   169,   211,   211,   211,
   169,   211,   211,   211,   169,   211,   211,   211,   174,   175,
     0,   168,     0,     0,   214,   215,     0,   216,     0,   218,
     0,   217,     0,   142,     6,     0,   143,     6,     0,   145,
     6,     0,   144,     6,     0,   146,     6,     0,   147,   201,
   337,   207,     5,   202,     6,     0,   148,   201,   337,   202,
     6,     0,   149,   201,     5,   207,     5,   207,   337,   207,
   337,   207,     5,   207,     5,   207,     5,   202,     6,     0,
     3,     7,   126,   201,     5,   207,   335,   202,     6,     0,
     3,     7,   125,   201,     5,   207,   333,   207,   341,   207,
   332,   207,   332,   207,   332,   207,   341,   207,   341,   207,
   332,   202,     6,     0,     3,     7,   124,   201,     5,   207,
   333,   207,   333,   207,   339,   207,   332,   207,   332,   207,
   332,   207,   332,   207,   341,   207,   341,   207,   341,   207,
   341,   207,   332,   202,     6,     0,     3,     7,   132,   201,
     5,   207,     3,   207,     3,   207,     3,   207,   332,   202,
     6,     0,     3,     7,   136,   201,     5,   207,     3,   207,
   332,   202,     6,     0,     3,     7,   153,   201,     5,   207,
     3,   207,   332,   202,     6,     0,     3,     7,   134,   201,
     5,   207,   192,   207,   192,   207,   333,   207,   332,   202,
     6,     0,     3,     7,   137,   201,     5,   207,   341,   202,
     6,     0,     3,     7,   138,   201,     5,   207,   341,   207,
     3,   207,   332,   202,     6,     0,     3,     7,   133,   201,
     5,   207,     3,   202,     6,     0,     3,     7,   139,   201,
     5,   207,     3,   207,   333,   202,     6,     0,     3,     7,
   141,   201,     5,   207,     3,   207,     3,   207,     3,   202,
     6,     0,     3,     7,   140,   201,     5,   207,   335,   202,
     6,     0,     3,     7,   135,   201,     5,   207,     3,   202,
     6,     0,     3,     7,    42,   201,     5,   207,     3,   207,
     3,   202,     6,     0,     3,     7,   151,   201,     5,   207,
   341,   202,     6,     0,     3,     7,   152,   201,     5,   207,
   341,   207,     3,   202,     6,     0,     3,     7,   150,   201,
     5,   207,     3,   202,     6,     0,     3,     7,   154,   201,
     5,   207,     3,   207,   333,   202,     6,     0,     3,     7,
   155,   201,     5,   207,     3,   207,   333,   207,   333,   202,
     6,     0,     3,     7,   162,   201,     5,   207,     3,   207,
   333,   207,   333,   202,     6,     0,     3,     7,   156,   201,
     5,   207,     3,   207,   333,   202,     6,     0,     3,     7,
   166,   201,     5,   207,     3,   207,   333,   207,   333,   202,
     6,     0,     3,     7,   157,   201,     5,   207,     3,   207,
   341,   207,   341,   207,   332,   207,   332,   202,     6,     0,
     3,     7,   158,   201,     5,   207,   341,   202,     6,     0,
     3,     7,   159,   201,   160,   207,   332,   207,     3,   202,
     6,     0,     3,     7,   161,   201,     5,   207,   341,   207,
   332,   202,     6,     0,     3,     7,   163,   201,     5,   207,
     5,   207,     3,   207,     3,   202,     6,     0,     3,     7,
   164,   201,     5,   207,     5,   207,     3,   202,     6,     0,
     3,     7,   165,   201,     3,   207,     3,   202,     6,     0,
     0,   219,   220,     0,   222,     0,   221,     0,   307,     0,
   308,     0,   309,     0,   312,     0,   313,     0,   314,     0,
   315,     0,   318,     0,   330,     0,   331,     0,   317,     0,
   316,     0,    33,   201,     5,   202,     6,     0,    33,   201,
     5,   207,   343,   202,     6,     0,     4,     5,   208,   223,
   209,     6,     0,     4,     5,     4,   335,   208,   223,   209,
     6,     0,     0,   223,   225,     0,   223,   228,     0,   223,
   231,     0,   223,   234,     0,   223,   237,     0,   223,   240,
     0,   223,   243,     0,   223,   246,     0,   223,   249,     0,
   223,   252,     0,   223,   255,     0,   223,   258,     0,   223,
   261,     0,   223,   264,     0,   223,   267,     0,   223,   270,
     0,   223,   273,     0,   223,   276,     0,   223,   279,     0,
   223,   282,     0,   223,   285,     0,   223,   288,     0,   223,
   291,     0,   223,   294,     0,   223,   297,     0,   223,   300,
     0,   223,   302,     0,   223,   304,     0,   333,     0,   224,
   207,   333,     0,     0,    73,   201,   333,   207,   333,   207,
   333,   202,   226,   208,   224,   209,     6,     0,   333,     0,
   227,   207,   333,     0,     0,    74,   201,   333,   207,   333,
   207,   333,   202,   229,   208,   227,   209,     6,     0,   333,
     0,   230,   207,   333,     0,     0,    75,   201,   333,   207,
   333,   207,   333,   202,   232,   208,   230,   209,     6,     0,
   333,     0,   233,   207,   333,     0,     0,    76,   201,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   202,   235,   208,   233,   209,     6,     0,   333,     0,   236,
   207,   333,     0,     0,    77,   201,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   202,   238,   208,
   236,   209,     6,     0,   333,     0,   239,   207,   333,     0,
     0,    78,   201,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   202,   241,   208,   239,   209,     6,
     0,   333,     0,   242,   207,   333,     0,     0,    79,   201,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   202,   244,   208,
   242,   209,     6,     0,   333,     0,   245,   207,   333,     0,
     0,    80,   201,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   202,   247,   208,   245,   209,     6,     0,   333,     0,   248,
   207,   333,     0,     0,    81,   201,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   202,   250,   208,   248,   209,     6,     0,
   333,     0,   251,   207,   333,     0,     0,    82,   201,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   202,   253,   208,   251,   209,     6,     0,   333,
     0,   254,   207,   333,     0,     0,    83,   201,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   202,   256,   208,   254,   209,     6,     0,   333,     0,
   257,   207,   333,     0,     0,    84,   201,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   202,   259,   208,   257,   209,     6,     0,   333,     0,   260,
   207,   333,     0,     0,    85,   201,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   202,
   262,   208,   260,   209,     6,     0,   333,     0,   263,   207,
   333,     0,     0,    86,   201,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   202,   265,
   208,   263,   209,     6,     0,   333,     0,   266,   207,   333,
     0,     0,    87,   201,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   202,   268,   208,
   266,   209,     6,     0,   333,     0,   269,   207,   333,     0,
     0,    88,   201,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   202,   271,   208,   269,   209,     6,     0,   333,     0,   272,
   207,   333,     0,     0,    89,   201,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   202,   274,   208,   272,   209,     6,     0,
   333,     0,   275,   207,   333,     0,     0,    90,   201,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   202,   277,   208,   275,
   209,     6,     0,   333,     0,   278,   207,   333,     0,     0,
    91,   201,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   202,   280,   208,
   278,   209,     6,     0,   333,     0,   281,   207,   333,     0,
     0,    92,   201,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   202,   283,
   208,   281,   209,     6,     0,   333,     0,   284,   207,   333,
     0,     0,    93,   201,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   202,
   286,   208,   284,   209,     6,     0,   333,     0,   287,   207,
   333,     0,     0,    94,   201,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   202,   289,   208,   287,   209,     6,
     0,   333,     0,   290,   207,   333,     0,     0,    95,   201,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   202,
   292,   208,   290,   209,     6,     0,   333,     0,   293,   207,
   333,     0,     0,    96,   201,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   207,   333,   207,   333,   207,   333,
   207,   333,   207,   333,   202,   295,   208,   293,   209,     6,
     0,   347,     0,   296,   207,   347,     0,     0,    97,   201,
   333,   207,   333,   207,   333,   202,   298,   208,   296,   209,
     6,     0,   347,     0,   299,   207,   347,     0,     0,    98,
   201,   333,   207,   333,   207,   333,   207,   333,   202,   301,
   208,   299,   209,     6,     0,    99,   208,   340,   209,   208,
   340,   209,     6,     0,   333,     0,   303,   207,   333,     0,
   100,   208,   303,   209,     6,     0,     7,     0,   176,     0,
   177,     0,   178,     0,   179,     0,   197,     0,   198,     0,
     4,   305,   333,     6,     0,     4,   203,   333,   204,   305,
   333,     6,     0,     4,   203,   208,   343,   209,   204,   305,
   341,     6,     0,     4,   203,   204,     7,   341,     6,     0,
     4,   306,     6,     0,     4,   203,   333,   204,   306,     6,
     0,     4,   205,     4,     7,   347,     6,     0,     4,   203,
   333,   204,   205,     4,     7,   347,     6,     0,     4,   205,
     4,   305,   333,     6,     0,     4,   203,   333,   204,   205,
     4,   305,   333,     6,     0,     4,   205,     4,   306,     6,
     0,     4,   203,   333,   204,   205,     4,   306,     6,     0,
     4,   205,   109,   205,     4,     7,   344,     6,     0,     4,
   203,   333,   204,   205,   109,   205,     4,     7,   344,     6,
     0,     4,   205,   110,     7,   345,     6,     0,     4,   203,
   333,   204,   205,   110,     7,   345,     6,     0,    59,   201,
     4,   202,   205,     4,     7,   333,     6,     0,    59,   201,
     4,   202,   205,     4,     7,   347,     6,     0,    39,   201,
   333,   202,     7,   335,     6,     0,    55,    39,   201,   333,
   202,     7,   341,     6,     0,    71,    39,   341,     7,   208,
   333,   207,   333,   207,   333,   209,     6,     0,    46,    47,
   341,     7,   333,     6,     0,    42,   201,   333,   202,     7,
   341,     6,     0,    44,   201,   333,   202,     7,   341,     6,
     0,    40,   201,   333,   202,     7,   341,     6,     0,    40,
   201,   333,   202,     7,   341,    50,   335,     6,     0,    41,
   201,   333,   202,     7,   341,     6,     0,    41,   201,   333,
   202,     7,   341,    50,   335,     6,     0,    48,   201,   333,
   202,     7,   208,   333,   207,   333,   207,     5,   207,     5,
   207,     5,   209,     6,     0,   102,   201,   333,   202,     7,
   341,     6,     0,   103,   201,   333,   202,     7,   341,     6,
     0,   104,   201,   333,   202,     7,   341,   108,   341,   105,
   333,     6,     0,    42,    66,   201,   333,   202,     7,   341,
     6,     0,    71,    42,   341,     7,   208,   333,   207,   333,
   207,   333,   209,     6,     0,    55,    42,   201,   333,   202,
     7,   341,     6,     0,    50,    43,   201,   333,   202,     7,
   341,     6,     0,    51,    43,   201,   333,   202,     7,   341,
     6,     0,   120,    43,   201,   333,   202,     7,   208,   333,
   207,   341,   209,     6,     0,    52,    43,   208,   333,   209,
     7,   201,   333,   207,   333,   202,   341,   341,     6,     0,
    52,    43,   201,   333,   202,     7,   201,   333,   207,   333,
   202,   341,   341,     6,     0,   104,    43,   106,   107,   201,
   333,   202,     7,   339,   108,   208,   341,   207,   341,   209,
   105,   208,   333,   207,   333,   209,     6,     0,   104,    43,
   201,   333,   202,     7,   339,   108,   208,   341,   207,   341,
   209,   105,   208,   333,   207,   333,   209,     6,     0,    43,
    66,   201,   333,   202,     7,   341,     6,     0,    55,    43,
   201,   333,   202,     7,   341,     6,     0,    54,    45,   201,
   333,   202,     7,   341,     6,     0,    45,   201,   333,   202,
     7,   341,     6,     0,    55,    45,   201,   333,   202,     7,
   341,     6,     0,    61,   335,   208,   310,   209,     0,    60,
   208,   335,   207,   335,   207,   333,   209,   208,   310,   209,
     0,    62,   335,   208,   310,   209,     0,    63,   208,   335,
   207,   333,   209,   208,   310,   209,     0,   312,     0,   311,
     0,   309,     0,     0,   311,   308,     0,   311,    39,   208,
   343,   209,     6,     0,   311,    42,   208,   343,   209,     6,
     0,   311,    43,   208,   343,   209,     6,     0,   311,    45,
   208,   343,   209,     6,     0,    65,   208,   311,   209,     0,
    65,     4,   203,   333,   204,     6,     0,    68,   208,   311,
   209,     0,    68,     4,   203,   333,   204,     6,     0,    68,
     4,     6,     0,    68,     4,     4,     6,     0,   109,   344,
   208,   311,   209,     0,   121,   347,     6,     0,   122,   347,
     6,     0,   121,   208,   311,   209,     0,   122,   208,   311,
   209,     0,     4,   347,     6,     0,     4,     4,   203,   333,
   204,   347,     6,     0,     4,   333,     6,     0,    59,   201,
     4,   202,   205,     4,     6,     0,   101,     4,     6,     0,
   116,     6,     0,    37,     6,     0,    37,   208,   333,   207,
   333,   207,   333,   207,   333,   207,   333,   207,   333,   209,
     6,     0,    38,     6,     0,   111,   201,   333,     8,   333,
   202,     0,   111,   201,   333,     8,   333,     8,   333,   202,
     0,   111,     4,   112,   208,   333,     8,   333,   209,     0,
   111,     4,   112,   208,   333,     8,   333,     8,   333,   209,
     0,   113,     0,   119,     4,     0,   117,     0,   118,     4,
     6,     0,   114,   201,   333,   202,     0,   115,     0,    64,
    39,   208,   333,   207,   335,   209,     6,     0,    64,    39,
   208,   333,   207,   335,   207,   335,   207,   333,   209,     6,
     0,    64,    39,   208,   333,   207,   335,   207,   335,   207,
   335,   207,   333,   209,     6,     0,     0,    64,    39,   208,
   333,   207,   335,   209,   319,   208,   328,   209,     6,     0,
     0,    64,    39,   208,   333,   207,   335,   207,   335,   207,
   333,   209,   320,   208,   328,   209,     6,     0,     0,    64,
    39,   208,   333,   207,   335,   207,   335,   207,   335,   207,
   333,   209,   321,   208,   328,   209,     6,     0,    64,    42,
   208,   333,   207,   335,   209,     6,     0,    64,    42,   208,
   333,   207,   335,   207,   335,   207,   333,   209,     6,     0,
    64,    42,   208,   333,   207,   335,   207,   335,   207,   335,
   207,   333,   209,     6,     0,     0,    64,    42,   208,   333,
   207,   335,   209,   322,   208,   328,   209,     6,     0,     0,
    64,    42,   208,   333,   207,   335,   207,   335,   207,   333,
   209,   323,   208,   328,   209,     6,     0,     0,    64,    42,
   208,   333,   207,   335,   207,   335,   207,   335,   207,   333,
   209,   324,   208,   328,   209,     6,     0,    64,    43,   208,
   333,   207,   335,   209,     6,     0,    64,    43,   208,   333,
   207,   335,   207,   335,   207,   333,   209,     6,     0,    64,
    43,   208,   333,   207,   335,   207,   335,   207,   335,   207,
   333,   209,     6,     0,     0,    64,    43,   208,   333,   207,
   335,   209,   325,   208,   328,   209,     6,     0,     0,    64,
    43,   208,   333,   207,   335,   207,   335,   207,   333,   209,
   326,   208,   328,   209,     6,     0,     0,    64,    43,   208,
   333,   207,   335,   207,   335,   207,   335,   207,   333,   209,
   327,   208,   328,   209,     6,     0,   329,     0,   328,   329,
     0,    72,   208,   341,   207,   341,   207,   341,   209,     6,
     0,    72,   208,   341,   207,   341,   209,     6,     0,    67,
     6,     0,    53,    42,   341,     7,   333,     6,     0,    53,
    42,   341,     7,   333,    56,    58,   333,     6,     0,    53,
    42,   341,     7,   333,    56,    57,   333,     6,     0,    53,
    43,   208,   333,   209,     7,   341,     6,     0,    49,    43,
   208,   333,   209,     7,   341,     6,     0,    53,    45,   208,
   333,   209,     7,   341,     6,     0,    67,    43,   341,     7,
   333,     6,     0,    67,    43,   341,     6,     0,    69,     6,
     0,    70,     6,     0,   127,     0,   128,     0,   129,     0,
   130,     0,   131,     0,   334,     0,   201,   333,   202,     0,
   191,   333,     0,   190,   333,     0,   196,   333,     0,   333,
   191,   333,     0,   333,   190,   333,     0,   333,   192,   333,
     0,   333,   193,   333,     0,   333,   194,   333,     0,   333,
   200,   333,     0,   333,   186,   333,     0,   333,   188,   333,
     0,   333,   187,   333,     0,   333,   189,   333,     0,   333,
   183,   333,     0,   333,   184,   333,     0,   333,   182,   333,
     0,   333,   181,   333,     0,   333,   180,   333,     8,   333,
     0,    12,   201,   333,   202,     0,    13,   201,   333,   202,
     0,    14,   201,   333,   202,     0,    15,   201,   333,   202,
     0,    16,   201,   333,   202,     0,    17,   201,   333,   202,
     0,    18,   201,   333,   202,     0,    19,   201,   333,   202,
     0,    20,   201,   333,   202,     0,    22,   201,   333,   202,
     0,    23,   201,   333,   207,   333,   202,     0,    24,   201,
   333,   202,     0,    25,   201,   333,   202,     0,    26,   201,
   333,   202,     0,    27,   201,   333,   202,     0,    28,   201,
   333,   202,     0,    29,   201,   333,   202,     0,    30,   201,
   333,   207,   333,   202,     0,    31,   201,   333,   207,   333,
   202,     0,    32,   201,   333,   207,   333,   202,     0,    21,
   201,   333,   202,     0,    12,   203,   333,   204,     0,    13,
   203,   333,   204,     0,    14,   203,   333,   204,     0,    15,
   203,   333,   204,     0,    16,   203,   333,   204,     0,    17,
   203,   333,   204,     0,    18,   203,   333,   204,     0,    19,
   203,   333,   204,     0,    20,   203,   333,   204,     0,    22,
   203,   333,   204,     0,    23,   203,   333,   207,   333,   204,
     0,    24,   203,   333,   204,     0,    25,   203,   333,   204,
     0,    26,   203,   333,   204,     0,    27,   203,   333,   204,
     0,    28,   203,   333,   204,     0,    29,   203,   333,   204,
     0,    30,   203,   333,   207,   333,   204,     0,    31,   203,
   333,   207,   333,   204,     0,    32,   203,   333,   207,   333,
   204,     0,    21,   203,   333,   204,     0,     3,     0,     9,
     0,    10,     0,    11,     0,     4,     0,     4,   203,   333,
   204,     0,   206,     4,   203,   204,     0,     4,   306,     0,
     4,   203,   333,   204,   306,     0,     4,   205,     4,     0,
     4,   203,   333,   204,   205,     4,     0,     4,   205,     4,
   306,     0,     4,   203,   333,   204,   205,     4,   306,     0,
   123,   201,     5,   207,   333,   202,     0,   336,     0,   191,
   335,     0,   190,   335,     0,   335,   191,   335,     0,   335,
   190,   335,     0,   208,   333,   207,   333,   207,   333,   207,
   333,   207,   333,   209,     0,   208,   333,   207,   333,   207,
   333,   207,   333,   209,     0,   208,   333,   207,   333,   207,
   333,   209,     0,   201,   333,   207,   333,   207,   333,   202,
     0,     0,   201,   338,   202,     0,     5,     0,   338,   207,
     5,     0,     0,   208,   340,   209,     0,   201,   340,   202,
     0,   341,     0,   340,   207,   341,     0,   333,     0,   342,
     0,   208,   343,   209,     0,   191,   208,   343,   209,     0,
   333,     8,   333,     0,   333,     8,   333,     8,   333,     0,
    39,   208,   333,   209,     0,   309,     0,   312,     0,   318,
     0,     4,   203,   204,     0,   191,     4,   203,   204,     0,
     4,   203,   208,   343,   209,   204,     0,   191,     4,   203,
   208,   343,   209,   204,     0,   333,     0,   342,     0,   343,
   207,   333,     0,   343,   207,   342,     0,   208,   333,   207,
   333,   207,   333,   207,   333,   209,     0,   208,   333,   207,
   333,   207,   333,   209,     0,     4,     0,     4,   205,   109,
   205,     4,     0,   208,   346,   209,     0,     4,   203,   333,
   204,   205,   110,     0,   344,     0,   346,   207,   344,     0,
     5,     0,    35,   201,   347,   207,   347,   202,     0,    36,
   201,   347,   202,     0,    34,   201,   347,   202,     0,    34,
   201,   347,   207,   343,   202,     0,    34,   201,     4,   205,
     4,   202,     0,    34,   201,     4,   203,   333,   204,   205,
     4,   202,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   167,   169,   170,   171,   176,   178,   181,   183,   186,   194,
   208,   225,   227,   230,   232,   233,   236,   242,   247,   248,
   249,   252,   256,   259,   265,   270,   276,   284,   289,   293,
   299,   304,   308,   313,   317,   320,   325,   329,   333,   337,
   342,   346,   349,   353,   357,   361,   365,   369,   373,   376,
   380,   383,   387,   390,   397,   399,   402,   404,   405,   406,
   407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
   419,   424,   440,   447,   455,   463,   464,   465,   466,   467,
   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
   478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
   488,   489,   490,   493,   496,   500,   506,   512,   515,   519,
   526,   533,   536,   540,   547,   554,   557,   561,   570,   577,
   580,   584,   593,   600,   603,   607,   616,   623,   626,   630,
   643,   650,   653,   657,   670,   677,   680,   684,   697,   704,
   707,   711,   725,   732,   735,   739,   753,   760,   763,   767,
   781,   788,   791,   795,   809,   816,   819,   823,   837,   844,
   847,   851,   865,   872,   875,   879,   903,   910,   913,   917,
   941,   948,   951,   955,   979,   986,   989,   993,  1012,  1019,
  1022,  1026,  1045,  1052,  1055,  1059,  1078,  1085,  1088,  1092,
  1110,  1117,  1120,  1124,  1142,  1149,  1152,  1156,  1174,  1181,
  1187,  1194,  1202,  1208,  1214,  1221,  1229,  1235,  1243,  1246,
  1250,  1258,  1260,  1261,  1262,  1263,  1266,  1268,  1271,  1303,
  1339,  1388,  1404,  1414,  1432,  1445,  1461,  1486,  1512,  1525,
  1541,  1554,  1570,  1589,  1611,  1620,  1634,  1654,  1670,  1689,
  1708,  1726,  1744,  1762,  1788,  1806,  1832,  1851,  1875,  1899,
  1925,  1942,  1960,  1979,  1998,  2037,  2062,  2084,  2100,  2119,
  2138,  2154,  2173,  2190,  2207,  2227,  2233,  2238,  2243,  2250,
  2252,  2253,  2256,  2261,  2265,  2281,  2297,  2313,  2333,  2347,
  2357,  2367,  2380,  2389,  2410,  2424,  2432,  2437,  2448,  2461,
  2505,  2519,  2534,  2543,  2553,  2557,  2561,  2565,  2576,  2593,
  2609,  2635,  2662,  2694,  2700,  2705,  2710,  2714,  2722,  2741,
  2757,  2773,  2778,  2794,  2799,  2815,  2820,  2838,  2861,  2884,
  2907,  2912,  2935,  2940,  2963,  2968,  2994,  3017,  3040,  3063,
  3068,  3091,  3097,  3120,  3126,  3151,  3155,  3160,  3187,  3211,
  3219,  3238,  3256,  3274,  3301,  3327,  3353,  3367,  3385,  3390,
  3399,  3401,  3402,  3403,  3404,  3407,  3409,  3410,  3411,  3412,
  3413,  3414,  3415,  3416,  3423,  3424,  3425,  3426,  3427,  3428,
  3429,  3430,  3431,  3432,  3433,  3434,  3435,  3436,  3437,  3438,
  3439,  3440,  3441,  3442,  3443,  3444,  3445,  3446,  3447,  3448,
  3449,  3450,  3451,  3452,  3453,  3454,  3456,  3457,  3458,  3459,
  3460,  3461,  3462,  3463,  3464,  3465,  3466,  3467,  3468,  3469,
  3470,  3471,  3472,  3473,  3474,  3475,  3476,  3481,  3486,  3487,
  3488,  3492,  3504,  3523,  3536,  3548,  3570,  3587,  3604,  3621,
  3638,  3644,  3649,  3653,  3657,  3661,  3667,  3672,  3676,  3680,
  3686,  3690,  3695,  3699,  3704,  3708,  3712,  3718,  3724,  3731,
  3737,  3741,  3745,  3756,  3763,  3774,  3794,  3804,  3814,  3826,
  3842,  3860,  3883,  3910,  3916,  3920,  3924,  3936,  3941,  3953,
  3959,  3979,  3984,  3997,  4003,  4009,  4014,  4022,  4036,  4040,
  4059,  4075
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic",
"tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tInterpolationScheme",
"tTime","tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds",
"tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit",
"tReturn","tCall","tFunction","tTrimmed","tShow","tHide","tGetValue","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter","tLoopSTL",
"tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","All","SignedDouble","StlFormatItems","StlFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeoFormatItems",
"GeoFormatItem","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarQuadrangleValues",
"ScalarQuadrangle","@10","VectorQuadrangleValues","VectorQuadrangle","@11","TensorQuadrangleValues",
"TensorQuadrangle","@12","ScalarTetrahedronValues","ScalarTetrahedron","@13",
"VectorTetrahedronValues","VectorTetrahedron","@14","TensorTetrahedronValues",
"TensorTetrahedron","@15","ScalarHexahedronValues","ScalarHexahedron","@16",
"VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues","TensorHexahedron",
"@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues","VectorPrism",
"@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues","ScalarPyramid",
"@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues","TensorPyramid",
"@24","Text2DValues","Text2D","@25","Text3DValues","Text3D","@26","InterpolationMatrix",
"TimeValues","Time","NumericAffectation","NumericIncrement","Affectation","Shape",
"Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   210,   210,   210,   210,   211,   211,   212,   212,   213,   213,
   213,   214,   214,   215,   215,   215,   216,   216,   216,   216,
   216,   217,   217,   217,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   219,   219,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
   221,   221,   222,   222,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   224,   224,   226,   225,   227,   227,   229,
   228,   230,   230,   232,   231,   233,   233,   235,   234,   236,
   236,   238,   237,   239,   239,   241,   240,   242,   242,   244,
   243,   245,   245,   247,   246,   248,   248,   250,   249,   251,
   251,   253,   252,   254,   254,   256,   255,   257,   257,   259,
   258,   260,   260,   262,   261,   263,   263,   265,   264,   266,
   266,   268,   267,   269,   269,   271,   270,   272,   272,   274,
   273,   275,   275,   277,   276,   278,   278,   280,   279,   281,
   281,   283,   282,   284,   284,   286,   285,   287,   287,   289,
   288,   290,   290,   292,   291,   293,   293,   295,   294,   296,
   296,   298,   297,   299,   299,   301,   300,   302,   303,   303,
   304,   305,   305,   305,   305,   305,   306,   306,   307,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   309,   309,   309,   309,   310,
   310,   310,   311,   311,   311,   311,   311,   311,   312,   312,
   313,   313,   313,   313,   314,   315,   315,   315,   315,   316,
   316,   316,   316,   316,   316,   316,   316,   316,   317,   317,
   317,   317,   317,   317,   317,   317,   317,   317,   318,   318,
   318,   319,   318,   320,   318,   321,   318,   318,   318,   318,
   322,   318,   323,   318,   324,   318,   318,   318,   318,   325,
   318,   326,   318,   327,   318,   328,   328,   329,   329,   329,
   330,   330,   330,   330,   330,   330,   330,   330,   331,   331,
   332,   332,   332,   332,   332,   333,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   335,   335,   335,   335,   335,   336,   336,   336,   336,
   337,   337,   338,   338,   339,   339,   339,   340,   340,   341,
   341,   341,   341,   342,   342,   342,   342,   342,   342,   342,
   342,   342,   342,   343,   343,   343,   343,   344,   344,   344,
   344,   345,   345,   346,   346,   347,   347,   347,   347,   347,
   347,   347
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
     8,    12,     8,     8,     8,    12,    14,    14,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     4,     6,     3,     4,     5,     3,     3,     4,     4,     3,
     7,     3,     7,     3,     2,     2,    15,     2,     6,     8,
     8,    10,     1,     2,     1,     3,     4,     1,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     1,     2,     9,     7,     2,
     6,     9,     9,     8,     8,     8,     6,     4,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     5,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     1,     1,     4,     4,     2,     5,     3,     6,     4,     7,
     6,     1,     2,     2,     3,     3,    11,     9,     7,     7,
     0,     3,     1,     3,     0,     3,     3,     1,     3,     1,
     1,     3,     4,     3,     5,     4,     1,     1,     1,     3,
     4,     6,     7,     1,     1,     3,     3,     9,     7,     1,
     5,     3,     6,     1,     3,     1,     6,     4,     4,     6,
     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   303,     0,   308,     0,   305,     0,     0,     0,     0,     0,
    56,    58,    57,    59,    60,    61,    62,    63,    64,    65,
    70,    69,    66,    67,    68,     0,     0,    17,    18,    20,
    19,    21,   441,   441,     0,   418,   422,   476,   212,   419,
   420,   421,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   213,   214,   215,
   216,     0,     0,     0,   217,   218,     0,     0,     0,     0,
     0,     0,     0,   356,     0,     0,   296,     0,   298,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   432,     0,
     0,     0,     0,     0,     0,   273,     0,     0,   273,   349,
   350,     0,     0,     0,     0,     0,     0,     0,   470,     0,
     0,     0,     0,     0,   295,     0,   304,     0,   476,   273,
     0,   273,     0,     5,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   425,     0,    75,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   422,   359,   358,   360,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   223,   292,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   290,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   422,     0,     0,     0,   457,   458,   459,   450,
     0,   451,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   434,   433,
     0,     0,     0,     0,   273,   273,     0,     0,     0,     0,
     0,     0,     0,     0,   283,     0,     0,     0,     0,   294,
     0,     0,     0,     0,     0,     0,     0,   273,     0,     0,
     0,   306,     0,     0,   286,     0,   287,     6,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   443,
     0,     0,     0,     0,     0,   427,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   357,     0,     0,   464,
   465,     0,     0,   212,     0,     0,     0,     0,     0,   219,
     0,   374,   373,   371,   372,   367,   369,   368,   370,   362,
   361,   363,   364,   365,   366,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   422,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   436,   435,   272,     0,   271,   270,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   279,   274,   348,
     0,   284,     0,   281,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   307,     0,   288,   289,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   442,     0,     0,    23,     0,   423,   429,    75,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   376,   397,   377,   398,
   378,   399,   379,   400,   380,   401,   381,   402,   382,   403,
   383,   404,   384,   405,   396,   417,   385,   406,     0,     0,
   387,   408,   388,   409,   389,   410,   390,   411,   391,   412,
   392,   413,     0,     0,     0,     0,     0,     0,     0,     0,
   479,     0,     0,   478,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   229,     0,     0,     0,     0,   424,
     0,    71,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   460,     0,     0,     0,     0,   452,   454,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   266,   268,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   444,     0,   441,     0,   426,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   423,   222,   466,   467,     0,     0,
     0,     0,     0,   224,   225,   227,     0,     0,   474,     0,
   233,   375,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   456,   461,     0,   453,     0,   240,     0,
     0,     0,     0,     0,     0,   341,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,     0,     0,     0,     0,   347,   282,     0,
     0,     0,     0,     0,   445,     0,   471,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   351,   352,   353,   354,
   355,     0,     0,     0,     0,     0,     0,     0,    22,     0,
   428,   291,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   448,     0,   209,   386,   407,   393,   414,   394,   415,   395,
   416,     0,   481,   480,   477,   431,     0,   212,     0,     0,
     0,     0,   220,     0,     0,     0,   472,    72,     0,   237,
   243,     0,   245,     0,     0,   241,     0,   242,   264,     0,
     0,   455,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   293,     0,     0,
     0,     0,   273,     0,   312,     0,   321,     0,   330,     0,
     0,     0,     0,     0,     0,   248,   249,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   441,   430,    74,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   230,     0,     0,   231,     0,   475,
     0,     0,     0,   251,   261,   462,     0,     0,   345,   254,
   255,     0,     0,     0,     0,   344,   346,   263,   238,   253,
   262,   265,     0,     0,     0,   440,     0,   439,     0,     0,
   309,     0,     0,   318,     0,     0,   327,     0,   275,   276,
   277,   278,     0,     0,   445,     0,     0,     0,     0,     0,
   469,     0,   301,   300,     0,     0,     0,     0,     0,    25,
     0,    34,     0,    38,     0,    32,     0,     0,    37,     0,
    42,    40,     0,     0,     0,     0,     0,     0,    49,     0,
     0,     0,     0,     0,    54,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   449,     0,   210,   211,     0,   221,   226,
   228,     0,   234,     0,     0,   244,   246,   463,     0,     0,
     0,   343,   342,   235,   236,   273,     0,   269,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   447,   446,     0,
     0,     0,     0,     0,     0,     0,   445,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   482,     0,   473,     0,     0,     0,
     0,     0,     0,   438,     0,     0,     0,     0,     0,     0,
     0,     0,   336,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   468,   302,     0,     0,    39,     0,
     0,     0,     0,    29,     0,    35,     0,    41,    30,    43,
     0,    46,     0,    50,    51,     0,     0,    53,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   232,     0,     0,
     0,     0,   267,     0,     0,   314,     0,   340,     0,     0,
   337,   323,     0,     0,   332,     0,     0,     0,     0,     0,
     0,   250,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   106,   110,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   202,     0,   208,     0,     0,     0,     0,   437,   310,     0,
     0,     0,   313,   319,     0,     0,   322,   328,     0,     0,
   331,   239,   252,     0,     0,   256,     0,     0,     0,     0,
     0,    33,    36,    44,     0,    45,    52,    47,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   316,     0,     0,   325,     0,   334,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   206,     0,     0,   258,   257,     0,   311,     0,     0,     0,
   320,     0,     0,   329,     0,     0,     0,     0,     0,     0,
    28,    31,     0,     0,     0,   104,     0,   108,     0,   112,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   200,     0,   297,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   315,     0,     0,   339,   324,     0,   333,     0,
     0,     0,     0,     0,     0,    48,    24,   105,   107,   109,
   111,   113,   115,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   201,   203,     0,   204,   247,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   118,   122,
   126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   317,   338,   326,   335,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   205,   207,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   260,    10,     0,     0,     0,   116,     0,   120,     0,   124,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   259,     0,    26,   117,   119,
   121,   123,   125,   127,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   130,   134,   138,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,     0,   132,     0,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   129,   131,   133,   135,   137,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   142,   146,   150,   154,
   158,   162,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    27,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   140,     0,   144,     0,   148,     0,   152,
     0,   156,     0,   160,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,   143,   145,   147,   149,   151,
   153,   155,   157,   159,   161,   163,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   194,   198,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   188,
     0,   192,     0,   196,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   189,   191,   193,   195,   197,   199,     0,     0,
     0,   178,   182,   186,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   176,     0,   180,     0,   184,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   177,   179,   181,
   183,   185,   187,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   166,   170,   174,     0,     0,     0,     0,     0,     0,
     0,   164,     0,   168,     0,   172,     0,     0,     0,     0,
     0,     0,   165,   167,   169,   171,   173,   175,     0,     0,
     0
};

static const short yydefgoto[] = {  2379,
   216,     2,     9,     3,    19,    20,    21,    22,     4,    71,
    72,    73,   448,  1695,   669,  1600,  1697,   670,  1601,  1699,
   671,  1602,  1915,   672,  1861,  1917,   673,  1862,  1919,   674,
  1863,  2051,   675,  2013,  2053,   676,  2014,  2055,   677,  2015,
  2163,   678,  2133,  2165,   679,  2134,  2167,   680,  2135,  2169,
   681,  2136,  2171,   682,  2137,  2173,   683,  2138,  2361,   684,
  2355,  2363,   685,  2356,  2365,   686,  2357,  2310,   687,  2298,
  2312,   688,  2299,  2314,   689,  2300,  2259,   690,  2241,  2261,
   691,  2242,  2263,   692,  2243,  1722,   693,  1624,  1817,   694,
  1724,   695,  1052,   696,   141,   253,    74,   579,   347,   565,
   566,   348,    78,    79,    80,    81,    82,   349,  1242,  1570,
  1678,  1245,  1575,  1682,  1248,  1579,  1685,  1432,  1433,    84,
    85,  1012,   350,   144,   369,   179,   248,   441,  1131,  1050,
  1051,   352,   502,   201,   759,   920,   145
};

static const short yypact[] = {  2709,
    60,   316,   418,  3275,-32768,-32768,-32768,   -55,-32768,   125,
   129,   135,   143,   151,   164,   -15,    -6,    10,-32768,-32768,
-32768,-32768,  2374,    77,    13,   280,   145,   149,   182,   -39,
   340,   194,   211,   380,   231,   395,   416,   432,   450,   464,
   408,   627,   311,   317,   -78,   -78,   320,    52,     8,   525,
     9,   565,   600,    37,   545,   353,   413,   -22,    11,    74,
-32768,   472,-32768,   645,-32768,   683,   691,   674,    18,    21,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    86,  3106,-32768,-32768,-32768,
-32768,-32768,   533,   533,   721,-32768,   247,    14,-32768,-32768,
-32768,-32768,   -25,   186,   217,   223,   310,   315,   323,   341,
   347,   397,   410,   421,   422,   449,   473,   497,   498,   501,
   502,   505,   506,   542,   561,   580,   587,-32768,-32768,-32768,
-32768,  2613,  2613,  2613,-32768,-32768,  2613,  1001,    38,   762,
  2613,   765,   688,-32768,   785,   797,-32768,  2613,-32768,  2613,
  2613,  2613,   610,  2613,   615,  2613,  2613,   617,  2613,   598,
   638,   665,  -137,   617,   616,   622,   672,   689,   692,   693,
   710,   919,   -78,   -78,   -78,  2613,  2613,   -71,-32768,   -69,
   -78,   675,   720,   722,   723,-32768,   617,    24,-32768,-32768,
-32768,   617,   617,   923,  2613,  2613,   -61,  2613,   726,  2613,
   724,   824,  2613,  2613,-32768,   931,-32768,   742,-32768,-32768,
   947,-32768,   948,-32768,   956,    86,   759,   775,   777,   778,
   779,   796,   798,   800,   805,   807,   808,   833,   834,   835,
   836,   837,   838,   839,   842,   843,   844,   846,   847,   848,
   849,   850,   851,   853,   855,   856,   961,   791,   862,   873,
  2613,  1054,-32768,   -78,-32768,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,    64,    67,    67,
  1076,   338,   882,   882,   882,  3034,  1077,  2408,  2262,   175,
   878,  1081,   887,   758,-32768,-32768,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,-32768,   -44,  3638, 11309, 11332, 11355,  2613, 11378,  2613,
 11401, 11424,   342,   883,  1645,  2408,-32768,-32768,-32768,   716,
  1085,-32768, 11447,  2613,  2613,  2613,  2613,  2613,  1086,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,   892,   120,-32768,-32768,
  3660,  3682,   -78,   -78,   623,   623,   157,  2613,  2613,  2613,
  2613,  2842,    44,  1089,-32768,  2613,  2864,  1090,  1091,-32768,
 11470, 11493,   989,  2613, 11516,   990,  3704,-32768,   895,   802,
 11539,-32768,  2613,  2909,-32768,  2954,-32768,-32768,    86,  1095,
  1099,  1100,  1101,  1102,  1103,  1104,  1105,  1106,  1109,  1112,
  1113,  1114,  1115,  1116,  1117,  1118,  1120,  1123,  1124,  1125,
  1126,  1127,   977,  1133,  1134,  1136,  1137,  1140,  1141,-32768,
   111,  1142,  1139,  1169, 10634,    17,   -48,  3046, 11562, 10659,
 11585, 10684, 11608, 10709, 11631, 10734, 11654, 10759, 11677, 10784,
 11700, 10809, 11723, 10834, 11746, 10859, 11769, 10884, 11792, 10909,
  3726,  3748, 11815, 10934, 11838, 10959, 11861, 10984, 11884, 11009,
 11907, 11034, 11930, 11059,  3770,  3792,  3814,  3836,  3858,  3880,
   116,   118,   968,   975,   971,  2613,-32768,   617,  2643,   716,
-32768,   511,    15,    67,  2613,  1173,  1176,    16,   978,-32768,
  1847,   403,   471,   388,   388,   287,   287,   287,   287,   329,
   329,   882,   882,   882,   882,  1175,  2408,  2613,  1177,  1178,
  1179, 11953,  1180, 11976,  1182,  1183,  1238,  2613,   407,  2408,
   514,  2613,  2613,  1186,  2402, 11999, 12022, 12045,  2607,  2613,
  2680,  2852, 12068, 12091, 12114, 12137, 12160,   991,   -78,  2613,
  2613,-32768,-32768,-32768,   974,  3309,-32768,   985,  2613,  3902,
  3924,  3946, 11084,  -126,   -42,   -34,   -63,-32768,-32768,-32768,
  2613,-32768, 11109,-32768,   992,   993,  1191,  1192,  1002, 12183,
  1197,  1003,  2613,  2976,  2613,  2613,-32768, 12206,-32768,-32768,
  1034,  1004,  1005,  1006,  1008,  1014,  1025,  1026,  1027,  1031,
  1033,  1037,  1038,  1039,  1066,  1067,  1068,  1069,  1122,  1128,
  1129,  1130,  1132,  1135,  1143,  1144,  1145,  1146,  1147,  1149,
  1150,-32768,  1205,  1041,-32768,  1151,   162,-32768,-32768,  1148,
  1158,  1161,  1163,  1195,  1198,  1200,  1209,  1219,  1220,  1221,
  1222,  1223,  1226,  1229,  1230,  1231,  1232,  1234,  1235,  1236,
  1237,  1239,  1240,  1242,  1244,  1098,  1108,  1313,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2613,  2613,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  1319,
-32768,  2408,    67,-32768,  2613, 11134,  1321,  2408,  1188,    55,
  2613,  1325,  1328,   781,-32768,  1318,  1138,    11,  1334,-32768,
  2613,-32768,   122,  3968,   -78,   617,   617,  1336,   617,  1337,
   617,   617,-32768,  2408,  2901,  1268,   520,-32768,  1960,   879,
  1185,  1339,  1391,  1419,  1440,  1441,   274,  1442,  1443,  1444,
  1445,  1446,  1447,  1448,  1452,   178,  3990,  4012,-32768,-32768,
  3094,   -78,   -78,   -78,  1454,  2408,  2408,  2408,  2408,  1036,
  1455,  2613,  2613,   617,   617,  2613,  1456,   617,  1458,  4034,
-32768,  2346,   308,  1459,  1292,  1464,  2613,  2613,   -78,  1465,
  1467,  1279,  1470,  1472,   617,   617,  1474,   -78,  1475,  1476,
   617,   617,  1477,  1478,  1479,  1480,  1482,   617,   562,   617,
  1483,  1484,  1486,  1485,  1489,-32768,  1481,   533,  1490,-32768,
  1491,  3113,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,   617,  2613,
-32768, 12229, 11159, 12252, 11184, 12275, 11209, 12298, 11234, 11259,
  1293,   163,  1294, 12321,   404,-32768,   716,-32768,    29,   355,
  1295,  1492,  1121,-32768,-32768,-32768,    11,  2613,-32768,   523,
-32768,  2984,  1495,  2613,    19,    33,    43,   617,  1496,   617,
  1497,  1499,   524,-32768,-32768,  2408,-32768,  2613,-32768,  2613,
   617,   617,   617,  1297,  1305,-32768,   391,   617,   617,   617,
   617,   617,   617,   617,   661,  2613,  2613,  2613,  1299,  -117,
  -103,   -83,-32768,   528,   532,   539,   540,-32768,-32768,  4056,
  4078,  1502,  1504, 12344,   -40,  1403,-32768,  2613,  2613,  2613,
-32768,  1304,  1344,  1307,  4100,  4122,  -106,  1308,  1314,  1331,
  1338,  1340,  1355,  1351,  1352,    -3,  1353,  1359,  1361,  1357,
  1358,  1360,  1363,  1366,  1367,  1364,-32768,-32768,-32768,-32768,
-32768,  1368,  1369,  1370,  1371,  1372,  1394,  1390,-32768,  1392,
    17,-32768,  1562,  4144,  4166,  4188,  4210,  4232,  4254,  4276,
  4298,  4320,  4342,  4364,  4386,  4408,  4430,  4452,  4474,  4496,
  4518,  4540,  4562,  4584,  4606,  4628,  4650,  4672,  4694,   543,
-32768,   547,  2984,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1393,-32768,-32768,-32768,-32768,   617,    67,  2613,  1594,
  1600,    16,-32768,  1599, 11284,    11,-32768,-32768,  4716,-32768,
-32768,   -78,-32768,   -78,  1605,-32768,  1606,-32768,-32768,  1402,
   548,  2984,  4738,  1607,  1610,  1611,  2613,  2613,  2613,  2613,
  1612,  1613,  1614,  1615,  1616,  1641,  1644,-32768,  2489,  3250,
 12367,  1362,   623,   -78,  1646,   -78,  1677,   -78,  1687,  1688,
  1689,  1691,  1693,  2613,  2613,-32768,-32768,  1695,   617,   617,
  1543,   617,  1401,   210, 12390,  2613,    86,  1697,  2613,   617,
  1698,  1702,  1700,  1515,  1703,   562,  1704,  1705,  2613,  1706,
  1708,  1709,  1710,  1711,   562,  2613,  2613,  2613,   617,  1712,
  1714,   562,  2613,  1717,  1719,  1718,  2613,   533,-32768,-32768,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,   617,  1553,  2613,  1745,
  1758,  1757,  1759,  1225,-32768,  1760,  1764,-32768,  1559,-32768,
  2613,    91,    99,-32768,-32768,-32768,  1567,  2613,-32768,-32768,
-32768,  4760,  4782,  1498,  1566,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1597,  1766,  1565,-32768,  2613,-32768,  1583,   218,
-32768,  1568,   224,-32768,  1585,   226,-32768,  1586,-32768,-32768,
-32768,-32768,  4804,  4826,   -40,   174,   551,  1587,  1669,  2613,
-32768,  2613,-32768,-32768,  4848,    86,  1573,  4870,  1589,-32768,
  1591,-32768,  1592,-32768,  1598,-32768,  1596, 12413,-32768,  1601,
-32768,-32768,  1602,  1603, 12436,  4892, 12459,  1620,-32768,  1604,
  1626,  4914,  1622,  1628,-32768,  4936,  1624,  4958,  4980,  5002,
  5024,  5046,  5068,  5090,  5112,  5134,  5156,  5178,  5200,  5222,
  5244,  5266,  5288,  5310,  5332,  5354,  5376,  5398,  5420,  5442,
  5464,  5486,  5508,-32768,   617,  2984,-32768,  1630,-32768,-32768,
-32768,    11,-32768,  1723,  5530,-32768,-32768,-32768,  5552,  2613,
  2613,-32768,-32768,-32768,-32768,   623,  2534,-32768,  1884,   312,
  1884,   312,  1884,   312,  2613,  2613,  1699,-32768,-32768,   617,
  2613,  3274,  3298,   617,    86,  1828,   -40,   562,  1834,  2613,
  1832,   562,  1833,  1837,  1836,  1838,  1839,  2613,  1841,   617,
  1842,  1843,  2613,  1840,  1844,  2613,  1849,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,   552,-32768,  1846,-32768,  2613,  1851, 12482,
 12505,  1648,  2613,-32768,  1884,  1884,  2613,  3322,   232,  1852,
  1651,   -38,-32768,  3346,   239,   -26,  3370,   244,   -24,  3394,
  3418,  1652,  1655,  1763,-32768,-32768,  1654,  1696,-32768,  1657,
  1682,  1683,  5574,-32768,  1690,-32768,  1715,-32768,-32768,-32768,
 12528,-32768,  1684,-32768,-32768, 12551,  1716,-32768, 12574,  1741,
 12597, 12620, 12643,  5596,  5618,  5640,  5662,  5684,  5706,  5728,
  5750,  5772,  5794,  5816,  5838,  5860,  5882,  5904,  5926,  5948,
  5970,  5992,  6014,  6036, 12666,  6058,  1916,-32768,  6080,  1751,
   617,   617,-32768,  3442,  3610,  1918,  2613,-32768,   617,  1953,
-32768,  1954,  2613,  1955,  1956,  2613,  1958,  1959,  1961,   617,
   617,-32768,  1963,    86,   562,   562,   562,   562,  1964,  1965,
  1966,   562,  1967,  1983,  1984,  1986,-32768,-32768,-32768,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
-32768,  2613,-32768,  2613,  1987,   617,   617,-32768,-32768,  1785,
  3466,  1787,-32768,-32768,  1788,  3490,-32768,-32768,  1789,  3514,
-32768,-32768,-32768,  1791,  1786,-32768,    86,  1792,  1793,  1799,
  1800,-32768,-32768,-32768,  1796,-32768,-32768,-32768,  1797,  1798,
  1824,  1835,  6102,  6124,  6146,  6168,  6190,  6212,  6234,  6256,
  6278,  6300,  6322,  6344,  6366,  6388,  6410,  6432,  6454,  6476,
  6498,  6520,  6542,  1845, 12689,  3538,  1801,  1999,  2036,   312,
  2038,   617,   312,  2039,   312,  2040,   617,  1861,    86,   562,
   562,  2042,  2043,   562,  2046,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,    67,
-32768,  2049,  2066,-32768,-32768,    -9,-32768,  1864,   556,    -7,
-32768,  1865,    -5,-32768,  1868,  1869,  1871,  1908,  1874,  1875,
-32768,-32768,  1881,  1882,   560,  2984,   563,  2984,   569,  2984,
  6564,  6586,  6608,  6630,  6652,  6674,  6696,  6718,  6740,  6762,
  6784,  6806,  6828,  6850,  6872,  6894,  6916,  6938,  6960,  6982,
  7004,   570,-32768,  1878,-32768,  1879,  2081,   312,   617,  2083,
  2085,   312,  2087,   312,  1989,  2613,    86,   562,   617,  2089,
  2090,  2613,  2091,  2613,  2092,  2613,  2093,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,    67,  2103,
    67,  2104,-32768,    84,  1902,-32768,-32768,   117,-32768,   294,
  1904,  7026,    86,  1906,  1907,-32768,-32768,  2984,-32768,  2984,
-32768,  2984,-32768, 12712, 12735, 12758,  7048,  7070,  7092,  7114,
  7136,  7158,  7180,  7202,  7224,  7246,  7268,  7290,  7312,  7334,
  7356,  7378,  7400,  7422,-32768,-32768,   573,-32768,-32768,  2109,
  2110,  2111,  2112,  2613,  2613,    86,   562,   617,-32768,-32768,
-32768,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,    67,
  2113,-32768,-32768,-32768,-32768,  7444,  3562,  1946,  1914,  1915,
  1937,  1947,  1948,  7466,  7488,  7510,  7532,  7554,  7576,  7598,
  7620,  7642,  7664,  7686,  7708,  7730,  7752,  7774,  7796,  7818,
  7840,-32768,-32768,  2613,  2117,  1949,   617,   562,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  3586,
-32768,-32768,  1950,  1957,   585,  2984,   588,  2984,   589,  2984,
  7862,  7884,  7906,  7928,  7950,  7972,  7994,  8016,  8038,  8060,
  8082,  8104,  8126,  8148,  8170,  8192,  8214,  8236,  2152,   617,
  2156,  2613,  2158,  2613,  2160,  2613,  2162,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,-32768,  1975,-32768,  2984,-32768,
  2984,-32768,  2984,-32768, 12781, 12804, 12827,  8258,  8280,  8302,
  8324,  8346,  8368,  8390,  8412,  8434,  8456,  8478,  8500,  8522,
  8544,  8566,   617,-32768,-32768,-32768,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  1976,  1962,  1977,  1978,  8588,  8610,  8632,  8654,  8676,
  8698,  8720,  8742,  8764,  8786,  8808,  8830,  8852,  8874,  8896,
   617,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  1980,
   592,  2984,   605,  2984,   608,  2984,  8918,  8940,  8962,  8984,
  9006,  9028,  9050,  9072,  9094,  9116,  9138,  9160,  9182,  9204,
  9226,   562,  2613,  2166,  2613,  2178,  2613,  2184,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  1990,  2984,-32768,  2984,-32768,  2984,-32768,
 12850, 12873, 12896, 12919, 12942, 12965,  9248,  9270,  9292,  9314,
  9336,  9358,  9380,  9402,  9424,  2189,-32768,-32768,-32768,-32768,
-32768,-32768,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,-32768,  1988,  1991,  1992,  1993,  1994,  2001,  9446,  9468,
  9490,  9512,  9534,  9556,  9578,  9600,  9622,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,   612,  2984,   613,  2984,   619,  2984,   620,  2984,
   624,  2984,   625,  2984,  9644,  9666,  9688,  9710,  9732,  9754,
  9776,  9798,  9820,  2613,  2191,  2613,  2192,  2613,  2204,  2613,
  2205,  2613,  2206,  2613,  2207,  2613,  2613,  2613,  2613,  2613,
  2613,  2613,  2613,  2613,  2984,-32768,  2984,-32768,  2984,-32768,
  2984,-32768,  2984,-32768,  2984,-32768,  9842,  9864,  9886,  9908,
  9930,  9952, 12988, 13011, 13034,  2613,  2613,  2613,  2613,  2613,
  2613,-32768,-32768,-32768,  9974,  9996, 10018, 10040, 10062, 10084,
  2006,  2007,  2008,  2613,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2613, 10106, 10128, 10150, 10172, 10194, 10216,   628,  2984,
   629,  2984,   677,  2984,  2613,  2613,  2613,  2613,  2613,  2613,
  2613,  2211,  2613,  2212,  2613,  2213, 10238, 10260, 10282, 13057,
 13080, 13103,  2984,-32768,  2984,-32768,  2984,-32768,  2613,  2613,
  2613,-32768,-32768,-32768, 10304, 10326, 10348,  2012,  2022,  2023,
  2613,  2613,  2613,  2613,  2613,  2613, 10370, 10392, 10414,   682,
  2984,   705,  2984,   711,  2984,  2613,  2613,  2613,  2613,  2226,
  2613,  2227,  2613,  2228, 10436, 10458, 10480,  2984,-32768,  2984,
-32768,  2984,-32768,  2613,  2613,  2613, 10502, 10524, 10546,  2613,
  2613,  2613, 10568, 10590, 10612,  2613,  2613,  2613, 13126, 13149,
 13172,-32768,-32768,-32768,  2027,  2030,  2031,  2613,  2613,  2613,
   712,  2984,   715,  2984,   718,  2984,  2613,  2235,  2613,  2243,
  2613,  2245,  2984,-32768,  2984,-32768,  2984,-32768,  2253,  2254,
-32768
};

static const short yypgoto[] = {-32768,
  -130,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1617,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -302,   -18,-32768,  2251,    -1,  -369,
  -175,     2,-32768,-32768,-32768,-32768,-32768,  2255,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1321, -1392,-32768,
-32768, -1085,   -23,-32768,   -29,-32768,   -90,-32768, -1217, -1049,
  1422,  -191,  -337,  -748,  1189,-32768,   -68
};


#define	YYLAST		13374


static const short yytable[] = {   143,
   211,   213,    76,   249,   142,    77,   568,   505,   541,   919,
   382,   185,   188,   387,   199,   178,   180,   254,   147,   757,
   197,    99,   209,   153,  1080,   209,   153,   384,  1430,   385,
  1436,   155,  1439,  1431,   404,    99,   406,  1357,  1081,  1511,
  1430,   310,  1430,  1511,   393,  1431,  1511,  1431,  1083,   580,
   581,   124,   125,   126,   124,   125,   126,  1430,   910,  1430,
  1275,  1430,  1431,   357,  1431,     5,  1431,   491,   209,  1284,
   358,   209,   373,   374,   150,   192,  1291,   202,   193,  1256,
  1257,   806,  1082,   373,   374,   409,   373,   374,   214,  1114,
   182,  1115,  1084,   183,   184,  1141,  1336,   124,   125,   126,
   124,   125,   126,  1116,  1337,  1117,   373,   374,   303,   304,
   305,   174,   175,   306,   309,    86,   501,   314,   373,   374,
   373,   374,   176,  1118,   334,  1119,   335,   336,   337,   177,
   339,    87,   341,   342,    88,   353,   375,   157,   376,   394,
    89,   373,   374,   368,   809,   370,   311,   312,    90,  1450,
  1430,   377,   371,   372,   501,  1431,    91,   526,   154,   639,
  1129,   154,   527,   911,   912,   807,   209,  1130,  1074,    92,
  1510,   391,   392,   808,   395,   256,   397,   257,   198,   400,
   401,   504,  1514,  1430,  1517,    93,   373,   374,  1431,   763,
   128,   129,   130,   131,    94,   124,   125,   126,  1150,  1727,
   751,  1731,   777,  1733,   128,   129,   130,   131,   373,   374,
    95,   135,   136,   135,   136,   186,   189,  1262,   200,   750,
   148,   255,   594,   758,   447,   210,   386,   445,   212,   492,
   493,   494,   449,   450,   451,   452,   453,   454,   455,   456,
   457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
   467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
   477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
   487,   488,   489,   490,   203,  1414,   215,   146,   601,   946,
   373,   374,  1451,  1511,   500,   149,  1455,  1511,   373,   374,
  1511,   506,  1820,   511,   512,   513,   514,   515,   516,   517,
   518,   519,   520,   521,   522,   523,   524,   525,  1676,   373,
   374,  1680,   632,  1683,   532,   980,   534,   633,   739,   741,
   740,   304,   500,   923,   742,  1822,   559,  1210,   748,   947,
   545,   546,   547,   548,   549,   501,   551,   552,   553,   554,
   555,   556,   557,   562,   563,   150,   373,   374,   501,   151,
   128,   129,   130,   131,   570,   571,   572,   573,   135,   136,
  1430,  1068,   583,   569,  1064,  1431,   859,   373,   374,   748,
   590,   135,   136,   564,   564,  1358,   567,   567,  1430,   598,
  1197,  1511,   152,  1431,   956,  1511,   258,  1511,   259,   317,
   318,   319,   320,   321,   156,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   902,   155,  1774,   373,   374,   331,
  1778,   157,  1780,   373,   374,   373,   374,   260,  1263,   261,
    10,   373,   374,   262,  1349,   263,   158,   638,   373,   374,
  1351,   159,  1353,   373,   374,   753,   933,   160,  1507,  1588,
  1589,  1590,  1591,   135,   136,  1513,  1595,  1099,  1100,   251,
  1516,   252,   167,   317,   318,   319,   320,   321,   161,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   964,   965,
   966,   967,   746,   331,   162,   304,   326,   327,   328,   329,
   330,   754,     6,     7,   752,     8,   331,   317,   318,   319,
   320,   321,   163,   322,   323,   324,   325,   326,   327,   328,
   329,   330,  1823,   500,   764,   164,   165,   331,   166,   981,
   264,   172,   265,   746,   775,   266,   500,   267,   779,   780,
   328,   329,   330,   268,   173,   269,   787,   181,   331,   796,
   128,   129,   130,   131,   135,   136,   797,   798,   135,   136,
   496,   270,   252,   271,   537,   801,   252,   272,   194,   273,
   501,   135,   136,   195,  1689,  1690,   908,   810,  1693,    11,
    12,    13,    14,    15,    16,    17,    18,   187,   861,   820,
   190,   822,   823,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   501,  1416,   319,   320,   321,   331,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   274,  1091,   275,
   135,   136,   331,   135,   136,   191,  1067,  1069,   859,   776,
   276,   252,   277,   196,   501,   501,   501,   501,   860,    96,
   343,   278,   280,   279,   281,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   282,
   205,   283,  1784,   320,   321,   344,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   168,  1108,  1109,   169,   170,
   331,   171,   204,   284,   903,   285,    44,    45,    46,    47,
    48,    49,    44,    45,    46,    47,   206,    49,  1007,  1008,
  1009,  1010,  1011,   316,   207,   892,   893,   286,   288,   287,
   289,   290,   292,   291,   293,   294,   296,   295,   297,   894,
   895,   896,   897,   898,   899,   900,   208,   748,   500,   749,
   748,   904,   778,   542,   907,   250,   748,   913,   937,  1076,
   748,  1077,  1090,   247,   748,   925,  1120,   922,   748,   127,
  1121,  1859,   298,  1239,   501,   748,   748,  1122,  1123,  1197,
   500,  1198,   746,  1199,   748,  1200,  1217,  1197,  1197,  1359,
  1497,   299,  1729,   510,  1730,   313,  1742,  1020,  1743,  1744,
   315,  1745,   960,   961,   962,  1746,  1769,  1747,  1770,  1850,
   300,  1851,   500,   500,   500,   500,   916,   301,   970,   971,
   332,  1942,   974,  1943,  1944,  1946,  1945,  1947,  2073,   987,
  2074,   333,  1914,   985,   986,   354,   132,   345,   996,   596,
   338,  2075,   134,  2076,  2077,   340,  2078,   137,  2184,  2186,
  2185,  2187,   140,   360,   346,  2188,  2190,  2189,  2191,   361,
  2192,  2194,  2193,  2195,  2271,  2273,  2272,  2274,   355,  1024,
  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1032,  1033,  1034,
  1035,  1036,  1037,  1038,  1039,  1040,  1041,  1042,  1043,  1044,
  1045,  1046,  1047,  1048,  1049,   356,  1053,   317,   318,   319,
   320,   321,   362,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   378,  2275,   939,  2276,   860,   331,  2319,   363,
  2320,  1070,   364,   365,  1075,   317,   318,   319,   320,   321,
  1079,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   366,  2321,   500,  2322,  1092,   331,  1093,  2323,  2367,  2324,
  2368,  2369,   367,  2370,  2371,   381,  2372,   379,   390,   380,
   396,   398,  1110,  1111,  1112,   399,   402,   317,   318,   319,
   320,   321,   403,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   405,   407,  1133,  1134,  1135,   331,   408,   410,
   317,   318,   319,   320,   321,   440,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   411,  1422,   412,   413,   414,
   331,   317,   318,   319,   320,   321,  2094,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   415,   442,   416,  1203,
   417,   331,  1169,    96,   302,   418,  1266,   419,   420,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   421,   422,   423,   424,   425,   426,   427,
  1234,   968,   428,   429,   430,  1204,   431,   432,   433,   434,
   435,   436,  1212,   437,  1213,   438,   439,   446,   317,   318,
   319,   320,   321,   443,   322,   323,   324,   325,   326,   327,
   328,   329,   330,  1222,  1223,  1224,  1225,  1297,   331,   444,
   495,   331,   507,   498,  1240,  1233,  1243,   508,  1246,   509,
   538,   543,   550,   558,   582,   589,   585,   586,   592,   602,
  1253,  1254,   595,   603,   604,   605,   606,   607,   608,   609,
   610,   564,  1265,   611,   567,  1268,   612,   613,   614,   615,
   616,   617,   618,   127,   619,  1278,  1073,   620,   621,   622,
   623,   624,  1285,  1286,  1287,  1365,   625,   626,   627,  1292,
   628,   629,   630,  1296,   635,   631,   634,  1298,  1299,  1300,
  1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,
  1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,
  1321,  1322,  1323,   636,   743,  1326,   744,   745,   755,   756,
   762,   760,   799,   765,   766,   767,   769,  1335,   771,   772,
   132,   133,   781,   800,  1339,   795,   134,   814,   815,   812,
   813,   137,   816,   818,   307,   825,   140,   819,   308,   856,
   826,   827,   828,  1347,   829,   317,   318,   319,   320,   321,
   830,   322,   323,   324,   325,   326,   327,   328,   329,   330,
  1331,   831,   832,   833,  1448,   331,  1362,   834,  1363,   835,
    96,   302,   857,   836,   837,   838,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
    96,   302,   839,   840,   841,   842,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   317,   318,   319,   320,   321,   889,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   890,  1420,  1421,   891,  1429,
   331,  1435,   901,  1438,   917,  1428,   906,  1434,   843,  1437,
   914,  1440,  1441,   915,   844,   845,   846,  1444,   847,   921,
   918,   848,   928,   930,   564,   941,  1453,   567,   863,   849,
   850,   851,   852,   853,  1461,   854,   855,   858,   864,  1466,
   127,   865,  1469,   866,  1471,  1472,  1473,  1474,  1475,  1476,
  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,
  1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,
   127,   909,   940,  1587,  1499,   867,   370,   942,   868,  1504,
   869,   303,   304,  1505,   317,   318,   319,   320,   321,   870,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   871,
   872,   873,   874,   875,   331,   943,   876,   132,   133,   877,
   878,   879,   880,   134,   881,   882,   883,   884,   137,   885,
   886,   773,   887,   140,   888,   774,   944,   945,   948,   949,
   950,   951,   952,   953,   954,   955,  1639,   132,   133,   963,
   969,   977,   975,   134,   983,   982,   984,   988,   137,   989,
   990,   935,   991,   140,   992,   936,   995,   997,   998,  1001,
  1002,  1003,  1004,  1571,  1005,  1014,  1019,  1017,  1015,  1576,
  1016,  1018,  1580,  1021,  1063,  1065,  1022,  1097,  1072,  1071,
  1078,  1086,  1088,  1342,  1089,  1098,  1113,  1126,  1688,  1127,
  1132,  1136,  1137,  1138,  1142,  1143,  1603,  1604,  1605,  1606,
  1607,  1608,  1609,  1610,  1611,  1612,  1613,  1614,  1615,  1616,
  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1144,  1625,  1145,
  1626,   317,   318,   319,   320,   321,  1146,   322,   323,   324,
   325,   326,   327,   328,   329,   330,  1147,  1148,  1149,  1151,
  1152,   331,  1153,  1154,  1155,  1160,  1156,  1170,  1237,  1157,
  1238,  1343,  1158,  1159,  1161,  1162,  1163,  1164,  1165,   351,
   317,   318,   319,   320,   321,   359,   322,   323,   324,   325,
   326,   327,   328,   329,   330,  1166,  1167,  1201,  1168,  1205,
   331,  1723,  1344,  1206,  1208,  1216,  1783,  1260,   383,  1261,
  1214,  1215,  1219,   388,   389,  1220,  1221,  1226,  1227,  1228,
  1229,  1230,  1696,  1698,  1700,  1701,  1702,  1703,  1704,  1705,
  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,
  1716,  1717,  1718,  1719,  1720,  1721,  1231,    96,   539,  1232,
  1258,  1241,  1826,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   317,   318,   319,
   320,   321,  1244,   322,   323,   324,   325,   326,   327,   328,
   329,   330,  1247,  1249,  1250,  1858,  1251,   331,  1252,  1267,
  1815,  1255,  1818,  1270,  1271,  1272,  1273,  1277,  1274,  1276,
  1280,  1279,  1782,  1283,  1281,  1282,  1290,  1289,  1788,  1293,
  1790,  1294,  1792,  1295,  1794,  1795,  1796,  1797,  1798,  1799,
  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,  1809,
  1810,  1811,  1812,  1813,  1814,   317,   318,   319,   320,   321,
  1327,   322,   323,   324,   325,   326,   327,   328,   329,   330,
  1325,  1328,  1329,  1334,  1330,   331,  1332,   127,  1522,  1333,
  1338,  1345,  1346,  1361,  1366,  1350,   317,   318,   319,   320,
   321,  1882,   322,   323,   324,   325,   326,   327,   328,   329,
   330,  1348,  1352,  1354,  1360,  1368,   331,  1369,  1370,  1371,
  1856,  1857,  1372,  1375,  1376,  1381,  1442,  1374,  1864,  1865,
  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
  1876,  1877,  1878,  1879,  1880,  1881,  1380,  1382,  1384,  1385,
  1387,  1415,  1417,  1449,   132,   133,  1452,  1454,  1456,  1457,
   134,  1458,  1467,  1459,  1460,   137,  1462,  1464,  1465,  1468,
   140,  1498,   540,  1470,   761,  1500,  1503,  1508,  1509,  1520,
  1910,  1521,  1523,  1525,  1524,  1916,  1918,  1920,  1921,  1922,
  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,
  1933,  1934,  1935,  1936,  1937,  1938,    96,   302,  1526,  1527,
  1532,  1529,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,  1530,  1534,  1969,   747,
  1971,  1563,  1973,  1569,  1975,  1976,  1977,  1978,  1979,  1980,
  1981,  1982,  1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,
  1991,  1992,   317,   318,   319,   320,   321,  1536,   322,   323,
   324,   325,   326,   327,   328,   329,   330,  1565,  1573,  1574,
  1577,  1578,   331,  1581,  1582,  1687,  1583,   938,  1586,  1592,
  1593,  1594,  1596,  2016,  2017,  2018,  2019,  2020,  2021,  2022,
  2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  1597,  1598,
  1599,  1627,  1630,  1632,  1638,  1633,  1635,  1637,  1640,  1641,
  1642,  1643,  1644,  1645,  1674,  1646,   127,  1673,  2052,  2054,
  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,
  2066,  2067,  2068,  2069,  2070,  2071,   317,   318,   319,   320,
   321,  1647,   322,   323,   324,   325,   326,   327,   328,   329,
   330,  1675,  1648,  1677,  1681,  1684,   331,  1691,  1692,  2095,
  1694,  2097,  1670,  2099,  1725,  2101,  2102,  2103,  2104,  2105,
  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,
  1726,  1728,  1732,  1425,  1426,  1734,  1737,  1735,  1736,   134,
  1738,  1739,  1740,  1741,  1427,  1771,  1773,  1772,  1776,   140,
  1777,   177,  1779,  1781,  1786,  1787,  1789,  1791,  1793,  2139,
  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,  1816,  1819,
  1821,  1824,  1827,  1828,  1852,  1853,  1854,  1855,  1883,  1886,
  1887,  1888,  1911,  1912,  2164,  2166,  2168,  2170,  2172,  2174,
  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,   317,
   318,   319,   320,   321,  1889,   322,   323,   324,   325,   326,
   327,   328,   329,   330,  1890,  1891,  1940,  1966,  1941,   331,
  2205,  1968,  2207,  1970,  2209,  1972,  2211,  1974,  2213,  2032,
  2215,  2096,  2217,  2218,  2219,  2220,  2221,  2222,  2223,  2224,
  2225,  1993,  2031,  2098,  2033,  2034,  2072,   926,   927,  2100,
   929,  2116,   931,   932,  2132,  2148,  2206,  2208,  2149,  2150,
  2151,  2152,  2235,  2236,  2237,  2238,  2239,  2240,  2153,  2210,
  2212,  2214,  2216,  2250,  2251,  2252,  2284,  2286,  2288,  2304,
  2253,  2254,  2255,  2256,  2257,  2258,  2260,  2262,  2264,  2305,
  2306,  2329,  2331,  2333,  2358,   972,   973,  2359,  2360,   976,
  2374,  2277,  2278,  2279,  2280,  2281,  2282,  2283,  2376,  2285,
  2378,  2287,  2380,  2381,    75,   862,   993,   994,    83,     0,
  1207,     0,   999,  1000,     0,  2295,  2296,  2297,     0,  1006,
     0,  1013,     0,     0,     0,     0,     0,  2307,  2308,  2309,
  2311,  2313,  2315,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  2325,  2326,  2327,  2328,     0,  2330,     0,  2332,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  2337,  2338,  2339,     0,     0,     0,  2343,  2344,  2345,     0,
     0,     0,  2349,  2350,  2351,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  2362,  2364,  2366,     0,     0,     0,
     0,     0,     0,  2373,     0,  2375,     0,  2377,     0,  1085,
     0,  1087,     0,   979,     0,     0,     0,     0,     0,     0,
     0,     0,  1094,  1095,  1096,     0,     0,     0,     0,  1101,
  1102,  1103,  1104,  1105,  1106,  1107,    96,    97,    98,     0,
    99,     0,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,     0,   124,   125,   126,
    96,   343,     0,     0,     0,     0,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     0,   317,   318,   319,   320,   321,   344,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,     0,     0,   503,     0,    44,    45,    46,
    47,    48,    49,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1202,     0,
     0,    96,   302,   209,     0,     0,   127,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,     0,   124,   125,   126,   317,   318,   319,   320,   321,
   127,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,     0,     0,   128,
   129,   130,   131,  1259,     0,     0,     0,     0,     0,     0,
     0,  1269,     0,   132,   133,     0,     0,     0,     0,   134,
   135,   136,     0,     0,   137,     0,   138,     0,   139,   140,
  1288,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,   132,   499,     0,
     0,   331,     0,   134,     0,     0,     0,     0,   137,     0,
   782,   127,     0,   140,     0,    96,   302,     0,  1324,     0,
     0,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    96,   539,     0,     0,     0,
     0,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,     0,     0,     0,   132,   133,
     0,     0,     0,     0,   134,     0,     0,     0,     0,   137,
     0,     0,     0,     0,   140,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    -7,     1,
     0,   -12,   -55,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   127,     0,     0,     0,     0,
  1423,   -55,  1424,     0,     0,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,   127,     0,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,
     0,  1443,     0,     0,     0,  1447,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,  1463,   132,   133,     0,     0,   331,     0,   134,   -55,
   -55,   -55,   -55,   137,     0,   786,     0,   -55,   140,   -55,
     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,     0,   132,   133,     0,     0,     0,     0,   134,     0,
     0,     0,     0,   137,     0,     0,     0,     0,   140,     0,
   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,     0,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,    -7,    -7,     0,    -7,   331,
   574,    28,    29,   575,   576,    32,   577,    34,   788,    35,
     0,    37,    38,    39,     0,    41,    42,     0,     0,     0,
     0,     0,   574,    28,    29,   575,   576,    32,   577,    34,
     0,    35,    54,    37,    38,    39,     0,    41,    42,     0,
     0,     0,  1566,  1567,     0,     0,     0,     0,     0,     0,
  1572,     0,     0,     0,    54,     0,     0,     0,     0,     0,
     0,  1584,  1585,    56,    57,    58,     0,   574,    28,    29,
   575,   576,    32,   577,    34,     0,    35,     0,    37,    38,
    39,    68,    41,    42,     0,    56,    57,    58,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
     0,     0,     0,    68,     0,     0,     0,  1628,  1629,     0,
     0,     0,   574,    28,    29,   575,   576,    32,   577,    34,
     0,    35,     0,    37,    38,    39,     0,    41,    42,     0,
    56,    57,    58,     0,   574,    28,    29,   575,   576,    32,
   577,    34,     0,    35,    54,    37,    38,    39,    68,    41,
    42,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,    54,     0,     0,     0,
   578,   331,     0,  1679,     0,    56,    57,    58,  1686,     0,
   789,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   584,    68,     0,     0,     0,    56,    57,    58,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,    68,     0,     0,     0,     0,
   331,     0,     0,     0,     0,     0,     0,     0,     0,   934,
     0,     0,     0,     0,     0,     0,     0,   599,   640,   641,
   642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
   652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
   662,   663,   664,   665,   666,   667,     0,   217,     0,     0,
  1775,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1785,     0,   600,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,   821,   640,   641,   642,   643,   644,
   645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
   655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
   665,   666,   667,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,   218,
   219,   220,     0,   331,     0,   497,     0,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   230,     0,     0,  1860,
     0,     0,     0,     0,   668,   231,   232,   233,   234,   235,
   236,   237,   238,   239,   240,     0,   241,   242,   243,   244,
   245,   246,     0,   317,   318,   319,   320,   321,    23,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,     0,     0,     0,
     0,     0,   959,     0,     0,     0,     0,    24,  1913,     0,
     0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,  1023,    35,    36,    37,    38,    39,    40,    41,    42,
     0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
     0,    50,    51,    52,    53,    54,     0,   574,    28,    29,
   575,   576,    32,   577,    34,     0,    35,     0,    37,    38,
    39,  1967,    41,    42,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    54,
     0,     0,     0,    59,     0,    60,     0,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    56,    57,    58,     0,  2012,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    68,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,     0,  2050,   317,   318,   319,   320,   321,  1235,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   317,   318,   319,
   320,   321,  1445,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,     0,
     0,   317,   318,   319,   320,   321,  1446,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,     0,     0,   317,   318,   319,   320,   321,
  1506,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,     0,     0,   317,
   318,   319,   320,   321,  1512,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,     0,     0,   317,   318,   319,   320,   321,  1515,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   317,   318,   319,
   320,   321,  1518,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,     0,
     0,   317,   318,   319,   320,   321,  1519,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,     0,     0,   317,   318,   319,   320,   321,
  1568,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,     0,     0,   317,
   318,   319,   320,   321,  1631,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,     0,     0,   317,   318,   319,   320,   321,  1634,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   317,   318,   319,
   320,   321,  1636,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,     0,
     0,   317,   318,   319,   320,   321,  1672,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,     0,     0,   317,   318,   319,   320,   321,
  1885,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,     0,     0,   317,
   318,   319,   320,   321,  1939,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   497,     0,     0,     0,     0,   560,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,   528,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,   560,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,   561,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
   593,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,   719,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,   720,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,   733,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,   734,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
   735,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,   736,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,   737,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,   738,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,   802,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
   803,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,   804,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,   924,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,   957,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,   958,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
   978,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1124,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1125,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1139,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1140,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1171,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1172,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1173,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1174,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1175,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1176,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1177,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1178,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1179,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1180,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1181,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1182,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1183,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1184,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1185,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1186,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1187,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1188,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1189,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1190,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1191,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1192,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1193,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1194,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1195,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1196,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1211,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1218,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1340,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1341,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1355,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1356,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1364,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1367,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1378,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1383,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1386,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1388,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1389,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1390,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1391,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1392,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1393,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1394,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1395,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1396,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1397,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1398,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1399,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1400,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1401,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1402,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1403,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1404,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1405,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1406,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1407,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1408,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1409,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1410,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1411,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1412,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1413,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1418,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1419,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1528,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1540,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1541,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1542,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1543,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1544,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1545,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1546,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1547,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1548,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1549,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1550,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1551,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1552,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1553,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1554,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1555,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1556,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1557,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1558,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1559,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1560,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1562,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1564,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1649,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1650,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1651,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1652,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1653,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1654,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1655,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1656,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1657,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1658,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1659,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1660,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1661,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1662,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1663,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1664,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1665,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1666,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1667,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1668,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1669,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1748,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1749,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1750,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1751,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1752,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1753,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1754,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1755,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1756,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1757,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1758,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1759,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1760,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1761,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1762,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1763,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1764,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1765,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1766,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1767,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1768,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1825,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1832,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1833,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1834,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1835,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1836,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1837,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1838,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1839,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1840,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1841,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1842,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1843,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1844,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1845,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1846,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1847,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1848,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1849,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1884,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1892,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1893,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1894,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1895,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1896,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1897,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1898,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1899,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1900,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1901,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1902,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1903,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1904,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1905,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1906,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1907,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1908,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1909,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1948,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1949,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1950,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1951,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1952,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1953,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1954,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1955,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1956,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1957,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1958,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1959,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1960,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1961,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1962,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1963,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  1964,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  1965,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  1997,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  1998,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  1999,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2000,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2001,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2002,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2003,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2004,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2005,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2006,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2007,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2008,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2009,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2010,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2011,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2035,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2036,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2037,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2038,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2039,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2040,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2041,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2042,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2043,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2044,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2045,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2046,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2047,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2048,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2049,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2079,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2080,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2081,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2082,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2083,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2084,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2085,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2086,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2087,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2088,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2089,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2090,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2091,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2092,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2093,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2123,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2124,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2125,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2126,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2127,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2128,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2129,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2130,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2131,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2154,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2155,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2156,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2157,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2158,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2159,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2160,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2161,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2162,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2196,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2197,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2198,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2199,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2200,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2201,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2202,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2203,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2204,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2226,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2227,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2228,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2229,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2230,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2231,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2244,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2245,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2246,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2247,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2248,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2249,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2265,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2266,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2267,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2268,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2269,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2270,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2289,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2290,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2291,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2301,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2302,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2303,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2316,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2317,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2318,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2334,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2335,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2336,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2340,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   317,   318,   319,   320,   321,
  2341,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   317,   318,   319,
   320,   321,  2342,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   317,
   318,   319,   320,   321,  2346,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   317,   318,   319,   320,   321,  2347,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   317,   318,   319,   320,   321,  2348,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   637,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   698,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   700,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   702,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   704,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   706,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   708,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   710,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   712,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   714,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   716,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   718,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   722,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   724,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   726,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   728,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   730,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   732,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   805,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,   811,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,   905,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,  1055,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,  1057,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,  1059,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,  1061,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
     0,     0,  1062,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,     0,     0,  1209,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
   529,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   530,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,   531,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   533,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,   535,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   536,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,   544,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   587,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,   588,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   591,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
   597,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   697,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,   699,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   701,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,   703,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   705,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,   707,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   709,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,   711,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   713,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
   715,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   717,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,   721,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   723,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,   725,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   727,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,   729,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   731,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,   768,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   770,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
   783,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,   784,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,   785,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,   790,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,   791,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,   792,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,   793,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,   794,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,   817,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,   824,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
  1054,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,  1056,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,  1058,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,  1060,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,  1066,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,  1128,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,  1236,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,  1264,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,  1373,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,  1377,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
  1379,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,  1501,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,  1502,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,  1531,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,  1533,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,  1535,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,  1537,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,  1538,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,  1539,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,  1561,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
  1671,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,  1829,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,  1830,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,  1831,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,  1994,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,  1995,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,  1996,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,  2117,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,  2118,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,  2119,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
  2120,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,  2121,   317,   318,   319,   320,   321,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     0,     0,     0,     0,   331,     0,  2122,   317,   318,   319,
   320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,     0,     0,     0,     0,     0,   331,     0,  2232,
   317,   318,   319,   320,   321,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,     0,     0,     0,     0,     0,
   331,     0,  2233,   317,   318,   319,   320,   321,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,     0,     0,
     0,     0,     0,   331,     0,  2234,   317,   318,   319,   320,
   321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,     0,     0,     0,     0,     0,   331,     0,  2292,   317,
   318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,     0,     0,     0,     0,     0,   331,
     0,  2293,   317,   318,   319,   320,   321,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,     0,     0,     0,
     0,     0,   331,     0,  2294,   317,   318,   319,   320,   321,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,     0,     0,     0,     0,   331,     0,  2352,   317,   318,
   319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,     0,     0,     0,     0,     0,   331,     0,
  2353,   317,   318,   319,   320,   321,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,     0,     0,     0,     0,
     0,   331,     0,  2354
};

static const short yycheck[] = {    23,
    69,    70,     4,    94,    23,     4,   376,   310,   346,   758,
   186,     4,     4,   189,     4,    45,    46,     4,     6,     4,
    43,     7,     5,    66,     6,     5,    66,     4,    67,     6,
  1352,    66,  1354,    72,   210,     7,   212,  1255,     6,  1432,
    67,     4,    67,  1436,   106,    72,  1439,    72,     6,     6,
     7,    34,    35,    36,    34,    35,    36,    67,     4,    67,
  1146,    67,    72,   201,    72,     6,    72,     4,     5,  1155,
   208,     5,   190,   191,   201,    39,  1162,     4,    42,  1129,
  1130,   208,    50,   190,   191,   216,   190,   191,     3,   207,
    39,   209,    50,    42,    43,   202,     6,    34,    35,    36,
    34,    35,    36,   207,     6,   209,   190,   191,   132,   133,
   134,   190,   191,   137,   138,   171,   308,   141,   190,   191,
   190,   191,   201,   207,   148,   209,   150,   151,   152,   208,
   154,     7,   156,   157,     6,   159,   208,   201,   208,   201,
     6,   190,   191,   173,   208,   175,   109,   110,     6,  1367,
    67,   181,   176,   177,   346,    72,     6,   202,   201,   208,
   201,   201,   207,   109,   110,   208,     5,   208,   917,     6,
   209,   195,   196,   208,   198,   201,   200,   203,   201,   203,
   204,     7,   209,    67,   209,   201,   190,   191,    72,   527,
   176,   177,   178,   179,   201,    34,    35,    36,   202,   209,
   503,   209,   540,   209,   176,   177,   178,   179,   190,   191,
   201,   197,   198,   197,   198,   208,   208,     8,   208,   205,
   208,   208,   398,   208,   254,   208,   203,   251,   208,   298,
   299,   300,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   201,  1325,   191,   201,   409,     6,
   190,   191,  1368,  1676,   308,     6,  1372,  1680,   190,   191,
  1683,   310,   209,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,  1630,   190,
   191,  1633,   202,  1635,   338,     8,   340,   207,   203,   202,
   205,   345,   346,   202,   207,   209,   207,  1076,   207,    56,
   354,   355,   356,   357,   358,   527,   360,   361,   362,   363,
   364,   365,   366,   373,   374,   201,   190,   191,   540,   201,
   176,   177,   178,   179,   378,   379,   380,   381,   197,   198,
    67,     7,   386,   207,   202,    72,   205,   190,   191,   207,
   394,   197,   198,   375,   376,   202,   375,   376,    67,   403,
   207,  1774,   201,    72,   207,  1778,   201,  1780,   203,   180,
   181,   182,   183,   184,   201,   186,   187,   188,   189,   190,
   191,   192,   193,   194,   742,    66,  1728,   190,   191,   200,
  1732,   201,  1734,   190,   191,   190,   191,   201,   209,   203,
     3,   190,   191,   201,   207,   203,    47,   446,   190,   191,
   207,   201,   207,   190,   191,   504,   774,    43,   207,  1525,
  1526,  1527,  1528,   197,   198,   207,  1532,    57,    58,   203,
   207,   205,    45,   180,   181,   182,   183,   184,    43,   186,
   187,   188,   189,   190,   191,   192,   193,   194,   806,   807,
   808,   809,   496,   200,    43,   499,   190,   191,   192,   193,
   194,   505,   167,   168,   503,   170,   200,   180,   181,   182,
   183,   184,    43,   186,   187,   188,   189,   190,   191,   192,
   193,   194,   209,   527,   528,    42,    43,   200,    45,   202,
   201,   201,   203,   537,   538,   201,   540,   203,   542,   543,
   192,   193,   194,   201,   208,   203,   550,   208,   200,   559,
   176,   177,   178,   179,   197,   198,   560,   561,   197,   198,
   203,   201,   205,   203,   203,   569,   205,   201,     4,   203,
   742,   197,   198,   201,  1640,  1641,   748,   581,  1644,   142,
   143,   144,   145,   146,   147,   148,   149,    43,   637,   593,
     6,   595,   596,   186,   187,   188,   189,   190,   191,   192,
   193,   194,   774,  1332,   182,   183,   184,   200,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   201,   936,   203,
   197,   198,   200,   197,   198,     6,   909,   910,   205,   203,
   201,   205,   203,   201,   806,   807,   808,   809,   637,     3,
     4,   201,   201,   203,   203,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   201,
     6,   203,  1738,   183,   184,    39,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    39,     6,     7,    42,    43,
   200,    45,   201,   201,   743,   203,    60,    61,    62,    63,
    64,    65,    60,    61,    62,    63,     4,    65,   127,   128,
   129,   130,   131,     6,     4,   719,   720,   201,   201,   203,
   203,   201,   201,   203,   203,   201,   201,   203,   203,   733,
   734,   735,   736,   737,   738,   739,    43,   207,   742,   209,
   207,   745,   209,     8,   748,     5,   207,   751,   209,   207,
   207,   209,   209,   201,   207,   765,   209,   761,   207,   123,
   209,  1827,   201,  1113,   936,   207,   207,   209,   209,   207,
   774,   209,   776,   207,   207,   209,   209,   207,   207,   209,
   209,   201,   207,     6,   209,     4,   207,   858,   209,   207,
     6,   209,   802,   803,   804,   207,   207,   209,   209,   207,
   201,   209,   806,   807,   808,   809,     6,   201,   812,   813,
     6,   207,   816,   209,   207,   207,   209,   209,   207,   829,
   209,     5,  1888,   827,   828,   208,   190,   191,   838,     8,
   201,   207,   196,   209,   207,   201,   209,   201,   207,   207,
   209,   209,   206,   208,   208,   207,   207,   209,   209,   208,
   207,   207,   209,   209,   207,   207,   209,   209,   201,   863,
   864,   865,   866,   867,   868,   869,   870,   871,   872,   873,
   874,   875,   876,   877,   878,   879,   880,   881,   882,   883,
   884,   885,   886,   887,   888,   201,   890,   180,   181,   182,
   183,   184,   201,   186,   187,   188,   189,   190,   191,   192,
   193,   194,   208,   207,     6,   209,   905,   200,   207,   201,
   209,   910,   201,   201,   918,   180,   181,   182,   183,   184,
   924,   186,   187,   188,   189,   190,   191,   192,   193,   194,
   201,   207,   936,   209,   938,   200,   940,   207,   207,   209,
   209,   207,     4,   209,   207,   203,   209,   208,     6,   208,
   205,   208,   956,   957,   958,   112,     6,   180,   181,   182,
   183,   184,   201,   186,   187,   188,   189,   190,   191,   192,
   193,   194,     6,     6,   978,   979,   980,   200,     3,   201,
   180,   181,   182,   183,   184,     5,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   201,  1346,   201,   201,   201,
   200,   180,   181,   182,   183,   184,  2072,   186,   187,   188,
   189,   190,   191,   192,   193,   194,   201,   207,   201,  1068,
   201,   200,  1021,     3,     4,   201,  1137,   201,   201,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   201,   201,   201,   201,   201,   201,   201,
  1109,     6,   201,   201,   201,  1069,   201,   201,   201,   201,
   201,   201,  1082,   201,  1084,   201,   201,     4,   180,   181,
   182,   183,   184,   202,   186,   187,   188,   189,   190,   191,
   192,   193,   194,  1097,  1098,  1099,  1100,  1168,   200,   207,
     5,   200,   205,     7,  1114,  1109,  1116,     7,  1118,   203,
   208,     7,     7,   202,     6,   107,     7,     7,   109,     5,
  1124,  1125,   208,     5,     5,     5,     5,     5,     5,     5,
     5,  1113,  1136,     5,  1113,  1139,     5,     5,     5,     5,
     5,     5,     5,   123,     5,  1149,     6,     5,     5,     5,
     5,     5,  1156,  1157,  1158,  1266,   160,     5,     5,  1163,
     5,     5,     3,  1167,     6,     5,     5,  1171,  1172,  1173,
  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,
  1194,  1195,  1196,     5,   207,  1199,   202,   207,     6,     4,
     6,   204,   209,     7,     7,     7,     7,  1211,     7,     7,
   190,   191,     7,   209,  1218,   205,   196,     7,     7,   208,
   208,   201,   201,     7,   204,   172,   206,   205,   208,     5,
   207,   207,   207,  1237,   207,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     6,   207,   207,   207,  1365,   200,  1260,   207,  1262,   207,
     3,     4,   202,   207,   207,   207,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     3,     4,   207,   207,   207,   207,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   180,   181,   182,   183,   184,   208,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   208,  1340,  1341,     6,  1349,
   200,  1351,     4,  1353,     7,  1349,     6,  1351,   207,  1353,
     6,  1355,  1356,     6,   207,   207,   207,  1361,   207,     6,
   203,   207,     7,     7,  1346,     7,  1370,  1346,   201,   207,
   207,   207,   207,   207,  1378,   207,   207,   207,   201,  1383,
   123,   201,  1386,   201,  1388,  1389,  1390,  1391,  1392,  1393,
  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,
  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
   123,   204,   208,  1524,  1418,   201,  1426,     7,   201,  1423,
   201,  1425,  1426,  1427,   180,   181,   182,   183,   184,   201,
   186,   187,   188,   189,   190,   191,   192,   193,   194,   201,
   201,   201,   201,   201,   200,     7,   201,   190,   191,   201,
   201,   201,   201,   196,   201,   201,   201,   201,   201,   201,
   201,   204,   201,   206,   201,   208,     7,     7,     7,     7,
     7,     7,     7,     7,     7,     4,  1587,   190,   191,     6,
     6,     4,     7,   196,   173,     7,     3,     3,   201,     3,
   192,   204,     3,   206,     3,   208,     3,     3,     3,     3,
     3,     3,     3,  1507,     3,     3,     6,     3,     5,  1513,
     5,     3,  1516,     4,   202,   202,     6,   201,     7,   205,
     6,     6,     6,     6,     6,   201,   208,     6,  1639,     6,
   108,   208,   169,   207,   207,   202,  1540,  1541,  1542,  1543,
  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,  1553,
  1554,  1555,  1556,  1557,  1558,  1559,  1560,   207,  1562,   202,
  1564,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,   202,   207,   207,   207,
   202,   200,   202,   207,   207,   202,   207,     6,   207,   207,
   209,     6,   207,   207,   207,   207,   207,   207,   207,   158,
   180,   181,   182,   183,   184,   164,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   202,   207,   205,   207,     6,
   200,  1670,     6,     4,     6,   204,  1737,   207,   187,   209,
     6,     6,     6,   192,   193,     6,     6,     6,     6,     6,
     6,     6,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
  1664,  1665,  1666,  1667,  1668,  1669,     6,     3,     4,     6,
   108,     6,  1783,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   180,   181,   182,
   183,   184,     6,   186,   187,   188,   189,   190,   191,   192,
   193,   194,     6,     6,     6,  1826,     6,   200,     6,     3,
  1769,     7,  1771,     6,     3,     6,   192,     3,     6,     6,
     3,     6,  1736,     3,     6,     6,     3,     6,  1742,     3,
  1744,     3,  1746,     6,  1748,  1749,  1750,  1751,  1752,  1753,
  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,
  1764,  1765,  1766,  1767,  1768,   180,   181,   182,   183,   184,
     6,   186,   187,   188,   189,   190,   191,   192,   193,   194,
   208,     4,     6,   205,     6,   200,     7,   123,     6,     6,
   204,     6,   208,   105,   202,   208,   180,   181,   182,   183,
   184,  1850,   186,   187,   188,   189,   190,   191,   192,   193,
   194,   209,   208,   208,   208,   207,   200,   207,   207,   202,
  1824,  1825,   207,   202,   202,   202,   108,   207,  1832,  1833,
  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
  1844,  1845,  1846,  1847,  1848,  1849,   207,   202,   207,   202,
   207,   202,   110,     6,   190,   191,     3,     6,     6,     3,
   196,     6,     3,     6,     6,   201,     6,     6,     6,     6,
   206,     6,   208,     5,     8,     5,   209,     6,   208,   208,
  1884,   207,   209,   207,   169,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
  1904,  1905,  1906,  1907,  1908,  1909,     3,     4,   207,   207,
   207,   202,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   202,   202,  1942,   498,
  1944,     6,  1946,     6,  1948,  1949,  1950,  1951,  1952,  1953,
  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,   180,   181,   182,   183,   184,   207,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   207,     6,     6,
     6,     6,   200,     6,     6,   105,     6,     8,     6,     6,
     6,     6,     6,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,     6,     6,
     5,     5,   208,   207,   209,   208,   208,   207,   207,   207,
   202,   202,   207,   207,     6,   208,   123,   207,  2032,  2033,
  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,
  2044,  2045,  2046,  2047,  2048,  2049,   180,   181,   182,   183,
   184,   208,   186,   187,   188,   189,   190,   191,   192,   193,
   194,     6,   208,     6,     6,     6,   200,     6,     6,  2073,
     5,  2075,   208,  2077,     6,  2079,  2080,  2081,  2082,  2083,
  2084,  2085,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
     5,   208,   208,   190,   191,   208,   169,   209,   208,   196,
   207,   207,   202,   202,   201,   208,     6,   209,     6,   206,
     6,   208,     6,   105,     6,     6,     6,     6,     6,  2123,
  2124,  2125,  2126,  2127,  2128,  2129,  2130,  2131,     6,     6,
   209,   208,   207,   207,     6,     6,     6,     6,     6,   174,
   207,   207,     6,   175,  2148,  2149,  2150,  2151,  2152,  2153,
  2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,   180,
   181,   182,   183,   184,   208,   186,   187,   188,   189,   190,
   191,   192,   193,   194,   208,   208,   207,     6,   202,   200,
  2184,     6,  2186,     6,  2188,     6,  2190,     6,  2192,   208,
  2194,     6,  2196,  2197,  2198,  2199,  2200,  2201,  2202,  2203,
  2204,   207,   207,     6,   208,   208,   207,   766,   767,     6,
   769,   202,   771,   772,     6,   208,     6,     6,   208,   208,
   208,   208,  2226,  2227,  2228,  2229,  2230,  2231,   208,     6,
     6,     6,     6,   208,   208,   208,     6,     6,     6,   208,
  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,   208,
   208,     6,     6,     6,   208,   814,   815,   208,   208,   818,
     6,  2265,  2266,  2267,  2268,  2269,  2270,  2271,     6,  2273,
     6,  2275,     0,     0,     4,   639,   835,   836,     4,    -1,
  1072,    -1,   841,   842,    -1,  2289,  2290,  2291,    -1,   848,
    -1,   850,    -1,    -1,    -1,    -1,    -1,  2301,  2302,  2303,
  2304,  2305,  2306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  2316,  2317,  2318,  2319,    -1,  2321,    -1,  2323,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  2334,  2335,  2336,    -1,    -1,    -1,  2340,  2341,  2342,    -1,
    -1,    -1,  2346,  2347,  2348,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  2358,  2359,  2360,    -1,    -1,    -1,
    -1,    -1,    -1,  2367,    -1,  2369,    -1,  2371,    -1,   928,
    -1,   930,    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   941,   942,   943,    -1,    -1,    -1,    -1,   948,
   949,   950,   951,   952,   953,   954,     3,     4,     5,    -1,
     7,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,   180,   181,   182,   183,   184,    39,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,    -1,    -1,   204,    -1,    60,    61,    62,
    63,    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1067,    -1,
    -1,     3,     4,     5,    -1,    -1,   123,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,   180,   181,   182,   183,   184,
   123,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   176,
   177,   178,   179,  1132,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1140,    -1,   190,   191,    -1,    -1,    -1,    -1,   196,
   197,   198,    -1,    -1,   201,    -1,   203,    -1,   205,   206,
  1159,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,   190,   191,    -1,
    -1,   200,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,
   209,   123,    -1,   206,    -1,     3,     4,    -1,  1197,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,   190,   191,
    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
    -1,     3,     4,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   123,    -1,    -1,    -1,    -1,
   207,    33,   209,    -1,    -1,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
    52,    53,    54,    55,    -1,   123,    -1,    59,    60,    61,
    62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
    -1,  1360,    -1,    -1,    -1,  1364,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,  1380,   190,   191,    -1,    -1,   200,    -1,   196,   101,
   102,   103,   104,   201,    -1,   209,    -1,   109,   206,   111,
    -1,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,    -1,   190,   191,    -1,    -1,    -1,    -1,   196,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,   206,    -1,
   142,   143,   144,   145,   146,   147,   148,   149,    -1,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,   167,   168,    -1,   170,   200,
    39,    40,    41,    42,    43,    44,    45,    46,   209,    48,
    -1,    50,    51,    52,    -1,    54,    55,    -1,    -1,    -1,
    -1,    -1,    39,    40,    41,    42,    43,    44,    45,    46,
    -1,    48,    71,    50,    51,    52,    -1,    54,    55,    -1,
    -1,    -1,  1501,  1502,    -1,    -1,    -1,    -1,    -1,    -1,
  1509,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
    -1,  1520,  1521,   102,   103,   104,    -1,    39,    40,    41,
    42,    43,    44,    45,    46,    -1,    48,    -1,    50,    51,
    52,   120,    54,    55,    -1,   102,   103,   104,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    -1,    -1,    -1,   120,    -1,    -1,    -1,  1566,  1567,    -1,
    -1,    -1,    39,    40,    41,    42,    43,    44,    45,    46,
    -1,    48,    -1,    50,    51,    52,    -1,    54,    55,    -1,
   102,   103,   104,    -1,    39,    40,    41,    42,    43,    44,
    45,    46,    -1,    48,    71,    50,    51,    52,   120,    54,
    55,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    71,    -1,    -1,    -1,
   209,   200,    -1,  1632,    -1,   102,   103,   104,  1637,    -1,
   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   209,   120,    -1,    -1,    -1,   102,   103,   104,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   120,    -1,    -1,    -1,    -1,
   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,    -1,    42,    -1,    -1,
  1729,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1739,    -1,   209,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,   209,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,   124,
   125,   126,    -1,   200,    -1,   202,    -1,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,    -1,    -1,  1828,
    -1,    -1,    -1,    -1,   209,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
   165,   166,    -1,   180,   181,   182,   183,   184,     4,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   209,    -1,    -1,    -1,    -1,    33,  1887,    -1,
    -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,   209,    48,    49,    50,    51,    52,    53,    54,    55,
    -1,    -1,    -1,    59,    60,    61,    62,    63,    64,    65,
    -1,    67,    68,    69,    70,    71,    -1,    39,    40,    41,
    42,    43,    44,    45,    46,    -1,    48,    -1,    50,    51,
    52,  1940,    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,    71,
    -1,    -1,    -1,   109,    -1,   111,    -1,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   102,   103,   104,    -1,  1993,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,    -1,  2031,   180,   181,   182,   183,   184,   209,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   180,   181,   182,
   183,   184,   209,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
    -1,   180,   181,   182,   183,   184,   209,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,    -1,    -1,   180,   181,   182,   183,   184,
   209,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   180,
   181,   182,   183,   184,   209,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,    -1,    -1,   180,   181,   182,   183,   184,   209,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   180,   181,   182,
   183,   184,   209,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
    -1,   180,   181,   182,   183,   184,   209,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,    -1,    -1,   180,   181,   182,   183,   184,
   209,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   180,
   181,   182,   183,   184,   209,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,    -1,    -1,   180,   181,   182,   183,   184,   209,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   180,   181,   182,
   183,   184,   209,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,
    -1,   180,   181,   182,   183,   184,   209,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,    -1,    -1,   180,   181,   182,   183,   184,
   209,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,   180,
   181,   182,   183,   184,   209,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,    -1,    -1,    -1,    -1,   207,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   180,   181,   182,   183,   184,
   207,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,   181,   182,
   183,   184,   207,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   180,
   181,   182,   183,   184,   207,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   180,   181,   182,   183,   184,   207,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   180,   181,   182,   183,   184,   207,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,   204,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,    -1,    -1,   204,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202,   180,   181,   182,   183,   184,    -1,
   186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,
   183,   184,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
   180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,   180,   181,   182,   183,   184,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,   194,    -1,    -1,
    -1,    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,
   184,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,
   181,   182,   183,   184,    -1,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,   180,   181,   182,   183,   184,    -1,   186,   187,
   188,   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,
    -1,    -1,   200,    -1,   202,   180,   181,   182,   183,   184,
    -1,   186,   187,   188,   189,   190,   191,   192,   193,   194,
    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,   180,   181,
   182,   183,   184,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,   194,    -1,    -1,    -1,    -1,    -1,   200,    -1,
   202,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    -1,    -1,    -1,    -1,
    -1,   200,    -1,   202
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 171 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 177 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 178 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 188 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STL_Surf = Create_Surface(NEWSURFACE(), MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 10:
#line 202 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d, CTX.geom.stl_create_elementary);
      return 1;
    ;
    break;}
case 11:
#line 209 "Gmsh.y"
{
      if(CTX.geom.stl_create_elementary){
	STL_Surf->STL->ReplaceDuplicate();
	if(CTX.geom.stl_create_physical)
	  STL_Surf->STL->CreatePhysicalSurface();
      }
      else{
	Tree_Add(THEM->Surfaces, &STL_Surf);
      }
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 231 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 232 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 233 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 238 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 243 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 254 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 257 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 261 "Gmsh.y"
{
   ;
    break;}
case 25:
#line 267 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 273 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 280 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 286 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 290 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 294 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 301 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 305 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 310 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 314 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 318 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 322 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 326 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 330 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 334 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 338 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 347 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 350 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 354 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 358 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 362 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 366 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 374 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 385 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 388 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 391 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 407 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 408 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 411 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 412 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 413 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 414 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 415 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 416 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 421 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 72:
#line 425 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 442 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
    ;
    break;}
case 74:
#line 448 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
    ;
    break;}
case 75:
#line 457 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 495 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 497 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 502 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 507 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 514 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 516 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 521 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 527 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 535 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 537 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 542 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 548 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 556 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 558 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 564 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 571 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 579 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 581 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 587 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 594 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 602 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 604 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 610 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 617 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 625 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 627 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 634 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 644 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 652 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 654 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 661 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 671 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 679 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 681 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 688 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 698 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 706 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 708 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 716 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 726 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 734 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 736 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 744 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 754 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 762 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 764 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 772 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 782 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 790 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 792 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 800 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 810 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 818 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 820 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 828 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 838 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 846 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 848 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 856 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 866 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 874 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 876 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 888 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 904 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 912 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 914 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 926 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 942 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 950 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 952 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 964 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 980 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 988 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 990 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 1000 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1013 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1021 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1023 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1033 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1046 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1054 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1056 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1066 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1079 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1087 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1089 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1098 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1111 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1119 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1121 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1130 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1143 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1151 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1153 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1162 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1175 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1183 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1188 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1196 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1203 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1210 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1215 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1223 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1230 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1238 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1245 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1247 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1252 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1259 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1260 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1261 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1262 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1263 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1267 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1268 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1276 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 220:
#line 1304 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
      }
    ;
    break;}
case 221:
#line 1340 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1389 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1405 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 224:
#line 1415 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
    ;
    break;}
case 225:
#line 1433 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 226:
#line 1446 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 227:
#line 1462 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 228:
#line 1487 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 229:
#line 1513 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 230:
#line 1526 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 231:
#line 1542 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 232:
#line 1555 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 233:
#line 1571 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1590 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1612 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 236:
#line 1621 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 237:
#line 1639 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1655 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1671 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1690 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1709 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1727 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1745 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1763 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1789 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1807 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1834 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1852 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1876 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1900 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1926 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1943 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 253:
#line 1961 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 1980 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 1999 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2038 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2064 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	// FIXME: parameters not used; undocumented
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      //FIXME: do you copy the data?
      //List_Delete($12);
      //List_Delete($13);
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 258:
#line 2086 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 259:
#line 2103 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2122 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2139 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2155 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2174 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2191 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2208 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2229 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 267:
#line 2234 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 268:
#line 2239 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 269:
#line 2244 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2251 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 271:
#line 2252 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 272:
#line 2253 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 273:
#line 2258 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 274:
#line 2262 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 275:
#line 2266 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 276:
#line 2282 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 277:
#line 2298 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 278:
#line 2314 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2335 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 280:
#line 2348 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 281:
#line 2359 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 282:
#line 2368 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
#if defined(HAVE_FLTK)
	if(!CTX.batch)
	  UpdateViewsInGUI();
#endif
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
    ;
    break;}
case 283:
#line 2381 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
    ;
    break;}
case 284:
#line 2390 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
#if defined(HAVE_FLTK)
	if(!CTX.batch)
	  UpdateViewsInGUI();
#endif
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
    ;
    break;}
case 285:
#line 2412 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 286:
#line 2426 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 287:
#line 2433 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 288:
#line 2438 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 289:
#line 2449 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 290:
#line 2463 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 291:
#line 2506 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 292:
#line 2520 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 293:
#line 2535 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch(...) {
	yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 294:
#line 2544 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
    ;
    break;}
case 295:
#line 2554 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 296:
#line 2558 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 297:
#line 2562 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 298:
#line 2566 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 299:
#line 2579 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 300:
#line 2594 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 301:
#line 2610 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 302:
#line 2636 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 303:
#line 2663 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 304:
#line 2695 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 305:
#line 2701 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 306:
#line 2706 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 307:
#line 2711 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 308:
#line 2715 "Gmsh.y"
{
    ;
    break;}
case 309:
#line 2726 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 310:
#line 2742 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 311:
#line 2758 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 312:
#line 2774 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2779 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 314:
#line 2795 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 315:
#line 2800 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 316:
#line 2816 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 317:
#line 2821 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 318:
#line 2839 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2862 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 320:
#line 2885 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2908 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2913 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 2936 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 324:
#line 2941 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 325:
#line 2964 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 326:
#line 2969 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 327:
#line 2995 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3018 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 329:
#line 3041 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3064 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 331:
#line 3069 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 332:
#line 3092 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 333:
#line 3098 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 334:
#line 3121 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 335:
#line 3127 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 336:
#line 3153 "Gmsh.y"
{
    ;
    break;}
case 337:
#line 3156 "Gmsh.y"
{
    ;
    break;}
case 338:
#line 3162 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 339:
#line 3188 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 340:
#line 3212 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 341:
#line 3221 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 342:
#line 3239 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 343:
#line 3257 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 344:
#line 3275 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 345:
#line 3302 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 346:
#line 3328 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 347:
#line 3354 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 348:
#line 3368 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 349:
#line 3387 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 350:
#line 3391 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 351:
#line 3400 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 352:
#line 3401 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 353:
#line 3402 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 354:
#line 3403 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 355:
#line 3404 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 356:
#line 3408 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 357:
#line 3409 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 358:
#line 3410 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 359:
#line 3411 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 360:
#line 3412 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 361:
#line 3413 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 362:
#line 3414 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 363:
#line 3415 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 364:
#line 3417 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 365:
#line 3423 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 366:
#line 3424 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 367:
#line 3425 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 368:
#line 3426 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 369:
#line 3427 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 370:
#line 3428 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 371:
#line 3429 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 372:
#line 3430 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 373:
#line 3431 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 374:
#line 3432 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 375:
#line 3433 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 376:
#line 3434 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 377:
#line 3435 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 378:
#line 3436 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 379:
#line 3437 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 380:
#line 3438 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 381:
#line 3439 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 382:
#line 3440 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 383:
#line 3441 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 384:
#line 3442 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 385:
#line 3443 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 386:
#line 3444 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 387:
#line 3445 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 388:
#line 3446 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3447 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 390:
#line 3448 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3449 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 392:
#line 3450 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3451 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 394:
#line 3452 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 395:
#line 3453 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 396:
#line 3454 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 397:
#line 3456 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 398:
#line 3457 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 399:
#line 3458 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 400:
#line 3459 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 401:
#line 3460 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 402:
#line 3461 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 403:
#line 3462 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 404:
#line 3463 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 405:
#line 3464 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 406:
#line 3465 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 407:
#line 3466 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 408:
#line 3467 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 409:
#line 3468 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3469 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 411:
#line 3470 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3471 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 413:
#line 3472 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 414:
#line 3473 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 415:
#line 3474 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 416:
#line 3475 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 417:
#line 3476 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 418:
#line 3485 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 419:
#line 3486 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 420:
#line 3487 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 421:
#line 3488 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 422:
#line 3493 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
    ;
    break;}
case 423:
#line 3505 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 424:
#line 3524 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
    ;
    break;}
case 425:
#line 3537 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
    ;
    break;}
case 426:
#line 3549 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 427:
#line 3571 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 428:
#line 3588 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 429:
#line 3605 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 430:
#line 3622 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 431:
#line 3639 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
    ;
    break;}
case 432:
#line 3646 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 433:
#line 3650 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 434:
#line 3654 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 435:
#line 3658 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 436:
#line 3662 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 437:
#line 3669 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 438:
#line 3673 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 439:
#line 3677 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 440:
#line 3681 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 441:
#line 3688 "Gmsh.y"
{
    ;
    break;}
case 442:
#line 3691 "Gmsh.y"
{
    ;
    break;}
case 443:
#line 3697 "Gmsh.y"
{
    ;
    break;}
case 444:
#line 3700 "Gmsh.y"
{
    ;
    break;}
case 445:
#line 3706 "Gmsh.y"
{
    ;
    break;}
case 446:
#line 3709 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 447:
#line 3713 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 448:
#line 3720 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 449:
#line 3725 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 450:
#line 3733 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 451:
#line 3738 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 452:
#line 3742 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 453:
#line 3746 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 454:
#line 3758 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 455:
#line 3764 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 456:
#line 3775 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 457:
#line 3795 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 458:
#line 3805 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 459:
#line 3815 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 460:
#line 3827 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
    ;
    break;}
case 461:
#line 3843 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
    ;
    break;}
case 462:
#line 3861 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 463:
#line 3884 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 464:
#line 3912 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 465:
#line 3917 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 466:
#line 3921 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 467:
#line 3925 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 468:
#line 3938 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 469:
#line 3942 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 470:
#line 3954 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 471:
#line 3960 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
    ;
    break;}
case 472:
#line 3981 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 473:
#line 3985 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 474:
#line 3999 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 475:
#line 4004 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 476:
#line 4011 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 477:
#line 4015 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);  
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 478:
#line 4023 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 479:
#line 4037 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 480:
#line 4041 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 481:
#line 4060 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 482:
#line 4076 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4093 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
