
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tEuclidian	266
#define	tCoordinates	267
#define	tExp	268
#define	tLog	269
#define	tLog10	270
#define	tSqrt	271
#define	tSin	272
#define	tAsin	273
#define	tCos	274
#define	tAcos	275
#define	tTan	276
#define	tRand	277
#define	tAtan	278
#define	tAtan2	279
#define	tSinh	280
#define	tCosh	281
#define	tTanh	282
#define	tFabs	283
#define	tFloor	284
#define	tCeil	285
#define	tFmod	286
#define	tModulo	287
#define	tHypot	288
#define	tPrintf	289
#define	tSprintf	290
#define	tStrCat	291
#define	tStrPrefix	292
#define	tStrRelative	293
#define	tBoundingBox	294
#define	tDraw	295
#define	tToday	296
#define	tPoint	297
#define	tCircle	298
#define	tEllipse	299
#define	tLine	300
#define	tSphere	301
#define	tPolarSphere	302
#define	tSurface	303
#define	tSpline	304
#define	tVolume	305
#define	tCharacteristic	306
#define	tLength	307
#define	tParametric	308
#define	tElliptic	309
#define	tPlane	310
#define	tRuled	311
#define	tTransfinite	312
#define	tComplex	313
#define	tPhysical	314
#define	tUsing	315
#define	tBump	316
#define	tProgression	317
#define	tPlugin	318
#define	tRotate	319
#define	tTranslate	320
#define	tSymmetry	321
#define	tDilate	322
#define	tExtrude	323
#define	tDuplicata	324
#define	tLoop	325
#define	tRecombine	326
#define	tDelete	327
#define	tCoherence	328
#define	tIntersect	329
#define	tAttractor	330
#define	tLayers	331
#define	tHole	332
#define	tAlias	333
#define	tAliasWithOptions	334
#define	tText2D	335
#define	tText3D	336
#define	tInterpolationScheme	337
#define	tTime	338
#define	tGrain	339
#define	tCombine	340
#define	tBSpline	341
#define	tBezier	342
#define	tNurbs	343
#define	tOrder	344
#define	tKnots	345
#define	tColor	346
#define	tColorTable	347
#define	tFor	348
#define	tIn	349
#define	tEndFor	350
#define	tIf	351
#define	tEndIf	352
#define	tExit	353
#define	tField	354
#define	tThreshold	355
#define	tStructured	356
#define	tLatLon	357
#define	tGrad	358
#define	tPostView	359
#define	tReturn	360
#define	tCall	361
#define	tFunction	362
#define	tShow	363
#define	tHide	364
#define	tGetValue	365
#define	tGMSH_MAJOR_VERSION	366
#define	tGMSH_MINOR_VERSION	367
#define	tGMSH_PATCH_VERSION	368
#define	tAFFECTPLUS	369
#define	tAFFECTMINUS	370
#define	tAFFECTTIMES	371
#define	tAFFECTDIVIDE	372
#define	tOR	373
#define	tAND	374
#define	tEQUAL	375
#define	tNOTEQUAL	376
#define	tLESSOREQUAL	377
#define	tGREATEROREQUAL	378
#define	tPLUSPLUS	379
#define	tMINUSMINUS	380
#define	UNARYPREC	381

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.327 2007-08-27 19:27:02 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Field.h"
#include "BackgroundMesh.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static gmshSurface *myGmshSurface = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 78 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1290
#define	YYFLAG		-32768
#define	YYNTBASE	148

#define YYTRANSLATE(x) ((unsigned)(x) <= 381 ? yytranslate[x] : 217)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   133,     2,   143,     2,   132,     2,     2,   138,
   139,   130,   128,   144,   129,   142,   131,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   124,
     2,   126,   119,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   140,     2,   141,   137,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   145,     2,   146,   147,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   120,   121,   122,   123,   125,   127,   134,   135,
   136
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   204,   205,   212,   219,   221,   223,   225,   227,   229,
   231,   233,   238,   246,   256,   263,   270,   274,   281,   286,
   293,   303,   310,   320,   326,   335,   344,   356,   363,   373,
   383,   393,   395,   397,   405,   414,   424,   433,   442,   451,
   461,   470,   476,   483,   490,   497,   505,   513,   521,   531,
   539,   549,   567,   575,   583,   595,   604,   613,   622,   631,
   635,   640,   651,   659,   667,   676,   685,   694,   702,   711,
   717,   729,   735,   745,   747,   749,   751,   752,   755,   762,
   769,   776,   783,   788,   795,   802,   809,   814,   821,   825,
   830,   836,   840,   844,   849,   854,   858,   866,   874,   878,
   886,   890,   893,   896,   912,   915,   922,   931,   940,   951,
   953,   956,   958,   962,   967,   969,   975,   987,  1001,  1002,
  1010,  1011,  1025,  1026,  1042,  1043,  1050,  1051,  1062,  1071,
  1080,  1089,  1102,  1115,  1128,  1143,  1158,  1173,  1174,  1187,
  1188,  1201,  1202,  1215,  1216,  1233,  1234,  1251,  1252,  1269,
  1270,  1289,  1290,  1309,  1310,  1329,  1331,  1334,  1340,  1348,
  1358,  1361,  1371,  1378,  1388,  1398,  1407,  1417,  1426,  1435,
  1442,  1447,  1458,  1469,  1480,  1491,  1494,  1496,  1500,  1503,
  1506,  1509,  1513,  1517,  1521,  1525,  1529,  1533,  1537,  1541,
  1545,  1549,  1553,  1557,  1561,  1565,  1571,  1576,  1581,  1586,
  1591,  1596,  1601,  1606,  1611,  1616,  1621,  1628,  1633,  1638,
  1643,  1648,  1653,  1658,  1665,  1672,  1679,  1684,  1689,  1694,
  1699,  1704,  1709,  1714,  1719,  1724,  1729,  1734,  1741,  1746,
  1751,  1756,  1761,  1766,  1771,  1778,  1785,  1792,  1797,  1799,
  1801,  1803,  1805,  1807,  1809,  1811,  1813,  1819,  1824,  1829,
  1832,  1838,  1842,  1849,  1854,  1862,  1869,  1871,  1874,  1877,
  1881,  1885,  1897,  1907,  1915,  1923,  1925,  1929,  1931,  1933,
  1936,  1940,  1945,  1951,  1954,  1958,  1962,  1968,  1973,  1983,
  1985,  1987,  1989,  1993,  2000,  2002,  2004,  2008,  2012,  2022,
  2030,  2032,  2038,  2042,  2049,  2051,  2055,  2057,  2059,  2061,
  2063,  2070,  2075,  2080,  2085,  2092,  2099
};

static const short yyrhs[] = {   149,
     0,     1,     6,     0,     0,   149,   150,     0,   153,     0,
   152,     0,   172,     0,   174,     0,   175,     0,   178,     0,
   179,     0,   180,     0,   181,     0,   184,     0,   201,     0,
   202,     0,   203,     0,   183,     0,   182,     0,   126,     0,
   126,   126,     0,    35,   138,     5,   139,     6,     0,    35,
   138,     5,   139,   151,   215,     6,     0,    35,   138,     5,
   144,   211,   139,     6,     0,    35,   138,     5,   144,   211,
   139,   151,   215,     6,     0,     4,     5,   145,   154,   146,
     6,     0,     4,     5,     4,   206,   145,   154,   146,     6,
     0,     0,   154,   157,     0,   154,   161,     0,   154,   164,
     0,   154,   166,     0,   154,   167,     0,   154,   169,     0,
   204,     0,   155,   144,   204,     0,   204,     0,   156,   144,
   204,     0,     0,     0,     4,   158,   138,   155,   139,   159,
   145,   156,   146,     6,     0,   215,     0,   160,   144,   215,
     0,     0,    81,   138,   204,   144,   204,   144,   204,   139,
   162,   145,   160,   146,     6,     0,   215,     0,   163,   144,
   215,     0,     0,    82,   138,   204,   144,   204,   144,   204,
   144,   204,   139,   165,   145,   163,   146,     6,     0,    83,
   145,   208,   146,   145,   208,   146,     6,     0,    83,   145,
   208,   146,   145,   208,   146,   145,   208,   146,   145,   208,
   146,     6,     0,     0,    84,   168,   145,   156,   146,     6,
     0,    85,   138,   204,   139,   209,     6,     0,     7,     0,
   115,     0,   116,     0,   117,     0,   118,     0,   134,     0,
   135,     0,     4,   170,   204,     6,     0,     4,   140,   204,
   141,   170,   204,     6,     0,     4,   140,   145,   211,   146,
   141,   170,   209,     6,     0,     4,   140,   141,     7,   209,
     6,     0,     4,   140,   141,   115,   209,     6,     0,     4,
   171,     6,     0,     4,   140,   204,   141,   171,     6,     0,
     4,     7,   216,     6,     0,     4,   142,     4,     7,   216,
     6,     0,     4,   140,   204,   141,   142,     4,     7,   216,
     6,     0,     4,   142,     4,   170,   204,     6,     0,     4,
   140,   204,   141,   142,     4,   170,   204,     6,     0,     4,
   142,     4,   171,     6,     0,     4,   140,   204,   141,   142,
     4,   171,     6,     0,     4,   142,    92,   142,     4,     7,
   212,     6,     0,     4,   140,   204,   141,   142,    92,   142,
     4,     7,   212,     6,     0,     4,   142,    93,     7,   213,
     6,     0,     4,   140,   204,   141,   142,    93,     7,   213,
     6,     0,    64,   138,     4,   139,   142,     4,     7,   204,
     6,     0,    64,   138,     4,   139,   142,     4,     7,   216,
     6,     0,   204,     0,   216,     0,    43,   138,   204,   139,
     7,   206,     6,     0,    60,    43,   138,   173,   139,     7,
   209,     6,     0,    76,    43,   100,   138,   204,   139,     7,
   209,     6,     0,   103,   100,   138,   204,   139,     7,   204,
     6,     0,   105,   100,   138,   204,   139,     7,   204,     6,
     0,   101,   100,   138,   204,   139,     7,   209,     6,     0,
   108,   100,   138,   204,   139,     7,     5,   209,     6,     0,
   102,   100,   138,   204,   139,     7,     5,     6,     0,    52,
    53,   100,   209,     6,     0,    76,    43,   209,     7,   209,
     6,     0,    76,    46,   209,     7,   209,     6,     0,    52,
    53,   209,     7,   204,     6,     0,    46,   138,   204,   139,
     7,   209,     6,     0,    50,   138,   204,   139,     7,   209,
     6,     0,    44,   138,   204,   139,     7,   209,     6,     0,
    44,   138,   204,   139,     7,   209,    56,   206,     6,     0,
    45,   138,   204,   139,     7,   209,     6,     0,    45,   138,
   204,   139,     7,   209,    56,   206,     6,     0,    54,   138,
   204,   139,     7,   145,   204,   144,   204,   144,     5,   144,
     5,   144,     5,   146,     6,     0,    87,   138,   204,   139,
     7,   209,     6,     0,    88,   138,   204,   139,     7,   209,
     6,     0,    89,   138,   204,   139,     7,   209,    91,   209,
    90,   204,     6,     0,    46,    71,   138,   204,   139,     7,
   209,     6,     0,    60,    46,   138,   173,   139,     7,   209,
     6,     0,    56,    49,   138,   204,   139,     7,   209,     6,
     0,    57,    49,   138,   204,   139,     7,   209,     6,     0,
    12,    13,     6,     0,    13,    49,   204,     6,     0,    54,
    49,   138,   204,   139,     7,     5,     5,     5,     6,     0,
    47,   138,   204,   139,     7,   209,     6,     0,    48,   138,
   204,   139,     7,   209,     6,     0,    49,    71,   138,   204,
   139,     7,   209,     6,     0,    60,    49,   138,   173,   139,
     7,   209,     6,     0,    59,    51,   138,   204,   139,     7,
   209,     6,     0,    51,   138,   204,   139,     7,   209,     6,
     0,    60,    51,   138,   173,   139,     7,   209,     6,     0,
    66,   206,   145,   176,   146,     0,    65,   145,   206,   144,
   206,   144,   204,   146,   145,   176,   146,     0,    67,   206,
   145,   176,   146,     0,    68,   145,   206,   144,   204,   146,
   145,   176,   146,     0,   178,     0,   177,     0,   175,     0,
     0,   177,   174,     0,   177,    43,   145,   211,   146,     6,
     0,   177,    46,   145,   211,   146,     6,     0,   177,    49,
   145,   211,   146,     6,     0,   177,    51,   145,   211,   146,
     6,     0,    70,   145,   177,   146,     0,    70,     4,   140,
   204,   141,     6,     0,    79,     4,   140,   204,   141,     6,
     0,    80,     4,   140,   204,   141,     6,     0,    73,   145,
   177,   146,     0,    73,     4,   140,   204,   141,     6,     0,
    73,     4,     6,     0,    73,     4,     4,     6,     0,    92,
   212,   145,   177,   146,     0,   109,   215,     6,     0,   110,
   215,     6,     0,   109,   145,   177,   146,     0,   110,   145,
   177,   146,     0,     4,   216,     6,     0,     4,     4,   140,
   204,   141,   215,     6,     0,     4,     4,     4,   140,   204,
   141,     6,     0,     4,   204,     6,     0,    64,   138,     4,
   139,   142,     4,     6,     0,    86,     4,     6,     0,    99,
     6,     0,    40,     6,     0,    40,   145,   204,   144,   204,
   144,   204,   144,   204,   144,   204,   144,   204,   146,     6,
     0,    41,     6,     0,    94,   138,   204,     8,   204,   139,
     0,    94,   138,   204,     8,   204,     8,   204,   139,     0,
    94,     4,    95,   145,   204,     8,   204,   146,     0,    94,
     4,    95,   145,   204,     8,   204,     8,   204,   146,     0,
    96,     0,   108,     4,     0,   106,     0,   107,     4,     6,
     0,    97,   138,   204,   139,     0,    98,     0,    69,   206,
   145,   177,   146,     0,    69,   145,   206,   144,   206,   144,
   204,   146,   145,   177,   146,     0,    69,   145,   206,   144,
   206,   144,   206,   144,   204,   146,   145,   177,   146,     0,
     0,    69,   206,   145,   177,   185,   199,   146,     0,     0,
    69,   145,   206,   144,   206,   144,   204,   146,   145,   177,
   186,   199,   146,     0,     0,    69,   145,   206,   144,   206,
   144,   206,   144,   204,   146,   145,   177,   187,   199,   146,
     0,     0,    69,   145,   177,   188,   199,   146,     0,     0,
    69,     4,   140,   204,   141,   145,   177,   189,   199,   146,
     0,    69,    43,   145,   204,   144,   206,   146,     6,     0,
    69,    46,   145,   204,   144,   206,   146,     6,     0,    69,
    49,   145,   204,   144,   206,   146,     6,     0,    69,    43,
   145,   204,   144,   206,   144,   206,   144,   204,   146,     6,
     0,    69,    46,   145,   204,   144,   206,   144,   206,   144,
   204,   146,     6,     0,    69,    49,   145,   204,   144,   206,
   144,   206,   144,   204,   146,     6,     0,    69,    43,   145,
   204,   144,   206,   144,   206,   144,   206,   144,   204,   146,
     6,     0,    69,    46,   145,   204,   144,   206,   144,   206,
   144,   206,   144,   204,   146,     6,     0,    69,    49,   145,
   204,   144,   206,   144,   206,   144,   206,   144,   204,   146,
     6,     0,     0,    69,    43,   145,   204,   144,   206,   146,
   190,   145,   199,   146,     6,     0,     0,    69,    46,   145,
   204,   144,   206,   146,   191,   145,   199,   146,     6,     0,
     0,    69,    49,   145,   204,   144,   206,   146,   192,   145,
   199,   146,     6,     0,     0,    69,    43,   145,   204,   144,
   206,   144,   206,   144,   204,   146,   193,   145,   199,   146,
     6,     0,     0,    69,    46,   145,   204,   144,   206,   144,
   206,   144,   204,   146,   194,   145,   199,   146,     6,     0,
     0,    69,    49,   145,   204,   144,   206,   144,   206,   144,
   204,   146,   195,   145,   199,   146,     6,     0,     0,    69,
    43,   145,   204,   144,   206,   144,   206,   144,   206,   144,
   204,   146,   196,   145,   199,   146,     6,     0,     0,    69,
    46,   145,   204,   144,   206,   144,   206,   144,   206,   144,
   204,   146,   197,   145,   199,   146,     6,     0,     0,    69,
    49,   145,   204,   144,   206,   144,   206,   144,   206,   144,
   204,   146,   198,   145,   199,   146,     6,     0,   200,     0,
   199,   200,     0,    77,   145,   204,   146,     6,     0,    77,
   145,   209,   144,   209,   146,     6,     0,    77,   145,   209,
   144,   209,   144,   209,   146,     6,     0,    72,     6,     0,
    78,   138,   204,   139,     7,   209,    61,   204,     6,     0,
    58,    46,   209,     7,   204,     6,     0,    58,    46,   209,
     7,   204,    61,    63,   204,     6,     0,    58,    46,   209,
     7,   204,    61,    62,   204,     6,     0,    58,    49,   145,
   204,   146,     7,   209,     6,     0,    58,    49,   145,   204,
   146,     7,   209,     4,     6,     0,    55,    49,   145,   204,
   146,     7,   209,     6,     0,    58,    51,   145,   204,   146,
     7,   209,     6,     0,    72,    49,   209,     7,   204,     6,
     0,    72,    49,   209,     6,     0,    43,   145,   211,   146,
    95,    49,   145,   204,   146,     6,     0,    46,   145,   211,
   146,    95,    49,   145,   204,   146,     6,     0,    46,   145,
   211,   146,    95,    51,   145,   204,   146,     6,     0,    49,
   145,   211,   146,    95,    51,   145,   204,   146,     6,     0,
    74,     6,     0,   205,     0,   138,   204,   139,     0,   129,
   204,     0,   128,   204,     0,   133,   204,     0,   204,   129,
   204,     0,   204,   128,   204,     0,   204,   130,   204,     0,
   204,   131,   204,     0,   204,   132,   204,     0,   204,   137,
   204,     0,   204,   124,   204,     0,   204,   126,   204,     0,
   204,   125,   204,     0,   204,   127,   204,     0,   204,   122,
   204,     0,   204,   123,   204,     0,   204,   121,   204,     0,
   204,   120,   204,     0,   204,   119,   204,     8,   204,     0,
    14,   138,   204,   139,     0,    15,   138,   204,   139,     0,
    16,   138,   204,   139,     0,    17,   138,   204,   139,     0,
    18,   138,   204,   139,     0,    19,   138,   204,   139,     0,
    20,   138,   204,   139,     0,    21,   138,   204,   139,     0,
    22,   138,   204,   139,     0,    24,   138,   204,   139,     0,
    25,   138,   204,   144,   204,   139,     0,    26,   138,   204,
   139,     0,    27,   138,   204,   139,     0,    28,   138,   204,
   139,     0,    29,   138,   204,   139,     0,    30,   138,   204,
   139,     0,    31,   138,   204,   139,     0,    32,   138,   204,
   144,   204,   139,     0,    33,   138,   204,   144,   204,   139,
     0,    34,   138,   204,   144,   204,   139,     0,    23,   138,
   204,   139,     0,    14,   140,   204,   141,     0,    15,   140,
   204,   141,     0,    16,   140,   204,   141,     0,    17,   140,
   204,   141,     0,    18,   140,   204,   141,     0,    19,   140,
   204,   141,     0,    20,   140,   204,   141,     0,    21,   140,
   204,   141,     0,    22,   140,   204,   141,     0,    24,   140,
   204,   141,     0,    25,   140,   204,   144,   204,   141,     0,
    26,   140,   204,   141,     0,    27,   140,   204,   141,     0,
    28,   140,   204,   141,     0,    29,   140,   204,   141,     0,
    30,   140,   204,   141,     0,    31,   140,   204,   141,     0,
    32,   140,   204,   144,   204,   141,     0,    33,   140,   204,
   144,   204,   141,     0,    34,   140,   204,   144,   204,   141,
     0,    23,   140,   204,   141,     0,     3,     0,     9,     0,
    10,     0,    11,     0,   112,     0,   113,     0,   114,     0,
     4,     0,     4,   147,   145,   204,   146,     0,     4,   140,
   204,   141,     0,   143,     4,   140,   141,     0,     4,   171,
     0,     4,   140,   204,   141,   171,     0,     4,   142,     4,
     0,     4,   140,   204,   141,   142,     4,     0,     4,   142,
     4,   171,     0,     4,   140,   204,   141,   142,     4,   171,
     0,   111,   138,     5,   144,   204,   139,     0,   207,     0,
   129,   206,     0,   128,   206,     0,   206,   129,   206,     0,
   206,   128,   206,     0,   145,   204,   144,   204,   144,   204,
   144,   204,   144,   204,   146,     0,   145,   204,   144,   204,
   144,   204,   144,   204,   146,     0,   145,   204,   144,   204,
   144,   204,   146,     0,   138,   204,   144,   204,   144,   204,
   139,     0,   209,     0,   208,   144,   209,     0,   204,     0,
   210,     0,   145,   146,     0,   145,   211,   146,     0,   129,
   145,   211,   146,     0,   204,   130,   145,   211,   146,     0,
   129,   210,     0,   204,   130,   210,     0,   204,     8,   204,
     0,   204,     8,   204,     8,   204,     0,    43,   145,   204,
   146,     0,    75,    46,   145,   211,   146,    49,   145,   204,
   146,     0,   175,     0,   178,     0,   184,     0,     4,   140,
   141,     0,     4,   140,   145,   211,   146,   141,     0,   204,
     0,   210,     0,   211,   144,   204,     0,   211,   144,   210,
     0,   145,   204,   144,   204,   144,   204,   144,   204,   146,
     0,   145,   204,   144,   204,   144,   204,   146,     0,     4,
     0,     4,   142,    92,   142,     4,     0,   145,   214,   146,
     0,     4,   140,   204,   141,   142,    93,     0,   212,     0,
   214,   144,   212,     0,   216,     0,     4,     0,     5,     0,
    42,     0,    37,   138,   215,   144,   215,   139,     0,    38,
   138,   215,   139,     0,    39,   138,   215,   139,     0,    36,
   138,   215,   139,     0,    36,   138,   215,   144,   211,   139,
     0,    36,   138,     4,   142,     4,   139,     0,    36,   138,
     4,   140,   204,   141,   142,     4,   139,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   144,   146,   151,   153,   156,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   174,
   179,   185,   191,   206,   219,   247,   255,   264,   272,   273,
   274,   275,   276,   277,   280,   283,   287,   290,   294,   485,
   499,   509,   515,   522,   530,   536,   542,   549,   557,   563,
   569,   579,   584,   588,   597,   599,   600,   601,   602,   605,
   607,   610,   645,   684,   738,   755,   773,   784,   801,   808,
   822,   839,   865,   892,   906,   923,   937,   954,   974,   997,
  1007,  1021,  1026,  1035,  1061,  1077,  1098,  1105,  1116,  1131,
  1146,  1153,  1165,  1199,  1235,  1257,  1275,  1293,  1311,  1337,
  1355,  1381,  1401,  1419,  1437,  1463,  1480,  1499,  1517,  1555,
  1559,  1563,  1568,  1590,  1612,  1628,  1648,  1665,  1682,  1702,
  1708,  1713,  1718,  1725,  1727,  1728,  1731,  1736,  1740,  1763,
  1786,  1809,  1836,  1849,  1855,  1861,  1872,  1882,  1892,  1908,
  1926,  1940,  1947,  1953,  1962,  1975,  2026,  2041,  2056,  2076,
  2086,  2108,  2112,  2117,  2122,  2132,  2149,  2165,  2191,  2218,
  2250,  2257,  2262,  2268,  2272,  2280,  2289,  2297,  2305,  2309,
  2317,  2321,  2329,  2333,  2341,  2345,  2352,  2356,  2368,  2375,
  2382,  2389,  2396,  2403,  2410,  2417,  2424,  2431,  2435,  2442,
  2446,  2453,  2457,  2464,  2468,  2475,  2479,  2486,  2490,  2497,
  2501,  2508,  2512,  2519,  2523,  2533,  2537,  2542,  2552,  2574,
  2598,  2602,  2625,  2644,  2662,  2680,  2709,  2744,  2749,  2776,
  2790,  2808,  2815,  2821,  2824,  2832,  2842,  2844,  2845,  2846,
  2847,  2848,  2849,  2850,  2851,  2858,  2859,  2860,  2861,  2862,
  2863,  2864,  2865,  2866,  2867,  2868,  2869,  2870,  2871,  2872,
  2873,  2874,  2875,  2876,  2877,  2878,  2879,  2880,  2881,  2882,
  2883,  2884,  2885,  2886,  2887,  2888,  2889,  2891,  2892,  2893,
  2894,  2895,  2896,  2897,  2898,  2899,  2900,  2901,  2902,  2903,
  2904,  2905,  2906,  2907,  2908,  2909,  2910,  2911,  2916,  2921,
  2922,  2923,  2924,  2925,  2926,  2930,  2946,  2961,  2981,  2995,
  3008,  3031,  3049,  3067,  3085,  3103,  3110,  3115,  3119,  3123,
  3127,  3133,  3138,  3142,  3146,  3152,  3158,  3165,  3171,  3175,
  3180,  3184,  3192,  3202,  3211,  3219,  3225,  3236,  3256,  3261,
  3271,  3281,  3291,  3308,  3334,  3340,  3344,  3348,  3360,  3365,
  3377,  3384,  3405,  3410,  3424,  3430,  3436,  3441,  3447,  3452,
  3460,  3468,  3482,  3496,  3500,  3519,  3541
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tEuclidian",
"tCoordinates","tExp","tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos",
"tTan","tRand","tAtan","tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil",
"tFmod","tModulo","tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative",
"tBoundingBox","tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere",
"tPolarSphere","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tIntersect",
"tAttractor","tLayers","tHole","tAlias","tAliasWithOptions","tText2D","tText3D",
"tInterpolationScheme","tTime","tGrain","tCombine","tBSpline","tBezier","tNurbs",
"tOrder","tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf",
"tExit","tField","tThreshold","tStructured","tLatLon","tGrad","tPostView","tReturn",
"tCall","tFunction","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION",
"tGMSH_PATCH_VERSION","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL",
"'+'","'-'","'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems",
"GeoFormatItem","SendToFile","Printf","View","Views","ElementCoords","ElementValues",
"Element","@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4",
"InterpolationMatrix","Time","@5","Grain","NumericAffectation","NumericIncrement",
"Affectation","PhysicalId","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Colorify","Visibility","Command","Loop","Extrude","@6",
"@7","@8","@9","@10","@11","@12","@13","@14","@15","@16","@17","@18","@19","ExtrudeParameters",
"ExtrudeParameter","Transfinite","Embedding","Coherence","FExpr","FExpr_Single",
"VExpr","VExpr_Single","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExprVar",
"StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   148,   148,   149,   149,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   151,
   151,   152,   152,   152,   152,   153,   153,   154,   154,   154,
   154,   154,   154,   154,   155,   155,   156,   156,   158,   159,
   157,   160,   160,   162,   161,   163,   163,   165,   164,   166,
   166,   168,   167,   169,   170,   170,   170,   170,   170,   171,
   171,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   173,   173,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   174,   175,
   175,   175,   175,   176,   176,   176,   177,   177,   177,   177,
   177,   177,   178,   178,   178,   178,   179,   179,   179,   179,
   180,   181,   181,   181,   181,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   184,   184,   184,   185,   184,
   186,   184,   187,   184,   188,   184,   189,   184,   184,   184,
   184,   184,   184,   184,   184,   184,   184,   190,   184,   191,
   184,   192,   184,   193,   184,   194,   184,   195,   184,   196,
   184,   197,   184,   198,   184,   199,   199,   200,   200,   200,
   200,   200,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   202,   202,   202,   202,   203,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   206,   206,   206,   206,
   206,   207,   207,   207,   207,   208,   208,   209,   209,   209,
   209,   209,   209,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   211,   211,   211,   211,   212,   212,
   212,   212,   213,   213,   214,   214,   215,   215,   216,   216,
   216,   216,   216,   216,   216,   216,   216
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
    14,     0,     6,     6,     1,     1,     1,     1,     1,     1,
     1,     4,     7,     9,     6,     6,     3,     6,     4,     6,
     9,     6,     9,     5,     8,     8,    11,     6,     9,     9,
     9,     1,     1,     7,     8,     9,     8,     8,     8,     9,
     8,     5,     6,     6,     6,     7,     7,     7,     9,     7,
     9,    17,     7,     7,    11,     8,     8,     8,     8,     3,
     4,    10,     7,     7,     8,     8,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     6,     6,
     6,     6,     4,     6,     6,     6,     4,     6,     3,     4,
     5,     3,     3,     4,     4,     3,     7,     7,     3,     7,
     3,     2,     2,    15,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     5,    11,    13,     0,     7,
     0,    13,     0,    15,     0,     6,     0,    10,     8,     8,
     8,    12,    12,    12,    14,    14,    14,     0,    12,     0,
    12,     0,    12,     0,    16,     0,    16,     0,    16,     0,
    18,     0,    18,     0,    18,     1,     2,     5,     7,     9,
     2,     9,     6,     9,     9,     8,     9,     8,     8,     6,
     4,    10,    10,    10,    10,     2,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     4,     4,     2,
     5,     3,     6,     4,     7,     6,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     1,     3,     1,     1,     2,
     3,     4,     5,     2,     3,     3,     5,     4,     9,     1,
     1,     1,     3,     6,     1,     1,     3,     3,     9,     7,
     1,     5,     3,     6,     1,     3,     1,     1,     1,     1,
     6,     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   160,     0,   165,     0,     0,
     0,     0,     0,   162,     0,     0,     0,     0,     4,     6,
     5,     7,     8,     9,    10,    11,    12,    13,    19,    18,
    14,    15,    16,    17,   289,   296,   349,    55,   290,   291,
   292,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   350,     0,   293,   294,
   295,    56,    57,    58,    59,     0,     0,     0,    60,    61,
     0,     0,     0,     0,     0,     0,     0,   227,     0,     0,
     0,     0,   153,     0,   155,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     0,     0,     0,     0,     0,     0,   127,     0,     0,   127,
     0,     0,   127,   226,     0,     0,     0,     0,     0,     0,
     0,     0,   341,     0,     0,     0,     0,     0,   152,     0,
     0,     0,     0,     0,   161,     0,   348,   349,   127,     0,
   347,   127,     0,     0,     0,     0,     0,   300,     0,    28,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   296,   230,
   229,   231,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    67,   149,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   146,   110,
     0,     0,     0,     0,   296,     0,     0,     0,   330,   331,
   332,   335,   336,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   318,     0,
   319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   309,   308,     0,     0,
     0,     0,   127,   127,     0,     0,     0,     0,     0,     0,
     0,     0,   175,     0,   127,     0,     0,     0,     0,   139,
     0,     0,     0,     0,     0,     0,     0,   151,     0,     0,
     0,     0,     0,   127,     0,     0,     0,     0,     0,     0,
     0,   163,     0,     0,   142,     0,   143,     0,     0,   302,
     0,     0,     0,    69,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   348,     0,     0,     0,
     0,     0,     0,   228,     0,     0,     0,     0,    55,     0,
     0,     0,     0,     0,    62,     0,   245,   244,   242,   243,
   238,   240,   239,   241,   233,   232,   234,   235,   236,   237,
   111,     0,     0,     0,     0,     0,     0,     0,   229,   324,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    82,    83,     0,     0,     0,     0,     0,     0,     0,
   311,   310,   126,     0,   125,   124,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   128,     0,
     0,   169,     0,   133,   221,     0,   140,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   164,     0,     0,     0,     0,     0,   144,   145,
     0,   298,   304,     0,    28,    39,     0,     0,     0,    52,
     0,     0,    29,    30,    31,    32,    33,    34,   247,   268,
   248,   269,   249,   270,   250,   271,   251,   272,   252,   273,
   253,   274,   254,   275,   255,   276,   267,   288,   256,   277,
     0,     0,   258,   279,   259,   280,   260,   281,   261,   282,
   262,   283,   263,   284,     0,     0,     0,     0,     0,     0,
     0,     0,   354,     0,     0,   352,   353,     0,     0,     0,
     0,     0,    55,     0,     0,     0,     0,     0,    74,     0,
     0,     0,     0,   299,     0,    22,    20,     0,     0,     0,
     0,   333,     0,     0,     0,   326,   234,   325,   337,   338,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    92,     0,   321,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   120,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   206,
     0,   166,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   141,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   301,     0,   297,     0,
     0,     0,     0,     0,     0,     0,    26,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   298,    65,    66,     0,     0,     0,     0,     0,    68,    70,
    72,     0,     0,   345,     0,    78,   246,    21,     0,     0,
     0,     0,     0,   328,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     0,    95,     0,     0,     0,     0,     0,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   127,     0,     0,     0,     0,     0,     0,     0,   211,
     0,     0,   176,   207,     0,     0,   134,   220,   138,     0,
    93,    94,   135,   136,     0,     0,     0,   342,     0,     0,
     0,   156,     0,     0,     0,     0,     0,   148,   303,   147,
     0,     0,     0,     0,     0,   316,     0,     0,   257,   278,
   264,   285,   265,   286,   266,   287,     0,   356,   355,   351,
   306,     0,    55,     0,     0,     0,     0,    63,     0,     0,
     0,   343,    23,    24,     0,     0,    84,     0,     0,   327,
     0,    98,     0,   100,     0,     0,    96,     0,     0,   113,
   114,     0,     0,    97,   118,   323,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   150,     0,     0,     0,     0,   127,   177,     0,   188,     0,
   190,     0,   192,     0,     0,     0,     0,   318,     0,     0,
     0,     0,   170,     0,   103,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   305,    27,     0,    35,     0,
     0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
    75,     0,     0,    76,     0,   346,     0,     0,   334,     0,
     0,     0,     0,   106,     0,     0,   115,     0,     0,     0,
   218,   108,   109,     0,     0,     0,   216,   219,   117,    85,
   107,   116,   119,     0,     0,     0,   315,     0,   314,     0,
     0,     0,   179,     0,     0,   180,     0,     0,   181,     0,
   129,   130,   131,   132,     0,     0,     0,     0,     0,     0,
     0,     0,   340,     0,   158,   157,    89,    91,    87,    88,
     0,    40,     0,     0,     0,   317,     0,     0,     0,     0,
     0,    64,    71,    73,     0,    79,     0,    25,     0,     0,
     0,    99,   101,     0,     0,     0,     0,     0,   215,   214,
   217,    80,    81,   127,     0,   123,     0,     0,     0,     0,
     0,     0,     0,   208,     0,     0,   127,     0,    86,     0,
     0,     0,    90,     0,    36,     0,     0,     0,    38,    53,
    54,   357,     0,   344,     0,     0,   222,   223,   224,   225,
   112,     0,     0,     0,   313,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
     0,   339,   159,     0,     0,     0,     0,    77,     0,   329,
     0,   121,     0,   194,     0,     0,   196,     0,     0,   198,
     0,     0,     0,   209,     0,   167,     0,   127,   105,     0,
    44,     0,    50,     0,     0,     0,   312,   182,     0,     0,
   189,   183,     0,     0,   191,   184,     0,     0,   193,     0,
     0,     0,   173,     0,     0,     0,     0,     0,     0,     0,
   200,     0,   202,     0,   204,   210,   212,   172,   168,     0,
    41,     0,    48,     0,     0,     0,     0,   185,     0,     0,
   186,     0,     0,   187,     0,     0,     0,    42,     0,     0,
   154,     0,     0,     0,     0,     0,     0,     0,   174,     0,
     0,     0,     0,     0,   195,     0,   197,     0,   199,     0,
    43,    45,     0,    46,     0,   102,     0,     0,     0,     0,
     0,    51,   201,   203,   205,    47,    49,     0,     0,     0
};

static const short yydefgoto[] = {  1288,
     2,    59,   668,    60,    61,   403,   988,   994,   593,   761,
  1124,  1247,   594,  1215,  1273,   595,  1249,   596,   597,   765,
   598,   125,   218,    62,   521,   549,   309,   534,   535,   310,
    66,    67,    68,    69,    70,   311,   733,  1187,  1230,   550,
  1041,  1044,  1047,  1050,  1199,  1203,  1207,  1239,  1242,  1245,
   729,   730,    72,    73,    74,   329,   128,   347,   170,   885,
   886,   331,   314,   195,   663,   795,   210,   211
};

static const short yypact[] = {  3201,
   118,  3279,-32768,  2254,    20,   133,    32,    18,   180,   -71,
    58,   128,   -60,   141,   171,   -56,   183,   192,   227,    -9,
   285,   294,   300,   343,   311,   388,   212,   226,   -81,   -81,
   237,    22,    21,   323,    23,   387,    -1,   392,   432,   436,
   305,   322,   330,    26,    37,-32768,   333,-32768,   455,   378,
   379,   382,   406,-32768,   491,    16,    13,    24,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    12,    27,   559,-32768,-32768,
-32768,   -94,   -84,   159,   243,   347,   427,   488,   516,   548,
   551,   577,   585,   590,   591,   608,   611,   630,   643,   651,
   654,   664,   371,   375,   390,   391,-32768,   399,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  2468,  2468,  2468,-32768,-32768,
  2468,  2012,    34,   515,  2468,   544,   899,-32768,   549,   575,
  2468,   594,-32768,  2468,-32768,  2468,  2395,  2468,  2468,   416,
  2468,  2395,  2468,  2468,   462,  2395,  2468,  2468,  1391,   465,
  2468,   464,   475,   484,  1665,   480,   497,   493,   508,   512,
   533,   539,   677,   -81,   -81,   -81,  2468,  2468,    -8,-32768,
   175,   -81,   528,   547,   552,   571,  2219,   199,   556,-32768,
  1665,    17,-32768,-32768,  1528,  1665,   592,   614,   678,  2468,
  2468,  2468,   616,  2468,   626,   658,  2468,  2468,-32768,   639,
   642,   647,   659,   790,-32768,   663,-32768,-32768,-32768,   800,
-32768,-32768,   827,   707,  2468,   846,   719,-32768,   -81,-32768,
   859,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,
  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,
  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,
  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,
  2468,  2468,  2468,   461,   540,   540,   540,   865,   -59,   722,
   722,   722,  5556,    62,  2395,  4820,    83,   736,   875,   759,
   923,-32768,-32768,  2468,  2468,  2468,  2468,  2468,  2468,  2468,
  2468,  2468,  2468,  2468,  2468,  2468,  2468,  2468,-32768,-32768,
  1170,    39,  4066,  5577,   653,   771,   864,  2395,-32768,-32768,
-32768,  1454,-32768,   -14,  5598,  5619,  2468,  5640,   286,  5661,
  5682,  2468,   661,  5703,  5724,  1665,  1802,  1245,  1591,   917,
-32768,  2468,  5745,  2468,  2468,  2468,   920,  2468,  2468,  2468,
  2526,  2526,  2526,  2526,   789,   -42,-32768,-32768,  4092,  4118,
   -81,   -81,   699,   699,   403,  2468,  2468,  2468,  2468,  2219,
  2219,  2468,  3348,   486,-32768,  2468,  2573,    73,   935,-32768,
  2468,  2639,   804,   936,   938,  2468,  2468,-32768,  5766,  5787,
  5808,   855,  4144,-32768,   801,  1728,  5829,  2468,  2468,  2468,
  2468,-32768,  2468,  2705,-32768,  2771,-32768,  2468,  4843,   -23,
  2468,   299,    10,-32768,  5850,  4866,  5871,  4889,  5892,  4912,
  5913,  4935,  5934,  4958,  5955,  4981,  5976,  5004,  5997,  5027,
  6018,  5050,  6039,  5073,  6060,  5096,  4170,  4196,  6081,  5119,
  6102,  5142,  6123,  5165,  6144,  5188,  6165,  5211,  6186,  5234,
  4222,  4248,  4274,  4300,  4326,  4352,   682,   174,   806,   809,
   812,   811,  2468,-32768,  1665,  1665,   684,   291,   559,  2468,
   951,   954,    28,   818,-32768,  1865,   613,   688,   714,   714,
   443,   443,   443,   443,   625,   625,   722,   722,   722,   722,
-32768,    29,  2395,  2468,   955,  2076,  2468,   816,   722,-32768,
  2468,  2395,  2395,   869,   958,   959,  6207,   963,   876,   979,
   986,  6228,   900,   987,   989,   991,  2395,-32768,   685,  1939,
  2468,  6249,   992,  3394,  6270,  6291,  2468,  3422,  3450,  6312,
   861,  6690,-32768,   862,   863,   867,   856,   -81,  2468,  2468,
-32768,-32768,-32768,   857,  3348,-32768,   858,  2468,  5257,  4378,
  4404,  4430,  3290,   -61,   -37,   -28,   126,   907,-32768,   530,
   -81,  2837,  5280,-32768,-32768,  2468,-32768,  5303,-32768,  2468,
  1665,  1665,  5326,  5349,  1001,  1002,  1003,   871,  2468,  2903,
  2468,  2468,-32768,  6333,  6354,  6375,  6396,  6417,-32768,-32768,
  5372,    68,-32768,  3478,-32768,-32768,   873,   878,   887,-32768,
   895,  1008,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2468,  2468,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2468,  2468,  2468,  2468,  2468,  2468,
  2468,  1030,-32768,  2395,   540,-32768,-32768,  2468,  5395,  1031,
  1051,   921,-32768,   121,  2468,  1052,  1057,  1207,-32768,  1058,
   924,    26,  1060,-32768,  2468,-32768,   941,   540,   312,  4456,
   -81,-32768,  2395,  3506,  2395,  2977,   722,-32768,  1454,-32768,
  1019,  1665,  1665,  1062,  1665,   783,  1665,  1665,  1064,  1021,
  1665,  1665,-32768,   709,-32768,  2395,  1316,  1066,   929,  1069,
  1070,  1071,   766,  1072,  1073,  1074,  1075,  1076,  1077,  1078,
  1082,   511,  4482,  4508,-32768,-32768,  3534,   946,   -81,   -81,
   -81,  2395,  2395,  2395,  2395,  1087,   952,   962,   196,-32768,
   519,-32768,   530,  1090,  1355,  1095,  6438,  1096,  1097,  1098,
  1100,  1665,  1665,  1665,  1104,  4534,-32768,  3102,   853,  1103,
  1105,  1106,  1107,  1109,  1112,  1115,-32768,  1114,-32768,    15,
   983,  2468,  2468,  1665,   977,  2468,-32768,  6459,  5418,  6480,
  5441,  6501,  5464,  6522,  5487,  5510,   988,   325,   990,  6543,
   135,-32768,-32768,   260,   359,   984,  1118,  1490,-32768,-32768,
-32768,    26,  2468,-32768,   710,-32768,  6690,-32768,  1122,    64,
  2468,    52,   725,-32768,   730,  2468,   985,    47,    53,  1665,
  1125,   993,   994,  1127,  1128,  1665,   995,  1129,  1130,-32768,
   731,-32768,  1132,  2468,  1665,  1665,  1665,-32768,   142,  1665,
  1665,  1665,  1665,  1665,  1665,  1665,   209,  2468,  2468,  2468,
   997,-32768,   223,   477,   483,   737,   756,   762,   765,-32768,
  1665,  2468,-32768,-32768,  2219,   224,-32768,-32768,-32768,  1136,
-32768,-32768,-32768,-32768,  1138,  1139,  1055,-32768,  2468,  2468,
  2468,-32768,  1665,  1142,  2468,  2468,  1143,-32768,   -23,-32768,
  1146,  2468,  4560,  4586,   768,-32768,  2468,  6564,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1011,-32768,-32768,-32768,
-32768,  1665,   559,  2468,  1148,  1151,    28,-32768,  1153,  5533,
    26,-32768,-32768,-32768,   540,  4612,-32768,  1016,  1111,  6690,
  2468,-32768,   -81,-32768,   -81,  1156,-32768,  2468,  2468,-32768,
-32768,  1157,  2468,-32768,-32768,-32768,  1159,  4638,  1160,  1161,
  1162,  2468,  2468,   854,  1163,  1164,  1165,  1167,  1171,  1173,
-32768,  2526,  3562,  6585,  2322,   699,  3348,   -81,  1174,   -81,
  1175,   -81,  1177,  1178,  1179,  1180,  1181,   292,  1044,  6606,
  3590,   529,-32768,  1665,-32768,-32768,  1665,  3338,   581,  6627,
  1184,  1188,  1627,  1764,  1665,-32768,-32768,   381,  6690,  2468,
  2468,  1665,  1020,   769,  6690,  1665,  1192,  1191,  1193,  2041,
-32768,  1194,  1197,-32768,  1056,-32768,  1199,  2468,-32768,  1061,
  3618,   147,   179,-32768,  3646,  3674,-32768,  3702,  1195,  2468,
-32768,-32768,-32768,  2178,  2197,  1201,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  3025,  1202,  1065,-32768,  2468,-32768,  1063,
   530,   532,-32768,  1067,   536,-32768,  1079,   538,-32768,  1080,
-32768,-32768,-32768,-32768,  1205,  1665,  1208,  1081,  2468,  1210,
  1124,  2468,-32768,  2468,-32768,-32768,-32768,-32768,-32768,-32768,
  1212,-32768,  2468,  4664,  4690,-32768,  1665,  2468,  1213,  1214,
  1088,-32768,-32768,-32768,    26,-32768,  1135,-32768,  4716,  2468,
  1215,-32768,-32768,  1223,  1224,  1225,  1229,  4742,-32768,-32768,
-32768,-32768,-32768,   699,  3366,-32768,   234,  2219,   530,  2219,
   530,  2219,   530,-32768,   773,  1665,-32768,  3730,-32768,  2468,
  3758,  3786,-32768,  1091,  6690,  2468,  2468,   776,  6690,-32768,
-32768,-32768,  1238,-32768,  2468,  3814,-32768,-32768,-32768,-32768,
-32768,  1240,  1101,  2468,-32768,-32768,  3842,   546,   238,  3870,
   550,   245,  3898,   570,   369,  1665,  1244,  1185,  2969,  1108,
  3045,-32768,-32768,  2468,  6648,  4768,    31,-32768,  4794,-32768,
  1113,-32768,  3926,  1246,  2468,  1275,  1276,  2468,  1277,  1278,
  2468,  1279,  1140,-32768,  2468,-32768,   530,-32768,-32768,   777,
-32768,  2468,-32768,  1665,  2468,  1282,-32768,-32768,  1158,  3954,
-32768,-32768,  1172,  3982,-32768,-32768,  1176,  4010,-32768,  1298,
  3067,   377,  3035,  1299,  1203,  6669,   787,  4038,  1196,   530,
  1300,   530,  1302,   530,  1310,-32768,-32768,-32768,-32768,   530,
-32768,   540,-32768,  1204,  1312,  1314,   395,-32768,  1206,   414,
-32768,  1209,   424,-32768,  1217,   440,   788,-32768,  1218,  1665,
-32768,  1200,  1317,   530,  1336,   530,  1341,   530,-32768,   540,
  1344,   540,   791,  1346,-32768,   444,-32768,   471,-32768,   474,
-32768,-32768,   792,-32768,  1347,-32768,  1349,  1354,  1358,   540,
  1359,-32768,-32768,-32768,-32768,-32768,-32768,  1251,  1366,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   567,-32768,-32768,   784,-32768,   204,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -274,     1,-32768,    60,  1368,     7,  -352,  -173,    11,
-32768,-32768,-32768,-32768,-32768,  1369,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -571,  -707,-32768,-32768,-32768,    -3,-32768,   233,-32768, -1071,
   407,   316,    51,  -650,   468,-32768,   -58,     4
};


#define	YYLAST		6827


static const short yytable[] = {   213,
   127,   537,   460,   363,   126,  1128,   367,   129,    64,   372,
   140,   794,    65,   586,   145,   214,   207,   208,   586,   205,
   369,   854,   370,   133,   179,   173,   182,   207,   208,   193,
   219,   661,   130,   140,   666,   394,  1193,   277,   396,   150,
   196,   185,   145,   222,   186,   223,   165,   166,   103,   104,
   105,   106,   922,   224,   107,   225,   167,   917,   924,   103,
   104,   105,   106,   168,   174,   107,   136,   175,   455,   914,
   176,   207,   208,   137,   119,   120,   136,   141,   555,   556,
   453,   221,   216,   722,   142,   351,   352,   217,   146,   459,
   587,   588,   589,   590,   591,   587,   588,   589,   590,   591,
   141,   528,   923,   103,   104,   105,   106,   723,   925,   107,
   119,   120,   270,   271,   272,   206,   724,   273,   276,   351,
   352,   281,  1217,     3,   785,   278,   279,   301,   151,   493,
   303,   494,   304,   312,   315,   316,   353,   318,   312,   320,
   321,   909,   312,   324,   325,   119,   120,   333,   854,   165,
   166,   215,  1092,   216,   667,   592,   371,   209,   217,   167,
   881,   856,   134,   349,   350,   180,   177,   183,   212,   132,
   194,   220,   662,   350,   197,  1194,   456,   482,  1263,   351,
   352,   131,   483,   655,  1093,   135,   379,   380,   381,   667,
   383,   552,   319,   386,   387,   138,   323,   112,   113,   114,
   115,   119,   120,   942,   943,   448,   449,   450,   451,   756,
   570,   399,   786,   787,   951,   952,   119,   120,   405,   406,
   407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
   417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
   427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
   437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
  1006,   169,   171,   148,   178,   139,   653,   726,   119,   120,
   725,   312,   727,   728,   351,   352,   756,   461,   143,   149,
   466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
   476,   477,   478,   479,   480,   726,   226,   653,   227,   491,
   727,   728,   351,   352,   489,   726,   351,   352,   144,   726,
   727,   728,   643,   497,   727,   728,   726,   644,   502,   354,
   147,   727,   728,   489,   312,   457,   351,   352,   512,   148,
   514,   515,   516,   152,   518,   519,   520,   522,   522,   522,
   522,   853,   153,   365,   523,   523,   523,   523,   154,   163,
   351,   352,   539,   540,   541,   542,   270,   271,   543,   533,
   533,   158,   553,   536,   536,   903,   958,   558,   959,   973,
   164,   181,   563,   564,   112,   113,   114,   115,   509,  1146,
   228,   172,   229,  1176,   574,   575,   576,   577,   155,   578,
  1179,   156,   184,   157,   581,   187,   346,   584,   348,   854,
   583,   524,   525,   526,   355,   112,   113,   114,   115,   364,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   510,   296,   297,   119,   120,   351,   352,   298,   493,
   159,   499,   654,   160,  1133,   188,   161,  1055,   162,   189,
   726,   854,   190,   585,   854,   727,   728,   854,   726,   649,
   800,   402,   313,   727,   728,   493,   658,   313,   656,   191,
   199,   313,   657,   899,   447,   208,   726,   192,   493,  1107,
   198,   727,   728,   112,   113,   114,   115,   200,   201,   312,
   670,   202,   649,   674,   230,   726,   231,   676,   677,   679,
   727,   728,   119,   120,   204,   726,   103,   104,   105,   106,
   727,   728,   107,   312,   854,   203,   677,   697,   264,   902,
   904,   726,   265,   703,  1182,   726,   727,   728,   280,  1072,
   727,   728,  1228,   758,  1073,   713,   714,   266,   267,   854,
   351,   352,   854,   669,   717,   854,   268,  1149,   854,  1152,
  1253,  1155,   726,   207,   208,   726,   538,   727,   728,   282,
   727,   728,   735,   317,   299,   330,   737,   694,   854,  1255,
   854,   337,   854,   208,   232,   746,   233,   748,   749,  1257,
   293,   294,   295,   296,   297,   103,   104,   105,   106,   298,
   300,   107,   757,   531,   532,  1259,   779,   368,  1064,  1277,
   313,   374,   375,   348,   103,   104,   105,   106,   302,   322,
   107,   726,   332,  1040,   351,   352,   727,   728,   334,   799,
   351,   352,   335,   351,   352,  1212,  1278,   768,   769,  1279,
   960,   336,   961,   490,   338,   234,   962,   235,   963,   551,
   340,   770,   771,   772,   773,   774,   775,   776,   351,   352,
   312,   339,   490,   313,   780,   341,   351,   352,  1237,   342,
  1240,   788,  1243,   236,   838,   237,   351,   352,  1246,   351,
   352,   797,   855,   351,   352,   351,   352,   356,   957,   312,
   343,   312,  1059,   351,   352,  1108,   344,   351,   352,  1110,
   345,  1112,  1266,   378,  1268,   238,  1270,   239,   240,  1175,
   241,   357,   312,  1178,   778,   366,   358,   351,   352,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,  1181,   242,   359,   243,   298,   312,   312,
   312,   312,   244,   803,   245,   805,  1065,   246,   248,   247,
   249,   376,   506,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   250,   821,   251,   252,   298,
   253,  1143,   385,   377,   295,   296,   297,   382,   883,   884,
   712,   298,   888,    28,    29,    30,    31,   254,    33,   255,
   384,   828,   846,   847,   848,   849,   388,    38,    39,   389,
   256,   757,   257,   731,   390,   905,   119,   120,   258,   910,
   259,   260,   486,   261,   216,   392,   391,   916,   313,   217,
   393,   262,   920,   263,   493,   395,   503,   678,   680,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   938,   641,   313,   642,   298,   678,   829,   493,   493,   652,
   695,   812,   397,   813,   953,   954,   955,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   398,   968,   970,   400,
   298,   971,   493,   911,   820,   912,  1007,  1026,   298,  1027,
   871,   650,   651,   401,   404,   978,   979,   980,   493,   452,
   918,   983,   984,   493,   493,   919,   936,   462,   989,   986,
   493,   463,   964,   995,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   464,   493,
  1000,   965,   298,   802,   283,   493,   999,   966,   493,   488,
   967,   992,  1078,   993,  1079,   487,  1156,  1011,  1157,   992,
  1078,  1167,  1214,   511,  1015,  1016,   517,   527,   465,  1018,
   992,  1260,  1234,  1261,   992,  1280,  1275,  1281,  1024,  1025,
   557,   560,   561,  1159,   562,   571,   568,   646,  1034,   645,
   647,   843,   844,   845,   648,  1035,   659,   660,   664,   313,
   675,   671,   533,   681,   682,   683,   536,   738,   739,   685,
   686,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   687,  1074,  1075,   313,   298,
   313,   872,   688,   691,   690,   692,   693,   711,   699,   707,
   708,   709,   715,   716,  1089,   710,   206,   742,   743,   744,
   762,   313,   745,   767,  1213,   763,  1098,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   764,   766,   777,  1105,   298,   782,   313,   313,   313,
   313,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,  1118,   783,   789,  1121,   298,
  1122,   784,   790,   793,   792,   796,   798,   807,   810,  1125,
   816,   817,   823,   824,  1129,   825,   826,   827,   830,   831,
   832,   833,   834,   835,   836,   837,  1136,   972,   808,   809,
   842,   811,   850,   814,   815,   857,   851,   818,   819,   852,
   859,   861,   862,   863,  1147,   864,  1150,   868,  1153,   873,
   533,   874,   875,   876,   536,   877,  1161,   878,   879,   880,
   882,   887,  1165,  1166,   907,   906,   898,   913,   900,   921,
   927,  1169,   930,   931,   934,   935,   937,   928,   929,   933,
  1173,   956,   974,   975,   976,   977,   982,   985,   865,   866,
   867,   987,   997,  1001,  1002,  1012,  1009,  1013,  1004,  1010,
   995,  1014,  1017,  1019,  1077,  1021,  1022,  1023,  1028,  1029,
  1030,  1200,  1031,  1248,  1204,   481,  1032,  1208,  1033,  1043,
  1046,  1211,  1049,  1051,  1052,  1053,  1054,  1056,  1216,  1067,
  1042,  1218,  1045,  1068,  1048,  1081,  1082,  1087,  1083,  1097,
  1085,  1271,  1086,  1274,  1088,  1090,  1101,  1103,  1106,  1104,
  1114,  1109,   791,  1120,  1116,  1119,   926,  1123,  1130,  1131,
  1137,  1286,   932,  1111,  1113,  1117,  1132,  1134,  1138,  1139,
  1140,   939,   940,   941,  1141,  1164,   944,   945,   946,   947,
   948,   949,   950,  1168,  1171,  1185,  1172,    75,   305,  1184,
  1289,  1198,  1188,    79,    80,    81,  1196,   969,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   981,
  1201,  1202,  1205,  1206,  1209,  1210,  1219,   306,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,  1220,  1226,  1231,  1238,   298,  1241,   998,    28,
    29,    30,    31,    32,    33,  1244,  1222,  1251,  1252,   307,
  1224,   822,  1265,    38,    39,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,  1236,
  1148,  1267,  1151,   298,  1154,  1264,  1269,  1232,  1250,  1272,
  1254,  1276,  1282,  1256,  1283,   108,   109,   110,   111,  1284,
   858,  1258,  1262,  1285,  1287,  1290,   915,  1190,   760,    63,
    71,     0,   116,   308,  1003,     0,     0,   118,     0,     0,
  1060,     0,   121,  1061,     0,     0,     0,   124,     0,     0,
   508,  1071,     0,    75,   305,     0,     0,     0,  1076,    79,
    80,    81,  1080,     0,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,     0,     0,     0,     0,     0,
     0,     0,     0,   306,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,    28,    29,    30,    31,    32,
    33,   491,  1115,     0,     0,   307,     0,     0,     0,    38,
    39,     0,     0,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
   326,   298,     0,     0,     0,   908,     0,     0,     0,     0,
     0,   108,   109,   110,   111,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   116,   327,
     0,     0,  1158,   118,     0,     0,     0,     0,   121,     0,
    75,   305,     0,   124,     0,   328,    79,    80,    81,     0,
     0,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,  1183,     0,     0,     0,     0,     0,     0,     0,
   306,     0,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   492,   296,   297,     0,     0,     0,     0,
   298,     0,    28,    29,    30,    31,    32,    33,   491,     0,
     0,     0,   307,     0,     0,     0,    38,    39,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,   373,     0,     0,
     0,     0,  1069,     0,     0,     0,     0,     0,   108,   109,
   110,   111,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   116,   327,     0,     0,     0,
   118,     0,     0,     0,     0,   121,     0,    75,   305,     0,
   124,     0,   328,    79,    80,    81,     0,     0,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     0,     0,     0,     0,     0,     0,     0,   306,     0,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   510,   296,   297,     0,     0,     0,     0,   298,     0,    28,
    29,    30,    31,    32,    33,   572,     0,     0,     0,   307,
     0,     0,     0,    38,    39,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,     0,     0,  1070,
     0,     0,     0,     0,     0,   108,   109,   110,   111,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   116,   327,     0,     0,     0,   118,     0,     0,
     0,     0,   121,     0,    75,   305,     0,   124,     0,   328,
    79,    80,    81,     0,     0,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,     0,     0,     0,     0,
     0,     0,     0,     0,   306,     0,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,    28,    29,    30,    31,
    32,    33,   665,     0,     0,     0,   307,     0,     0,     0,
    38,    39,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   108,   109,   110,   111,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
   308,     0,     0,     0,   118,     0,     0,     0,     0,   121,
     0,    75,   305,     0,   124,     0,   507,    79,    80,    81,
     0,     0,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     0,   306,     0,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,    28,    29,    30,    31,    32,    33,     0,
     0,     0,     0,   307,    75,   269,     0,    38,    39,     0,
    79,    80,    81,     0,     0,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,  1084,     0,     0,   108,
   109,   110,   111,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   116,   308,     0,     0,
     0,   118,     0,     0,     0,     0,   121,     0,    75,   269,
     0,   124,     0,   696,    79,    80,    81,     0,     0,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   108,   109,   110,   111,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
   117,     0,     0,     0,   118,     0,     0,     0,     0,   121,
     0,     0,   274,     0,   124,     0,   275,     0,     0,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,  1099,     0,     0,   108,   109,   110,   111,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1100,   116,   117,     0,     0,     0,   118,     0,
     0,     0,     0,   121,     0,     0,   672,     0,   124,     0,
   673,    75,   269,     0,     0,     0,     0,    79,    80,    81,
     0,     0,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,     0,     0,     0,    75,    76,    77,     0,
    78,     0,    79,    80,    81,     0,     0,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
   104,   105,   106,     0,     0,   107,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   108,
   109,   110,   111,   298,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   360,   361,     0,     0,
     0,   118,     0,     0,     0,     0,   362,     0,     0,     0,
     0,   124,     0,   168,   108,   109,   110,   111,   112,   113,
   114,   115,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   116,   117,     0,     0,     0,   118,   119,   120,     0,
     0,   121,     0,   122,     0,   123,   124,    75,   305,     0,
     0,     0,     0,    79,    80,    81,     0,     0,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     0,     0,     0,     0,     0,     0,     0,   306,     0,     0,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,    28,
    29,    30,    31,    32,    33,  1038,     0,  1039,     0,   307,
    75,   269,     0,    38,    39,     0,    79,    80,    81,     0,
     0,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,     0,     0,     0,   108,   109,   110,   111,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   116,   308,     0,     0,     0,   118,    75,   269,
   208,     0,   121,     0,    79,    80,    81,   124,     0,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     0,   103,   104,   105,   106,     0,     0,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
   110,   111,     0,     0,     5,     6,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   116,   117,     0,     0,     0,
   118,     0,     0,     0,     0,   121,     0,     0,     0,     0,
   124,     0,     0,     0,     0,   544,    11,    12,   545,    14,
    15,   546,    17,   547,    19,     0,    20,     0,    22,    23,
     0,    25,    26,     0,     0,     0,   108,   109,   110,   111,
     0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
     5,     6,     0,   116,   117,     0,     0,     0,   118,    41,
    42,    43,     0,   121,     0,     0,     0,     0,   124,     0,
     0,     0,     0,    50,    51,    52,     0,    53,     0,     0,
   548,   544,    11,    12,   545,    14,    15,   546,    17,   547,
    19,     0,    20,     0,    22,    23,     0,    25,    26,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    37,     0,     5,     6,   554,     0,
     0,     0,     0,     0,     0,    41,    42,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    50,
    51,    52,     0,    53,     0,     0,   548,   544,    11,    12,
   545,    14,    15,   546,    17,   547,    19,     0,    20,     0,
    22,    23,     0,    25,    26,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    37,     0,     5,     6,   559,     0,     0,     0,     0,     0,
     0,    41,    42,    43,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    50,    51,    52,     0,    53,
     0,     0,   548,   544,    11,    12,   545,    14,    15,   546,
    17,   547,    19,     0,    20,     0,    22,    23,     0,    25,
    26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    37,     0,     5,     6,
   579,     0,     0,     0,     0,     0,     0,    41,    42,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    50,    51,    52,     0,    53,     0,     0,   548,   544,
    11,    12,   545,    14,    15,   546,    17,   547,    19,     0,
    20,     0,    22,    23,     0,    25,    26,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    37,     0,     5,     6,   580,     0,     0,     0,
     0,     0,     0,    41,    42,    43,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    50,    51,    52,
     0,    53,     0,     0,   548,   544,    11,    12,   545,    14,
    15,   546,    17,   547,    19,     0,    20,     0,    22,    23,
     0,    25,    26,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
     5,     6,   732,     0,   806,     0,     0,     0,     0,    41,
    42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,    51,    52,     0,    53,     0,     0,
   548,   544,    11,    12,   545,    14,    15,   546,    17,   547,
    19,     0,    20,     0,    22,    23,     0,    25,    26,     0,
  1102,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    37,     0,     5,     6,   747,     0,
  1189,     0,     0,     0,     0,    41,    42,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    50,
    51,    52,  1227,    53,     0,     0,   548,   544,    11,    12,
   545,    14,    15,   546,    17,   547,    19,     0,    20,     0,
    22,    23,     0,    25,    26,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   870,
    37,     0,     0,   298,  1186,     0,     0,     0,     0,     0,
     0,    41,    42,    43,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    50,    51,    52,     0,    53,
     0,     0,   548,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
  1229,   298,     0,     0,     0,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
    -3,     1,     0,   298,    -3,     0,     0,     0,     0,     0,
     0,     0,    -3,    -3,     0,     0,     0,     0,     0,     0,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,    -3,     0,     0,   298,     0,
    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,     0,     0,     0,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,     0,    -3,    -3,    -3,     0,    -3,     0,     0,    -3,
    -3,     0,     4,     0,     0,     0,    -3,    -3,    -3,    -3,
     5,     6,    -3,     0,    -3,     0,    -3,    -3,    -3,    -3,
     0,    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,
    -3,     0,     0,     7,     0,     0,     0,     0,     8,     9,
     0,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,     0,    20,    21,    22,    23,    24,    25,    26,     0,
     0,     0,    27,    28,    29,    30,    31,    32,    33,     0,
    34,    35,    36,     0,    37,     0,     0,    38,    39,     5,
     6,     0,     0,     0,    40,    41,    42,    43,     0,     0,
    44,     0,    45,     0,    46,    47,    48,    49,     0,    50,
    51,    52,     0,    53,    54,    55,    56,    57,    58,     0,
   544,    11,    12,   545,    14,    15,   546,    17,   547,    19,
     0,    20,     0,    22,    23,     0,    25,    26,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,    37,     0,     0,   298,     0,   454,     0,
     0,     0,     0,   529,    41,    42,    43,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    50,    51,
    52,     0,    53,     0,     0,   548,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,  1062,     0,  1063,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,  1144,
     0,  1145,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,     0,     0,   700,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,     0,     0,   704,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,     0,     0,   705,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,     0,     0,   759,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,     0,
     0,   804,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,     0,     0,   841,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,     0,     0,  1036,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,     0,     0,  1058,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,     0,     0,  1091,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,     0,
     0,  1094,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,     0,     0,  1095,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,     0,     0,  1096,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,     0,     0,  1160,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,     0,     0,  1162,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,     0,
     0,  1163,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,     0,     0,  1170,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,     0,     0,  1174,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,     0,     0,  1177,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,     0,     0,  1180,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,     0,
     0,  1197,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,     0,     0,  1221,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,     0,     0,  1223,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,     0,     0,  1225,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,     0,     0,  1235,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,   484,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,   529,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,   530,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,   569,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,   621,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,   622,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,   635,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,   636,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,   637,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,   638,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,   639,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,   640,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,   719,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,   720,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,   721,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,   801,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,   839,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,   840,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,   869,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,   990,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,   991,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,  1008,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,  1020,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,  1126,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
     0,     0,     0,  1127,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,     0,     0,     0,  1135,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,  1142,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
     0,  1192,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,     0,     0,     0,  1195,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
   458,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,   582,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,   600,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,   602,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,   604,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,   606,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,   608,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,   610,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,   612,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,   614,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
   616,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,   618,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,   620,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,   624,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,   626,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,   628,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,   630,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,   632,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,   634,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,   718,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
   734,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,   736,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,     0,     0,   740,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,     0,     0,   741,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
     0,     0,   755,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,     0,     0,   781,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,     0,     0,   890,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,     0,
     0,   892,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,     0,     0,   894,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,     0,     0,   896,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,     0,     0,
   897,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,     0,     0,  1005,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   454,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   485,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   495,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   496,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   498,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   500,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   501,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   504,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   505,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   513,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   565,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   566,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   567,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   573,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   599,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   601,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   603,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   605,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   607,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   609,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   611,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   613,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   615,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   617,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   619,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   623,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   625,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   627,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   629,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   631,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   633,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   684,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   689,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   698,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   701,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   702,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   706,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   750,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   751,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,   752,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,   753,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,   754,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,   860,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,   889,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298,     0,   891,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,     0,     0,     0,     0,   298,     0,   893,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,     0,     0,     0,     0,   298,     0,
   895,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,     0,     0,     0,     0,   298,
     0,   901,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,     0,     0,     0,     0,
   298,     0,   996,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,     0,     0,     0,
     0,   298,     0,  1037,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,     0,     0,
     0,     0,   298,     0,  1057,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,     0,
     0,     0,     0,   298,     0,  1066,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     0,     0,     0,     0,   298,     0,  1191,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,     0,     0,     0,     0,   298,     0,  1233,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,     0,     0,     0,     0,   298
};

static const short yycheck[] = {    58,
     4,   354,   277,   177,     4,  1077,   180,     4,     2,   183,
    71,   662,     2,     4,    71,     4,     4,     5,     4,     4,
     4,   729,     6,     6,     4,     4,     4,     4,     5,     4,
     4,     4,    13,    71,     6,   209,     6,     4,   212,    49,
     4,    43,    71,   138,    46,   140,   128,   129,    36,    37,
    38,    39,     6,   138,    42,   140,   138,     6,     6,    36,
    37,    38,    39,   145,    43,    42,   138,    46,     7,     6,
    49,     4,     5,   145,   134,   135,   138,   138,     6,     7,
   140,    78,   142,   145,   145,   128,   129,   147,   145,     7,
    81,    82,    83,    84,    85,    81,    82,    83,    84,    85,
   138,   144,    56,    36,    37,    38,    39,   145,    56,    42,
   134,   135,   116,   117,   118,   100,   145,   121,   122,   128,
   129,   125,  1194,     6,     4,    92,    93,   131,   138,   144,
   134,   146,   136,   137,   138,   139,   145,   141,   142,   143,
   144,   792,   146,   147,   148,   134,   135,   151,   856,   128,
   129,   140,     6,   142,   126,   146,   140,   145,   147,   138,
   146,   733,   145,   167,   168,   145,   145,   145,   145,   138,
   145,   145,   145,   177,   138,   145,   115,   139,  1250,   128,
   129,    49,   144,   458,     6,     6,   190,   191,   192,   126,
   194,   365,   142,   197,   198,   138,   146,   115,   116,   117,
   118,   134,   135,    62,    63,   264,   265,   266,   267,   142,
   384,   215,    92,    93,     6,     7,   134,   135,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   911,    29,    30,   138,    32,   138,     7,    72,   134,   135,
   145,   275,    77,    78,   128,   129,   142,   277,   138,    53,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,    72,   138,     7,   140,     8,
    77,    78,   128,   129,   308,    72,   128,   129,   138,    72,
    77,    78,   139,   317,    77,    78,    72,   144,   322,   145,
   138,    77,    78,   327,   328,   275,   128,   129,   332,   138,
   334,   335,   336,    49,   338,   339,   340,   341,   342,   343,
   344,   146,    49,   145,   341,   342,   343,   344,    49,   138,
   128,   129,   356,   357,   358,   359,   360,   361,   362,   353,
   354,    51,   366,   353,   354,     7,   144,   371,   146,   146,
   145,    49,   376,   377,   115,   116,   117,   118,   328,   146,
   138,   145,   140,   146,   388,   389,   390,   391,    46,   393,
   146,    49,     6,    51,   398,     4,   164,   401,   166,  1107,
   400,   342,   343,   344,   172,   115,   116,   117,   118,   177,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   134,   135,   128,   129,   137,   144,
    43,   146,   142,    46,  1085,     4,    49,   146,    51,     4,
    72,  1149,   138,   145,  1152,    77,    78,  1155,    72,   453,
   139,   219,   137,    77,    78,   144,   460,   142,   458,   138,
     6,   146,   459,   139,     4,     5,    72,   138,   144,  1041,
   138,    77,    78,   115,   116,   117,   118,   100,   100,   483,
   484,   100,   486,   487,   138,    72,   140,   491,   492,   493,
    77,    78,   134,   135,     4,    72,    36,    37,    38,    39,
    77,    78,    42,   507,  1212,   100,   510,   511,   138,   784,
   785,    72,   138,   517,   146,    72,    77,    78,     4,   139,
    77,    78,   146,   582,   144,   529,   530,   138,   138,  1237,
   128,   129,  1240,   483,   538,  1243,   138,  1109,  1246,  1111,
   146,  1113,    72,     4,     5,    72,   144,    77,    78,     6,
    77,    78,   556,   138,     6,   149,   560,   507,  1266,   146,
  1268,   155,  1270,     5,   138,   569,   140,   571,   572,   146,
   128,   129,   130,   131,   132,    36,    37,    38,    39,   137,
     6,    42,   582,   351,   352,   146,   645,   181,     8,   146,
   275,   185,   186,   361,    36,    37,    38,    39,     5,   138,
    42,    72,   138,   956,   128,   129,    77,    78,   145,   668,
   128,   129,   138,   128,   129,  1187,   146,   621,   622,   146,
   144,   138,   146,   308,   145,   138,   144,   140,   146,   144,
   138,   635,   636,   637,   638,   639,   640,   641,   128,   129,
   644,   145,   327,   328,   648,   138,   128,   129,  1220,   138,
  1222,   655,  1224,   138,   144,   140,   128,   129,  1230,   128,
   129,   665,   144,   128,   129,   128,   129,   140,   842,   673,
   138,   675,   144,   128,   129,   144,   138,   128,   129,   144,
     4,   144,  1254,     6,  1256,   138,  1258,   140,   138,   144,
   140,   145,   696,   144,   644,   140,   145,   128,   129,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   144,   138,   145,   140,   137,   722,   723,
   724,   725,   138,   673,   140,   675,   146,   138,   138,   140,
   140,   140,   326,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   138,   696,   140,   138,   137,
   140,  1104,    95,   140,   130,   131,   132,   142,   762,   763,
   528,   137,   766,    65,    66,    67,    68,   138,    70,   140,
   145,     6,   722,   723,   724,   725,   138,    79,    80,   138,
   138,   781,   140,   551,   138,   785,   134,   135,   138,   793,
   140,   138,   140,   140,   142,     6,   138,   801,   483,   147,
   138,   138,   806,   140,   144,     6,   146,   492,   493,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   824,   140,   507,   142,   137,   510,    61,   144,   144,   146,
   146,    49,     6,    51,   838,   839,   840,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   140,   851,   852,     4,
   137,   855,   144,   144,   146,   146,   915,     4,   137,     6,
     8,   455,   456,   145,     6,   869,   870,   871,   144,     5,
   146,   875,   876,   144,   144,   146,   146,   142,   882,   879,
   144,     7,   146,   887,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   140,   144,
   904,   146,   137,   671,     6,   144,   903,   146,   144,    46,
   146,   144,   144,   146,   146,   145,   144,   921,   146,   144,
   144,   146,   146,     7,   928,   929,     7,   139,     6,   933,
   144,   144,   146,   146,   144,   144,   146,   146,   942,   943,
     6,   138,     7,  1117,     7,   145,    92,   139,   952,   144,
   139,   719,   720,   721,   144,   952,     6,     4,   141,   644,
   145,     7,   956,    95,     7,     7,   956,   561,   562,     7,
    95,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,     7,   990,   991,   673,   137,
   675,   139,     7,     7,    95,     7,     6,   142,     7,   139,
   139,   139,   146,   146,  1008,   139,   100,     7,     7,     7,
   138,   696,   142,     6,  1188,   138,  1020,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   145,   138,     4,  1038,   137,     6,   722,   723,   724,
   725,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,  1059,     6,     6,  1062,   137,
  1064,   141,     6,   140,     7,     6,   126,    49,     7,  1073,
     7,    51,     7,   145,  1078,     7,     7,     7,     7,     7,
     7,     7,     7,     7,     7,     4,  1090,   855,   682,   683,
   145,   685,     6,   687,   688,     6,   145,   691,   692,   138,
     6,     6,     6,     6,  1108,     6,  1110,     4,  1112,     7,
  1104,     7,     7,     7,  1104,     7,  1120,     6,     4,     6,
   138,   145,  1126,  1127,     7,   142,   139,     6,   139,   145,
     6,  1135,     6,     6,     6,     6,     5,   145,   145,   145,
  1144,   145,     7,     6,     6,    91,     5,     5,   742,   743,
   744,     6,   142,     6,     4,   923,   141,   925,     6,    49,
  1164,     6,     6,     5,   145,     6,     6,     6,     6,     6,
     6,  1175,     6,  1232,  1178,     6,     6,  1181,     6,     6,
     6,  1185,     6,     6,     6,     6,     6,   144,  1192,     6,
   958,  1195,   960,     6,   962,     4,     6,   142,     6,     5,
     7,  1260,     6,  1262,     6,   145,     6,     6,   146,   145,
     6,   145,     6,    90,     7,     6,   810,     6,     6,     6,
     6,  1280,   816,   145,   145,   145,   139,    93,     6,     6,
     6,   825,   826,   827,     6,   145,   830,   831,   832,   833,
   834,   835,   836,     6,     5,    61,   146,     3,     4,     6,
     0,     6,   145,     9,    10,    11,   144,   851,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,   873,
     6,     6,     6,     6,     6,   146,     5,    43,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   145,     6,     6,     6,   137,     6,   902,    65,
    66,    67,    68,    69,    70,     6,   145,     6,     5,    75,
   145,     6,     6,    79,    80,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   144,
  1108,     6,  1110,   137,  1112,   146,     6,   145,   145,     6,
   145,     6,     6,   145,     6,   111,   112,   113,   114,     6,
     6,   145,   145,     6,     6,     0,   800,  1164,   585,     2,
     2,    -1,   128,   129,   907,    -1,    -1,   133,    -1,    -1,
   974,    -1,   138,   977,    -1,    -1,    -1,   143,    -1,    -1,
   146,   985,    -1,     3,     4,    -1,    -1,    -1,   992,     9,
    10,    11,   996,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    43,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    65,    66,    67,    68,    69,
    70,     8,  1056,    -1,    -1,    75,    -1,    -1,    -1,    79,
    80,    -1,    -1,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
   100,   137,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
    -1,    -1,  1116,   133,    -1,    -1,    -1,    -1,   138,    -1,
     3,     4,    -1,   143,    -1,   145,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,  1156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    65,    66,    67,    68,    69,    70,     8,    -1,
    -1,    -1,    75,    -1,    -1,    -1,    79,    80,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,   100,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
   133,    -1,    -1,    -1,    -1,   138,    -1,     3,     4,    -1,
   143,    -1,   145,     9,    10,    11,    -1,    -1,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    65,
    66,    67,    68,    69,    70,     8,    -1,    -1,    -1,    75,
    -1,    -1,    -1,    79,    80,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   128,   129,    -1,    -1,    -1,   133,    -1,    -1,
    -1,    -1,   138,    -1,     3,     4,    -1,   143,    -1,   145,
     9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    65,    66,    67,    68,
    69,    70,     8,    -1,    -1,    -1,    75,    -1,    -1,    -1,
    79,    80,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
   129,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,
    -1,     3,     4,    -1,   143,    -1,   145,     9,    10,    11,
    -1,    -1,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    43,    -1,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    65,    66,    67,    68,    69,    70,    -1,
    -1,    -1,    -1,    75,     3,     4,    -1,    79,    80,    -1,
     9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,     6,    -1,    -1,   111,
   112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
    -1,   133,    -1,    -1,    -1,    -1,   138,    -1,     3,     4,
    -1,   143,    -1,   145,     9,    10,    11,    -1,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
   129,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,
    -1,    -1,   141,    -1,   143,    -1,   145,    -1,    -1,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,   111,   112,   113,   114,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     6,   128,   129,    -1,    -1,    -1,   133,    -1,
    -1,    -1,    -1,   138,    -1,    -1,   141,    -1,   143,    -1,
   145,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    -1,    -1,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,     3,     4,     5,    -1,
     7,    -1,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    -1,    36,
    37,    38,    39,    -1,    -1,    42,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   111,
   112,   113,   114,   137,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
    -1,   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,
    -1,   143,    -1,   145,   111,   112,   113,   114,   115,   116,
   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   128,   129,    -1,    -1,    -1,   133,   134,   135,    -1,
    -1,   138,    -1,   140,    -1,   142,   143,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    65,
    66,    67,    68,    69,    70,   144,    -1,   146,    -1,    75,
     3,     4,    -1,    79,    80,    -1,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,   111,   112,   113,   114,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   128,   129,    -1,    -1,    -1,   133,     3,     4,
     5,    -1,   138,    -1,     9,    10,    11,   143,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    39,    -1,    -1,    42,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
   143,    -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    -1,    54,    -1,    56,    57,
    -1,    59,    60,    -1,    -1,    -1,   111,   112,   113,   114,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    -1,
    12,    13,    -1,   128,   129,    -1,    -1,    -1,   133,    87,
    88,    89,    -1,   138,    -1,    -1,    -1,    -1,   143,    -1,
    -1,    -1,    -1,   101,   102,   103,    -1,   105,    -1,    -1,
   108,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    -1,    56,    57,    -1,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    76,    -1,    12,    13,   146,    -1,
    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
   102,   103,    -1,   105,    -1,    -1,   108,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    -1,    54,    -1,
    56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    76,    -1,    12,    13,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   101,   102,   103,    -1,   105,
    -1,    -1,   108,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,    59,
    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    76,    -1,    12,    13,
   146,    -1,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   101,   102,   103,    -1,   105,    -1,    -1,   108,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
    54,    -1,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    76,    -1,    12,    13,   146,    -1,    -1,    -1,
    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,
    -1,   105,    -1,    -1,   108,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    -1,    54,    -1,    56,    57,
    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    -1,
    12,    13,   146,    -1,     8,    -1,    -1,    -1,    -1,    87,
    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   101,   102,   103,    -1,   105,    -1,    -1,
   108,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    -1,    56,    57,    -1,    59,    60,    -1,
     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    76,    -1,    12,    13,   146,    -1,
     6,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
   102,   103,     6,   105,    -1,    -1,   108,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    -1,    54,    -1,
    56,    57,    -1,    59,    60,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,     8,
    76,    -1,    -1,   137,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   101,   102,   103,    -1,   105,
    -1,    -1,   108,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
   146,   137,    -1,    -1,    -1,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
     0,     1,    -1,   137,     4,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    35,    -1,    -1,   137,    -1,
    40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    64,    65,    66,    67,    68,    69,
    70,    -1,    72,    73,    74,    -1,    76,    -1,    -1,    79,
    80,    -1,     4,    -1,    -1,    -1,    86,    87,    88,    89,
    12,    13,    92,    -1,    94,    -1,    96,    97,    98,    99,
    -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
   110,    -1,    -1,    35,    -1,    -1,    -1,    -1,    40,    41,
    -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
    72,    73,    74,    -1,    76,    -1,    -1,    79,    80,    12,
    13,    -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,
    92,    -1,    94,    -1,    96,    97,    98,    99,    -1,   101,
   102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    -1,    56,    57,    -1,    59,    60,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    76,    -1,    -1,   137,    -1,   139,    -1,
    -1,    -1,    -1,   144,    87,    88,    89,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
   103,    -1,   105,    -1,    -1,   108,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 146 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 159 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 160 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 161 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 162 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 166 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 170 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 171 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 176 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 180 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 187 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 192 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 207 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 220 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 249 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 256 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 266 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 282 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 284 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 289 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 291 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 296 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 486 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
 	  // yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
	  //       ViewCoordIdx, 3 * ViewNumNodes);
	  ViewNumNodes = ViewCoordIdx/3;
	}
	for(int i = 0; i < 3; i++)
	  for(int j = 0; j < ViewNumNodes; j++)
	    List_Add(ViewValueList, &ViewCoord[3*j+i]);
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 500 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewCoordIdx/3)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 511 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 516 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 524 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 531 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 538 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 543 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 551 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 558 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 566 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 574 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-11].l, yyvsp[-8].l, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 52:
#line 581 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 53:
#line 585 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 590 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 55:
#line 598 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 56:
#line 599 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 57:
#line 600 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 58:
#line 601 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 59:
#line 602 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 60:
#line 606 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 61:
#line 607 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 62:
#line 615 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 63:
#line 646 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 64:
#line 685 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 739 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 756 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 67:
#line 774 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 68:
#line 785 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 69:
#line 802 "Gmsh.y"
{ 
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 70:
#line 809 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 71:
#line 823 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 72:
#line 840 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 73:
#line 866 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 74:
#line 893 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 75:
#line 907 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 76:
#line 924 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 77:
#line 938 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 78:
#line 955 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 79:
#line 975 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 80:
#line 998 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 81:
#line 1008 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 82:
#line 1023 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 83:
#line 1027 "Gmsh.y"
{ 
      yyval.i = GModel::current()->setPhysicalName(std::string(yyvsp[0].c),
					      ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 84:
#line 1040 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v;
	if(!myGmshSurface)
	  v = Create_Vertex(num, x, y, z, lc, 1.0);
	else
	  v = Create_Vertex(num, x, y, myGmshSurface, lc);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(v->Pos.X, v->Pos.Y, v->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1062 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 86:
#line 1078 "Gmsh.y"
{
      AttractorField *att = new AttractorField();
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
        double d;
        List_Read(yyvsp[-1].l, i, &d);
        Vertex *v = FindPoint((int)d); 
        if(v)
          att->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
        else{
          GVertex *gv = GModel::current()->vertexByTag((int)d);
          if(gv) 
            att->addPoint(gv->x(), gv->y(), gv->z());
        }
      }
      att->buildFastSearchStructures();
      fields.insert(att, (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1099 "Gmsh.y"
{
      fields.insert(new LatLonField(fields.get((int)yyvsp[-1].d)), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 88:
#line 1106 "Gmsh.y"
{
      Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-1].d);
      if(vv) 
        fields.insert(new PostViewField(*vv), (int)yyvsp[-4].d);
      else
        yymsg(GERROR, "Field %i error, view %i does not exist",(int)yyvsp[-4].d,(int)yyvsp[-1].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 89:
#line 1117 "Gmsh.y"
{
      double pars[] = {0, CTX.lc/10, CTX.lc, CTX.lc/100, CTX.lc/20};
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4)
	  yymsg(GERROR, "Too many parameters for Thresold Field (max=5)");
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      fields.insert(new ThresholdField(fields.get((int)pars[0]), pars[1], 
				       pars[2], pars[3], pars[4]), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 90:
#line 1132 "Gmsh.y"
{
      std::list<Field*> *flist = new std::list<Field*>;
      flist->resize(0);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
	Field *pfield = fields.get((int)id);
	if(pfield)flist->push_front(pfield);
      }
      fields.insert(new FunctionField(flist,yyvsp[-2].c),(int)yyvsp[-5].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 91:
#line 1147 "Gmsh.y"
{
      fields.insert(new StructuredField(yyvsp[-1].c), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 92:
#line 1154 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
        BGMAddField(fields.get((int)id));
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 93:
#line 1166 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 1, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *attractor = new AttractorField();
      fields.insert(attractor);
      Field *threshold = new ThresholdField(attractor, pars[0], pars[0] * pars[4], 
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  attractor->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
	else{
	  GVertex *gv = GModel::current()->vertexByTag((int)d);
	  if(gv) 
	    attractor->addPoint(gv->x(), gv->y(), gv->z());
	}
      }
      attractor->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 94:
#line 1200 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *att = new AttractorField();
      fields.insert(att);
      Field *threshold = new ThresholdField(att, pars[0], pars[0] * pars[4],
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  att->addCurve(c, (int)pars[3]);
	}
	else{
	  GEdge *ge = GModel::current()->edgeByTag((int)d);
	  if(ge){
	    att->addGEdge(ge, (int)pars[3]);
	  }
	}
      }
      att->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 95:
#line 1236 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GModel::current()->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 96:
#line 1258 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1276 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1294 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1312 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1338 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1356 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1383 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1402 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1420 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1438 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1464 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1481 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1500 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 109:
#line 1518 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 110:
#line 1556 "Gmsh.y"
{
      myGmshSurface = 0;
    ;
    break;}
case 111:
#line 1560 "Gmsh.y"
{
      myGmshSurface = gmshSurface :: surfaceByTag ( (int) yyvsp[-1].d);
    ;
    break;}
case 112:
#line 1564 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d, type = 0;
      myGmshSurface = gmshParametricSurface::NewParametricSurface ((int)yyvsp[-6].d,yyvsp[-3].c,yyvsp[-2].c,yyvsp[-1].c);
    ;
    break;}
case 113:
#line 1569 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 114:
#line 1591 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "PolarSphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshPolarSphere::NewPolarSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 115:
#line 1613 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 116:
#line 1629 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 117:
#line 1649 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 118:
#line 1666 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 119:
#line 1683 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 120:
#line 1704 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 121:
#line 1709 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 122:
#line 1714 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 123:
#line 1719 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 124:
#line 1726 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 125:
#line 1727 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 126:
#line 1728 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 127:
#line 1733 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 128:
#line 1737 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 129:
#line 1741 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(v){
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GVertex *gv = GModel::current()->vertexByTag(TheShape.Num);
	  if(gv){
	    TheShape.Type = MSH_POINT_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown point %d", TheShape.Num);
	}
      }
    ;
    break;}
case 130:
#line 1764 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(c){
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GEdge *ge = GModel::current()->edgeByTag(TheShape.Num);
	  if(ge){
	    TheShape.Type = MSH_SEGM_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	}
      }
    ;
    break;}
case 131:
#line 1787 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(s){
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GFace *gf = GModel::current()->faceByTag(TheShape.Num);
	  if(gf){
	    TheShape.Type = MSH_SURF_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	}
      }
    ;
    break;}
case 132:
#line 1810 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(v){
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GRegion *gr = GModel::current()->regionByTag(TheShape.Num);
	  if(gr){
	    TheShape.Type = MSH_VOLUME_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	}
      }
    ;
    break;}
case 133:
#line 1838 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 134:
#line 1850 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 135:
#line 1856 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 136:
#line 1862 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 137:
#line 1874 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 138:
#line 1883 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 139:
#line 1893 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GModel::current()->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GModel::current()->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 140:
#line 1909 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 141:
#line 1928 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 142:
#line 1942 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 143:
#line 1948 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 144:
#line 1954 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 145:
#line 1963 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 146:
#line 1977 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from THEM in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GModel::current()->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GModel::current()->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 147:
#line 2027 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 148:
#line 2042 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) {
    Field *field=new PostViewField(*vv);
    fields.insert(field);
    BGMAddField(field);
  }
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 149:
#line 2057 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 150:
#line 2077 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 151:
#line 2087 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 152:
#line 2109 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 153:
#line 2113 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 154:
#line 2118 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 155:
#line 2123 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 156:
#line 2135 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 157:
#line 2150 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 158:
#line 2166 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 159:
#line 2192 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 160:
#line 2219 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 161:
#line 2251 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 162:
#line 2258 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 163:
#line 2263 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 164:
#line 2269 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 165:
#line 2273 "Gmsh.y"
{
    ;
    break;}
case 166:
#line 2282 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 167:
#line 2290 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 168:
#line 2298 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 169:
#line 2306 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 170:
#line 2310 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 171:
#line 2318 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 172:
#line 2322 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 173:
#line 2330 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 174:
#line 2334 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 175:
#line 2342 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 176:
#line 2346 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 177:
#line 2353 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 178:
#line 2357 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      extr.mesh.ViewIndex = (int)yyvsp[-6].d;
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      extr.mesh.ViewIndex = -1;
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 179:
#line 2369 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 180:
#line 2376 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 181:
#line 2383 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 182:
#line 2390 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 183:
#line 2397 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 184:
#line 2404 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 185:
#line 2411 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 186:
#line 2418 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 187:
#line 2425 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 188:
#line 2432 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 189:
#line 2436 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 190:
#line 2443 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 191:
#line 2447 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 192:
#line 2454 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 193:
#line 2458 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 194:
#line 2465 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 195:
#line 2469 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 196:
#line 2476 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 197:
#line 2480 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 198:
#line 2487 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 199:
#line 2491 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 200:
#line 2498 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 201:
#line 2502 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 202:
#line 2509 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 203:
#line 2513 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 204:
#line 2520 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 205:
#line 2524 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 206:
#line 2535 "Gmsh.y"
{
    ;
    break;}
case 207:
#line 2538 "Gmsh.y"
{
    ;
    break;}
case 208:
#line 2544 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 209:
#line 2553 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 210:
#line 2575 "Gmsh.y"
{
      yymsg(GERROR, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 211:
#line 2599 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 212:
#line 2603 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	Tree_Add(THEM->Surfaces, &s);
	extr.mesh.Holes[num].first = yyvsp[-1].d;
	extr.mesh.Holes[num].second.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	  double d;
	  List_Read(yyvsp[-3].l, i, &d);
	  extr.mesh.Holes[num].second.push_back((int)d);
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 213:
#line 2627 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 214:
#line 2645 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 215:
#line 2663 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 216:
#line 2681 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 2710 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 218:
#line 2745 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 219:
#line 2750 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 220:
#line 2777 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 221:
#line 2791 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 2810 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 223:
#line 2816 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 224:
#line 2822 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 2825 "Gmsh.y"
{
    ;
    break;}
case 226:
#line 2834 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 227:
#line 2843 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 228:
#line 2844 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 229:
#line 2845 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 230:
#line 2846 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 231:
#line 2847 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 232:
#line 2848 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 233:
#line 2849 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 234:
#line 2850 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 235:
#line 2852 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 236:
#line 2858 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 237:
#line 2859 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 238:
#line 2860 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 239:
#line 2861 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 240:
#line 2862 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 241:
#line 2863 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 242:
#line 2864 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 243:
#line 2865 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 244:
#line 2866 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 245:
#line 2867 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 246:
#line 2868 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 247:
#line 2869 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 248:
#line 2870 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 249:
#line 2871 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 250:
#line 2872 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 251:
#line 2873 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 252:
#line 2874 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2875 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2876 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2877 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 256:
#line 2878 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2879 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 258:
#line 2880 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2881 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 260:
#line 2882 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2883 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2884 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 263:
#line 2885 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2886 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 265:
#line 2887 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 266:
#line 2888 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 267:
#line 2889 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 268:
#line 2891 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2892 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2893 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 271:
#line 2894 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2895 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 273:
#line 2896 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2897 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 275:
#line 2898 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2899 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 277:
#line 2900 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2901 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 279:
#line 2902 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2903 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2904 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2905 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 283:
#line 2906 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 284:
#line 2907 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 285:
#line 2908 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 286:
#line 2909 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 287:
#line 2910 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 288:
#line 2911 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 289:
#line 2920 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 290:
#line 2921 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 291:
#line 2922 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 292:
#line 2923 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 293:
#line 2924 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 294:
#line 2925 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 295:
#line 2926 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 296:
#line 2931 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 297:
#line 2947 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 298:
#line 2962 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 299:
#line 2982 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 300:
#line 2996 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 301:
#line 3009 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 302:
#line 3032 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 303:
#line 3050 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 304:
#line 3068 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 305:
#line 3086 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 306:
#line 3104 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 307:
#line 3112 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 308:
#line 3116 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 309:
#line 3120 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 310:
#line 3124 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 311:
#line 3128 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 312:
#line 3135 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 313:
#line 3139 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 314:
#line 3143 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 315:
#line 3147 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 316:
#line 3154 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 317:
#line 3159 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 318:
#line 3167 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 319:
#line 3172 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 320:
#line 3176 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 321:
#line 3181 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 322:
#line 3185 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 323:
#line 3193 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-4].d;
      }
    ;
    break;}
case 324:
#line 3204 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 325:
#line 3212 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-2].d;
      }
    ;
    break;}
case 326:
#line 3220 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 327:
#line 3226 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 328:
#line 3237 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 329:
#line 3257 "Gmsh.y"
{ 
      yyval.l = List_Create(3, 1, sizeof(double));
      IntersectCurvesWithSurface(yyvsp[-5].l, (int)yyvsp[-1].d, yyval.l);
    ;
    break;}
case 330:
#line 3262 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 331:
#line 3272 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 332:
#line 3282 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 333:
#line 3292 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 334:
#line 3309 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 335:
#line 3336 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 336:
#line 3341 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 337:
#line 3345 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 338:
#line 3349 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 339:
#line 3362 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 340:
#line 3366 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 341:
#line 3378 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 342:
#line 3385 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 343:
#line 3407 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 344:
#line 3411 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 345:
#line 3426 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 346:
#line 3431 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 347:
#line 3438 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 348:
#line 3442 "Gmsh.y"
{
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 349:
#line 3449 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 350:
#line 3453 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 351:
#line 3461 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 352:
#line 3469 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 353:
#line 3483 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 354:
#line 3497 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 355:
#line 3501 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 356:
#line 3520 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 357:
#line 3542 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3565 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
