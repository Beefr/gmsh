
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tEuclidian	266
#define	tCoordinates	267
#define	tExp	268
#define	tLog	269
#define	tLog10	270
#define	tSqrt	271
#define	tSin	272
#define	tAsin	273
#define	tCos	274
#define	tAcos	275
#define	tTan	276
#define	tRand	277
#define	tAtan	278
#define	tAtan2	279
#define	tSinh	280
#define	tCosh	281
#define	tTanh	282
#define	tFabs	283
#define	tFloor	284
#define	tCeil	285
#define	tFmod	286
#define	tModulo	287
#define	tHypot	288
#define	tPrintf	289
#define	tSprintf	290
#define	tStrCat	291
#define	tStrPrefix	292
#define	tStrRelative	293
#define	tBoundingBox	294
#define	tDraw	295
#define	tToday	296
#define	tPoint	297
#define	tCircle	298
#define	tEllipse	299
#define	tLine	300
#define	tSphere	301
#define	tPolarSphere	302
#define	tSurface	303
#define	tSpline	304
#define	tVolume	305
#define	tCharacteristic	306
#define	tLength	307
#define	tParametric	308
#define	tElliptic	309
#define	tPlane	310
#define	tRuled	311
#define	tTransfinite	312
#define	tComplex	313
#define	tPhysical	314
#define	tUsing	315
#define	tBump	316
#define	tProgression	317
#define	tPlugin	318
#define	tRotate	319
#define	tTranslate	320
#define	tSymmetry	321
#define	tDilate	322
#define	tExtrude	323
#define	tDuplicata	324
#define	tLoop	325
#define	tRecombine	326
#define	tDelete	327
#define	tCoherence	328
#define	tAttractor	329
#define	tLayers	330
#define	tAlias	331
#define	tAliasWithOptions	332
#define	tText2D	333
#define	tText3D	334
#define	tInterpolationScheme	335
#define	tTime	336
#define	tGrain	337
#define	tCombine	338
#define	tBSpline	339
#define	tBezier	340
#define	tNurbs	341
#define	tOrder	342
#define	tKnots	343
#define	tColor	344
#define	tColorTable	345
#define	tFor	346
#define	tIn	347
#define	tEndFor	348
#define	tIf	349
#define	tEndIf	350
#define	tExit	351
#define	tReturn	352
#define	tCall	353
#define	tFunction	354
#define	tShow	355
#define	tHide	356
#define	tGetValue	357
#define	tGMSH_MAJOR_VERSION	358
#define	tGMSH_MINOR_VERSION	359
#define	tGMSH_PATCH_VERSION	360
#define	tAFFECTPLUS	361
#define	tAFFECTMINUS	362
#define	tAFFECTTIMES	363
#define	tAFFECTDIVIDE	364
#define	tOR	365
#define	tAND	366
#define	tEQUAL	367
#define	tNOTEQUAL	368
#define	tLESSOREQUAL	369
#define	tGREATEROREQUAL	370
#define	tPLUSPLUS	371
#define	tMINUSMINUS	372
#define	UNARYPREC	373

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.309 2007-03-02 09:20:21 remacle Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Attractors.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static gmshSurface *myGmshSurface = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 78 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1198
#define	YYFLAG		-32768
#define	YYNTBASE	140

#define YYTRANSLATE(x) ((unsigned)(x) <= 373 ? yytranslate[x] : 207)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   125,     2,   135,     2,   124,     2,     2,   130,
   131,   122,   120,   136,   121,   134,   123,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   116,
     2,   118,   111,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   132,     2,   133,   129,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   137,     2,   138,   139,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   112,   113,   114,   115,   117,   119,
   126,   127,   128
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   190,   197,   204,   206,   208,   210,   212,   214,   216,
   218,   223,   231,   241,   248,   255,   259,   266,   273,   283,
   290,   300,   306,   315,   324,   336,   343,   353,   363,   373,
   375,   377,   385,   394,   401,   408,   415,   423,   431,   439,
   449,   457,   467,   485,   493,   501,   513,   522,   531,   540,
   549,   553,   558,   569,   577,   585,   594,   603,   612,   620,
   629,   635,   647,   653,   663,   665,   667,   669,   670,   673,
   680,   687,   694,   701,   706,   713,   720,   727,   732,   739,
   743,   748,   754,   758,   762,   767,   772,   776,   784,   792,
   796,   804,   808,   811,   814,   830,   833,   840,   849,   858,
   869,   871,   874,   876,   880,   885,   887,   893,   905,   919,
   920,   928,   929,   943,   944,   960,   961,   968,   977,   986,
   995,  1008,  1021,  1034,  1049,  1064,  1079,  1080,  1093,  1094,
  1107,  1108,  1121,  1122,  1139,  1140,  1157,  1158,  1175,  1176,
  1195,  1196,  1215,  1216,  1235,  1237,  1240,  1246,  1254,  1264,
  1267,  1274,  1284,  1294,  1303,  1313,  1322,  1331,  1338,  1343,
  1354,  1365,  1376,  1387,  1390,  1392,  1396,  1399,  1402,  1405,
  1409,  1413,  1417,  1421,  1425,  1429,  1433,  1437,  1441,  1445,
  1449,  1453,  1457,  1461,  1467,  1472,  1477,  1482,  1487,  1492,
  1497,  1502,  1507,  1512,  1517,  1524,  1529,  1534,  1539,  1544,
  1549,  1554,  1561,  1568,  1575,  1580,  1585,  1590,  1595,  1600,
  1605,  1610,  1615,  1620,  1625,  1630,  1637,  1642,  1647,  1652,
  1657,  1662,  1667,  1674,  1681,  1688,  1693,  1695,  1697,  1699,
  1701,  1703,  1705,  1707,  1709,  1715,  1720,  1725,  1728,  1734,
  1738,  1745,  1750,  1758,  1765,  1767,  1770,  1773,  1777,  1781,
  1793,  1803,  1811,  1819,  1821,  1825,  1827,  1829,  1832,  1836,
  1841,  1845,  1851,  1856,  1858,  1860,  1862,  1866,  1871,  1878,
  1886,  1888,  1890,  1894,  1898,  1908,  1916,  1918,  1924,  1928,
  1935,  1937,  1941,  1943,  1945,  1952,  1957,  1962,  1967,  1974,
  1981
};

static const short yyrhs[] = {   141,
     0,     1,     6,     0,     0,   141,   142,     0,   145,     0,
   144,     0,   164,     0,   166,     0,   167,     0,   170,     0,
   171,     0,   172,     0,   173,     0,   176,     0,   192,     0,
   193,     0,   194,     0,   175,     0,   174,     0,   118,     0,
   118,   118,     0,    35,   130,     5,   131,     6,     0,    35,
   130,     5,   131,   143,   206,     6,     0,    35,   130,     5,
   136,   202,   131,     6,     0,    35,   130,     5,   136,   202,
   131,   143,   206,     6,     0,     4,     5,   137,   146,   138,
     6,     0,     4,     5,     4,   197,   137,   146,   138,     6,
     0,     0,   146,   149,     0,   146,   153,     0,   146,   156,
     0,   146,   158,     0,   146,   159,     0,   146,   161,     0,
   195,     0,   147,   136,   195,     0,   195,     0,   148,   136,
   195,     0,     0,     0,     4,   150,   130,   147,   131,   151,
   137,   148,   138,     6,     0,   206,     0,   152,   136,   206,
     0,     0,    79,   130,   195,   136,   195,   136,   195,   131,
   154,   137,   152,   138,     6,     0,   206,     0,   155,   136,
   206,     0,     0,    80,   130,   195,   136,   195,   136,   195,
   136,   195,   131,   157,   137,   155,   138,     6,     0,    81,
   137,   199,   138,   137,   199,   138,     6,     0,     0,    82,
   160,   137,   148,   138,     6,     0,    83,   130,   195,   131,
   200,     6,     0,     7,     0,   107,     0,   108,     0,   109,
     0,   110,     0,   126,     0,   127,     0,     4,   162,   195,
     6,     0,     4,   132,   195,   133,   162,   195,     6,     0,
     4,   132,   137,   202,   138,   133,   162,   200,     6,     0,
     4,   132,   133,     7,   200,     6,     0,     4,   132,   133,
   107,   200,     6,     0,     4,   163,     6,     0,     4,   132,
   195,   133,   163,     6,     0,     4,   134,     4,     7,   206,
     6,     0,     4,   132,   195,   133,   134,     4,     7,   206,
     6,     0,     4,   134,     4,   162,   195,     6,     0,     4,
   132,   195,   133,   134,     4,   162,   195,     6,     0,     4,
   134,     4,   163,     6,     0,     4,   132,   195,   133,   134,
     4,   163,     6,     0,     4,   134,    90,   134,     4,     7,
   203,     6,     0,     4,   132,   195,   133,   134,    90,   134,
     4,     7,   203,     6,     0,     4,   134,    91,     7,   204,
     6,     0,     4,   132,   195,   133,   134,    91,     7,   204,
     6,     0,    64,   130,     4,   131,   134,     4,     7,   195,
     6,     0,    64,   130,     4,   131,   134,     4,     7,   206,
     6,     0,   195,     0,   206,     0,    43,   130,   195,   131,
     7,   197,     6,     0,    60,    43,   130,   165,   131,     7,
   200,     6,     0,    75,    43,   200,     7,   200,     6,     0,
    75,    46,   200,     7,   200,     6,     0,    52,    53,   200,
     7,   195,     6,     0,    46,   130,   195,   131,     7,   200,
     6,     0,    50,   130,   195,   131,     7,   200,     6,     0,
    44,   130,   195,   131,     7,   200,     6,     0,    44,   130,
   195,   131,     7,   200,    56,   197,     6,     0,    45,   130,
   195,   131,     7,   200,     6,     0,    45,   130,   195,   131,
     7,   200,    56,   197,     6,     0,    54,   130,   195,   131,
     7,   137,   195,   136,   195,   136,     5,   136,     5,   136,
     5,   138,     6,     0,    85,   130,   195,   131,     7,   200,
     6,     0,    86,   130,   195,   131,     7,   200,     6,     0,
    87,   130,   195,   131,     7,   200,    89,   200,    88,   195,
     6,     0,    46,    71,   130,   195,   131,     7,   200,     6,
     0,    60,    46,   130,   165,   131,     7,   200,     6,     0,
    56,    49,   130,   195,   131,     7,   200,     6,     0,    57,
    49,   130,   195,   131,     7,   200,     6,     0,    12,    13,
     6,     0,    13,    49,   195,     6,     0,    54,    49,   130,
   195,   131,     7,     5,     5,     5,     6,     0,    47,   130,
   195,   131,     7,   200,     6,     0,    48,   130,   195,   131,
     7,   200,     6,     0,    49,    71,   130,   195,   131,     7,
   200,     6,     0,    60,    49,   130,   165,   131,     7,   200,
     6,     0,    59,    51,   130,   195,   131,     7,   200,     6,
     0,    51,   130,   195,   131,     7,   200,     6,     0,    60,
    51,   130,   165,   131,     7,   200,     6,     0,    66,   197,
   137,   168,   138,     0,    65,   137,   197,   136,   197,   136,
   195,   138,   137,   168,   138,     0,    67,   197,   137,   168,
   138,     0,    68,   137,   197,   136,   195,   138,   137,   168,
   138,     0,   170,     0,   169,     0,   167,     0,     0,   169,
   166,     0,   169,    43,   137,   202,   138,     6,     0,   169,
    46,   137,   202,   138,     6,     0,   169,    49,   137,   202,
   138,     6,     0,   169,    51,   137,   202,   138,     6,     0,
    70,   137,   169,   138,     0,    70,     4,   132,   195,   133,
     6,     0,    77,     4,   132,   195,   133,     6,     0,    78,
     4,   132,   195,   133,     6,     0,    73,   137,   169,   138,
     0,    73,     4,   132,   195,   133,     6,     0,    73,     4,
     6,     0,    73,     4,     4,     6,     0,    90,   203,   137,
   169,   138,     0,   101,   206,     6,     0,   102,   206,     6,
     0,   101,   137,   169,   138,     0,   102,   137,   169,   138,
     0,     4,   206,     6,     0,     4,     4,   132,   195,   133,
   206,     6,     0,     4,     4,     4,   132,   195,   133,     6,
     0,     4,   195,     6,     0,    64,   130,     4,   131,   134,
     4,     6,     0,    84,     4,     6,     0,    97,     6,     0,
    40,     6,     0,    40,   137,   195,   136,   195,   136,   195,
   136,   195,   136,   195,   136,   195,   138,     6,     0,    41,
     6,     0,    92,   130,   195,     8,   195,   131,     0,    92,
   130,   195,     8,   195,     8,   195,   131,     0,    92,     4,
    93,   137,   195,     8,   195,   138,     0,    92,     4,    93,
   137,   195,     8,   195,     8,   195,   138,     0,    94,     0,
   100,     4,     0,    98,     0,    99,     4,     6,     0,    95,
   130,   195,   131,     0,    96,     0,    69,   197,   137,   169,
   138,     0,    69,   137,   197,   136,   197,   136,   195,   138,
   137,   169,   138,     0,    69,   137,   197,   136,   197,   136,
   197,   136,   195,   138,   137,   169,   138,     0,     0,    69,
   197,   137,   169,   177,   190,   138,     0,     0,    69,   137,
   197,   136,   197,   136,   195,   138,   137,   169,   178,   190,
   138,     0,     0,    69,   137,   197,   136,   197,   136,   197,
   136,   195,   138,   137,   169,   179,   190,   138,     0,     0,
    69,   137,   169,   180,   190,   138,     0,    69,    43,   137,
   195,   136,   197,   138,     6,     0,    69,    46,   137,   195,
   136,   197,   138,     6,     0,    69,    49,   137,   195,   136,
   197,   138,     6,     0,    69,    43,   137,   195,   136,   197,
   136,   197,   136,   195,   138,     6,     0,    69,    46,   137,
   195,   136,   197,   136,   197,   136,   195,   138,     6,     0,
    69,    49,   137,   195,   136,   197,   136,   197,   136,   195,
   138,     6,     0,    69,    43,   137,   195,   136,   197,   136,
   197,   136,   197,   136,   195,   138,     6,     0,    69,    46,
   137,   195,   136,   197,   136,   197,   136,   197,   136,   195,
   138,     6,     0,    69,    49,   137,   195,   136,   197,   136,
   197,   136,   197,   136,   195,   138,     6,     0,     0,    69,
    43,   137,   195,   136,   197,   138,   181,   137,   190,   138,
     6,     0,     0,    69,    46,   137,   195,   136,   197,   138,
   182,   137,   190,   138,     6,     0,     0,    69,    49,   137,
   195,   136,   197,   138,   183,   137,   190,   138,     6,     0,
     0,    69,    43,   137,   195,   136,   197,   136,   197,   136,
   195,   138,   184,   137,   190,   138,     6,     0,     0,    69,
    46,   137,   195,   136,   197,   136,   197,   136,   195,   138,
   185,   137,   190,   138,     6,     0,     0,    69,    49,   137,
   195,   136,   197,   136,   197,   136,   195,   138,   186,   137,
   190,   138,     6,     0,     0,    69,    43,   137,   195,   136,
   197,   136,   197,   136,   197,   136,   195,   138,   187,   137,
   190,   138,     6,     0,     0,    69,    46,   137,   195,   136,
   197,   136,   197,   136,   197,   136,   195,   138,   188,   137,
   190,   138,     6,     0,     0,    69,    49,   137,   195,   136,
   197,   136,   197,   136,   197,   136,   195,   138,   189,   137,
   190,   138,     6,     0,   191,     0,   190,   191,     0,    76,
   137,   195,   138,     6,     0,    76,   137,   200,   136,   200,
   138,     6,     0,    76,   137,   200,   136,   200,   136,   200,
   138,     6,     0,    72,     6,     0,    58,    46,   200,     7,
   195,     6,     0,    58,    46,   200,     7,   195,    61,    63,
   195,     6,     0,    58,    46,   200,     7,   195,    61,    62,
   195,     6,     0,    58,    49,   137,   195,   138,     7,   200,
     6,     0,    58,    49,   137,   195,   138,     7,   200,     4,
     6,     0,    55,    49,   137,   195,   138,     7,   200,     6,
     0,    58,    51,   137,   195,   138,     7,   200,     6,     0,
    72,    49,   200,     7,   195,     6,     0,    72,    49,   200,
     6,     0,    43,   137,   202,   138,    93,    49,   137,   195,
   138,     6,     0,    46,   137,   202,   138,    93,    49,   137,
   195,   138,     6,     0,    46,   137,   202,   138,    93,    51,
   137,   195,   138,     6,     0,    49,   137,   202,   138,    93,
    51,   137,   195,   138,     6,     0,    74,     6,     0,   196,
     0,   130,   195,   131,     0,   121,   195,     0,   120,   195,
     0,   125,   195,     0,   195,   121,   195,     0,   195,   120,
   195,     0,   195,   122,   195,     0,   195,   123,   195,     0,
   195,   124,   195,     0,   195,   129,   195,     0,   195,   116,
   195,     0,   195,   118,   195,     0,   195,   117,   195,     0,
   195,   119,   195,     0,   195,   114,   195,     0,   195,   115,
   195,     0,   195,   113,   195,     0,   195,   112,   195,     0,
   195,   111,   195,     8,   195,     0,    14,   130,   195,   131,
     0,    15,   130,   195,   131,     0,    16,   130,   195,   131,
     0,    17,   130,   195,   131,     0,    18,   130,   195,   131,
     0,    19,   130,   195,   131,     0,    20,   130,   195,   131,
     0,    21,   130,   195,   131,     0,    22,   130,   195,   131,
     0,    24,   130,   195,   131,     0,    25,   130,   195,   136,
   195,   131,     0,    26,   130,   195,   131,     0,    27,   130,
   195,   131,     0,    28,   130,   195,   131,     0,    29,   130,
   195,   131,     0,    30,   130,   195,   131,     0,    31,   130,
   195,   131,     0,    32,   130,   195,   136,   195,   131,     0,
    33,   130,   195,   136,   195,   131,     0,    34,   130,   195,
   136,   195,   131,     0,    23,   130,   195,   131,     0,    14,
   132,   195,   133,     0,    15,   132,   195,   133,     0,    16,
   132,   195,   133,     0,    17,   132,   195,   133,     0,    18,
   132,   195,   133,     0,    19,   132,   195,   133,     0,    20,
   132,   195,   133,     0,    21,   132,   195,   133,     0,    22,
   132,   195,   133,     0,    24,   132,   195,   133,     0,    25,
   132,   195,   136,   195,   133,     0,    26,   132,   195,   133,
     0,    27,   132,   195,   133,     0,    28,   132,   195,   133,
     0,    29,   132,   195,   133,     0,    30,   132,   195,   133,
     0,    31,   132,   195,   133,     0,    32,   132,   195,   136,
   195,   133,     0,    33,   132,   195,   136,   195,   133,     0,
    34,   132,   195,   136,   195,   133,     0,    23,   132,   195,
   133,     0,     3,     0,     9,     0,    10,     0,    11,     0,
   104,     0,   105,     0,   106,     0,     4,     0,     4,   139,
   137,   195,   138,     0,     4,   132,   195,   133,     0,   135,
     4,   132,   133,     0,     4,   163,     0,     4,   132,   195,
   133,   163,     0,     4,   134,     4,     0,     4,   132,   195,
   133,   134,     4,     0,     4,   134,     4,   163,     0,     4,
   132,   195,   133,   134,     4,   163,     0,   103,   130,     5,
   136,   195,   131,     0,   198,     0,   121,   197,     0,   120,
   197,     0,   197,   121,   197,     0,   197,   120,   197,     0,
   137,   195,   136,   195,   136,   195,   136,   195,   136,   195,
   138,     0,   137,   195,   136,   195,   136,   195,   136,   195,
   138,     0,   137,   195,   136,   195,   136,   195,   138,     0,
   130,   195,   136,   195,   136,   195,   131,     0,   200,     0,
   199,   136,   200,     0,   195,     0,   201,     0,   137,   138,
     0,   137,   202,   138,     0,   121,   137,   202,   138,     0,
   195,     8,   195,     0,   195,     8,   195,     8,   195,     0,
    43,   137,   195,   138,     0,   167,     0,   170,     0,   176,
     0,     4,   132,   133,     0,   121,     4,   132,   133,     0,
     4,   132,   137,   202,   138,   133,     0,   121,     4,   132,
   137,   202,   138,   133,     0,   195,     0,   201,     0,   202,
   136,   195,     0,   202,   136,   201,     0,   137,   195,   136,
   195,   136,   195,   136,   195,   138,     0,   137,   195,   136,
   195,   136,   195,   138,     0,     4,     0,     4,   134,    90,
   134,     4,     0,   137,   205,   138,     0,     4,   132,   195,
   133,   134,    91,     0,   203,     0,   205,   136,   203,     0,
     5,     0,    42,     0,    37,   130,   206,   136,   206,   131,
     0,    38,   130,   206,   131,     0,    39,   130,   206,   131,
     0,    36,   130,   206,   131,     0,    36,   130,   206,   136,
   202,   131,     0,    36,   130,     4,   134,     4,   131,     0,
    36,   130,     4,   132,   195,   133,   134,     4,   131,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   143,   145,   150,   152,   155,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   173,
   178,   184,   190,   205,   218,   246,   254,   263,   271,   272,
   273,   274,   275,   276,   279,   282,   286,   289,   293,   484,
   502,   512,   518,   525,   533,   539,   545,   552,   560,   566,
   574,   579,   583,   592,   594,   595,   596,   597,   600,   602,
   605,   640,   679,   733,   750,   768,   779,   798,   812,   829,
   855,   882,   896,   913,   927,   944,   964,   987,   997,  1011,
  1016,  1024,  1051,  1067,  1095,  1125,  1147,  1165,  1183,  1201,
  1227,  1245,  1271,  1291,  1315,  1339,  1365,  1382,  1401,  1419,
  1458,  1463,  1468,  1474,  1496,  1518,  1534,  1554,  1571,  1588,
  1608,  1614,  1619,  1624,  1631,  1633,  1634,  1637,  1642,  1646,
  1662,  1678,  1694,  1714,  1727,  1733,  1739,  1750,  1760,  1770,
  1786,  1804,  1818,  1825,  1831,  1840,  1853,  1904,  1919,  1930,
  1950,  1960,  1982,  1986,  1991,  1996,  2006,  2023,  2039,  2065,
  2092,  2124,  2131,  2136,  2142,  2146,  2154,  2163,  2171,  2179,
  2184,  2192,  2197,  2205,  2210,  2218,  2223,  2232,  2239,  2246,
  2253,  2260,  2267,  2274,  2281,  2288,  2295,  2300,  2307,  2312,
  2319,  2324,  2331,  2336,  2343,  2348,  2355,  2360,  2367,  2372,
  2379,  2384,  2391,  2396,  2406,  2410,  2415,  2425,  2447,  2471,
  2479,  2498,  2516,  2534,  2563,  2598,  2603,  2630,  2644,  2662,
  2669,  2675,  2678,  2686,  2696,  2698,  2699,  2700,  2701,  2702,
  2703,  2704,  2705,  2712,  2713,  2714,  2715,  2716,  2717,  2718,
  2719,  2720,  2721,  2722,  2723,  2724,  2725,  2726,  2727,  2728,
  2729,  2730,  2731,  2732,  2733,  2734,  2735,  2736,  2737,  2738,
  2739,  2740,  2741,  2742,  2743,  2745,  2746,  2747,  2748,  2749,
  2750,  2751,  2752,  2753,  2754,  2755,  2756,  2757,  2758,  2759,
  2760,  2761,  2762,  2763,  2764,  2765,  2770,  2775,  2776,  2777,
  2778,  2779,  2780,  2784,  2800,  2815,  2835,  2849,  2862,  2885,
  2903,  2921,  2939,  2957,  2964,  2969,  2973,  2977,  2981,  2987,
  2992,  2996,  3000,  3006,  3012,  3019,  3025,  3029,  3034,  3038,
  3049,  3056,  3067,  3087,  3097,  3107,  3117,  3134,  3153,  3177,
  3205,  3211,  3215,  3219,  3231,  3236,  3248,  3255,  3276,  3281,
  3295,  3301,  3307,  3312,  3320,  3328,  3342,  3356,  3360,  3379,
  3401
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tEuclidian",
"tCoordinates","tExp","tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos",
"tTan","tRand","tAtan","tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil",
"tFmod","tModulo","tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative",
"tBoundingBox","tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere",
"tPolarSphere","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tAttractor",
"tLayers","tAlias","tAliasWithOptions","tText2D","tText3D","tInterpolationScheme",
"tTime","tGrain","tCombine","tBSpline","tBezier","tNurbs","tOrder","tKnots",
"tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn",
"tCall","tFunction","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION",
"tGMSH_PATCH_VERSION","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL",
"'+'","'-'","'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems",
"GeoFormatItem","SendToFile","Printf","View","Views","ElementCoords","ElementValues",
"Element","@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4",
"InterpolationMatrix","Time","@5","Grain","NumericAffectation","NumericIncrement",
"Affectation","PhysicalId","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Colorify","Visibility","Command","Loop","Extrude","@6",
"@7","@8","@9","@10","@11","@12","@13","@14","@15","@16","@17","@18","ExtrudeParameters",
"ExtrudeParameter","Transfinite","Embedding","Coherence","FExpr","FExpr_Single",
"VExpr","VExpr_Single","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   140,   140,   141,   141,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   143,
   143,   144,   144,   144,   144,   145,   145,   146,   146,   146,
   146,   146,   146,   146,   147,   147,   148,   148,   150,   151,
   149,   152,   152,   154,   153,   155,   155,   157,   156,   158,
   160,   159,   161,   162,   162,   162,   162,   162,   163,   163,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   165,
   165,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   167,   167,   167,   167,   168,   168,   168,   169,   169,   169,
   169,   169,   169,   170,   170,   170,   170,   171,   171,   171,
   171,   172,   173,   173,   173,   173,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   176,   176,   176,   177,
   176,   178,   176,   179,   176,   180,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   181,   176,   182,   176,
   183,   176,   184,   176,   185,   176,   186,   176,   187,   176,
   188,   176,   189,   176,   190,   190,   191,   191,   191,   191,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   193,
   193,   193,   193,   194,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   197,   197,   197,   197,   197,   198,
   198,   198,   198,   199,   199,   200,   200,   200,   200,   200,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   202,   202,   202,   202,   203,   203,   203,   203,   204,   204,
   205,   205,   206,   206,   206,   206,   206,   206,   206,   206,
   206
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
     0,     6,     6,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     6,     3,     6,     6,     9,     6,
     9,     5,     8,     8,    11,     6,     9,     9,     9,     1,
     1,     7,     8,     6,     6,     6,     7,     7,     7,     9,
     7,     9,    17,     7,     7,    11,     8,     8,     8,     8,
     3,     4,    10,     7,     7,     8,     8,     8,     7,     8,
     5,    11,     5,     9,     1,     1,     1,     0,     2,     6,
     6,     6,     6,     4,     6,     6,     6,     4,     6,     3,
     4,     5,     3,     3,     4,     4,     3,     7,     7,     3,
     7,     3,     2,     2,    15,     2,     6,     8,     8,    10,
     1,     2,     1,     3,     4,     1,     5,    11,    13,     0,
     7,     0,    13,     0,    15,     0,     6,     8,     8,     8,
    12,    12,    12,    14,    14,    14,     0,    12,     0,    12,
     0,    12,     0,    16,     0,    16,     0,    16,     0,    18,
     0,    18,     0,    18,     1,     2,     5,     7,     9,     2,
     6,     9,     9,     8,     9,     8,     8,     6,     4,    10,
    10,    10,    10,     2,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     4,     4,     2,     5,     3,
     6,     4,     7,     6,     1,     2,     2,     3,     3,    11,
     9,     7,     7,     1,     3,     1,     1,     2,     3,     4,
     3,     5,     4,     1,     1,     1,     3,     4,     6,     7,
     1,     1,     3,     3,     9,     7,     1,     5,     3,     6,
     1,     3,     1,     1,     6,     4,     4,     4,     6,     6,
     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   151,     0,   156,     0,   153,
     0,     0,     0,     0,     4,     6,     5,     7,     8,     9,
    10,    11,    12,    13,    19,    18,    14,    15,    16,    17,
   277,   284,   333,    54,   278,   279,   280,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   334,     0,   281,   282,   283,    55,    56,    57,
    58,     0,     0,     0,    59,    60,     0,     0,     0,     0,
     0,     0,     0,   215,     0,     0,     0,     0,   144,     0,
   146,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
     0,   118,     0,     0,   118,     0,     0,   118,   214,     0,
     0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
     0,     0,     0,   143,     0,   152,   333,   118,     0,   118,
     0,     0,     0,     0,     0,   288,     0,    28,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   284,   218,   217,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    66,   140,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,   101,     0,     0,     0,
     0,   284,     0,     0,   314,   315,   316,   321,   322,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   306,     0,   307,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   297,   296,     0,     0,     0,     0,   118,   118,     0,
     0,     0,     0,     0,     0,     0,   166,     0,   118,     0,
     0,     0,     0,   130,     0,     0,     0,     0,     0,     0,
   142,     0,     0,     0,     0,     0,   118,     0,     0,     0,
   154,     0,   133,     0,   134,     0,     0,   290,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   216,     0,     0,     0,     0,    54,     0,     0,     0,     0,
     0,    61,     0,   233,   232,   230,   231,   226,   228,   227,
   229,   221,   220,   222,   223,   224,   225,   102,     0,     0,
     0,     0,     0,     0,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   308,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    80,    81,     0,     0,     0,     0,     0,
     0,     0,   299,   298,   117,     0,   116,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,     0,
     0,   160,     0,   124,   209,     0,   131,     0,   128,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   155,   135,   136,     0,   286,   292,     0,    28,    39,
     0,     0,     0,    51,     0,     0,    29,    30,    31,    32,
    33,    34,   235,   256,   236,   257,   237,   258,   238,   259,
   239,   260,   240,   261,   241,   262,   242,   263,   243,   264,
   255,   276,   244,   265,     0,     0,   246,   267,   247,   268,
   248,   269,   249,   270,   250,   271,   251,   272,     0,     0,
     0,     0,     0,     0,     0,     0,   338,     0,     0,   336,
   337,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    72,     0,     0,     0,     0,   287,     0,    22,    20,
     0,     0,     0,     0,   317,     0,     0,     0,   311,   323,
   324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   309,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   111,   113,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   195,     0,   157,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   132,     0,     0,     0,     0,   289,     0,   285,
     0,     0,     0,     0,     0,     0,     0,    26,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   286,    64,    65,     0,     0,     0,     0,     0,    67,
    68,    70,     0,     0,   331,     0,    76,   234,    21,     0,
     0,     0,     0,     0,   313,   318,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   310,    86,     0,     0,     0,     0,     0,   201,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   200,
     0,   167,   196,     0,     0,   125,   208,   129,    84,    85,
   126,   127,     0,     0,     0,   328,     0,     0,     0,   147,
   139,   291,   138,     0,     0,     0,     0,     0,   304,     0,
     0,   245,   266,   252,   273,   253,   274,   254,   275,     0,
   340,   339,   335,   294,     0,    54,     0,     0,     0,     0,
    62,     0,     0,     0,   329,    23,    24,     0,     0,    82,
     0,     0,   312,     0,    89,     0,    91,     0,     0,    87,
     0,     0,   104,   105,     0,     0,    88,   109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   141,     0,     0,     0,     0,   118,     0,   177,
     0,   179,     0,   181,     0,     0,     0,     0,   306,     0,
     0,     0,   161,    94,    95,     0,     0,     0,     0,   293,
    27,     0,    35,     0,     0,     0,     0,     0,    37,     0,
     0,     0,     0,     0,    73,     0,     0,    74,     0,   332,
     0,     0,   319,     0,     0,     0,     0,    97,     0,     0,
   106,     0,     0,     0,   206,    99,   100,     0,     0,     0,
   204,   207,   108,    83,    98,   107,   110,     0,     0,     0,
   303,     0,   302,     0,     0,   168,     0,     0,   169,     0,
     0,   170,     0,   120,   121,   122,   123,     0,     0,     0,
     0,     0,     0,   326,     0,   149,   148,    40,     0,     0,
     0,   305,     0,     0,     0,     0,     0,    63,    69,    71,
     0,    77,     0,    25,     0,   320,     0,    90,    92,     0,
     0,     0,     0,     0,   203,   202,   205,    78,    79,   118,
     0,   114,     0,     0,     0,     0,     0,     0,   197,     0,
   118,     0,     0,     0,     0,     0,    36,     0,     0,     0,
    38,    52,    53,   341,     0,   330,     0,   210,   211,   212,
   213,   103,     0,     0,     0,   301,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   162,     0,     0,
   325,   150,     0,     0,     0,     0,    75,     0,     0,   112,
     0,   183,     0,     0,   185,     0,     0,   187,     0,     0,
     0,   198,   158,     0,   118,    96,     0,    44,     0,    50,
     0,     0,   300,   171,     0,     0,   178,   172,     0,     0,
   180,   173,     0,     0,   182,     0,     0,   164,     0,     0,
     0,     0,     0,     0,   189,     0,   191,     0,   193,   199,
   163,   159,     0,    41,     0,    48,     0,     0,     0,   174,
     0,     0,   175,     0,     0,   176,     0,     0,     0,    42,
     0,   145,     0,     0,     0,     0,     0,     0,     0,   165,
     0,     0,     0,     0,   184,     0,   186,     0,   188,     0,
    43,    45,     0,    46,    93,     0,     0,     0,     0,     0,
   190,   192,   194,    47,    49,     0,     0,     0
};

static const short yydefgoto[] = {  1196,
     2,    55,   631,    56,    57,   381,   922,   928,   557,   712,
  1046,  1159,   558,  1130,  1183,   559,  1161,   560,   561,   716,
   562,   121,   206,    58,   493,   519,   295,   506,   507,   296,
    62,    63,    64,    65,    66,   297,   690,  1104,  1143,   520,
   977,   980,   983,  1115,  1119,  1123,  1151,  1154,  1157,   686,
   687,    68,    69,    70,   314,   124,   332,   166,   828,   829,
   316,   300,   190,   626,   746,   495
};

static const short yypact[] = {  2638,
    77,  2714,-32768,  1806,    91,    74,    21,    13,   159,   -63,
    45,    70,   -31,    90,    99,   -34,   110,   124,   184,   -28,
    82,   129,   265,   368,   291,   751,   220,   230,   -69,   -69,
   234,   266,     2,   334,     3,   383,   -13,   393,   419,   433,
   331,   337,   341,     8,    24,-32768,   360,-32768,   456,-32768,
   491,   497,    20,    27,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    -2,    12,-32768,-32768,-32768,-32768,    26,    79,   125,
   327,   342,   387,   487,   506,   513,   526,   530,   539,   540,
   556,   574,   575,   589,   606,   607,   613,   614,   374,   375,
   384,   398,-32768,   409,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2099,  2099,  2099,-32768,-32768,  2099,  1437,    37,   536,
  2099,   488,  1241,-32768,   538,   547,  2099,   553,-32768,  2099,
-32768,  2099,  1939,  2099,  2099,   438,  2099,  1939,  2099,  2099,
   444,  1939,  2099,  2099,  1308,   448,  2099,   434,   453,   476,
  1308,   442,   445,   499,   503,   512,   516,   517,   582,   -69,
   -69,   -69,  2099,  2099,   -77,-32768,   -50,   -69,   522,   537,
   563,  1642,   226,   523,-32768,  1308,    23,-32768,-32768,  1308,
  1308,   559,   569,   702,  2099,  2099,  2099,   590,  2099,   596,
   634,  2099,  2099,-32768,   752,-32768,-32768,-32768,   755,-32768,
   758,   636,  2099,   765,   639,-32768,   -69,-32768,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,
   461,   518,   518,   518,   772,   505,   669,   669,   669,  4928,
    31,  1939,  2731,   209,   661,   792,   693,  1276,-32768,-32768,
  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,-32768,-32768,  1396,   -59,  3484,
  4949,   608,   692,  2222,-32768,-32768,-32768,  2414,-32768,   554,
  4970,  4991,  2099,  5012,   618,  5033,  5054,  2099,   619,  5075,
  5096,  1771,  1172,  2414,   823,-32768,  2099,  5117,  2099,  2099,
  2099,   841,  2099,  2099,  2099,  2062,  2062,  2062,  2062,   718,
    97,-32768,-32768,  3510,  3536,   -69,   -69,   598,   598,   332,
  2099,  2099,  2099,  1642,  1642,  2099,  2781,   386,-32768,  2099,
   666,    40,   846,-32768,  2099,   911,   869,   871,  2099,  2099,
-32768,  5138,  5159,  5180,   799,  3562,-32768,   757,  2433,  5201,
-32768,  1014,-32768,  1209,-32768,  2099,  4238,   279,  2099,   314,
     9,  5222,  4261,  5243,  4284,  5264,  4307,  5285,  4330,  5306,
  4353,  5327,  4376,  5348,  4399,  5369,  4422,  5390,  4445,  5411,
  4468,  5432,  4491,  3588,  3614,  5453,  4514,  5474,  4537,  5495,
  4560,  5516,  4583,  5537,  4606,  5558,  4629,  3640,  3666,  3692,
  3718,  3744,  3770,   641,   115,   756,   760,   767,   766,  2099,
-32768,  1308,  1308,   672,    98,   518,  2099,   894,   899,    16,
   771,-32768,  2465,  1432,  1001,   764,   764,   560,   560,   560,
   560,   -43,   -43,   669,   669,   669,   669,-32768,    18,  1939,
  2099,   900,  1472,  2099,   633,  2099,  1939,   813,   901,   902,
  5579,   903,   818,   905,   907,  5600,   822,   909,   910,  1939,
-32768,   673,  2099,  5621,   912,  2542,  5642,  5663,  2099,  2842,
  2870,  5684,   787,  5915,-32768,   791,   795,   796,   794,   -69,
  2099,  2099,-32768,-32768,-32768,   793,  2781,-32768,   797,  2099,
  3796,  3822,  3848,  3458,   -30,     4,     5,    -8,-32768,   147,
   -69,  2215,  4652,-32768,-32768,  2099,-32768,  4675,-32768,  1308,
  1308,  4698,  4721,   922,   923,   925,   802,  2099,  2264,  2099,
  2099,-32768,-32768,-32768,  4744,   343,-32768,  2898,-32768,-32768,
   807,   808,   803,-32768,   809,   936,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2099,  2099,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2099,  2099,
  2099,  2099,  2099,  2099,  2099,   940,-32768,  1939,   518,-32768,
-32768,  2099,  4767,   939,   941,   819,    81,  2099,   945,   947,
  1415,-32768,   957,   814,     8,   963,-32768,  2099,-32768,   854,
   518,   177,  3874,   -69,-32768,  1939,  2926,  1607,  2487,  2414,
-32768,   926,  1308,  1308,   970,  1308,   754,  1308,  1308,   971,
   928,  1308,  1308,   677,-32768,  1567,   974,   845,   976,   977,
   978,   667,   980,   981,   982,   983,   985,   986,   987,   991,
   410,  3900,  3926,-32768,-32768,  2954,   -69,   -69,   -69,  1939,
  1939,  1939,  1939,   993,   863,   -37,-32768,   416,-32768,   147,
   995,  1743,   996,  1012,  1013,  1017,  1019,  1308,  1308,  1308,
  1016,  3952,-32768,  2512,   893,  1022,  1026,-32768,  1027,-32768,
    14,   904,  2099,  2099,  1308,   895,  2099,-32768,  5705,  4790,
  5726,  4813,  5747,  4836,  5768,  4859,  4882,   906,   229,   914,
  5789,    88,-32768,-32768,   197,   303,   913,  1028,  1872,-32768,
-32768,-32768,     8,  2099,-32768,   678,-32768,  5915,-32768,  1030,
    25,  2099,    39,   681,-32768,-32768,  1939,  2099,   915,    17,
    42,  1308,  1032,   917,   918,  1035,  1037,  1308,   919,  1040,
  1044,-32768,-32768,  1046,  2099,  1308,  1308,  1308,-32768,   385,
  1308,  1308,  1308,  1308,  1308,  1308,  1308,   420,  2099,  2099,
  2099,   930,   107,   355,   405,   684,   685,   705,   708,-32768,
  1308,-32768,-32768,  1642,    72,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1063,  1066,   988,-32768,  2099,  2099,  2099,-32768,
-32768,   279,-32768,  1070,  2099,  3978,  4004,   709,-32768,  2099,
  5810,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   944,
-32768,-32768,-32768,-32768,  1308,   518,  2099,  1073,  1076,    16,
-32768,  1075,  4905,     8,-32768,-32768,-32768,   518,  4030,-32768,
   950,   719,  5915,  2099,-32768,   -69,-32768,   -69,  1079,-32768,
  2099,  2099,-32768,-32768,  1081,  2099,-32768,-32768,  1083,  4056,
  1084,  1085,  1087,  2099,  2099,   852,  1088,  1089,  1090,  1096,
  1097,  1098,-32768,  2062,  2982,  5831,  2758,   598,   -69,  1099,
   -69,  1101,   -69,  1102,  1103,  1104,  1105,  1106,    -3,   992,
  3010,   441,-32768,-32768,-32768,  1308,  2786,   480,  5852,-32768,
-32768,   324,  5915,  2099,  2099,  1308,   990,   723,  5915,  1308,
  1109,  1123,  1125,  1911,-32768,  1126,  1128,-32768,  1002,-32768,
  1129,  2099,-32768,  1005,  3038,    48,    78,-32768,  3066,  3094,
-32768,  3122,  1135,  2099,-32768,-32768,-32768,  2030,  2348,  1137,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2370,  1138,  1009,
-32768,  2099,-32768,  1011,   449,-32768,  1010,   452,-32768,  1018,
   490,-32768,  1020,-32768,-32768,-32768,-32768,  1144,  1308,  1024,
  2099,  1065,  2099,-32768,  2099,-32768,-32768,-32768,  2099,  4082,
  4108,-32768,  1308,  2099,  1145,  1148,  1025,-32768,-32768,-32768,
     8,-32768,  1068,-32768,  4134,-32768,  1156,-32768,-32768,  1157,
  1158,  1159,  1160,  4160,-32768,-32768,-32768,-32768,-32768,   598,
  2814,-32768,  1642,   147,  1642,   147,  1642,   147,-32768,   726,
-32768,  3150,  2099,  3178,  3206,  1031,  5915,  2099,  2099,   727,
  5915,-32768,-32768,-32768,  1165,-32768,  2099,-32768,-32768,-32768,
-32768,-32768,  1168,  1039,  2099,-32768,  3234,   492,   101,  3262,
   494,   118,  3290,   504,   269,  1308,  1173,  2318,  1041,  2395,
-32768,-32768,  2099,  5873,  4186,  1174,-32768,  4212,  1048,-32768,
  3318,  1201,  2099,  1202,  1203,  2099,  1204,  1205,  2099,  1206,
  1078,-32768,-32768,   147,-32768,-32768,   733,-32768,  2099,-32768,
  2099,  1208,-32768,-32768,  1077,  3346,-32768,-32768,  1080,  3374,
-32768,-32768,  1082,  3402,-32768,  1212,   277,  2367,  1214,  1086,
  5894,  3430,  1091,   147,  1218,   147,  1219,   147,  1220,-32768,
-32768,-32768,   147,-32768,   518,-32768,  1222,  1224,   283,-32768,
  1093,   312,-32768,  1094,   326,-32768,  1095,   346,   734,-32768,
  1107,-32768,  1108,  1227,   147,  1228,   147,  1229,   147,-32768,
   518,  1230,   518,  1237,-32768,   364,-32768,   370,-32768,   373,
-32768,-32768,   737,-32768,-32768,  1239,  1242,  1245,   518,  1256,
-32768,-32768,-32768,-32768,-32768,  1264,  1267,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   519,-32768,-32768,   722,-32768,   189,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -255,    38,-32768,   206,  1271,    -1,  -335,  -164,     1,
-32768,-32768,-32768,-32768,-32768,  1272,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -680,
  -631,-32768,-32768,-32768,    49,-32768,   271,-32768,   276,    50,
  -116,   -60,  -610,   430,-32768,    -4
};


#define	YYLAST		6044


static const short yytable[] = {   125,
    60,   202,    61,   509,   466,   174,   177,   347,   437,   805,
   351,   188,   550,   356,   745,   207,   299,   550,   129,   624,
   146,   299,   865,   629,   197,   299,   353,   191,   354,   180,
   857,   197,   181,   372,   684,   374,   141,   432,   685,   136,
   264,   122,   336,   337,   860,   525,   526,   867,   199,   201,
   161,   162,   123,  1018,   803,    99,   100,   101,   102,   338,
   163,   103,    99,   100,   101,   102,   132,   164,   103,   336,
   337,   459,   866,   133,   136,   141,   460,   305,   282,   283,
   284,   309,     3,  1019,   736,   285,   339,   551,   552,   553,
   554,   555,   551,   552,   553,   554,   555,   868,   137,   132,
   802,   147,   142,   126,    74,   138,   680,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   144,   127,   115,   116,   285,   265,   266,   683,   203,
   148,   204,   852,   137,   988,   630,   205,   433,   175,   178,
   681,   682,   630,   684,   189,   299,   556,   685,   208,   130,
   128,   824,   625,   192,   355,   209,   198,   210,   336,   337,
   257,   258,   259,   200,   131,   260,   263,   336,   337,   268,
   737,   738,   684,   803,   134,   288,   685,   149,   290,   618,
   291,   298,   301,   302,   522,   304,   298,   306,   307,   684,
   298,   310,   311,   685,   315,   318,   299,   336,   337,   135,
   322,   434,   539,    74,   108,   109,   110,   111,   211,   913,
   212,   334,   335,   115,   116,   436,   336,   337,   684,   139,
   335,   707,   685,   115,   116,   352,   336,   337,   140,   357,
   358,   617,   500,   362,   363,   364,   145,   366,  1094,   143,
   369,   370,   899,   940,   900,   607,   425,   426,   427,   428,
   608,   377,   482,   144,   213,  1097,   214,   382,   383,   384,
   385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
   405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
   415,   416,   417,   418,   419,   420,   421,   422,   423,   165,
   167,   438,   173,   108,   109,   110,   111,   751,   169,   846,
   298,   170,   467,   150,   171,   108,   109,   110,   111,   443,
   444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
   454,   455,   456,   457,   115,   116,   505,   505,   508,   508,
   684,   154,   258,   299,   685,   336,   337,   197,   684,   159,
   641,   471,   685,  1069,   684,  1072,   476,  1075,   685,   842,
   258,   298,   349,   299,   467,   484,   160,   486,   487,   488,
   168,   490,   491,   492,   494,   494,   494,   494,    99,   100,
   101,   102,   176,   684,   103,   161,   162,   685,   179,   511,
   512,   513,   257,   258,   514,   163,   182,   684,   523,   632,
  1055,   685,   172,   528,   115,   116,  1100,   532,   533,   108,
   109,   110,   111,   151,  1141,   547,   152,   684,   153,   654,
  1164,   685,   183,  1127,   545,   893,   894,   548,   115,   116,
   331,   620,   333,   336,   337,   684,   184,   803,   340,   685,
   803,   684,   348,   803,   684,   685,   884,   885,   685,  1166,
   549,   336,   337,  1149,   998,  1152,   215,  1155,   216,   999,
   185,   194,  1158,  1168,   424,   197,   186,   510,   115,   116,
   187,   217,   619,   218,   336,   337,   707,   380,   613,   845,
   847,   614,   615,  1170,  1176,   621,  1178,   995,  1180,   193,
   901,   299,   902,   269,   195,   803,    99,   100,   101,   102,
   196,  1186,   103,   251,   252,   336,   337,  1187,   298,   633,
  1188,   613,   637,   253,   639,   640,   219,   803,   220,   299,
   803,   521,   197,   803,   336,   337,   803,   254,   298,   336,
   337,   656,   496,   497,   498,   336,   337,   662,   255,   267,
   903,   709,   904,   286,   803,   789,   803,   729,   803,   672,
   673,   804,   287,    99,   100,   101,   102,   289,   676,   103,
   336,   337,   974,   299,   299,   299,   299,   303,   336,   337,
   319,   336,   337,   308,   692,   754,   991,   317,   323,   694,
   695,   324,   320,   708,  1033,   330,   702,  1035,   704,   705,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   730,   321,   503,   504,   285,   336,
   337,   336,   337,   336,   337,   333,   221,   996,   222,   796,
   797,   798,   799,   336,   337,  1037,   750,  1093,   325,  1096,
   115,   116,   326,   719,   720,   223,   430,   224,   204,  1099,
   299,   327,   225,   205,   226,   328,   329,   721,   722,   723,
   724,   725,   726,   727,   350,   227,   298,   228,   341,   229,
   731,   230,    28,    29,    30,    31,   739,    33,   231,   233,
   232,   234,   779,   342,    38,    39,   748,     5,     6,   280,
   281,   282,   283,   284,   298,   235,   613,   236,   285,   467,
   359,   468,   760,   761,  1064,   763,   862,   766,   767,   343,
   360,   770,   771,   237,   239,   238,   240,   361,   515,    11,
    12,   516,    14,    15,   517,    17,   518,    19,   241,    20,
   242,    22,    23,   365,    25,    26,   368,   780,   298,   298,
   298,   298,   367,   115,   116,   243,   245,   244,   246,   463,
    37,   204,   247,   249,   248,   250,   205,   813,   814,   815,
    41,    42,    43,   467,   467,   473,   477,   371,   115,   116,
   373,   826,   827,   375,   638,   831,   204,   376,   378,   708,
   671,   205,   605,   848,   606,   379,   429,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   688,   853,   155,   439,   285,   156,   285,   440,   157,
   859,   158,   764,   524,   765,   298,   863,   467,   467,   616,
   655,   869,   467,   854,   772,   855,   467,   875,   861,   467,
   467,   905,   906,   880,   441,   881,   882,   883,   464,   483,
   886,   887,   888,   889,   890,   891,   892,   895,   896,   897,
   467,   933,   907,   467,   926,   908,   927,   489,   499,   909,
   910,   527,   911,   941,   467,   960,   944,   961,  1004,   920,
  1005,  1076,   926,  1077,  1086,   917,   918,   919,  1004,  1171,
  1129,  1172,  1189,   923,  1190,   530,  1078,   531,   929,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   537,   969,
   610,   609,   285,   540,   932,   934,   505,   611,   508,   622,
   819,   612,   623,   627,   753,   642,   634,   643,   644,   646,
   647,   648,   945,   649,   651,   652,   653,   666,   658,   949,
   950,   667,     5,     6,   952,   668,   669,   670,   698,   699,
   674,   700,   958,   959,   675,   701,   713,   714,   717,   715,
  1128,   718,   968,   728,   733,   744,   734,   793,   794,   795,
   740,   735,   741,   515,    11,    12,   516,    14,    15,   517,
    17,   518,    19,   743,    20,   992,    22,    23,   747,    25,
    26,   749,  1000,  1001,   759,  1002,   762,   768,   769,  1006,
   774,   775,   776,   777,   778,    37,   781,   782,   783,   784,
  1015,   785,   786,   787,   788,    41,    42,    43,   800,   801,
   806,   808,  1024,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   809,   810,   816,
  1031,   285,   811,   820,   812,     5,     6,   821,   505,   822,
   508,   830,   823,   825,   850,   856,   841,   870,  1040,  1042,
   873,  1044,   874,  1045,   843,   877,   849,  1047,   529,   878,
   879,   864,  1051,   871,   872,   876,   515,    11,    12,   516,
    14,    15,   517,    17,   518,    19,   898,    20,   914,    22,
    23,   915,    25,    26,   912,   921,   916,   931,   935,   936,
   938,  1067,   943,  1070,   948,  1073,   951,   953,    37,   955,
   956,  1080,   957,   962,   963,   964,  1084,  1085,    41,    42,
    43,   965,   966,   967,   976,  1088,   979,   982,   984,   985,
   986,   987,  1007,  1091,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,  1101,  1003,   989,  1008,   285,
  1009,   929,  1011,  1012,  1014,  1013,   946,  1016,   947,  1023,
  1160,  1116,  1027,  1029,  1120,  1030,  1034,  1124,  1032,  1039,
  1052,   543,  1043,  1053,  1036,  1054,  1038,  1131,  1056,  1132,
  1041,  1058,  1059,  1060,  1061,  1062,  1181,  1083,  1184,   975,
  1087,   978,  1089,   981,    71,   292,  1090,  1105,  1102,  1110,
    75,    76,    77,  1112,  1194,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,  1114,  1117,  1118,  1121,
  1122,  1125,  1133,  1134,   293,  1126,  1136,  1140,  1138,  1144,
     5,     6,  1145,  1150,  1153,  1156,  1148,  1162,  1163,  1165,
  1167,  1169,  1175,  1177,  1179,  1182,    28,    29,    30,    31,
    32,    33,  1185,  1173,  1191,  1174,   270,  1192,    38,    39,
  1193,   515,    11,    12,   516,    14,    15,   517,    17,   518,
    19,  1195,    20,  1197,    22,    23,  1198,    25,    26,   858,
   711,  1107,    59,    67,   104,   105,   106,   107,  1050,   937,
     0,   442,     0,    37,     0,     0,     0,     0,     0,     0,
     0,   112,   294,    41,    42,    43,   114,     0,     0,     0,
     0,   117,     0,  1068,     0,  1071,   120,  1074,     0,   481,
    71,   292,     0,     0,     0,     0,    75,    76,    77,     0,
     0,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,     0,     0,     0,     0,   544,     0,     0,     0,
   293,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,    28,    29,    30,    31,    32,    33,     0,     0,
     0,     0,     0,     0,    38,    39,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,   458,     0,     0,   285,     0,     0,     0,     0,     0,
   104,   105,   106,   107,     0,     0,     0,     0,     0,     0,
   742,     0,     0,     0,     0,     0,     0,   112,   312,     0,
     0,     0,   114,     0,     0,     0,     0,   117,     0,    71,
   256,     0,   120,     0,   313,    75,    76,    77,     0,     0,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,     0,     0,     0,    71,   256,     0,     0,     0,     0,
    75,    76,    77,     0,     0,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   104,
   105,   106,   107,   285,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   112,   113,     0,     0,
   285,   114,     0,     0,     0,     0,   117,     0,     0,   261,
     0,   120,   773,   262,   104,   105,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   112,   113,     0,     0,     0,   114,     0,     0,     0,
     0,   117,     0,     0,   635,     0,   120,     0,   636,    71,
   256,     0,     0,     0,     0,    75,    76,    77,     0,     0,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,     0,     0,     0,    71,   256,     0,     0,     0,     0,
    75,    76,    77,     0,     0,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,     0,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
   105,   106,   107,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   112,   113,     0,     0,
     0,   114,     0,     0,     0,     0,   117,     0,     0,   756,
     0,   120,     0,   757,   104,   105,   106,   107,   807,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   344,   345,     0,     0,     0,   114,     0,     0,     0,
     0,   346,     0,    71,   465,     0,   120,     0,   164,    75,
    76,    77,     0,     0,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,     0,     0,     0,    71,    72,
    73,     0,    74,     0,    75,    76,    77,     0,     0,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
     0,    99,   100,   101,   102,     0,     0,   103,     0,     0,
     0,     0,     0,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   104,   105,   106,   107,   851,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   112,   113,     0,     0,     0,   114,     0,     0,     0,     0,
   117,     0,     0,     0,     0,   120,     0,   480,   104,   105,
   106,   107,   108,   109,   110,   111,  1010,     0,     0,     0,
     0,     0,     0,     0,     0,   112,   113,     0,     0,     0,
   114,   115,   116,     0,     0,   117,     0,   118,     0,   119,
   120,    71,   292,     0,     0,     0,     0,    75,    76,    77,
     0,     0,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,     0,     0,     0,     0,     0,     0,     0,
     0,   293,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,    28,    29,    30,    31,    32,    33,     0,
     0,     0,     0,     0,     0,    38,    39,     0,     0,     0,
     0,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,  1025,     0,     0,     0,   285,
     0,   104,   105,   106,   107,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   112,   294,
     0,     0,     0,   114,    71,   256,   197,     0,   117,     0,
    75,    76,    77,   120,     0,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,     0,    99,   100,   101,
   102,    71,   256,   103,     0,     0,     0,    75,    76,    77,
     0,     0,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,     0,     0,     0,     0,     0,     0,     0,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,   104,   105,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   112,   113,     0,     0,     0,   114,     0,     0,     0,
     0,   117,     0,     0,     0,     0,   120,     0,     0,     0,
     0,   104,   105,   106,   107,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     0,     0,     0,   114,    71,   465,     5,     6,   117,     0,
    75,    76,    77,   120,     0,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,     0,   515,    11,    12,
   516,    14,    15,   517,    17,   518,    19,     0,    20,     0,
    22,    23,     0,    25,    26,     5,     6,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
    42,    43,     0,     0,     0,     0,   515,    11,    12,   516,
    14,    15,   517,    17,   518,    19,     0,    20,     0,    22,
    23,     0,    25,    26,   104,   105,   106,   107,     0,     5,
     6,     0,     0,     0,     0,     0,     0,     0,    37,     0,
     0,   112,   113,     0,     0,     0,   114,     0,    41,    42,
    43,   117,   689,  1026,     0,     0,   120,     0,     0,     0,
   515,    11,    12,   516,    14,    15,   517,    17,   518,    19,
     0,    20,     0,    22,    23,  1028,    25,    26,     5,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
  1106,   703,    41,    42,    43,     0,     0,     0,     0,   515,
    11,    12,   516,    14,    15,   517,    17,   518,    19,     0,
    20,   466,    22,    23,     0,    25,    26,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   541,    37,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    41,    42,    43,     0,  1103,     0,     0,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   628,     0,     0,     0,   285,     0,     0,     0,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   758,     0,     0,     0,   285,     0,
     0,     0,     0,     0,  1142,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   818,
     0,     0,     0,   285,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,     0,
     0,     0,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,    -3,     1,     0,
   285,    -3,     0,     0,     0,     0,     0,     0,     0,    -3,
    -3,     0,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,    -3,     0,     0,     0,     0,    -3,    -3,   659,
    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,     0,
     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,     0,    -3,
    -3,    -3,    -3,     0,    -3,    -3,     0,     4,     0,     0,
     0,    -3,    -3,    -3,    -3,     5,     6,    -3,     0,    -3,
     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,     0,     0,     0,     0,     0,     0,     0,     7,     0,
     0,     0,     0,     8,     9,     0,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,     0,    20,    21,    22,
    23,    24,    25,    26,     0,     0,     0,    27,    28,    29,
    30,    31,    32,    33,     0,    34,    35,    36,    37,     0,
    38,    39,     5,     6,     0,     0,     0,    40,    41,    42,
    43,     0,     0,    44,     0,    45,     0,    46,    47,    48,
    49,    50,    51,    52,    53,    54,     0,     0,     0,     0,
     0,     0,     0,   515,    11,    12,   516,    14,    15,   517,
    17,   518,    19,     0,    20,     0,    22,    23,     0,    25,
    26,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,    37,     0,     0,     0,   285,
     0,     0,     0,   435,     0,    41,    42,    43,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   972,     0,   973,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   993,     0,   994,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,  1065,
     0,  1066,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,   663,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,   664,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,   710,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,   755,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,   792,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,   970,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,   990,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,  1017,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,  1020,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,  1021,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,  1022,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,  1079,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,  1081,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,  1082,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,  1092,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,  1095,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,  1098,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,  1113,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,  1135,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,  1137,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,  1139,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,  1147,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   431,     0,
     0,     0,     0,   501,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   461,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   501,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   502,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   538,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   585,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   586,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   599,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   600,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   601,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   602,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   603,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   604,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   677,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   678,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   679,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   752,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   790,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   791,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   817,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   924,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   925,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   942,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   954,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,  1048,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,  1049,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,  1057,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,  1063,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,  1109,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,  1111,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
   546,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,     0,   564,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,   566,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,   568,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,   570,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,     0,     0,   572,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,   574,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,     0,
     0,   576,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,   578,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,   580,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
   582,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,     0,   584,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,   588,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,   590,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,   592,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,     0,     0,   594,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,   596,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,     0,
     0,   598,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,   691,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,   693,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
   696,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,     0,   697,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,   706,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,   732,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,   833,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,     0,     0,   835,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,   837,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,     0,
     0,   839,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,   840,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,   939,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   431,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   462,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   469,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   470,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   472,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   474,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   475,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   478,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   479,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   485,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   534,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   535,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   536,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   542,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   563,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   565,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   567,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   569,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   571,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   573,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   575,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   577,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   579,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   581,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   583,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   587,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   589,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   591,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   593,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   595,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   597,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   645,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   650,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   657,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   660,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   661,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   665,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   832,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   834,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   836,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   838,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   844,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   930,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   971,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   997,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,  1108,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,  1146,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285
};

static const short yycheck[] = {     4,
     2,     4,     2,   339,     8,     4,     4,   172,   264,   690,
   175,     4,     4,   178,   625,     4,   133,     4,     6,     4,
    49,   138,     6,     6,     5,   142,     4,     4,     6,    43,
     6,     5,    46,   198,    72,   200,    71,     7,    76,    71,
     4,     4,   120,   121,     6,     6,     7,     6,    53,    54,
   120,   121,     4,     6,   686,    36,    37,    38,    39,   137,
   130,    42,    36,    37,    38,    39,   130,   137,    42,   120,
   121,   131,    56,   137,    71,    71,   136,   138,   122,   123,
   124,   142,     6,     6,     4,   129,   137,    79,    80,    81,
    82,    83,    79,    80,    81,    82,    83,    56,   130,   130,
   138,   130,   137,    13,     7,   137,   137,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   130,    49,   126,   127,   129,    90,    91,   137,   132,
    49,   134,   743,   130,   138,   118,   139,   107,   137,   137,
   137,   137,   118,    72,   137,   262,   138,    76,   137,   137,
   130,   138,   137,   130,   132,   130,   137,   132,   120,   121,
   112,   113,   114,   137,     6,   117,   118,   120,   121,   121,
    90,    91,    72,   805,   130,   127,    76,    49,   130,   435,
   132,   133,   134,   135,   349,   137,   138,   139,   140,    72,
   142,   143,   144,    76,   145,   147,   313,   120,   121,   130,
   151,   262,   367,     7,   107,   108,   109,   110,   130,   138,
   132,   163,   164,   126,   127,     7,   120,   121,    72,   130,
   172,   134,    76,   126,   127,   176,   120,   121,   130,   180,
   181,   134,   136,   185,   186,   187,    53,   189,   138,   130,
   192,   193,   136,   854,   138,   131,   251,   252,   253,   254,
   136,   203,   313,   130,   130,   138,   132,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,    29,
    30,   264,    32,   107,   108,   109,   110,   131,    43,     7,
   262,    46,   136,    49,    49,   107,   108,   109,   110,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   126,   127,   338,   339,   338,   339,
    72,    51,   294,   460,    76,   120,   121,     5,    72,   130,
   467,   303,    76,  1034,    72,  1036,   308,  1038,    76,   131,
   312,   313,   137,   480,   136,   317,   137,   319,   320,   321,
   137,   323,   324,   325,   326,   327,   328,   329,    36,    37,
    38,    39,    49,    72,    42,   120,   121,    76,     6,   341,
   342,   343,   344,   345,   346,   130,     4,    72,   350,   460,
  1011,    76,   137,   355,   126,   127,   138,   359,   360,   107,
   108,   109,   110,    46,   138,   378,    49,    72,    51,   480,
   138,    76,     4,  1104,   376,     6,     7,   379,   126,   127,
   160,   436,   162,   120,   121,    72,     4,  1069,   168,    76,
  1072,    72,   172,  1075,    72,    76,    62,    63,    76,   138,
   137,   120,   121,  1134,   131,  1136,   130,  1138,   132,   136,
   130,     6,  1143,   138,     4,     5,   130,   136,   126,   127,
   130,   130,   435,   132,   120,   121,   134,   207,   430,   735,
   736,   432,   433,   138,  1165,   437,  1167,     8,  1169,   130,
   136,   608,   138,     6,     4,  1127,    36,    37,    38,    39,
     4,   138,    42,   130,   130,   120,   121,   138,   460,   461,
   138,   463,   464,   130,   466,   467,   130,  1149,   132,   636,
  1152,   136,     5,  1155,   120,   121,  1158,   130,   480,   120,
   121,   483,   327,   328,   329,   120,   121,   489,   130,     4,
   136,   546,   138,     6,  1176,   136,  1178,   608,  1180,   501,
   502,   136,     6,    36,    37,    38,    39,     5,   510,    42,
   120,   121,   898,   680,   681,   682,   683,   130,   120,   121,
   137,   120,   121,   130,   526,   636,   136,   130,   137,   530,
   531,   137,   130,   546,   136,     4,   538,   136,   540,   541,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   609,   130,   336,   337,   129,   120,
   121,   120,   121,   120,   121,   345,   130,   138,   132,   680,
   681,   682,   683,   120,   121,   136,   631,   136,   130,   136,
   126,   127,   130,   585,   586,   130,   132,   132,   134,   136,
   757,   130,   130,   139,   132,   130,   130,   599,   600,   601,
   602,   603,   604,   605,   132,   130,   608,   132,   137,   130,
   612,   132,    65,    66,    67,    68,   618,    70,   130,   130,
   132,   132,     6,   137,    77,    78,   628,    12,    13,   120,
   121,   122,   123,   124,   636,   130,   638,   132,   129,   136,
   132,   138,   643,   644,  1030,   646,   757,   648,   649,   137,
   132,   652,   653,   130,   130,   132,   132,     6,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,   130,    54,
   132,    56,    57,   134,    59,    60,    93,    61,   680,   681,
   682,   683,   137,   126,   127,   130,   130,   132,   132,   132,
    75,   134,   130,   130,   132,   132,   139,   698,   699,   700,
    85,    86,    87,   136,   136,   138,   138,     6,   126,   127,
     6,   713,   714,     6,   132,   717,   134,   132,     4,   732,
   500,   139,   132,   736,   134,   137,     5,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   521,   744,    43,   134,   129,    46,   129,     7,    49,
   752,    51,    49,   138,    51,   757,   758,   136,   136,   138,
   138,   762,   136,   136,   138,   138,   136,   768,   138,   136,
   136,   138,   138,   775,   132,   776,   777,   778,   137,     7,
   781,   782,   783,   784,   785,   786,   787,   789,   790,   791,
   136,   846,   138,   136,   136,   138,   138,     7,   131,   801,
   801,     6,   804,   858,   136,     4,   138,     6,   136,   822,
   138,   136,   136,   138,   138,   817,   818,   819,   136,   136,
   138,   138,   136,   825,   138,     7,  1041,     7,   830,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    90,   894,
   131,   136,   129,   137,   845,   847,   898,   131,   898,     6,
     8,   136,     4,   133,   634,    93,     7,     7,     7,     7,
    93,     7,   864,     7,    93,     7,     7,   131,     7,   871,
   872,   131,    12,    13,   876,   131,   131,   134,     7,     7,
   138,     7,   884,   885,   138,   134,   130,   130,   130,   137,
  1105,     6,   894,     4,     6,   132,     6,   677,   678,   679,
     6,   133,     6,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,     7,    54,   916,    56,    57,     6,    59,
    60,   118,   924,   925,    49,   926,     7,     7,    51,   930,
     7,   137,     7,     7,     7,    75,     7,     7,     7,     7,
   942,     7,     7,     7,     4,    85,    86,    87,     6,   137,
     6,     6,   954,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,     6,     6,     4,
   972,   129,     6,   131,     6,    12,    13,     6,  1030,     4,
  1030,   137,     6,   130,     7,     6,   131,     6,   989,   991,
     6,   993,     6,   995,   131,     6,   134,   999,   138,     6,
     5,   137,  1004,   137,   137,   137,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,   137,    54,     6,    56,
    57,     6,    59,    60,   804,     6,    89,   134,     6,     4,
     6,  1033,   133,  1035,     6,  1037,     6,     5,    75,     6,
     6,  1043,     6,     6,     6,     6,  1048,  1049,    85,    86,
    87,     6,     6,     6,     6,  1057,     6,     6,     6,     6,
     6,     6,     4,  1065,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,  1076,   137,   136,     6,   129,
     6,  1083,     7,     6,     6,   134,   866,   133,   868,     5,
  1145,  1093,     6,     6,  1096,   137,   137,  1099,   138,     6,
     6,   138,    88,     6,   137,   131,   137,  1109,    91,  1111,
   137,     6,     6,     6,     6,     6,  1171,   137,  1173,   899,
     6,   901,     5,   903,     3,     4,   138,   137,     6,     6,
     9,    10,    11,   136,  1189,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,     6,     6,     6,     6,
     6,     6,     5,   137,    43,   138,   137,     6,   137,     6,
    12,    13,   137,     6,     6,     6,   136,     6,     5,   137,
   137,   137,     6,     6,     6,     6,    65,    66,    67,    68,
    69,    70,     6,   137,     6,   138,     6,     6,    77,    78,
     6,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,     6,    54,     0,    56,    57,     0,    59,    60,   751,
   549,  1083,     2,     2,   103,   104,   105,   106,  1003,   850,
    -1,     6,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,   121,    85,    86,    87,   125,    -1,    -1,    -1,
    -1,   130,    -1,  1033,    -1,  1035,   135,  1037,    -1,   138,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,
    43,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,    -1,    65,    66,    67,    68,    69,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    77,    78,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,     6,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,     3,
     4,    -1,   135,    -1,   137,     9,    10,    11,    -1,    -1,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   103,
   104,   105,   106,   129,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   120,   121,    -1,    -1,
   129,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   133,
    -1,   135,     6,   137,   103,   104,   105,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,   133,    -1,   135,    -1,   137,     3,
     4,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,
   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   133,
    -1,   135,    -1,   137,   103,   104,   105,   106,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,   130,    -1,     3,     4,    -1,   135,    -1,   137,     9,
    10,    11,    -1,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,     3,     4,
     5,    -1,     7,    -1,     9,    10,    11,    -1,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    39,    -1,    -1,    42,    -1,    -1,
    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,   103,   104,   105,   106,     6,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   120,   121,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   103,   104,
   105,   106,   107,   108,   109,   110,     6,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
   125,   126,   127,    -1,    -1,   130,    -1,   132,    -1,   134,
   135,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    -1,    -1,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    43,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    65,    66,    67,    68,    69,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,     6,    -1,    -1,    -1,   129,
    -1,   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
    -1,    -1,    -1,   125,     3,     4,     5,    -1,   130,    -1,
     9,    10,    11,   135,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    36,    37,    38,
    39,     3,     4,    42,    -1,    -1,    -1,     9,    10,    11,
    -1,    -1,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,   103,   104,   105,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
    -1,   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
    -1,    -1,    -1,   125,     3,     4,    12,    13,   130,    -1,
     9,    10,    11,   135,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    -1,    54,    -1,
    56,    57,    -1,    59,    60,    12,    13,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
    86,    87,    -1,    -1,    -1,    -1,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,    -1,    56,
    57,    -1,    59,    60,   103,   104,   105,   106,    -1,    12,
    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
    -1,   120,   121,    -1,    -1,    -1,   125,    -1,    85,    86,
    87,   130,   138,     6,    -1,    -1,   135,    -1,    -1,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    -1,    56,    57,     6,    59,    60,    12,    13,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,   138,    85,    86,    87,    -1,    -1,    -1,    -1,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
    54,     8,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     8,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    85,    86,    87,    -1,   138,    -1,    -1,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,     8,    -1,    -1,    -1,   129,    -1,    -1,    -1,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,     8,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,   138,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,     8,
    -1,    -1,    -1,   129,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,     0,     1,    -1,
   129,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    12,
    13,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    35,    -1,    -1,    -1,    -1,    40,    41,   138,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
    73,    74,    75,    -1,    77,    78,    -1,     4,    -1,    -1,
    -1,    84,    85,    86,    87,    12,    13,    90,    -1,    92,
    -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    64,    65,    66,
    67,    68,    69,    70,    -1,    72,    73,    74,    75,    -1,
    77,    78,    12,    13,    -1,    -1,    -1,    84,    85,    86,
    87,    -1,    -1,    90,    -1,    92,    -1,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,    59,
    60,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    75,    -1,    -1,    -1,   129,
    -1,    -1,    -1,   133,    -1,    85,    86,    87,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,   136,    -1,   138,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,   136,    -1,   138,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
    -1,   138,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   138,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   138,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   138,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   138,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   138,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   138,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   138,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   138,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   138,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   138,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   138,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   138,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
    -1,    -1,    -1,   136,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,   136,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,   136,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,   136,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,   136,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,   136,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,   136,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,   136,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,   136,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,   136,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,   136,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,   136,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,   136,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,   136,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,   136,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,    -1,    -1,   136,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,    -1,    -1,    -1,   136,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,
    -1,   136,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
   133,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,    -1,    -1,   133,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,   133,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,   133,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,    -1,    -1,   133,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,
    -1,   133,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,   133,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
   133,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,    -1,    -1,   133,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,   133,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,   133,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,    -1,    -1,   133,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,
    -1,   133,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,   133,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
   133,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,    -1,    -1,   133,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,    -1,    -1,   133,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
    -1,    -1,   133,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,    -1,    -1,   133,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,
    -1,   133,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,   133,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
   131,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,   131,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,   131,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,   131,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
   131,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,   131,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,   131,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,   131,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
   131,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,   131,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,   131,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,   131,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
   131,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,   131,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,   131,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,   131,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
   131,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,   129,
    -1,   131,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
   129,    -1,   131,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
    -1,   129,    -1,   131,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,    -1,
    -1,    -1,   129,    -1,   131,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
    -1,    -1,    -1,   129
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 145 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 159 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 160 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 161 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 165 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 170 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 175 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 179 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 186 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 191 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 206 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 219 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 248 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 255 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 265 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 281 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 283 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 288 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 290 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 295 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 485 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 503 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 514 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 519 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 527 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 534 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 541 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 546 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 554 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 561 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 569 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 576 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 52:
#line 580 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 585 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 54:
#line 593 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 55:
#line 594 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 56:
#line 595 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 57:
#line 596 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 58:
#line 597 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 59:
#line 601 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 60:
#line 602 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 61:
#line 610 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 62:
#line 641 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 63:
#line 680 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 64:
#line 734 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 751 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 769 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 67:
#line 780 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 68:
#line 799 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 69:
#line 813 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 70:
#line 830 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 71:
#line 856 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 72:
#line 883 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 73:
#line 897 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 74:
#line 914 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 928 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 76:
#line 945 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 77:
#line 965 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 78:
#line 988 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 79:
#line 998 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 80:
#line 1013 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 81:
#line 1017 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 82:
#line 1029 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v;
	if (!myGmshSurface)
	  v = Create_Vertex(num, x, y, z, lc, 1.0);
	else
	  v = Create_Vertex(num, x, y, myGmshSurface, lc);

	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(v->Pos.X,v->Pos.Y,v->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 83:
#line 1052 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1068 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      Attractor *att = tresholdAttractor::New(pars[0], pars[1], pars[2], pars[4]);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  att->addPoint(v->Pos.X,v->Pos.Y,v->Pos.Z);
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    att->addPoint(gv->x(),gv->y(),gv->z());
	}
      }
      att->buildFastSearchStructures();
      yyval.s.Type = MSH_POINT_ATTRACTOR;
      yyval.s.Num = 0;
    ;
    break;}
case 85:
#line 1096 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      Attractor *att = tresholdAttractor::New(pars[0], pars[1], pars[2], pars[4]);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  buildListOfPoints( att , c , (int) pars[3] );
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag((int)d);
	  if(ge){
	    buildListOfPoints( att , ge , (int) pars[3] );
	  }
	}
      }
      att->buildFastSearchStructures();
      yyval.s.Type = MSH_LINE_ATTRACTOR;
      yyval.s.Num = 0;
    ;
    break;}
case 86:
#line 1126 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1148 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 88:
#line 1166 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 89:
#line 1184 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1202 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1228 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1246 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1273 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1292 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1316 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1340 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1366 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1383 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1402 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1420 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1459 "Gmsh.y"
{
    myGmshSurface = 0;
  ;
    break;}
case 102:
#line 1464 "Gmsh.y"
{
    myGmshSurface = gmshSurface :: surfaceByTag ( (int) yyvsp[-1].d);
  ;
    break;}
case 103:
#line 1469 "Gmsh.y"
{
    int num = (int)yyvsp[-6].d, type = 0;
    myGmshSurface = gmshParametricSurface::NewParametricSurface ((int)yyvsp[-6].d,yyvsp[-3].c,yyvsp[-2].c,yyvsp[-1].c);
  ;
    break;}
case 104:
#line 1475 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 105:
#line 1497 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "PolarSphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshPolarSphere::NewPolarSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 106:
#line 1519 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1535 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1555 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 109:
#line 1572 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 110:
#line 1589 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 111:
#line 1610 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 112:
#line 1615 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 113:
#line 1620 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 114:
#line 1625 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 115:
#line 1632 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 116:
#line 1633 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 117:
#line 1634 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 118:
#line 1639 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 119:
#line 1643 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 120:
#line 1647 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 121:
#line 1663 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 122:
#line 1679 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 123:
#line 1695 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 124:
#line 1716 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 125:
#line 1728 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 126:
#line 1734 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 127:
#line 1740 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 128:
#line 1752 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 129:
#line 1761 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 130:
#line 1771 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 131:
#line 1787 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 132:
#line 1806 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 133:
#line 1820 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 134:
#line 1826 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 135:
#line 1832 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 136:
#line 1841 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 137:
#line 1855 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from THEM in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 138:
#line 1905 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 139:
#line 1920 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 140:
#line 1931 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 141:
#line 1951 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 142:
#line 1961 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 143:
#line 1983 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 144:
#line 1987 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 145:
#line 1992 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 146:
#line 1997 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 147:
#line 2009 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 148:
#line 2024 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 149:
#line 2040 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 150:
#line 2066 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 151:
#line 2093 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 152:
#line 2125 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 153:
#line 2132 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 154:
#line 2137 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 155:
#line 2143 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 156:
#line 2147 "Gmsh.y"
{
    ;
    break;}
case 157:
#line 2156 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 158:
#line 2164 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 159:
#line 2172 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 160:
#line 2180 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 161:
#line 2185 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 162:
#line 2193 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 163:
#line 2198 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 164:
#line 2206 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 165:
#line 2211 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 166:
#line 2219 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 167:
#line 2224 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 168:
#line 2233 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 169:
#line 2240 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 170:
#line 2247 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 171:
#line 2254 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 172:
#line 2261 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 173:
#line 2268 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 174:
#line 2275 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 175:
#line 2282 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 176:
#line 2289 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 177:
#line 2296 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 178:
#line 2301 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 179:
#line 2308 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 180:
#line 2313 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 181:
#line 2320 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 182:
#line 2325 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 183:
#line 2332 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 184:
#line 2337 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 185:
#line 2344 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 186:
#line 2349 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 187:
#line 2356 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 188:
#line 2361 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 189:
#line 2368 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 190:
#line 2373 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 191:
#line 2380 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 192:
#line 2385 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 193:
#line 2392 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 194:
#line 2397 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 195:
#line 2408 "Gmsh.y"
{
    ;
    break;}
case 196:
#line 2411 "Gmsh.y"
{
    ;
    break;}
case 197:
#line 2417 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 198:
#line 2426 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 199:
#line 2448 "Gmsh.y"
{
      yymsg(WARNING, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 200:
#line 2472 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 201:
#line 2481 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 202:
#line 2499 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 203:
#line 2517 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 204:
#line 2535 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 205:
#line 2564 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 206:
#line 2599 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 207:
#line 2604 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 208:
#line 2631 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 209:
#line 2645 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 210:
#line 2664 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 211:
#line 2670 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 212:
#line 2676 "Gmsh.y"
{
    ;
    break;}
case 213:
#line 2679 "Gmsh.y"
{
    ;
    break;}
case 214:
#line 2688 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 215:
#line 2697 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 216:
#line 2698 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 217:
#line 2699 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 218:
#line 2700 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 219:
#line 2701 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 220:
#line 2702 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 221:
#line 2703 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 222:
#line 2704 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 223:
#line 2706 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 224:
#line 2712 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 225:
#line 2713 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 226:
#line 2714 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 227:
#line 2715 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 228:
#line 2716 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 229:
#line 2717 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 230:
#line 2718 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 231:
#line 2719 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 232:
#line 2720 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 233:
#line 2721 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 234:
#line 2722 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 235:
#line 2723 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 236:
#line 2724 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 237:
#line 2725 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 238:
#line 2726 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 239:
#line 2727 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 240:
#line 2728 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 241:
#line 2729 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 242:
#line 2730 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 243:
#line 2731 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 244:
#line 2732 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 245:
#line 2733 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 246:
#line 2734 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 247:
#line 2735 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 248:
#line 2736 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 249:
#line 2737 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 250:
#line 2738 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 251:
#line 2739 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 252:
#line 2740 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 253:
#line 2741 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 254:
#line 2742 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 255:
#line 2743 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 256:
#line 2745 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 257:
#line 2746 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 258:
#line 2747 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 259:
#line 2748 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 260:
#line 2749 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 261:
#line 2750 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2751 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2752 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2753 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 265:
#line 2754 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2755 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 267:
#line 2756 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2757 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2758 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2759 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2760 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 272:
#line 2761 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2762 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 274:
#line 2763 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 275:
#line 2764 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 276:
#line 2765 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 277:
#line 2774 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 278:
#line 2775 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 279:
#line 2776 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 280:
#line 2777 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 281:
#line 2778 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 282:
#line 2779 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 283:
#line 2780 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 284:
#line 2785 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 285:
#line 2801 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 286:
#line 2816 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 287:
#line 2836 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 288:
#line 2850 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 289:
#line 2863 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 290:
#line 2886 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 291:
#line 2904 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 292:
#line 2922 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 293:
#line 2940 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2958 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 295:
#line 2966 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 296:
#line 2970 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 297:
#line 2974 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 298:
#line 2978 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 299:
#line 2982 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 300:
#line 2989 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 301:
#line 2993 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 302:
#line 2997 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 303:
#line 3001 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 304:
#line 3008 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 305:
#line 3013 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 306:
#line 3021 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 307:
#line 3026 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 308:
#line 3030 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 309:
#line 3035 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 310:
#line 3039 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 311:
#line 3051 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 312:
#line 3057 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 313:
#line 3068 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 314:
#line 3088 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 315:
#line 3098 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 316:
#line 3108 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 317:
#line 3118 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 318:
#line 3135 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 319:
#line 3154 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 320:
#line 3178 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 321:
#line 3207 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 322:
#line 3212 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 323:
#line 3216 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 324:
#line 3220 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 325:
#line 3233 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 326:
#line 3237 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 327:
#line 3249 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 328:
#line 3256 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 329:
#line 3278 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 330:
#line 3282 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 331:
#line 3297 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 332:
#line 3302 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 333:
#line 3309 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 334:
#line 3313 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 335:
#line 3321 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 336:
#line 3329 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 337:
#line 3343 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 338:
#line 3357 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 339:
#line 3361 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 340:
#line 3380 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 341:
#line 3402 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3425 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
