
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tCombine	352
#define	tBSpline	353
#define	tBezier	354
#define	tNurbs	355
#define	tOrder	356
#define	tWith	357
#define	tBounds	358
#define	tKnots	359
#define	tColor	360
#define	tColorTable	361
#define	tFor	362
#define	tIn	363
#define	tEndFor	364
#define	tIf	365
#define	tEndIf	366
#define	tExit	367
#define	tReturn	368
#define	tCall	369
#define	tFunction	370
#define	tMesh	371
#define	tTrimmed	372
#define	tShow	373
#define	tHide	374
#define	tB_SPLINE_SURFACE_WITH_KNOTS	375
#define	tB_SPLINE_CURVE_WITH_KNOTS	376
#define	tCARTESIAN_POINT	377
#define	tTRUE	378
#define	tFALSE	379
#define	tUNSPECIFIED	380
#define	tU	381
#define	tV	382
#define	tEDGE_CURVE	383
#define	tVERTEX_POINT	384
#define	tORIENTED_EDGE	385
#define	tPLANE	386
#define	tFACE_OUTER_BOUND	387
#define	tEDGE_LOOP	388
#define	tADVANCED_FACE	389
#define	tVECTOR	390
#define	tDIRECTION	391
#define	tAXIS2_PLACEMENT_3D	392
#define	tISO	393
#define	tENDISO	394
#define	tENDSEC	395
#define	tDATA	396
#define	tHEADER	397
#define	tFILE_DESCRIPTION	398
#define	tFILE_SCHEMA	399
#define	tFILE_NAME	400
#define	tMANIFOLD_SOLID_BREP	401
#define	tCLOSED_SHELL	402
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	403
#define	tFACE_BOUND	404
#define	tCYLINDRICAL_SURFACE	405
#define	tCONICAL_SURFACE	406
#define	tCIRCLE	407
#define	tTRIMMED_CURVE	408
#define	tGEOMETRIC_SET	409
#define	tCOMPOSITE_CURVE_SEGMENT	410
#define	tCONTINUOUS	411
#define	tCOMPOSITE_CURVE	412
#define	tTOROIDAL_SURFACE	413
#define	tPRODUCT_DEFINITION	414
#define	tPRODUCT_DEFINITION_SHAPE	415
#define	tSHAPE_DEFINITION_REPRESENTATION	416
#define	tELLIPSE	417
#define	tSolid	418
#define	tEndSolid	419
#define	tVertex	420
#define	tFacet	421
#define	tNormal	422
#define	tOuter	423
#define	tLoopSTL	424
#define	tEndLoop	425
#define	tEndFacet	426
#define	tAFFECTPLUS	427
#define	tAFFECTMINUS	428
#define	tAFFECTTIMES	429
#define	tAFFECTDIVIDE	430
#define	tOR	431
#define	tAND	432
#define	tEQUAL	433
#define	tNOTEQUAL	434
#define	tAPPROXEQUAL	435
#define	tLESSOREQUAL	436
#define	tGREATEROREQUAL	437
#define	tCROSSPRODUCT	438
#define	tPLUSPLUS	439
#define	tMINUSMINUS	440
#define	UNARYPREC	441

#line 1 "Gmsh.y"
 
// $Id: Gmsh.tab.cpp,v 1.174 2003-12-11 17:15:38 geuzaine Exp $
//
// Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static fpos_t yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char *LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char tmpstring[1024];
static Symbol TheSymbol, *pSymbol;
static Surface *STL_Surf;
static Shape TheShape;
static int i, j, k, flag, ImbricatedLoop = 0;
static int Last_NumberOfPoints = 0;
static double d, *pd;
static ExtrudeParams extr;
static char *str;
static StringXString *pStrCat;
static StringXNumber *pNumCat;
static StringXColor *pColCat;
static double (*pNumOpt)(int num, int action, double value);
static char* (*pStrOpt)(int num, int action, char *value);
static unsigned int (*pColOpt)(int num, int action, unsigned int value);
static Post_View *View;

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);
void FixRelativePath(char *in, char *out);

#line 83 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2319
#define	YYFLAG		-32768
#define	YYNTBASE	206

#define YYTRANSLATE(x) ((unsigned)(x) <= 441 ? yytranslate[x] : 340)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   193,     2,     2,     2,   191,     2,     2,   198,
   199,   189,   187,   203,   188,   202,   190,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   183,
     2,   185,   177,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   200,     2,   201,   197,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   204,     2,   205,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   178,   179,   180,   181,   182,   184,   186,   192,   194,   195,
   196
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   535,
   543,   550,   559,   560,   563,   566,   569,   572,   575,   578,
   581,   584,   587,   590,   593,   596,   599,   602,   605,   608,
   611,   614,   617,   620,   623,   626,   629,   632,   635,   638,
   640,   644,   645,   659,   661,   665,   666,   680,   682,   686,
   687,   701,   703,   707,   708,   728,   730,   734,   735,   755,
   757,   761,   762,   782,   784,   788,   789,   815,   817,   821,
   822,   848,   850,   854,   855,   881,   883,   887,   888,   920,
   922,   926,   927,   959,   961,   965,   966,   998,  1000,  1004,
  1005,  1037,  1039,  1043,  1044,  1076,  1078,  1082,  1083,  1115,
  1117,  1121,  1122,  1178,  1180,  1184,  1185,  1241,  1243,  1247,
  1248,  1304,  1306,  1310,  1311,  1355,  1357,  1361,  1362,  1406,
  1408,  1412,  1413,  1457,  1459,  1463,  1464,  1502,  1504,  1508,
  1509,  1547,  1549,  1553,  1554,  1592,  1594,  1598,  1599,  1613,
  1615,  1619,  1620,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
  1650,  1655,  1663,  1673,  1680,  1684,  1691,  1698,  1708,  1715,
  1725,  1731,  1740,  1749,  1761,  1768,  1778,  1788,  1798,  1806,
  1815,  1828,  1835,  1843,  1851,  1864,  1872,  1880,  1890,  1908,
  1917,  1926,  1934,  1942,  1954,  1963,  1976,  1985,  2000,  2023,
  2044,  2053,  2062,  2071,  2079,  2088,  2094,  2106,  2112,  2122,
  2124,  2126,  2128,  2129,  2132,  2139,  2146,  2153,  2160,  2165,
  2172,  2177,  2184,  2188,  2194,  2198,  2202,  2207,  2212,  2216,
  2224,  2228,  2236,  2240,  2243,  2246,  2253,  2262,  2271,  2282,
  2284,  2287,  2289,  2293,  2298,  2300,  2309,  2322,  2337,  2338,
  2351,  2352,  2369,  2370,  2389,  2398,  2411,  2426,  2427,  2440,
  2441,  2458,  2459,  2478,  2487,  2500,  2515,  2516,  2529,  2530,
  2547,  2548,  2567,  2569,  2572,  2582,  2590,  2593,  2600,  2610,
  2620,  2629,  2638,  2647,  2654,  2659,  2662,  2665,  2667,  2669,
  2671,  2673,  2675,  2677,  2681,  2684,  2687,  2690,  2694,  2698,
  2702,  2706,  2710,  2714,  2718,  2722,  2726,  2730,  2734,  2738,
  2742,  2746,  2752,  2757,  2762,  2767,  2772,  2777,  2782,  2787,
  2792,  2797,  2802,  2809,  2814,  2819,  2824,  2829,  2834,  2839,
  2846,  2853,  2860,  2865,  2870,  2875,  2880,  2885,  2890,  2895,
  2900,  2905,  2910,  2915,  2922,  2927,  2932,  2937,  2942,  2947,
  2952,  2959,  2966,  2973,  2978,  2980,  2982,  2984,  2986,  2988,
  2993,  2996,  3002,  3006,  3013,  3018,  3026,  3028,  3031,  3034,
  3038,  3042,  3054,  3064,  3072,  3080,  3081,  3085,  3087,  3091,
  3092,  3096,  3100,  3102,  3106,  3108,  3110,  3114,  3119,  3123,
  3129,  3134,  3136,  3138,  3140,  3144,  3149,  3156,  3164,  3166,
  3168,  3172,  3176,  3186,  3194,  3196,  3202,  3206,  3213,  3215,
  3219,  3221,  3228,  3233,  3238,  3245,  3252
};

static const short yyrhs[] = {   209,
     0,   208,     0,   214,     0,     1,     6,     0,     3,     0,
   188,     3,     0,   164,     0,   167,   168,   207,   207,   207,
   169,   170,   166,   207,   207,   207,   166,   207,   207,   207,
   166,   207,   207,   207,   171,   172,     0,   165,     0,     0,
   209,   210,     0,   211,     0,   213,     0,   212,     0,   139,
     6,     0,   140,     6,     0,   142,     6,     0,   141,     6,
     0,   143,     6,     0,   144,   198,   329,   203,     5,   199,
     6,     0,   145,   198,   329,   199,     6,     0,   146,   198,
     5,   203,     5,   203,   329,   203,   329,   203,     5,   203,
     5,   203,     5,   199,     6,     0,     3,     7,   123,   198,
     5,   203,   327,   199,     6,     0,     3,     7,   122,   198,
     5,   203,   325,   203,   333,   203,   324,   203,   324,   203,
   324,   203,   333,   203,   333,   203,   324,   199,     6,     0,
     3,     7,   121,   198,     5,   203,   325,   203,   325,   203,
   331,   203,   324,   203,   324,   203,   324,   203,   324,   203,
   333,   203,   333,   203,   333,   203,   333,   203,   324,   199,
     6,     0,     3,     7,   129,   198,     5,   203,     3,   203,
     3,   203,     3,   203,   324,   199,     6,     0,     3,     7,
   133,   198,     5,   203,     3,   203,   324,   199,     6,     0,
     3,     7,   150,   198,     5,   203,     3,   203,   324,   199,
     6,     0,     3,     7,   131,   198,     5,   203,   189,   203,
   189,   203,   325,   203,   324,   199,     6,     0,     3,     7,
   134,   198,     5,   203,   333,   199,     6,     0,     3,     7,
   135,   198,     5,   203,   333,   203,     3,   203,   324,   199,
     6,     0,     3,     7,   130,   198,     5,   203,     3,   199,
     6,     0,     3,     7,   136,   198,     5,   203,     3,   203,
   325,   199,     6,     0,     3,     7,   138,   198,     5,   203,
     3,   203,     3,   203,     3,   199,     6,     0,     3,     7,
   137,   198,     5,   203,   327,   199,     6,     0,     3,     7,
   132,   198,     5,   203,     3,   199,     6,     0,     3,     7,
    41,   198,     5,   203,     3,   203,     3,   199,     6,     0,
     3,     7,   148,   198,     5,   203,   333,   199,     6,     0,
     3,     7,   149,   198,     5,   203,   333,   203,     3,   199,
     6,     0,     3,     7,   147,   198,     5,   203,     3,   199,
     6,     0,     3,     7,   151,   198,     5,   203,     3,   203,
   325,   199,     6,     0,     3,     7,   152,   198,     5,   203,
     3,   203,   325,   203,   325,   199,     6,     0,     3,     7,
   159,   198,     5,   203,     3,   203,   325,   203,   325,   199,
     6,     0,     3,     7,   153,   198,     5,   203,     3,   203,
   325,   199,     6,     0,     3,     7,   163,   198,     5,   203,
     3,   203,   325,   203,   325,   199,     6,     0,     3,     7,
   154,   198,     5,   203,     3,   203,   333,   203,   333,   203,
   324,   203,   324,   199,     6,     0,     3,     7,   155,   198,
     5,   203,   333,   199,     6,     0,     3,     7,   156,   198,
   157,   203,   324,   203,     3,   199,     6,     0,     3,     7,
   158,   198,     5,   203,   333,   203,   324,   199,     6,     0,
     3,     7,   160,   198,     5,   203,     5,   203,     3,   203,
     3,   199,     6,     0,     3,     7,   161,   198,     5,   203,
     5,   203,     3,   199,     6,     0,     3,     7,   162,   198,
     3,   203,     3,   199,     6,     0,     0,   214,   215,     0,
   217,     0,   216,     0,   299,     0,   300,     0,   301,     0,
   304,     0,   305,     0,   306,     0,   307,     0,   310,     0,
   322,     0,   323,     0,   309,     0,   308,     0,    33,   198,
     5,   199,     6,     0,    33,   198,     5,   203,   335,   199,
     6,     0,     4,     5,   204,   218,   205,     6,     0,     4,
     5,     4,   327,   204,   218,   205,     6,     0,     0,   218,
   220,     0,   218,   223,     0,   218,   226,     0,   218,   229,
     0,   218,   232,     0,   218,   235,     0,   218,   238,     0,
   218,   241,     0,   218,   244,     0,   218,   247,     0,   218,
   250,     0,   218,   253,     0,   218,   256,     0,   218,   259,
     0,   218,   262,     0,   218,   265,     0,   218,   268,     0,
   218,   271,     0,   218,   274,     0,   218,   277,     0,   218,
   280,     0,   218,   283,     0,   218,   286,     0,   218,   289,
     0,   218,   292,     0,   218,   295,     0,   325,     0,   219,
   203,   325,     0,     0,    72,   198,   325,   203,   325,   203,
   325,   199,   221,   204,   219,   205,     6,     0,   325,     0,
   222,   203,   325,     0,     0,    73,   198,   325,   203,   325,
   203,   325,   199,   224,   204,   222,   205,     6,     0,   325,
     0,   225,   203,   325,     0,     0,    74,   198,   325,   203,
   325,   203,   325,   199,   227,   204,   225,   205,     6,     0,
   325,     0,   228,   203,   325,     0,     0,    75,   198,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   230,   204,   228,   205,     6,     0,   325,     0,   231,
   203,   325,     0,     0,    76,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   233,   204,
   231,   205,     6,     0,   325,     0,   234,   203,   325,     0,
     0,    77,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   199,   236,   204,   234,   205,     6,
     0,   325,     0,   237,   203,   325,     0,     0,    78,   198,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   239,   204,
   237,   205,     6,     0,   325,     0,   240,   203,   325,     0,
     0,    79,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   242,   204,   240,   205,     6,     0,   325,     0,   243,
   203,   325,     0,     0,    80,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   199,   245,   204,   243,   205,     6,     0,
   325,     0,   246,   203,   325,     0,     0,    81,   198,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   199,   248,   204,   246,   205,     6,     0,   325,
     0,   249,   203,   325,     0,     0,    82,   198,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   199,   251,   204,   249,   205,     6,     0,   325,     0,
   252,   203,   325,     0,     0,    83,   198,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   254,   204,   252,   205,     6,     0,   325,     0,   255,
   203,   325,     0,     0,    84,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   199,
   257,   204,   255,   205,     6,     0,   325,     0,   258,   203,
   325,     0,     0,    85,   198,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   199,   260,
   204,   258,   205,     6,     0,   325,     0,   261,   203,   325,
     0,     0,    86,   198,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   263,   204,
   261,   205,     6,     0,   325,     0,   264,   203,   325,     0,
     0,    87,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   199,   266,   204,   264,   205,     6,     0,   325,     0,   267,
   203,   325,     0,     0,    88,   198,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   199,   269,   204,   267,   205,     6,     0,
   325,     0,   270,   203,   325,     0,     0,    89,   198,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   199,   272,   204,   270,
   205,     6,     0,   325,     0,   273,   203,   325,     0,     0,
    90,   198,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   199,   275,   204,
   273,   205,     6,     0,   325,     0,   276,   203,   325,     0,
     0,    91,   198,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   199,   278,
   204,   276,   205,     6,     0,   325,     0,   279,   203,   325,
     0,     0,    92,   198,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   199,
   281,   204,   279,   205,     6,     0,   325,     0,   282,   203,
   325,     0,     0,    93,   198,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   199,   284,   204,   282,   205,     6,
     0,   325,     0,   285,   203,   325,     0,     0,    94,   198,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   203,   325,   203,   325,   203,   325,   203,   325,   199,
   287,   204,   285,   205,     6,     0,   325,     0,   288,   203,
   325,     0,     0,    95,   198,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   203,   325,   203,   325,   203,   325,
   203,   325,   203,   325,   199,   290,   204,   288,   205,     6,
     0,   339,     0,   291,   203,   339,     0,     0,    96,   198,
   325,   203,   325,   203,   325,   199,   293,   204,   291,   205,
     6,     0,   339,     0,   294,   203,   339,     0,     0,    97,
   198,   325,   203,   325,   203,   325,   203,   325,   199,   296,
   204,   294,   205,     6,     0,     7,     0,   173,     0,   174,
     0,   175,     0,   176,     0,   194,     0,   195,     0,     4,
   297,   325,     6,     0,     4,   200,   325,   201,   297,   325,
     6,     0,     4,   200,   204,   335,   205,   201,   297,   333,
     6,     0,     4,   200,   201,     7,   333,     6,     0,     4,
   298,     6,     0,     4,   200,   325,   201,   298,     6,     0,
     4,   202,     4,     7,   339,     6,     0,     4,   200,   325,
   201,   202,     4,     7,   339,     6,     0,     4,   202,     4,
   297,   325,     6,     0,     4,   200,   325,   201,   202,     4,
   297,   325,     6,     0,     4,   202,     4,   298,     6,     0,
     4,   200,   325,   201,   202,     4,   298,     6,     0,     4,
   202,   106,   202,     4,     7,   336,     6,     0,     4,   200,
   325,   201,   202,   106,   202,     4,     7,   336,     6,     0,
     4,   202,   107,     7,   337,     6,     0,     4,   200,   325,
   201,   202,   107,     7,   337,     6,     0,    58,   198,     4,
   199,   202,     4,     7,   325,     6,     0,    58,   198,     4,
   199,   202,     4,     7,   339,     6,     0,    38,   198,   325,
   199,     7,   327,     6,     0,    54,    38,   198,   325,   199,
     7,   333,     6,     0,    70,    38,   333,     7,   204,   325,
   203,   325,   203,   325,   205,     6,     0,    45,    46,   333,
     7,   325,     6,     0,    41,   198,   325,   199,     7,   333,
     6,     0,    43,   198,   325,   199,     7,   333,     6,     0,
    70,    41,   333,     7,   204,   325,   203,   325,   203,   325,
   205,     6,     0,    39,   198,   325,   199,     7,   333,     6,
     0,    40,   198,   325,   199,     7,   333,     6,     0,    39,
   198,   325,   199,     7,   333,    49,   327,     6,     0,    47,
   198,   325,   199,     7,   204,   325,   203,   325,   203,     5,
   203,     5,   203,     5,   205,     6,     0,    54,    41,   198,
   325,   199,     7,   333,     6,     0,    41,    65,   198,   325,
   199,     7,   333,     6,     0,    99,   198,   325,   199,     7,
   333,     6,     0,   100,   198,   325,   199,     7,   333,     6,
     0,   101,   198,   325,   199,     7,   333,   105,   333,   102,
   325,     6,     0,    49,    42,   198,   325,   199,     7,   333,
     6,     0,   118,    42,   198,   325,   199,     7,   204,   325,
   203,   333,   205,     6,     0,    50,    42,   198,   325,   199,
     7,   333,     6,     0,    51,    42,   198,   325,   199,     7,
   198,   325,   203,   325,   199,   333,   333,     6,     0,   101,
    42,   103,   104,   198,   325,   199,     7,   331,   105,   204,
   333,   203,   333,   205,   102,   204,   325,   203,   325,   205,
     6,     0,   101,    42,   198,   325,   199,     7,   331,   105,
   204,   333,   203,   333,   205,   102,   204,   325,   203,   325,
   205,     6,     0,    54,    42,   198,   325,   199,     7,   333,
     6,     0,    42,    65,   198,   325,   199,     7,   333,     6,
     0,    53,    44,   198,   325,   199,     7,   333,     6,     0,
    44,   198,   325,   199,     7,   333,     6,     0,    54,    44,
   198,   325,   199,     7,   333,     6,     0,    60,   327,   204,
   302,   205,     0,    59,   204,   327,   203,   327,   203,   325,
   205,   204,   302,   205,     0,    61,   327,   204,   302,   205,
     0,    62,   204,   327,   203,   325,   205,   204,   302,   205,
     0,   304,     0,   303,     0,   301,     0,     0,   303,   300,
     0,   303,    38,   204,   335,   205,     6,     0,   303,    41,
   204,   335,   205,     6,     0,   303,    42,   204,   335,   205,
     6,     0,   303,    44,   204,   335,   205,     6,     0,    64,
   204,   303,   205,     0,    64,     4,   200,   325,   201,     6,
     0,    67,   204,   303,   205,     0,    67,     4,   200,   325,
   201,     6,     0,    67,     4,     6,     0,   106,   336,   204,
   303,   205,     0,   119,   339,     6,     0,   120,   339,     6,
     0,   119,   204,   303,   205,     0,   120,   204,   303,   205,
     0,     4,   339,     6,     0,     4,     4,   200,   325,   201,
   339,     6,     0,     4,   325,     6,     0,    58,   198,     4,
   199,   202,     4,     6,     0,    98,     4,     6,     0,   113,
     6,     0,    37,     6,     0,   108,   198,   325,     8,   325,
   199,     0,   108,   198,   325,     8,   325,     8,   325,   199,
     0,   108,     4,   109,   204,   325,     8,   325,   205,     0,
   108,     4,   109,   204,   325,     8,   325,     8,   325,   205,
     0,   110,     0,   116,     4,     0,   114,     0,   115,     4,
     6,     0,   111,   198,   325,   199,     0,   112,     0,    63,
    38,   204,   325,   203,   327,   205,     6,     0,    63,    38,
   204,   325,   203,   327,   203,   327,   203,   325,   205,     6,
     0,    63,    38,   204,   325,   203,   327,   203,   327,   203,
   327,   203,   325,   205,     6,     0,     0,    63,    38,   204,
   325,   203,   327,   205,   311,   204,   320,   205,     6,     0,
     0,    63,    38,   204,   325,   203,   327,   203,   327,   203,
   325,   205,   312,   204,   320,   205,     6,     0,     0,    63,
    38,   204,   325,   203,   327,   203,   327,   203,   327,   203,
   325,   205,   313,   204,   320,   205,     6,     0,    63,    41,
   204,   325,   203,   327,   205,     6,     0,    63,    41,   204,
   325,   203,   327,   203,   327,   203,   325,   205,     6,     0,
    63,    41,   204,   325,   203,   327,   203,   327,   203,   327,
   203,   325,   205,     6,     0,     0,    63,    41,   204,   325,
   203,   327,   205,   314,   204,   320,   205,     6,     0,     0,
    63,    41,   204,   325,   203,   327,   203,   327,   203,   325,
   205,   315,   204,   320,   205,     6,     0,     0,    63,    41,
   204,   325,   203,   327,   203,   327,   203,   327,   203,   325,
   205,   316,   204,   320,   205,     6,     0,    63,    42,   204,
   325,   203,   327,   205,     6,     0,    63,    42,   204,   325,
   203,   327,   203,   327,   203,   325,   205,     6,     0,    63,
    42,   204,   325,   203,   327,   203,   327,   203,   327,   203,
   325,   205,     6,     0,     0,    63,    42,   204,   325,   203,
   327,   205,   317,   204,   320,   205,     6,     0,     0,    63,
    42,   204,   325,   203,   327,   203,   327,   203,   325,   205,
   318,   204,   320,   205,     6,     0,     0,    63,    42,   204,
   325,   203,   327,   203,   327,   203,   327,   203,   325,   205,
   319,   204,   320,   205,     6,     0,   321,     0,   320,   321,
     0,    71,   204,   333,   203,   333,   203,   333,   205,     6,
     0,    71,   204,   333,   203,   333,   205,     6,     0,    66,
     6,     0,    52,    41,   333,     7,   325,     6,     0,    52,
    41,   333,     7,   325,    55,    57,   325,     6,     0,    52,
    41,   333,     7,   325,    55,    56,   325,     6,     0,    52,
    42,   204,   325,   205,     7,   333,     6,     0,    48,    42,
   204,   325,   205,     7,   333,     6,     0,    52,    44,   204,
   325,   205,     7,   333,     6,     0,    66,    42,   333,     7,
   325,     6,     0,    66,    42,   333,     6,     0,    68,     6,
     0,    69,     6,     0,   124,     0,   125,     0,   126,     0,
   127,     0,   128,     0,   326,     0,   198,   325,   199,     0,
   188,   325,     0,   187,   325,     0,   193,   325,     0,   325,
   188,   325,     0,   325,   187,   325,     0,   325,   189,   325,
     0,   325,   190,   325,     0,   325,   191,   325,     0,   325,
   197,   325,     0,   325,   183,   325,     0,   325,   185,   325,
     0,   325,   184,   325,     0,   325,   186,   325,     0,   325,
   180,   325,     0,   325,   181,   325,     0,   325,   179,   325,
     0,   325,   178,   325,     0,   325,   177,   325,     8,   325,
     0,    12,   198,   325,   199,     0,    13,   198,   325,   199,
     0,    14,   198,   325,   199,     0,    15,   198,   325,   199,
     0,    16,   198,   325,   199,     0,    17,   198,   325,   199,
     0,    18,   198,   325,   199,     0,    19,   198,   325,   199,
     0,    20,   198,   325,   199,     0,    22,   198,   325,   199,
     0,    23,   198,   325,   203,   325,   199,     0,    24,   198,
   325,   199,     0,    25,   198,   325,   199,     0,    26,   198,
   325,   199,     0,    27,   198,   325,   199,     0,    28,   198,
   325,   199,     0,    29,   198,   325,   199,     0,    30,   198,
   325,   203,   325,   199,     0,    31,   198,   325,   203,   325,
   199,     0,    32,   198,   325,   203,   325,   199,     0,    21,
   198,   325,   199,     0,    12,   200,   325,   201,     0,    13,
   200,   325,   201,     0,    14,   200,   325,   201,     0,    15,
   200,   325,   201,     0,    16,   200,   325,   201,     0,    17,
   200,   325,   201,     0,    18,   200,   325,   201,     0,    19,
   200,   325,   201,     0,    20,   200,   325,   201,     0,    22,
   200,   325,   201,     0,    23,   200,   325,   203,   325,   201,
     0,    24,   200,   325,   201,     0,    25,   200,   325,   201,
     0,    26,   200,   325,   201,     0,    27,   200,   325,   201,
     0,    28,   200,   325,   201,     0,    29,   200,   325,   201,
     0,    30,   200,   325,   203,   325,   201,     0,    31,   200,
   325,   203,   325,   201,     0,    32,   200,   325,   203,   325,
   201,     0,    21,   200,   325,   201,     0,     3,     0,     9,
     0,    10,     0,    11,     0,     4,     0,     4,   200,   325,
   201,     0,     4,   298,     0,     4,   200,   325,   201,   298,
     0,     4,   202,     4,     0,     4,   200,   325,   201,   202,
     4,     0,     4,   202,     4,   298,     0,     4,   200,   325,
   201,   202,     4,   298,     0,   328,     0,   188,   327,     0,
   187,   327,     0,   327,   188,   327,     0,   327,   187,   327,
     0,   204,   325,   203,   325,   203,   325,   203,   325,   203,
   325,   205,     0,   204,   325,   203,   325,   203,   325,   203,
   325,   205,     0,   204,   325,   203,   325,   203,   325,   205,
     0,   198,   325,   203,   325,   203,   325,   199,     0,     0,
   198,   330,   199,     0,     5,     0,   330,   203,     5,     0,
     0,   204,   332,   205,     0,   198,   332,   199,     0,   333,
     0,   332,   203,   333,     0,   325,     0,   334,     0,   204,
   335,   205,     0,   188,   204,   335,   205,     0,   325,     8,
   325,     0,   325,     8,   325,     8,   325,     0,    38,   204,
   325,   205,     0,   301,     0,   304,     0,   310,     0,     4,
   200,   201,     0,   188,     4,   200,   201,     0,     4,   200,
   204,   335,   205,   201,     0,   188,     4,   200,   204,   335,
   205,   201,     0,   325,     0,   334,     0,   335,   203,   325,
     0,   335,   203,   334,     0,   204,   325,   203,   325,   203,
   325,   203,   325,   205,     0,   204,   325,   203,   325,   203,
   325,   205,     0,     4,     0,     4,   202,   106,   202,     4,
     0,   204,   338,   205,     0,     4,   200,   325,   201,   202,
   107,     0,   336,     0,   338,   203,   336,     0,     5,     0,
    35,   198,   339,   203,   339,   199,     0,    36,   198,   339,
   199,     0,    34,   198,   339,   199,     0,    34,   198,   339,
   203,   335,   199,     0,    34,   198,     4,   202,     4,   199,
     0,    34,   198,     4,   200,   325,   201,   202,     4,   199,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   168,   170,   171,   172,   177,   179,   182,   190,   204,   214,
   216,   219,   221,   222,   225,   231,   236,   237,   238,   241,
   245,   248,   254,   259,   265,   273,   278,   282,   288,   293,
   297,   302,   306,   309,   314,   318,   322,   326,   331,   335,
   338,   342,   346,   350,   354,   358,   362,   365,   369,   372,
   376,   379,   386,   390,   396,   398,   399,   400,   401,   402,
   403,   404,   405,   406,   407,   408,   409,   410,   413,   418,
   433,   438,   444,   449,   450,   451,   452,   453,   454,   455,
   456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
   466,   467,   468,   469,   470,   471,   472,   473,   474,   477,
   480,   484,   490,   496,   499,   503,   509,   515,   518,   522,
   528,   534,   537,   541,   549,   555,   558,   562,   570,   576,
   579,   583,   591,   597,   600,   604,   616,   622,   625,   629,
   641,   647,   650,   654,   666,   672,   675,   679,   692,   698,
   701,   705,   718,   724,   727,   731,   744,   750,   753,   757,
   770,   776,   779,   783,   796,   802,   805,   809,   822,   828,
   831,   835,   858,   864,   867,   871,   894,   900,   903,   907,
   930,   936,   939,   943,   961,   967,   970,   974,   992,   998,
  1001,  1005,  1023,  1029,  1032,  1036,  1053,  1059,  1062,  1066,
  1083,  1089,  1092,  1096,  1113,  1119,  1125,  1132,  1140,  1146,
  1152,  1159,  1167,  1176,  1178,  1179,  1180,  1181,  1184,  1186,
  1189,  1220,  1254,  1301,  1316,  1325,  1340,  1352,  1366,  1389,
  1413,  1425,  1439,  1451,  1465,  1485,  1507,  1517,  1531,  1542,
  1548,  1567,  1581,  1587,  1593,  1612,  1618,  1624,  1640,  1647,
  1653,  1659,  1670,  1681,  1706,  1712,  1731,  1753,  1759,  1767,
  1773,  1779,  1788,  1794,  1800,  1810,  1816,  1821,  1826,  1833,
  1835,  1836,  1839,  1844,  1848,  1862,  1876,  1890,  1908,  1919,
  1929,  1937,  1941,  1950,  1962,  1970,  1975,  1984,  1995,  2031,
  2044,  2061,  2070,  2077,  2081,  2101,  2113,  2123,  2144,  2165,
  2186,  2192,  2197,  2202,  2206,  2214,  2227,  2237,  2247,  2252,
  2262,  2267,  2277,  2282,  2294,  2311,  2328,  2345,  2350,  2367,
  2372,  2389,  2394,  2414,  2430,  2446,  2462,  2467,  2484,  2490,
  2507,  2513,  2532,  2536,  2541,  2568,  2592,  2600,  2619,  2637,
  2655,  2677,  2698,  2719,  2733,  2752,  2757,  2766,  2768,  2769,
  2770,  2771,  2774,  2776,  2777,  2778,  2779,  2780,  2781,  2782,
  2783,  2790,  2791,  2792,  2793,  2794,  2795,  2796,  2797,  2798,
  2799,  2800,  2801,  2802,  2803,  2804,  2805,  2806,  2807,  2808,
  2809,  2810,  2811,  2812,  2813,  2814,  2815,  2816,  2817,  2818,
  2819,  2820,  2821,  2823,  2824,  2825,  2826,  2827,  2828,  2829,
  2830,  2831,  2832,  2833,  2834,  2835,  2836,  2837,  2838,  2839,
  2840,  2841,  2842,  2843,  2848,  2853,  2854,  2855,  2859,  2870,
  2887,  2898,  2917,  2933,  2949,  2965,  2982,  2987,  2991,  2995,
  2999,  3005,  3010,  3014,  3018,  3024,  3028,  3033,  3037,  3042,
  3046,  3050,  3056,  3062,  3069,  3075,  3079,  3083,  3093,  3100,
  3111,  3131,  3140,  3149,  3160,  3174,  3190,  3210,  3234,  3240,
  3244,  3248,  3259,  3264,  3275,  3280,  3298,  3303,  3316,  3322,
  3328,  3333,  3341,  3354,  3358,  3376,  3390
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr",
"FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   206,   206,   206,   206,   207,   207,   208,   208,   208,   209,
   209,   210,   210,   210,   211,   211,   211,   211,   211,   212,
   212,   212,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   214,   214,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   216,   216,
   217,   217,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   219,
   219,   221,   220,   222,   222,   224,   223,   225,   225,   227,
   226,   228,   228,   230,   229,   231,   231,   233,   232,   234,
   234,   236,   235,   237,   237,   239,   238,   240,   240,   242,
   241,   243,   243,   245,   244,   246,   246,   248,   247,   249,
   249,   251,   250,   252,   252,   254,   253,   255,   255,   257,
   256,   258,   258,   260,   259,   261,   261,   263,   262,   264,
   264,   266,   265,   267,   267,   269,   268,   270,   270,   272,
   271,   273,   273,   275,   274,   276,   276,   278,   277,   279,
   279,   281,   280,   282,   282,   284,   283,   285,   285,   287,
   286,   288,   288,   290,   289,   291,   291,   293,   292,   294,
   294,   296,   295,   297,   297,   297,   297,   297,   298,   298,
   299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
   299,   299,   299,   299,   299,   299,   299,   299,   300,   300,
   300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
   300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
   300,   300,   300,   300,   300,   301,   301,   301,   301,   302,
   302,   302,   303,   303,   303,   303,   303,   303,   304,   304,
   305,   305,   305,   306,   307,   307,   307,   307,   308,   308,
   308,   308,   308,   308,   308,   309,   309,   309,   309,   309,
   309,   309,   309,   309,   309,   310,   310,   310,   311,   310,
   312,   310,   313,   310,   310,   310,   310,   314,   310,   315,
   310,   316,   310,   310,   310,   310,   317,   310,   318,   310,
   319,   310,   320,   320,   321,   321,   321,   322,   322,   322,
   322,   322,   322,   322,   322,   323,   323,   324,   324,   324,
   324,   324,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   327,   327,   327,   327,
   327,   328,   328,   328,   328,   329,   329,   330,   330,   331,
   331,   331,   332,   332,   333,   333,   333,   333,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   335,   335,
   335,   335,   336,   336,   336,   336,   337,   337,   338,   338,
   339,   339,   339,   339,   339,   339,   339
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     5,     7,
     6,     8,     0,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    55,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    43,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    37,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    13,     1,
     3,     0,    15,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     3,     6,     6,     9,     6,     9,
     5,     8,     8,    11,     6,     9,     9,     9,     7,     8,
    12,     6,     7,     7,    12,     7,     7,     9,    17,     8,
     8,     7,     7,    11,     8,    12,     8,    14,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     4,     6,     3,     5,     3,     3,     4,     4,     3,     7,
     3,     7,     3,     2,     2,     6,     8,     8,    10,     1,
     2,     1,     3,     4,     1,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     8,    12,    14,     0,    12,     0,
    16,     0,    18,     8,    12,    14,     0,    12,     0,    16,
     0,    18,     1,     2,     9,     7,     2,     6,     9,     9,
     8,     8,     8,     6,     4,     2,     2,     1,     1,     1,
     1,     1,     1,     3,     2,     2,     2,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     4,     4,     4,     6,
     6,     6,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     6,     4,     4,     4,     4,     4,     4,
     6,     6,     6,     4,     1,     1,     1,     1,     1,     4,
     2,     5,     3,     6,     4,     7,     1,     2,     2,     3,
     3,    11,     9,     7,     7,     0,     3,     1,     3,     0,
     3,     3,     1,     3,     1,     1,     3,     4,     3,     5,
     4,     1,     1,     1,     3,     4,     6,     7,     1,     1,
     3,     3,     9,     7,     1,     5,     3,     6,     1,     3,
     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
     0,   295,     0,   292,     0,     0,     0,     0,     0,    54,
    56,    55,    57,    58,    59,    60,    61,    62,    63,    68,
    67,    64,    65,    66,     5,     0,     0,     0,    15,    16,
    18,    17,    19,   426,   426,     0,   405,   409,   461,   204,
   406,   407,   408,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   205,   206,   207,
   208,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     0,     0,   343,     0,     0,   285,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   417,     0,     0,     0,     0,
     0,     0,   263,     0,     0,   263,   336,   337,     0,     0,
     0,     0,     0,     0,     0,   455,     0,     0,     0,     0,
     0,   284,     0,   291,     0,   461,   263,     0,   263,     0,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   411,     0,
    73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   409,   346,   345,   347,
     0,     0,     0,     0,     0,     0,     0,     0,   215,   281,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   279,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   409,     0,     0,     0,   442,
   443,   444,   435,     0,   436,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   419,   418,     0,     0,     0,     0,   263,   263,     0,     0,
     0,     0,     0,     0,     0,   273,     0,     0,     0,     0,
   283,     0,     0,     0,     0,     0,     0,     0,   263,     0,
     0,     0,   293,     0,     0,   275,     0,   276,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   428,
     0,     0,     0,     0,     0,   413,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   344,     0,     0,   449,   450,
     0,     0,   204,     0,     0,     0,     0,   211,     0,   361,
   360,   358,   359,   354,   356,   355,   357,   349,   348,   350,
   351,   352,   353,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   409,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   421,   420,   262,
     0,   261,   260,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   269,   264,   335,     0,     0,   271,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   294,     0,   277,   278,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   427,     0,     0,    21,
     0,   410,   415,    73,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   363,   384,   364,
   385,   365,   386,   366,   387,   367,   388,   368,   389,   369,
   390,   370,   391,   371,   392,   383,   404,   372,   393,     0,
     0,   374,   395,   375,   396,   376,   397,   377,   398,   378,
   399,   379,   400,     0,     0,     0,     0,     0,     0,     0,
     0,   464,     0,     0,   463,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   221,     0,     0,     0,     0,     0,
    69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   445,     0,     0,     0,     0,   437,   439,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   256,   258,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   274,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   429,     0,   426,     0,   412,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    71,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   410,   214,
   451,   452,     0,     0,     0,     0,     0,   216,   217,   219,
     0,     0,   459,     0,   225,   362,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   441,   446,     0,   438,
     0,   232,     0,     0,     0,     0,     0,   328,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   270,     0,     0,     0,     0,   334,
   272,     0,     0,     0,     0,     0,   430,     0,   456,     0,
     0,     0,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   338,   339,
   340,   341,   342,     0,     0,     0,     0,     0,     0,     0,
    20,     0,   414,   280,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   373,   394,   380,   401,   381,   402,   382,   403,     0,
   466,   465,   462,     0,   204,     0,     0,     0,     0,   212,
     0,     0,     0,   457,    70,   229,   236,     0,   237,     0,
   233,     0,   234,   254,     0,     0,   440,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   282,     0,     0,     0,     0,   263,     0,   299,     0,
   308,     0,   317,     0,     0,     0,     0,     0,     0,   242,
   243,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   426,   416,    72,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   222,     0,     0,   223,     0,   460,
     0,   241,   252,   447,     0,     0,   332,   245,   247,     0,
     0,     0,   331,   333,   253,   230,   240,   251,   255,     0,
     0,     0,   425,     0,   424,     0,     0,   296,     0,     0,
   305,     0,     0,   314,     0,   265,   266,   267,   268,     0,
     0,   430,     0,   433,     0,     0,     0,     0,   454,     0,
   288,   287,     0,     0,     0,     0,     0,    23,     0,    32,
     0,    36,     0,    30,     0,     0,    35,     0,    40,    38,
     0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
     0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   213,   218,   220,     0,   226,     0,   238,   448,
     0,     0,   330,   329,   227,   228,   263,     0,   259,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   432,     0,
   431,     0,     0,     0,     0,     0,     0,     0,   430,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   467,     0,   458,     0,     0,
     0,     0,   423,     0,     0,     0,     0,     0,     0,     0,
     0,   323,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   434,     0,     0,   453,   289,     0,     0,    37,     0,
     0,     0,     0,    27,     0,    33,     0,    39,    28,    41,
     0,    44,     0,    48,    49,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   224,     0,     0,   257,
     0,     0,   301,     0,   327,     0,     0,   324,   310,     0,
     0,   319,     0,     0,     0,     0,     0,     0,   244,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   102,   106,   110,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   198,     0,     0,
     0,   422,   297,     0,     0,     0,   300,   306,     0,     0,
   309,   315,     0,     0,   318,   231,   235,     0,     0,   246,
     0,     0,     0,     0,     0,    31,    34,    42,     0,    43,
    50,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   303,     0,     0,   312,     0,   321,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   202,     0,   248,     0,   298,     0,     0,     0,
   307,     0,     0,   316,     0,     0,     0,     0,     0,     0,
    26,    29,     0,     0,     0,   100,     0,   104,     0,   108,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   196,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   302,     0,     0,   326,   311,     0,   320,     0,     0,
     0,     0,     0,     0,    46,    22,   101,   103,   105,   107,
   109,   111,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   197,   199,     0,   200,   239,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,   118,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   304,   325,   313,   322,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   201,   203,     0,     0,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   250,
     0,     0,     0,   112,     0,   116,     0,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   249,     0,    24,   113,   115,   117,   119,
   121,   123,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   126,   130,   134,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     0,   128,     0,   132,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   125,   127,   129,   131,   133,   135,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   138,   142,   146,   150,   154,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   136,     0,   140,     0,   144,     0,   148,     0,   152,
     0,   156,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,   139,   141,   143,   145,   147,   149,   151,
   153,   155,   157,   159,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   186,
   190,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   184,     0,   188,
     0,   192,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   185,   187,   189,   191,   193,   195,     0,     0,     0,   174,
   178,   182,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   172,     0,
   176,     0,   180,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   173,   175,   177,   179,   181,
   183,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   162,
   166,   170,     0,     0,     0,     0,     0,     0,     0,   160,
     0,   164,     0,   168,     0,     0,     0,     0,     0,     0,
   161,   163,   165,   167,   169,   171,     0,     0,     0
};

static const short yydefgoto[] = {  2317,
    87,     5,     6,    19,    20,    21,    22,     7,    70,    71,
    72,   438,  1635,   652,  1544,  1637,   653,  1545,  1639,   654,
  1546,  1853,   655,  1800,  1855,   656,  1801,  1857,   657,  1802,
  1989,   658,  1951,  1991,   659,  1952,  1993,   660,  1953,  2101,
   661,  2071,  2103,   662,  2072,  2105,   663,  2073,  2107,   664,
  2074,  2109,   665,  2075,  2111,   666,  2076,  2299,   667,  2293,
  2301,   668,  2294,  2303,   669,  2295,  2248,   670,  2236,  2250,
   671,  2237,  2252,   672,  2238,  2197,   673,  2179,  2199,   674,
  2180,  2201,   675,  2181,  1662,   676,  1568,  1756,   677,  1664,
   140,   249,    73,   565,   340,   551,   552,   341,    77,    78,
    79,    80,    81,   342,  1199,  1514,  1618,  1202,  1519,  1622,
  1205,  1523,  1625,  1381,  1382,    83,    84,   984,   343,   143,
   361,   176,   244,   431,  1095,  1213,  1214,   345,   491,   198,
   739,   894,   144
};

static const short yypact[] = {  2675,
    40,-32768,-32768,  -104,-32768,   282,  3173,-32768,    28,    72,
   101,   114,   121,   126,   136,   -45,   -40,    74,-32768,-32768,
-32768,-32768,  2285,    86,   195,    89,   105,   122,   -22,   163,
   157,   160,   347,   216,   286,   376,   389,   399,   470,   411,
   360,   279,   266,   -75,   -75,   326,   458,     5,   512,     6,
   560,   576,   130,   539,   381,   385,   -16,     7,    17,-32768,
   404,-32768,   647,-32768,   556,   663,   628,    15,    18,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   672,    28,  2952,-32768,-32768,
-32768,-32768,-32768,   491,   491,   674,-32768,   117,     8,-32768,
-32768,-32768,-32768,  -114,   188,   215,   278,   283,   290,   327,
   328,   331,   335,   336,   378,   446,   447,   450,   454,   463,
   464,   468,   473,   476,   500,   567,   594,-32768,-32768,-32768,
-32768,  2319,  2319,  2319,-32768,-32768,  2319,   968,    30,  2319,
   713,   758,-32768,   721,   723,-32768,  2319,  2319,  2319,   650,
  2319,   660,  2319,  2319,   596,  2319,   564,   668,   669,   670,
   596,   683,   685,   678,   695,   696,   697,   698,   744,   -75,
   -75,   -75,  2319,  2319,   -83,-32768,   -69,   -75,   688,   693,
   699,   558,-32768,   596,    13,-32768,-32768,-32768,   596,   596,
   774,  2319,  2319,   -46,  2319,   700,  2319,   704,   761,  2319,
  2319,-32768,   892,-32768,   701,-32768,-32768,   894,-32768,   895,
-32768,    28,   706,   711,   712,   714,   716,   717,   718,   719,
   720,   722,   724,   726,   727,   728,   732,   734,   735,   736,
   742,   767,   768,   770,   771,   775,   777,   778,   803,   804,
   805,   806,   906,   807,   808,   809,  2319,   915,-32768,   -75,
-32768,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,    67,    53,    53,   280,   811,   811,   811,
 10675,   914,  1824,  3007,   269,   813,  1002,   773,-32768,-32768,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,-32768,  -143, 10698, 10721, 10744,
  2319, 10767,  2319, 10790, 10813,   303,   802,  1498,  1824,-32768,
-32768,-32768,   694,  1004,-32768, 10836,  2319,  2319,  2319,  2319,
  1009,  2319,  2319,  2319,  2319,  2319,  2319,  2319,   818,   -49,
-32768,-32768,  2703,  3469,   -75,   -75,   397,   397,   -43,  2319,
  2319,  2319,  2319,  2651,   141,-32768,  2319,  2759,  1011,  1013,
-32768, 10859, 10882,   917,  2319, 10905,   921,  3490,-32768,   833,
  2344, 10928,-32768,  2319,  2825,-32768,  2891,-32768,   874,  1040,
  1041,  1042,  1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,
  1057,  1058,  1059,  1062,  1063,  1065,  1066,  1067,  1069,  1071,
  1073,  1074,   924,  1079,  1080,  1081,  1082,  1085,  1084,-32768,
  -103,  1086,  1076,  1087, 10000,   272,     1,  2975, 10951, 10025,
 10974, 10050, 10997, 10075, 11020, 10100, 11043, 10125, 11066, 10150,
 11089, 10175, 11112, 10200, 11135, 10225, 11158, 10250, 11181, 10275,
  3511,  3532, 11204, 10300, 11227, 10325, 11250, 10350, 11273, 10375,
 11296, 10400, 11319, 10425,  3553,  3574,  3595,  3616,  3637,  3658,
    77,    -9,   890,   896,  2319,-32768,   596,  2410,   694,-32768,
   -24,   166,    53,  2319,  1088,  1092,    14,-32768,  2435,   407,
   249,   362,   362,   219,   219,   219,   219,   190,   190,   811,
   811,   811,   811,  1094,  1824,  1095,  1096,  1098, 11342,  1099,
 11365,  1100,  1102,  1190,  2319,   315,  1824,   477,  2319,  2319,
  1103,  1943, 11388, 11411, 11434,  2319,  2399,  2647, 11457, 11480,
 11503, 11526, 11549,   899,   -75,  2319,  2319,-32768,-32768,-32768,
   938,  3206,-32768,   949,  2319,  3679,  3700,  3721, 10450,  -131,
   -41,   -20,   -82,-32768,-32768,-32768,  2319, 10475,-32768,   907,
   953,  1152,  1153,   964, 11572,  1156,   962,  2319,  2928,  2319,
  2319,-32768, 11595,-32768,-32768,   995,   965,   967,   970,   971,
   972,   978,   988,  1022,  1023,  1024,  1025,  1075,  1083,  1089,
  1091,  1093,  1097,  1101,  1105,  1106,  1107,  1108,  1110,  1111,
  1113,  1140,  1141,  1142,  1144,  1145,-32768,  1162,  1060,-32768,
  1147,   151,-32768,-32768,  1000,  1078,  1090,  1104,  1157,  1158,
  1159,  1160,  1161,  1178,  1181,  1182,  1186,  1187,  1188,  1192,
  1194,  1195,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,
  1247,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2319,
  2319,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  1268,-32768,  1824,    53,-32768, 10500,  1274,  1824,  1205,    58,
  2319,  1276,  1279,   961,-32768,  1280,  1154,     7,  1283,  2319,
-32768,    79,   -75,   596,   596,  1284,   596,  1290,   596,   596,
-32768,  1824,  2827,  1220,   478,-32768,  2456,   999,  1206,  1291,
  1294,  1296,  1298,   666,  1299,  1353,  1375,  1396,  1397,  1398,
  1402,  1407,   118,  3742,  3763,-32768,-32768,  2984,   -75,   -75,
   -75,  1406,  1824,  1824,  1824,  1824,  1077,  1408,  2319,  2319,
   596,   596,  2319,  1409,   596,  1411,  3784,-32768,  2480,   452,
  1410,  1253,  1417,  2319,  2319,   -75,  1419,  1420,  1236,  1423,
  1424,   596,   596,  1425,   -75,  1426,  1427,   596,   596,  1429,
  1430,  1431,  1432,  1433,   596,   394,   596,  1435,  1451,  1453,
  1454,  1456,-32768,  1457,   491,  1458,-32768,  1479,  3062,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,-32768, 11618, 10525, 11641, 10550,
 11664, 10575, 11687, 10600, 10625,  1261,   115,  1288,   217,-32768,
   694,-32768,    23,   274,  1286,  1482,  1264,-32768,-32768,-32768,
     7,  2319,-32768,   481,-32768,   618,  1484,    19,    36,  1485,
   596,  1486,   596,  1487,  1488,   482,-32768,-32768,  1824,-32768,
  2319,-32768,  2319,   596,   596,   596,  1297,-32768,   438,   596,
   596,   596,   596,   596,   596,   596,   531,  2319,  2319,  2319,
  1292,  -111,  -106,   -97,-32768,   485,   496,   501,   504,-32768,
-32768,  3805,  3826,  1491,  1492, 11710,   -64,  1395,-32768,  2319,
  2319,  2319,-32768,  1300,    28,  1302,  3847,  3868,     4,  1303,
  1304,  1330,  1335,  1332,  1337,  1358,  1359,   196,  1360,  1365,
  1390,  1387,  1389,  1391,  1392,  1394,  1399,  1400,-32768,-32768,
-32768,-32768,-32768,  1401,  1403,  1405,  1412,  1413,  1404,  1436,
-32768,  1437,   272,-32768,  1587,  3889,  3910,  3931,  3952,  3973,
  3994,  4015,  4036,  4057,  4078,  4099,  4120,  4141,  4162,  4183,
  4204,  4225,  4246,  4267,  4288,  4309,  4330,  4351,  4372,  4393,
  4414,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1441,
-32768,-32768,-32768,   596,    53,  2319,  1594,  1597,    14,-32768,
  1599, 10650,     7,-32768,-32768,-32768,-32768,   -75,-32768,  1603,
-32768,  1604,-32768,-32768,  1421,   507,   618,  4435,  1605,  1606,
  1608,  2319,  2319,  2319,  1626,  1627,  1628,  1629,  1632,  1639,
  1640,-32768,  2376,  3131, 11733,  1184,   397,   -75,  1641,   -75,
  1642,   -75,  1643,  1644,  1645,  1647,  1648,  2319,  2319,-32768,
-32768,  1649,   596,   596,  1550,   596,  1520,   384, 11756,  2319,
    28,  1654,  2319,   596,  1653,  1658,  1657,  1499,  1686,   394,
  1687,  1691,  2319,  1689,  1709,  1707,  1708,  1716,   394,  2319,
  2319,  2319,   596,  1714,  1719,   394,  2319,  1721,  1724,  1722,
  2319,   491,-32768,-32768,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  1725,  1727,  1728,  1440,-32768,  1723,  1729,-32768,  1529,-32768,
    38,-32768,-32768,-32768,  1535,  2319,-32768,-32768,-32768,  4456,
  1592,  1712,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1788,
  1731,  1534,-32768,  2319,-32768,  1537,   135,-32768,  1539,   156,
-32768,  1540,   164,-32768,  1541,-32768,-32768,-32768,-32768,  4477,
  4498,   -64,   197,-32768,   510,  1542,  1637,  2319,-32768,  2319,
-32768,-32768,  4519,    28,  1548,  4540,  1563,-32768,  1564,-32768,
  1571,-32768,  1585,-32768,  1582, 11779,-32768,  1583,-32768,-32768,
  1588,  1589, 11802,  4561, 11825,  1590,-32768,  1591,  1593,  4582,
  1595,  1596,-32768,  4603,  1598,  4624,  4645,  4666,  4687,  4708,
  4729,  4750,  4771,  4792,  4813,  4834,  4855,  4876,  4897,  4918,
  4939,  4960,  4981,  5002,  5023,  5044,  5065,  5086,  5107,  5128,
  5149,  1600,-32768,-32768,-32768,     7,-32768,  1684,-32768,-32768,
  5170,  2319,-32768,-32768,-32768,-32768,   397,  2313,-32768,  1528,
    27,  1528,    27,  1528,    27,  2319,  2319,  1692,-32768,   596,
-32768,   596,  2319,  3154,  3177,   596,  1630,  1796,   -64,   394,
  1800,  2319,  1798,   394,  1820,  1826,  1825,  1852,  1854,  2319,
  1875,   596,  1876,  1888,  2319,  1827,  1898,  2319,  1900,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,-32768,  1902,-32768,  1905, 11848,
  1701,  2319,-32768,  1528,  1528,  2319,  3207,   169,  1921,  1726,
   -39,-32768,  3239,   182,   -38,  3262,   186,   -30,  3285,  3308,
  1730,-32768,  1732,  1901,-32768,-32768,  1706,    28,-32768,  1733,
  1734,  1735,  5191,-32768,  1633,-32768,  1741,-32768,-32768,-32768,
 11871,-32768,  1738,-32768,-32768, 11894,  1743,-32768, 11917,  1740,
 11940, 11963, 11986,  5212,  5233,  5254,  5275,  5296,  5317,  5338,
  5359,  5380,  5401,  5422,  5443,  5464,  5485,  5506,  5527,  5548,
  5569,  5590,  5611,  5632, 12009,  5653,-32768,  1742,   596,-32768,
  3331,   845,  1922,  2319,-32768,   596,  1923,-32768,  1925,  2319,
  1926,  1927,  2319,  1938,  1940,  1964,   596,   596,-32768,  1974,
    28,   394,   394,   394,   394,  1975,  1976,  1977,   394,  1978,
  1980,  1981,  1984,-32768,-32768,-32768,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,-32768,  2319,  1986,
   596,-32768,-32768,  1789,  3354,  1806,-32768,-32768,  1809,  3377,
-32768,-32768,  1810,  3400,-32768,-32768,-32768,  1807,  1811,-32768,
    28,  1812,  1815,  1821,  1822,-32768,-32768,-32768,  1816,-32768,
-32768,-32768,  1823,  1819,  1828,  1829,  5674,  5695,  5716,  5737,
  5758,  5779,  5800,  5821,  5842,  5863,  5884,  5905,  5926,  5947,
  5968,  5989,  6010,  6031,  6052,  6073,  6094,  1830, 12032,  1832,
  2018,    27,  2019,   596,    27,  2021,    27,  2022,   596,  1928,
  1863,   394,   394,  2025,  2030,   394,  2032,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,    53,-32768,  2042,-32768,    -5,-32768,  1844,   513,    -3,
-32768,  1845,    -1,-32768,  1846,  1847,  1849,    28,  1848,  1851,
-32768,-32768,  1856,  1857,   517,   618,   520,   618,   521,   618,
  6115,  6136,  6157,  6178,  6199,  6220,  6241,  6262,  6283,  6304,
  6325,  6346,  6367,  6388,  6409,  6430,  6451,  6472,  6493,  6514,
  6535,   529,-32768,  1853,  1855,  2052,    27,   596,  2053,  2055,
    27,  2056,    27,  1991,  2319,    28,   394,   596,  2077,  2088,
  2319,  2089,  2319,  2090,  2319,  2091,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,    53,  2094,    53,
  2096,-32768,     3,  1899,-32768,-32768,     9,-32768,    12,  1904,
  6556,    28,  1903,  1907,-32768,-32768,   618,-32768,   618,-32768,
   618,-32768, 12055, 12078, 12101,  6577,  6598,  6619,  6640,  6661,
  6682,  6703,  6724,  6745,  6766,  6787,  6808,  6829,  6850,  6871,
  6892,  6913,  6934,-32768,-32768,   530,-32768,-32768,  2119,  2129,
  2130,  2131,  2319,  2319,  1967,   394,   596,-32768,-32768,-32768,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,    53,  2133,
-32768,-32768,-32768,-32768,  6955,  3423,  1979,  1944,  1946,  1948,
  1949,  1950,  6976,  6997,  7018,  7039,  7060,  7081,  7102,  7123,
  7144,  7165,  7186,  7207,  7228,  7249,  7270,  7291,  7312,  7333,
-32768,-32768,  2319,  2144,-32768,   596,   394,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  3446,-32768,
  1952,  1957,   533,   618,   534,   618,   537,   618,  7354,  7375,
  7396,  7417,  7438,  7459,  7480,  7501,  7522,  7543,  7564,  7585,
  7606,  7627,  7648,  7669,  7690,  7711,  2151,   596,  2152,  2319,
  2162,  2319,  2163,  2319,  2164,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,-32768,  1968,-32768,   618,-32768,   618,-32768,
   618,-32768, 12124, 12147, 12170,  7732,  7753,  7774,  7795,  7816,
  7837,  7858,  7879,  7900,  7921,  7942,  7963,  7984,  8005,  8026,
   596,-32768,-32768,-32768,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  1969,
  1970,  1971,  1972,  8047,  8068,  8089,  8110,  8131,  8152,  8173,
  8194,  8215,  8236,  8257,  8278,  8299,  8320,  8341,   596,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  1988,   540,   618,
   541,   618,   544,   618,  8362,  8383,  8404,  8425,  8446,  8467,
  8488,  8509,  8530,  8551,  8572,  8593,  8614,  8635,  8656,   394,
  2319,  2167,  2319,  2171,  2319,  2172,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  1990,   618,-32768,   618,-32768,   618,-32768, 12193, 12216,
 12239, 12262, 12285, 12308,  8677,  8698,  8719,  8740,  8761,  8782,
  8803,  8824,  8845,  2173,-32768,-32768,-32768,-32768,-32768,-32768,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,-32768,
  1983,  1989,  1994,  1996,  1999,  2003,  8866,  8887,  8908,  8929,
  8950,  8971,  8992,  9013,  9034,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
   550,   618,   551,   618,   554,   618,   566,   618,   569,   618,
   570,   618,  9055,  9076,  9097,  9118,  9139,  9160,  9181,  9202,
  9223,  2319,  2186,  2319,  2188,  2319,  2189,  2319,  2202,  2319,
  2203,  2319,  2204,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  2319,  2319,   618,-32768,   618,-32768,   618,-32768,   618,-32768,
   618,-32768,   618,-32768,  9244,  9265,  9286,  9307,  9328,  9349,
 12331, 12354, 12377,  2319,  2319,  2319,  2319,  2319,  2319,-32768,
-32768,-32768,  9370,  9391,  9412,  9433,  9454,  9475,  2007,  2008,
  2009,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2319,
  9496,  9517,  9538,  9559,  9580,  9601,   573,   618,   582,   618,
   585,   618,  2319,  2319,  2319,  2319,  2319,  2319,  2319,  2208,
  2319,  2209,  2319,  2216,  9622,  9643,  9664, 12400, 12423, 12446,
   618,-32768,   618,-32768,   618,-32768,  2319,  2319,  2319,-32768,
-32768,-32768,  9685,  9706,  9727,  2020,  2023,  2024,  2319,  2319,
  2319,  2319,  2319,  2319,  9748,  9769,  9790,   588,   618,   607,
   618,   608,   618,  2319,  2319,  2319,  2319,  2217,  2319,  2219,
  2319,  2220,  9811,  9832,  9853,   618,-32768,   618,-32768,   618,
-32768,  2319,  2319,  2319,  9874,  9895,  9916,  2319,  2319,  2319,
  9937,  9958,  9979,  2319,  2319,  2319, 12469, 12492, 12515,-32768,
-32768,-32768,  2026,  2031,  2033,  2319,  2319,  2319,   611,   618,
   656,   618,   659,   618,  2319,  2223,  2319,  2233,  2319,  2234,
   618,-32768,   618,-32768,   618,-32768,  2241,  2242,-32768
};

static const short yypgoto[] = {-32768,
   -32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1621,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -299,   -19,-32768,  2239,    -4,  -366,  -169,    -2,-32768,-32768,
-32768,-32768,-32768,  2245,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768, -1268, -1226,-32768,-32768, -1097,   -23,-32768,
   -29,-32768,   -94,-32768, -1173,  1164,  1452,  -244,  -332,  -730,
  1209,-32768,   -21
};


#define	YYLAST		12714


static const short yytable[] = {   142,
   245,   554,    75,   141,    76,   494,   528,   893,   182,   185,
   196,   250,  1233,   374,   175,   177,   378,   737,   376,   206,
   199,  1242,   206,   150,  1046,   194,  1379,  1379,  1249,   100,
    85,  1380,  1380,   305,  1385,  1379,  1388,   395,  1308,   397,
  1380,  1047,   150,  1289,   152,     8,   208,   210,   125,   126,
   127,   125,   126,   127,   212,   514,   384,   206,   490,   515,
  1379,   884,  1379,     9,  1379,  1380,   147,  1380,  1379,  1380,
   481,   206,   783,  1380,  1379,   365,   366,  1379,    88,  1380,
   365,   366,  1380,   252,  1048,   253,   125,   126,   127,   365,
   366,  1078,  1379,  1079,   490,   617,  1080,  1380,  1081,   618,
   125,   126,   127,   365,   366,  1082,    89,  1083,   298,   299,
   300,   171,   172,   301,   304,   154,   308,   365,   366,    90,
   367,   786,   173,   328,   329,   330,    91,   332,   174,   334,
   335,    92,   346,  1093,   368,   306,   307,   365,   366,  1094,
   360,    93,   362,   365,   366,  1400,   566,   567,   369,   363,
   364,   385,    94,   545,  1458,   206,   151,    95,  1458,   555,
  1041,  1458,   784,   885,   886,  1457,  1461,   189,   382,   383,
   190,   386,   100,   388,  1464,   151,   391,   392,   728,   399,
   729,   195,   742,   785,   125,   126,   127,   365,   366,   722,
   365,   366,   731,   723,   755,   128,   129,   130,   131,  1666,
   146,  1670,  1105,  1672,   624,   365,   366,  1759,   183,   186,
   197,   251,   377,  1761,   200,    86,  1762,   738,   207,   579,
   437,   209,  1401,   435,   365,   366,  1405,   152,   439,   440,
   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
   451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
   461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
   471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
   490,    96,   482,   483,   484,   493,   720,   897,   721,   489,
  1035,   728,   490,   145,    10,   495,   147,   499,   500,   501,
   502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
   512,   513,   148,  1616,   365,   366,  1620,   519,  1623,   521,
   135,   136,  1170,  1032,   299,   489,   247,   728,   248,   149,
   928,   365,   366,   532,   533,   534,   535,   157,   537,   538,
   539,   540,   541,   542,   543,   548,   549,  1300,   128,   129,
   130,   131,   365,   366,   135,   136,   556,   557,   558,   559,
   365,   366,   836,   568,   153,   365,   366,   154,  1302,   135,
   136,   575,   550,   550,   553,   553,  1304,   730,   365,   366,
   583,  1454,   365,   366,  1532,  1533,  1534,  1535,   322,   323,
   324,  1539,   365,   366,  1460,   254,   325,   255,  1463,  1458,
   877,  1220,   155,  1458,  1114,  1309,  1458,   165,  1713,  1310,
   166,   167,  1717,   168,  1719,   320,   321,   322,   323,   324,
   135,   136,   256,   156,   257,   325,   623,   158,   836,   906,
    11,    12,    13,    14,    15,    16,    17,    18,   314,   315,
   159,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   160,   128,   129,   130,   131,   325,   128,   129,   130,   131,
   936,   937,   938,   939,   164,    43,    44,    45,    46,   952,
    48,   726,   135,   136,   299,   135,   136,   135,   136,   170,
   734,   733,   732,   135,   136,   258,   169,   259,   490,   485,
   260,   248,   261,   882,  1629,  1630,  1458,   262,  1633,   263,
  1458,   489,  1458,  1063,  1064,   179,   135,   136,   180,   181,
   726,   753,   524,   489,   248,   757,   758,   490,   135,   136,
   161,   162,   764,   163,   754,   773,   248,   979,   980,   981,
   982,   983,   774,   775,   264,   266,   265,   267,   268,   178,
   269,   778,   270,   272,   271,   273,  1072,  1073,   490,   490,
   490,   490,   191,   787,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   184,   797,  1367,   799,   800,   325,   203,
   311,   312,   313,   314,   315,   187,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   274,  1056,   275,   192,  1723,
   325,   188,   193,  1034,  1036,   313,   314,   315,  1221,   316,
   317,   318,   319,   320,   321,   322,   323,   324,    97,   336,
   838,   201,   837,   325,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   311,   312,
   313,   314,   315,   337,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   276,   278,   277,   279,   280,   325,   281,
   953,   282,   202,   283,    43,    44,    45,    46,    47,    48,
   284,   286,   285,   287,   490,   288,   204,   289,  1798,   205,
   290,   918,   291,   292,   211,   293,   867,   868,   246,   728,
   728,   756,   910,  1043,   728,  1044,  1055,   728,   243,  1084,
   869,   870,   871,   872,   873,   874,   875,   294,   728,   489,
  1085,   529,   878,   728,   881,  1086,   728,   887,  1087,   728,
  1196,  1175,  1310,   898,  1311,  1668,   896,  1669,   309,  1681,
   919,  1682,  1683,  1685,  1684,  1686,   326,   327,   489,  1852,
   726,  1708,  1789,  1709,  1790,  1880,  1882,  1881,  1883,  1884,
   992,  1885,  2011,  2013,  2012,  2014,  2015,   359,  2016,   932,
   933,   934,  2122,  2124,  2123,  2125,  2126,   373,  2127,   489,
   489,   489,   489,   310,   295,   942,   943,   347,  2128,   946,
  2129,  2130,  2132,  2131,  2133,  2209,   959,  2210,   498,   381,
   957,   958,   132,   338,  2211,   968,  2212,  2213,   134,  2214,
  2257,   296,  2258,   137,   311,   312,   313,   314,   315,   339,
   316,   317,   318,   319,   320,   321,   322,   323,   324,  2259,
  2261,  2260,  2262,  2305,   325,  2306,   996,   997,   998,   999,
  1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
  1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,
  1020,  1021,   311,   312,   313,   314,   315,   331,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   333,  2307,   837,
  2308,  2309,   325,  2310,  1037,   348,   349,   350,  1042,   390,
   311,   312,   313,   314,   315,   354,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   489,   352,  1057,   353,  1058,
   325,   370,   355,   356,   357,   358,   371,   393,   394,   396,
   398,   387,   372,   400,  1074,  1075,  1076,   389,   401,   402,
   430,   403,  2032,   404,   405,   406,   407,   408,   436,   409,
   487,   410,  1101,   411,   412,   413,  1097,  1098,  1099,   414,
  1371,   415,   416,   417,   311,   312,   313,   314,   315,   418,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   311,
   312,   313,   314,   315,   325,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   419,   420,   890,   421,   422,   325,
    97,   297,   423,  1133,   424,   425,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   426,   427,   428,   429,   912,   525,   433,   325,   497,   432,
   530,   434,  1164,  1163,   496,   536,   544,   570,  1171,   571,
   574,   311,   312,   313,   314,   315,   577,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   580,  1255,  1180,  1181,
  1182,   325,   586,   486,   587,   588,   589,   546,  1197,  1190,
  1200,  1191,  1203,   590,   591,   592,   593,   594,   595,   596,
   597,   598,   599,   600,  1210,  1211,   601,   602,  1224,   603,
   604,   605,   550,   606,   553,   607,  1223,   608,   609,  1226,
   610,   620,   940,   611,   612,   613,   614,   615,   616,  1236,
   619,   621,   724,   735,   725,   736,  1243,  1244,  1245,   741,
   772,   743,   744,  1250,   745,   747,   749,  1254,   750,   759,
   789,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,
  1265,  1266,  1267,  1268,  1269,  1270,  1271,  1272,  1273,  1274,
  1275,  1276,  1277,  1278,  1279,  1280,  1281,   311,   312,   313,
   314,   315,   776,   316,   317,   318,   319,   320,   321,   322,
   323,   324,  1291,   777,   132,   133,   790,   325,   791,   792,
   134,   793,   795,   796,   802,   137,   833,   803,   302,   804,
  1298,   303,   805,   806,   807,   311,   312,   313,   314,   315,
   808,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   809,  1317,    97,   297,  1314,   325,  1315,   840,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    97,   297,   810,   811,   812,   813,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   866,   311,   312,   313,   314,   315,   834,   316,
   317,   318,   319,   320,   321,   322,   323,   324,  1370,  1040,
  1378,   876,  1384,   325,  1387,   841,  1377,   814,  1383,   880,
  1386,   888,  1389,  1390,   889,   815,   891,   842,   895,  1394,
   901,   816,   550,   817,   553,   818,   903,   914,  1403,   819,
   915,   843,   916,   820,   917,   920,  1411,   821,   822,   823,
   824,  1416,   825,   826,  1419,   827,  1421,  1422,  1423,  1424,
  1425,  1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,  1434,
  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,  1444,
  1445,  1446,   828,   829,   830,   362,   831,   832,  1451,   835,
   298,   299,  1452,   892,   844,   845,   846,   847,   848,   921,
   311,   312,   313,   314,   315,  1471,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   849,   132,   133,   850,   851,
   325,   922,   134,   852,   853,   854,  1194,   137,  1195,   855,
   751,   856,   857,   752,   858,   859,   860,   861,   862,   863,
   864,   865,   923,   924,   925,   883,   132,   133,   926,   913,
   927,   935,   134,   941,   949,   947,   954,   137,   955,   956,
   908,   960,   961,   909,   962,   963,   964,   967,   969,   970,
  1515,   973,   974,   975,   976,   977,  1520,   986,  1531,  1524,
   311,   312,   313,   314,   315,  1285,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   987,   989,   988,   990,  1031,
   325,   993,   991,  1547,  1548,  1549,  1550,  1551,  1552,  1553,
  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,
  1564,  1565,  1566,  1567,   994,  1569,  1033,  1038,  1039,  1045,
  1049,  1051,  1053,  1054,  1062,  1077,  1090,  1091,  1581,  1096,
    97,   526,  1107,  1100,  1102,  1106,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    97,   297,  1108,  1109,  1110,  1111,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
  1112,  1113,  1115,  1116,  1636,  1638,  1640,  1641,  1642,  1643,
  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1117,  1118,
  1663,  1119,  1134,  1120,  1121,  1676,  1122,  1293,  1124,  1165,
  1166,  1123,  1130,  1125,  1168,  1126,   344,  1127,  1172,  1173,
  1177,  1178,   351,  1179,  1128,  1129,   311,   312,   313,   314,
   315,  1174,   316,   317,   318,   319,   320,   321,   322,   323,
   324,  1183,  1184,  1185,  1186,   375,   325,  1187,  1131,  1132,
   379,   380,  1161,  1722,  1188,  1189,  1198,  1201,  1204,  1206,
  1207,  1721,  1208,  1209,  1216,  1212,  1225,  1727,  1228,  1729,
  1229,  1731,  1230,  1733,  1734,  1735,  1736,  1737,  1738,  1739,
  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,
  1750,  1751,  1752,  1753,   132,   133,  1754,  1231,  1757,  1765,
   134,  1232,  1234,  1235,  1237,   137,   311,   312,   313,   314,
   315,   527,   316,   317,   318,   319,   320,   321,   322,   323,
   324,  1238,  1239,  1240,  1374,  1375,   325,  1294,  1241,  1247,
   134,  1248,  1218,  1251,  1219,  1376,  1252,  1253,  1282,  1286,
  1288,   174,  1283,  1284,  1287,  1290,  1296,  1297,  1313,  1795,
  1796,  1299,  1301,  1303,  1305,  1312,  1318,  1803,  1804,  1805,
  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
  1816,  1817,  1818,  1819,  1820,  1320,  1321,  1821,   311,   312,
   313,   314,   315,  1322,   316,   317,   318,   319,   320,   321,
   322,   323,   324,  1323,  1324,  1326,  1327,  1328,   325,  1333,
  1368,  1334,  1332,  1295,  1337,  1398,  1391,  1336,  1366,  1849,
  1339,  1399,  1402,  1404,  1854,  1856,  1858,  1859,  1860,  1861,
  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,
  1872,  1873,  1874,  1875,  1876,  1406,    97,   336,  1407,  1417,
  1408,  1476,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,  1907,  1409,  1909,  1410,
  1911,   337,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,
  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,
  1412,  1414,    43,    44,    45,    46,    47,    48,   311,   312,
   313,   314,   315,  1415,   316,   317,   318,   319,   320,   321,
   322,   323,   324,  1418,  1420,  1450,  1469,  1447,   325,  1448,
  1470,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,
  1963,  1964,  1965,  1966,  1967,  1968,  1455,  1513,  1517,  1456,
  1518,  1521,  1522,  1467,  1468,  1472,  1473,  1474,   727,  1477,
  1479,  1481,  1483,  1525,  1510,  1526,  1990,  1992,  1994,  1995,
  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
  2006,  2007,  2008,  2009,   311,   312,   313,   314,   315,  1527,
   316,   317,   318,   319,   320,   321,   322,   323,   324,  1530,
  1536,  1537,  1538,  1540,   325,  1541,  1542,  2033,  1543,  2035,
  1570,  2037,  1572,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  1574,  1579,
   132,   488,  1575,  1577,  1582,  1580,   134,  1583,  1586,  1584,
  1585,   137,  1588,  1615,  1617,  1587,  1621,  1624,  1628,  1627,
  1631,  1589,  1590,  1612,  1614,  1632,  1634,  2077,  2078,  2079,
  2080,  2081,  2082,  2083,  2084,  2085,  1665,  1667,  1671,  1673,
  1677,  1674,  1675,  1678,  1679,  1680,  1710,  1712,  1715,  1711,
  1716,  1718,  2102,  2104,  2106,  2108,  2110,  2112,  2113,  2114,
  2115,  2116,  2117,  2118,  2119,  2120,  2121,   311,   312,   313,
   314,   315,  1725,   316,   317,   318,   319,   320,   321,   322,
   323,   324,  1720,  1726,  1728,  1730,  1732,   325,  2143,  1755,
  2145,  1758,  2147,  1760,  2149,  1766,  2151,  1763,  2153,  1767,
  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,   311,
   312,   313,   314,   315,  1791,   316,   317,   318,   319,   320,
   321,   322,   323,   324,  1792,  1793,  1794,  1797,  1822,   325,
  2173,  2174,  2175,  2176,  2177,  2178,  1826,   760,  1827,  1850,
  1825,  1828,  1829,  1830,  1878,  1879,  1904,  1906,  2191,  2192,
  2193,  2194,  2195,  2196,  2198,  2200,  2202,  1908,  1910,  1912,
  1931,  1969,  2034,  1970,  1971,  1972,  2036,  2038,  2070,  2215,
  2216,  2217,  2218,  2219,  2220,  2221,  2086,  2223,  2054,  2225,
  2010,  2144,  2087,  2146,  2148,   899,   900,  2088,   902,  2089,
   904,   905,  2090,  2233,  2234,  2235,  2091,  2150,  2152,  2154,
  2188,  2189,  2190,  2222,  2224,  2245,  2246,  2247,  2249,  2251,
  2253,  2226,  2267,  2242,  2269,  2271,  2243,  2244,  2312,  2296,
  2263,  2264,  2265,  2266,  2297,  2268,  2298,  2270,  2314,  2316,
  2318,  2319,   944,   945,   839,    74,   948,  1167,  2275,  2276,
  2277,    82,     0,     0,  2281,  2282,  2283,  1215,     0,     0,
  2287,  2288,  2289,   965,   966,     0,     0,     0,     0,   971,
   972,     0,  2300,  2302,  2304,     0,   978,     0,   985,     0,
     0,  2311,     0,  2313,     0,  2315,     0,    97,    98,    99,
     0,   100,     0,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,     0,   125,   126,
   127,    97,   297,     0,     0,     0,     0,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   581,  1050,     0,  1052,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1059,  1060,  1061,     0,     0,
     0,  1065,  1066,  1067,  1068,  1069,  1070,  1071,    97,   297,
   206,     0,     0,     0,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,     0,   125,
   126,   127,    97,   526,     0,     0,     0,     0,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   740,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   128,   129,   130,
   131,     0,     0,   911,     0,     0,     0,     0,     0,     0,
     0,   132,   133,     0,     0,     0,     0,   134,   135,   136,
     0,     0,   137,     0,   138,  1162,   139,   951,     0,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,   132,   133,     0,     0,   325,
     0,   134,     0,     0,     0,  1372,   137,  1373,     0,     0,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,     0,     0,     0,     0,     0,  1217,     0,     0,
     0,     0,     0,     0,     0,  1227,     0,     0,     0,     0,
     0,     0,   132,   133,     0,     0,     0,     0,   134,     0,
     0,     0,     0,   137,  1246,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   132,   133,     0,     0,
     0,     0,   134,   765,     0,     0,     0,   137,     0,     0,
     0,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,     0,     0,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,   -10,     1,   325,   -10,   -53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   560,    27,
    28,   561,   562,    31,   563,    33,     0,    34,     0,    36,
    37,    38,     0,    40,    41,     0,     0,   -53,     0,     0,
     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
    53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,
     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,
   -53,   -53,   -53,   -53,   -53,     0,     0,     0,     0,    55,
    56,    57,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1392,     0,  1393,     0,     0,     0,  1397,    67,     0,
     0,     0,   -53,   -53,   -53,   -53,     0,     0,     0,     0,
   -53,     0,   -53,  1413,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,     0,   -53,   -53,   -53,     0,   560,    27,    28,   561,
   562,    31,   563,    33,     0,    34,     0,    36,    37,    38,
     0,    40,    41,   -10,   -10,   -10,   -10,   -10,   -10,   -10,
   -10,     0,     0,   311,   312,   313,   314,   315,    53,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     2,     3,
     0,     4,     0,   325,     0,     0,     0,     0,     0,     0,
     0,   766,     0,     0,     0,   564,     0,    55,    56,    57,
     0,     0,   560,    27,    28,   561,   562,    31,   563,    33,
     0,    34,     0,    36,    37,    38,    67,    40,    41,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,    53,     0,     0,     0,     0,   325,
  1511,     0,     0,     0,     0,   546,     0,  1516,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1528,  1529,
     0,     0,     0,    55,    56,    57,     0,     0,   560,    27,
    28,   561,   562,    31,   563,    33,     0,    34,     0,    36,
    37,    38,    67,    40,    41,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,     0,  1571,   569,     0,   560,    27,    28,   561,   562,
    31,   563,    33,     0,    34,     0,    36,    37,    38,     0,
    40,    41,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,   213,     0,     0,     0,     0,    53,     0,     0,
     0,     0,     0,   311,   312,   313,   314,   315,    67,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  1619,    55,    56,    57,   584,
  1626,   907,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    67,   625,   626,   627,   628,
   629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
   639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
   649,   650,   214,   215,   216,     0,     0,     0,     0,     0,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     0,     0,     0,     0,     0,   585,     0,     0,   227,   228,
   229,   230,   231,   232,   233,   234,   235,   236,     0,   237,
   238,   239,   240,   241,   242,     0,     0,     0,     0,  1714,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1724,
     0,     0,   798,   625,   626,   627,   628,   629,   630,   631,
   632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
   642,   643,   644,   645,   646,   647,   648,   649,   650,     0,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,    23,     0,     0,   651,
   325,     0,     0,   311,   312,   313,   314,   315,   931,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,    24,     0,   492,     0,    25,
    26,    27,    28,    29,    30,    31,    32,    33,  1799,    34,
    35,    36,    37,    38,    39,    40,    41,     0,     0,     0,
    42,    43,    44,    45,    46,    47,    48,     0,    49,    50,
    51,    52,    53,   560,    27,    28,   561,   562,    31,   563,
    33,     0,    34,     0,    36,    37,    38,     0,    40,    41,
     0,     0,     0,     0,     0,     0,   995,     0,     0,     0,
    54,    55,    56,    57,     0,    53,     0,  1851,    58,     0,
    59,     0,    60,    61,    62,    63,    64,    65,    66,     0,
    67,    68,    69,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,    67,     0,     0,     0,   325,     0,  1905,
   311,   312,   313,   314,   315,  1192,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,     0,   311,   312,   313,   314,   315,  1395,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,     0,     0,     0,     0,     0,
     0,  1396,  1950,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,     0,     0,     0,     0,     0,
     0,  1453,     0,     0,     0,   311,   312,   313,   314,   315,
  1988,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,     0,   311,   312,
   313,   314,   315,  1459,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
     0,   311,   312,   313,   314,   315,  1462,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,   311,   312,   313,   314,   315,  1465,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,     0,   311,   312,   313,
   314,   315,  1466,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,     0,
   311,   312,   313,   314,   315,  1512,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,     0,   311,   312,   313,   314,   315,  1573,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,     0,   311,   312,   313,   314,
   315,  1576,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,   311,
   312,   313,   314,   315,  1578,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,     0,   311,   312,   313,   314,   315,  1824,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,     0,   311,   312,   313,   314,   315,
  1877,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,   547,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,   578,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,   700,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,   701,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,   714,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,   715,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,   716,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,   717,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,   718,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
   719,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,   779,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,   780,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,   781,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,   929,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,   930,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,   950,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1088,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1089,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1103,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1104,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1135,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1136,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1137,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1138,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1139,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1140,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1141,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1142,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1143,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1144,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1145,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1146,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1147,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1148,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1149,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1150,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1151,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1152,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1153,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1154,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1155,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1156,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1157,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1158,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1159,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1160,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1176,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1292,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1306,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1307,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1316,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1319,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1330,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1335,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1338,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1340,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1341,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1342,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1343,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1344,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1345,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1346,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1347,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1348,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1349,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1350,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1351,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1352,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1353,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1354,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1355,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1356,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1357,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1358,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1359,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1360,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1361,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1362,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1363,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1364,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1365,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1369,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1475,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1487,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1488,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1489,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1490,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1491,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1492,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1493,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1494,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1495,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1496,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1497,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1498,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1499,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1500,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1501,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1502,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1503,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1504,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1505,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1506,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1507,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1509,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1591,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1592,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1593,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1594,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1595,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1596,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1597,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1598,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1599,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1600,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1601,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1602,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1603,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1604,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1605,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1606,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1607,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1608,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1609,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1610,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1611,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1687,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1688,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1689,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1690,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1691,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1692,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1693,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1694,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1695,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1696,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1697,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1698,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1699,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1700,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1701,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1702,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1703,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1704,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1705,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1706,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1707,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1764,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1771,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1772,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1773,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1774,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1775,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1776,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1777,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1778,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1779,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1780,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1781,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1782,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1783,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1784,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1785,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1786,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1787,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1788,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1823,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1831,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1832,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1833,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1834,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1835,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1836,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1837,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1838,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1839,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1840,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1841,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1842,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1843,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1844,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1845,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1846,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1847,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1848,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1886,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1887,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1888,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1889,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1890,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1891,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1892,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1893,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1894,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1895,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1896,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1897,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1898,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1899,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1900,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1901,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1902,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1903,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1935,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1936,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1937,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1938,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1939,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1940,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1941,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1942,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1943,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1944,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1945,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1946,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1947,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1948,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1949,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1973,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1974,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1975,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1976,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1977,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  1978,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  1979,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  1980,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  1981,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  1982,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  1983,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  1984,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  1985,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  1986,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  1987,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2017,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2018,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2019,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2020,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2021,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2022,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2023,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2024,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2025,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2026,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2027,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2028,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2029,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2030,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2031,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2061,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2062,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2063,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2064,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2065,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2066,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2067,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2068,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2069,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2092,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2093,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2094,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2095,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2096,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2097,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2098,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2099,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2100,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2134,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2135,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2136,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2137,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2138,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2139,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2140,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2141,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2142,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2164,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2165,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2166,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2167,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2168,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2169,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2182,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2183,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2184,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2185,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2186,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2187,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2203,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2204,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2205,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2206,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2207,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2208,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2227,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2228,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2229,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2239,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2240,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2241,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2254,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2255,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,   311,   312,   313,
   314,   315,  2256,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,   311,   312,
   313,   314,   315,  2272,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,   311,
   312,   313,   314,   315,  2273,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
   311,   312,   313,   314,   315,  2274,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,   311,   312,   313,   314,   315,  2278,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,   311,   312,   313,   314,   315,  2279,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,   311,   312,   313,   314,   315,  2280,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,   311,   312,   313,   314,   315,  2284,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,   311,   312,   313,   314,   315,
  2285,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,   311,   312,   313,   314,
   315,  2286,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   622,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   679,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   681,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   683,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   685,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   687,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   689,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   691,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   693,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   695,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   697,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   699,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   703,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   705,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   707,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   709,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   711,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   713,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   782,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,   788,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
   879,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,  1023,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
  1025,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,  1027,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
  1029,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,     0,     0,  1030,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,     0,     0,
  1169,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   486,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   516,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   517,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   518,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   520,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   522,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   523,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   531,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   572,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   573,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   576,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   582,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   678,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   680,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   682,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   684,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   686,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   688,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   690,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   692,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   694,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   696,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   698,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   702,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   704,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   706,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   708,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   710,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   712,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   746,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   748,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,   761,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,   762,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,   763,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,   767,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,   768,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,   769,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,   770,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,   771,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
   794,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,   801,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  1022,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  1024,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  1026,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  1028,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  1092,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  1193,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  1222,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  1325,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  1329,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  1331,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  1449,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  1478,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  1480,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  1482,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  1484,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  1485,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  1486,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  1508,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  1613,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  1768,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  1769,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  1770,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  1932,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  1933,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  1934,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  2055,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  2056,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  2057,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  2058,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  2059,   311,   312,   313,   314,   315,     0,
   316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     0,     0,     0,     0,   325,     0,  2060,   311,   312,   313,
   314,   315,     0,   316,   317,   318,   319,   320,   321,   322,
   323,   324,     0,     0,     0,     0,     0,   325,     0,  2170,
   311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
   320,   321,   322,   323,   324,     0,     0,     0,     0,     0,
   325,     0,  2171,   311,   312,   313,   314,   315,     0,   316,
   317,   318,   319,   320,   321,   322,   323,   324,     0,     0,
     0,     0,     0,   325,     0,  2172,   311,   312,   313,   314,
   315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
   324,     0,     0,     0,     0,     0,   325,     0,  2230,   311,
   312,   313,   314,   315,     0,   316,   317,   318,   319,   320,
   321,   322,   323,   324,     0,     0,     0,     0,     0,   325,
     0,  2231,   311,   312,   313,   314,   315,     0,   316,   317,
   318,   319,   320,   321,   322,   323,   324,     0,     0,     0,
     0,     0,   325,     0,  2232,   311,   312,   313,   314,   315,
     0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     0,     0,     0,     0,     0,   325,     0,  2290,   311,   312,
   313,   314,   315,     0,   316,   317,   318,   319,   320,   321,
   322,   323,   324,     0,     0,     0,     0,     0,   325,     0,
  2291,   311,   312,   313,   314,   315,     0,   316,   317,   318,
   319,   320,   321,   322,   323,   324,     0,     0,     0,     0,
     0,   325,     0,  2292
};

static const short yycheck[] = {    23,
    95,   368,     7,    23,     7,   305,   339,   738,     4,     4,
     4,     4,  1110,   183,    44,    45,   186,     4,     6,     5,
     4,  1119,     5,    65,     6,    42,    66,    66,  1126,     7,
     3,    71,    71,     4,  1303,    66,  1305,   207,  1212,   209,
    71,     6,    65,     6,    65,     6,    68,    69,    34,    35,
    36,    34,    35,    36,    87,   199,   103,     5,   303,   203,
    66,     4,    66,   168,    66,    71,   198,    71,    66,    71,
     4,     5,   204,    71,    66,   187,   188,    66,     7,    71,
   187,   188,    71,   198,    49,   200,    34,    35,    36,   187,
   188,   203,    66,   205,   339,   199,   203,    71,   205,   203,
    34,    35,    36,   187,   188,   203,     6,   205,   132,   133,
   134,   187,   188,   137,   138,   198,   140,   187,   188,     6,
   204,   204,   198,   147,   148,   149,     6,   151,   204,   153,
   154,     6,   156,   198,   204,   106,   107,   187,   188,   204,
   170,     6,   172,   187,   188,  1319,     6,     7,   178,   173,
   174,   198,   198,   203,  1381,     5,   198,   198,  1385,   203,
   891,  1388,   204,   106,   107,   205,   205,    38,   192,   193,
    41,   195,     7,   197,   205,   198,   200,   201,   203,   212,
   205,   198,   515,   204,    34,    35,    36,   187,   188,   199,
   187,   188,   492,   203,   527,   173,   174,   175,   176,   205,
     6,   205,   199,   205,   204,   187,   188,   205,   204,   204,
   204,   204,   200,   205,   198,   188,   205,   204,   204,   389,
   250,   204,  1320,   247,   187,   188,  1324,    65,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   515,   198,   294,   295,   296,     7,   200,   199,   202,   303,
     7,   203,   527,   198,     3,   305,   198,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   198,  1572,   187,   188,  1575,   331,  1577,   333,
   194,   195,  1043,   199,   338,   339,   200,   203,   202,   198,
   203,   187,   188,   347,   348,   349,   350,    42,   352,   353,
   354,   355,   356,   357,   358,   365,   366,   203,   173,   174,
   175,   176,   187,   188,   194,   195,   370,   371,   372,   373,
   187,   188,   202,   377,   198,   187,   188,   198,   203,   194,
   195,   385,   367,   368,   367,   368,   203,   202,   187,   188,
   394,   203,   187,   188,  1472,  1473,  1474,  1475,   189,   190,
   191,  1479,   187,   188,   203,   198,   197,   200,   203,  1616,
   723,     8,    46,  1620,   199,   199,  1623,    38,  1667,   203,
    41,    42,  1671,    44,  1673,   187,   188,   189,   190,   191,
   194,   195,   198,   198,   200,   197,   436,    42,   202,   752,
   139,   140,   141,   142,   143,   144,   145,   146,   180,   181,
    42,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    42,   173,   174,   175,   176,   197,   173,   174,   175,   176,
   783,   784,   785,   786,    44,    59,    60,    61,    62,     8,
    64,   485,   194,   195,   488,   194,   195,   194,   195,   204,
   494,   493,   492,   194,   195,   198,   198,   200,   723,   200,
   198,   202,   200,   728,  1582,  1583,  1713,   198,  1586,   200,
  1717,   515,  1719,    56,    57,    38,   194,   195,    41,    42,
   524,   525,   200,   527,   202,   529,   530,   752,   194,   195,
    41,    42,   536,    44,   200,   545,   202,   124,   125,   126,
   127,   128,   546,   547,   198,   198,   200,   200,   198,   204,
   200,   555,   198,   198,   200,   200,     6,     7,   783,   784,
   785,   786,     4,   567,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    42,   578,  1286,   580,   581,   197,     4,
   177,   178,   179,   180,   181,     6,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   198,   909,   200,   198,  1677,
   197,     6,   198,   883,   884,   179,   180,   181,   205,   183,
   184,   185,   186,   187,   188,   189,   190,   191,     3,     4,
   622,   198,   622,   197,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,   177,   178,
   179,   180,   181,    38,   183,   184,   185,   186,   187,   188,
   189,   190,   191,   198,   198,   200,   200,   198,   197,   200,
   199,   198,     6,   200,    59,    60,    61,    62,    63,    64,
   198,   198,   200,   200,   909,   198,     4,   200,  1766,    42,
   198,     6,   200,   198,     3,   200,   700,   701,     5,   203,
   203,   205,   205,   203,   203,   205,   205,   203,   198,   205,
   714,   715,   716,   717,   718,   719,   720,   198,   203,   723,
   205,     8,   724,   203,   728,   205,   203,   731,   205,   203,
  1077,   205,   203,   743,   205,   203,   740,   205,     6,   203,
    55,   205,   203,   203,   205,   205,     6,     5,   752,  1827,
   754,   203,   203,   205,   205,   203,   203,   205,   205,   203,
   835,   205,   203,   203,   205,   205,   203,     4,   205,   779,
   780,   781,   203,   203,   205,   205,   203,   200,   205,   783,
   784,   785,   786,     6,   198,   789,   790,   204,   203,   793,
   205,   203,   203,   205,   205,   203,   806,   205,     6,     6,
   804,   805,   187,   188,   203,   815,   205,   203,   193,   205,
   203,   198,   205,   198,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   203,
   203,   205,   205,   203,   197,   205,   840,   841,   842,   843,
   844,   845,   846,   847,   848,   849,   850,   851,   852,   853,
   854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   177,   178,   179,   180,   181,   198,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   198,   203,   879,
   205,   203,   197,   205,   884,   198,   198,   198,   892,   109,
   177,   178,   179,   180,   181,   198,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   909,   204,   911,   204,   913,
   197,   204,   198,   198,   198,   198,   204,     6,   198,     6,
     6,   202,   204,   198,   928,   929,   930,   204,   198,   198,
     5,   198,  2010,   198,   198,   198,   198,   198,     4,   198,
     7,   198,   955,   198,   198,   198,   950,   951,   952,   198,
  1297,   198,   198,   198,   177,   178,   179,   180,   181,   198,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   177,
   178,   179,   180,   181,   197,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   198,   198,     6,   198,   198,   197,
     3,     4,   198,   993,   198,   198,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   198,   198,   198,   198,     6,   204,   199,   197,     7,   203,
     7,   203,  1036,  1035,   202,     7,   199,     7,  1048,     7,
   104,   177,   178,   179,   180,   181,   106,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   204,  1132,  1062,  1063,
  1064,   197,   169,   199,     5,     5,     5,   203,  1078,  1073,
  1080,  1073,  1082,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,  1088,  1089,     5,     5,  1101,     5,
     5,     5,  1077,     5,  1077,     5,  1100,     5,     5,  1103,
   157,     6,     6,     5,     5,     5,     5,     3,     5,  1113,
     5,     5,   203,     6,   199,     4,  1120,  1121,  1122,     6,
   202,     7,     7,  1127,     7,     7,     7,  1131,     7,     7,
   204,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,
  1154,  1155,  1156,  1157,  1158,  1159,  1160,   177,   178,   179,
   180,   181,   205,   183,   184,   185,   186,   187,   188,   189,
   190,   191,  1176,   205,   187,   188,   204,   197,     7,     7,
   193,   198,     7,   202,   170,   198,     5,   203,   201,   203,
  1194,   204,   203,   203,   203,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   203,  1224,     3,     4,  1218,   197,  1220,   198,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,   203,   203,   203,   203,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     6,   177,   178,   179,   180,   181,   199,   183,
   184,   185,   186,   187,   188,   189,   190,   191,  1292,     6,
  1300,     4,  1302,   197,  1304,   198,  1300,   203,  1302,     6,
  1304,     6,  1306,  1307,     6,   203,     7,   198,     6,  1313,
     7,   203,  1297,   203,  1297,   203,     7,     7,  1322,   203,
     7,   198,     7,   203,     7,     7,  1330,   203,   203,   203,
   203,  1335,   203,   203,  1338,   203,  1340,  1341,  1342,  1343,
  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
  1354,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1363,
  1364,  1365,   203,   203,   203,  1375,   203,   203,  1372,   203,
  1374,  1375,  1376,   200,   198,   198,   198,   198,   198,     7,
   177,   178,   179,   180,   181,  1398,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   198,   187,   188,   198,   198,
   197,     7,   193,   198,   198,   198,   203,   198,   205,   198,
   201,   198,   198,   204,   198,   198,   198,   198,   198,   198,
   198,   198,     7,     7,     7,   201,   187,   188,     7,   204,
     4,     6,   193,     6,     4,     7,     7,   198,   166,     3,
   201,     3,     3,   204,   189,     3,     3,     3,     3,     3,
  1454,     3,     3,     3,     3,     3,  1460,     3,  1471,  1463,
   177,   178,   179,   180,   181,     6,   183,   184,   185,   186,
   187,   188,   189,   190,   191,     5,     3,     5,     3,   199,
   197,     4,     6,  1487,  1488,  1489,  1490,  1491,  1492,  1493,
  1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,
  1504,  1505,  1506,  1507,     6,  1509,   199,   202,     7,     6,
     6,     6,     6,     6,   198,   204,     6,     6,  1531,   105,
     3,     4,   199,   204,   203,   203,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     3,     4,   203,   199,   203,   199,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   203,   203,   203,   199,  1588,  1589,  1590,  1591,  1592,  1593,
  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,   199,   203,
  1612,   203,     6,   203,   203,  1628,   203,     6,   199,     6,
     4,   203,   199,   203,     6,   203,   155,   203,     6,     6,
     6,     6,   161,     6,   203,   203,   177,   178,   179,   180,
   181,   201,   183,   184,   185,   186,   187,   188,   189,   190,
   191,     6,     6,     6,     6,   184,   197,     6,   203,   203,
   189,   190,   202,  1676,     6,     6,     6,     6,     6,     6,
     6,  1675,     6,     6,   105,     7,     3,  1681,     6,  1683,
     3,  1685,     6,  1687,  1688,  1689,  1690,  1691,  1692,  1693,
  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,
  1704,  1705,  1706,  1707,   187,   188,  1708,   189,  1710,  1722,
   193,     6,     6,     3,     6,   198,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,     3,     6,     6,   187,   188,   197,     6,     3,     6,
   193,     3,   203,     3,   205,   198,     3,     6,     4,     7,
   202,   204,     6,     6,     6,   201,     6,   204,   102,  1763,
  1764,   205,   204,   204,   204,   204,   199,  1771,  1772,  1773,
  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
  1784,  1785,  1786,  1787,  1788,   203,   203,  1789,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,   199,   203,   203,   199,   199,   197,   199,
   107,   199,   203,     6,   199,   166,   105,   203,   199,  1823,
   203,     6,     3,     6,  1828,  1829,  1830,  1831,  1832,  1833,
  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
  1844,  1845,  1846,  1847,  1848,     6,     3,     4,     3,     3,
     6,   199,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,  1880,     6,  1882,     6,
  1884,    38,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
     6,     6,    59,    60,    61,    62,    63,    64,   177,   178,
   179,   180,   181,     6,   183,   184,   185,   186,   187,   188,
   189,   190,   191,     6,     5,   205,     6,     6,   197,     5,
   205,  1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,
  1944,  1945,  1946,  1947,  1948,  1949,     6,     6,     6,   204,
     6,     6,     6,   204,   203,   203,   203,   203,   487,   199,
   203,   199,   203,     6,   203,     6,  1970,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,   177,   178,   179,   180,   181,     6,
   183,   184,   185,   186,   187,   188,   189,   190,   191,     6,
     6,     6,     6,     6,   197,     6,     6,  2011,     5,  2013,
     5,  2015,   204,  2017,  2018,  2019,  2020,  2021,  2022,  2023,
  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,   203,   203,
   187,   188,   204,   204,   203,   205,   193,   203,   203,   199,
   199,   198,   204,     6,     6,   203,     6,     6,   166,   102,
     6,   204,   204,   204,   203,     6,     5,  2061,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,     5,   204,   204,   204,
   203,   205,   204,   203,   199,   199,   204,     6,     6,   205,
     6,     6,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
  2094,  2095,  2096,  2097,  2098,  2099,  2100,   177,   178,   179,
   180,   181,     6,   183,   184,   185,   186,   187,   188,   189,
   190,   191,   102,     6,     6,     6,     6,   197,  2122,     6,
  2124,     6,  2126,   205,  2128,   203,  2130,   204,  2132,   203,
  2134,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,   177,
   178,   179,   180,   181,     6,   183,   184,   185,   186,   187,
   188,   189,   190,   191,     6,     6,     6,   171,     6,   197,
  2164,  2165,  2166,  2167,  2168,  2169,   203,   205,   203,     6,
   172,   204,   204,   204,   203,   199,     6,     6,  2182,  2183,
  2184,  2185,  2186,  2187,  2188,  2189,  2190,     6,     6,     6,
   203,   203,     6,   204,   204,   204,     6,     6,     6,  2203,
  2204,  2205,  2206,  2207,  2208,  2209,   204,  2211,   199,  2213,
   203,     6,   204,     6,     6,   744,   745,   204,   747,   204,
   749,   750,   204,  2227,  2228,  2229,   204,     6,     6,     6,
   204,   204,   204,     6,     6,  2239,  2240,  2241,  2242,  2243,
  2244,     6,     6,   204,     6,     6,   204,   204,     6,   204,
  2254,  2255,  2256,  2257,   204,  2259,   204,  2261,     6,     6,
     0,     0,   791,   792,   624,     7,   795,  1039,  2272,  2273,
  2274,     7,    -1,    -1,  2278,  2279,  2280,  1094,    -1,    -1,
  2284,  2285,  2286,   812,   813,    -1,    -1,    -1,    -1,   818,
   819,    -1,  2296,  2297,  2298,    -1,   825,    -1,   827,    -1,
    -1,  2305,    -1,  2307,    -1,  2309,    -1,     3,     4,     5,
    -1,     7,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
    36,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     8,   901,    -1,   903,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   914,   915,   916,    -1,    -1,
    -1,   920,   921,   922,   923,   924,   925,   926,     3,     4,
     5,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,   175,
   176,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   187,   188,    -1,    -1,    -1,    -1,   193,   194,   195,
    -1,    -1,   198,    -1,   200,  1034,   202,     8,    -1,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,   187,   188,    -1,    -1,   197,
    -1,   193,    -1,    -1,    -1,   203,   198,   205,    -1,    -1,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,    -1,    -1,    -1,  1096,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1104,    -1,    -1,    -1,    -1,
    -1,    -1,   187,   188,    -1,    -1,    -1,    -1,   193,    -1,
    -1,    -1,    -1,   198,  1123,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   187,   188,    -1,    -1,
    -1,    -1,   193,   205,    -1,    -1,    -1,   198,    -1,    -1,
    -1,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,    -1,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,     0,     1,   197,     3,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    47,    -1,    49,
    50,    51,    -1,    53,    54,    -1,    -1,    33,    -1,    -1,
    -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    70,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    64,    -1,
    66,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    99,
   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1310,    -1,  1312,    -1,    -1,    -1,  1316,   118,    -1,
    -1,    -1,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
   106,    -1,   108,  1332,   110,   111,   112,   113,   114,   115,
   116,    -1,   118,   119,   120,    -1,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    47,    -1,    49,    50,    51,
    -1,    53,    54,   139,   140,   141,   142,   143,   144,   145,
   146,    -1,    -1,   177,   178,   179,   180,   181,    70,   183,
   184,   185,   186,   187,   188,   189,   190,   191,   164,   165,
    -1,   167,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   205,    -1,    -1,    -1,   205,    -1,    99,   100,   101,
    -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    47,    -1,    49,    50,    51,   118,    53,    54,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    70,    -1,    -1,    -1,    -1,   197,
  1449,    -1,    -1,    -1,    -1,   203,    -1,  1456,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1467,  1468,
    -1,    -1,    -1,    99,   100,   101,    -1,    -1,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    47,    -1,    49,
    50,    51,   118,    53,    54,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    -1,  1511,   205,    -1,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    47,    -1,    49,    50,    51,    -1,
    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
   100,   101,    41,    -1,    -1,    -1,    -1,    70,    -1,    -1,
    -1,    -1,    -1,   177,   178,   179,   180,   181,   118,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,  1574,    99,   100,   101,   205,
  1579,   205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
   159,   160,   161,   162,   163,    -1,    -1,    -1,    -1,  1668,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1678,
    -1,    -1,   205,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    -1,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,     4,    -1,    -1,   205,
   197,    -1,    -1,   177,   178,   179,   180,   181,   205,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    33,    -1,   201,    -1,    37,
    38,    39,    40,    41,    42,    43,    44,    45,  1767,    47,
    48,    49,    50,    51,    52,    53,    54,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
    68,    69,    70,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    47,    -1,    49,    50,    51,    -1,    53,    54,
    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
    98,    99,   100,   101,    -1,    70,    -1,  1826,   106,    -1,
   108,    -1,   110,   111,   112,   113,   114,   115,   116,    -1,
   118,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    99,   100,   101,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,   118,    -1,    -1,    -1,   197,    -1,  1878,
   177,   178,   179,   180,   181,   205,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,   177,   178,   179,   180,   181,   205,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   205,  1931,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   205,    -1,    -1,    -1,   177,   178,   179,   180,   181,
  1969,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,   178,
   179,   180,   181,   205,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,   177,   178,   179,   180,   181,   205,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,   177,   178,   179,   180,   181,   205,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,   178,   179,
   180,   181,   205,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
   177,   178,   179,   180,   181,   205,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,   177,   178,   179,   180,   181,   205,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,   177,   178,   179,   180,
   181,   205,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   177,
   178,   179,   180,   181,   205,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,    -1,   177,   178,   179,   180,   181,   205,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,   177,   178,   179,   180,   181,
   205,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,
   180,   181,   203,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,   178,
   179,   180,   181,   203,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,   177,
   178,   179,   180,   181,   203,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
   177,   178,   179,   180,   181,   203,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,   177,   178,   179,   180,   181,   203,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,   177,   178,   179,   180,   181,   203,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,   177,   178,   179,   180,   181,   203,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,   203,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,   181,
   203,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,   177,   178,   179,   180,
   181,   203,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   201,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 172 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 178 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 179 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 184 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1, MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 198 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 205 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 227 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 232 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 243 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 246 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 250 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 256 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 262 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 269 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 275 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 279 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 28:
#line 283 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 29:
#line 290 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 30:
#line 294 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 31:
#line 299 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 303 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 311 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 315 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 319 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 323 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 327 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 339 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 343 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 347 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 351 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 355 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 360 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 363 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 367 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 370 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 374 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 377 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 380 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 388 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 391 "Gmsh.y"
{
    yymsg(INFO, "Gmsh file format read");
  ;
    break;}
case 55:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 415 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 70:
#line 419 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 71:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 72:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 73:
#line 446 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 100:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 481 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 486 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 491 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 104:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 500 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 505 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 107:
#line 510 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 108:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 519 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 524 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 529 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 112:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 538 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 544 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 550 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 116:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 559 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 565 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 571 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 120:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 580 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 586 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 592 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 124:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 601 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 608 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 617 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 128:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 626 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 633 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 642 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 132:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 651 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 134:
#line 658 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 135:
#line 667 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 136:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 676 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 138:
#line 684 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 139:
#line 693 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 140:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 702 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 142:
#line 710 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 143:
#line 719 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 728 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 146:
#line 736 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 147:
#line 745 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 148:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 754 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 150:
#line 762 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 151:
#line 771 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 152:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 780 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 154:
#line 788 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 155:
#line 797 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 156:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 806 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 158:
#line 814 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 159:
#line 823 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 160:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 832 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 162:
#line 844 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 163:
#line 859 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 868 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 166:
#line 880 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 167:
#line 895 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 168:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 904 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 170:
#line 916 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 171:
#line 931 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 172:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 940 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 174:
#line 950 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 175:
#line 962 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 176:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 971 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 178:
#line 981 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 179:
#line 993 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 180:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1002 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 182:
#line 1012 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 183:
#line 1024 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 184:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1033 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 186:
#line 1042 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 187:
#line 1054 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 188:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1063 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 190:
#line 1072 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 191:
#line 1084 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 192:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1093 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 194:
#line 1102 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 195:
#line 1114 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 196:
#line 1121 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1126 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 198:
#line 1134 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 199:
#line 1141 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 200:
#line 1148 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1153 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1161 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 203:
#line 1168 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 204:
#line 1177 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 205:
#line 1178 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 206:
#line 1179 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 207:
#line 1180 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 208:
#line 1181 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 209:
#line 1185 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 210:
#line 1186 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 211:
#line 1194 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 212:
#line 1221 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 213:
#line 1255 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l, i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1302 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 215:
#line 1317 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 216:
#line 1326 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 217:
#line 1341 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1353 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 219:
#line 1367 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 220:
#line 1390 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 221:
#line 1414 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1426 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 223:
#line 1440 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1452 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 225:
#line 1466 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1486 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 227:
#line 1508 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 228:
#line 1518 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 229:
#line 1536 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d, yyvsp[-1].v[0], yyvsp[-1].v[1], yyvsp[-1].v[2], yyvsp[-1].v[3], yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1543 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_POINT, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 231:
#line 1549 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        v = FindPoint(ip, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 232:
#line 1568 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 233:
#line 1582 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_LINE, 1, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1588 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_SPLN, 3, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 235:
#line 1594 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        c = FindCurve(ip, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 236:
#line 1613 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_CIRC, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1619 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_ELLI, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 238:
#line 1625 "Gmsh.y"
{
      List_T *temp;
      int i, j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l), 1, sizeof(int));
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
      	List_Read(yyvsp[-3].l, i, &d);
        j = (int)d;
        List_Add(temp, &j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 239:
#line 1642 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d, MSH_SEGM_PARAMETRIC, 2, NULL, NULL, -1, -1, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].c, yyvsp[-4].c, yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 240:
#line 1648 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_LINE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1654 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 242:
#line 1660 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BSPLN, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1671 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BEZIER, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 244:
#line 1682 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l), 1, sizeof(int));
	for(i = 0; i < List_Nbr(yyvsp[-5].l); i++) {
	  List_Read(yyvsp[-5].l, i, &d);
	  j = (int)d;
	  List_Add(Temp, &j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d, MSH_SEGM_NURBS, (int)yyvsp[-1].d, Temp, yyvsp[-3].l, -1, -1, 0., 1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 245:
#line 1707 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 246:
#line 1713 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-2].l, NULL);
	s = FindSurface((int)yyvsp[-8].d, THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 247:
#line 1732 "Gmsh.y"
{
      List_Read(yyvsp[-1].l, 0, &d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i, THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 248:
#line 1754 "Gmsh.y"
{
    AddTriangulationToSurface ((int) yyvsp[-10].d, (int) yyvsp[-6].d, (int) yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
    yyval.s.Num = (int)yyvsp[-10].d;
  ;
    break;}
case 249:
#line 1762 "Gmsh.y"
{
      CreateNurbsSurface ((int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 250:
#line 1770 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 251:
#line 1774 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_SURFACE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 252:
#line 1780 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_LOOP, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 253:
#line 1789 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 254:
#line 1795 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 255:
#line 1801 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 256:
#line 1812 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1817 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1822 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 259:
#line 1827 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 260:
#line 1834 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1835 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 262:
#line 1836 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 263:
#line 1841 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 264:
#line 1845 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 265:
#line 1849 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 266:
#line 1863 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 267:
#line 1877 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 268:
#line 1891 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 269:
#line 1910 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 270:
#line 1920 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 271:
#line 1931 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
    ;
    break;}
case 272:
#line 1938 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 273:
#line 1942 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All"))
	Init_Mesh(THEM, 1);
    ;
    break;}
case 274:
#line 1952 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
    ;
    break;}
case 275:
#line 1964 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 276:
#line 1971 "Gmsh.y"
{
      for(i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 277:
#line 1976 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
    ;
    break;}
case 278:
#line 1985 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
    ;
    break;}
case 279:
#line 1997 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	ParseFile(tmpstring, 0, 0);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblemWithBoundingBox(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 280:
#line 2032 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(0, v, tmpstring);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 281:
#line 2045 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	//Maillage_Dimension_0(THEM);
	//mai3d(THEM, (int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 282:
#line 2062 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch (...) {
	yymsg(WARNING, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 283:
#line 2071 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(1);
      else
	yymsg(GERROR, "Unknown Combine command");
    ;
    break;}
case 284:
#line 2078 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 285:
#line 2082 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 286:
#line 2104 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 287:
#line 2114 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 288:
#line 2124 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 289:
#line 2145 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 290:
#line 2166 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 291:
#line 2187 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 292:
#line 2193 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 293:
#line 2198 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2203 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 295:
#line 2207 "Gmsh.y"
{
    ;
    break;}
case 296:
#line 2218 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 297:
#line 2228 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 298:
#line 2238 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 299:
#line 2248 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 300:
#line 2253 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 301:
#line 2263 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 302:
#line 2268 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 303:
#line 2278 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 304:
#line 2283 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 305:
#line 2295 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 306:
#line 2312 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 307:
#line 2329 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 308:
#line 2346 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 309:
#line 2351 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 310:
#line 2368 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 311:
#line 2373 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 312:
#line 2390 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2395 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 314:
#line 2415 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 315:
#line 2431 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 316:
#line 2447 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 317:
#line 2463 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2468 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 319:
#line 2485 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 320:
#line 2491 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 321:
#line 2508 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2514 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 323:
#line 2534 "Gmsh.y"
{
    ;
    break;}
case 324:
#line 2537 "Gmsh.y"
{
    ;
    break;}
case 325:
#line 2543 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 326:
#line 2569 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 327:
#line 2593 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 328:
#line 2602 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 329:
#line 2620 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 330:
#line 2638 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 331:
#line 2656 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 332:
#line 2678 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 333:
#line 2699 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 334:
#line 2720 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)d;
	s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 335:
#line 2734 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read(yyvsp[-1].l, i, &d);
	j = (int)d;
        s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 336:
#line 2754 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 337:
#line 2758 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 338:
#line 2767 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 339:
#line 2768 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 340:
#line 2769 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 341:
#line 2770 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 342:
#line 2771 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 343:
#line 2775 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 344:
#line 2776 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 345:
#line 2777 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 346:
#line 2778 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 347:
#line 2779 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 348:
#line 2780 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 349:
#line 2781 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 350:
#line 2782 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 351:
#line 2784 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 352:
#line 2790 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 353:
#line 2791 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d) ;  ;
    break;}
case 354:
#line 2792 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 355:
#line 2793 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 356:
#line 2794 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 357:
#line 2795 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 358:
#line 2796 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 359:
#line 2797 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 360:
#line 2798 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 361:
#line 2799 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 362:
#line 2800 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 363:
#line 2801 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 364:
#line 2802 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 365:
#line 2803 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 366:
#line 2804 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 367:
#line 2805 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 368:
#line 2806 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 369:
#line 2807 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 370:
#line 2808 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 371:
#line 2809 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 372:
#line 2810 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 373:
#line 2811 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 374:
#line 2812 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 375:
#line 2813 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 376:
#line 2814 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 377:
#line 2815 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 378:
#line 2816 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 379:
#line 2817 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 380:
#line 2818 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 381:
#line 2819 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 382:
#line 2820 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 383:
#line 2821 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 384:
#line 2823 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 385:
#line 2824 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 386:
#line 2825 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 387:
#line 2826 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 388:
#line 2827 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 389:
#line 2828 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 390:
#line 2829 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 391:
#line 2830 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 392:
#line 2831 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 393:
#line 2832 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 394:
#line 2833 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 395:
#line 2834 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 396:
#line 2835 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 397:
#line 2836 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 398:
#line 2837 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 399:
#line 2838 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 400:
#line 2839 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 401:
#line 2840 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 402:
#line 2841 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 403:
#line 2842 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 404:
#line 2843 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 405:
#line 2852 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 406:
#line 2853 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 407:
#line 2854 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 408:
#line 2855 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 409:
#line 2860 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 410:
#line 2871 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 411:
#line 2888 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 412:
#line 2899 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 413:
#line 2918 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 414:
#line 2934 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 415:
#line 2950 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 416:
#line 2966 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 417:
#line 2984 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 418:
#line 2988 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 419:
#line 2992 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 420:
#line 2996 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 421:
#line 3000 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 422:
#line 3007 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 423:
#line 3011 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 424:
#line 3015 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 425:
#line 3019 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 426:
#line 3026 "Gmsh.y"
{
    ;
    break;}
case 427:
#line 3029 "Gmsh.y"
{
    ;
    break;}
case 428:
#line 3035 "Gmsh.y"
{
    ;
    break;}
case 429:
#line 3038 "Gmsh.y"
{
    ;
    break;}
case 430:
#line 3044 "Gmsh.y"
{
    ;
    break;}
case 431:
#line 3047 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 432:
#line 3051 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 433:
#line 3058 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 434:
#line 3063 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 435:
#line 3071 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 436:
#line 3076 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 437:
#line 3080 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 438:
#line 3084 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 439:
#line 3095 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      for(d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 440:
#line 3101 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 441:
#line 3112 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double)) ;      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d) ;
	double d = 0.0 ;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X) ;
	List_Add(yyval.l, &v->Pos.Y) ;
	List_Add(yyval.l, &v->Pos.Z) ;
      }
    ;
    break;}
case 442:
#line 3132 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 443:
#line 3141 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 444:
#line 3150 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 445:
#line 3161 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 446:
#line 3175 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 447:
#line 3191 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 448:
#line 3211 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 449:
#line 3236 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 450:
#line 3241 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 451:
#line 3245 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 452:
#line 3249 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[0].l); i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 453:
#line 3261 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 454:
#line 3265 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 455:
#line 3276 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 456:
#line 3281 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0) ;
	}
      }
    ;
    break;}
case 457:
#line 3300 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 458:
#line 3304 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 459:
#line 3318 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 460:
#line 3323 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 461:
#line 3330 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 462:
#line 3334 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 463:
#line 3342 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 464:
#line 3355 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 465:
#line 3359 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 466:
#line 3377 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 467:
#line 3391 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3406 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(j < (int)strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void FixRelativePath(char *in, char *out){
  if(in[0] == '/' || in[0] == '\\' || (strlen(in)>2 && in[1] == ':')){
    // do nothing: 'in' is an absolute path
    strcpy(out, in);
  }
  else{
    // append 'in' to the path of the parent file
    strcpy(out, yyname);
    int i = strlen(out)-1 ;
    while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
    out[i+1] = '\0';
    strcat(out, in);
  }
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


