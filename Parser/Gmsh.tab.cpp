
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSurface	299
#define	tSpline	300
#define	tVolume	301
#define	tCharacteristic	302
#define	tLength	303
#define	tParametric	304
#define	tElliptic	305
#define	tPlane	306
#define	tRuled	307
#define	tTriangulation	308
#define	tTransfinite	309
#define	tComplex	310
#define	tPhysical	311
#define	tUsing	312
#define	tBump	313
#define	tProgression	314
#define	tPlugin	315
#define	tDiscrete	316
#define	tRotate	317
#define	tTranslate	318
#define	tSymmetry	319
#define	tDilate	320
#define	tExtrude	321
#define	tDuplicata	322
#define	tLoop	323
#define	tRecombine	324
#define	tDelete	325
#define	tCoherence	326
#define	tIntersect	327
#define	tAttractor	328
#define	tLayers	329
#define	tAlias	330
#define	tAliasWithOptions	331
#define	tScalarPoint	332
#define	tVectorPoint	333
#define	tTensorPoint	334
#define	tScalarLine	335
#define	tVectorLine	336
#define	tTensorLine	337
#define	tScalarTriangle	338
#define	tVectorTriangle	339
#define	tTensorTriangle	340
#define	tScalarQuadrangle	341
#define	tVectorQuadrangle	342
#define	tTensorQuadrangle	343
#define	tScalarTetrahedron	344
#define	tVectorTetrahedron	345
#define	tTensorTetrahedron	346
#define	tScalarHexahedron	347
#define	tVectorHexahedron	348
#define	tTensorHexahedron	349
#define	tScalarPrism	350
#define	tVectorPrism	351
#define	tTensorPrism	352
#define	tScalarPyramid	353
#define	tVectorPyramid	354
#define	tTensorPyramid	355
#define	tText2D	356
#define	tText3D	357
#define	tInterpolationScheme	358
#define	tTime	359
#define	tCombine	360
#define	tBSpline	361
#define	tBezier	362
#define	tNurbs	363
#define	tOrder	364
#define	tWith	365
#define	tBounds	366
#define	tKnots	367
#define	tColor	368
#define	tColorTable	369
#define	tFor	370
#define	tIn	371
#define	tEndFor	372
#define	tIf	373
#define	tEndIf	374
#define	tExit	375
#define	tReturn	376
#define	tCall	377
#define	tFunction	378
#define	tTrimmed	379
#define	tShow	380
#define	tHide	381
#define	tGetValue	382
#define	tGMSH_MAJOR_VERSION	383
#define	tGMSH_MINOR_VERSION	384
#define	tGMSH_PATCH_VERSION	385
#define	tB_SPLINE_SURFACE_WITH_KNOTS	386
#define	tB_SPLINE_CURVE_WITH_KNOTS	387
#define	tCARTESIAN_POINT	388
#define	tTRUE	389
#define	tFALSE	390
#define	tUNSPECIFIED	391
#define	tU	392
#define	tV	393
#define	tEDGE_CURVE	394
#define	tVERTEX_POINT	395
#define	tORIENTED_EDGE	396
#define	tPLANE	397
#define	tFACE_OUTER_BOUND	398
#define	tEDGE_LOOP	399
#define	tADVANCED_FACE	400
#define	tVECTOR	401
#define	tDIRECTION	402
#define	tAXIS2_PLACEMENT_3D	403
#define	tISO	404
#define	tENDISO	405
#define	tENDSEC	406
#define	tDATA	407
#define	tHEADER	408
#define	tFILE_DESCRIPTION	409
#define	tFILE_SCHEMA	410
#define	tFILE_NAME	411
#define	tMANIFOLD_SOLID_BREP	412
#define	tCLOSED_SHELL	413
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	414
#define	tFACE_BOUND	415
#define	tCYLINDRICAL_SURFACE	416
#define	tCONICAL_SURFACE	417
#define	tCIRCLE	418
#define	tTRIMMED_CURVE	419
#define	tGEOMETRIC_SET	420
#define	tCOMPOSITE_CURVE_SEGMENT	421
#define	tCONTINUOUS	422
#define	tCOMPOSITE_CURVE	423
#define	tTOROIDAL_SURFACE	424
#define	tPRODUCT_DEFINITION	425
#define	tPRODUCT_DEFINITION_SHAPE	426
#define	tSHAPE_DEFINITION_REPRESENTATION	427
#define	tELLIPSE	428
#define	tSolid	429
#define	tEndSolid	430
#define	tVertex	431
#define	tFacet	432
#define	tNormal	433
#define	tOuter	434
#define	tLoopSTL	435
#define	tEndLoop	436
#define	tEndFacet	437
#define	tAFFECTPLUS	438
#define	tAFFECTMINUS	439
#define	tAFFECTTIMES	440
#define	tAFFECTDIVIDE	441
#define	tOR	442
#define	tAND	443
#define	tEQUAL	444
#define	tNOTEQUAL	445
#define	tAPPROXEQUAL	446
#define	tLESSOREQUAL	447
#define	tGREATEROREQUAL	448
#define	tCROSSPRODUCT	449
#define	tPLUSPLUS	450
#define	tMINUSMINUS	451
#define	UNARYPREC	452

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.234 2005-03-13 07:16:13 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"
#include "GmshVersion.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 75 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2434
#define	YYFLAG		-32768
#define	YYNTBASE	218

#define YYTRANSLATE(x) ((unsigned)(x) <= 452 ? yytranslate[x] : 356)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   204,     2,   214,     2,   202,     2,     2,   209,
   210,   200,   198,   215,   199,   213,   201,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   194,
     2,   196,   188,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   211,     2,   212,   208,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   216,     2,   217,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   189,   190,   191,   192,   193,   195,   197,   203,   205,
   206,   207
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1976,  1988,  1997,  2010,  2019,  2028,  2037,  2050,  2065,
  2080,  2095,  2118,  2139,  2148,  2157,  2166,  2174,  2183,  2189,
  2201,  2207,  2217,  2219,  2221,  2223,  2224,  2227,  2234,  2241,
  2248,  2255,  2260,  2267,  2274,  2281,  2286,  2293,  2297,  2302,
  2308,  2312,  2316,  2321,  2326,  2330,  2338,  2342,  2350,  2354,
  2357,  2360,  2376,  2379,  2386,  2395,  2404,  2415,  2417,  2420,
  2422,  2426,  2431,  2433,  2442,  2455,  2470,  2471,  2484,  2485,
  2502,  2503,  2522,  2531,  2544,  2559,  2560,  2573,  2574,  2591,
  2592,  2611,  2620,  2633,  2648,  2649,  2662,  2663,  2680,  2681,
  2700,  2702,  2705,  2715,  2723,  2726,  2733,  2743,  2753,  2762,
  2771,  2780,  2787,  2792,  2795,  2798,  2800,  2802,  2804,  2806,
  2808,  2810,  2814,  2817,  2820,  2823,  2827,  2831,  2835,  2839,
  2843,  2847,  2851,  2855,  2859,  2863,  2867,  2871,  2875,  2879,
  2885,  2890,  2895,  2900,  2905,  2910,  2915,  2920,  2925,  2930,
  2935,  2942,  2947,  2952,  2957,  2962,  2967,  2972,  2979,  2986,
  2993,  2998,  3003,  3008,  3013,  3018,  3023,  3028,  3033,  3038,
  3043,  3048,  3055,  3060,  3065,  3070,  3075,  3080,  3085,  3092,
  3099,  3106,  3111,  3113,  3115,  3117,  3119,  3121,  3123,  3125,
  3127,  3132,  3137,  3140,  3146,  3150,  3157,  3162,  3170,  3177,
  3179,  3182,  3185,  3189,  3193,  3205,  3215,  3223,  3231,  3232,
  3236,  3238,  3242,  3243,  3247,  3251,  3253,  3257,  3259,  3261,
  3265,  3270,  3274,  3280,  3285,  3287,  3289,  3291,  3295,  3300,
  3307,  3315,  3317,  3319,  3323,  3327,  3337,  3345,  3347,  3353,
  3357,  3364,  3366,  3370,  3372,  3374,  3381,  3386,  3391,  3396,
  3403,  3410
};

static const short yyrhs[] = {   222,
     0,   220,     0,   227,     0,     1,     6,     0,     3,     0,
   199,     3,     0,     0,   220,   221,     0,   175,     0,   178,
   179,   219,   219,   219,   180,   181,   177,   219,   219,   219,
   177,   219,   219,   219,   177,   219,   219,   219,   182,   183,
     0,   176,     0,     0,   222,   223,     0,   224,     0,   226,
     0,   225,     0,   150,     6,     0,   151,     6,     0,   153,
     6,     0,   152,     6,     0,   154,     6,     0,   155,   209,
   345,   215,     5,   210,     6,     0,   156,   209,   345,   210,
     6,     0,   157,   209,     5,   215,     5,   215,   345,   215,
   345,   215,     5,   215,     5,   215,     5,   210,     6,     0,
     3,     7,   134,   209,     5,   215,   343,   210,     6,     0,
     3,     7,   133,   209,     5,   215,   341,   215,   349,   215,
   340,   215,   340,   215,   340,   215,   349,   215,   349,   215,
   340,   210,     6,     0,     3,     7,   132,   209,     5,   215,
   341,   215,   341,   215,   347,   215,   340,   215,   340,   215,
   340,   215,   340,   215,   349,   215,   349,   215,   349,   215,
   349,   215,   340,   210,     6,     0,     3,     7,   140,   209,
     5,   215,     3,   215,     3,   215,     3,   215,   340,   210,
     6,     0,     3,     7,   144,   209,     5,   215,     3,   215,
   340,   210,     6,     0,     3,     7,   161,   209,     5,   215,
     3,   215,   340,   210,     6,     0,     3,     7,   142,   209,
     5,   215,   200,   215,   200,   215,   341,   215,   340,   210,
     6,     0,     3,     7,   145,   209,     5,   215,   349,   210,
     6,     0,     3,     7,   146,   209,     5,   215,   349,   215,
     3,   215,   340,   210,     6,     0,     3,     7,   141,   209,
     5,   215,     3,   210,     6,     0,     3,     7,   147,   209,
     5,   215,     3,   215,   341,   210,     6,     0,     3,     7,
   149,   209,     5,   215,     3,   215,     3,   215,     3,   210,
     6,     0,     3,     7,   148,   209,     5,   215,   343,   210,
     6,     0,     3,     7,   143,   209,     5,   215,     3,   210,
     6,     0,     3,     7,    44,   209,     5,   215,     3,   215,
     3,   210,     6,     0,     3,     7,   159,   209,     5,   215,
   349,   210,     6,     0,     3,     7,   160,   209,     5,   215,
   349,   215,     3,   210,     6,     0,     3,     7,   158,   209,
     5,   215,     3,   210,     6,     0,     3,     7,   162,   209,
     5,   215,     3,   215,   341,   210,     6,     0,     3,     7,
   163,   209,     5,   215,     3,   215,   341,   215,   341,   210,
     6,     0,     3,     7,   170,   209,     5,   215,     3,   215,
   341,   215,   341,   210,     6,     0,     3,     7,   164,   209,
     5,   215,     3,   215,   341,   210,     6,     0,     3,     7,
   174,   209,     5,   215,     3,   215,   341,   215,   341,   210,
     6,     0,     3,     7,   165,   209,     5,   215,     3,   215,
   349,   215,   349,   215,   340,   215,   340,   210,     6,     0,
     3,     7,   166,   209,     5,   215,   349,   210,     6,     0,
     3,     7,   167,   209,   168,   215,   340,   215,     3,   210,
     6,     0,     3,     7,   169,   209,     5,   215,   349,   215,
   340,   210,     6,     0,     3,     7,   171,   209,     5,   215,
     5,   215,     3,   215,     3,   210,     6,     0,     3,     7,
   172,   209,     5,   215,     5,   215,     3,   210,     6,     0,
     3,     7,   173,   209,     3,   215,     3,   210,     6,     0,
     0,   227,   228,     0,   230,     0,   229,     0,   315,     0,
   316,     0,   317,     0,   320,     0,   321,     0,   322,     0,
   323,     0,   326,     0,   338,     0,   339,     0,   325,     0,
   324,     0,    33,   209,     5,   210,     6,     0,    33,   209,
     5,   215,   351,   210,     6,     0,     4,     5,   216,   231,
   217,     6,     0,     4,     5,     4,   343,   216,   231,   217,
     6,     0,     0,   231,   233,     0,   231,   236,     0,   231,
   239,     0,   231,   242,     0,   231,   245,     0,   231,   248,
     0,   231,   251,     0,   231,   254,     0,   231,   257,     0,
   231,   260,     0,   231,   263,     0,   231,   266,     0,   231,
   269,     0,   231,   272,     0,   231,   275,     0,   231,   278,
     0,   231,   281,     0,   231,   284,     0,   231,   287,     0,
   231,   290,     0,   231,   293,     0,   231,   296,     0,   231,
   299,     0,   231,   302,     0,   231,   305,     0,   231,   308,
     0,   231,   310,     0,   231,   312,     0,   341,     0,   232,
   215,   341,     0,     0,    78,   209,   341,   215,   341,   215,
   341,   210,   234,   216,   232,   217,     6,     0,   341,     0,
   235,   215,   341,     0,     0,    79,   209,   341,   215,   341,
   215,   341,   210,   237,   216,   235,   217,     6,     0,   341,
     0,   238,   215,   341,     0,     0,    80,   209,   341,   215,
   341,   215,   341,   210,   240,   216,   238,   217,     6,     0,
   341,     0,   241,   215,   341,     0,     0,    81,   209,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   210,   243,   216,   241,   217,     6,     0,   341,     0,   244,
   215,   341,     0,     0,    82,   209,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   210,   246,   216,
   244,   217,     6,     0,   341,     0,   247,   215,   341,     0,
     0,    83,   209,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   210,   249,   216,   247,   217,     6,
     0,   341,     0,   250,   215,   341,     0,     0,    84,   209,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   210,   252,   216,
   250,   217,     6,     0,   341,     0,   253,   215,   341,     0,
     0,    85,   209,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   210,   255,   216,   253,   217,     6,     0,   341,     0,   256,
   215,   341,     0,     0,    86,   209,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   210,   258,   216,   256,   217,     6,     0,
   341,     0,   259,   215,   341,     0,     0,    87,   209,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   210,   261,   216,   259,   217,     6,     0,   341,
     0,   262,   215,   341,     0,     0,    88,   209,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   210,   264,   216,   262,   217,     6,     0,   341,     0,
   265,   215,   341,     0,     0,    89,   209,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   210,   267,   216,   265,   217,     6,     0,   341,     0,   268,
   215,   341,     0,     0,    90,   209,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   210,
   270,   216,   268,   217,     6,     0,   341,     0,   271,   215,
   341,     0,     0,    91,   209,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   210,   273,
   216,   271,   217,     6,     0,   341,     0,   274,   215,   341,
     0,     0,    92,   209,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   210,   276,   216,
   274,   217,     6,     0,   341,     0,   277,   215,   341,     0,
     0,    93,   209,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   210,   279,   216,   277,   217,     6,     0,   341,     0,   280,
   215,   341,     0,     0,    94,   209,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   210,   282,   216,   280,   217,     6,     0,
   341,     0,   283,   215,   341,     0,     0,    95,   209,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   210,   285,   216,   283,
   217,     6,     0,   341,     0,   286,   215,   341,     0,     0,
    96,   209,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   210,   288,   216,
   286,   217,     6,     0,   341,     0,   289,   215,   341,     0,
     0,    97,   209,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   210,   291,
   216,   289,   217,     6,     0,   341,     0,   292,   215,   341,
     0,     0,    98,   209,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   210,
   294,   216,   292,   217,     6,     0,   341,     0,   295,   215,
   341,     0,     0,    99,   209,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   210,   297,   216,   295,   217,     6,
     0,   341,     0,   298,   215,   341,     0,     0,   100,   209,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   215,
   341,   215,   341,   215,   341,   215,   341,   215,   341,   210,
   300,   216,   298,   217,     6,     0,   341,     0,   301,   215,
   341,     0,     0,   101,   209,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   215,   341,   210,   303,   216,   301,   217,     6,
     0,   355,     0,   304,   215,   355,     0,     0,   102,   209,
   341,   215,   341,   215,   341,   210,   306,   216,   304,   217,
     6,     0,   355,     0,   307,   215,   355,     0,     0,   103,
   209,   341,   215,   341,   215,   341,   215,   341,   210,   309,
   216,   307,   217,     6,     0,   104,   216,   348,   217,   216,
   348,   217,     6,     0,   341,     0,   311,   215,   341,     0,
   105,   216,   311,   217,     6,     0,     7,     0,   184,     0,
   185,     0,   186,     0,   187,     0,   205,     0,   206,     0,
     4,   313,   341,     6,     0,     4,   211,   341,   212,   313,
   341,     6,     0,     4,   211,   216,   351,   217,   212,   313,
   349,     6,     0,     4,   211,   212,     7,   349,     6,     0,
     4,   314,     6,     0,     4,   211,   341,   212,   314,     6,
     0,     4,   213,     4,     7,   355,     6,     0,     4,   211,
   341,   212,   213,     4,     7,   355,     6,     0,     4,   213,
     4,   313,   341,     6,     0,     4,   211,   341,   212,   213,
     4,   313,   341,     6,     0,     4,   213,     4,   314,     6,
     0,     4,   211,   341,   212,   213,     4,   314,     6,     0,
     4,   213,   114,   213,     4,     7,   352,     6,     0,     4,
   211,   341,   212,   213,   114,   213,     4,     7,   352,     6,
     0,     4,   213,   115,     7,   353,     6,     0,     4,   211,
   341,   212,   213,   115,     7,   353,     6,     0,    61,   209,
     4,   210,   213,     4,     7,   341,     6,     0,    61,   209,
     4,   210,   213,     4,     7,   355,     6,     0,    41,   209,
   341,   210,     7,   343,     6,     0,    57,    41,   209,   341,
   210,     7,   349,     6,     0,    74,    41,   349,     7,   216,
   341,   215,   341,   215,   341,   217,     6,     0,    48,    49,
   349,     7,   341,     6,     0,    44,   209,   341,   210,     7,
   349,     6,     0,    46,   209,   341,   210,     7,   349,     6,
     0,    42,   209,   341,   210,     7,   349,     6,     0,    42,
   209,   341,   210,     7,   349,    52,   343,     6,     0,    43,
   209,   341,   210,     7,   349,     6,     0,    43,   209,   341,
   210,     7,   349,    52,   343,     6,     0,    50,   209,   341,
   210,     7,   216,   341,   215,   341,   215,     5,   215,     5,
   215,     5,   217,     6,     0,   107,   209,   341,   210,     7,
   349,     6,     0,   108,   209,   341,   210,     7,   349,     6,
     0,   109,   209,   341,   210,     7,   349,   113,   349,   110,
   341,     6,     0,    62,    44,   209,   341,   210,     7,   216,
   341,   217,   349,     6,     0,    62,    44,   216,   341,   217,
     7,   216,   341,   217,   349,     6,     0,    44,    69,   209,
   341,   210,     7,   349,     6,     0,    74,    44,   349,     7,
   216,   341,   215,   341,   215,   341,   217,     6,     0,    57,
    44,   209,   341,   210,     7,   349,     6,     0,    52,    45,
   209,   341,   210,     7,   349,     6,     0,    53,    45,   209,
   341,   210,     7,   349,     6,     0,   125,    45,   209,   341,
   210,     7,   216,   341,   215,   349,   217,     6,     0,    62,
    45,   209,   341,   210,     7,   216,   341,   215,   341,   217,
   349,   349,     6,     0,    62,    45,   216,   341,   217,     7,
   216,   341,   215,   341,   217,   349,   349,     6,     0,    54,
    45,   209,   341,   210,     7,   209,   341,   215,   341,   210,
   349,   349,     6,     0,   109,    45,   111,   112,   209,   341,
   210,     7,   347,   113,   216,   349,   215,   349,   217,   110,
   216,   341,   215,   341,   217,     6,     0,   109,    45,   209,
   341,   210,     7,   347,   113,   216,   349,   215,   349,   217,
   110,   216,   341,   215,   341,   217,     6,     0,    45,    69,
   209,   341,   210,     7,   349,     6,     0,    57,    45,   209,
   341,   210,     7,   349,     6,     0,    56,    47,   209,   341,
   210,     7,   349,     6,     0,    47,   209,   341,   210,     7,
   349,     6,     0,    57,    47,   209,   341,   210,     7,   349,
     6,     0,    64,   343,   216,   318,   217,     0,    63,   216,
   343,   215,   343,   215,   341,   217,   216,   318,   217,     0,
    65,   343,   216,   318,   217,     0,    66,   216,   343,   215,
   341,   217,   216,   318,   217,     0,   320,     0,   319,     0,
   317,     0,     0,   319,   316,     0,   319,    41,   216,   351,
   217,     6,     0,   319,    44,   216,   351,   217,     6,     0,
   319,    45,   216,   351,   217,     6,     0,   319,    47,   216,
   351,   217,     6,     0,    68,   216,   319,   217,     0,    68,
     4,   211,   341,   212,     6,     0,    76,     4,   211,   341,
   212,     6,     0,    77,     4,   211,   341,   212,     6,     0,
    71,   216,   319,   217,     0,    71,     4,   211,   341,   212,
     6,     0,    71,     4,     6,     0,    71,     4,     4,     6,
     0,   114,   352,   216,   319,   217,     0,   126,   355,     6,
     0,   127,   355,     6,     0,   126,   216,   319,   217,     0,
   127,   216,   319,   217,     0,     4,   355,     6,     0,     4,
     4,   211,   341,   212,   355,     6,     0,     4,   341,     6,
     0,    61,   209,     4,   210,   213,     4,     6,     0,   106,
     4,     6,     0,   121,     6,     0,    38,     6,     0,    38,
   216,   341,   215,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   217,     6,     0,    39,     6,     0,   116,   209,
   341,     8,   341,   210,     0,   116,   209,   341,     8,   341,
     8,   341,   210,     0,   116,     4,   117,   216,   341,     8,
   341,   217,     0,   116,     4,   117,   216,   341,     8,   341,
     8,   341,   217,     0,   118,     0,   124,     4,     0,   122,
     0,   123,     4,     6,     0,   119,   209,   341,   210,     0,
   120,     0,    67,    41,   216,   341,   215,   343,   217,     6,
     0,    67,    41,   216,   341,   215,   343,   215,   343,   215,
   341,   217,     6,     0,    67,    41,   216,   341,   215,   343,
   215,   343,   215,   343,   215,   341,   217,     6,     0,     0,
    67,    41,   216,   341,   215,   343,   217,   327,   216,   336,
   217,     6,     0,     0,    67,    41,   216,   341,   215,   343,
   215,   343,   215,   341,   217,   328,   216,   336,   217,     6,
     0,     0,    67,    41,   216,   341,   215,   343,   215,   343,
   215,   343,   215,   341,   217,   329,   216,   336,   217,     6,
     0,    67,    44,   216,   341,   215,   343,   217,     6,     0,
    67,    44,   216,   341,   215,   343,   215,   343,   215,   341,
   217,     6,     0,    67,    44,   216,   341,   215,   343,   215,
   343,   215,   343,   215,   341,   217,     6,     0,     0,    67,
    44,   216,   341,   215,   343,   217,   330,   216,   336,   217,
     6,     0,     0,    67,    44,   216,   341,   215,   343,   215,
   343,   215,   341,   217,   331,   216,   336,   217,     6,     0,
     0,    67,    44,   216,   341,   215,   343,   215,   343,   215,
   343,   215,   341,   217,   332,   216,   336,   217,     6,     0,
    67,    45,   216,   341,   215,   343,   217,     6,     0,    67,
    45,   216,   341,   215,   343,   215,   343,   215,   341,   217,
     6,     0,    67,    45,   216,   341,   215,   343,   215,   343,
   215,   343,   215,   341,   217,     6,     0,     0,    67,    45,
   216,   341,   215,   343,   217,   333,   216,   336,   217,     6,
     0,     0,    67,    45,   216,   341,   215,   343,   215,   343,
   215,   341,   217,   334,   216,   336,   217,     6,     0,     0,
    67,    45,   216,   341,   215,   343,   215,   343,   215,   343,
   215,   341,   217,   335,   216,   336,   217,     6,     0,   337,
     0,   336,   337,     0,    75,   216,   349,   215,   349,   215,
   349,   217,     6,     0,    75,   216,   349,   215,   349,   217,
     6,     0,    70,     6,     0,    55,    44,   349,     7,   341,
     6,     0,    55,    44,   349,     7,   341,    58,    60,   341,
     6,     0,    55,    44,   349,     7,   341,    58,    59,   341,
     6,     0,    55,    45,   216,   341,   217,     7,   349,     6,
     0,    51,    45,   216,   341,   217,     7,   349,     6,     0,
    55,    47,   216,   341,   217,     7,   349,     6,     0,    70,
    45,   349,     7,   341,     6,     0,    70,    45,   349,     6,
     0,    72,     6,     0,    73,     6,     0,   135,     0,   136,
     0,   137,     0,   138,     0,   139,     0,   342,     0,   209,
   341,   210,     0,   199,   341,     0,   198,   341,     0,   204,
   341,     0,   341,   199,   341,     0,   341,   198,   341,     0,
   341,   200,   341,     0,   341,   201,   341,     0,   341,   202,
   341,     0,   341,   208,   341,     0,   341,   194,   341,     0,
   341,   196,   341,     0,   341,   195,   341,     0,   341,   197,
   341,     0,   341,   191,   341,     0,   341,   192,   341,     0,
   341,   190,   341,     0,   341,   189,   341,     0,   341,   188,
   341,     8,   341,     0,    12,   209,   341,   210,     0,    13,
   209,   341,   210,     0,    14,   209,   341,   210,     0,    15,
   209,   341,   210,     0,    16,   209,   341,   210,     0,    17,
   209,   341,   210,     0,    18,   209,   341,   210,     0,    19,
   209,   341,   210,     0,    20,   209,   341,   210,     0,    22,
   209,   341,   210,     0,    23,   209,   341,   215,   341,   210,
     0,    24,   209,   341,   210,     0,    25,   209,   341,   210,
     0,    26,   209,   341,   210,     0,    27,   209,   341,   210,
     0,    28,   209,   341,   210,     0,    29,   209,   341,   210,
     0,    30,   209,   341,   215,   341,   210,     0,    31,   209,
   341,   215,   341,   210,     0,    32,   209,   341,   215,   341,
   210,     0,    21,   209,   341,   210,     0,    12,   211,   341,
   212,     0,    13,   211,   341,   212,     0,    14,   211,   341,
   212,     0,    15,   211,   341,   212,     0,    16,   211,   341,
   212,     0,    17,   211,   341,   212,     0,    18,   211,   341,
   212,     0,    19,   211,   341,   212,     0,    20,   211,   341,
   212,     0,    22,   211,   341,   212,     0,    23,   211,   341,
   215,   341,   212,     0,    24,   211,   341,   212,     0,    25,
   211,   341,   212,     0,    26,   211,   341,   212,     0,    27,
   211,   341,   212,     0,    28,   211,   341,   212,     0,    29,
   211,   341,   212,     0,    30,   211,   341,   215,   341,   212,
     0,    31,   211,   341,   215,   341,   212,     0,    32,   211,
   341,   215,   341,   212,     0,    21,   211,   341,   212,     0,
     3,     0,     9,     0,    10,     0,    11,     0,   129,     0,
   130,     0,   131,     0,     4,     0,     4,   211,   341,   212,
     0,   214,     4,   211,   212,     0,     4,   314,     0,     4,
   211,   341,   212,   314,     0,     4,   213,     4,     0,     4,
   211,   341,   212,   213,     4,     0,     4,   213,     4,   314,
     0,     4,   211,   341,   212,   213,     4,   314,     0,   128,
   209,     5,   215,   341,   210,     0,   344,     0,   199,   343,
     0,   198,   343,     0,   343,   199,   343,     0,   343,   198,
   343,     0,   216,   341,   215,   341,   215,   341,   215,   341,
   215,   341,   217,     0,   216,   341,   215,   341,   215,   341,
   215,   341,   217,     0,   216,   341,   215,   341,   215,   341,
   217,     0,   209,   341,   215,   341,   215,   341,   210,     0,
     0,   209,   346,   210,     0,     5,     0,   346,   215,     5,
     0,     0,   216,   348,   217,     0,   209,   348,   210,     0,
   349,     0,   348,   215,   349,     0,   341,     0,   350,     0,
   216,   351,   217,     0,   199,   216,   351,   217,     0,   341,
     8,   341,     0,   341,     8,   341,     8,   341,     0,    41,
   216,   341,   217,     0,   317,     0,   320,     0,   326,     0,
     4,   211,   212,     0,   199,     4,   211,   212,     0,     4,
   211,   216,   351,   217,   212,     0,   199,     4,   211,   216,
   351,   217,   212,     0,   341,     0,   350,     0,   351,   215,
   341,     0,   351,   215,   350,     0,   216,   341,   215,   341,
   215,   341,   215,   341,   217,     0,   216,   341,   215,   341,
   215,   341,   217,     0,     4,     0,     4,   213,   114,   213,
     4,     0,   216,   354,   217,     0,     4,   211,   341,   212,
   213,   115,     0,   352,     0,   354,   215,   352,     0,     5,
     0,    40,     0,    35,   209,   355,   215,   355,   210,     0,
    36,   209,   355,   210,     0,    37,   209,   355,   210,     0,
    34,   209,   355,   210,     0,    34,   209,   355,   215,   351,
   210,     0,    34,   209,     4,   213,     4,   210,     0,    34,
   209,     4,   211,   341,   212,   213,     4,   210,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   163,   165,   166,   167,   172,   174,   177,   179,   182,   189,
   202,   216,   218,   221,   223,   224,   227,   233,   238,   239,
   240,   243,   247,   250,   256,   261,   267,   275,   280,   284,
   290,   295,   299,   304,   308,   311,   316,   320,   324,   328,
   333,   337,   340,   344,   348,   352,   356,   360,   364,   367,
   371,   374,   378,   381,   388,   390,   393,   395,   396,   397,
   398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
   410,   416,   433,   441,   450,   458,   459,   460,   461,   462,
   463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
   473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
   483,   484,   485,   488,   491,   495,   501,   507,   510,   514,
   521,   528,   531,   535,   542,   549,   552,   556,   565,   572,
   575,   579,   588,   595,   598,   602,   611,   618,   621,   625,
   638,   645,   648,   652,   665,   672,   675,   679,   692,   699,
   702,   706,   720,   727,   730,   734,   748,   755,   758,   762,
   776,   783,   786,   790,   804,   811,   814,   818,   832,   839,
   842,   846,   860,   867,   870,   874,   898,   905,   908,   912,
   936,   943,   946,   950,   974,   981,   984,   988,  1007,  1014,
  1017,  1021,  1040,  1047,  1050,  1054,  1073,  1080,  1083,  1087,
  1105,  1112,  1115,  1119,  1137,  1144,  1147,  1151,  1169,  1176,
  1182,  1189,  1197,  1203,  1209,  1216,  1224,  1230,  1238,  1241,
  1245,  1253,  1255,  1256,  1257,  1258,  1261,  1263,  1266,  1301,
  1340,  1394,  1411,  1422,  1441,  1455,  1472,  1498,  1525,  1539,
  1556,  1570,  1587,  1607,  1630,  1640,  1655,  1675,  1691,  1710,
  1729,  1747,  1765,  1783,  1809,  1827,  1853,  1873,  1897,  1921,
  1947,  1964,  1980,  1997,  2015,  2034,  2053,  2092,  2117,  2137,
  2156,  2173,  2192,  2211,  2227,  2247,  2264,  2281,  2301,  2307,
  2312,  2317,  2324,  2326,  2327,  2330,  2335,  2339,  2355,  2371,
  2387,  2407,  2422,  2428,  2434,  2445,  2455,  2465,  2475,  2493,
  2507,  2516,  2522,  2533,  2546,  2591,  2606,  2622,  2632,  2643,
  2647,  2651,  2655,  2666,  2683,  2699,  2725,  2752,  2784,  2791,
  2796,  2802,  2806,  2814,  2833,  2849,  2865,  2870,  2886,  2891,
  2907,  2912,  2930,  2953,  2976,  2999,  3004,  3027,  3032,  3055,
  3060,  3086,  3109,  3132,  3155,  3160,  3183,  3189,  3212,  3218,
  3243,  3247,  3252,  3279,  3303,  3311,  3330,  3348,  3366,  3393,
  3419,  3445,  3459,  3477,  3482,  3491,  3493,  3494,  3495,  3496,
  3499,  3501,  3502,  3503,  3504,  3505,  3506,  3507,  3508,  3515,
  3516,  3517,  3518,  3519,  3520,  3521,  3522,  3523,  3524,  3525,
  3526,  3527,  3528,  3529,  3530,  3531,  3532,  3533,  3534,  3535,
  3536,  3537,  3538,  3539,  3540,  3541,  3542,  3543,  3544,  3545,
  3546,  3548,  3549,  3550,  3551,  3552,  3553,  3554,  3555,  3556,
  3557,  3558,  3559,  3560,  3561,  3562,  3563,  3564,  3565,  3566,
  3567,  3568,  3573,  3578,  3579,  3580,  3581,  3582,  3583,  3587,
  3600,  3620,  3634,  3647,  3670,  3688,  3706,  3724,  3742,  3749,
  3754,  3758,  3762,  3766,  3772,  3777,  3781,  3785,  3791,  3795,
  3800,  3804,  3809,  3813,  3817,  3823,  3829,  3836,  3842,  3846,
  3850,  3861,  3868,  3879,  3899,  3909,  3919,  3931,  3948,  3967,
  3991,  4019,  4025,  4029,  4033,  4045,  4050,  4062,  4069,  4090,
  4095,  4109,  4115,  4121,  4126,  4134,  4142,  4156,  4170,  4174,
  4193,  4215
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline",
"tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled",
"tTriangulation","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tPlugin","tDiscrete","tRotate","tTranslate","tSymmetry","tDilate","tExtrude",
"tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor",
"tLayers","tAlias","tAliasWithOptions","tScalarPoint","tVectorPoint","tTensorPoint",
"tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tInterpolationScheme",
"tTime","tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds",
"tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit",
"tReturn","tCall","tFunction","tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION",
"tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ScalarPointValues",
"ScalarPoint","@1","VectorPointValues","VectorPoint","@2","TensorPointValues",
"TensorPoint","@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine",
"@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","InterpolationMatrix","TimeValues","Time","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Colorify","Visibility","Command","Loop","Extrude","@27","@28","@29",
"@30","@31","@32","@33","@34","@35","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   218,   218,   218,   218,   219,   219,   220,   220,   221,   221,
   221,   222,   222,   223,   223,   223,   224,   224,   224,   224,
   224,   225,   225,   225,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   227,   227,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   229,   229,   230,   230,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
   231,   231,   231,   232,   232,   234,   233,   235,   235,   237,
   236,   238,   238,   240,   239,   241,   241,   243,   242,   244,
   244,   246,   245,   247,   247,   249,   248,   250,   250,   252,
   251,   253,   253,   255,   254,   256,   256,   258,   257,   259,
   259,   261,   260,   262,   262,   264,   263,   265,   265,   267,
   266,   268,   268,   270,   269,   271,   271,   273,   272,   274,
   274,   276,   275,   277,   277,   279,   278,   280,   280,   282,
   281,   283,   283,   285,   284,   286,   286,   288,   287,   289,
   289,   291,   290,   292,   292,   294,   293,   295,   295,   297,
   296,   298,   298,   300,   299,   301,   301,   303,   302,   304,
   304,   306,   305,   307,   307,   309,   308,   310,   311,   311,
   312,   313,   313,   313,   313,   313,   314,   314,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   316,   316,   316,   316,
   316,   316,   316,   316,   316,   316,   316,   316,   316,   316,
   316,   316,   316,   316,   316,   316,   316,   316,   316,   316,
   316,   316,   316,   316,   316,   316,   316,   316,   317,   317,
   317,   317,   318,   318,   318,   319,   319,   319,   319,   319,
   319,   320,   320,   320,   320,   321,   321,   321,   321,   322,
   323,   323,   323,   323,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   326,   326,   326,   327,   326,   328,   326,
   329,   326,   326,   326,   326,   330,   326,   331,   326,   332,
   326,   326,   326,   326,   333,   326,   334,   326,   335,   326,
   336,   336,   337,   337,   337,   338,   338,   338,   338,   338,
   338,   338,   338,   339,   339,   340,   340,   340,   340,   340,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   342,   342,   342,   342,   342,   342,   342,   342,
   342,   342,   342,   342,   342,   342,   342,   342,   342,   343,
   343,   343,   343,   343,   344,   344,   344,   344,   345,   345,
   346,   346,   347,   347,   347,   348,   348,   349,   349,   349,
   349,   350,   350,   350,   350,   350,   350,   350,   350,   350,
   350,   351,   351,   351,   351,   352,   352,   352,   352,   353,
   353,   354,   354,   355,   355,   355,   355,   355,   355,   355,
   355,   355
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
    11,    11,     8,    12,     8,     8,     8,    12,    14,    14,
    14,    22,    20,     8,     8,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     6,     6,     6,
     6,     4,     6,     6,     6,     4,     6,     3,     4,     5,
     3,     3,     4,     4,     3,     7,     3,     7,     3,     2,
     2,    15,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     8,    12,    14,     0,    12,     0,    16,
     0,    18,     8,    12,    14,     0,    12,     0,    16,     0,
    18,     8,    12,    14,     0,    12,     0,    16,     0,    18,
     1,     2,     9,     7,     2,     6,     9,     9,     8,     8,
     8,     6,     4,     2,     2,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     4,     4,     4,     6,     6,
     6,     4,     1,     1,     1,     1,     1,     1,     1,     1,
     4,     4,     2,     5,     3,     6,     4,     7,     6,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     1,     1,     3,
     4,     3,     5,     4,     1,     1,     1,     3,     4,     6,
     7,     1,     1,     3,     3,     9,     7,     1,     5,     3,
     6,     1,     3,     1,     1,     6,     4,     4,     4,     6,
     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   308,     0,   313,     0,   310,     0,     0,
     0,     0,     0,    56,    58,    57,    59,    60,    61,    62,
    63,    64,    65,    70,    69,    66,    67,    68,     0,     0,
    17,    18,    20,    19,    21,   449,   449,     0,   423,   430,
   484,   212,   424,   425,   426,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   485,     0,   427,   428,   429,   213,   214,   215,   216,     0,
     0,     0,   217,   218,     0,     0,     0,     0,     0,     0,
     0,   361,     0,     0,   301,     0,   303,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   440,     0,
     0,     0,     0,     0,     0,   276,     0,     0,   276,   354,
   355,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   478,     0,     0,     0,     0,     0,   300,     0,   309,     0,
   484,   276,     0,   276,     0,     5,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   433,     0,    75,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   430,   364,   363,   365,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   223,   297,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   430,     0,     0,     0,   465,
   466,   467,   458,     0,   459,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   442,   441,     0,     0,     0,     0,
   276,   276,     0,     0,     0,     0,     0,     0,     0,     0,
   288,     0,     0,     0,     0,     0,     0,   299,     0,     0,
     0,     0,     0,     0,     0,   276,     0,     0,     0,   311,
     0,     0,   291,     0,   292,     6,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   451,     0,     0,
     0,     0,     0,   435,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   362,     0,     0,   472,   473,
     0,     0,   212,     0,     0,     0,     0,     0,   219,     0,
   379,   378,   376,   377,   372,   374,   373,   375,   367,   366,
   368,   369,   370,   371,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   430,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   444,   443,   275,     0,   274,   273,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
   277,   353,     0,   289,     0,   286,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   312,     0,   293,   294,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   450,     0,     0,    23,     0,
   431,   437,    75,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   381,   402,   382,   403,   383,   404,   384,   405,   385,   406,
   386,   407,   387,   408,   388,   409,   389,   410,   401,   422,
   390,   411,     0,     0,   392,   413,   393,   414,   394,   415,
   395,   416,   396,   417,   397,   418,     0,     0,     0,     0,
     0,     0,     0,     0,   489,     0,     0,   487,   488,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   229,
     0,     0,     0,     0,   432,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   468,     0,     0,
     0,     0,   460,   462,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   269,   271,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   290,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   452,     0,   449,     0,   434,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   431,   222,   474,   475,     0,     0,
     0,     0,     0,   224,   225,   227,     0,     0,   482,     0,
   233,   380,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   464,   469,     0,   461,     0,   240,     0,
     0,     0,     0,     0,   346,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   283,     0,     0,     0,     0,
   352,   287,     0,     0,   284,   285,     0,     0,     0,   453,
     0,   479,     0,     0,     0,   304,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   356,   357,   358,   359,   360,     0,     0,     0,     0,
     0,     0,     0,    22,     0,   436,   296,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   456,     0,   209,   391,   412,
   398,   419,   399,   420,   400,   421,     0,   491,   490,   486,
   439,     0,   212,     0,     0,     0,     0,   220,     0,     0,
     0,   480,    72,     0,   237,   243,     0,   245,     0,     0,
   241,     0,   242,   267,     0,     0,   463,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   298,     0,     0,     0,     0,     0,     0,     0,     0,
   276,     0,   317,     0,   326,     0,   335,     0,     0,     0,
     0,     0,     0,   248,   249,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   449,   438,    74,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   230,     0,     0,   231,     0,   483,     0,     0,
     0,   253,   264,   470,     0,     0,   350,   256,   257,     0,
     0,     0,   349,   351,   266,   238,   255,   265,   268,     0,
     0,     0,     0,     0,     0,     0,   448,     0,   447,     0,
     0,   314,     0,     0,   323,     0,     0,   332,     0,   278,
   279,   280,   281,     0,     0,   453,     0,     0,     0,     0,
     0,   477,     0,   306,   305,     0,     0,     0,     0,     0,
    25,     0,    34,     0,    38,     0,    32,     0,     0,    37,
     0,    42,    40,     0,     0,     0,     0,     0,     0,    49,
     0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   457,     0,   210,   211,     0,   221,
   226,   228,     0,   234,     0,     0,   244,   246,   471,     0,
     0,   348,   347,   235,   236,     0,     0,     0,     0,   276,
     0,   272,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   455,   454,     0,     0,     0,     0,     0,     0,     0,
   453,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   492,     0,
   481,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   446,     0,     0,     0,     0,     0,     0,     0,     0,   341,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   476,   307,     0,     0,    39,     0,     0,     0,     0,
    29,     0,    35,     0,    41,    30,    43,     0,    46,     0,
    50,    51,     0,     0,    53,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   232,     0,     0,     0,   251,   252,
     0,     0,   270,     0,     0,   319,     0,   345,     0,     0,
   342,   328,     0,     0,   337,     0,     0,     0,     0,     0,
     0,   250,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   106,   110,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   202,     0,   208,     0,     0,     0,     0,     0,   445,   315,
     0,     0,     0,   318,   324,     0,     0,   327,   333,     0,
     0,   336,   239,   254,     0,     0,   258,     0,     0,     0,
     0,     0,    33,    36,    44,     0,    45,    52,    47,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   321,     0,     0,   330,     0,   339,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   206,     0,     0,   261,   259,   260,     0,   316,
     0,     0,     0,   325,     0,     0,   334,     0,     0,     0,
     0,     0,     0,    28,    31,     0,     0,     0,   104,     0,
   108,     0,   112,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   200,     0,   302,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   320,     0,     0,   344,   329,
     0,   338,     0,     0,     0,     0,     0,     0,    48,    24,
   105,   107,   109,   111,   113,   115,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   201,   203,     0,
   204,   247,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   118,   122,   126,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   322,   343,   331,   340,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   205,   207,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   263,    10,     0,     0,     0,   116,     0,
   120,     0,   124,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
    26,   117,   119,   121,   123,   125,   127,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   130,   134,   138,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   128,     0,   132,     0,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   129,   131,   133,
   135,   137,   139,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   142,
   146,   150,   154,   158,   162,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   140,     0,   144,     0,
   148,     0,   152,     0,   156,     0,   160,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   141,   143,   145,
   147,   149,   151,   153,   155,   157,   159,   161,   163,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   190,   194,   198,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   188,     0,   192,     0,   196,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   189,   191,   193,   195,   197,
   199,     0,     0,     0,   178,   182,   186,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   176,     0,   180,     0,   184,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   177,   179,   181,   183,   185,   187,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   166,   170,   174,     0,     0,     0,
     0,     0,     0,     0,   164,     0,   168,     0,   172,     0,
     0,     0,     0,     0,     0,   165,   167,   169,   171,   173,
   175,     0,     0,     0
};

static const short yydefgoto[] = {  2432,
   228,     2,     9,     3,    19,    20,    21,    22,     4,    74,
    75,    76,   466,  1748,   693,  1651,  1750,   694,  1652,  1752,
   695,  1653,  1968,   696,  1914,  1970,   697,  1915,  1972,   698,
  1916,  2104,   699,  2066,  2106,   700,  2067,  2108,   701,  2068,
  2216,   702,  2186,  2218,   703,  2187,  2220,   704,  2188,  2222,
   705,  2189,  2224,   706,  2190,  2226,   707,  2191,  2414,   708,
  2408,  2416,   709,  2409,  2418,   710,  2410,  2363,   711,  2351,
  2365,   712,  2352,  2367,   713,  2353,  2312,   714,  2294,  2314,
   715,  2295,  2316,   716,  2296,  1775,   717,  1675,  1870,   718,
  1777,   719,  1087,   720,   149,   265,    77,   601,   360,   587,
   588,   361,    81,    82,    83,    84,    85,   362,  1283,  1621,
  1731,  1286,  1626,  1735,  1289,  1630,  1738,  1479,  1480,    87,
    88,  1047,   363,   152,   385,   189,   260,   459,  1169,  1085,
  1086,   365,   521,   213,   784,   950,   153
};

static const short yypact[] = {  3196,
    30,   165,    26,  3498,-32768,-32768,-32768,  -132,-32768,    59,
    70,    82,    95,   104,   143,  -130,   -39,    80,-32768,-32768,
-32768,-32768,  2711,    86,     9,   203,   114,   125,   173,   -38,
   150,   208,   215,   172,   302,   259,   297,   442,   474,   449,
   484,   481,   337,   122,   342,  -148,  -148,   347,   411,     7,
   529,     8,   573,   581,    83,   596,   597,   603,   381,   408,
   -15,    10,    22,-32768,   479,-32768,   690,-32768,   737,   741,
   669,    23,    72,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    21,  3334,
-32768,-32768,-32768,-32768,-32768,   570,   570,   757,-32768,   307,
    12,-32768,-32768,-32768,-32768,   -95,   -71,   -21,   291,   332,
   333,   360,   361,   377,   384,   416,   417,   423,   424,   467,
   468,   478,   482,   483,   486,   490,   576,   589,   600,   601,
-32768,   606,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1698,
  1698,  1698,-32768,-32768,  1698,   627,    38,   812,  1698,   759,
   592,-32768,   818,   824,-32768,  1698,-32768,  1698,  1698,  1698,
   624,  1698,   628,  1698,  1698,  2426,  1698,   616,   633,   644,
   687,  2426,   711,   712,   720,   721,   723,   724,   726,   932,
  -138,  -135,  -148,  -148,  -148,  1698,  1698,  -105,-32768,   -96,
  -148,   722,   725,   728,   729,-32768,  2426,    19,-32768,-32768,
-32768,  2426,  2426,   731,   735,   931,  1698,  1698,   -77,  1698,
   751,  1698,   732,   837,  1698,  1698,-32768,   964,-32768,   756,
-32768,-32768,   965,-32768,   966,-32768,   970,    21,   765,   771,
   784,   785,   788,   789,   799,   801,   808,   809,   811,   813,
   814,   815,   816,   817,   819,   820,   821,   822,   823,   826,
   827,   844,   845,   847,   851,   852,   853,   854,   991,   843,
   855,   856,  1698,  1023,-32768,  -148,-32768,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,    50,
    94,    94,    94,  1064,   324,   862,   862,   862,  3225,  1065,
  2923, 11012,    11,   860,  1068,   865,   710,-32768,-32768,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,-32768,     0,  3167, 11762, 11785, 11808,
  1698, 11831,  1698, 11854, 11877,   351,   861,  2503,  2923,-32768,
-32768,-32768,   787,  1071,-32768, 11900,  1698,  1698,  1698,  1698,
  1072,  1698,  1698,  1698,  1698,  1698,  1698,  1698,   870,  1698,
  1698,  1698,  1698,   -94,-32768,-32768,  3395,  4038,  -148,  -148,
   440,   440,   -24,  1698,  1698,  1698,  1698,   959,   196,  1076,
-32768,  1698,  2553,  1083,  1095,  1698,  1698,-32768, 11923, 11946,
   971,  1698, 11969,   987,  4060,-32768,   887,  1808, 11992,-32768,
  1698,  2764,-32768,  3038,-32768,-32768,    21,  1099,  1101,  1102,
  1103,  1107,  1108,  1110,  1111,  1112,  1113,  1114,  1120,  1121,
  1122,  1123,  1124,  1125,  1126,  1127,  1128,  1129,  1130,  1131,
   969,  1133,  1136,  1137,  1138,  1141,  1140,-32768,    87,  1142,
  1143,  1145, 11037,   161,   140,  3307, 12015, 11062, 12038, 11087,
 12061, 11112, 12084, 11137, 12107, 11162, 12130, 11187, 12153, 11212,
 12176, 11237, 12199, 11262, 12222, 11287, 12245, 11312,  4082,  4104,
 12268, 11337, 12291, 11362, 12314, 11387, 12337, 11412, 12360, 11437,
 12383, 11462,  4126,  4148,  4170,  4192,  4214,  4236,   489,   153,
   933,   936,   942,   941,  1698,-32768,  2426,  3013,   787,-32768,
   488,   201,    94,  1698,  1151,  1154,    13,   947,-32768,  1892,
   249,   278,   353,   353,   260,   260,   260,   260,   365,   365,
   862,   862,   862,   862,  1155,  2923,  1698,  1153,  1156,  1158,
 12406,  1159, 12429,  1160,  1161,  1314,  1698,   378,  2923,   491,
  1698,  1698,  1162,  3091, 12452, 12475, 12498,  1698,  3438,  3462,
 12521, 12544, 12567, 12590, 12613,   949, 12636,  3486, 12659,  3510,
  -148,  1698,  1698,-32768,-32768,-32768,   953,  3473,-32768,   958,
  1698,  4258,  4280,  4302, 11487,  -118,   -48,   -17,   -47,-32768,
-32768,-32768,  1698,-32768, 11512,-32768,   961,   963, 11537, 11562,
  1173,  1174,   974, 12682,  1177,   972,  1698,  3061,  1698,  1698,
-32768, 12705,-32768,-32768,  1032,   998,  1000,  1001,  1002,  1003,
  1004,  1005,  1006,  1007,  1008,  1009,  1010,  1012,  1014,  1015,
  1016,  1017,  1024,  1034,  1035,  1036,  1037,  1038,  1041,  1042,
  1043,  1044,  1045,  1047,  1048,-32768,  1256,  1054,-32768,  1050,
   120,-32768,-32768,  1057,  1058,  1063,  1066,  1070,  1078,  1090,
  1091,  1092,  1096,  1098,  1100,  1104,  1105,  1106,  1139,  1144,
  1146,  1147,  1148,  1150,  1152,  1164,  1166,  1169,  1170,  1061,
  1087,  1267,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1698,  1698,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1270,-32768,  2923,    94,-32768,-32768,  1698,
 11587,  1275,  2923,  1109,    44,  1698,  1298,  1302,   761,-32768,
  1303,  1149,    10,  1305,-32768,  1698,-32768,   198,  4324,  -148,
  2426,  2426,  1309,  2426,  1312,  2426,  2426,-32768,  2923,  3534,
  1608,   494,-32768,  1937,   897,  1134,  1313,  1315,  1340,  1342,
   660,  1344,  1345,  1347,  1355,  1356,  1357,  1360,  1308,  1361,
  1362,  1364,  1373,   133,  4346,  4368,-32768,-32768,  3558,  -148,
  -148,  -148,  1375,  2923,  2923,  2923,  2923,  1046,  1377,  1698,
  1698,  1378,  1379,  2426,  2426,  1698,  1380,  2426,  1382,  4390,
-32768,  2005,   414,  1381,  1208,  1387,  1698,  1698,  -148,  1390,
  1392,  1196,  1394,  1395,  2426,  2426,  1397,  -148,  1398,  1399,
  2426,  2426,  1400,  1402,  1403,  1405,  1432,  2426,   547,  2426,
  1433,  1435,  1441,  1434,  1445,-32768,  1446,   570,  1454,-32768,
  1462,  3360,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  2426,  1698,
-32768, 12728, 11612, 12751, 11637, 12774, 11662, 12797, 11687, 11712,
  1228,   218,  1259, 12820,   164,-32768,   787,-32768,    20,   225,
  1257,  1464,  1094,-32768,-32768,-32768,    10,  1698,-32768,   495,
-32768,  1407,  1466,  1698,    35,    31,    40,  2426,  1468,  2426,
  1469,  1470,   498,-32768,-32768,  2923,-32768,  1698,-32768,  1698,
  2426,  2426,  2426,  1268,-32768,   340,  2426,  2426,  2426,  2426,
  2426,  2426,  2426,   430,  1262,  1263,  1269,  1279,  1698,  1698,
  1698,  1280,  -102,   163,   217,-32768,   502,   507,   508,   511,
-32768,-32768,  4412,  4434,-32768,-32768,  1491,  1492, 12843,   -44,
  1386,-32768,  1698,  1698,  1698,-32768,  1285,  1325,  1288,  4456,
  4478,   192,  1289,  1296,  1293,  1297,  1294,  1300,  1299,  1301,
   299,  1304,  1307,  1310,  1306,  1316,  1317,  1318,  1320,  1321,
  1319,-32768,-32768,-32768,-32768,-32768,  1322,  1323,  1324,  1326,
  1327,  1334,  1330,-32768,  1331,   161,-32768,  1505,  4500,  4522,
  4544,  4566,  4588,  4610,  4632,  4654,  4676,  4698,  4720,  4742,
  4764,  4786,  4808,  4830,  4852,  4874,  4896,  4918,  4940,  4962,
  4984,  5006,  5028,  5050,   512,-32768,   515,  1407,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1311,-32768,-32768,-32768,
-32768,  2426,    94,  1698,  1509,  1518,    13,-32768,  1519, 11737,
    10,-32768,-32768,  5072,-32768,-32768,  -148,-32768,  -148,  1521,
-32768,  1541,-32768,-32768,  1336,   516,  1407,  5094,  1543,  1544,
  1545,  1698,  1698,  1698,  1546,  1547,  1548,  1550,  1553,  1554,
  1555,-32768,  2763,  1698,  1698,  1698,  1698,  3582, 12866,  2280,
   440,  -148,  1556,  -148,  1557,  -148,  1558,  1559,  1560,  1582,
  1587,  1698,  1698,-32768,-32768,  1593,  2426,  2426,  1500,  2426,
  2455,   473, 12889,  1698,    21,  1611,  1698,  2426,  1636,  1640,
  1638,  1448,  1639,   547,  1643,  1647,  1698,  1645,  1649,  1650,
  1652,  1656,   547,  1698,  1698,  1698,  2426,  1654,  1658,   547,
  1698,  1659,  1660,  1661,  1698,   570,-32768,-32768,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  2426,  1439,  1698,  1662,  1665,  1664,
  1666,  1265,-32768,  1657,  1667,-32768,  1452,-32768,  1698,    37,
    39,-32768,-32768,-32768,  1459,  1698,-32768,-32768,-32768,  5116,
  1292,  1648,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1693,
  1668,  3606,  3630,  5138,  5160,  1450,-32768,  1698,-32768,  1483,
   166,-32768,  1488,   177,-32768,  1489,   206,-32768,  1490,-32768,
-32768,-32768,-32768,  5182,  5204,   -44,   300,   527,  1515,  1622,
  1698,-32768,  1698,-32768,-32768,  5226,    21,  1523,  5248,  1520,
-32768,  1525,-32768,  1526,-32768,  1524,-32768,  1527, 12912,-32768,
  1528,-32768,-32768,  1534,  1535, 12935,  5270, 12958,  1532,-32768,
  1538,  1539,  5292,  1536,  1540,-32768,  5314,  1537,  5336,  5358,
  5380,  5402,  5424,  5446,  5468,  5490,  5512,  5534,  5556,  5578,
  5600,  5622,  5644,  5666,  5688,  5710,  5732,  5754,  5776,  5798,
  5820,  5842,  5864,  5886,-32768,  2426,  1407,-32768,  1549,-32768,
-32768,-32768,    10,-32768,  1641,  5908,-32768,-32768,-32768,  5930,
  1698,-32768,-32768,-32768,-32768,  2426,  2426,  1698,  1698,   440,
  2993,-32768,  2555,   457,  2555,   457,  2555,   457,  1698,  1698,
  1644,-32768,-32768,  2426,  1698,  3654,  3678,  2426,    21,  1748,
   -44,   547,  1757,  1698,  1755,   547,  1756,  1760,  1758,  1759,
  1761,  1698,  1762,  2426,  1763,  1764,  1698,  1768,  1767,  1698,
  1770,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,   531,-32768,  1771,
-32768,  1698,  1794, 12981,  1795,  1796,  3702,  3726,  1583,  1698,
-32768,  2555,  2555,  1698,  3750,   220,  1797,  1588,   -31,-32768,
  3774,   227,    -6,  3798,   284,    -5,  3822,  3846,  1589,  1594,
  1752,-32768,-32768,  1591,  1633,-32768,  1596,  1598,  1599,  5952,
-32768,  1605,-32768,  1609,-32768,-32768,-32768, 13004,-32768,  1603,
-32768,-32768, 13027,  1613,-32768, 13050,  1606, 13073, 13096, 13119,
  5974,  5996,  6018,  6040,  6062,  6084,  6106,  6128,  6150,  6172,
  6194,  6216,  6238,  6260,  6282,  6304,  6326,  6348,  6370,  6392,
  6414, 13142,  6436,  1819,-32768,  6458,  1615,  2426,-32768,-32768,
  2426,  2426,-32768,  3870,   849,  1826,  1698,-32768,  2426,  1835,
-32768,  1845,  1698,  1846,  1847,  1698,  1851,  1852,  1853,  2426,
  2426,-32768,  1854,    21,   547,   547,   547,   547,  1855,  1874,
  1880,   547,  1893,  1897,  1898,  1900,-32768,-32768,-32768,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
-32768,  1698,-32768,  1698,  1901,  2426,  2426,  2426,-32768,-32768,
  1682,  3894,  1694,-32768,-32768,  1692,  3918,-32768,-32768,  1697,
  3942,-32768,-32768,-32768,  1695,  1699,-32768,    21,  1700,  1702,
  1708,  1745,-32768,-32768,-32768,  1741,-32768,-32768,-32768,  1742,
  1743,  1746,  1747,  6480,  6502,  6524,  6546,  6568,  6590,  6612,
  6634,  6656,  6678,  6700,  6722,  6744,  6766,  6788,  6810,  6832,
  6854,  6876,  6898,  6920,  1749, 13165,  3966,  1751,  1952,  1958,
  1961,   457,  1962,  2426,   457,  1963,   457,  1964,  2426,  1861,
    21,   547,   547,  1967,  1969,   547,  1972,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,    94,-32768,  1995,  2006,-32768,-32768,-32768,    -3,-32768,
  1798,   534,     5,-32768,  1799,    73,-32768,  1801,  1802,  1804,
  1841,  1806,  1807,-32768,-32768,  1813,  1814,   537,  1407,   544,
  1407,   549,  1407,  6942,  6964,  6986,  7008,  7030,  7052,  7074,
  7096,  7118,  7140,  7162,  7184,  7206,  7228,  7250,  7272,  7294,
  7316,  7338,  7360,  7382,   553,-32768,  1809,-32768,  1825,  2020,
   457,  2426,  2037,  2038,   457,  2039,   457,  1902,  1698,    21,
   547,  2426,  2040,  2041,  1698,  2042,  1698,  2043,  1698,  2044,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,    94,  2045,    94,  2046,-32768,    75,  1836,-32768,-32768,
    76,-32768,   221,  1838,  7404,    21,  1840,  1842,-32768,-32768,
  1407,-32768,  1407,-32768,  1407,-32768, 13188, 13211, 13234,  7426,
  7448,  7470,  7492,  7514,  7536,  7558,  7580,  7602,  7624,  7646,
  7668,  7690,  7712,  7734,  7756,  7778,  7800,-32768,-32768,   556,
-32768,-32768,  2050,  2052,  2053,  2054,  1698,  1698,    21,   547,
  2426,-32768,-32768,-32768,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,    94,  2055,-32768,-32768,-32768,-32768,  7822,  3990,
  1903,  1881,  1882,  1879,  1883,  1885,  7844,  7866,  7888,  7910,
  7932,  7954,  7976,  7998,  8020,  8042,  8064,  8086,  8108,  8130,
  8152,  8174,  8196,  8218,-32768,-32768,  1698,  2092,  1919,  2426,
   547,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  4014,-32768,-32768,  1889,  1896,   557,  1407,   560,
  1407,   582,  1407,  8240,  8262,  8284,  8306,  8328,  8350,  8372,
  8394,  8416,  8438,  8460,  8482,  8504,  8526,  8548,  8570,  8592,
  8614,  2102,  2426,  2118,  1698,  2124,  1698,  2134,  1698,  2135,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,-32768,  1927,
-32768,  1407,-32768,  1407,-32768,  1407,-32768, 13257, 13280, 13303,
  8636,  8658,  8680,  8702,  8724,  8746,  8768,  8790,  8812,  8834,
  8856,  8878,  8900,  8922,  8944,  2426,-32768,-32768,-32768,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1928,  1930,  1931,  1932,  8966,  8988,
  9010,  9032,  9054,  9076,  9098,  9120,  9142,  9164,  9186,  9208,
  9230,  9252,  9274,  2426,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1929,   586,  1407,   587,  1407,   590,  1407,  9296,
  9318,  9340,  9362,  9384,  9406,  9428,  9450,  9472,  9494,  9516,
  9538,  9560,  9582,  9604,   547,  1698,  2143,  1698,  2144,  1698,
  2145,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1942,  1407,-32768,  1407,
-32768,  1407,-32768, 13326, 13349, 13372, 13395, 13418, 13441,  9626,
  9648,  9670,  9692,  9714,  9736,  9758,  9780,  9802,  2156,-32768,
-32768,-32768,-32768,-32768,-32768,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,-32768,  1947,  1948,  1949,  1950,  1951,
  1953,  9824,  9846,  9868,  9890,  9912,  9934,  9956,  9978, 10000,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,   591,  1407,   604,  1407,   605,
  1407,   623,  1407,   629,  1407,   630,  1407, 10022, 10044, 10066,
 10088, 10110, 10132, 10154, 10176, 10198,  1698,  2162,  1698,  2164,
  1698,  2165,  1698,  2166,  1698,  2167,  1698,  2168,  1698,  1698,
  1698,  1698,  1698,  1698,  1698,  1698,  1698,  1407,-32768,  1407,
-32768,  1407,-32768,  1407,-32768,  1407,-32768,  1407,-32768, 10220,
 10242, 10264, 10286, 10308, 10330, 13464, 13487, 13510,  1698,  1698,
  1698,  1698,  1698,  1698,-32768,-32768,-32768, 10352, 10374, 10396,
 10418, 10440, 10462,  1959,  1960,  1982,  1698,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  1698, 10484, 10506, 10528, 10550, 10572,
 10594,   648,  1407,   649,  1407,   652,  1407,  1698,  1698,  1698,
  1698,  1698,  1698,  1698,  2171,  1698,  2202,  1698,  2203, 10616,
 10638, 10660, 13533, 13556, 13579,  1407,-32768,  1407,-32768,  1407,
-32768,  1698,  1698,  1698,-32768,-32768,-32768, 10682, 10704, 10726,
  1994,  1996,  1999,  1698,  1698,  1698,  1698,  1698,  1698, 10748,
 10770, 10792,   698,  1407,   699,  1407,   702,  1407,  1698,  1698,
  1698,  1698,  2205,  1698,  2211,  1698,  2213, 10814, 10836, 10858,
  1407,-32768,  1407,-32768,  1407,-32768,  1698,  1698,  1698, 10880,
 10902, 10924,  1698,  1698,  1698, 10946, 10968, 10990,  1698,  1698,
  1698, 13602, 13625, 13648,-32768,-32768,-32768,  2007,  2009,  2021,
  1698,  1698,  1698,   705,  1407,   706,  1407,   709,  1407,  1698,
  2215,  1698,  2233,  1698,  2236,  1407,-32768,  1407,-32768,  1407,
-32768,  2243,  2244,-32768
};

static const short yypgoto[] = {-32768,
  -133,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1584,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -321,    -1,-32768,  2241,     2,  -391,
  -189,     4,-32768,-32768,-32768,-32768,-32768,  2242,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1358, -1430,-32768,
-32768, -1111,   -23,-32768,   438,-32768,   -92,-32768, -1264, -1148,
  1444,  -259,  -346,  -774,  1157,-32768,   -69
};


#define	YYLAST		13858


static const short yytable[] = {   151,
   590,   524,   223,   225,   261,    79,   398,    80,   949,   403,
   195,   198,   560,   211,   155,   266,   782,   523,  1297,  1298,
   161,   150,   400,   226,   401,   214,   102,   221,    10,   209,
   161,  1401,   422,   411,   424,     5,  1116,  1483,  1477,  1486,
  1115,   323,  1377,  1478,  1378,  1118,    89,   940,  1561,   184,
   185,   163,  1561,   509,   221,  1561,   127,   128,   129,   130,
   186,   520,   131,  1477,  1477,    90,  1477,   187,  1478,  1478,
   380,  1478,  1316,   382,  1477,    91,   221,   381,    96,  1478,
   383,  1325,  1117,   127,   128,   129,   130,    92,  1332,   131,
   158,  1119,   389,   390,   427,   389,   390,   834,   221,   520,
    93,   389,   390,   389,   390,   127,   128,   129,   130,    94,
   391,   131,  1152,   268,  1153,   269,   316,   317,   318,   392,
   581,   319,   322,   202,   221,   327,   203,   127,   128,   129,
   130,   412,   347,   131,   348,   349,   350,   270,   352,   271,
   354,   355,  1477,   366,  1477,  1477,  1497,  1478,    95,  1478,
  1478,   324,   325,   127,   128,   129,   130,   941,   942,   131,
   162,   165,   387,   388,  1167,   181,   182,   835,   837,    97,
   162,  1168,  1109,   389,   390,    11,    12,    13,    14,    15,
    16,    17,    18,   409,   410,  1560,   413,   272,   415,   273,
   591,   418,   419,   210,   136,   137,   138,   139,   836,   788,
   776,   602,   603,   136,   137,   138,   139,   102,   157,   545,
  1564,  1567,   802,  1780,   546,   143,   144,  1458,   163,   227,
   166,  1784,   196,   199,   156,   212,   618,   267,   783,   402,
   215,  1103,   389,   390,   389,   390,   389,   390,   222,   463,
   510,   511,   512,   513,   467,   468,   469,   470,   471,   472,
   473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
   483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
   493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
   503,   504,   505,   506,   507,   508,   520,   224,    98,  1786,
  1477,  1873,  1875,   625,   154,  1478,   656,   519,  1561,   520,
  1498,   657,  1561,   168,  1502,  1561,   530,   531,   532,   533,
   534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
   544,   525,   158,  1729,   143,   144,  1733,   551,  1736,   553,
   389,   390,   889,   159,   317,   519,  1248,   389,   390,     6,
     7,   169,     8,   564,   565,   566,   567,   989,   569,   570,
   571,   572,   573,   574,   575,   663,   577,   578,   579,   580,
   389,   390,   765,   389,   390,   143,   144,   766,   143,   144,
   592,   593,   594,   595,   389,   390,   889,  1154,   605,  1155,
  1393,   160,   609,   610,   136,   137,   138,   139,   614,   389,
   390,  1395,   586,   586,   589,   589,  1561,   622,  1133,  1134,
  1561,  1179,  1561,   389,   390,   143,   144,   953,   136,   137,
   138,   139,   773,   775,   389,   390,   164,   389,   390,   932,
  1397,  1015,  1827,   165,   389,   390,  1831,  1099,  1833,   143,
   144,  1156,   773,  1157,  1557,  1142,  1143,  1876,   332,   333,
   334,  1563,   335,   336,   337,   338,   339,   340,   341,   342,
   343,   192,   963,   778,   193,   194,   344,   339,   340,   341,
   342,   343,   662,  1639,  1640,  1641,  1642,   344,   333,   334,
  1646,   335,   336,   337,   338,   339,   340,   341,   342,   343,
  1303,   389,   390,   188,   190,   344,   170,   997,   998,   999,
  1000,   771,   172,   173,   317,   174,   389,   390,  1566,   274,
   779,   275,    45,    46,    47,    48,   520,    50,  1188,  1402,
   167,   143,   144,   938,  1235,    56,    57,   263,   171,   264,
   777,   176,   519,   789,   177,   178,  1477,   179,   143,   144,
   175,  1478,   771,   800,   515,   519,   264,   804,   805,   520,
   276,   278,   277,   279,   811,   180,   335,   336,   337,   338,
   339,   340,   341,   342,   343,   143,   144,   183,   825,   826,
   344,   556,   191,   264,   341,   342,   343,   829,   280,   282,
   281,   283,   344,   197,   520,   520,   520,   520,   200,   838,
  1742,  1743,   143,   144,  1746,   284,   201,   285,   801,   207,
   264,   891,   286,   850,   287,   852,   853,   329,  1460,   204,
   205,   330,   331,   332,   333,   334,   206,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   208,  1102,  1104,  1126,
   384,   344,   386,  1016,   288,   290,   289,   291,   393,    99,
   315,   292,   294,   293,   295,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   890,
   330,   331,   332,   333,   334,   975,   335,   336,   337,   338,
   339,   340,   341,   342,   343,   296,   298,   297,   299,  1837,
   344,  1042,  1043,  1044,  1045,  1046,   300,   216,   301,  1304,
   302,   304,   303,   305,   306,   217,   307,   933,   308,   763,
   309,   764,   773,   465,   774,   773,   520,   803,   773,  1111,
   967,  1112,   773,   220,  1125,   529,   773,   976,  1158,   922,
   923,   773,   773,  1159,  1160,   773,  1235,  1161,  1236,  1237,
   773,  1238,  1255,   924,   925,   926,   927,   928,   929,   930,
   218,  1235,   519,  1403,   219,  1235,   934,  1544,  1782,   937,
  1783,  1795,   943,  1796,   132,   133,   134,   135,  1797,  1280,
  1798,   262,   952,  1799,   328,  1800,   946,  1822,  1912,  1823,
  1903,  1995,  1904,  1996,  1997,   519,  1998,   771,   259,   330,
   331,   332,   333,   334,   310,   335,   336,   337,   338,   339,
   340,   341,   342,   343,   561,  1055,  1999,   311,  2000,   344,
  2126,  2128,  2127,  2129,  2130,  2237,  2131,  2238,   312,   313,
   519,   519,   519,   519,   314,   326,  1003,  1004,  2239,  2241,
  2240,  2242,  1009,   345,   140,   141,   584,   585,   346,  1967,
   142,   367,   351,  1020,  1021,   145,   353,  2243,   320,  2244,
   148,   368,   321,  2245,  2247,  2246,  2248,   330,   331,   332,
   333,   334,   369,   335,   336,   337,   338,   339,   340,   341,
   342,   343,  2324,  2326,  2325,  2327,  2328,   344,  2329,  1059,
  1060,  1061,  1062,  1063,  1064,  1065,  1066,  1067,  1068,  1069,
  1070,  1071,  1072,  1073,  1074,  1075,  1076,  1077,  1078,  1079,
  1080,  1081,  1082,  1083,  1084,   370,  1088,   330,   331,   332,
   333,   334,   969,   335,   336,   337,   338,   339,   340,   341,
   342,   343,  2372,  2374,  2373,  2375,  2376,   344,  2377,  2420,
  2422,  2421,  2423,  2424,  1110,  2425,   372,   373,   374,   375,
  1114,   376,   377,   890,   378,   379,   408,   394,  1105,   397,
   395,   406,   519,   396,  1127,   407,  1128,   416,   330,   331,
   332,   333,   334,   417,   335,   336,   337,   338,   339,   340,
   341,   342,   343,   414,   421,  1148,  1149,  1150,   344,   420,
   423,   425,   426,   428,   330,   331,   332,   333,   334,   429,
   335,   336,   337,   338,   339,   340,   341,   342,   343,  1171,
  1172,  1173,   430,   431,   344,   458,   432,   433,  1469,   596,
    28,    29,   597,   598,    32,   599,    34,   434,    35,   435,
    37,    38,    39,  2147,    41,    42,   436,   437,   824,   438,
    44,   439,   440,   441,   442,   443,   464,   444,   445,   446,
   447,   448,    55,  1241,   449,   450,   330,   331,   332,   333,
   334,  1307,   335,   336,   337,   338,   339,   340,   341,   342,
   343,  1001,   451,   452,  1207,   453,   344,   460,   516,   454,
   455,   456,   457,   582,   461,    59,    60,    61,   514,   344,
   462,   517,   526,  1271,   527,   528,   557,   562,   568,   576,
  1242,   604,   613,    71,   330,   331,   332,   333,   334,   607,
   335,   336,   337,   338,   339,   340,   341,   342,   343,  1108,
   616,   608,   619,   626,   344,   627,   628,   629,  1260,  1261,
  1262,   630,   631,  1338,   632,   633,   634,   635,   636,  1270,
  1272,  1273,  1274,  1275,   637,   638,   639,   640,   641,   642,
   643,   644,   645,   646,   647,   648,   649,   650,  1294,  1295,
   651,   652,   653,   654,   655,   768,   658,   767,   659,   660,
  1306,   769,   586,  1309,   589,   770,   780,   781,   785,   790,
   787,   819,   791,  1319,   792,   794,   796,   797,   806,   827,
  1326,  1327,  1328,  1409,   828,   600,   840,  1333,   841,   844,
   845,  1337,   846,   848,   849,  1339,  1340,  1341,  1342,  1343,
  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
  1354,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1363,
  1364,   855,   856,  1367,   857,   858,   859,   860,   861,   862,
   863,   864,   865,   866,   867,  1376,   868,   955,   869,   870,
   871,   872,  1380,   330,   331,   332,   333,   334,   873,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   874,   875,
   876,   877,   878,   344,  1391,   879,   880,   881,   882,   883,
   886,   884,   885,   887,   888,   893,   894,   993,   994,   995,
  1372,   895,   921,   931,   896,  1495,   919,  1406,   897,  1407,
   936,   330,   331,   332,   333,   334,   898,   335,   336,   337,
   338,   339,   340,   341,   342,   343,  1022,  1382,   899,   900,
   901,   344,   920,   944,   902,  1031,   903,   945,   904,   947,
   951,   984,   905,   906,   907,   958,    99,   315,   960,   971,
   939,   972,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   973,   908,   974,   970,
   977,   978,   909,   979,   910,   911,   912,  1464,   913,   948,
   914,   980,   981,   982,  1467,  1468,   983,   985,   986,  1475,
   987,  1481,   915,  1484,   916,  1487,  1488,   917,   918,   988,
   996,  1491,  1002,  1005,  1006,  1012,  1010,  1017,  1018,  1019,
  1500,   586,  1023,   589,  1024,  1025,  1026,  1027,  1508,  1030,
  1032,  1033,  1036,  1513,  1037,  1038,  1516,  1039,  1518,  1519,
  1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,
  1530,  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,
  1540,  1541,  1542,  1543,  1040,  1049,  1052,  1098,  1546,  1050,
  1638,   132,   133,   134,   135,  1051,  1554,  1053,   316,   317,
  1555,  1054,   330,   331,   332,   333,   334,  1056,   335,   336,
   337,   338,   339,   340,   341,   342,   343,  1057,  1100,  1106,
  1107,  1113,   344,  1121,  1123,  1124,  1132,  1144,  1145,   330,
   331,   332,   333,   334,  1146,   335,   336,   337,   338,   339,
   340,   341,   342,   343,  1147,  1151,  1164,  1165,  1170,   344,
  1174,  1175,  1176,  1180,  1691,  1181,  1183,  1182,  1184,  1185,
  1208,   140,   141,  1186,  1243,  1187,  1190,   142,  1189,  1191,
  1192,  1244,   145,  1239,  1246,   798,  1252,   148,  1198,   799,
  1193,  1194,  1195,  1622,  1196,  1197,  1199,  1200,  1201,  1627,
  1202,  1203,  1631,  1204,  1205,  1206,  1253,  1254,  1257,  1258,
  1259,  1263,  1264,  1265,  1250,  1266,  1251,  1741,  1267,  1268,
  1269,  1282,  1285,  1288,  1290,  1291,  1654,  1655,  1656,  1657,
  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,
  1668,  1669,  1670,  1671,  1672,  1673,  1674,  1292,  1676,  1281,
  1677,  1284,  1293,  1287,   330,   331,   332,   333,   334,  1296,
   335,   336,   337,   338,   339,   340,   341,   342,   343,   364,
    99,   315,  1299,  1308,   344,   371,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   399,  1311,  1312,  1313,  1315,   404,   405,  1314,  1317,  1318,
  1320,  1321,  1776,  1383,  1366,  1322,  1836,  1323,  1324,  1330,
  1331,  1334,  1335,  1373,  1375,  1390,  1336,  1368,  1369,  1370,
  1379,  1371,  1374,  1385,  1749,  1751,  1753,  1754,  1755,  1756,
  1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,
  1767,  1768,  1769,  1770,  1771,  1772,  1773,  1774,  1384,  1392,
    99,   315,  1879,  1394,  1396,  1398,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
  1404,  1405,  1410,  1415,  1412,   132,   133,   134,   135,  1413,
  1414,  1416,  1418,  1419,  1420,  1911,  1424,  1425,  1426,  1429,
  1428,  1431,  1868,  1496,  1871,  1461,  1489,  1572,  1459,  1499,
  1501,  1503,  1504,  1505,  1506,  1835,  1507,  1509,  1511,  1512,
  1514,  1841,  1515,  1843,  1517,  1845,  1545,  1847,  1848,  1849,
  1850,  1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,
  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,  1547,  1553,
  1549,  1550,  1558,  1559,  1570,   140,   141,  1573,  1571,  1574,
  1575,   142,  1576,  1577,  1579,   620,   145,  1582,  1580,   965,
  1586,   148,  1584,   966,  1613,   132,   133,   134,   135,  1615,
  1476,  1620,  1482,  1935,  1485,   330,   331,   332,   333,   334,
  1624,   335,   336,   337,   338,   339,   340,   341,   342,   343,
  1625,  1628,  1629,  1909,  1910,   344,  1632,  1633,  1634,  1637,
  1643,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,
  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,  1934,  1644,
   330,   331,   332,   333,   334,  1645,   335,   336,   337,   338,
   339,   340,   341,   342,   343,   140,   141,  1682,  1647,   786,
   344,   142,  1648,  1649,  1650,  1678,   145,  1685,  1684,  1689,
   386,   148,  1687,  1963,  1692,  1690,  1693,  1694,  1969,  1971,
  1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,
  1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,   330,
   331,   332,   333,   334,   968,   335,   336,   337,   338,   339,
   340,   341,   342,   343,  1695,  1696,  1697,  1726,  1698,   344,
   772,  1699,  1700,  1727,  1722,  1725,  1728,  1730,  1734,  1737,
  1740,  2022,  1744,  2024,  1745,  2026,  1747,  2028,  2029,  2030,
  2031,  2032,  2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,
  2041,  2042,  2043,  2044,  2045,   330,   331,   332,   333,   334,
  1778,   335,   336,   337,   338,   339,   340,   341,   342,   343,
  1779,  1834,  1014,  1781,  1785,   344,  1787,  1790,  1788,  1789,
  1791,  1792,  1793,  1794,  1824,  1826,  2069,  2070,  2071,  2072,
  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,  2082,
  2083,  1825,  1829,  1830,  1832,  1839,  1840,  1842,  1844,  1846,
  1869,  1872,  1874,  1877,  1880,  1905,  1881,  1906,  1907,  1908,
  1936,  2105,  2107,  2109,  2110,  2111,  2112,  2113,  2114,  2115,
  2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,  2124,   330,
   331,   332,   333,   334,  1939,   335,   336,   337,   338,   339,
   340,   341,   342,   343,  1942,  1940,  1941,  1964,  1943,   344,
  1944,  1965,  2148,  1993,  2150,  1994,  2152,  2019,  2154,  2155,
  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2165,
  2166,  2167,  2168,  2021,   330,   331,   332,   333,   334,  2023,
   335,   336,   337,   338,   339,   340,   341,   342,   343,  2025,
  2027,  2046,  2084,  2125,   344,  2085,  2086,  2087,  2149,  2151,
  2153,  2169,  2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,
  2200,  2185,  2201,  2202,  2203,  2204,  2205,  2259,  2206,  2261,
  2263,  2265,  2267,  2269,  2303,  2304,  2337,  2217,  2219,  2221,
  2223,  2225,  2227,  2228,  2229,  2230,  2231,  2232,  2233,  2234,
  2235,  2236,   330,   331,   332,   333,   334,  2305,   335,   336,
   337,   338,   339,   340,   341,   342,   343,  2339,  2341,  2357,
  2382,  2358,   344,  2258,  2359,  2260,  2384,  2262,  2386,  2264,
  2427,  2266,  2411,  2268,  2412,  2270,  2271,  2272,  2273,  2274,
  2275,  2276,  2277,  2278,   956,   957,  2413,   959,  2429,   961,
   962,  2431,  2433,  2434,    78,    86,   892,     0,     0,     0,
     0,     0,     0,     0,     0,  2288,  2289,  2290,  2291,  2292,
  2293,     0,     0,  1245,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2306,  2307,  2308,  2309,  2310,  2311,  2313,
  2315,  2317,     0,     0,     0,     0,     0,  1007,  1008,     0,
     0,  1011,     0,     0,  2330,  2331,  2332,  2333,  2334,  2335,
  2336,     0,  2338,     0,  2340,     0,     0,     0,  1028,  1029,
     0,     0,     0,     0,  1034,  1035,     0,     0,  2348,  2349,
  2350,  1041,     0,  1048,     0,     0,     0,     0,     0,     0,
  2360,  2361,  2362,  2364,  2366,  2368,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  2378,  2379,  2380,  2381,     0,
  2383,     0,  2385,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2390,  2391,  2392,     0,     0,     0,  2396,
  2397,  2398,     0,     0,     0,  2402,  2403,  2404,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  2415,  2417,  2419,
     0,     0,     0,     0,     0,     0,  2426,     0,  2428,     0,
  2430,  1120,     0,  1122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1129,  1130,  1131,     0,     0,     0,
  1135,  1136,  1137,  1138,  1139,  1140,  1141,     0,    99,   356,
     0,     0,     0,     0,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,     0,     0,
     0,     0,     0,     0,     0,     0,   357,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,    45,    46,
    47,    48,    49,    50,  1278,     0,  1279,     0,     0,     0,
     0,    56,    57,     0,     0,    99,   558,     0,     0,     0,
     0,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1240,     0,     0,     0,     0,
     0,     0,     0,   132,   133,   134,   135,    99,   315,     0,
     0,     0,     0,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
     0,     0,     0,   596,    28,    29,   597,   598,    32,   599,
    34,     0,    35,     0,    37,    38,    39,     0,    41,    42,
     0,     0,     0,  1300,    44,     0,     0,     0,     0,     0,
     0,  1310,     0,   140,   358,     0,    55,     0,     0,   142,
   132,   133,   134,   135,   145,     0,     0,     0,     0,   148,
  1329,   359,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,    59,
    60,    61,   344,     0,     0,     0,     0,     0,     0,  1301,
     0,  1302,     0,     0,     0,     0,     0,    71,  1365,     0,
     0,     0,   132,   133,   134,   135,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   140,   141,     0,     0,     0,     0,   142,     0,     0,     0,
     0,   145,     0,    99,   100,   101,   148,   102,   559,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,     0,   127,   128,   129,   130,     0,     0,
   131,     0,  1472,  1473,     0,     0,     0,     0,   142,     0,
     0,     0,     0,  1474,     0,    99,   315,   221,   148,   606,
   187,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,   127,   128,   129,   130,
     0,     0,   131,     0,   596,    28,    29,   597,   598,    32,
   599,    34,     0,    35,     0,    37,    38,    39,     0,    41,
    42,     0,     0,     0,     0,    44,     0,     0,     0,  1465,
  1466,     0,     0,     0,     0,     0,     0,    55,   132,   133,
   134,   135,     0,     0,     0,     0,     0,  1490,     0,     0,
     0,  1494,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1510,     0,     0,
    59,    60,    61,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    71,     0,
   132,   133,   134,   135,   136,   137,   138,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   140,   141,
     0,     0,     0,     0,   142,   143,   144,     0,     0,   145,
     0,   146,     0,   147,   148,    99,   356,     0,     0,     0,
     0,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,     0,     0,
   140,   141,     0,   357,     0,     0,   142,     0,     0,     0,
     0,   145,     0,     0,     0,     0,   148,     0,     0,     0,
   623,     0,     0,     0,     0,    45,    46,    47,    48,    49,
    50,  1616,     0,     0,  1617,  1618,     0,     0,    56,    57,
     0,     0,  1623,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1635,  1636,    99,   558,     0,     0,     0,
     0,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,     0,     0,
   132,   133,   134,   135,     0,     0,     0,     0,     0,  1679,
  1680,  1681,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   596,    28,
    29,   597,   598,    32,   599,    34,     0,    35,     0,    37,
    38,    39,     0,    41,    42,     0,     0,     0,     0,    44,
     0,   596,    28,    29,   597,   598,    32,   599,    34,     0,
    35,    55,    37,    38,    39,     0,    41,    42,     0,     0,
   140,   518,    44,     0,     0,     0,   142,  1732,     0,     0,
     0,   145,  1739,     0,    55,     0,   148,     0,     0,     0,
   132,   133,   134,   135,    59,    60,    61,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    71,     0,     0,     0,     0,    59,    60,    61,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   330,   331,   332,   333,   334,    71,   335,   336,   337,   338,
   339,   340,   341,   342,   343,    -7,     1,     0,   -12,   -55,
   344,     0,     0,     0,     0,     0,     0,  1470,     0,  1471,
   140,   141,     0,     0,     0,     0,   142,     0,     0,     0,
     0,   145,     0,     0,     0,  1828,   148,     0,   -55,     0,
     0,     0,     0,   -55,   -55,  1838,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,     0,   624,     0,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,
     0,   -55,   -55,     0,     0,     0,     0,   851,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
     0,   -55,   -55,   -55,   -55,     0,     0,   807,     0,   -55,
     0,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,     0,  1913,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   -12,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,     0,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
    -7,    -7,     0,    -7,   344,     0,     0,   229,     0,     0,
     0,   547,     0,  1966,   664,   665,   666,   667,   668,   669,
   670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
   680,   681,   682,   683,   684,   685,   686,   687,   688,   689,
   690,   691,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   516,     0,  2020,   664,   665,   666,
   667,   668,   669,   670,   671,   672,   673,   674,   675,   676,
   677,   678,   679,   680,   681,   682,   683,   684,   685,   686,
   687,   688,   689,   690,   691,   230,   231,   232,     0,     0,
     0,     0,     0,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,     0,     0,     0,     0,     0,     0,  2065,
     0,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,    23,   253,   254,   255,   256,   257,   258,     0,     0,
     0,     0,     0,   596,    28,    29,   597,   598,    32,   599,
    34,     0,    35,   692,    37,    38,    39,  2103,    41,    42,
    24,     0,     0,     0,    44,    25,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,    55,    35,    36,    37,
    38,    39,    40,    41,    42,     0,     0,     0,    43,    44,
    45,    46,    47,    48,    49,    50,     0,    51,    52,    53,
    54,    55,     0,    56,    57,     0,  1058,     0,     0,    59,
    60,    61,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,    71,     0,     0,
     0,     0,   344,    58,    59,    60,    61,     0,     0,   582,
     0,    62,     0,    63,     0,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,   812,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,   813,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,   821,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,   823,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
   964,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,   992,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1276,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,  1386,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1387,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1492,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,  1493,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1551,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,  1552,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1556,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1562,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,  1565,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1568,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,  1569,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1619,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1683,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,     0,     0,   330,
   331,   332,   333,   334,  1686,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   330,   331,   332,   333,   334,  1688,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,     0,     0,   330,   331,   332,
   333,   334,  1724,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,     0,
     0,   330,   331,   332,   333,   334,  1938,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,     0,     0,   330,   331,   332,   333,   334,
  1992,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   583,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,   617,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,   743,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,   744,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
   757,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   758,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,   759,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,   760,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,   761,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
   762,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   830,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,   831,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,   832,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,   954,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
   990,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,   991,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1013,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1162,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1163,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1177,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1178,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1209,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1210,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1211,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1212,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1213,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1214,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1215,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1216,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1217,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1218,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1219,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1220,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1221,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1222,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1223,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1224,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1225,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1226,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1227,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1228,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1229,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1230,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1231,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1232,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1233,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1234,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1249,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1256,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1381,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1388,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1389,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1399,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1400,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1408,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1411,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1422,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1427,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1430,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1432,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1433,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1434,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1435,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1436,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1437,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1438,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1439,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1440,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1441,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1442,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1443,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1444,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1445,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1446,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1447,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1448,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1449,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1450,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1451,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1452,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1453,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1454,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1455,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1456,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1457,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1462,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1463,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1578,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1590,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1591,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1592,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1593,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1594,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1595,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1596,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1597,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1598,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1599,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1600,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1601,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1602,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1603,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1604,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1605,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1606,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1607,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1608,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1609,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1610,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1612,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1614,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1701,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1702,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1703,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1704,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1705,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1706,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1707,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1708,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1709,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1710,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1711,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1712,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1713,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1714,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1715,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1716,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1717,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1718,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1719,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1720,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1721,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1801,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1802,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1803,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1804,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1805,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1806,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1807,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1808,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1809,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1810,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1811,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1812,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1813,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1814,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1815,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1816,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1817,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1818,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1819,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1820,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1821,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1878,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1885,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1886,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1887,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1888,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1889,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1890,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1891,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1892,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1893,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1894,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1895,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1896,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1897,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1898,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1899,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1900,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1901,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1902,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1937,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1945,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1946,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1947,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1948,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1949,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1950,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1951,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1952,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1953,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1954,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1955,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1956,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1957,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  1958,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  1959,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  1960,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  1961,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  1962,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2001,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2002,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2003,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2004,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2005,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2006,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2007,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2008,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2009,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2010,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2011,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2012,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2013,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2014,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2015,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2016,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2017,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2018,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2050,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2051,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2052,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2053,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2054,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2055,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2056,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2057,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2058,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2059,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2060,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2061,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2062,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2063,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2064,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2088,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2089,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2090,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2091,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2092,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2093,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2094,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2095,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2096,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2097,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2098,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2099,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2100,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2101,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2102,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2132,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2133,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2134,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2135,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2136,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2137,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2138,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2139,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2140,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2141,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2142,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2143,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2144,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2145,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2146,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2176,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2177,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2178,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2179,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2180,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2181,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2182,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2183,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2184,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2207,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2208,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2209,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2210,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2211,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2212,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2213,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2214,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2215,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2249,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2250,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2251,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2252,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2253,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2254,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2255,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2256,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2257,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2279,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2280,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2281,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2282,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2283,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2284,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2297,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2298,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2299,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2300,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2301,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2302,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2318,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2319,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2320,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2321,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2322,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2323,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2342,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2343,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2344,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2354,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2355,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2356,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2369,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2370,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2371,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2387,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2388,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2389,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2393,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   330,   331,   332,   333,   334,  2394,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   330,   331,   332,   333,   334,  2395,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   330,   331,   332,   333,   334,
  2399,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   330,   331,   332,
   333,   334,  2400,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   330,
   331,   332,   333,   334,  2401,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   522,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   661,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   722,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   724,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   726,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   728,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   730,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   732,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   734,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   736,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   738,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   740,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   742,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   746,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   748,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   750,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   752,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   754,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   756,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   833,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   839,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   842,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,   843,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,   935,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,  1090,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,  1092,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,  1094,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,  1096,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,     0,     0,  1097,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,     0,     0,  1247,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   548,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   549,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   550,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   552,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   554,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   555,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   563,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   611,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   612,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   615,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   621,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   721,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   723,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   725,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   727,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   729,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   731,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   733,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   735,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   737,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   739,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   741,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   745,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   747,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   749,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   751,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   753,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   755,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   793,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   795,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   808,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   809,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,   810,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
   814,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,   815,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,   816,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,   817,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,   818,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,   820,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,   822,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,   847,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,   854,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,  1089,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
  1091,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,  1093,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,  1095,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,  1101,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,  1166,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,  1277,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,  1305,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,  1417,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,  1421,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,  1423,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
  1548,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,  1581,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,  1583,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,  1585,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,  1587,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,  1588,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,  1589,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,  1611,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,  1723,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,  1882,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
  1883,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,  1884,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,  2047,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,  2048,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,  2049,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,  2170,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,  2171,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,  2172,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,  2173,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,  2174,   330,   331,
   332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
   341,   342,   343,     0,     0,     0,     0,     0,   344,     0,
  2175,   330,   331,   332,   333,   334,     0,   335,   336,   337,
   338,   339,   340,   341,   342,   343,     0,     0,     0,     0,
     0,   344,     0,  2285,   330,   331,   332,   333,   334,     0,
   335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
     0,     0,     0,     0,   344,     0,  2286,   330,   331,   332,
   333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
   342,   343,     0,     0,     0,     0,     0,   344,     0,  2287,
   330,   331,   332,   333,   334,     0,   335,   336,   337,   338,
   339,   340,   341,   342,   343,     0,     0,     0,     0,     0,
   344,     0,  2345,   330,   331,   332,   333,   334,     0,   335,
   336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     0,     0,     0,   344,     0,  2346,   330,   331,   332,   333,
   334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
   343,     0,     0,     0,     0,     0,   344,     0,  2347,   330,
   331,   332,   333,   334,     0,   335,   336,   337,   338,   339,
   340,   341,   342,   343,     0,     0,     0,     0,     0,   344,
     0,  2405,   330,   331,   332,   333,   334,     0,   335,   336,
   337,   338,   339,   340,   341,   342,   343,     0,     0,     0,
     0,     0,   344,     0,  2406,   330,   331,   332,   333,   334,
     0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     0,     0,     0,     0,     0,   344,     0,  2407
};

static const short yycheck[] = {    23,
   392,   323,    72,    73,    97,     4,   196,     4,   783,   199,
     4,     4,   359,     4,     6,     4,     4,     7,  1167,  1168,
    69,    23,     4,     3,     6,     4,     7,     5,     3,    45,
    69,  1296,   222,   111,   224,     6,     6,  1396,    70,  1398,
     6,     4,     6,    75,     6,     6,   179,     4,  1479,   198,
   199,    69,  1483,     4,     5,  1486,    34,    35,    36,    37,
   209,   321,    40,    70,    70,     7,    70,   216,    75,    75,
   209,    75,  1184,   209,    70,     6,     5,   216,   209,    75,
   216,  1193,    52,    34,    35,    36,    37,     6,  1200,    40,
   209,    52,   198,   199,   228,   198,   199,   216,     5,   359,
     6,   198,   199,   198,   199,    34,    35,    36,    37,     6,
   216,    40,   215,   209,   217,   211,   140,   141,   142,   216,
   215,   145,   146,    41,     5,   149,    44,    34,    35,    36,
    37,   209,   156,    40,   158,   159,   160,   209,   162,   211,
   164,   165,    70,   167,    70,    70,  1411,    75,     6,    75,
    75,   114,   115,    34,    35,    36,    37,   114,   115,    40,
   209,   209,   186,   187,   209,    44,    45,   216,   216,   209,
   209,   216,   947,   198,   199,   150,   151,   152,   153,   154,
   155,   156,   157,   207,   208,   217,   210,   209,   212,   211,
   215,   215,   216,   209,   184,   185,   186,   187,   216,   546,
   522,     6,     7,   184,   185,   186,   187,     7,     6,   210,
   217,   217,   559,   217,   215,   205,   206,  1366,    69,   199,
    49,   217,   216,   216,   216,   216,   416,   216,   216,   211,
   209,     7,   198,   199,   198,   199,   198,   199,   216,   263,
   310,   311,   312,   313,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   546,   216,   209,   217,
    70,   217,   217,   427,   209,    75,   210,   321,  1729,   559,
  1412,   215,  1733,    45,  1416,  1736,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
   344,   323,   209,  1682,   205,   206,  1685,   351,  1687,   353,
   198,   199,   213,   209,   358,   359,  1111,   198,   199,   175,
   176,    45,   178,   367,   368,   369,   370,   215,   372,   373,
   374,   375,   376,   377,   378,   216,   380,   381,   382,   383,
   198,   199,   210,   198,   199,   205,   206,   215,   205,   206,
   394,   395,   396,   397,   198,   199,   213,   215,   402,   217,
   215,   209,   406,   407,   184,   185,   186,   187,   412,   198,
   199,   215,   391,   392,   391,   392,  1827,   421,    59,    60,
  1831,   210,  1833,   198,   199,   205,   206,   210,   184,   185,
   186,   187,   215,   213,   198,   199,   209,   198,   199,   766,
   215,     8,  1781,   209,   198,   199,  1785,   210,  1787,   205,
   206,   215,   215,   217,   215,     6,     7,   217,   190,   191,
   192,   215,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    41,   799,   523,    44,    45,   208,   198,   199,   200,
   201,   202,   464,  1575,  1576,  1577,  1578,   208,   191,   192,
  1582,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     8,   198,   199,    46,    47,   208,    45,   834,   835,   836,
   837,   515,    44,    45,   518,    47,   198,   199,   215,   209,
   524,   211,    63,    64,    65,    66,   766,    68,   210,   210,
   209,   205,   206,   773,   215,    76,    77,   211,    45,   213,
   522,    41,   546,   547,    44,    45,    70,    47,   205,   206,
    47,    75,   556,   557,   211,   559,   213,   561,   562,   799,
   209,   209,   211,   211,   568,   209,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   205,   206,   216,   582,   583,
   208,   211,   216,   213,   200,   201,   202,   591,   209,   209,
   211,   211,   208,    45,   834,   835,   836,   837,     6,   603,
  1692,  1693,   205,   206,  1696,   209,     6,   211,   211,   209,
   213,   661,   209,   617,   211,   619,   620,     6,  1373,     4,
     4,   188,   189,   190,   191,   192,     4,   194,   195,   196,
   197,   198,   199,   200,   201,   202,   209,   939,   940,   966,
   183,   208,   185,   210,   209,   209,   211,   211,   191,     3,
     4,   209,   209,   211,   211,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   661,
   188,   189,   190,   191,   192,     6,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   209,   209,   211,   211,  1791,
   208,   135,   136,   137,   138,   139,   209,   209,   211,   217,
   209,   209,   211,   211,   209,     6,   211,   767,   209,   211,
   211,   213,   215,   266,   217,   215,   966,   217,   215,   215,
   217,   217,   215,    45,   217,     6,   215,    58,   217,   743,
   744,   215,   215,   217,   217,   215,   215,   217,   217,   215,
   215,   217,   217,   757,   758,   759,   760,   761,   762,   763,
     4,   215,   766,   217,     4,   215,   770,   217,   215,   773,
   217,   215,   776,   217,   128,   129,   130,   131,   215,  1151,
   217,     5,   786,   215,     6,   217,     6,   215,  1880,   217,
   215,   215,   217,   217,   215,   799,   217,   801,   209,   188,
   189,   190,   191,   192,   209,   194,   195,   196,   197,   198,
   199,   200,   201,   202,     8,   888,   215,   209,   217,   208,
   215,   215,   217,   217,   215,   215,   217,   217,   209,   209,
   834,   835,   836,   837,   209,     4,   840,   841,   215,   215,
   217,   217,   846,     6,   198,   199,   389,   390,     5,  1941,
   204,   216,   209,   857,   858,   209,   209,   215,   212,   217,
   214,   209,   216,   215,   215,   217,   217,   188,   189,   190,
   191,   192,   209,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   215,   215,   217,   217,   215,   208,   217,   893,
   894,   895,   896,   897,   898,   899,   900,   901,   902,   903,
   904,   905,   906,   907,   908,   909,   910,   911,   912,   913,
   914,   915,   916,   917,   918,   209,   920,   188,   189,   190,
   191,   192,     6,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   215,   215,   217,   217,   215,   208,   217,   215,
   215,   217,   217,   215,   948,   217,   216,   216,   209,   209,
   954,   209,   209,   935,   209,     4,     6,   216,   940,   211,
   216,   211,   966,   216,   968,   211,   970,   216,   188,   189,
   190,   191,   192,   117,   194,   195,   196,   197,   198,   199,
   200,   201,   202,   213,   209,   989,   990,   991,   208,     6,
     6,     6,     3,   209,   188,   189,   190,   191,   192,   209,
   194,   195,   196,   197,   198,   199,   200,   201,   202,  1013,
  1014,  1015,   209,   209,   208,     5,   209,   209,  1390,    41,
    42,    43,    44,    45,    46,    47,    48,   209,    50,   209,
    52,    53,    54,  2125,    56,    57,   209,   209,   581,   209,
    62,   209,   209,   209,   209,   209,     4,   209,   209,   209,
   209,   209,    74,  1103,   209,   209,   188,   189,   190,   191,
   192,  1175,   194,   195,   196,   197,   198,   199,   200,   201,
   202,     6,   209,   209,  1056,   209,   208,   215,   210,   209,
   209,   209,   209,   215,   210,   107,   108,   109,     5,   208,
   215,     7,   213,  1143,     7,   211,   216,     7,     7,   210,
  1104,     6,   112,   125,   188,   189,   190,   191,   192,     7,
   194,   195,   196,   197,   198,   199,   200,   201,   202,     6,
   114,     7,   216,     5,   208,     5,     5,     5,  1132,  1133,
  1134,     5,     5,  1206,     5,     5,     5,     5,     5,  1143,
  1144,  1145,  1146,  1147,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,   168,     5,  1162,  1163,
     5,     5,     5,     3,     5,   210,     5,   215,     6,     5,
  1174,   210,  1151,  1177,  1151,   215,     6,     4,   212,     7,
     6,   213,     7,  1187,     7,     7,     7,     7,     7,   217,
  1194,  1195,  1196,  1307,   217,   217,   216,  1201,   216,     7,
     7,  1205,   209,     7,   213,  1209,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  1222,  1223,
  1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,
  1234,   180,   215,  1237,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,  1249,   215,   790,   215,   215,
   215,   215,  1256,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   215,   215,
   215,   215,   215,   208,  1278,   215,   215,   215,   215,   215,
     5,   215,   215,   210,   215,   209,   209,   830,   831,   832,
     6,   209,     6,     4,   209,  1409,   216,  1301,   209,  1303,
     6,   188,   189,   190,   191,   192,   209,   194,   195,   196,
   197,   198,   199,   200,   201,   202,   859,     6,   209,   209,
   209,   208,   216,     6,   209,   868,   209,     6,   209,     7,
     6,     4,   209,   209,   209,     7,     3,     4,     7,     7,
   212,     7,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     7,   209,     7,   216,
     7,     7,   209,     7,   209,   209,   209,  1381,   209,   211,
   209,     7,     7,     7,  1388,  1389,     7,     7,     7,  1393,
     7,  1395,   209,  1397,   209,  1399,  1400,   209,   209,     7,
     6,  1405,     6,     6,     6,     4,     7,     7,   181,     3,
  1414,  1390,     3,  1390,     3,   200,     3,     3,  1422,     3,
     3,     3,     3,  1427,     3,     3,  1430,     3,  1432,  1433,
  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,
  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,  1453,
  1454,  1455,  1456,  1457,     3,     3,     3,   210,  1462,     5,
  1574,   128,   129,   130,   131,     5,  1470,     3,  1472,  1473,
  1474,     6,   188,   189,   190,   191,   192,     4,   194,   195,
   196,   197,   198,   199,   200,   201,   202,     6,   210,   213,
     7,     6,   208,     6,     6,     6,   209,   216,   216,   188,
   189,   190,   191,   192,   216,   194,   195,   196,   197,   198,
   199,   200,   201,   202,   216,   216,     6,     6,   113,   208,
   216,   177,   215,   215,  1638,   210,   210,   215,   215,   210,
     6,   198,   199,   215,     6,   215,   210,   204,   215,   210,
   215,     4,   209,   213,     6,   212,     6,   214,   210,   216,
   215,   215,   215,  1557,   215,   215,   215,   215,   215,  1563,
   215,   215,  1566,   210,   215,   215,     6,   212,     6,     6,
     6,     6,     6,     6,  1117,     6,  1119,  1691,     6,     6,
     6,     6,     6,     6,     6,     6,  1590,  1591,  1592,  1593,
  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
  1604,  1605,  1606,  1607,  1608,  1609,  1610,     6,  1612,  1152,
  1614,  1154,     6,  1156,   188,   189,   190,   191,   192,     7,
   194,   195,   196,   197,   198,   199,   200,   201,   202,   166,
     3,     4,   113,     3,   208,   172,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   197,     6,     3,     6,     6,   202,   203,   200,     6,     3,
     6,     3,  1722,     6,   216,     6,  1790,     6,     3,     6,
     3,     3,     3,     7,   213,   216,     6,     6,     4,     6,
   212,     6,     6,     6,  1698,  1699,  1700,  1701,  1702,  1703,
  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,     6,   217,
     3,     4,  1836,   216,   216,   216,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   216,   110,   210,   210,   215,   128,   129,   130,   131,   215,
   215,   215,   215,   210,   210,  1879,   215,   210,   210,   210,
   215,   215,  1822,     6,  1824,   115,   113,     6,   210,     3,
     6,     6,     3,     6,     6,  1789,     6,     6,     6,     6,
     3,  1795,     6,  1797,     5,  1799,     6,  1801,  1802,  1803,
  1804,  1805,  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,
  1814,  1815,  1816,  1817,  1818,  1819,  1820,  1821,     5,   217,
     6,     6,     6,   216,   216,   198,   199,   217,   215,   177,
   215,   204,   215,   215,   210,     8,   209,   215,   210,   212,
   215,   214,   210,   216,     6,   128,   129,   130,   131,   215,
  1393,     6,  1395,  1903,  1397,   188,   189,   190,   191,   192,
     6,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     6,     6,     6,  1877,  1878,   208,     6,     6,     6,     6,
     6,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,     6,
   188,   189,   190,   191,   192,     6,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   198,   199,   216,     6,     8,
   208,   204,     6,     6,     5,     5,   209,   216,   215,   215,
  1473,   214,   216,  1937,   215,   217,   215,   210,  1942,  1943,
  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,  1953,
  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,   188,
   189,   190,   191,   192,     8,   194,   195,   196,   197,   198,
   199,   200,   201,   202,   210,   215,   215,     6,   216,   208,
   517,   216,   216,     6,   216,   215,     6,     6,     6,     6,
   110,  1995,     6,  1997,     6,  1999,     5,  2001,  2002,  2003,
  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,
  2014,  2015,  2016,  2017,  2018,   188,   189,   190,   191,   192,
     6,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     5,   110,     8,   216,   216,   208,   216,   177,   217,   216,
   215,   215,   210,   210,   216,     6,  2050,  2051,  2052,  2053,
  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,
  2064,   217,     6,     6,     6,     6,     6,     6,     6,     6,
     6,     6,   217,   216,   215,     6,   215,     6,     6,     6,
     6,  2085,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,  2102,   188,
   189,   190,   191,   192,   182,   194,   195,   196,   197,   198,
   199,   200,   201,   202,   216,   215,   215,     6,   216,   208,
   216,   183,  2126,   215,  2128,   210,  2130,     6,  2132,  2133,
  2134,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,
  2144,  2145,  2146,     6,   188,   189,   190,   191,   192,     6,
   194,   195,   196,   197,   198,   199,   200,   201,   202,     6,
     6,   215,   215,   215,   208,   216,   216,   216,     6,     6,
     6,   210,  2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,
  2184,     6,   216,   216,   216,   216,   216,     6,   216,     6,
     6,     6,     6,     6,   216,   216,     6,  2201,  2202,  2203,
  2204,  2205,  2206,  2207,  2208,  2209,  2210,  2211,  2212,  2213,
  2214,  2215,   188,   189,   190,   191,   192,   216,   194,   195,
   196,   197,   198,   199,   200,   201,   202,     6,     6,   216,
     6,   216,   208,  2237,   216,  2239,     6,  2241,     6,  2243,
     6,  2245,   216,  2247,   216,  2249,  2250,  2251,  2252,  2253,
  2254,  2255,  2256,  2257,   791,   792,   216,   794,     6,   796,
   797,     6,     0,     0,     4,     4,   663,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  2279,  2280,  2281,  2282,  2283,
  2284,    -1,    -1,  1107,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2297,  2298,  2299,  2300,  2301,  2302,  2303,
  2304,  2305,    -1,    -1,    -1,    -1,    -1,   844,   845,    -1,
    -1,   848,    -1,    -1,  2318,  2319,  2320,  2321,  2322,  2323,
  2324,    -1,  2326,    -1,  2328,    -1,    -1,    -1,   865,   866,
    -1,    -1,    -1,    -1,   871,   872,    -1,    -1,  2342,  2343,
  2344,   878,    -1,   880,    -1,    -1,    -1,    -1,    -1,    -1,
  2354,  2355,  2356,  2357,  2358,  2359,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  2369,  2370,  2371,  2372,    -1,
  2374,    -1,  2376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2387,  2388,  2389,    -1,    -1,    -1,  2393,
  2394,  2395,    -1,    -1,    -1,  2399,  2400,  2401,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2411,  2412,  2413,
    -1,    -1,    -1,    -1,    -1,    -1,  2420,    -1,  2422,    -1,
  2424,   958,    -1,   960,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   971,   972,   973,    -1,    -1,    -1,
   977,   978,   979,   980,   981,   982,   983,    -1,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    41,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    63,    64,
    65,    66,    67,    68,   215,    -1,   217,    -1,    -1,    -1,
    -1,    76,    77,    -1,    -1,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1102,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,   130,   131,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    48,    -1,    50,    -1,    52,    53,    54,    -1,    56,    57,
    -1,    -1,    -1,  1170,    62,    -1,    -1,    -1,    -1,    -1,
    -1,  1178,    -1,   198,   199,    -1,    74,    -1,    -1,   204,
   128,   129,   130,   131,   209,    -1,    -1,    -1,    -1,   214,
  1197,   216,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,   107,
   108,   109,   208,    -1,    -1,    -1,    -1,    -1,    -1,   215,
    -1,   217,    -1,    -1,    -1,    -1,    -1,   125,  1235,    -1,
    -1,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   198,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
    -1,   209,    -1,     3,     4,     5,   214,     7,   216,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    34,    35,    36,    37,    -1,    -1,
    40,    -1,   198,   199,    -1,    -1,    -1,    -1,   204,    -1,
    -1,    -1,    -1,   209,    -1,     3,     4,     5,   214,   217,
   216,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    34,    35,    36,    37,
    -1,    -1,    40,    -1,    41,    42,    43,    44,    45,    46,
    47,    48,    -1,    50,    -1,    52,    53,    54,    -1,    56,
    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,  1386,
  1387,    -1,    -1,    -1,    -1,    -1,    -1,    74,   128,   129,
   130,   131,    -1,    -1,    -1,    -1,    -1,  1404,    -1,    -1,
    -1,  1408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1424,    -1,    -1,
   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
   128,   129,   130,   131,   184,   185,   186,   187,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   198,   199,
    -1,    -1,    -1,    -1,   204,   205,   206,    -1,    -1,   209,
    -1,   211,    -1,   213,   214,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
   198,   199,    -1,    41,    -1,    -1,   204,    -1,    -1,    -1,
    -1,   209,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,
   217,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
    68,  1548,    -1,    -1,  1551,  1552,    -1,    -1,    76,    77,
    -1,    -1,  1559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1570,  1571,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,  1616,
  1617,  1618,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    48,    -1,    50,    -1,    52,
    53,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    62,
    -1,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    74,    52,    53,    54,    -1,    56,    57,    -1,    -1,
   198,   199,    62,    -1,    -1,    -1,   204,  1684,    -1,    -1,
    -1,   209,  1689,    -1,    74,    -1,   214,    -1,    -1,    -1,
   128,   129,   130,   131,   107,   108,   109,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,   107,   108,   109,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   188,   189,   190,   191,   192,   125,   194,   195,   196,   197,
   198,   199,   200,   201,   202,     0,     1,    -1,     3,     4,
   208,    -1,    -1,    -1,    -1,    -1,    -1,   215,    -1,   217,
   198,   199,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
    -1,   209,    -1,    -1,    -1,  1782,   214,    -1,    33,    -1,
    -1,    -1,    -1,    38,    39,  1792,    41,    42,    43,    44,
    45,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
    55,    56,    57,    -1,   217,    -1,    61,    62,    63,    64,
    65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
    -1,    76,    77,    -1,    -1,    -1,    -1,   217,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
    -1,   106,   107,   108,   109,    -1,    -1,   217,    -1,   114,
    -1,   116,    -1,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,    -1,  1881,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   150,   151,   152,   153,   154,
   155,   156,   157,    -1,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
   175,   176,    -1,   178,   208,    -1,    -1,    44,    -1,    -1,
    -1,   215,    -1,  1940,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,    -1,  1993,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   132,   133,   134,    -1,    -1,
    -1,    -1,    -1,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,  2046,
    -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,     4,   169,   170,   171,   172,   173,   174,    -1,    -1,
    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    48,    -1,    50,   217,    52,    53,    54,  2084,    56,    57,
    33,    -1,    -1,    -1,    62,    38,    39,    -1,    41,    42,
    43,    44,    45,    46,    47,    48,    74,    50,    51,    52,
    53,    54,    55,    56,    57,    -1,    -1,    -1,    61,    62,
    63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
    73,    74,    -1,    76,    77,    -1,   217,    -1,    -1,   107,
   108,   109,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,   125,    -1,    -1,
    -1,    -1,   208,   106,   107,   108,   109,    -1,    -1,   215,
    -1,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,
   189,   190,   191,   192,   217,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   188,   189,   190,   191,   192,   217,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,   189,   190,
   191,   192,   217,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
    -1,   188,   189,   190,   191,   192,   217,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,    -1,    -1,   188,   189,   190,   191,   192,
   217,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,
   189,   190,   191,   192,   217,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   188,   189,   190,   191,   192,   217,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,   189,   190,
   191,   192,   217,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
    -1,   188,   189,   190,   191,   192,   217,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,    -1,    -1,   188,   189,   190,   191,   192,
   217,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,
   189,   190,   191,   192,   217,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   188,   189,   190,   191,   192,   217,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,   189,   190,
   191,   192,   217,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
    -1,   188,   189,   190,   191,   192,   217,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,    -1,    -1,   188,   189,   190,   191,   192,
   217,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,
   189,   190,   191,   192,   217,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   188,   189,   190,   191,   192,   217,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,   189,   190,
   191,   192,   217,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
    -1,   188,   189,   190,   191,   192,   217,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,    -1,    -1,   188,   189,   190,   191,   192,
   217,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,
   189,   190,   191,   192,   217,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   188,   189,   190,   191,   192,   217,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,    -1,    -1,   188,   189,   190,
   191,   192,   217,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
    -1,   188,   189,   190,   191,   192,   217,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,    -1,    -1,   188,   189,   190,   191,   192,
   217,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   188,   189,   190,   191,   192,   215,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   188,   189,   190,   191,   192,   215,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   188,   189,   190,   191,   192,
   215,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,   189,   190,
   191,   192,   215,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   188,
   189,   190,   191,   192,   215,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,   212,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,
   190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
   210,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,
    -1,   208,    -1,   210,   188,   189,   190,   191,   192,    -1,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    -1,
    -1,    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,
   191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
   188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
   198,   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,
   208,    -1,   210,   188,   189,   190,   191,   192,    -1,   194,
   195,   196,   197,   198,   199,   200,   201,   202,    -1,    -1,
    -1,    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,
   192,    -1,   194,   195,   196,   197,   198,   199,   200,   201,
   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   188,
   189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
    -1,   210,   188,   189,   190,   191,   192,    -1,   194,   195,
   196,   197,   198,   199,   200,   201,   202,    -1,    -1,    -1,
    -1,    -1,   208,    -1,   210,   188,   189,   190,   191,   192,
    -1,   194,   195,   196,   197,   198,   199,   200,   201,   202,
    -1,    -1,    -1,    -1,    -1,   208,    -1,   210
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 167 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 173 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 174 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 184 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STLStartSolid();
      return 1;
    ;
    break;}
case 10:
#line 197 "Gmsh.y"
{
      STLAddFacet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d,
		  yyvsp[-18].d, yyvsp[-17].d, yyvsp[-16].d);
      return 1;
    ;
    break;}
case 11:
#line 203 "Gmsh.y"
{
      STLEndSolid();
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 223 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 224 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 229 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 234 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 245 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 248 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 252 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 258 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 264 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 271 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 277 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 281 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 285 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 292 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 296 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 301 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 305 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 309 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 313 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 317 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 321 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 325 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 329 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 338 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 341 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 345 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 349 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 353 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 357 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 365 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 372 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 382 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 398 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 399 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 403 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 412 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 417 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 442 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 452 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 490 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 492 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 497 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 502 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 509 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 511 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 516 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 522 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 530 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 532 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 537 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 543 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 551 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 553 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 559 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 566 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 574 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 576 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 582 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 589 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 597 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 599 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 605 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 612 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 620 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 622 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 629 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 639 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 647 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 649 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 656 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 666 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 674 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 676 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 683 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 693 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 701 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 703 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 711 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 721 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 729 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 731 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 739 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 749 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 757 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 759 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 767 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 777 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 785 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 787 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 795 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 805 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 813 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 815 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 823 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 833 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 841 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 843 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 851 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 861 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 869 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 871 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 883 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 899 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 907 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 909 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 921 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 937 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 945 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 947 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 959 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 975 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 983 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 985 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 995 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1008 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1016 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1018 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1028 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1041 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1049 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1051 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1061 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1074 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1082 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1084 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1093 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1106 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1114 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1116 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1125 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1138 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1146 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1148 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1157 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1170 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1178 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1183 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1191 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1198 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1205 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1210 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1218 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1225 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1233 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1240 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1242 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1247 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1254 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1255 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1256 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1257 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1258 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1262 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1263 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1271 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 220:
#line 1302 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 221:
#line 1341 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1395 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1412 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 224:
#line 1423 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 225:
#line 1442 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 226:
#line 1456 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 227:
#line 1473 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 228:
#line 1499 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1526 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 230:
#line 1540 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 231:
#line 1557 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 232:
#line 1571 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 233:
#line 1588 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1608 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1631 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1641 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 237:
#line 1660 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1676 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1692 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1711 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1730 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1748 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1766 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1784 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1810 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1828 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1855 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1874 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1898 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1922 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1948 "Gmsh.y"
{
      // define a new line
      int num = (int)yyvsp[-7].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_DISCRETE, 1, NULL, NULL, -1, -1, 0, 1);
	c->theSegmRep = new SEGM_rep((int)yyvsp[-3].d, yyvsp[-1].l);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1965 "Gmsh.y"
{
      // add a poly rep to an existing line
      int num = (int)yyvsp[-7].d, type = 0;
      Curve *c = FindCurve(num, THEM);
      if(!c) {
	yymsg(GERROR, "Unknown curve %d", num);
	List_Delete(yyvsp[-1].l);
      }
      else{
	c->theSegmRep = new SEGM_rep((int)yyvsp[-3].d, yyvsp[-1].l);
	type = c->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 253:
#line 1981 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 1998 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 255:
#line 2016 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2035 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2054 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2093 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2119 "Gmsh.y"
{
      // define a new surface
      int num = (int)yyvsp[-10].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	s->Support = s;
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      yyval.s.Type = MSH_SURF_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2139 "Gmsh.y"
{
      // add a poly rep to an existing surface
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2158 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2176 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2195 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2212 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2228 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2248 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 267:
#line 2265 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 268:
#line 2282 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 269:
#line 2303 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2308 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 271:
#line 2313 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 272:
#line 2318 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 273:
#line 2325 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 274:
#line 2326 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 275:
#line 2327 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 276:
#line 2332 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 277:
#line 2336 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 278:
#line 2340 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2356 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 280:
#line 2372 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 281:
#line 2388 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 282:
#line 2409 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 283:
#line 2423 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 284:
#line 2429 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 285:
#line 2435 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 286:
#line 2447 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 287:
#line 2456 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 288:
#line 2466 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 289:
#line 2476 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2495 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 291:
#line 2509 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 292:
#line 2517 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 293:
#line 2523 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 294:
#line 2534 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 295:
#line 2548 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 296:
#line 2592 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 297:
#line 2607 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 298:
#line 2623 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 299:
#line 2633 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 300:
#line 2644 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 301:
#line 2648 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 302:
#line 2652 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 303:
#line 2656 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 304:
#line 2669 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 305:
#line 2684 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 306:
#line 2700 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 307:
#line 2726 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 308:
#line 2753 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 309:
#line 2785 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 310:
#line 2792 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 311:
#line 2797 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 312:
#line 2803 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 313:
#line 2807 "Gmsh.y"
{
    ;
    break;}
case 314:
#line 2818 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 315:
#line 2834 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 316:
#line 2850 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 317:
#line 2866 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2871 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2887 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 320:
#line 2892 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2908 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2913 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 2931 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 324:
#line 2954 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 325:
#line 2977 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 326:
#line 3000 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 327:
#line 3005 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3028 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 329:
#line 3033 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3056 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 331:
#line 3061 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 332:
#line 3087 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 333:
#line 3110 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 334:
#line 3133 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 335:
#line 3156 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 336:
#line 3161 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 337:
#line 3184 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 338:
#line 3190 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 339:
#line 3213 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 340:
#line 3219 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 341:
#line 3245 "Gmsh.y"
{
    ;
    break;}
case 342:
#line 3248 "Gmsh.y"
{
    ;
    break;}
case 343:
#line 3254 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 344:
#line 3280 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 345:
#line 3304 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 346:
#line 3313 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 347:
#line 3331 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 348:
#line 3349 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 349:
#line 3367 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 350:
#line 3394 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 351:
#line 3420 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 352:
#line 3446 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 353:
#line 3460 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 354:
#line 3479 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 355:
#line 3483 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 356:
#line 3492 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 357:
#line 3493 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 358:
#line 3494 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 359:
#line 3495 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 360:
#line 3496 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 361:
#line 3500 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 362:
#line 3501 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 363:
#line 3502 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 364:
#line 3503 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 365:
#line 3504 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 366:
#line 3505 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 367:
#line 3506 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 368:
#line 3507 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 369:
#line 3509 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 370:
#line 3515 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 371:
#line 3516 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 372:
#line 3517 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 373:
#line 3518 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 374:
#line 3519 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 375:
#line 3520 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 376:
#line 3521 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 377:
#line 3522 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 378:
#line 3523 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 379:
#line 3524 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 380:
#line 3525 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 381:
#line 3526 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 382:
#line 3527 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 383:
#line 3528 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 384:
#line 3529 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 385:
#line 3530 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 386:
#line 3531 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 387:
#line 3532 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 388:
#line 3533 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3534 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 390:
#line 3535 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3536 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 392:
#line 3537 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3538 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 394:
#line 3539 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 395:
#line 3540 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 396:
#line 3541 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 397:
#line 3542 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 398:
#line 3543 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 399:
#line 3544 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 400:
#line 3545 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 401:
#line 3546 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 402:
#line 3548 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 403:
#line 3549 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 404:
#line 3550 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 405:
#line 3551 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 406:
#line 3552 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 407:
#line 3553 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 408:
#line 3554 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 409:
#line 3555 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3556 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 411:
#line 3557 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3558 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 413:
#line 3559 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 414:
#line 3560 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 415:
#line 3561 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 416:
#line 3562 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 417:
#line 3563 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 418:
#line 3564 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 419:
#line 3565 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 420:
#line 3566 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 421:
#line 3567 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 422:
#line 3568 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 423:
#line 3577 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 424:
#line 3578 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 425:
#line 3579 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 426:
#line 3580 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 427:
#line 3581 "Gmsh.y"
{ yyval.d = GMSH_MAJOR_VERSION; ;
    break;}
case 428:
#line 3582 "Gmsh.y"
{ yyval.d = GMSH_MINOR_VERSION; ;
    break;}
case 429:
#line 3583 "Gmsh.y"
{ yyval.d = GMSH_PATCH_VERSION; ;
    break;}
case 430:
#line 3588 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 431:
#line 3601 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 432:
#line 3621 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 433:
#line 3635 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 434:
#line 3648 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 435:
#line 3671 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 436:
#line 3689 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 437:
#line 3707 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 438:
#line 3725 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 439:
#line 3743 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 440:
#line 3751 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 441:
#line 3755 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 442:
#line 3759 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 443:
#line 3763 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 444:
#line 3767 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 445:
#line 3774 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 446:
#line 3778 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 447:
#line 3782 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 448:
#line 3786 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 449:
#line 3793 "Gmsh.y"
{
    ;
    break;}
case 450:
#line 3796 "Gmsh.y"
{
    ;
    break;}
case 451:
#line 3802 "Gmsh.y"
{
    ;
    break;}
case 452:
#line 3805 "Gmsh.y"
{
    ;
    break;}
case 453:
#line 3811 "Gmsh.y"
{
    ;
    break;}
case 454:
#line 3814 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 455:
#line 3818 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 456:
#line 3825 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 457:
#line 3830 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 458:
#line 3838 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 459:
#line 3843 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 460:
#line 3847 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 461:
#line 3851 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 462:
#line 3863 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 463:
#line 3869 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 464:
#line 3880 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 465:
#line 3900 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 466:
#line 3910 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 467:
#line 3920 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 468:
#line 3932 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 469:
#line 3949 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 470:
#line 3968 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 471:
#line 3992 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 472:
#line 4021 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 473:
#line 4026 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 474:
#line 4030 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 475:
#line 4034 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 476:
#line 4047 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 477:
#line 4051 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 478:
#line 4063 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 479:
#line 4070 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 480:
#line 4092 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 481:
#line 4096 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 482:
#line 4111 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 483:
#line 4116 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 484:
#line 4123 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 485:
#line 4127 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 486:
#line 4135 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 487:
#line 4143 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 488:
#line 4157 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 489:
#line 4171 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 490:
#line 4175 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 491:
#line 4194 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 492:
#line 4216 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4239 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
