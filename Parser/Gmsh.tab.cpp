
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSphere	299
#define	tSurface	300
#define	tSpline	301
#define	tVolume	302
#define	tCharacteristic	303
#define	tLength	304
#define	tParametric	305
#define	tElliptic	306
#define	tPlane	307
#define	tRuled	308
#define	tTransfinite	309
#define	tComplex	310
#define	tPhysical	311
#define	tUsing	312
#define	tBump	313
#define	tProgression	314
#define	tPlugin	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tAttractor	326
#define	tLayers	327
#define	tAlias	328
#define	tAliasWithOptions	329
#define	tText2D	330
#define	tText3D	331
#define	tInterpolationScheme	332
#define	tTime	333
#define	tGrain	334
#define	tCombine	335
#define	tBSpline	336
#define	tBezier	337
#define	tNurbs	338
#define	tOrder	339
#define	tKnots	340
#define	tColor	341
#define	tColorTable	342
#define	tFor	343
#define	tIn	344
#define	tEndFor	345
#define	tIf	346
#define	tEndIf	347
#define	tExit	348
#define	tReturn	349
#define	tCall	350
#define	tFunction	351
#define	tShow	352
#define	tHide	353
#define	tGetValue	354
#define	tGMSH_MAJOR_VERSION	355
#define	tGMSH_MINOR_VERSION	356
#define	tGMSH_PATCH_VERSION	357
#define	tAFFECTPLUS	358
#define	tAFFECTMINUS	359
#define	tAFFECTTIMES	360
#define	tAFFECTDIVIDE	361
#define	tOR	362
#define	tAND	363
#define	tEQUAL	364
#define	tNOTEQUAL	365
#define	tLESSOREQUAL	366
#define	tGREATEROREQUAL	367
#define	tPLUSPLUS	368
#define	tMINUSMINUS	369
#define	UNARYPREC	370

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.300 2007-02-01 21:55:10 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "GeoUtils.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 77 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1191
#define	YYFLAG		-32768
#define	YYNTBASE	137

#define YYTRANSLATE(x) ((unsigned)(x) <= 370 ? yytranslate[x] : 203)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   122,     2,   132,     2,   121,     2,     2,   127,
   128,   119,   117,   133,   118,   131,   120,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   113,
     2,   115,   108,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   129,     2,   130,   126,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   134,     2,   135,   136,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   109,   110,   111,   112,   114,   116,   123,   124,   125
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   190,   197,   204,   206,   208,   210,   212,   214,   216,
   218,   223,   231,   241,   248,   255,   259,   266,   273,   283,
   290,   300,   306,   315,   324,   336,   343,   353,   363,   373,
   375,   377,   385,   398,   407,   420,   427,   435,   443,   451,
   461,   469,   479,   497,   505,   513,   525,   534,   547,   556,
   565,   574,   582,   591,   600,   609,   617,   626,   632,   644,
   650,   660,   662,   664,   666,   667,   670,   677,   684,   691,
   698,   703,   710,   717,   724,   729,   736,   740,   745,   751,
   755,   759,   764,   769,   773,   781,   789,   793,   801,   805,
   808,   811,   827,   830,   837,   846,   855,   866,   868,   871,
   873,   877,   882,   884,   890,   902,   916,   917,   925,   926,
   940,   941,   957,   966,   975,   984,   997,  1010,  1023,  1038,
  1053,  1068,  1069,  1082,  1083,  1096,  1097,  1110,  1111,  1128,
  1129,  1146,  1147,  1164,  1165,  1184,  1185,  1204,  1205,  1224,
  1226,  1229,  1235,  1243,  1253,  1256,  1263,  1273,  1283,  1292,
  1302,  1311,  1320,  1327,  1332,  1343,  1354,  1365,  1376,  1379,
  1381,  1385,  1388,  1391,  1394,  1398,  1402,  1406,  1410,  1414,
  1418,  1422,  1426,  1430,  1434,  1438,  1442,  1446,  1450,  1456,
  1461,  1466,  1471,  1476,  1481,  1486,  1491,  1496,  1501,  1506,
  1513,  1518,  1523,  1528,  1533,  1538,  1543,  1550,  1557,  1564,
  1569,  1574,  1579,  1584,  1589,  1594,  1599,  1604,  1609,  1614,
  1619,  1626,  1631,  1636,  1641,  1646,  1651,  1656,  1663,  1670,
  1677,  1682,  1684,  1686,  1688,  1690,  1692,  1694,  1696,  1698,
  1704,  1709,  1714,  1717,  1723,  1727,  1734,  1739,  1747,  1754,
  1756,  1759,  1762,  1766,  1770,  1782,  1792,  1800,  1808,  1810,
  1814,  1816,  1818,  1821,  1825,  1830,  1834,  1840,  1845,  1847,
  1849,  1851,  1855,  1860,  1867,  1875,  1877,  1879,  1883,  1887,
  1897,  1905,  1907,  1913,  1917,  1924,  1926,  1930,  1932,  1934,
  1941,  1946,  1951,  1956,  1963,  1970
};

static const short yyrhs[] = {   138,
     0,     1,     6,     0,     0,   138,   139,     0,   142,     0,
   141,     0,   161,     0,   163,     0,   164,     0,   167,     0,
   168,     0,   169,     0,   170,     0,   173,     0,   188,     0,
   189,     0,   190,     0,   172,     0,   171,     0,   115,     0,
   115,   115,     0,    33,   127,     5,   128,     6,     0,    33,
   127,     5,   128,   140,   202,     6,     0,    33,   127,     5,
   133,   198,   128,     6,     0,    33,   127,     5,   133,   198,
   128,   140,   202,     6,     0,     4,     5,   134,   143,   135,
     6,     0,     4,     5,     4,   193,   134,   143,   135,     6,
     0,     0,   143,   146,     0,   143,   150,     0,   143,   153,
     0,   143,   155,     0,   143,   156,     0,   143,   158,     0,
   191,     0,   144,   133,   191,     0,   191,     0,   145,   133,
   191,     0,     0,     0,     4,   147,   127,   144,   128,   148,
   134,   145,   135,     6,     0,   202,     0,   149,   133,   202,
     0,     0,    76,   127,   191,   133,   191,   133,   191,   128,
   151,   134,   149,   135,     6,     0,   202,     0,   152,   133,
   202,     0,     0,    77,   127,   191,   133,   191,   133,   191,
   133,   191,   128,   154,   134,   152,   135,     6,     0,    78,
   134,   195,   135,   134,   195,   135,     6,     0,     0,    79,
   157,   134,   145,   135,     6,     0,    80,   127,   191,   128,
   196,     6,     0,     7,     0,   104,     0,   105,     0,   106,
     0,   107,     0,   123,     0,   124,     0,     4,   159,   191,
     6,     0,     4,   129,   191,   130,   159,   191,     6,     0,
     4,   129,   134,   198,   135,   130,   159,   196,     6,     0,
     4,   129,   130,     7,   196,     6,     0,     4,   129,   130,
   104,   196,     6,     0,     4,   160,     6,     0,     4,   129,
   191,   130,   160,     6,     0,     4,   131,     4,     7,   202,
     6,     0,     4,   129,   191,   130,   131,     4,     7,   202,
     6,     0,     4,   131,     4,   159,   191,     6,     0,     4,
   129,   191,   130,   131,     4,   159,   191,     6,     0,     4,
   131,     4,   160,     6,     0,     4,   129,   191,   130,   131,
     4,   160,     6,     0,     4,   131,    87,   131,     4,     7,
   199,     6,     0,     4,   129,   191,   130,   131,    87,   131,
     4,     7,   199,     6,     0,     4,   131,    88,     7,   200,
     6,     0,     4,   129,   191,   130,   131,    88,     7,   200,
     6,     0,    61,   127,     4,   128,   131,     4,     7,   191,
     6,     0,    61,   127,     4,   128,   131,     4,     7,   202,
     6,     0,   191,     0,   202,     0,    41,   127,   191,   128,
     7,   193,     6,     0,    41,   127,   191,   128,    90,    46,
   134,   191,   135,     7,   193,     6,     0,    57,    41,   127,
   162,   128,     7,   196,     6,     0,    72,    41,   196,     7,
   134,   191,   133,   191,   133,   191,   135,     6,     0,    49,
    50,   196,     7,   191,     6,     0,    44,   127,   191,   128,
     7,   196,     6,     0,    47,   127,   191,   128,     7,   196,
     6,     0,    42,   127,   191,   128,     7,   196,     6,     0,
    42,   127,   191,   128,     7,   196,    53,   193,     6,     0,
    43,   127,   191,   128,     7,   196,     6,     0,    43,   127,
   191,   128,     7,   196,    53,   193,     6,     0,    51,   127,
   191,   128,     7,   134,   191,   133,   191,   133,     5,   133,
     5,   133,     5,   135,     6,     0,    82,   127,   191,   128,
     7,   196,     6,     0,    83,   127,   191,   128,     7,   196,
     6,     0,    84,   127,   191,   128,     7,   196,    86,   196,
    85,   191,     6,     0,    44,    68,   127,   191,   128,     7,
   196,     6,     0,    72,    44,   196,     7,   134,   191,   133,
   191,   133,   191,   135,     6,     0,    57,    44,   127,   162,
   128,     7,   196,     6,     0,    53,    46,   127,   191,   128,
     7,   196,     6,     0,    54,    46,   127,   191,   128,     7,
   196,     6,     0,    45,   127,   191,   128,     7,   196,     6,
     0,    46,    68,   127,   191,   128,     7,   196,     6,     0,
    57,    46,   127,   162,   128,     7,   196,     6,     0,    56,
    48,   127,   191,   128,     7,   196,     6,     0,    48,   127,
   191,   128,     7,   196,     6,     0,    57,    48,   127,   162,
   128,     7,   196,     6,     0,    63,   193,   134,   165,   135,
     0,    62,   134,   193,   133,   193,   133,   191,   135,   134,
   165,   135,     0,    64,   193,   134,   165,   135,     0,    65,
   134,   193,   133,   191,   135,   134,   165,   135,     0,   167,
     0,   166,     0,   164,     0,     0,   166,   163,     0,   166,
    41,   134,   198,   135,     6,     0,   166,    44,   134,   198,
   135,     6,     0,   166,    46,   134,   198,   135,     6,     0,
   166,    48,   134,   198,   135,     6,     0,    67,   134,   166,
   135,     0,    67,     4,   129,   191,   130,     6,     0,    74,
     4,   129,   191,   130,     6,     0,    75,     4,   129,   191,
   130,     6,     0,    70,   134,   166,   135,     0,    70,     4,
   129,   191,   130,     6,     0,    70,     4,     6,     0,    70,
     4,     4,     6,     0,    87,   199,   134,   166,   135,     0,
    98,   202,     6,     0,    99,   202,     6,     0,    98,   134,
   166,   135,     0,    99,   134,   166,   135,     0,     4,   202,
     6,     0,     4,     4,   129,   191,   130,   202,     6,     0,
     4,     4,     4,   129,   191,   130,     6,     0,     4,   191,
     6,     0,    61,   127,     4,   128,   131,     4,     6,     0,
    81,     4,     6,     0,    94,     6,     0,    38,     6,     0,
    38,   134,   191,   133,   191,   133,   191,   133,   191,   133,
   191,   133,   191,   135,     6,     0,    39,     6,     0,    89,
   127,   191,     8,   191,   128,     0,    89,   127,   191,     8,
   191,     8,   191,   128,     0,    89,     4,    90,   134,   191,
     8,   191,   135,     0,    89,     4,    90,   134,   191,     8,
   191,     8,   191,   135,     0,    91,     0,    97,     4,     0,
    95,     0,    96,     4,     6,     0,    92,   127,   191,   128,
     0,    93,     0,    66,   193,   134,   166,   135,     0,    66,
   134,   193,   133,   193,   133,   191,   135,   134,   166,   135,
     0,    66,   134,   193,   133,   193,   133,   193,   133,   191,
   135,   134,   166,   135,     0,     0,    66,   193,   134,   166,
   174,   186,   135,     0,     0,    66,   134,   193,   133,   193,
   133,   191,   135,   134,   166,   175,   186,   135,     0,     0,
    66,   134,   193,   133,   193,   133,   193,   133,   191,   135,
   134,   166,   176,   186,   135,     0,    66,    41,   134,   191,
   133,   193,   135,     6,     0,    66,    44,   134,   191,   133,
   193,   135,     6,     0,    66,    46,   134,   191,   133,   193,
   135,     6,     0,    66,    41,   134,   191,   133,   193,   133,
   193,   133,   191,   135,     6,     0,    66,    44,   134,   191,
   133,   193,   133,   193,   133,   191,   135,     6,     0,    66,
    46,   134,   191,   133,   193,   133,   193,   133,   191,   135,
     6,     0,    66,    41,   134,   191,   133,   193,   133,   193,
   133,   193,   133,   191,   135,     6,     0,    66,    44,   134,
   191,   133,   193,   133,   193,   133,   193,   133,   191,   135,
     6,     0,    66,    46,   134,   191,   133,   193,   133,   193,
   133,   193,   133,   191,   135,     6,     0,     0,    66,    41,
   134,   191,   133,   193,   135,   177,   134,   186,   135,     6,
     0,     0,    66,    44,   134,   191,   133,   193,   135,   178,
   134,   186,   135,     6,     0,     0,    66,    46,   134,   191,
   133,   193,   135,   179,   134,   186,   135,     6,     0,     0,
    66,    41,   134,   191,   133,   193,   133,   193,   133,   191,
   135,   180,   134,   186,   135,     6,     0,     0,    66,    44,
   134,   191,   133,   193,   133,   193,   133,   191,   135,   181,
   134,   186,   135,     6,     0,     0,    66,    46,   134,   191,
   133,   193,   133,   193,   133,   191,   135,   182,   134,   186,
   135,     6,     0,     0,    66,    41,   134,   191,   133,   193,
   133,   193,   133,   193,   133,   191,   135,   183,   134,   186,
   135,     6,     0,     0,    66,    44,   134,   191,   133,   193,
   133,   193,   133,   193,   133,   191,   135,   184,   134,   186,
   135,     6,     0,     0,    66,    46,   134,   191,   133,   193,
   133,   193,   133,   193,   133,   191,   135,   185,   134,   186,
   135,     6,     0,   187,     0,   186,   187,     0,    73,   134,
   191,   135,     6,     0,    73,   134,   196,   133,   196,   135,
     6,     0,    73,   134,   196,   133,   196,   133,   196,   135,
     6,     0,    69,     6,     0,    55,    44,   196,     7,   191,
     6,     0,    55,    44,   196,     7,   191,    58,    60,   191,
     6,     0,    55,    44,   196,     7,   191,    58,    59,   191,
     6,     0,    55,    46,   134,   191,   135,     7,   196,     6,
     0,    55,    46,   134,   191,   135,     7,   196,     4,     6,
     0,    52,    46,   134,   191,   135,     7,   196,     6,     0,
    55,    48,   134,   191,   135,     7,   196,     6,     0,    69,
    46,   196,     7,   191,     6,     0,    69,    46,   196,     6,
     0,    41,   134,   198,   135,    90,    46,   134,   191,   135,
     6,     0,    44,   134,   198,   135,    90,    46,   134,   191,
   135,     6,     0,    44,   134,   198,   135,    90,    48,   134,
   191,   135,     6,     0,    46,   134,   198,   135,    90,    48,
   134,   191,   135,     6,     0,    71,     6,     0,   192,     0,
   127,   191,   128,     0,   118,   191,     0,   117,   191,     0,
   122,   191,     0,   191,   118,   191,     0,   191,   117,   191,
     0,   191,   119,   191,     0,   191,   120,   191,     0,   191,
   121,   191,     0,   191,   126,   191,     0,   191,   113,   191,
     0,   191,   115,   191,     0,   191,   114,   191,     0,   191,
   116,   191,     0,   191,   111,   191,     0,   191,   112,   191,
     0,   191,   110,   191,     0,   191,   109,   191,     0,   191,
   108,   191,     8,   191,     0,    12,   127,   191,   128,     0,
    13,   127,   191,   128,     0,    14,   127,   191,   128,     0,
    15,   127,   191,   128,     0,    16,   127,   191,   128,     0,
    17,   127,   191,   128,     0,    18,   127,   191,   128,     0,
    19,   127,   191,   128,     0,    20,   127,   191,   128,     0,
    22,   127,   191,   128,     0,    23,   127,   191,   133,   191,
   128,     0,    24,   127,   191,   128,     0,    25,   127,   191,
   128,     0,    26,   127,   191,   128,     0,    27,   127,   191,
   128,     0,    28,   127,   191,   128,     0,    29,   127,   191,
   128,     0,    30,   127,   191,   133,   191,   128,     0,    31,
   127,   191,   133,   191,   128,     0,    32,   127,   191,   133,
   191,   128,     0,    21,   127,   191,   128,     0,    12,   129,
   191,   130,     0,    13,   129,   191,   130,     0,    14,   129,
   191,   130,     0,    15,   129,   191,   130,     0,    16,   129,
   191,   130,     0,    17,   129,   191,   130,     0,    18,   129,
   191,   130,     0,    19,   129,   191,   130,     0,    20,   129,
   191,   130,     0,    22,   129,   191,   130,     0,    23,   129,
   191,   133,   191,   130,     0,    24,   129,   191,   130,     0,
    25,   129,   191,   130,     0,    26,   129,   191,   130,     0,
    27,   129,   191,   130,     0,    28,   129,   191,   130,     0,
    29,   129,   191,   130,     0,    30,   129,   191,   133,   191,
   130,     0,    31,   129,   191,   133,   191,   130,     0,    32,
   129,   191,   133,   191,   130,     0,    21,   129,   191,   130,
     0,     3,     0,     9,     0,    10,     0,    11,     0,   101,
     0,   102,     0,   103,     0,     4,     0,     4,   136,   134,
   191,   135,     0,     4,   129,   191,   130,     0,   132,     4,
   129,   130,     0,     4,   160,     0,     4,   129,   191,   130,
   160,     0,     4,   131,     4,     0,     4,   129,   191,   130,
   131,     4,     0,     4,   131,     4,   160,     0,     4,   129,
   191,   130,   131,     4,   160,     0,   100,   127,     5,   133,
   191,   128,     0,   194,     0,   118,   193,     0,   117,   193,
     0,   193,   118,   193,     0,   193,   117,   193,     0,   134,
   191,   133,   191,   133,   191,   133,   191,   133,   191,   135,
     0,   134,   191,   133,   191,   133,   191,   133,   191,   135,
     0,   134,   191,   133,   191,   133,   191,   135,     0,   127,
   191,   133,   191,   133,   191,   128,     0,   196,     0,   195,
   133,   196,     0,   191,     0,   197,     0,   134,   135,     0,
   134,   198,   135,     0,   118,   134,   198,   135,     0,   191,
     8,   191,     0,   191,     8,   191,     8,   191,     0,    41,
   134,   191,   135,     0,   164,     0,   167,     0,   173,     0,
     4,   129,   130,     0,   118,     4,   129,   130,     0,     4,
   129,   134,   198,   135,   130,     0,   118,     4,   129,   134,
   198,   135,   130,     0,   191,     0,   197,     0,   198,   133,
   191,     0,   198,   133,   197,     0,   134,   191,   133,   191,
   133,   191,   133,   191,   135,     0,   134,   191,   133,   191,
   133,   191,   135,     0,     4,     0,     4,   131,    87,   131,
     4,     0,   134,   201,   135,     0,     4,   129,   191,   130,
   131,    88,     0,   199,     0,   201,   133,   199,     0,     5,
     0,    40,     0,    35,   127,   202,   133,   202,   128,     0,
    36,   127,   202,   128,     0,    37,   127,   202,   128,     0,
    34,   127,   202,   128,     0,    34,   127,   202,   133,   198,
   128,     0,    34,   127,     4,   131,     4,   128,     0,    34,
   127,     4,   129,   191,   130,   131,     4,   128,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   142,   144,   149,   151,   154,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   172,
   177,   183,   189,   204,   217,   245,   253,   262,   270,   271,
   272,   273,   274,   275,   278,   281,   285,   288,   292,   483,
   501,   511,   517,   524,   532,   538,   544,   551,   559,   565,
   573,   578,   582,   591,   593,   594,   595,   596,   599,   601,
   604,   639,   678,   732,   749,   767,   778,   797,   811,   828,
   854,   881,   895,   912,   926,   943,   963,   986,   996,  1010,
  1015,  1023,  1045,  1065,  1081,  1088,  1110,  1128,  1146,  1164,
  1190,  1208,  1234,  1254,  1278,  1302,  1328,  1345,  1352,  1371,
  1389,  1427,  1449,  1465,  1485,  1502,  1519,  1539,  1545,  1550,
  1555,  1562,  1564,  1565,  1568,  1573,  1577,  1593,  1609,  1625,
  1645,  1660,  1666,  1672,  1683,  1693,  1703,  1719,  1737,  1751,
  1758,  1764,  1773,  1786,  1832,  1847,  1858,  1878,  1888,  1910,
  1914,  1919,  1924,  1934,  1951,  1967,  1993,  2020,  2052,  2059,
  2064,  2070,  2074,  2082,  2091,  2099,  2107,  2112,  2120,  2125,
  2133,  2138,  2148,  2155,  2162,  2169,  2176,  2183,  2190,  2197,
  2204,  2211,  2216,  2223,  2228,  2235,  2240,  2247,  2252,  2259,
  2264,  2271,  2276,  2283,  2288,  2295,  2300,  2307,  2312,  2322,
  2326,  2331,  2341,  2363,  2387,  2395,  2414,  2432,  2450,  2479,
  2514,  2519,  2546,  2560,  2578,  2585,  2591,  2594,  2602,  2612,
  2614,  2615,  2616,  2617,  2618,  2619,  2620,  2621,  2628,  2629,
  2630,  2631,  2632,  2633,  2634,  2635,  2636,  2637,  2638,  2639,
  2640,  2641,  2642,  2643,  2644,  2645,  2646,  2647,  2648,  2649,
  2650,  2651,  2652,  2653,  2654,  2655,  2656,  2657,  2658,  2659,
  2661,  2662,  2663,  2664,  2665,  2666,  2667,  2668,  2669,  2670,
  2671,  2672,  2673,  2674,  2675,  2676,  2677,  2678,  2679,  2680,
  2681,  2686,  2691,  2692,  2693,  2694,  2695,  2696,  2700,  2716,
  2731,  2751,  2765,  2778,  2801,  2819,  2837,  2855,  2873,  2880,
  2885,  2889,  2893,  2897,  2903,  2908,  2912,  2916,  2922,  2928,
  2935,  2941,  2945,  2950,  2954,  2965,  2972,  2983,  3003,  3013,
  3023,  3033,  3050,  3069,  3093,  3121,  3127,  3131,  3135,  3147,
  3152,  3164,  3171,  3192,  3197,  3211,  3217,  3223,  3228,  3236,
  3244,  3258,  3272,  3276,  3295,  3317
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere","tSurface",
"tSpline","tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane",
"tRuled","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tPlugin","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tAttractor","tLayers","tAlias",
"tAliasWithOptions","tText2D","tText3D","tInterpolationScheme","tTime","tGrain",
"tCombine","tBSpline","tBezier","tNurbs","tOrder","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND",
"tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'",
"'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems","GeoFormatItem",
"SendToFile","Printf","View","Views","ElementCoords","ElementValues","Element",
"@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4","InterpolationMatrix",
"Time","@5","Grain","NumericAffectation","NumericIncrement","Affectation","PhysicalId",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify",
"Visibility","Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12",
"@13","@14","@15","@16","@17","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Embedding","Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   137,   137,   138,   138,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   140,
   140,   141,   141,   141,   141,   142,   142,   143,   143,   143,
   143,   143,   143,   143,   144,   144,   145,   145,   147,   148,
   146,   149,   149,   151,   150,   152,   152,   154,   153,   155,
   157,   156,   158,   159,   159,   159,   159,   159,   160,   160,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   162,
   162,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   164,   164,   164,
   164,   165,   165,   165,   166,   166,   166,   166,   166,   166,
   167,   167,   167,   167,   168,   168,   168,   168,   169,   170,
   170,   170,   170,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   173,   173,   173,   174,   173,   175,   173,
   176,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   177,   173,   178,   173,   179,   173,   180,   173,   181,
   173,   182,   173,   183,   173,   184,   173,   185,   173,   186,
   186,   187,   187,   187,   187,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   189,   189,   189,   189,   190,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   193,
   193,   193,   193,   193,   194,   194,   194,   194,   195,   195,
   196,   196,   196,   196,   196,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   198,   198,   198,   198,   199,
   199,   199,   199,   200,   200,   201,   201,   202,   202,   202,
   202,   202,   202,   202,   202,   202
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
     0,     6,     6,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     6,     3,     6,     6,     9,     6,
     9,     5,     8,     8,    11,     6,     9,     9,     9,     1,
     1,     7,    12,     8,    12,     6,     7,     7,     7,     9,
     7,     9,    17,     7,     7,    11,     8,    12,     8,     8,
     8,     7,     8,     8,     8,     7,     8,     5,    11,     5,
     9,     1,     1,     1,     0,     2,     6,     6,     6,     6,
     4,     6,     6,     6,     4,     6,     3,     4,     5,     3,
     3,     4,     4,     3,     7,     7,     3,     7,     3,     2,
     2,    15,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     5,    11,    13,     0,     7,     0,    13,
     0,    15,     8,     8,     8,    12,    12,    12,    14,    14,
    14,     0,    12,     0,    12,     0,    12,     0,    16,     0,
    16,     0,    16,     0,    18,     0,    18,     0,    18,     1,
     2,     5,     7,     9,     2,     6,     9,     9,     8,     9,
     8,     8,     6,     4,    10,    10,    10,    10,     2,     1,
     3,     2,     2,     2,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     4,     4,     4,     6,     6,     6,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     1,     1,     1,     1,     1,     1,     1,     1,     5,
     4,     4,     2,     5,     3,     6,     4,     7,     6,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     1,     3,
     1,     1,     2,     3,     4,     3,     5,     4,     1,     1,
     1,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     1,     6,
     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   148,     0,   153,     0,   150,     0,     0,     0,
     0,     4,     6,     5,     7,     8,     9,    10,    11,    12,
    13,    19,    18,    14,    15,    16,    17,   272,   279,   328,
    54,   273,   274,   275,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     0,   276,   277,   278,    55,    56,    57,    58,     0,     0,
     0,    59,    60,     0,     0,     0,     0,     0,     0,     0,
   210,     0,     0,   141,     0,   143,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   290,     0,
     0,     0,     0,     0,     0,     0,     0,   115,     0,     0,
   115,   209,     0,     0,     0,     0,     0,     0,     0,     0,
   322,     0,     0,     0,     0,     0,   140,     0,   149,   328,
   115,     0,   115,     0,     0,     0,     0,     0,   283,     0,
    28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   279,   213,
   212,   214,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    66,   137,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   134,     0,
     0,     0,   279,     0,     0,   309,   310,   311,   316,   317,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   301,     0,   302,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   292,   291,     0,     0,     0,     0,   115,   115,     0,     0,
     0,     0,     0,     0,     0,     0,   115,     0,     0,     0,
     0,   127,     0,     0,     0,     0,     0,     0,   139,     0,
     0,     0,     0,     0,   115,     0,     0,     0,   151,     0,
   130,     0,   131,     0,     0,   285,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   211,     0,
     0,     0,     0,    54,     0,     0,     0,     0,     0,    61,
     0,   228,   227,   225,   226,   221,   223,   222,   224,   216,
   215,   217,   218,   219,   220,     0,     0,     0,     0,     0,
     0,   279,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   303,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    80,    81,
     0,     0,     0,     0,     0,     0,     0,   294,   293,   114,
     0,   113,   112,     0,     0,     0,     0,     0,     0,     0,
   157,     0,     0,     0,     0,     0,   121,   116,   204,     0,
   128,     0,   125,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   152,   132,   133,     0,   281,
   287,     0,    28,    39,     0,     0,     0,    51,     0,     0,
    29,    30,    31,    32,    33,    34,   230,   251,   231,   252,
   232,   253,   233,   254,   234,   255,   235,   256,   236,   257,
   237,   258,   238,   259,   250,   271,   239,   260,     0,     0,
   241,   262,   242,   263,   243,   264,   244,   265,   245,   266,
   246,   267,     0,     0,     0,     0,     0,     0,     0,     0,
   333,     0,     0,   331,   332,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    72,     0,     0,     0,     0,
   282,     0,    22,    20,     0,     0,     0,     0,     0,   312,
     0,     0,     0,   306,   318,   319,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   304,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   108,   110,     0,     0,
     0,     0,     0,   154,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   129,     0,     0,     0,     0,   284,     0,   280,     0,
     0,     0,     0,     0,     0,     0,    26,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   281,    64,    65,     0,     0,     0,     0,     0,    67,    68,
    70,     0,     0,   326,     0,    76,   229,    21,     0,     0,
     0,     0,     0,     0,   308,   313,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   305,    86,     0,     0,     0,     0,   196,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   190,   122,     0,
     0,     0,     0,   203,   126,     0,     0,   123,   124,     0,
     0,     0,   323,     0,     0,     0,   144,   136,   286,   135,
     0,     0,     0,     0,     0,   299,     0,     0,   240,   261,
   247,   268,   248,   269,   249,   270,     0,   335,   334,   330,
   289,     0,    54,     0,     0,     0,     0,    62,     0,     0,
     0,   324,    23,    24,     0,     0,    82,     0,     0,     0,
   307,     0,    89,     0,    91,     0,     0,    87,     0,     0,
   102,     0,     0,    88,   106,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,     0,
     0,     0,     0,   115,     0,   172,     0,   174,     0,   176,
     0,     0,   195,     0,   158,   191,     0,     0,     0,     0,
     0,     0,    94,    95,     0,     0,     0,     0,   288,    27,
     0,    35,     0,     0,     0,     0,     0,    37,     0,     0,
     0,     0,     0,    73,     0,     0,    74,     0,   327,     0,
     0,     0,   314,     0,     0,     0,     0,    97,     0,     0,
   103,     0,     0,   201,   100,   101,     0,     0,     0,   199,
   202,   105,    84,    99,   104,   107,     0,     0,     0,   298,
     0,   297,     0,     0,   163,     0,     0,   164,     0,     0,
   165,     0,     0,     0,   301,     0,   117,   118,   119,   120,
     0,     0,     0,     0,   321,     0,   146,   145,    40,     0,
     0,     0,   300,     0,     0,     0,     0,     0,    63,    69,
    71,     0,    77,     0,    25,     0,     0,   315,     0,    90,
    92,     0,     0,     0,     0,   198,   197,   200,    78,    79,
   115,     0,   111,     0,     0,     0,     0,     0,     0,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
     0,     0,     0,    38,    52,    53,   336,     0,   325,     0,
     0,   205,   206,   207,   208,     0,     0,     0,   296,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   159,     0,
   192,     0,     0,     0,     0,   320,   147,     0,     0,     0,
     0,    75,     0,     0,     0,   109,     0,   178,     0,     0,
   180,     0,     0,   182,     0,     0,   155,     0,   115,     0,
     0,     0,     0,    96,     0,    44,     0,    50,     0,    83,
     0,   295,   166,     0,     0,   173,   167,     0,     0,   175,
   168,     0,     0,   177,     0,   161,     0,   193,    85,    98,
     0,     0,     0,     0,     0,     0,   184,     0,   186,     0,
   188,   160,   156,     0,     0,    41,     0,    48,     0,     0,
     0,   169,     0,     0,   170,     0,     0,   171,     0,     0,
   194,     0,    42,     0,   142,     0,     0,     0,     0,     0,
     0,     0,   162,     0,     0,     0,     0,   179,     0,   181,
     0,   183,     0,    43,    45,     0,    46,    93,     0,     0,
     0,     0,     0,   185,   187,   189,    47,    49,     0,     0,
     0
};

static const short yydefgoto[] = {  1189,
     2,    52,   615,    53,    54,   369,   901,   907,   541,   691,
  1029,  1152,   542,  1122,  1176,   543,  1154,   544,   545,   695,
   546,   118,   199,    55,   478,   508,   286,   491,   492,   287,
    59,    60,    61,    62,    63,   288,   665,  1088,  1134,   956,
   959,   962,  1104,  1108,  1112,  1143,  1146,  1149,   777,   778,
    65,    66,    67,   304,   121,   321,   159,   805,   806,   306,
   291,   183,   610,   725,   480
};

static const short yypact[] = {  2323,
    50,  2392,-32768,  1830,   -85,     7,    58,  -109,   -50,    20,
   -33,    98,     2,   117,   181,    69,   184,   307,   329,   332,
   154,   337,   357,   262,   270,   390,   390,   283,   429,    10,
   378,    11,   426,    34,   450,   454,   458,   342,   345,   374,
    12,    29,-32768,   382,-32768,   525,-32768,   512,   533,    23,
    32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     6,    15,
-32768,-32768,-32768,-32768,   -75,    97,   109,   171,   208,   259,
   405,   416,   441,   448,   452,   494,   502,   540,   544,   552,
   555,   576,   577,   621,   640,   427,   431,   435,   442,-32768,
   445,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2027,  2027,
  2027,-32768,-32768,  2027,  1443,    19,   574,  2027,   580,   680,
-32768,   584,   590,-32768,  2027,-32768,  2027,  1960,  2027,  2027,
   479,  2027,  1960,  2027,   483,  1960,  2027,  2027,  1376,  2027,
   466,   495,   498,  1376,   496,   506,   517,   523,   541,   547,
   582,   717,   390,   390,   390,  2027,  2027,   105,-32768,   256,
   390,   591,   606,   609,  1669,   301,   595,-32768,  1376,    26,
-32768,-32768,  1376,  1376,   620,   623,   760,  2027,  2027,  2027,
   647,  2027,   699,   724,  2027,  2027,-32768,   798,-32768,-32768,
-32768,   844,-32768,   848,   734,  2027,   861,   733,-32768,   390,
-32768,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,
  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,
  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,
  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,
  2027,  2027,  2027,   548,   493,   493,   493,   863,   684,   743,
   743,   743,  5070,    64,  1960,  4357,   303,   739,   864,   745,
   846,-32768,-32768,  2027,  2027,  2027,  2027,  2027,  2027,  2027,
  2027,  2027,  2027,  2027,  2027,  2027,  2027,  2027,-32768,   -52,
  3499,  5091,   698,   738,  2152,-32768,-32768,-32768,  2110,-32768,
   468,  5112,  5133,  2027,  5154,   575,  5175,  2027,   638,  5196,
  5217,  1795,  1237,  2110,   869,-32768,  5238,  2027,  2027,  2027,
   871,  2027,  2027,  2027,  2085,  2085,  2085,  2085,   751,   297,
-32768,-32768,  3525,  3551,   390,   390,   613,   613,   319,  2027,
  2027,  2027,  1669,  1669,  2027,   343,-32768,  2027,  2451,    91,
   874,-32768,  2027,  2468,   876,   877,  2027,  2027,-32768,  5259,
  5280,  5301,   795,  3577,-32768,   754,  2130,  5322,-32768,  2512,
-32768,  2534,-32768,  2027,  4380,     4,  2027,   388,     8,  5343,
  4403,  5364,  4426,  5385,  4449,  5406,  4472,  5427,  4495,  5448,
  4518,  5469,  4541,  5490,  4564,  5511,  4587,  5532,  4610,  5553,
  4633,  3603,  3629,  5574,  4656,  5595,  4679,  5616,  4702,  5637,
  4725,  5658,  4748,  5679,  4771,  3655,  3681,  3707,  3733,  3759,
  3785,   420,   168,   752,   761,   762,   759,  2027,-32768,  1376,
  1376,   641,    89,   493,  2027,   889,   892,    17,   767,-32768,
  2181,   644,  1230,   539,   539,   594,   594,   594,   594,   393,
   393,   743,   743,   743,   743,    25,  1960,  2027,    22,  1502,
  2027,   701,  2027,  1960,   810,   894,   896,  5700,   897,   815,
   899,  5721,   817,   901,   904,  1960,-32768,   642,  2027,   905,
  1310,  5742,  5763,  2027,  2773,  2801,  5784,   785,  6015,-32768,
   786,   787,   788,   789,   390,  2027,  2027,-32768,-32768,-32768,
   782,  2705,-32768,   783,  2027,  3811,  3837,  3863,  3473,   390,
  2578,  4794,    63,    46,    31,    84,-32768,-32768,-32768,  2027,
-32768,  4817,-32768,   790,   791,  4840,  4863,   914,   916,   919,
   796,  2027,  2595,  2027,  2027,-32768,-32768,-32768,  4886,    68,
-32768,  2829,-32768,-32768,   804,   805,   800,-32768,   808,   930,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2027,  2027,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  2027,  2027,  2027,  2027,  2027,  2027,  2027,   933,
-32768,  1960,   493,-32768,-32768,  2027,  4909,   932,   937,   809,
    37,  2027,   938,   939,   875,-32768,   940,   819,    12,   943,
-32768,  2027,-32768,   831,   493,   213,  3889,   390,   922,-32768,
  1960,  2857,  1634,  2200,  2110,-32768,   923,  1376,  1376,   944,
  1376,   123,  1376,   964,   902,  1376,  1376,   646,-32768,   936,
   839,   967,   968,   969,   581,   970,   971,   972,   973,   974,
   990,   991,   995,   422,  3915,  3941,-32768,-32768,  2885,   390,
   390,   390,   424,-32768,   -30,   996,  1960,  1960,  1960,  1960,
  1055,   997,  2027,  2027,   998,   999,  1376,  1376,  1376,  1002,
  3967,-32768,  2224,   618,  1001,  1004,-32768,  1003,-32768,    13,
   883,  2027,  2027,  1376,   881,  2027,-32768,  5805,  4932,  5826,
  4955,  5847,  4978,  5868,  5001,  5024,   888,   338,   890,  5889,
    -8,-32768,-32768,   103,   387,   880,  1010,  1076,-32768,-32768,
-32768,    12,  2027,-32768,   649,-32768,  6015,-32768,  1013,    38,
  2027,    14,   886,   650,-32768,-32768,  1960,  2027,   887,    30,
    42,  1376,  1016,   893,   898,  1018,  1376,   903,  1020,  1022,
-32768,-32768,  2027,  1376,  1376,  1376,-32768,   188,  1376,  1376,
  1376,  1376,  1376,  1376,  1376,   656,  2027,  2027,  2027,   906,
    86,   215,   237,  1669,  1024,   907,   -35,-32768,-32768,   670,
   676,   677,   693,-32768,-32768,  3993,  4019,-32768,-32768,  1025,
  1027,   949,-32768,  2027,  2027,  2027,-32768,-32768,     4,-32768,
  1030,  2027,  4045,  4071,   703,-32768,  2027,  5910,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   908,-32768,-32768,-32768,
-32768,  1376,   493,  2027,  1032,  1039,    17,-32768,  1052,  5047,
    12,-32768,-32768,-32768,   493,  4097,-32768,  2027,   929,   706,
  6015,  2027,-32768,   390,-32768,   390,  1054,-32768,  2027,  2027,
-32768,  1058,  2027,-32768,-32768,  4123,  1060,  1062,  1063,  2027,
  2027,   836,  1064,  1065,  1066,  1070,  1071,  1072,-32768,  2085,
  2913,  5931,  2689,   613,   390,  1073,   390,  1077,   390,  1078,
  2941,   443,-32768,  1376,-32768,-32768,  1079,  1080,  1081,  1082,
  2027,  2027,-32768,-32768,  1376,  2717,   330,  5952,-32768,-32768,
   392,  6015,  2027,  2027,  1376,   956,   713,  6015,  1376,  1087,
  1086,  1088,  1205,-32768,  1089,  1092,-32768,   962,-32768,  1093,
  2027,  2969,-32768,   965,  2997,    16,    21,-32768,  3025,  3053,
-32768,  3081,  2027,-32768,-32768,-32768,  1474,  1595,  1094,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1767,  1097,   977,-32768,
  2027,-32768,   978,   447,-32768,   981,   474,-32768,   982,   487,
-32768,   984,   985,  2027,   369,   975,-32768,-32768,-32768,-32768,
  4149,  4175,  1035,  2027,-32768,  2027,-32768,-32768,-32768,  2027,
  4201,  4227,-32768,  1376,  2027,  1099,  1101,   993,-32768,-32768,
-32768,    12,-32768,  1034,-32768,  4253,  1116,-32768,  1118,-32768,
-32768,  1119,  1120,  1121,  4279,-32768,-32768,-32768,-32768,-32768,
   613,  2745,-32768,  1669,   -30,  1669,   -30,  1669,   -30,-32768,
  3109,  1123,  1376,  2027,  2027,  2027,  3137,  3165,  1005,  6015,
  2027,  2027,   714,  6015,-32768,-32768,-32768,  1124,-32768,  2027,
   390,-32768,-32768,-32768,-32768,  1127,  1000,  2027,-32768,  3193,
   491,   -24,  3221,   510,   -18,  3249,   531,    40,  2639,  1006,
-32768,   722,  3277,  3305,  1894,-32768,-32768,  2027,  5973,  4305,
  1130,-32768,  4331,    44,  1008,-32768,  3333,  1131,  2027,  1132,
  1136,  2027,  1138,  1143,  2027,  1147,-32768,   -30,-32768,  1376,
  1148,  1149,  1150,-32768,   725,-32768,  2027,-32768,  2027,-32768,
  1152,-32768,-32768,  1043,  3361,-32768,-32768,  1045,  3389,-32768,
-32768,  1046,  3417,-32768,   164,  2661,  1023,-32768,-32768,-32768,
  1153,  1048,  5994,  3445,  1028,   -30,  1177,   -30,  1192,   -30,
  1193,-32768,-32768,   -30,  1194,-32768,   493,-32768,  1195,  1198,
   177,-32768,  1074,   233,-32768,  1075,   234,-32768,  1083,   236,
-32768,   726,-32768,  1084,-32768,  1069,  1199,   -30,  1200,   -30,
  1201,   -30,-32768,   493,  1204,   493,  1206,-32768,   271,-32768,
   276,-32768,   287,-32768,-32768,   729,-32768,-32768,  1207,  1208,
  1210,   493,  1213,-32768,-32768,-32768,-32768,-32768,  1221,  1222,
-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   500,-32768,-32768,   690,-32768,   156,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -251,    36,-32768,  -101,  1223,     1,  -326,  -167,     3,
-32768,-32768,-32768,-32768,-32768,  1224,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1008,  -716,
-32768,-32768,-32768,    49,-32768,   268,-32768,   247,   473,   -54,
   -71,  -601,   412,-32768,    -4
};


#define	YYLAST		6141


static const short yytable[] = {   122,
   339,   494,    57,   344,    58,   425,  1052,   724,  1055,   195,
  1058,   534,   124,   167,   170,   181,   534,   127,   200,   837,
   608,  1000,   257,   360,   128,   362,  1001,   190,   618,   341,
   613,   342,   184,   775,   131,   843,   190,   776,   775,   119,
   715,   123,   776,   834,   775,   192,   194,   845,   776,  1100,
   775,   202,   120,   203,   776,     3,    96,    97,    98,    99,
   886,   296,   100,   126,   299,    96,    97,    98,    99,   135,
   420,   100,   190,   290,   173,   446,   129,   174,   290,  1115,
   447,   290,   844,   535,   536,   537,   538,   539,   535,   536,
   537,   538,   539,   132,   846,    71,   509,   510,   135,   885,
   133,    96,    97,    98,    99,   258,   259,   100,   775,    71,
  1080,   619,   776,   131,   112,   113,  1083,  1141,   139,  1144,
   829,  1147,   686,   716,   717,  1150,   112,   113,   112,   113,
   325,   326,   325,   326,   196,   136,   197,   325,   326,   614,
   125,   198,   540,   168,   171,   182,   130,   801,   201,  1169,
   609,  1171,   614,  1173,   343,   185,   191,   250,   251,   252,
   325,   326,   253,   256,   669,   193,   261,   421,   744,   501,
   745,   602,   132,   281,  1086,   282,   289,   292,   293,   668,
   295,   289,   297,   422,   289,   300,   301,   523,   307,   127,
   112,   113,   105,   106,   107,   108,   667,   144,   686,   145,
   290,   146,   325,   326,   323,   324,   105,   106,   107,   108,
   138,   112,   113,   324,   481,   482,   483,   670,   875,   601,
   876,   325,   326,   204,   134,   205,   350,   351,   352,   919,
   354,   468,   775,   357,   358,   206,   776,   207,   327,   413,
   414,   415,   416,   137,   365,   775,   860,   861,   290,   776,
   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
   380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
   390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
   400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
   410,   411,   426,   158,   160,   591,   166,   208,  1132,   209,
   592,   775,   775,   289,   775,   776,   776,   138,   776,   424,
   140,  1157,   431,   432,   433,   434,   435,   436,   437,   438,
   439,   440,   441,   442,   443,   444,   445,   490,   490,   493,
   493,   325,   326,   251,   210,   886,   211,   976,   886,   775,
   730,   886,   458,   776,   775,   454,   462,   877,   776,   878,
   251,   289,   141,   325,   326,   775,   471,   472,   473,   776,
   475,   476,   477,   479,   479,   479,   479,  1159,  1161,   879,
  1163,   880,   325,   326,   142,   616,   453,   143,   496,   497,
   498,   250,   251,   499,   147,   212,   502,   213,   152,   328,
  1038,   512,   290,   823,   638,   516,   517,   148,   886,   626,
   149,   531,   150,   153,   151,  1179,   105,   106,   107,   108,
  1180,   290,   529,   325,   326,   532,   161,   325,   326,   604,
   320,  1181,   322,   169,   886,   112,   113,   886,   329,   485,
   886,   172,   336,   886,   337,   325,   326,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   495,   886,   175,   886,   278,   886,   176,   603,   325,
   326,   177,   822,   824,   977,   819,   597,   368,   178,   162,
   454,   179,   163,   605,   164,   500,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   105,   106,   107,   108,   278,   289,   617,   190,   597,   622,
   180,   624,   625,  1022,   325,   326,   154,   155,   186,   112,
   113,   275,   276,   277,   289,   188,   156,   640,   278,   979,
   708,   533,   645,   157,   980,   688,    96,    97,    98,    99,
   187,   214,   100,   215,   655,   656,   189,   290,   325,   326,
   325,   326,   216,   659,   217,   154,   155,   953,   589,   734,
   590,   412,   190,   244,   767,   156,   774,   245,   671,   325,
   326,   246,   165,   325,   326,   687,   290,   218,   247,   219,
   681,   248,   683,   684,   220,   964,   221,   260,   222,  1014,
   223,    96,    97,    98,    99,   262,   757,   100,   709,   279,
   325,   326,   488,   489,   280,   780,   781,   782,   783,   308,
   454,   322,   455,   325,   326,   294,  1016,   325,   326,   298,
   729,   305,   290,   290,   290,   290,   311,   698,   699,  1018,
   224,   309,   225,  1079,   310,   796,   325,   326,   226,   312,
   227,   700,   701,   702,   703,   704,   705,   706,   758,   313,
   289,   340,  1082,   314,   710,   345,   346,   325,   326,   315,
   718,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   727,   869,   870,  1085,   278,   840,   228,   316,   229,   289,
   230,   597,   231,   317,    25,    26,    27,    28,   232,    30,
   233,   234,   290,   235,  1047,   263,    35,    36,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   236,   238,   237,   239,   278,   454,   318,   460,
   273,   274,   275,   276,   277,   289,   289,   289,   289,   278,
   319,   786,   787,   338,   330,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   331,
   803,   804,   332,   278,   808,   797,   687,   240,   347,   241,
   825,   348,   654,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   349,   242,   663,   243,   278,
   454,   830,   463,   454,   454,   600,   639,   353,   454,   836,
   751,   831,   454,   832,   839,   289,   841,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   856,   454,   359,   887,   278,   112,   113,   454,   454,
   888,   889,   418,   356,   197,   871,   872,   873,   912,   198,
   112,   113,   881,   112,   113,   454,   450,   890,   197,   623,
   920,   197,   355,   198,   899,   905,   198,   906,   454,   939,
   924,   940,   896,   897,   898,   985,   905,   986,  1071,   361,
   902,   430,  1059,   363,  1090,   908,  1091,   985,  1164,  1121,
  1165,  1182,   364,  1183,   366,   948,   367,   417,   278,   427,
   428,   451,   913,   429,   490,   469,   493,   474,   484,   511,
   721,   521,   514,   515,   593,   732,   922,   524,   594,   595,
   925,   596,   598,   599,   606,   607,   611,   929,   930,   627,
   628,   932,   629,   631,   632,   633,   635,   636,   937,   938,
   637,   641,   649,   650,   651,   652,   657,   658,   947,   653,
   677,  1116,   678,   673,   674,   679,   680,   771,   772,   773,
   692,   693,   965,   694,   696,   697,   707,   712,   714,   971,
   972,   752,   713,   719,   720,   728,   722,   723,   726,   748,
   742,   981,   982,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   733,   739,   996,
   747,   278,   753,   754,   755,   756,   759,   760,   761,   762,
   763,  1005,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   764,   765,   766,  1012,
   278,   779,   785,   788,   789,   793,   798,   799,   800,   802,
   826,   490,  1021,   493,   807,   818,   827,   820,   833,   838,
   842,   848,  1027,   851,  1028,   854,   849,   855,  1030,   883,
   893,   850,   894,  1034,   895,   900,   853,   914,   910,   874,
   884,   882,   915,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   917,   923,   928,
   784,   278,  1050,   931,  1053,   934,  1056,   935,   936,   941,
   942,   943,  1063,  1064,  1065,   944,   945,   946,   955,  1069,
  1070,   828,   958,   961,   967,   968,   969,   970,  1073,   984,
   988,   989,   994,   990,   998,   992,  1077,   993,   995,  1008,
   740,   741,  1010,   743,  1035,   746,  1036,  1023,   749,   750,
  1011,   926,  1013,   927,  1015,  1017,   908,  1019,  1020,  1026,
  1037,  1039,  1041,  1042,  1043,  1044,  1045,  1105,  1061,  1072,
  1109,  1075,  1153,  1113,  1076,  1098,  1103,  1106,  1068,  1089,
  1101,  1107,   954,  1110,   957,  1123,   960,  1124,  1111,   790,
   791,   792,  1114,  1118,  1119,  1120,  1125,  1135,  1136,  1174,
  1140,  1177,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,  1126,  1187,  1128,  1130,
   278,  1137,  1142,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,  1145,  1148,  1151,
  1155,   278,  1156,  1167,  1168,  1170,  1172,  1158,  1160,  1175,
   991,  1178,  1184,  1185,   847,  1186,  1162,  1166,  1188,   852,
  1190,  1191,   690,  1095,    56,    64,   857,   858,   859,   835,
  1033,   862,   863,   864,   865,   866,   867,   868,   916,    68,
   283,     0,     0,     0,     0,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,     0,
     0,     0,     0,     0,     0,     0,     0,   284,     0,     0,
     0,  1051,     0,  1054,     0,  1057,     0,     0,     0,     0,
     0,     0,     0,     0,   911,     0,     0,     0,    25,    26,
    27,    28,    29,    30,     0,     0,     0,     0,  1074,     0,
    35,    36,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,   101,   102,   103,   104,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,   109,   285,   278,   966,     0,   111,     0,
     0,     0,     0,   114,     0,     0,     0,   973,   117,     0,
     0,   467,     0,     0,     0,     0,     0,   983,    68,   283,
     0,   987,     0,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,     0,
     0,     0,     0,     0,     0,     0,   284,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,    25,    26,    27,
    28,    29,    30,     0,   642,    68,   249,     0,     0,    35,
    36,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,   101,   102,   103,   104,  1006,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,   302,     0,  1062,     0,   111,     0,     0,
     0,     0,   114,     0,    68,   249,     0,   117,     0,   303,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,     0,     0,     0,     0,     0,     0,
     0,     0,   101,   102,   103,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   110,     0,  1117,     0,   111,     0,     0,     0,     0,   114,
     0,     0,   254,     0,   117,     0,   255,     0,     0,     0,
     0,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
  1007,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
     0,     0,     0,   111,     0,     0,     0,     0,   114,     0,
     0,   620,     0,   117,     0,   621,    68,   249,     0,     0,
     0,     0,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,     0,     0,     0,     0,
     0,    68,   249,     0,     0,     0,     0,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,     0,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   101,   102,   103,   104,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   109,   110,     0,     0,     0,   111,     0,     0,     0,     0,
   114,     0,     0,   736,     0,   117,     0,   737,   101,   102,
   103,   104,  1009,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   333,   334,     0,     0,     0,
   111,     0,     0,     0,     0,   335,     0,    68,   452,     0,
   117,     0,   157,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,     0,     0,
     0,     0,    68,    69,    70,     0,    71,     0,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,     0,    96,    97,    98,    99,     0,     0,   100,
     0,     0,     0,     0,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   101,   102,   103,   104,     0,  1094,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   110,     0,     0,     0,   111,     0,     0,     0,
     0,   114,     0,     0,     0,     0,   117,     0,   466,   101,
   102,   103,   104,   105,   106,   107,   108,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,   110,     0,     0,
     0,   111,   112,   113,     0,     0,   114,     0,   115,     0,
   116,   117,    68,   283,     0,     0,     0,     0,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,     0,     0,     0,     0,     0,     0,     0,     0,
   284,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,    25,    26,    27,    28,    29,    30,     0,     0,    68,
   249,     0,     0,    35,    36,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,   101,
   102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,   285,     0,     0,
     0,   111,     0,     0,     0,     0,   114,    68,   249,   190,
     0,   117,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,   453,    96,    97,
    98,    99,     0,     0,   100,     0,   101,   102,   103,   104,
     0,     0,     0,     0,     0,     0,     0,   525,     0,     0,
     0,     0,     0,   109,   110,     0,     0,     0,   111,     0,
     0,     0,     0,   114,    68,   452,     0,     0,   117,     0,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,   101,   102,   103,   104,   612,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   109,   110,     0,     0,     0,   111,   738,     0,     0,
     0,   114,     0,     0,     0,     0,   117,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   795,     0,     0,     0,   278,     0,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   101,   102,   103,   104,   278,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
     0,     0,     0,   111,     0,     0,     0,     0,   114,     0,
     0,     0,     0,   117,     0,     0,     0,     0,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,    -3,     1,     0,   278,    -3,     0,     0,     0,
     0,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,     0,     0,     0,     0,    -3,     0,     0,     0,     0,
    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,     0,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,    -3,    -3,    -3,    -3,     4,    -3,    -3,     0,     0,
     0,     0,     0,    -3,    -3,    -3,    -3,     0,     0,    -3,
     0,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,     0,     5,     0,     0,     0,     0,     6,
     7,     0,     8,     9,    10,    11,    12,    13,    14,    15,
    16,     0,    17,    18,    19,    20,    21,    22,    23,     0,
     0,     0,    24,    25,    26,    27,    28,    29,    30,     0,
    31,    32,    33,    34,     0,    35,    36,     0,     0,     0,
     0,     0,    37,    38,    39,    40,     0,     0,    41,     0,
    42,     0,    43,    44,    45,    46,    47,    48,    49,    50,
    51,   503,     9,    10,   504,    12,   505,    14,   506,    16,
     0,    17,     0,    19,    20,     0,    22,    23,   503,     9,
    10,   504,    12,   505,    14,   506,    16,     0,    17,     0,
    19,    20,    34,    22,    23,     0,     0,     0,     0,     0,
     0,     0,    38,    39,    40,     0,     0,     0,     0,    34,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
    39,    40,   503,     9,    10,   504,    12,   505,    14,   506,
    16,     0,    17,     0,    19,    20,     0,    22,    23,     0,
     0,     0,     0,     0,   503,     9,    10,   504,    12,   505,
    14,   506,    16,    34,    17,   507,    19,    20,     0,    22,
    23,     0,     0,    38,    39,    40,     0,     0,     0,     0,
     0,     0,   513,     0,     0,    34,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    38,    39,    40,   503,     9,
    10,   504,    12,   505,    14,   506,    16,     0,    17,     0,
    19,    20,     0,    22,    23,   503,     9,    10,   504,    12,
   505,    14,   506,    16,     0,    17,   527,    19,    20,    34,
    22,    23,     0,     0,     0,     0,     0,     0,     0,    38,
    39,    40,     0,     0,     0,     0,    34,     0,   528,     0,
     0,     0,     0,     0,     0,     0,    38,    39,    40,   503,
     9,    10,   504,    12,   505,    14,   506,    16,     0,    17,
     0,    19,    20,     0,    22,    23,     0,     0,     0,     0,
     0,   503,     9,    10,   504,    12,   505,    14,   506,    16,
    34,    17,   664,    19,    20,     0,    22,    23,     0,     0,
    38,    39,    40,     0,     0,     0,     0,     0,     0,   682,
     0,     0,    34,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    38,    39,    40,   503,     9,    10,   504,    12,
   505,    14,   506,    16,     0,    17,     0,    19,    20,     0,
    22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1087,     0,     0,    34,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    38,    39,    40,     0,
     0,     0,     0,     0,     0,  1133,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   951,     0,   952,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   974,
     0,   975,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,  1048,     0,  1049,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,   646,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,   647,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,   689,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,   735,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,   770,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,   949,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,   963,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,   997,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,   999,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,  1002,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,  1003,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,  1004,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,  1060,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,  1066,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,  1067,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,  1078,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,  1081,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,  1084,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,  1092,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,  1093,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,  1102,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,  1127,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,  1129,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,  1131,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,  1139,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   419,     0,     0,     0,     0,   486,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   448,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   486,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   487,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   522,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   569,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   570,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   583,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   584,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   585,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   586,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   587,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   588,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   660,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   661,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   662,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   731,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   768,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   769,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   794,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   891,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   892,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   903,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   904,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   921,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   933,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,  1024,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,  1025,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,  1031,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,  1032,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,  1040,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,  1046,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,  1097,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,  1099,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,   423,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,     0,     0,   530,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,   548,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,     0,     0,   550,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,   552,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,   554,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,   556,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,     0,     0,   558,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
   560,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,     0,     0,   562,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,   564,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,     0,     0,   566,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,   568,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,     0,     0,   572,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,   574,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,   576,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,   578,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,     0,     0,   580,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
   582,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,     0,     0,   666,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,   672,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,     0,     0,   675,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,   676,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,     0,     0,   685,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,   711,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,   810,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,   812,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,     0,     0,   814,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
   816,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,     0,     0,   817,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,   918,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   419,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   449,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   456,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   457,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   459,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   461,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   464,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   465,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   470,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   518,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   519,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   520,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   526,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   547,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   549,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   551,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   553,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   555,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   557,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   559,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   561,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   563,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   565,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   567,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   571,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   573,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   575,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   577,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   579,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   581,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   630,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   634,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   643,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   644,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   648,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   809,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   811,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   813,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   815,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   821,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   909,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   950,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   978,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
  1096,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,  1138,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278
};

static const short yycheck[] = {     4,
   168,   328,     2,   171,     2,   257,  1015,   609,  1017,     4,
  1019,     4,     6,     4,     4,     4,     4,   127,     4,     6,
     4,     6,     4,   191,   134,   193,     6,     5,     7,     4,
     6,     6,     4,    69,    68,     6,     5,    73,    69,     4,
     4,   127,    73,     6,    69,    50,    51,     6,    73,     6,
    69,   127,     4,   129,    73,     6,    34,    35,    36,    37,
   777,   133,    40,     6,   136,    34,    35,    36,    37,    68,
     7,    40,     5,   128,    41,   128,   127,    44,   133,  1088,
   133,   136,    53,    76,    77,    78,    79,    80,    76,    77,
    78,    79,    80,   127,    53,     7,     6,     7,    68,   135,
   134,    34,    35,    36,    37,    87,    88,    40,    69,     7,
   135,    90,    73,    68,   123,   124,   135,  1126,    50,  1128,
   722,  1130,   131,    87,    88,  1134,   123,   124,   123,   124,
   117,   118,   117,   118,   129,   134,   131,   117,   118,   115,
   134,   136,   135,   134,   134,   134,   127,   135,   134,  1158,
   134,  1160,   115,  1162,   129,   127,   134,   109,   110,   111,
   117,   118,   114,   115,   134,   134,   118,   104,    46,   337,
    48,   423,   127,   125,   135,   127,   128,   129,   130,   134,
   132,   133,   134,   255,   136,   137,   138,   355,   140,   127,
   123,   124,   104,   105,   106,   107,   134,    44,   131,    46,
   255,    48,   117,   118,   156,   157,   104,   105,   106,   107,
   127,   123,   124,   165,   316,   317,   318,   134,   133,   131,
   135,   117,   118,   127,   127,   129,   178,   179,   180,   831,
   182,   303,    69,   185,   186,   127,    73,   129,   134,   244,
   245,   246,   247,   127,   196,    69,    59,    60,   303,    73,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   257,    26,    27,   128,    29,   127,   135,   129,
   133,    69,    69,   255,    69,    73,    73,   127,    73,     7,
   127,   135,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   327,   328,   327,
   328,   117,   118,   285,   127,  1052,   129,     8,  1055,    69,
   128,  1058,   294,    73,    69,   133,   298,   133,    73,   135,
   302,   303,    46,   117,   118,    69,   308,   309,   310,    73,
   312,   313,   314,   315,   316,   317,   318,   135,   135,   133,
   135,   135,   117,   118,    46,   447,     8,    46,   330,   331,
   332,   333,   334,   335,    48,   127,   338,   129,   127,   134,
   992,   343,   447,     7,   466,   347,   348,    41,  1115,   454,
    44,   366,    46,   134,    48,   135,   104,   105,   106,   107,
   135,   466,   364,   117,   118,   367,   134,   117,   118,   424,
   153,   135,   155,    46,  1141,   123,   124,  1144,   161,   133,
  1147,     6,   165,  1150,   134,   117,   118,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   133,  1169,     4,  1171,   126,  1173,     4,   423,   117,
   118,     4,   714,   715,   135,   128,   418,   200,   127,    41,
   133,   127,    44,   425,    46,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   104,   105,   106,   107,   126,   447,   448,     5,   450,   451,
   127,   453,   454,   135,   117,   118,   117,   118,   127,   123,
   124,   119,   120,   121,   466,     4,   127,   469,   126,   128,
   592,   134,   474,   134,   133,   530,    34,    35,    36,    37,
     6,   127,    40,   129,   486,   487,     4,   592,   117,   118,
   117,   118,   127,   495,   129,   117,   118,   874,   129,   621,
   131,     4,     5,   127,   133,   127,   133,   127,   510,   117,
   118,   127,   134,   117,   118,   530,   621,   127,   127,   129,
   522,   127,   524,   525,   127,   133,   129,     4,   127,   133,
   129,    34,    35,    36,    37,     6,     6,    40,   593,     6,
   117,   118,   325,   326,     5,   667,   668,   669,   670,   134,
   133,   334,   135,   117,   118,   127,   133,   117,   118,   127,
   615,   139,   667,   668,   669,   670,   144,   569,   570,   133,
   127,   127,   129,   133,   127,     8,   117,   118,   127,   134,
   129,   583,   584,   585,   586,   587,   588,   589,    58,   134,
   592,   169,   133,   127,   596,   173,   174,   117,   118,   127,
   602,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   612,     6,     7,   133,   126,   737,   127,   127,   129,   621,
   127,   623,   129,   127,    62,    63,    64,    65,   127,    67,
   129,   127,   737,   129,  1011,     6,    74,    75,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   127,   127,   129,   129,   126,   133,   127,   135,
   117,   118,   119,   120,   121,   667,   668,   669,   670,   126,
     4,   673,   674,   129,   134,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   134,
   692,   693,   134,   126,   696,   128,   711,   127,   129,   129,
   715,   129,   485,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,     6,   127,   500,   129,   126,
   133,   723,   135,   133,   133,   135,   135,   131,   133,   731,
   135,   133,   133,   135,   135,   737,   738,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   753,   133,     6,   135,   126,   123,   124,   133,   133,
   135,   135,   129,    90,   131,   767,   768,   769,   823,   136,
   123,   124,   774,   123,   124,   133,   129,   135,   131,   129,
   835,   131,   134,   136,   799,   133,   136,   135,   133,     4,
   135,     6,   794,   795,   796,   133,   133,   135,   135,     6,
   802,     6,  1020,     6,   133,   807,   135,   133,   133,   135,
   135,   133,   129,   135,     4,   870,   134,     5,   126,   131,
     7,   134,   824,   129,   874,     7,   874,     7,   128,     6,
     6,    87,     7,     7,   133,   618,   838,   134,   128,   128,
   842,   133,   420,   421,     6,     4,   130,   849,   850,    90,
     7,   853,     7,     7,    90,     7,    90,     7,   860,   861,
     7,     7,   128,   128,   128,   128,   135,   135,   870,   131,
     7,  1089,     7,   134,   134,     7,   131,   660,   661,   662,
   127,   127,   884,   134,   127,     6,     4,     6,   130,   891,
   892,     6,     6,     6,     6,   115,     7,   129,     6,    48,
     7,   903,   904,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    46,    46,   921,
     7,   126,   134,     7,     7,     7,     7,     7,     7,     7,
     7,   933,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,     7,     7,     4,   951,
   126,     6,     6,     6,     6,     4,     6,     4,     6,   127,
   131,  1011,   964,  1011,   134,   128,     7,   128,     6,   134,
   134,     6,   974,     6,   976,     6,   134,     6,   980,     6,
     6,   134,     6,   985,    86,     6,   134,     6,   131,   134,
   134,   774,     4,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,     6,   130,     6,
     6,   126,  1014,     6,  1016,     6,  1018,     6,     6,     6,
     6,     6,  1024,  1025,  1026,     6,     6,     6,     6,  1031,
  1032,     6,     6,     6,     6,     6,     6,     6,  1040,   134,
     4,     6,   131,     6,   130,     7,  1048,     6,     6,     6,
   628,   629,     6,   631,     6,   633,     6,   133,   636,   637,
   134,   844,   135,   846,   134,   134,  1068,   134,   134,    85,
   128,    88,     7,     6,     6,     6,     6,  1079,     6,     6,
  1082,     5,  1137,  1085,   135,     6,     6,     6,   134,   134,
   133,     6,   875,     6,   877,  1097,   879,  1099,     6,   677,
   678,   679,     6,     6,     6,     6,     5,   135,     6,  1164,
   133,  1166,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   134,  1182,   134,   134,
   126,   134,     6,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,     6,     6,     6,
     6,   126,     5,   135,     6,     6,     6,   134,   134,     6,
     6,     6,     6,     6,   742,     6,   134,   134,     6,   747,
     0,     0,   533,  1068,     2,     2,   754,   755,   756,   730,
   984,   759,   760,   761,   762,   763,   764,   765,   827,     3,
     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    -1,  1014,    -1,  1016,    -1,  1018,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   822,    -1,    -1,    -1,    62,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    -1,  1041,    -1,
    74,    75,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,   100,   101,   102,   103,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,   117,   118,   126,   884,    -1,   122,    -1,
    -1,    -1,    -1,   127,    -1,    -1,    -1,   895,   132,    -1,
    -1,   135,    -1,    -1,    -1,    -1,    -1,   905,     3,     4,
    -1,   909,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    41,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    62,    63,    64,
    65,    66,    67,    -1,   135,     3,     4,    -1,    -1,    74,
    75,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   100,   101,   102,   103,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   117,   118,    -1,  1023,    -1,   122,    -1,    -1,
    -1,    -1,   127,    -1,     3,     4,    -1,   132,    -1,   134,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   100,   101,   102,   103,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
   118,    -1,  1090,    -1,   122,    -1,    -1,    -1,    -1,   127,
    -1,    -1,   130,    -1,   132,    -1,   134,    -1,    -1,    -1,
    -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
     6,   100,   101,   102,   103,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,
    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
    -1,   130,    -1,   132,    -1,   134,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
    -1,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   100,   101,   102,   103,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   117,   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
   127,    -1,    -1,   130,    -1,   132,    -1,   134,   100,   101,
   102,   103,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,
   122,    -1,    -1,    -1,    -1,   127,    -1,     3,     4,    -1,
   132,    -1,   134,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
    -1,    -1,     3,     4,     5,    -1,     7,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    34,    35,    36,    37,    -1,    -1,    40,
    -1,    -1,    -1,    -1,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   100,   101,   102,   103,    -1,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,
    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,   134,   100,
   101,   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,
    -1,   122,   123,   124,    -1,    -1,   127,    -1,   129,    -1,
   131,   132,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    41,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    62,    63,    64,    65,    66,    67,    -1,    -1,     3,
     4,    -1,    -1,    74,    75,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   100,
   101,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,
    -1,   122,    -1,    -1,    -1,    -1,   127,     3,     4,     5,
    -1,   132,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     8,    34,    35,
    36,    37,    -1,    -1,    40,    -1,   100,   101,   102,   103,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,    -1,
    -1,    -1,    -1,   127,     3,     4,    -1,    -1,   132,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   100,   101,   102,   103,     8,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   117,   118,    -1,    -1,    -1,   122,     8,    -1,    -1,
    -1,   127,    -1,    -1,    -1,    -1,   132,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,     8,    -1,    -1,    -1,   126,    -1,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   100,   101,   102,   103,   126,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,
    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,     0,     1,    -1,   126,     4,    -1,    -1,    -1,
    -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,
    38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    51,    52,    53,    54,    55,    56,    57,
    -1,    -1,    -1,    61,    62,    63,    64,    65,    66,    67,
    -1,    69,    70,    71,    72,     4,    74,    75,    -1,    -1,
    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,    87,
    -1,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
    98,    99,    -1,    -1,    33,    -1,    -1,    -1,    -1,    38,
    39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    55,    56,    57,    -1,
    -1,    -1,    61,    62,    63,    64,    65,    66,    67,    -1,
    69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
    -1,    -1,    81,    82,    83,    84,    -1,    -1,    87,    -1,
    89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
    99,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    -1,    51,    -1,    53,    54,    -1,    56,    57,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    -1,    51,    -1,
    53,    54,    72,    56,    57,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    82,    83,    84,    -1,    -1,    -1,    -1,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
    83,    84,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    -1,    51,    -1,    53,    54,    -1,    56,    57,    -1,
    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    72,    51,   135,    53,    54,    -1,    56,
    57,    -1,    -1,    82,    83,    84,    -1,    -1,    -1,    -1,
    -1,    -1,   135,    -1,    -1,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    82,    83,    84,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    -1,    51,    -1,
    53,    54,    -1,    56,    57,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    -1,    51,   135,    53,    54,    72,
    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
    83,    84,    -1,    -1,    -1,    -1,    72,    -1,   135,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,    84,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    -1,    51,
    -1,    53,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,
    -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    72,    51,   135,    53,    54,    -1,    56,    57,    -1,    -1,
    82,    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,   135,
    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    82,    83,    84,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    -1,    51,    -1,    53,    54,    -1,
    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,    -1,    -1,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,    84,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 144 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 159 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 160 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 164 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 174 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 178 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 185 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 190 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 205 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 218 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 247 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 254 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 264 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 280 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 282 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 287 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 289 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 294 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 484 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 502 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 513 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 518 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 526 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 533 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 540 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 545 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 553 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 560 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 568 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 575 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 52:
#line 579 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 584 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 54:
#line 592 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 55:
#line 593 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 56:
#line 594 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 57:
#line 595 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 58:
#line 596 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 59:
#line 600 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 60:
#line 601 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 61:
#line 609 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 62:
#line 640 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 63:
#line 679 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 64:
#line 733 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 750 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 768 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 67:
#line 779 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 68:
#line 798 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 69:
#line 812 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 70:
#line 829 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 71:
#line 855 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 72:
#line 882 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 73:
#line 896 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 74:
#line 913 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 927 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 76:
#line 944 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 77:
#line 964 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 78:
#line 987 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 79:
#line 997 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 80:
#line 1012 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 81:
#line 1016 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 82:
#line 1028 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v = Create_Vertex(num, x, y, z, lc, 1.0);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(x, y, z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 83:
#line 1046 "Gmsh.y"
{
      int num = (int)yyvsp[-9].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double u = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double v = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	gmshSurface *surf = gmshSurface::surfaceByTag((int)yyvsp[-4].d);
	if(!surf)
	  yymsg(GERROR, "gmshSurface %d does not exist", (int)yyvsp[-4].d);
	Vertex *vt = Create_Vertex(num, u, v, surf, lc);
	Tree_Add(THEM->Points, &vt);
	AddToTemporaryBoundingBox(vt->Pos.X,vt->Pos.Y,vt->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1066 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1082 "Gmsh.y"
{
      yymsg(WARNING, "Attractors are deprecated");
      List_Delete(yyvsp[-9].l);
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 86:
#line 1089 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1111 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 88:
#line 1129 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 89:
#line 1147 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1165 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1191 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1209 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1236 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1255 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1279 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1303 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1329 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1346 "Gmsh.y"
{
      yymsg(WARNING, "Attractors are deprecated");
      List_Delete(yyvsp[-9].l);
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 99:
#line 1353 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1372 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1390 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1428 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	gmshSurface *myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 103:
#line 1450 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1466 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1486 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1503 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1520 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1541 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 109:
#line 1546 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 110:
#line 1551 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 111:
#line 1556 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 112:
#line 1563 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 113:
#line 1564 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 114:
#line 1565 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 115:
#line 1570 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 116:
#line 1574 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 117:
#line 1578 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 118:
#line 1594 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 119:
#line 1610 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 120:
#line 1626 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 121:
#line 1647 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 122:
#line 1661 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 123:
#line 1667 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 124:
#line 1673 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 125:
#line 1685 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 126:
#line 1694 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 127:
#line 1704 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 128:
#line 1720 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 129:
#line 1739 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 130:
#line 1753 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 131:
#line 1759 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 132:
#line 1765 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 133:
#line 1774 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 134:
#line 1788 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 135:
#line 1833 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 136:
#line 1848 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 137:
#line 1859 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 138:
#line 1879 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 139:
#line 1889 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 140:
#line 1911 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 141:
#line 1915 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 142:
#line 1920 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 143:
#line 1925 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 144:
#line 1937 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 145:
#line 1952 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 146:
#line 1968 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 147:
#line 1994 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 148:
#line 2021 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 149:
#line 2053 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 150:
#line 2060 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 151:
#line 2065 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 152:
#line 2071 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 153:
#line 2075 "Gmsh.y"
{
    ;
    break;}
case 154:
#line 2084 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 2092 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 156:
#line 2100 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 157:
#line 2108 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 158:
#line 2113 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 159:
#line 2121 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 160:
#line 2126 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 161:
#line 2134 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 162:
#line 2139 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 163:
#line 2149 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 164:
#line 2156 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 165:
#line 2163 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 166:
#line 2170 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 167:
#line 2177 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 168:
#line 2184 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 169:
#line 2191 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 170:
#line 2198 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 171:
#line 2205 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 172:
#line 2212 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 173:
#line 2217 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 174:
#line 2224 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 175:
#line 2229 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 176:
#line 2236 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 177:
#line 2241 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 178:
#line 2248 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 179:
#line 2253 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 180:
#line 2260 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 181:
#line 2265 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 182:
#line 2272 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 183:
#line 2277 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 184:
#line 2284 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 185:
#line 2289 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 186:
#line 2296 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 187:
#line 2301 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 188:
#line 2308 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 189:
#line 2313 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 190:
#line 2324 "Gmsh.y"
{
    ;
    break;}
case 191:
#line 2327 "Gmsh.y"
{
    ;
    break;}
case 192:
#line 2333 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 193:
#line 2342 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 194:
#line 2364 "Gmsh.y"
{
      yymsg(WARNING, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 195:
#line 2388 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 196:
#line 2397 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 197:
#line 2415 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 198:
#line 2433 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 199:
#line 2451 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 200:
#line 2480 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 201:
#line 2515 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 202:
#line 2520 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 203:
#line 2547 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 204:
#line 2561 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 205:
#line 2580 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 206:
#line 2586 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 207:
#line 2592 "Gmsh.y"
{
    ;
    break;}
case 208:
#line 2595 "Gmsh.y"
{
    ;
    break;}
case 209:
#line 2604 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 210:
#line 2613 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 211:
#line 2614 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 212:
#line 2615 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 213:
#line 2616 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 214:
#line 2617 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 215:
#line 2618 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 216:
#line 2619 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 217:
#line 2620 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 218:
#line 2622 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 219:
#line 2628 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 220:
#line 2629 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 221:
#line 2630 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 222:
#line 2631 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 223:
#line 2632 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 224:
#line 2633 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 225:
#line 2634 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 226:
#line 2635 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 227:
#line 2636 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 228:
#line 2637 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 229:
#line 2638 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 230:
#line 2639 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 231:
#line 2640 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 232:
#line 2641 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 233:
#line 2642 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 234:
#line 2643 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 235:
#line 2644 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 236:
#line 2645 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 237:
#line 2646 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 238:
#line 2647 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 239:
#line 2648 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 240:
#line 2649 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 241:
#line 2650 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 242:
#line 2651 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 243:
#line 2652 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 244:
#line 2653 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 245:
#line 2654 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 246:
#line 2655 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 247:
#line 2656 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 248:
#line 2657 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 249:
#line 2658 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 250:
#line 2659 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 251:
#line 2661 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 252:
#line 2662 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 253:
#line 2663 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 254:
#line 2664 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2665 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 256:
#line 2666 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2667 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 258:
#line 2668 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2669 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2670 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2671 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 262:
#line 2672 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2673 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2674 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2675 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2676 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 267:
#line 2677 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2678 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 269:
#line 2679 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 270:
#line 2680 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 271:
#line 2681 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 272:
#line 2690 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 273:
#line 2691 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 274:
#line 2692 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 275:
#line 2693 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 276:
#line 2694 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 277:
#line 2695 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 278:
#line 2696 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 279:
#line 2701 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 280:
#line 2717 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 281:
#line 2732 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 282:
#line 2752 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 283:
#line 2766 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 284:
#line 2779 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 285:
#line 2802 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 286:
#line 2820 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 287:
#line 2838 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 288:
#line 2856 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 289:
#line 2874 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 290:
#line 2882 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 291:
#line 2886 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 292:
#line 2890 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 293:
#line 2894 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 294:
#line 2898 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 295:
#line 2905 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 296:
#line 2909 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 297:
#line 2913 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 298:
#line 2917 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 299:
#line 2924 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 300:
#line 2929 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 301:
#line 2937 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 302:
#line 2942 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 303:
#line 2946 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 304:
#line 2951 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 305:
#line 2955 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 306:
#line 2967 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 307:
#line 2973 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 308:
#line 2984 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 309:
#line 3004 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 310:
#line 3014 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 311:
#line 3024 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 312:
#line 3034 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 313:
#line 3051 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 314:
#line 3070 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 315:
#line 3094 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 316:
#line 3123 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 317:
#line 3128 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 318:
#line 3132 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 319:
#line 3136 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 320:
#line 3149 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 321:
#line 3153 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 322:
#line 3165 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 323:
#line 3172 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 324:
#line 3194 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 325:
#line 3198 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 326:
#line 3213 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 327:
#line 3218 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 328:
#line 3225 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 329:
#line 3229 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 330:
#line 3237 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 331:
#line 3245 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 332:
#line 3259 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 333:
#line 3273 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 334:
#line 3277 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 335:
#line 3296 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 336:
#line 3318 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3341 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
