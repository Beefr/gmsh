
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPrintf	284
#define	tDraw	285
#define	tSleep	286
#define	tPoint	287
#define	tCircle	288
#define	tEllipsis	289
#define	tLine	290
#define	tSurface	291
#define	tSpline	292
#define	tVolume	293
#define	tCharacteristic	294
#define	tLength	295
#define	tParametric	296
#define	tElliptic	297
#define	tPlane	298
#define	tRuled	299
#define	tTransfinite	300
#define	tComplex	301
#define	tPhysical	302
#define	tUsing	303
#define	tBump	304
#define	tProgression	305
#define	tRotate	306
#define	tTranslate	307
#define	tSymmetry	308
#define	tDilate	309
#define	tExtrude	310
#define	tDuplicata	311
#define	tLoop	312
#define	tInclude	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tView	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tFor	339
#define	tEndFor	340
#define	tScript	341
#define	tExit	342
#define	tMerge	343
#define	tReturn	344
#define	tCall	345
#define	tFunction	346
#define	tB_SPLINE_SURFACE_WITH_KNOTS	347
#define	tB_SPLINE_CURVE_WITH_KNOTS	348
#define	tCARTESIAN_POINT	349
#define	tTRUE	350
#define	tFALSE	351
#define	tUNSPECIFIED	352
#define	tU	353
#define	tV	354
#define	tEDGE_CURVE	355
#define	tVERTEX_POINT	356
#define	tORIENTED_EDGE	357
#define	tPLANE	358
#define	tFACE_OUTER_BOUND	359
#define	tEDGE_LOOP	360
#define	tADVANCED_FACE	361
#define	tVECTOR	362
#define	tDIRECTION	363
#define	tAXIS2_PLACEMENT_3D	364
#define	tISO	365
#define	tENDISO	366
#define	tENDSEC	367
#define	tDATA	368
#define	tHEADER	369
#define	tFILE_DESCRIPTION	370
#define	tFILE_SCHEMA	371
#define	tFILE_NAME	372
#define	tMANIFOLD_SOLID_BREP	373
#define	tCLOSED_SHELL	374
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	375
#define	tFACE_BOUND	376
#define	tCYLINDRICAL_SURFACE	377
#define	tCONICAL_SURFACE	378
#define	tCIRCLE	379
#define	tTRIMMED_CURVE	380
#define	tGEOMETRIC_SET	381
#define	tCOMPOSITE_CURVE_SEGMENT	382
#define	tCONTINUOUS	383
#define	tCOMPOSITE_CURVE	384
#define	tTOROIDAL_SURFACE	385
#define	tPRODUCT_DEFINITION	386
#define	tPRODUCT_DEFINITION_SHAPE	387
#define	tSHAPE_DEFINITION_REPRESENTATION	388
#define	tELLIPSE	389
#define	tTrimmed	390
#define	tSolid	391
#define	tEndSolid	392
#define	tVertex	393
#define	tFacet	394
#define	tNormal	395
#define	tOuter	396
#define	tLoopSTL	397
#define	tEndLoop	398
#define	tEndFacet	399
#define	tAND	400
#define	tOR	401
#define	tNOTEQUAL	402
#define	tEQUAL	403
#define	tAPPROXEQUAL	404
#define	tAFFECTPLUS	405
#define	tAFFECTMINUS	406
#define	tAFFECTTIMES	407
#define	tAFFECTDIVIDE	408
#define	tLESSOREQUAL	409
#define	tGREATEROREQUAL	410
#define	tCROSSPRODUCT	411
#define	UNARYPREC	412
#define	tPLUSPLUS	413
#define	tMINUSMINUS	414

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.26 2000-12-07 16:03:43 remacle Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 60 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1490
#define	YYFLAG		-32768
#define	YYNTBASE	179

#define YYTRANSLATE(x) ((unsigned)(x) <= 414 ? yytranslate[x] : 255)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   167,     2,     2,     2,   164,     2,     2,   171,
   173,   162,   160,   172,   161,   176,   163,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   156,
     2,   157,   146,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   177,     2,   178,   168,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   174,     2,   175,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   158,   159,
   165,   166,   169,   170
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   522,   525,   533,   540,   549,
   550,   553,   556,   559,   562,   565,   568,   571,   574,   577,
   580,   583,   586,   588,   592,   593,   607,   609,   613,   614,
   628,   630,   634,   635,   649,   651,   655,   656,   676,   678,
   682,   683,   703,   705,   709,   710,   730,   732,   736,   737,
   763,   765,   769,   770,   796,   798,   802,   803,   829,   831,
   835,   836,   868,   870,   874,   875,   907,   909,   913,   914,
   946,   951,   955,   959,   964,   969,   974,   979,   986,   998,
  1005,  1017,  1024,  1036,  1043,  1055,  1062,  1074,  1081,  1093,
  1099,  1111,  1117,  1129,  1136,  1148,  1155,  1167,  1174,  1186,
  1195,  1203,  1212,  1225,  1232,  1238,  1246,  1254,  1267,  1275,
  1285,  1303,  1311,  1320,  1329,  1337,  1349,  1355,  1364,  1374,
  1383,  1406,  1427,  1436,  1445,  1451,  1460,  1468,  1477,  1483,
  1495,  1501,  1511,  1513,  1515,  1517,  1518,  1521,  1526,  1531,
  1535,  1539,  1542,  1546,  1549,  1553,  1560,  1569,  1571,  1573,
  1577,  1580,  1589,  1602,  1611,  1624,  1633,  1646,  1658,  1674,
  1676,  1679,  1689,  1692,  1699,  1709,  1719,  1728,  1737,  1746,
  1753,  1758,  1761,  1763,  1765,  1767,  1769,  1771,  1773,  1777,
  1780,  1783,  1786,  1790,  1794,  1798,  1802,  1806,  1810,  1814,
  1818,  1822,  1826,  1830,  1834,  1838,  1842,  1848,  1853,  1858,
  1863,  1868,  1873,  1878,  1883,  1888,  1893,  1898,  1905,  1910,
  1915,  1920,  1925,  1930,  1935,  1942,  1949,  1956,  1958,  1960,
  1962,  1966,  1975,  1980,  1990,  1995,  2005,  2009,  2015,  2017,
  2020,  2023,  2027,  2031,  2043,  2053,  2061,  2069,  2073,  2082,
  2083,  2087,  2089,  2093,  2094,  2098,  2102,  2104,  2108,  2109,
  2111,  2115,  2117,  2119,  2123,  2127,  2137,  2145,  2151,  2153
};

static const short yyrhs[] = {   181,
     0,   180,     0,   186,     0,   137,     0,   140,   141,   243,
   243,   243,   142,   143,   139,   243,   243,   243,   139,   243,
   243,   243,   139,   243,   243,   243,   144,   145,     0,   138,
     0,     0,   181,   182,     0,   183,     0,   185,     0,   184,
     0,     1,     6,     0,   111,     6,     0,   112,     6,     0,
   114,     6,     0,   113,     6,     0,   115,     6,     0,   116,
   171,   248,   172,     5,   173,     6,     0,   117,   171,   248,
   173,     6,     0,   118,   171,     5,   172,     5,   172,   248,
   172,   248,   172,     5,   172,     5,   172,     5,   173,     6,
     0,     3,     7,    95,   171,     5,   172,   246,   173,     6,
     0,     3,     7,    94,   171,     5,   172,   243,   172,   252,
   172,   242,   172,   242,   172,   242,   172,   252,   172,   252,
   172,   242,   173,     6,     0,     3,     7,    93,   171,     5,
   172,   243,   172,   243,   172,   250,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   252,   172,   252,   172,   252,
   172,   252,   172,   242,   173,     6,     0,     3,     7,   101,
   171,     5,   172,     3,   172,     3,   172,     3,   172,   242,
   173,     6,     0,     3,     7,   105,   171,     5,   172,     3,
   172,   242,   173,     6,     0,     3,     7,   122,   171,     5,
   172,     3,   172,   242,   173,     6,     0,     3,     7,   103,
   171,     5,   172,   162,   172,   162,   172,   243,   172,   242,
   173,     6,     0,     3,     7,   106,   171,     5,   172,   252,
   173,     6,     0,     3,     7,   107,   171,     5,   172,   252,
   172,     3,   172,   242,   173,     6,     0,     3,     7,   102,
   171,     5,   172,     3,   173,     6,     0,     3,     7,   108,
   171,     5,   172,     3,   172,   243,   173,     6,     0,     3,
     7,   110,   171,     5,   172,     3,   172,     3,   172,     3,
   173,     6,     0,     3,     7,   109,   171,     5,   172,   246,
   173,     6,     0,     3,     7,   104,   171,     5,   172,     3,
   173,     6,     0,     3,     7,    36,   171,     5,   172,     3,
   172,     3,   173,     6,     0,     3,     7,   120,   171,     5,
   172,   252,   173,     6,     0,     3,     7,   121,   171,     5,
   172,   252,   172,     3,   173,     6,     0,     3,     7,   119,
   171,     5,   172,     3,   173,     6,     0,     3,     7,   123,
   171,     5,   172,     3,   172,   243,   173,     6,     0,     3,
     7,   124,   171,     5,   172,     3,   172,   243,   172,   243,
   173,     6,     0,     3,     7,   131,   171,     5,   172,     3,
   172,   243,   172,   243,   173,     6,     0,     3,     7,   125,
   171,     5,   172,     3,   172,   243,   173,     6,     0,     3,
     7,   135,   171,     5,   172,     3,   172,   243,   172,   243,
   173,     6,     0,     3,     7,   126,   171,     5,   172,     3,
   172,   252,   172,   252,   172,   242,   172,   242,   173,     6,
     0,     3,     7,   127,   171,     5,   172,   252,   173,     6,
     0,     3,     7,   128,   171,   129,   172,   242,   172,     3,
   173,     6,     0,     3,     7,   130,   171,     5,   172,   252,
   172,   242,   173,     6,     0,     3,     7,   132,   171,     5,
   172,     5,   172,     3,   172,     3,   173,     6,     0,     3,
     7,   133,   171,     5,   172,     5,   172,     3,   173,     6,
     0,     3,     7,   134,   171,     3,   172,     3,   173,     6,
     0,     0,   186,   187,     0,   189,     0,   188,     0,   227,
     0,   228,     0,   229,     0,   232,     0,   233,     0,   237,
     0,   240,     0,   241,     0,   234,     0,   236,     0,   235,
     0,     1,     6,     0,    30,   171,     5,   172,   243,   173,
     6,     0,    63,     5,   174,   190,   175,     6,     0,    63,
     5,     4,   246,   174,   190,   175,     6,     0,     0,   190,
   192,     0,   190,   195,     0,   190,   198,     0,   190,   201,
     0,   190,   204,     0,   190,   207,     0,   190,   210,     0,
   190,   213,     0,   190,   216,     0,   190,   219,     0,   190,
   222,     0,   190,   225,     0,   243,     0,   191,   172,   243,
     0,     0,    75,   171,   243,   172,   243,   172,   243,   173,
   193,   174,   191,   175,     6,     0,   243,     0,   194,   172,
   243,     0,     0,    76,   171,   243,   172,   243,   172,   243,
   173,   196,   174,   194,   175,     6,     0,   243,     0,   197,
   172,   243,     0,     0,    77,   171,   243,   172,   243,   172,
   243,   173,   199,   174,   197,   175,     6,     0,   243,     0,
   200,   172,   243,     0,     0,    72,   171,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   173,   202,
   174,   200,   175,     6,     0,   243,     0,   203,   172,   243,
     0,     0,    73,   171,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   173,   205,   174,   203,   175,
     6,     0,   243,     0,   206,   172,   243,     0,     0,    74,
   171,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   173,   208,   174,   206,   175,     6,     0,   243,
     0,   209,   172,   243,     0,     0,    69,   171,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   173,   211,   174,   209,   175,
     6,     0,   243,     0,   212,   172,   243,     0,     0,    70,
   171,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   173,   214,
   174,   212,   175,     6,     0,   243,     0,   215,   172,   243,
     0,     0,    71,   171,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   172,
   243,   173,   217,   174,   215,   175,     6,     0,   243,     0,
   218,   172,   243,     0,     0,    66,   171,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   173,   220,   174,   218,   175,     6,     0,   243,     0,   221,
   172,   243,     0,     0,    67,   171,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   172,
   243,   172,   243,   172,   243,   172,   243,   172,   243,   173,
   223,   174,   221,   175,     6,     0,   243,     0,   224,   172,
   243,     0,     0,    68,   171,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   172,   243,   172,   243,   172,   243,   172,   243,   173,   226,
   174,   224,   175,     6,     0,     4,     7,   243,     6,     0,
     4,   169,     6,     0,     4,   170,     6,     0,     4,   152,
   243,     6,     0,     4,   153,   243,     6,     0,     4,   154,
   243,     6,     0,     4,   155,   243,     6,     0,     4,   176,
     4,     7,     5,     6,     0,     4,   176,    63,   177,   243,
   178,   176,     4,     7,     5,     6,     0,     4,   176,     4,
     7,   243,     6,     0,     4,   176,    63,   177,   243,   178,
   176,     4,     7,   243,     6,     0,     4,   176,     4,   152,
   243,     6,     0,     4,   176,    63,   177,   243,   178,   176,
     4,   152,   243,     6,     0,     4,   176,     4,   153,   243,
     6,     0,     4,   176,    63,   177,   243,   178,   176,     4,
   153,   243,     6,     0,     4,   176,     4,   154,   243,     6,
     0,     4,   176,    63,   177,   243,   178,   176,     4,   154,
   243,     6,     0,     4,   176,     4,   155,   243,     6,     0,
     4,   176,    63,   177,   243,   178,   176,     4,   155,   243,
     6,     0,     4,   176,     4,   169,     6,     0,     4,   176,
    63,   177,   243,   178,   176,     4,   169,   243,     6,     0,
     4,   176,     4,   170,     6,     0,     4,   176,    63,   177,
   243,   178,   176,     4,   170,   243,     6,     0,     4,   176,
     4,     7,   246,     6,     0,     4,   176,    63,   177,   243,
   178,   176,     4,     7,   246,     6,     0,     4,   176,     4,
   152,   246,     6,     0,     4,   176,    63,   177,   243,   178,
   176,     4,   152,   246,     6,     0,     4,   176,     4,   153,
   246,     6,     0,     4,   176,    63,   177,   243,   178,   176,
     4,   153,   246,     6,     0,     4,   176,    84,   176,     4,
     7,   254,     6,     0,    33,   171,   243,   173,     7,   246,
     6,     0,    48,    33,   171,   243,   173,     7,   252,     6,
     0,    64,    33,   252,     7,   174,   243,   172,   243,   172,
   243,   175,     6,     0,    40,    41,   252,     7,   243,     6,
     0,    33,   174,   243,   175,     6,     0,    36,   171,   243,
   173,     7,   252,     6,     0,    38,   171,   243,   173,     7,
   252,     6,     0,    64,    36,   252,     7,   174,   243,   172,
   243,   172,   243,   175,     6,     0,    34,   171,   243,   173,
     7,   252,     6,     0,    34,   171,   243,   173,     7,   252,
    44,   246,     6,     0,    42,   171,   243,   173,     7,   174,
   243,   172,   243,   172,     5,   172,     5,   172,     5,   175,
     6,     0,    35,   171,   243,   173,     7,   252,     6,     0,
    48,    36,   171,   243,   173,     7,   252,     6,     0,    36,
    58,   171,   243,   173,     7,   252,     6,     0,    78,   171,
   243,   173,     7,   252,     6,     0,    79,   171,   243,   173,
     7,   252,    83,   252,    80,   243,     6,     0,    36,   174,
   243,   175,     6,     0,    44,    37,   171,   243,   173,     7,
   252,     6,     0,   136,    37,   171,   243,   173,     7,   243,
   252,     6,     0,    45,    37,   171,   243,   173,     7,   252,
     6,     0,    79,    37,    81,    82,   171,   243,   173,     7,
   250,    83,   174,   252,   172,   252,   175,    80,   174,   243,
   172,   243,   175,     6,     0,    79,    37,   171,   243,   173,
     7,   250,    83,   174,   252,   172,   252,   175,    80,   174,
   243,   172,   243,   175,     6,     0,    48,    37,   171,   243,
   173,     7,   252,     6,     0,    37,    58,   171,   243,   173,
     7,   252,     6,     0,    37,   174,   243,   175,     6,     0,
    47,    39,   171,   243,   173,     7,   252,     6,     0,    39,
   171,   243,   173,     7,   252,     6,     0,    48,    39,   171,
   243,   173,     7,   252,     6,     0,    53,   246,   174,   230,
   175,     0,    52,   174,   246,   172,   246,   172,   243,   175,
   174,   230,   175,     0,    54,   246,   174,   230,   175,     0,
    55,   174,   246,   172,   243,   175,   174,   230,   175,     0,
   232,     0,   231,     0,   229,     0,     0,   231,   228,     0,
    57,   174,   231,   175,     0,    61,   174,   231,   175,     0,
    59,     5,     6,     0,    30,     5,     6,     0,    88,     6,
     0,    89,     5,     6,     0,    31,     6,     0,    32,   243,
     6,     0,    85,   171,   243,     8,   243,   173,     0,    85,
   171,   243,     8,   243,     8,   243,   173,     0,    86,     0,
    90,     0,    91,     4,     6,     0,    92,     4,     0,    56,
    33,   174,   243,   172,   246,   175,     6,     0,    56,    33,
   174,   243,   172,   246,   172,   246,   172,   243,   175,     6,
     0,    56,    36,   174,   243,   172,   246,   175,     6,     0,
    56,    36,   174,   243,   172,   246,   172,   246,   172,   243,
   175,     6,     0,    56,    37,   174,   243,   172,   246,   175,
     6,     0,    56,    37,   174,   243,   172,   246,   172,   246,
   172,   243,   175,     6,     0,    56,    37,   174,   243,   172,
   246,   175,   174,   238,   175,     6,     0,    56,    37,   174,
   243,   172,   246,   172,   246,   172,   243,   175,   174,   238,
   175,     6,     0,   239,     0,   238,   239,     0,    65,   174,
   252,   172,   252,   172,   252,   175,     6,     0,    60,     6,
     0,    46,    36,   252,     7,   243,     6,     0,    46,    36,
   252,     7,   243,    49,    51,   243,     6,     0,    46,    36,
   252,     7,   243,    49,    50,   243,     6,     0,    46,    37,
   174,   243,   175,     7,   252,     6,     0,    43,    37,   174,
   243,   175,     7,   252,     6,     0,    46,    39,   174,   243,
   175,     7,   252,     6,     0,    60,    37,   252,     7,   243,
     6,     0,    60,    37,   252,     6,     0,    62,     6,     0,
    96,     0,    97,     0,    98,     0,    99,     0,   100,     0,
   244,     0,   171,   243,   173,     0,   161,   243,     0,   160,
   243,     0,   167,   243,     0,   243,   161,   243,     0,   243,
   160,   243,     0,   243,   162,   243,     0,   243,   163,   243,
     0,   243,   164,   243,     0,   243,   168,   243,     0,   243,
   156,   243,     0,   243,   157,   243,     0,   243,   158,   243,
     0,   243,   159,   243,     0,   243,   150,   243,     0,   243,
   149,   243,     0,   243,   147,   243,     0,   243,   148,   243,
     0,   243,   146,   243,     8,   243,     0,    10,   171,   243,
   173,     0,    11,   171,   243,   173,     0,    12,   171,   243,
   173,     0,    13,   171,   243,   173,     0,    14,   171,   243,
   173,     0,    15,   171,   243,   173,     0,    16,   171,   243,
   173,     0,    17,   171,   243,   173,     0,    18,   171,   243,
   173,     0,    19,   171,   243,   173,     0,    20,   171,   243,
   172,   243,   173,     0,    21,   171,   243,   173,     0,    22,
   171,   243,   173,     0,    23,   171,   243,   173,     0,    24,
   171,   243,   173,     0,    25,   171,   243,   173,     0,    26,
   171,   243,   173,     0,    27,   171,   243,   172,   243,   173,
     0,    28,   171,   243,   172,   243,   173,     0,    29,   171,
   243,   172,   243,   173,     0,     3,     0,     9,     0,     4,
     0,     4,   176,     4,     0,     4,   176,    63,   177,   243,
   178,   176,     4,     0,     4,   176,     4,   169,     0,     4,
   176,    63,   177,   243,   178,   176,     4,   169,     0,     4,
   176,     4,   170,     0,     4,   176,    63,   177,   243,   178,
   176,     4,   170,     0,   243,     8,   243,     0,   243,     8,
   243,     8,   243,     0,   247,     0,   161,   246,     0,   160,
   246,     0,   246,   161,   246,     0,   246,   160,   246,     0,
   174,   243,   172,   243,   172,   243,   172,   243,   172,   243,
   175,     0,   174,   243,   172,   243,   172,   243,   172,   243,
   175,     0,   174,   243,   172,   243,   172,   243,   175,     0,
   171,   243,   172,   243,   172,   243,   173,     0,     4,   176,
     4,     0,     4,   176,    63,   177,   243,   178,   176,     4,
     0,     0,   171,   249,   173,     0,     5,     0,   249,   172,
     5,     0,     0,   174,   251,   175,     0,   171,   251,   173,
     0,   252,     0,   251,   172,   252,     0,     0,   243,     0,
   174,   253,   175,     0,   243,     0,   245,     0,   253,   172,
   243,     0,   253,   172,   245,     0,   174,   243,   172,   243,
   172,   243,   172,   243,   175,     0,   174,   243,   172,   243,
   172,   243,   175,     0,   174,     4,   172,   243,   175,     0,
     4,     0,     4,   176,    84,   176,     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   140,   142,   143,   150,   158,   172,   184,   186,   189,   191,
   192,   193,   196,   202,   207,   208,   209,   212,   216,   219,
   225,   230,   236,   244,   249,   253,   259,   264,   268,   273,
   277,   280,   285,   289,   293,   297,   302,   306,   309,   313,
   317,   321,   325,   329,   333,   336,   340,   343,   347,   350,
   359,   363,   369,   371,   372,   373,   374,   375,   376,   377,
   378,   379,   380,   381,   383,   384,   387,   398,   403,   409,
   414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
   424,   425,   428,   431,   435,   441,   447,   450,   454,   460,
   466,   469,   473,   479,   485,   488,   492,   500,   506,   509,
   513,   521,   527,   530,   534,   542,   548,   551,   555,   567,
   573,   576,   580,   592,   598,   601,   605,   617,   623,   626,
   630,   643,   649,   652,   656,   669,   675,   678,   682,   695,
   707,   717,   725,   733,   741,   749,   757,   768,   781,   799,
   816,   837,   854,   875,   892,   913,   930,   951,   968,   989,
  1006,  1027,  1044,  1067,  1092,  1121,  1146,  1175,  1200,  1231,
  1251,  1262,  1268,  1287,  1298,  1306,  1312,  1318,  1337,  1343,
  1359,  1366,  1372,  1378,  1384,  1390,  1409,  1421,  1427,  1446,
  1467,  1475,  1481,  1487,  1493,  1505,  1511,  1517,  1529,  1535,
  1540,  1545,  1552,  1554,  1555,  1558,  1563,  1574,  1592,  1607,
  1635,  1666,  1670,  1676,  1681,  1695,  1710,  1723,  1742,  1749,
  1756,  1785,  1791,  1797,  1801,  1805,  1809,  1813,  1818,  1825,
  1829,  1834,  1852,  1862,  1880,  1897,  1914,  1935,  1955,  1975,
  1992,  2016,  2029,  2031,  2032,  2033,  2034,  2037,  2039,  2040,
  2041,  2042,  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,
  2051,  2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,
  2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,
  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2080,  2082,  2083,
  2092,  2109,  2130,  2147,  2168,  2185,  2207,  2214,  2227,  2232,
  2236,  2240,  2244,  2249,  2254,  2258,  2262,  2266,  2292,  2324,
  2328,  2333,  2337,  2342,  2346,  2350,  2356,  2362,  2368,  2372,
  2378,  2385,  2391,  2400,  2404,  2414,  2419,  2423,  2428,  2433
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tDraw","tSleep",
"tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic",
"tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex",
"tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tEndFor","tScript",
"tExit","tMerge","tReturn","tCall","tFunction","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'?'","tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL",
"tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC",
"'!'","'^'","tPLUSPLUS","tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['",
"']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Macro","Command","Loop",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr",
"FExpr","FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","RecursiveListOfDouble","Color", NULL
};
#endif

static const short yyr1[] = {     0,
   179,   179,   179,   180,   180,   180,   181,   181,   182,   182,
   182,   182,   183,   183,   183,   183,   183,   184,   184,   184,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   186,   186,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   188,   189,   189,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   191,   191,   193,   192,   194,   194,   196,   195,
   197,   197,   199,   198,   200,   200,   202,   201,   203,   203,
   205,   204,   206,   206,   208,   207,   209,   209,   211,   210,
   212,   212,   214,   213,   215,   215,   217,   216,   218,   218,
   220,   219,   221,   221,   223,   222,   224,   224,   226,   225,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   229,   229,
   229,   229,   230,   230,   230,   231,   231,   232,   233,   234,
   235,   235,   235,   235,   235,   236,   236,   236,   236,   236,
   236,   237,   237,   237,   237,   237,   237,   237,   237,   238,
   238,   239,   239,   240,   240,   240,   240,   240,   240,   240,
   240,   241,   242,   242,   242,   242,   242,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   245,   245,   246,   246,
   246,   246,   246,   247,   247,   247,   247,   247,   247,   248,
   248,   249,   249,   250,   250,   250,   251,   251,   252,   252,
   252,   253,   253,   253,   253,   254,   254,   254,   254,   254
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     7,     6,     8,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    13,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    19,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    25,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     4,     3,     3,     4,     4,     4,     4,     6,    11,     6,
    11,     6,    11,     6,    11,     6,    11,     6,    11,     5,
    11,     5,    11,     6,    11,     6,    11,     6,    11,     8,
     7,     8,    12,     6,     5,     7,     7,    12,     7,     9,
    17,     7,     8,     8,     7,    11,     5,     8,     9,     8,
    22,    20,     8,     8,     5,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     4,     4,     3,
     3,     2,     3,     2,     3,     6,     8,     1,     1,     3,
     2,     8,    12,     8,    12,     8,    12,    11,    15,     1,
     2,     9,     2,     6,     9,     9,     8,     8,     8,     6,
     4,     2,     1,     1,     1,     1,     1,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     1,     1,     1,
     3,     8,     4,     9,     4,     9,     3,     5,     1,     2,
     2,     3,     3,    11,     9,     7,     7,     3,     8,     0,
     3,     1,     3,     0,     3,     3,     1,     3,     0,     1,
     3,     1,     1,     3,     3,     9,     7,     5,     1,     5
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   208,     0,     0,   209,
     0,     0,     0,    52,    54,    53,    55,    56,    57,    58,
    59,    63,    65,    64,    60,    61,    62,   278,   280,   279,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   238,    12,     0,    13,    14,
    16,    15,    17,   300,   300,     0,    66,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   204,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   309,     0,     0,     0,     0,   309,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   289,     0,     0,     0,     0,     0,   196,     0,   309,   196,
   232,     0,   309,   309,     0,     0,     0,     0,   202,     0,
     0,   211,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   241,   240,   242,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   132,   133,     0,     0,     0,   201,     0,
   205,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   310,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   291,   290,     0,     0,     0,     0,   196,   196,     0,
     0,     0,     0,     0,   200,     0,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,   203,   210,     0,   281,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   239,     0,   255,   256,   254,   253,   249,   250,   251,
   252,   241,   240,   245,   246,   247,   248,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   302,     0,
     0,     0,     0,   131,   134,   135,   136,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   244,   243,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   312,   313,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   298,     0,
     0,     0,   293,   292,   195,     0,   194,   193,     0,     0,
     0,     0,     0,   198,   197,   231,     0,   199,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   283,   285,
     0,   258,   259,   260,   261,   262,   263,   264,   265,   266,
   267,     0,   269,   270,   271,   272,   273,   274,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   301,     0,    19,     0,   280,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   150,   152,     0,     0,     0,     0,   165,   309,   309,
     0,   309,   177,     0,   185,   309,   309,     0,     0,   311,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   189,   191,     0,
     0,     0,     0,     0,    70,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
     0,     0,   309,     0,     0,   309,     0,     0,     0,     0,
     0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   309,   309,     0,     0,     0,     0,
   309,   309,     0,     0,     0,     0,     0,   309,     0,   309,
     0,     0,     0,     0,     0,   303,     0,   300,     0,   138,
     0,   140,   154,   142,   156,   144,   158,   146,   148,     0,
     0,     0,     0,     0,     0,   309,     0,   309,     0,     0,
   287,   314,   315,   164,     0,   309,   309,   309,   224,     0,
   309,   309,   309,   309,   309,   309,   309,     0,     0,     0,
     0,     0,     0,     0,     0,   230,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    68,
     0,     0,     0,     0,   304,     0,     0,   206,     0,     0,
   268,   275,   276,   277,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   233,   234,
   235,   236,   237,     0,     0,     0,     0,     0,     0,     0,
    18,     0,   281,     0,     0,   319,     0,     0,    67,   161,
   169,     0,   172,     0,   166,     0,   167,   187,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   196,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   175,     0,
   309,   309,     0,   309,     0,   309,     0,     0,     0,     0,
   309,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   309,
     0,     0,     0,     0,     0,     0,     0,     0,   300,     0,
     0,     0,   280,     0,   160,     0,   174,   184,   288,     0,
   228,   178,   180,     0,     0,   227,   229,   186,   162,   173,
   183,   188,     0,     0,   297,     0,   296,     0,     0,   212,
     0,   214,     0,   216,     0,    69,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   304,     0,   307,     0,     0,     0,   207,     0,   282,     0,
     0,     0,     0,    21,     0,    30,     0,    34,     0,    28,
     0,     0,    33,     0,    38,    36,     0,     0,     0,     0,
     0,     0,    45,     0,     0,     0,     0,     0,    50,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   170,     0,   226,   225,   196,   299,     0,   192,
     0,     0,     0,     0,     0,     0,   220,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   309,   306,   305,   309,     0,   179,   284,   286,
     0,     0,   304,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   309,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   295,     0,     0,     0,   223,   309,     0,   221,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   308,     0,     0,     0,    35,     0,
     0,     0,     0,    25,     0,    31,     0,    37,    26,    39,
     0,    42,     0,    46,    47,     0,     0,    49,     0,     0,
     0,   139,   141,   155,   143,   157,   145,   159,   147,   149,
   151,   153,   320,   318,     0,     0,   190,     0,     0,     0,
     0,     0,   218,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   309,   309,   176,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   282,     0,     0,   294,   213,   215,   217,
     0,   309,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    85,    89,    93,   163,   168,     0,     0,     0,     0,
     0,     0,     0,    29,    32,    40,     0,    41,    48,    43,
     0,     0,   317,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   309,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   309,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    24,    27,
     0,     0,   316,     0,   219,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,    87,     0,
    91,     0,     0,     0,     0,   309,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    44,    20,   171,   222,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    84,    86,    88,    90,    92,    94,     0,
     0,     0,     0,   309,     0,     0,     0,     0,     0,     0,
    97,   101,   105,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
   309,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   182,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    95,     0,    99,     0,   103,     0,   309,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   181,     0,    22,     0,     0,     0,     0,     0,
     0,    96,    98,   100,   102,   104,   106,   309,     0,     0,
     0,   109,   113,   117,     0,     0,     0,     0,     0,     0,
     0,   309,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   107,     0,   111,     0,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   108,   110,   112,   114,   116,   118,     0,   121,
   125,   129,    23,     0,     0,     0,     0,     0,     0,     0,
   119,     0,   123,     0,   127,     0,     0,     0,     0,     0,
     0,   120,   122,   124,   126,   128,   130,     0,     0,     0
};

static const short yydefgoto[] = {  1488,
     4,     5,    18,    19,    20,    21,     6,    64,    65,    66,
   470,  1266,   609,  1216,  1268,   610,  1217,  1270,   611,  1218,
  1372,   612,  1345,  1374,   613,  1346,  1376,   614,  1347,  1433,
   615,  1419,  1435,   616,  1420,  1437,   617,  1421,  1470,   618,
  1464,  1472,   619,  1465,  1474,   620,  1466,    67,   465,   455,
   456,   457,   458,    71,    72,    73,    74,    75,   996,   997,
    76,    77,   774,   286,   106,   433,   302,   161,   256,   400,
   843,   932,   933,   434,   788
};

static const short yypact[] = {   350,
-32768,-32768,   -36,-32768,   426,  2200,  1195,   135,    94,   137,
   144,   156,   163,   169,  -144,    50,    78,-32768,-32768,-32768,
-32768,   289,    99,    30,   303,  1195,  -100,   145,   150,   -35,
   -40,   183,   193,   332,   237,   347,   377,   384,   319,   393,
    27,   267,     3,     3,   272,    83,   299,   437,   442,   309,
   478,   486,   227,   326,   -29,   327,-32768,   496,   498,-32768,
   500,   504,   472,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   357,-32768,
   375,   378,   379,   380,   381,   389,   392,   403,   404,   405,
   408,   413,   414,   415,   417,   418,   419,   420,   421,   422,
  1195,  1195,  1195,  1195,  1482,-32768,-32768,  2236,-32768,-32768,
-32768,-32768,-32768,   423,   423,   548,-32768,  1195,  1195,  1195,
  1195,  1195,   558,   574,    20,   590,   594,-32768,   627,  1195,
  1195,  1195,  1195,   430,  1195,  1195,   431,  1195,  1195,  1195,
   730,  1195,   429,   447,   449,   730,   439,   445,   450,   451,
   453,   455,   461,     3,   458,     3,     3,  1195,  1195,   -92,
-32768,   -81,     3,   462,   463,   470,-32768,   619,   730,-32768,
-32768,    -1,   730,   730,  1195,   -68,  1195,  1195,-32768,   629,
   639,-32768,   475,    12,  1195,  1195,  1195,  1195,  1195,  1195,
  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
  1195,  1195,  1195,  1195,   479,   479,   479,  2857,  1195,  1195,
  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
  1195,  1195,  1195,  1482,   477,   487,   488,   489,   494,   497,
   499,   501,   503,   506,   507,   508,   510,   512,   513,   514,
   515,   516,   518,   528,   529,   535,   536,   537,   538,   539,
   552,   553,   554,   555,   659,   495,   532,   556,   676,   973,
  1295,  1366,  1390,-32768,-32768,   103,   550,   559,-32768,   557,
-32768,  1195,  1195,  2885,  2355,  2913,  2941,  1195,  2969,  2378,
  1195,  2401,  2997,  3025,  1195,  7529,   664,  3053,  1195,  1195,
  1195,   668,  1195,  1195,  1195,  1195,  1195,  1195,  1195,   -23,
    18,-32768,-32768,  4621,  4648,     3,     3,   382,   382,    -5,
  1195,  1195,  1195,  2130,-32768,    84,  2148,     3,-32768,   724,
   729,  3081,   655,  1195,  3109,  1029,-32768,-32768,  1195,   124,
   583,  3137,  3165,  3193,  3221,  3249,  3277,  3305,  3333,  3361,
  3389,  4675,  3417,  3445,  3473,  3501,  3529,  3557,  4702,  4729,
  4756,-32768,  1943,   448,   448,   534,   534,   256,   256,   256,
   256,   -28,   -20,   479,   479,   479,   479,  4783,   756,   757,
   758,   759,   761,   762,   763,   764,   765,   766,   767,   773,
   774,   776,   788,   789,   791,   794,   795,   796,   797,   798,
   799,   677,   800,   802,   804,   806,   810,   809,-32768,   -55,
   811,   812,   814,-32768,-32768,-32768,-32768,-32768,   315,   927,
   927,  1195,  1195,   815,   821,  1195,   813,  1195,   117,   117,
   808,   822,   835,   838,  3585,   839,   823,  3613,   841,   842,
   843,  1966,-32768,    95,  1195,   844,  2424,  3641,  3669,  1195,
  2447,  2470,  3697,  3725,  3753,  3781,  3809,     3,-32768,   643,
  1195,  1195,-32768,-32768,-32768,   673,  1011,-32768,   679,  1195,
  4806,  4833,  4860,-32768,-32768,-32768,  1195,-32768,   -75,   -30,
   678,   681,   849,   686,  3837,   851,  1195,  3865,-32768,-32768,
  1195,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1195,-32768,-32768,-32768,-32768,-32768,-32768,  1195,  1195,
  1195,  1195,   716,   691,   692,   693,   694,   696,   697,   698,
   700,   702,   703,   704,   705,   706,   707,   708,   709,   710,
   712,   713,   714,   715,   717,   720,   721,   722,   723,   726,
   728,   731,   733,   883,-32768,   734,-32768,   736,   746,   890,
   927,   927,  1195,  1416,    -2,  1459,     0,  1549,     5,  1575,
  1598,-32768,-32768,  2150,   895,  3893,     3,-32768,   730,   730,
   899,   730,-32768,   902,-32768,   730,   730,  1195,  1195,-32768,
  1627,   749,   917,   918,   919,   409,   920,   921,   922,   925,
   928,   950,   951,   151,  1195,  4887,  4914,-32768,-32768,  2493,
     3,     3,     3,  1650,-32768,   790,   805,   807,   816,   817,
   818,   819,   820,   824,   825,   826,   827,   953,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1195,  1195,   730,  1195,   955,   730,   493,   966,  2226,  3921,
  3949,  3977,  4005,  7529,   853,   931,  1195,  1195,     3,   957,
   974,   831,   977,   978,   730,   730,   979,     3,   980,   991,
   730,   730,   996,   997,   998,   999,  1002,   730,   351,   730,
  1003,  1004,  1006,  1005,  1009,-32768,  1001,   423,    21,-32768,
  2829,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   846,
    24,  1012,    59,    23,  1017,   730,  1018,   730,  1019,  1020,
  1994,  1966,-32768,-32768,  1195,   730,   730,   730,-32768,   264,
   730,   730,   730,   730,   730,   730,   730,  1195,  2249,  1195,
  1195,   854,   -99,   -83,   138,-32768,   -18,  1195,  1195,  1195,
  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,-32768,
  4941,  4968,  1023,  4033,   178,   932,  1195,-32768,  1195,   855,
-32768,-32768,-32768,-32768,  1195,   845,  4995,  5022,   -73,   858,
   860,   862,   863,   866,   867,   869,   870,   -52,   871,   879,
   884,   888,   889,   904,   906,   907,   910,   911,-32768,-32768,
-32768,-32768,-32768,   913,   914,   923,   924,   930,   934,   936,
-32768,   937,   124,   885,  1035,   915,  1234,  1077,-32768,-32768,
-32768,     3,-32768,  1086,-32768,  1087,-32768,-32768,  1195,  5049,
  1091,  1097,  1098,  1195,  1195,  1104,  1105,  1107,  1109,  1110,
  1111,  1118,  2516,   949,  4061,  1518,   382,     3,  1120,     3,
  1121,     3,    25,  1122,  5076,  5103,  5130,  5157,  5184,  5211,
  5238,  5265,  5292,  5319,  5346,  5373,  1195,  1195,-32768,  1131,
   730,   730,  1056,   730,  4089,   219,  1139,  1482,  1142,  1195,
   730,  1140,  1145,  1143,   992,  1147,   351,  1156,  1160,  1195,
  1158,  1162,  1174,  1175,  1180,   351,  1195,  1195,  1195,   730,
  1178,  1191,   351,  1195,  1193,  1197,  1196,  1195,   423,  1195,
   243,  1117,  -146,  5400,-32768,    64,-32768,-32768,  7529,  1195,
-32768,-32768,-32768,  1678,  1709,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1066,  1199,-32768,  1195,-32768,  1067,   185,-32768,
   187,-32768,   200,-32768,   199,-32768,  1195,  1195,  1195,  1195,
  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  5427,  5454,
   178,   190,-32768,   213,  1090,  1161,-32768,  1259,   261,  1482,
  1095,  5481,  1099,-32768,  1100,-32768,  1101,-32768,  1096,-32768,
  1112,  4117,-32768,  1114,-32768,-32768,  1115,  1116,  4145,  5508,
  4173,  1123,-32768,  1119,  1124,  5535,  1127,  1129,-32768,  5562,
  1132,  2272,   502,   927,   927,  1195,  1195,  1195,  1195,  1094,
  1195,  1195,-32768,  5589,-32768,-32768,   382,-32768,  2295,-32768,
  1195,  1195,  1195,  1284,  1133,   -48,-32768,  5616,  5643,  5670,
  5697,  5724,  5751,  5778,  5805,  5832,  5859,  5886,  5913,  1195,
  1195,  1210,   730,-32768,-32768,   730,  1195,-32768,-32768,-32768,
  2546,  1288,   178,   351,  1293,  1195,  1297,   351,  1300,  1305,
  1303,  1304,  1306,  1195,  1309,   730,  1310,  1311,  1195,  1308,
  1319,  1195,  1321,  1151,  1322,  1734,    66,  1757,   101,  1786,
   116,  1809,  1837,  1868,  1893,  1325,  2569,  5940,  1326,  1155,
  1195,-32768,  2592,  2615,  2638,-32768,   730,  1327,-32768,  1195,
  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
  1195,  2661,  2684,  1163,-32768,  1164,  1916,  1195,-32768,  1166,
  1167,  1168,  5967,-32768,  1159,-32768,  1169,-32768,-32768,-32768,
  4201,-32768,  1171,-32768,-32768,  4229,  1172,-32768,  4257,  1185,
  1330,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1195,  1186,-32768,  2707,  1329,  1338,
    26,  1187,-32768,  5994,  6021,  6048,  6075,  6102,  6129,  6156,
  6183,  6210,  4285,  4313,  4341,  1354,  1355,   730,   730,-32768,
  1482,   351,   351,   351,   351,  1357,  1358,  1359,   351,  1361,
  1362,  1363,  1365,   261,  2325,  1368,-32768,-32768,-32768,-32768,
   199,   730,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
  1195,-32768,-32768,-32768,-32768,-32768,  1209,  1208,  1482,  1213,
  1214,  1198,  1215,-32768,-32768,-32768,  1217,-32768,-32768,-32768,
  1218,  1195,-32768,  1219,   -45,  1220,  6237,  6264,  6291,  6318,
  6345,  6372,  6399,  6426,  6453,  1223,  1224,  1225,   730,  1307,
  2737,   351,   351,  1387,  1394,   351,  1401,  2760,  1402,  1403,
   730,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
  1195,  1195,  1195,  1233,  1236,  1195,  1239,  1240,-32768,-32768,
  1241,  1242,-32768,  1238,-32768,  1248,  6480,  6507,  6534,  6561,
  6588,  6615,  6642,  6669,  6696,   217,  7529,   235,  7529,   250,
  7529,  1344,  1195,  1482,   351,   730,  1419,  1420,  1421,  1422,
  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
  1423,  1195,  1424,  1195,  1425,  1258,  6723,  1482,  1265,  1267,
-32768,-32768,-32768,-32768,  6750,  6777,  6804,  6831,  6858,  6885,
  4369,  4397,  4425,  7529,-32768,  7529,-32768,  7529,-32768,  1195,
  1195,  7506,   351,   730,  1195,  1195,  1195,  1195,  1195,  1195,
-32768,-32768,-32768,  6912,  2783,  1301,  1275,  1276,  6939,  6966,
  6993,  7020,  7047,  7074,  1290,  1292,  1294,  1195,  1443,-32768,
   730,   351,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
  1195,  2806,-32768,  1278,  1299,  7101,  7128,  7155,  7182,  7209,
  7236,   268,  7529,   280,  7529,   282,  7529,  1468,   730,  1469,
  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1470,  1195,  1471,
  1195,  1472,-32768,  1312,-32768,  7263,  7290,  7317,  4453,  4481,
  4509,  7529,-32768,  7529,-32768,  7529,-32768,   730,  1195,  1195,
  1195,-32768,-32768,-32768,  1315,  7344,  7371,  7398,  1314,  1343,
  1345,   730,  1195,  1195,  1195,  1195,  1195,  1195,  1317,  7425,
  7452,  7479,   284,  7529,   297,  7529,   305,  7529,   351,  1195,
  1195,  1195,  1195,  1473,  1195,  1474,  1195,  1475,  1347,  4537,
  4565,  4593,  7529,-32768,  7529,-32768,  7529,-32768,  1476,-32768,
-32768,-32768,-32768,  1367,  1369,  1370,  1195,  1195,  1195,   306,
  7529,   324,  7529,   373,  7529,  1195,  1477,  1195,  1512,  1195,
  1525,  7529,-32768,  7529,-32768,  7529,-32768,  1532,  1533,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   940,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1536,  1539,
  -307,   224,  1550,-32768,-32768,-32768,-32768,-32768,   386,  -987,
-32768,-32768,  -852,    -7,-32768,   990,   -10,-32768,  -114,-32768,
  -921,   718,   454,-32768,-32768
};


#define	YYLAST		7697


static const short yytable[] = {   105,
   257,   459,   318,   673,   949,   675,   155,   176,  1069,  1012,
   677,   994,   323,   958,   994,   330,   995,   137,   129,   995,
   965,   449,   134,   266,   783,   981,   114,   786,   791,   184,
   914,  1170,   160,   162,   126,   596,   597,   598,   599,   600,
   601,   602,   603,   604,   605,   606,   607,   596,   597,   598,
   599,   600,   601,   602,   603,   604,   605,   606,   607,   150,
   306,   307,   151,   152,   790,   153,   792,   306,   307,   983,
   130,  1114,   818,   131,   331,   819,   306,   307,   306,   307,
   450,   308,   267,   784,   306,   307,   306,   307,   820,   466,
   467,   821,   309,   205,   206,   207,   208,   224,   595,   852,
   108,  1090,   324,   268,     7,   118,  1116,   306,   307,   409,
   259,   260,   261,   262,   263,   164,   534,   535,   165,   166,
   861,  1118,   274,   275,   276,   277,  1068,   279,   280,  1230,
   282,   283,   284,   138,   288,   135,   306,   307,   136,   223,
   107,   177,   109,   300,   608,  -244,   303,   223,   448,   110,
   304,   305,   310,  -243,   306,   307,   824,   306,   307,   306,
   307,   111,   156,   157,   306,   307,   460,   322,   112,   325,
   326,  1091,   319,   158,   113,  1095,   159,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
   345,   346,   347,   348,   349,   350,   351,   787,   915,  1171,
   127,   353,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,   364,   365,   366,   367,   368,  1069,   306,   307,
   115,    78,    79,   306,   307,   306,   307,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   116,   973,
   119,   120,   121,   122,   410,   411,   412,   413,   994,   173,
   306,   307,   174,   995,   419,   420,   569,   123,   124,   570,
   425,   414,   415,   428,   125,   306,   307,   432,   220,   221,
   222,   437,   438,   439,   223,   441,   442,   443,   444,   445,
   446,   447,   479,   480,   117,   453,   454,   306,   307,  1190,
  1191,  1192,  1193,   461,   462,   463,  1197,   469,   128,   822,
   306,   307,   823,   804,   805,   132,   475,    78,   539,   540,
   133,   478,   708,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   306,   307,   306,   307,   841,    -7,
    -7,   842,    -7,   139,   146,   147,   991,   148,   992,   306,
   307,  1013,  1014,   140,   209,   210,   211,   212,   213,  1247,
  1248,   993,   141,  1251,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   143,  1013,   103,   223,  1015,  1290,   104,
   314,  1291,   285,   317,   974,   975,   976,   977,   545,   547,
   549,   544,   546,   548,   550,   551,  1292,   142,   554,  1293,
   556,   978,   979,   144,   699,   272,   273,   220,   221,   222,
   145,  1294,  1299,   223,  1295,    -1,     8,   571,     9,  1019,
  1020,   149,   576,    42,    43,    44,    45,   584,    47,  1387,
   154,   168,  1388,   586,   587,   163,   769,   770,   771,   772,
   773,  1389,   590,  1391,  1390,  1443,  1392,   700,  1444,   594,
    -7,    -7,    -7,    -7,    -7,    -7,    -7,    -7,  1445,   627,
  1337,  1446,   167,   629,   541,   542,  1447,  1476,   169,  1448,
  1477,   103,   170,   171,   630,   543,     1,     2,   159,     3,
   172,   631,   632,   633,   634,  1478,   175,   178,  1479,  1365,
   737,   179,   180,   181,    78,   539,  1045,   182,   183,   908,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   303,   184,   205,   206,   671,    10,    11,    12,    13,
    14,    15,    16,    17,  1480,   185,   683,  1481,   186,   187,
   188,   189,   258,   782,   209,   210,   211,   212,   213,   190,
   691,   692,   191,   264,   214,   215,   216,   217,   272,   273,
   220,   221,   222,   192,   193,   194,   223,   709,   195,   265,
   713,   714,   715,   196,   197,   198,  1449,   199,   200,   201,
   202,   203,   204,   255,   287,   269,   212,   213,   270,   292,
   278,   281,   289,   214,   215,   216,   217,   272,   273,   220,
   221,   222,   293,   731,   732,   223,   734,   290,   294,   291,
   295,   296,   316,   297,   315,   298,   320,   321,   749,   747,
   748,   299,   271,   301,   327,   311,   312,   758,   209,   210,
   211,   212,   213,   313,   328,   329,   223,   369,   214,   215,
   216,   217,   272,   273,   220,   221,   222,   370,   371,   372,
   223,   541,   542,   399,   373,   738,   401,   374,   103,   375,
   435,   376,   543,   377,   440,   159,   378,   379,   380,  1060,
   381,   404,   382,   383,   384,   385,   386,   800,   387,   214,
   215,   216,   217,   272,   273,   220,   221,   222,   388,   389,
   813,   223,   815,   816,   402,   390,   391,   392,   393,   394,
   825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
   835,   836,   395,   396,   397,   398,   416,   403,   418,   845,
   471,   846,    78,    79,   417,   472,   474,   848,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   481,
   504,   505,   506,   507,   971,   508,   509,   510,   511,   512,
   513,   514,   209,   210,   211,   212,   213,   515,   516,   884,
   517,   886,   214,   215,   216,   217,   272,   273,   220,   221,
   222,   889,   518,   519,   223,   520,   894,   895,   521,   522,
   523,   524,   525,   526,   528,   527,   529,   909,   530,   911,
   531,   913,   532,   533,   557,   536,   555,   537,   538,   585,
   552,   209,   210,   211,   212,   213,   553,   558,   563,   929,
   930,   214,   215,   216,   217,   272,   273,   220,   221,   222,
   940,   559,   942,   223,   560,   562,   565,   588,   566,   567,
   572,   621,   952,   589,   622,   623,   624,   626,   635,   959,
   960,   961,   636,   637,   638,   639,   966,   640,   641,   642,
   970,   643,   972,   644,   645,   646,   647,   648,   649,   650,
   651,   652,   984,   653,   654,   655,   656,   666,   657,   101,
   102,   658,   659,   660,   661,   670,   103,   662,   989,   663,
   104,   681,   664,   285,   665,   686,   667,   668,   688,   998,
   999,  1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,
  1009,   669,   695,   696,   697,   698,   701,   702,   703,    78,
   539,   704,  1021,   746,   705,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   706,   707,   730,   750,
   718,   735,  1047,  1049,  1051,  1046,  1048,  1050,  1052,  1053,
  1054,  1055,   739,  1057,  1058,   719,   751,   720,   405,   753,
   754,   757,   759,  1063,  1064,  1065,   721,   722,   723,   724,
   725,   745,   752,   760,   726,   727,   728,   729,   763,   764,
   765,   766,  1082,  1083,   767,   776,   781,   779,   777,  1087,
   778,   780,   684,   685,   844,   687,   849,   789,  1093,   689,
   690,   785,   793,   795,   797,   798,  1101,   817,   839,   853,
   847,  1106,   854,   855,  1109,   856,   477,   857,   881,   858,
   859,   860,   862,    27,    28,    29,    30,    31,    32,    33,
    34,   863,    35,  1128,    37,    38,   864,    40,    41,   865,
   866,   880,  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,
  1142,  1143,  1144,  1145,    53,   867,   733,   868,   869,   736,
  1151,   870,   885,   871,   872,   873,   541,   542,    54,    55,
   882,   887,   888,   103,   874,   875,   891,   543,   755,   756,
   159,   876,   892,   893,   761,   762,   877,   878,   879,   896,
   897,   768,   898,   775,   899,   900,   901,  1165,   209,   210,
   211,   212,   213,   902,   904,   910,   912,   916,   214,   215,
   216,   217,   272,   273,   220,   221,   222,   931,   935,   794,
   223,   796,   939,  1189,   941,   944,    63,   945,   946,   801,
   802,   803,   948,   947,   806,   807,   808,   809,   810,   811,
   812,   950,   951,   953,   954,  1207,  1208,  1209,  1210,  1211,
  1212,  1213,  1214,  1215,   209,   210,   211,   212,   213,   955,
   956,  1221,   957,   963,   214,   215,   216,   217,   272,   273,
   220,   221,   222,   964,  1228,   967,   223,    78,    79,   968,
   980,   969,   988,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,  1257,  1258,  1259,  1260,  1261,  1262,
  1263,  1264,  1265,  1267,  1269,  1271,    78,   883,  1274,   987,
  1017,   990,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,  1016,  1018,  1297,  1298,  1022,  1027,  1056,
  1024,  1025,  1026,  1305,  1306,  1307,  1308,  1309,  1310,  1311,
  1312,  1313,  1314,  1028,  1316,  1030,  1318,  1031,  1032,  1066,
  1322,  1037,  1084,  1089,  1036,  1092,  1038,   936,  1040,   938,
   406,  1041,  1094,  1043,   943,  1096,  1067,  1097,  1098,  1099,
  1107,  1100,  1334,  1335,  1102,  1104,  1105,  1339,  1340,  1341,
  1342,  1343,  1344,   962,  1108,  1110,  1111,  1112,  1123,  1127,
  1126,  1156,  1133,  1164,  1168,  1149,  1148,  1152,  1153,  1154,
  1362,  1157,  1159,  1169,  1161,  1366,  1367,  1368,  1369,  1370,
  1371,  1373,  1375,  1377,   101,   102,  1163,  1166,  1172,  1185,
  1186,   103,  1194,  1195,  1196,   104,  1198,  1199,  1200,  1201,
  1224,   407,  1204,  1396,  1397,  1398,  1399,  1400,  1401,  1402,
  1219,  1404,  1220,  1406,  1222,  1223,  1245,  1225,  1226,  1227,
  1229,  1231,  1249,   101,   102,   408,  1241,  1242,  1243,  1250,
   103,  1416,  1417,  1418,   104,  1252,  1254,  1272,  1255,  1273,
  1275,  1276,  1279,  1277,  1278,  1430,  1431,  1432,  1434,  1436,
  1438,   672,  1280,  1296,  1301,  1302,  1303,  1304,  1315,  1317,
  1319,  1320,  1450,  1451,  1452,  1453,  1323,  1455,  1324,  1457,
   209,   210,   211,   212,   213,  1350,  1351,  1352,  1363,  1379,
   214,   215,   216,   217,   272,   273,   220,   221,   222,  1471,
  1473,  1475,   223,  1359,   674,  1360,  1085,  1361,  1482,  1086,
  1484,  1380,  1486,  1393,  1395,  1403,  1405,  1407,  1454,  1456,
  1458,  1463,  1483,  1408,    78,    79,  1422,  1426,  1439,  1103,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   209,   210,   211,   212,   213,  1427,  1485,  1428,  1459,
  1132,   214,   215,   216,   217,   272,   273,   220,   221,   222,
  1487,  1489,  1490,   223,   717,   209,   210,   211,   212,   213,
  1467,    68,  1468,  1469,    69,   214,   215,   216,   217,   272,
   273,   220,   221,   222,   676,    70,  1205,   223,   693,   934,
     0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
   678,     0,     0,   223,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1187,  1188,   679,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,  1206,   223,   209,   210,   211,
   212,   213,   694,     0,     0,     0,     0,   214,   215,   216,
   217,   218,   219,   220,   221,   222,     0,     0,   103,   223,
     0,     0,   104,     0,     0,   716,     0,     0,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   213,     0,     0,
     0,     0,  1244,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,   985,  1256,   223,     0,     0,     0,   906,
     0,     0,   907,     0,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,   986,     0,   223,     0,     0,     0,
   209,   210,   211,   212,   213,     0,     0,     0,     0,  1300,
   214,   215,   216,   217,   272,   273,   220,   221,   222,  1113,
     0,     0,   223,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,  1115,     0,     0,   223,     0,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   213,  1338,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,  1117,     0,     0,   223,   209,   210,   211,   212,   213,
     0,     0,     0,     0,  1364,   214,   215,   216,   217,   272,
   273,   220,   221,   222,  1119,     0,     0,   223,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   213,     0,     0,
     0,     0,  1394,   214,   215,   216,   217,   272,   273,   220,
   221,   222,  1120,     0,     0,   223,     0,     0,     0,     0,
     0,     0,     0,     0,   209,   210,   211,   212,   213,     0,
     0,  1415,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,  1121,     0,  1429,   223,     0,     0,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,  1122,     0,
     0,   223,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,  1150,     0,     0,   223,     0,     0,     0,     0,     0,
     0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
   502,     0,     0,   223,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,   568,     0,     0,   223,     0,     0,     0,
     0,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,   799,     0,     0,   223,     0,     0,     0,     0,     0,
     0,     0,     0,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,     0,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,     0,     0,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,    27,    28,    29,    30,    31,    32,    33,    34,
     0,    35,     0,    37,    38,     0,    40,    41,     0,     0,
    27,    28,    29,    30,    31,    32,    33,    34,     0,    35,
     0,    37,    38,    53,    40,    41,     0,     0,     0,    -3,
    22,     0,     0,    23,     0,     0,     0,    54,    55,     0,
     0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,     0,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
     0,    35,    36,    37,    38,    39,    40,    41,     0,     0,
     0,    42,    43,    44,    45,    46,    47,     0,    48,    49,
    50,    51,    52,    53,     0,    63,     0,     0,     0,     0,
     0,   225,     0,     0,     0,     0,     0,    54,    55,     0,
     0,     0,     0,    63,    56,    57,     0,    58,    59,    60,
    61,    62,     0,     0,     0,   209,   210,   211,   212,   213,
     0,     0,     0,     0,   464,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,     0,   468,     0,     0,     0,     0,   680,   226,   227,
   228,     0,     0,     0,     0,    63,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,     0,     0,     0,     0,
     0,     0,     0,     0,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
   254,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   209,   210,   211,   212,   213,     0,
     0,     0,     0,   740,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,   209,   210,   211,
   212,   213,     0,     0,     0,     0,   814,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
   209,   210,   211,   212,   213,     0,     0,     0,     0,  1044,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1061,     0,     0,  1062,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1202,     0,     0,  1203,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,   209,   210,   211,   212,   213,     0,   422,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,   209,   210,   211,   212,
   213,     0,   427,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,   209,
   210,   211,   212,   213,     0,   429,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,   209,   210,   211,   212,   213,     0,   573,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,   209,   210,   211,   212,   213,
     0,   577,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,   209,   210,
   211,   212,   213,     0,   578,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,   712,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,  1088,     0,     0,     0,     0,     0,
   903,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,   209,   210,   211,
   212,   213,     0,  1124,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
   209,   210,   211,   212,   213,     0,  1129,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,   209,   210,   211,   212,   213,     0,  1130,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,   209,   210,   211,   212,
   213,     0,  1131,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,   209,
   210,   211,   212,   213,     0,  1146,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,   209,   210,   211,   212,   213,     0,  1147,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,  1246,     0,     0,     0,     0,
     0,  1167,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,   209,   210,
   211,   212,   213,     0,  1253,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,  1349,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   209,   210,   211,   212,   213,     0,
  1378,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
   451,   352,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   352,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   421,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   423,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   424,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   426,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   430,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   431,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   436,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   473,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   476,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   482,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   483,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   484,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   485,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   486,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   487,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   488,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   489,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   490,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   491,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   493,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   494,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   495,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   496,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   497,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   498,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   561,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   564,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   574,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   575,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   579,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   580,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   581,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   582,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   583,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   625,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   628,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   682,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   741,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   742,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,   743,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,   744,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,   840,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,   905,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,   937,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1029,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1033,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,  1035,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,  1158,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,  1160,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1162,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1182,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,  1183,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,  1184,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,  1331,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1332,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1333,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,  1412,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,     0,  1413,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
     0,  1414,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,     0,  1460,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,     0,  1461,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,     0,  1462,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,   451,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,   452,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,   492,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,   499,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
   500,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   503,     0,     0,   501,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,   591,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,   592,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,   593,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,   710,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,   711,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,   837,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,   838,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,   850,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,   851,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
   890,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,   917,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,   918,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,   919,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,   920,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,   921,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,   922,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,   923,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,   924,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,   925,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
   926,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,   927,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,   928,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,   982,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1010,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1011,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1023,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1034,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1039,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1042,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1059,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1070,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1071,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1072,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1073,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1074,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1075,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1076,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1077,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1078,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1079,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1080,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1081,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1125,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1155,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1173,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1174,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1175,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1176,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1177,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1178,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1179,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1180,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1181,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1232,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1233,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1234,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1235,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1236,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1237,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1238,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1239,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1240,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1281,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1282,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1283,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1284,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1285,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1286,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1287,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1288,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1289,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1321,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1325,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1326,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1327,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1328,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1329,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1330,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1348,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1353,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1354,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1355,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1356,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1357,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1358,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1381,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1382,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1383,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1384,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,     0,
  1385,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,     0,     0,     0,  1386,   209,   210,
   211,   212,   213,     0,     0,     0,     0,     0,   214,   215,
   216,   217,   272,   273,   220,   221,   222,     0,     0,     0,
   223,     0,     0,     0,  1409,   209,   210,   211,   212,   213,
     0,     0,     0,     0,     0,   214,   215,   216,   217,   272,
   273,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     0,  1410,   209,   210,   211,   212,   213,     0,     0,     0,
     0,     0,   214,   215,   216,   217,   272,   273,   220,   221,
   222,     0,     0,     0,   223,     0,     0,     0,  1411,   209,
   210,   211,   212,   213,     0,     0,     0,     0,     0,   214,
   215,   216,   217,   272,   273,   220,   221,   222,     0,     0,
     0,   223,     0,     0,     0,  1423,   209,   210,   211,   212,
   213,     0,     0,     0,     0,     0,   214,   215,   216,   217,
   272,   273,   220,   221,   222,     0,     0,     0,   223,     0,
     0,     0,  1424,   209,   210,   211,   212,   213,     0,     0,
     0,     0,     0,   214,   215,   216,   217,   272,   273,   220,
   221,   222,     0,     0,     0,   223,     0,     0,     0,  1425,
   209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
   214,   215,   216,   217,   272,   273,   220,   221,   222,     0,
     0,     0,   223,     0,     0,     0,  1440,   209,   210,   211,
   212,   213,     0,     0,     0,     0,     0,   214,   215,   216,
   217,   272,   273,   220,   221,   222,     0,     0,     0,   223,
     0,     0,     0,  1441,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223,     0,     0,  1336,
  1442,   209,   210,   211,   212,   213,     0,     0,     0,     0,
     0,   214,   215,   216,   217,   272,   273,   220,   221,   222,
     0,     0,     0,   223,   209,   210,   211,   212,   213,     0,
     0,     0,     0,     0,   214,   215,   216,   217,   272,   273,
   220,   221,   222,     0,     0,     0,   223
};

static const short yycheck[] = {     7,
   115,   309,     4,     6,   857,     6,     4,    37,   996,   931,
     6,    60,    81,   866,    60,     4,    65,    58,    26,    65,
   873,     4,    58,     4,     4,   172,   171,     4,     6,   176,
     6,     6,    43,    44,     5,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    33,
   160,   161,    36,    37,     6,    39,    44,   160,   161,     6,
   171,     6,   172,   174,    63,   175,   160,   161,   160,   161,
    63,   174,    63,    63,   160,   161,   160,   161,   172,     6,
     7,   175,   174,   101,   102,   103,   104,   105,   174,   173,
     7,  1023,   171,    84,   141,     7,     6,   160,   161,     7,
   118,   119,   120,   121,   122,    33,   172,   173,    36,    37,
   173,     6,   130,   131,   132,   133,   175,   135,   136,   175,
   138,   139,   140,   174,   142,   171,   160,   161,   174,   168,
     6,   171,     6,   154,   175,   174,   157,   168,   172,     6,
   158,   159,   163,   174,   160,   161,   175,   160,   161,   160,
   161,     6,   160,   161,   160,   161,   172,   175,     6,   177,
   178,  1024,   174,   171,     6,  1028,   174,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   174,   174,   174,
   171,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,  1205,   160,   161,
   171,     3,     4,   160,   161,   160,   161,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,   171,     7,
   152,   153,   154,   155,   152,   153,   154,   155,    60,    33,
   160,   161,    36,    65,   272,   273,   172,   169,   170,   175,
   278,   169,   170,   281,   176,   160,   161,   285,   162,   163,
   164,   289,   290,   291,   168,   293,   294,   295,   296,   297,
   298,   299,   169,   170,     6,   306,   307,   160,   161,  1152,
  1153,  1154,  1155,   311,   312,   313,  1159,   318,     6,   172,
   160,   161,   175,    50,    51,   171,   324,     3,     4,     5,
   171,   329,   172,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,   160,   161,   160,   161,   171,     0,
     1,   174,     3,   171,    36,    37,   172,    39,   172,   160,
   161,   172,   173,   171,   146,   147,   148,   149,   150,  1222,
  1223,   172,    41,  1226,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    37,   172,   167,   168,   175,   172,   171,
   167,   175,   174,   170,   152,   153,   154,   155,   409,   410,
   411,   409,   410,   411,   412,   413,   172,   171,   416,   175,
   418,   169,   170,    37,     6,   160,   161,   162,   163,   164,
    37,   172,  1275,   168,   175,     0,     1,   435,     3,   169,
   170,    39,   440,    52,    53,    54,    55,   448,    57,   172,
   174,     5,   175,   451,   452,   174,    96,    97,    98,    99,
   100,   172,   460,   172,   175,   172,   175,    49,   175,   467,
   111,   112,   113,   114,   115,   116,   117,   118,   172,   477,
  1323,   175,   174,   481,   160,   161,   172,   172,    37,   175,
   175,   167,   174,     6,   492,   171,   137,   138,   174,   140,
     5,   499,   500,   501,   502,   172,   171,   171,   175,  1352,
     8,     6,     5,     4,     3,     4,     5,     4,    37,   817,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   542,   176,   541,   542,   543,   111,   112,   113,   114,
   115,   116,   117,   118,   172,   171,   557,   175,   171,   171,
   171,   171,     5,   668,   146,   147,   148,   149,   150,   171,
   568,   569,   171,     6,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   171,   171,   171,   168,   585,   171,     6,
   591,   592,   593,   171,   171,   171,  1439,   171,   171,   171,
   171,   171,   171,   171,   141,     6,   149,   150,     5,   146,
   171,   171,   174,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   174,   621,   622,   168,   624,   171,   174,   171,
   171,   171,   169,   171,     6,   171,   173,   174,   639,   637,
   638,   171,     6,   176,     6,   174,   174,   648,   146,   147,
   148,   149,   150,   174,     6,   171,   168,   171,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   171,   171,   171,
   168,   160,   161,     5,   171,   173,   172,   171,   167,   171,
     7,   171,   171,   171,     7,   174,   171,   171,   171,   987,
   171,     6,   171,   171,   171,   171,   171,   695,   171,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   171,   171,
   708,   168,   710,   711,   173,   171,   171,   171,   171,   171,
   718,   719,   720,   721,   722,   723,   724,   725,   726,   727,
   728,   729,   171,   171,   171,   171,   177,   172,   172,   737,
     7,   739,     3,     4,   176,     7,    82,   745,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,   177,
     5,     5,     5,     5,   879,     5,     5,     5,     5,     5,
     5,     5,   146,   147,   148,   149,   150,     5,     5,   787,
     5,   792,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   799,     5,     5,   168,     5,   804,   805,     5,     5,
     5,     5,     5,     5,     5,   129,     5,   818,     5,   820,
     5,   822,     3,     5,     7,     5,     4,     6,     5,   177,
     6,   146,   147,   148,   149,   150,     6,     6,     6,   837,
   838,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   848,     7,   850,   168,     7,     7,     6,   175,     7,     7,
     7,   174,   860,   175,   174,     7,   171,     7,   143,   867,
   868,   869,   172,   172,   172,   172,   874,   172,   172,   172,
   878,   172,   880,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   890,   172,   172,   172,   172,     5,   172,   160,
   161,   172,   172,   172,   172,     6,   167,   172,   906,   172,
   171,     7,   172,   174,   172,     7,   173,   172,     7,   917,
   918,   919,   920,   921,   922,   923,   924,   925,   926,   927,
   928,   176,   174,     7,     7,     7,     7,     7,     7,     3,
     4,     7,   940,     3,     7,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,     7,     7,     6,     3,
   171,     7,   973,   974,   975,   973,   974,   975,   976,   977,
   978,   979,     7,   981,   982,   171,     3,   171,     6,     3,
     3,     3,     3,   991,   992,   993,   171,   171,   171,   171,
   171,   139,   162,     3,   171,   171,   171,   171,     3,     3,
     3,     3,  1010,  1011,     3,     3,     6,     3,     5,  1017,
     5,     3,   559,   560,    83,   562,   172,     6,  1026,   566,
   567,   176,     6,     6,     6,     6,  1034,   174,     6,   172,
   176,  1039,   173,   172,  1042,   173,     8,   172,     4,   173,
   172,   172,   172,    33,    34,    35,    36,    37,    38,    39,
    40,   173,    42,  1061,    44,    45,   173,    47,    48,   172,
   172,   177,  1070,  1071,  1072,  1073,  1074,  1075,  1076,  1077,
  1078,  1079,  1080,  1081,    64,   172,   623,   172,   172,   626,
  1088,   172,     6,   173,   172,   172,   160,   161,    78,    79,
   176,     6,     6,   167,   172,   172,     6,   171,   645,   646,
   174,   172,     6,     6,   651,   652,   173,   172,   172,     6,
     6,   658,     6,   660,     6,     6,     6,  1125,   146,   147,
   148,   149,   150,     6,   176,     6,     6,     6,   156,   157,
   158,   159,   160,   161,   162,   163,   164,     7,    83,   686,
   168,   688,     4,  1151,     3,     6,   136,     3,     6,   696,
   697,   698,     6,   162,   701,   702,   703,   704,   705,   706,
   707,     6,     3,     6,     3,  1173,  1174,  1175,  1176,  1177,
  1178,  1179,  1180,  1181,   146,   147,   148,   149,   150,     6,
     6,  1189,     3,     6,   156,   157,   158,   159,   160,   161,
   162,   163,   164,     3,  1202,     3,   168,     3,     4,     3,
    84,     6,     4,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,  1232,  1233,  1234,  1235,  1236,  1237,
  1238,  1239,  1240,  1241,  1242,  1243,     3,     4,  1246,   174,
    80,   175,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,   174,     6,  1273,  1274,   173,   173,   176,
   172,   172,   172,  1281,  1282,  1283,  1284,  1285,  1286,  1287,
  1288,  1289,  1290,   172,  1292,   172,  1294,   173,   173,     6,
  1298,   173,    83,     6,   172,     3,   173,   844,   172,   846,
     6,   173,     6,   172,   851,     6,   174,     3,     6,     6,
     3,     6,  1320,  1321,     6,     6,     6,  1325,  1326,  1327,
  1328,  1329,  1330,   870,     6,     5,   176,     6,     4,   175,
     5,   173,     6,     4,     6,   172,   174,   172,   172,   172,
  1348,   173,   172,     6,   173,  1353,  1354,  1355,  1356,  1357,
  1358,  1359,  1360,  1361,   160,   161,   172,   172,   172,     6,
     6,   167,     6,     6,     6,   171,     6,     6,     6,     5,
   173,     6,     5,  1381,  1382,  1383,  1384,  1385,  1386,  1387,
   172,  1389,   175,  1391,   172,   172,    80,   173,   172,   172,
   172,   172,     6,   160,   161,     6,   174,   174,   174,     6,
   167,  1409,  1410,  1411,   171,     5,     5,   175,     6,   174,
   172,   172,   175,   173,   173,  1423,  1424,  1425,  1426,  1427,
  1428,     6,   175,    80,     6,     6,     6,     6,     6,     6,
     6,   174,  1440,  1441,  1442,  1443,   172,  1445,   172,  1447,
   146,   147,   148,   149,   150,   145,   172,   172,     6,   172,
   156,   157,   158,   159,   160,   161,   162,   163,   164,  1467,
  1468,  1469,   168,   174,     6,   174,  1013,   174,  1476,  1016,
  1478,   173,  1480,     6,     6,     6,     6,     6,     6,     6,
     6,     6,     6,   172,     3,     4,   172,   174,   172,  1036,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   146,   147,   148,   149,   150,   174,     6,   174,   173,
  1067,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     6,     0,     0,   168,   595,   146,   147,   148,   149,   150,
   174,     6,   174,   174,     6,   156,   157,   158,   159,   160,
   161,   162,   163,   164,     6,     6,  1171,   168,   569,   842,
    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     6,    -1,    -1,   168,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1148,  1149,     6,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,  1172,   168,   146,   147,   148,
   149,   150,     6,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,   167,   168,
    -1,    -1,   171,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,  1219,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,     6,  1231,   168,    -1,    -1,    -1,   172,
    -1,    -1,   175,    -1,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,     6,    -1,   168,    -1,    -1,    -1,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,  1276,
   156,   157,   158,   159,   160,   161,   162,   163,   164,     6,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,     6,    -1,    -1,   168,    -1,    -1,    -1,    -1,
    -1,    -1,   146,   147,   148,   149,   150,  1324,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,     6,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,  1351,   156,   157,   158,   159,   160,
   161,   162,   163,   164,     6,    -1,    -1,   168,    -1,    -1,
    -1,    -1,    -1,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,  1379,   156,   157,   158,   159,   160,   161,   162,
   163,   164,     6,    -1,    -1,   168,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   146,   147,   148,   149,   150,    -1,
    -1,  1408,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,     6,    -1,  1422,   168,    -1,    -1,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,     6,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,     6,    -1,    -1,   168,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     8,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,     8,    -1,    -1,   168,    -1,    -1,    -1,
    -1,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,     8,    -1,    -1,   168,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,    -1,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    33,    34,    35,    36,    37,    38,    39,    40,
    -1,    42,    -1,    44,    45,    -1,    47,    48,    -1,    -1,
    33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
    -1,    44,    45,    64,    47,    48,    -1,    -1,    -1,     0,
     1,    -1,    -1,     4,    -1,    -1,    -1,    78,    79,    -1,
    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    78,    79,    -1,    -1,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    -1,    42,    43,    44,    45,    46,    47,    48,    -1,    -1,
    -1,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
    61,    62,    63,    64,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    36,    -1,    -1,    -1,    -1,    -1,    78,    79,    -1,
    -1,    -1,    -1,   136,    85,    86,    -1,    88,    89,    90,
    91,    92,    -1,    -1,    -1,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,   175,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,    -1,   175,    -1,    -1,    -1,    -1,   178,    93,    94,
    95,    -1,    -1,    -1,    -1,   136,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,    -1,   130,   131,   132,   133,   134,
   135,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,   178,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,   178,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   178,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,    -1,   175,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,    -1,   175,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   175,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   175,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   139,    -1,    -1,    -1,    -1,    -1,
   175,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   175,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   175,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   139,    -1,    -1,    -1,    -1,
    -1,   175,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   142,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,   144,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 152 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 166 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 173 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 190 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 191 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 192 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 193 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 198 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 203 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 214 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 217 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 221 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 227 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 233 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 240 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 246 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 250 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 254 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 261 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 265 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 270 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 274 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 278 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 282 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 286 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 290 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 294 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 298 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 304 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 307 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 310 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 314 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 318 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 322 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 326 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 331 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 338 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 341 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 345 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 348 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 361 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 364 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 370 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 371 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 372 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 373 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 381 "Gmsh.y"
{return 1;;
    break;}
case 65:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 384 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 67:
#line 389 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 68:
#line 400 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 69:
#line 404 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 70:
#line 411 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 83:
#line 430 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 432 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 437 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 86:
#line 442 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 87:
#line 449 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 451 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 456 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 90:
#line 461 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 91:
#line 468 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 470 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 475 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 94:
#line 480 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 95:
#line 487 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 489 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 495 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 98:
#line 501 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 99:
#line 508 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 510 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 516 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 522 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 103:
#line 529 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 531 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 537 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 106:
#line 543 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 107:
#line 550 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 552 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 559 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 568 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 111:
#line 575 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 577 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 584 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 593 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 115:
#line 600 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 602 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 609 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 618 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 119:
#line 625 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 627 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 635 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 644 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 123:
#line 651 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 653 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 661 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 670 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 127:
#line 677 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 679 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 687 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 696 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 131:
#line 712 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 132:
#line 718 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 133:
#line 726 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 134:
#line 734 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 742 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 750 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 758 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 138:
#line 769 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 139:
#line 782 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 140:
#line 800 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 817 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 838 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 855 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 876 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 893 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 914 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 931 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 952 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 969 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 990 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1007 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1028 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1045 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1068 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1093 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1122 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1147 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1176 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1201 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 160:
#line 1232 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 161:
#line 1256 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1263 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1269 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 164:
#line 1288 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 165:
#line 1299 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 166:
#line 1307 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1313 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1319 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 169:
#line 1338 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1344 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 171:
#line 1361 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 172:
#line 1367 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1373 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1379 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1385 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1391 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 177:
#line 1410 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 178:
#line 1422 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1428 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 180:
#line 1447 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 181:
#line 1470 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 182:
#line 1478 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 183:
#line 1482 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1488 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1494 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 186:
#line 1506 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 187:
#line 1512 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 188:
#line 1518 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1531 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 190:
#line 1536 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1541 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1546 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1553 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 194:
#line 1554 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1555 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1560 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 197:
#line 1564 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 198:
#line 1576 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 199:
#line 1594 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 200:
#line 1609 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 201:
#line 1637 "Gmsh.y"
{
     char ext[6];
     strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
     Replot();
     extern void CreateImage (FILE *fp);
     FILE *fp = 0;
     if(!strcmp(ext,".gif"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type = PRINT_GL2GIF;
       }
     else if(!strcmp(ext,".eps"))
       {
	 fp = fopen(yyvsp[-1].c,"w");
	 CTX.print.type =  PRINT_GL2PS_RECURSIVE;
       } 
     else if(!strcmp(ext,".xpm"))
       {
	 fp = fopen(yyvsp[-1].c,"wb");
	 CTX.print.type =  PRINT_XDUMP;
	 CTX.print.format = FORMAT_XPM;
       } 

     if(fp)
       {
	 CreateImage(fp);
	 fclose(fp);
       }
   ;
    break;}
case 202:
#line 1667 "Gmsh.y"
{
     exit(0);
   ;
    break;}
case 203:
#line 1671 "Gmsh.y"
{
     FILE *ff = yyin;
     MergeProblem(yyvsp[-1].c);
     yyin = ff;
   ;
    break;}
case 204:
#line 1677 "Gmsh.y"
{
     Init();
     Draw();
   ;
    break;}
case 205:
#line 1682 "Gmsh.y"
{
     extern long Get_AnimTime();
     long sleep_time = Get_AnimTime();
     while(1){
       if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
     }
   ;
    break;}
case 206:
#line 1698 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1 ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 207:
#line 1711 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = (int)yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = (int)yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = (int)yyvsp[-1].d ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 208:
#line 1724 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0])
      {
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 209:
#line 1743 "Gmsh.y"
{
    if(!FunctionManager::Instance()->leaveFunction(&yyin))
      {
	vyyerror("Error while exiting function");
      }
  ;
    break;}
case 210:
#line 1750 "Gmsh.y"
{
    if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin))
      {
	vyyerror("Unknown Function %s",yyvsp[-1].c);
      }
  ;
    break;}
case 211:
#line 1757 "Gmsh.y"
{
    // skip everything until return is found
    if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin))
      {
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      }
    void skip_until(char *until);
    skip_until("Return");
  ;
    break;}
case 212:
#line 1787 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 213:
#line 1792 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 214:
#line 1798 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 215:
#line 1802 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 216:
#line 1806 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 217:
#line 1810 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 218:
#line 1814 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 219:
#line 1819 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 220:
#line 1827 "Gmsh.y"
{
    ;
    break;}
case 221:
#line 1830 "Gmsh.y"
{
    ;
    break;}
case 222:
#line 1836 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 223:
#line 1853 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 224:
#line 1864 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 225:
#line 1881 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 226:
#line 1898 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 227:
#line 1915 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 228:
#line 1936 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 229:
#line 1956 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 230:
#line 1976 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 231:
#line 1993 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 232:
#line 2018 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 233:
#line 2030 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 234:
#line 2031 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 235:
#line 2032 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 236:
#line 2033 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 2034 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 238:
#line 2038 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 239:
#line 2039 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 240:
#line 2040 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 241:
#line 2041 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 242:
#line 2042 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 243:
#line 2043 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 244:
#line 2044 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 245:
#line 2045 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 246:
#line 2046 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 247:
#line 2047 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 248:
#line 2048 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 249:
#line 2049 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 250:
#line 2050 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 251:
#line 2051 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 252:
#line 2052 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 253:
#line 2053 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 254:
#line 2054 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 255:
#line 2055 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 256:
#line 2056 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 257:
#line 2057 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 258:
#line 2058 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 259:
#line 2059 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2060 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 261:
#line 2061 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2062 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2063 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2064 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 265:
#line 2065 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2066 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 267:
#line 2067 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2068 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 269:
#line 2069 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2070 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2071 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2072 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2073 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 274:
#line 2074 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2075 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 276:
#line 2076 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 277:
#line 2077 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 278:
#line 2081 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 279:
#line 2082 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 280:
#line 2084 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 281:
#line 2093 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 282:
#line 2110 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 283:
#line 2131 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 284:
#line 2148 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 285:
#line 2169 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2186 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2209 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 288:
#line 2215 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 289:
#line 2229 "Gmsh.y"
{
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 290:
#line 2233 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 291:
#line 2237 "Gmsh.y"
{ 
      yyval.v = yyvsp[0].v;
    ;
    break;}
case 292:
#line 2241 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 293:
#line 2245 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2251 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 295:
#line 2255 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 296:
#line 2259 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2263 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 298:
#line 2267 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 299:
#line 2293 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "Post"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 300:
#line 2326 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2329 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2335 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2338 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2344 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2347 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 306:
#line 2351 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 307:
#line 2358 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 308:
#line 2363 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 309:
#line 2370 "Gmsh.y"
{
    ;
    break;}
case 310:
#line 2373 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 311:
#line 2379 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 312:
#line 2387 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 313:
#line 2392 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 314:
#line 2401 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 315:
#line 2405 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 316:
#line 2416 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 317:
#line 2420 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 318:
#line 2424 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 319:
#line 2429 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 320:
#line 2434 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2447 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

