
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tToday	293
#define	tPoint	294
#define	tCircle	295
#define	tEllipse	296
#define	tLine	297
#define	tSurface	298
#define	tSpline	299
#define	tVolume	300
#define	tCharacteristic	301
#define	tLength	302
#define	tParametric	303
#define	tElliptic	304
#define	tPlane	305
#define	tRuled	306
#define	tTriangulation	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tDiscrete	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tIntersect	326
#define	tAttractor	327
#define	tLayers	328
#define	tAlias	329
#define	tAliasWithOptions	330
#define	tScalarPoint	331
#define	tVectorPoint	332
#define	tTensorPoint	333
#define	tScalarLine	334
#define	tVectorLine	335
#define	tTensorLine	336
#define	tScalarTriangle	337
#define	tVectorTriangle	338
#define	tTensorTriangle	339
#define	tScalarQuadrangle	340
#define	tVectorQuadrangle	341
#define	tTensorQuadrangle	342
#define	tScalarTetrahedron	343
#define	tVectorTetrahedron	344
#define	tTensorTetrahedron	345
#define	tScalarHexahedron	346
#define	tVectorHexahedron	347
#define	tTensorHexahedron	348
#define	tScalarPrism	349
#define	tVectorPrism	350
#define	tTensorPrism	351
#define	tScalarPyramid	352
#define	tVectorPyramid	353
#define	tTensorPyramid	354
#define	tText2D	355
#define	tText3D	356
#define	tInterpolationScheme	357
#define	tTime	358
#define	tCombine	359
#define	tBSpline	360
#define	tBezier	361
#define	tNurbs	362
#define	tOrder	363
#define	tWith	364
#define	tBounds	365
#define	tKnots	366
#define	tColor	367
#define	tColorTable	368
#define	tFor	369
#define	tIn	370
#define	tEndFor	371
#define	tIf	372
#define	tEndIf	373
#define	tExit	374
#define	tReturn	375
#define	tCall	376
#define	tFunction	377
#define	tTrimmed	378
#define	tShow	379
#define	tHide	380
#define	tGetValue	381
#define	tGMSH_MAJOR_VERSION	382
#define	tGMSH_MINOR_VERSION	383
#define	tGMSH_PATCH_VERSION	384
#define	tB_SPLINE_SURFACE_WITH_KNOTS	385
#define	tB_SPLINE_CURVE_WITH_KNOTS	386
#define	tCARTESIAN_POINT	387
#define	tTRUE	388
#define	tFALSE	389
#define	tUNSPECIFIED	390
#define	tU	391
#define	tV	392
#define	tEDGE_CURVE	393
#define	tVERTEX_POINT	394
#define	tORIENTED_EDGE	395
#define	tPLANE	396
#define	tFACE_OUTER_BOUND	397
#define	tEDGE_LOOP	398
#define	tADVANCED_FACE	399
#define	tVECTOR	400
#define	tDIRECTION	401
#define	tAXIS2_PLACEMENT_3D	402
#define	tISO	403
#define	tENDISO	404
#define	tENDSEC	405
#define	tDATA	406
#define	tHEADER	407
#define	tFILE_DESCRIPTION	408
#define	tFILE_SCHEMA	409
#define	tFILE_NAME	410
#define	tMANIFOLD_SOLID_BREP	411
#define	tCLOSED_SHELL	412
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	413
#define	tFACE_BOUND	414
#define	tCYLINDRICAL_SURFACE	415
#define	tCONICAL_SURFACE	416
#define	tCIRCLE	417
#define	tTRIMMED_CURVE	418
#define	tGEOMETRIC_SET	419
#define	tCOMPOSITE_CURVE_SEGMENT	420
#define	tCONTINUOUS	421
#define	tCOMPOSITE_CURVE	422
#define	tTOROIDAL_SURFACE	423
#define	tPRODUCT_DEFINITION	424
#define	tPRODUCT_DEFINITION_SHAPE	425
#define	tSHAPE_DEFINITION_REPRESENTATION	426
#define	tELLIPSE	427
#define	tSolid	428
#define	tEndSolid	429
#define	tVertex	430
#define	tFacet	431
#define	tNormal	432
#define	tOuter	433
#define	tLoopSTL	434
#define	tEndLoop	435
#define	tEndFacet	436
#define	tAFFECTPLUS	437
#define	tAFFECTMINUS	438
#define	tAFFECTTIMES	439
#define	tAFFECTDIVIDE	440
#define	tOR	441
#define	tAND	442
#define	tEQUAL	443
#define	tNOTEQUAL	444
#define	tAPPROXEQUAL	445
#define	tLESSOREQUAL	446
#define	tGREATEROREQUAL	447
#define	tCROSSPRODUCT	448
#define	tPLUSPLUS	449
#define	tMINUSMINUS	450
#define	UNARYPREC	451

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.232 2005-02-02 18:47:56 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"
#include "GmshVersion.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 75 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2411
#define	YYFLAG		-32768
#define	YYNTBASE	217

#define YYTRANSLATE(x) ((unsigned)(x) <= 451 ? yytranslate[x] : 355)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   203,     2,   213,     2,   201,     2,     2,   208,
   209,   199,   197,   214,   198,   212,   200,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   193,
     2,   195,   187,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   210,     2,   211,   207,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   215,     2,   216,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   188,   189,   190,   191,   192,   194,   196,   202,   204,   205,
   206
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1973,  1986,  1995,  2004,  2013,  2026,  2041,  2056,  2071,
  2094,  2115,  2124,  2133,  2142,  2150,  2159,  2165,  2177,  2183,
  2193,  2195,  2197,  2199,  2200,  2203,  2210,  2217,  2224,  2231,
  2236,  2243,  2250,  2257,  2262,  2269,  2273,  2278,  2284,  2288,
  2292,  2297,  2302,  2306,  2314,  2318,  2326,  2330,  2333,  2336,
  2352,  2355,  2362,  2371,  2380,  2391,  2393,  2396,  2398,  2402,
  2407,  2409,  2418,  2431,  2446,  2447,  2460,  2461,  2478,  2479,
  2498,  2507,  2520,  2535,  2536,  2549,  2550,  2567,  2568,  2587,
  2596,  2609,  2624,  2625,  2638,  2639,  2656,  2657,  2676,  2678,
  2681,  2691,  2699,  2702,  2709,  2719,  2729,  2738,  2747,  2756,
  2763,  2768,  2771,  2774,  2776,  2778,  2780,  2782,  2784,  2786,
  2790,  2793,  2796,  2799,  2803,  2807,  2811,  2815,  2819,  2823,
  2827,  2831,  2835,  2839,  2843,  2847,  2851,  2855,  2861,  2866,
  2871,  2876,  2881,  2886,  2891,  2896,  2901,  2906,  2911,  2918,
  2923,  2928,  2933,  2938,  2943,  2948,  2955,  2962,  2969,  2974,
  2979,  2984,  2989,  2994,  2999,  3004,  3009,  3014,  3019,  3024,
  3031,  3036,  3041,  3046,  3051,  3056,  3061,  3068,  3075,  3082,
  3087,  3089,  3091,  3093,  3095,  3097,  3099,  3101,  3103,  3108,
  3113,  3116,  3122,  3126,  3133,  3138,  3146,  3153,  3155,  3158,
  3161,  3165,  3169,  3181,  3191,  3199,  3207,  3208,  3212,  3214,
  3218,  3219,  3223,  3227,  3229,  3233,  3235,  3237,  3241,  3246,
  3250,  3256,  3261,  3263,  3265,  3267,  3271,  3276,  3283,  3291,
  3293,  3295,  3299,  3303,  3313,  3321,  3323,  3329,  3333,  3340,
  3342,  3346,  3348,  3350,  3357,  3362,  3367,  3374,  3381
};

static const short yyrhs[] = {   221,
     0,   219,     0,   226,     0,     1,     6,     0,     3,     0,
   198,     3,     0,     0,   219,   220,     0,   174,     0,   177,
   178,   218,   218,   218,   179,   180,   176,   218,   218,   218,
   176,   218,   218,   218,   176,   218,   218,   218,   181,   182,
     0,   175,     0,     0,   221,   222,     0,   223,     0,   225,
     0,   224,     0,   149,     6,     0,   150,     6,     0,   152,
     6,     0,   151,     6,     0,   153,     6,     0,   154,   208,
   344,   214,     5,   209,     6,     0,   155,   208,   344,   209,
     6,     0,   156,   208,     5,   214,     5,   214,   344,   214,
   344,   214,     5,   214,     5,   214,     5,   209,     6,     0,
     3,     7,   133,   208,     5,   214,   342,   209,     6,     0,
     3,     7,   132,   208,     5,   214,   340,   214,   348,   214,
   339,   214,   339,   214,   339,   214,   348,   214,   348,   214,
   339,   209,     6,     0,     3,     7,   131,   208,     5,   214,
   340,   214,   340,   214,   346,   214,   339,   214,   339,   214,
   339,   214,   339,   214,   348,   214,   348,   214,   348,   214,
   348,   214,   339,   209,     6,     0,     3,     7,   139,   208,
     5,   214,     3,   214,     3,   214,     3,   214,   339,   209,
     6,     0,     3,     7,   143,   208,     5,   214,     3,   214,
   339,   209,     6,     0,     3,     7,   160,   208,     5,   214,
     3,   214,   339,   209,     6,     0,     3,     7,   141,   208,
     5,   214,   199,   214,   199,   214,   340,   214,   339,   209,
     6,     0,     3,     7,   144,   208,     5,   214,   348,   209,
     6,     0,     3,     7,   145,   208,     5,   214,   348,   214,
     3,   214,   339,   209,     6,     0,     3,     7,   140,   208,
     5,   214,     3,   209,     6,     0,     3,     7,   146,   208,
     5,   214,     3,   214,   340,   209,     6,     0,     3,     7,
   148,   208,     5,   214,     3,   214,     3,   214,     3,   209,
     6,     0,     3,     7,   147,   208,     5,   214,   342,   209,
     6,     0,     3,     7,   142,   208,     5,   214,     3,   209,
     6,     0,     3,     7,    43,   208,     5,   214,     3,   214,
     3,   209,     6,     0,     3,     7,   158,   208,     5,   214,
   348,   209,     6,     0,     3,     7,   159,   208,     5,   214,
   348,   214,     3,   209,     6,     0,     3,     7,   157,   208,
     5,   214,     3,   209,     6,     0,     3,     7,   161,   208,
     5,   214,     3,   214,   340,   209,     6,     0,     3,     7,
   162,   208,     5,   214,     3,   214,   340,   214,   340,   209,
     6,     0,     3,     7,   169,   208,     5,   214,     3,   214,
   340,   214,   340,   209,     6,     0,     3,     7,   163,   208,
     5,   214,     3,   214,   340,   209,     6,     0,     3,     7,
   173,   208,     5,   214,     3,   214,   340,   214,   340,   209,
     6,     0,     3,     7,   164,   208,     5,   214,     3,   214,
   348,   214,   348,   214,   339,   214,   339,   209,     6,     0,
     3,     7,   165,   208,     5,   214,   348,   209,     6,     0,
     3,     7,   166,   208,   167,   214,   339,   214,     3,   209,
     6,     0,     3,     7,   168,   208,     5,   214,   348,   214,
   339,   209,     6,     0,     3,     7,   170,   208,     5,   214,
     5,   214,     3,   214,     3,   209,     6,     0,     3,     7,
   171,   208,     5,   214,     5,   214,     3,   209,     6,     0,
     3,     7,   172,   208,     3,   214,     3,   209,     6,     0,
     0,   226,   227,     0,   229,     0,   228,     0,   314,     0,
   315,     0,   316,     0,   319,     0,   320,     0,   321,     0,
   322,     0,   325,     0,   337,     0,   338,     0,   324,     0,
   323,     0,    33,   208,     5,   209,     6,     0,    33,   208,
     5,   214,   350,   209,     6,     0,     4,     5,   215,   230,
   216,     6,     0,     4,     5,     4,   342,   215,   230,   216,
     6,     0,     0,   230,   232,     0,   230,   235,     0,   230,
   238,     0,   230,   241,     0,   230,   244,     0,   230,   247,
     0,   230,   250,     0,   230,   253,     0,   230,   256,     0,
   230,   259,     0,   230,   262,     0,   230,   265,     0,   230,
   268,     0,   230,   271,     0,   230,   274,     0,   230,   277,
     0,   230,   280,     0,   230,   283,     0,   230,   286,     0,
   230,   289,     0,   230,   292,     0,   230,   295,     0,   230,
   298,     0,   230,   301,     0,   230,   304,     0,   230,   307,
     0,   230,   309,     0,   230,   311,     0,   340,     0,   231,
   214,   340,     0,     0,    77,   208,   340,   214,   340,   214,
   340,   209,   233,   215,   231,   216,     6,     0,   340,     0,
   234,   214,   340,     0,     0,    78,   208,   340,   214,   340,
   214,   340,   209,   236,   215,   234,   216,     6,     0,   340,
     0,   237,   214,   340,     0,     0,    79,   208,   340,   214,
   340,   214,   340,   209,   239,   215,   237,   216,     6,     0,
   340,     0,   240,   214,   340,     0,     0,    80,   208,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   242,   215,   240,   216,     6,     0,   340,     0,   243,
   214,   340,     0,     0,    81,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   245,   215,
   243,   216,     6,     0,   340,     0,   246,   214,   340,     0,
     0,    82,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   209,   248,   215,   246,   216,     6,
     0,   340,     0,   249,   214,   340,     0,     0,    83,   208,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   251,   215,
   249,   216,     6,     0,   340,     0,   252,   214,   340,     0,
     0,    84,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   254,   215,   252,   216,     6,     0,   340,     0,   255,
   214,   340,     0,     0,    85,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   209,   257,   215,   255,   216,     6,     0,
   340,     0,   258,   214,   340,     0,     0,    86,   208,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   209,   260,   215,   258,   216,     6,     0,   340,
     0,   261,   214,   340,     0,     0,    87,   208,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   209,   263,   215,   261,   216,     6,     0,   340,     0,
   264,   214,   340,     0,     0,    88,   208,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   266,   215,   264,   216,     6,     0,   340,     0,   267,
   214,   340,     0,     0,    89,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   209,
   269,   215,   267,   216,     6,     0,   340,     0,   270,   214,
   340,     0,     0,    90,   208,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   209,   272,
   215,   270,   216,     6,     0,   340,     0,   273,   214,   340,
     0,     0,    91,   208,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   275,   215,
   273,   216,     6,     0,   340,     0,   276,   214,   340,     0,
     0,    92,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   278,   215,   276,   216,     6,     0,   340,     0,   279,
   214,   340,     0,     0,    93,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   209,   281,   215,   279,   216,     6,     0,
   340,     0,   282,   214,   340,     0,     0,    94,   208,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   209,   284,   215,   282,
   216,     6,     0,   340,     0,   285,   214,   340,     0,     0,
    95,   208,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   287,   215,
   285,   216,     6,     0,   340,     0,   288,   214,   340,     0,
     0,    96,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   209,   290,
   215,   288,   216,     6,     0,   340,     0,   291,   214,   340,
     0,     0,    97,   208,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   209,
   293,   215,   291,   216,     6,     0,   340,     0,   294,   214,
   340,     0,     0,    98,   208,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   209,   296,   215,   294,   216,     6,
     0,   340,     0,   297,   214,   340,     0,     0,    99,   208,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   209,
   299,   215,   297,   216,     6,     0,   340,     0,   300,   214,
   340,     0,     0,   100,   208,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   209,   302,   215,   300,   216,     6,
     0,   354,     0,   303,   214,   354,     0,     0,   101,   208,
   340,   214,   340,   214,   340,   209,   305,   215,   303,   216,
     6,     0,   354,     0,   306,   214,   354,     0,     0,   102,
   208,   340,   214,   340,   214,   340,   214,   340,   209,   308,
   215,   306,   216,     6,     0,   103,   215,   347,   216,   215,
   347,   216,     6,     0,   340,     0,   310,   214,   340,     0,
   104,   215,   310,   216,     6,     0,     7,     0,   183,     0,
   184,     0,   185,     0,   186,     0,   204,     0,   205,     0,
     4,   312,   340,     6,     0,     4,   210,   340,   211,   312,
   340,     6,     0,     4,   210,   215,   350,   216,   211,   312,
   348,     6,     0,     4,   210,   211,     7,   348,     6,     0,
     4,   313,     6,     0,     4,   210,   340,   211,   313,     6,
     0,     4,   212,     4,     7,   354,     6,     0,     4,   210,
   340,   211,   212,     4,     7,   354,     6,     0,     4,   212,
     4,   312,   340,     6,     0,     4,   210,   340,   211,   212,
     4,   312,   340,     6,     0,     4,   212,     4,   313,     6,
     0,     4,   210,   340,   211,   212,     4,   313,     6,     0,
     4,   212,   113,   212,     4,     7,   351,     6,     0,     4,
   210,   340,   211,   212,   113,   212,     4,     7,   351,     6,
     0,     4,   212,   114,     7,   352,     6,     0,     4,   210,
   340,   211,   212,   114,     7,   352,     6,     0,    60,   208,
     4,   209,   212,     4,     7,   340,     6,     0,    60,   208,
     4,   209,   212,     4,     7,   354,     6,     0,    40,   208,
   340,   209,     7,   342,     6,     0,    56,    40,   208,   340,
   209,     7,   348,     6,     0,    73,    40,   348,     7,   215,
   340,   214,   340,   214,   340,   216,     6,     0,    47,    48,
   348,     7,   340,     6,     0,    43,   208,   340,   209,     7,
   348,     6,     0,    45,   208,   340,   209,     7,   348,     6,
     0,    41,   208,   340,   209,     7,   348,     6,     0,    41,
   208,   340,   209,     7,   348,    51,   342,     6,     0,    42,
   208,   340,   209,     7,   348,     6,     0,    42,   208,   340,
   209,     7,   348,    51,   342,     6,     0,    49,   208,   340,
   209,     7,   215,   340,   214,   340,   214,     5,   214,     5,
   214,     5,   216,     6,     0,   106,   208,   340,   209,     7,
   348,     6,     0,   107,   208,   340,   209,     7,   348,     6,
     0,   108,   208,   340,   209,     7,   348,   112,   348,   109,
   340,     6,     0,    43,    68,   208,   340,   209,     7,   348,
     6,     0,    73,    43,   348,     7,   215,   340,   214,   340,
   214,   340,   216,     6,     0,    56,    43,   208,   340,   209,
     7,   348,     6,     0,    51,    44,   208,   340,   209,     7,
   348,     6,     0,    52,    44,   208,   340,   209,     7,   348,
     6,     0,   124,    44,   208,   340,   209,     7,   215,   340,
   214,   348,   216,     6,     0,    61,    44,   208,   340,   209,
     7,   215,   340,   214,   340,   216,   348,   348,     6,     0,
    61,    44,   215,   340,   216,     7,   215,   340,   214,   340,
   216,   348,   348,     6,     0,    53,    44,   208,   340,   209,
     7,   208,   340,   214,   340,   209,   348,   348,     6,     0,
   108,    44,   110,   111,   208,   340,   209,     7,   346,   112,
   215,   348,   214,   348,   216,   109,   215,   340,   214,   340,
   216,     6,     0,   108,    44,   208,   340,   209,     7,   346,
   112,   215,   348,   214,   348,   216,   109,   215,   340,   214,
   340,   216,     6,     0,    44,    68,   208,   340,   209,     7,
   348,     6,     0,    56,    44,   208,   340,   209,     7,   348,
     6,     0,    55,    46,   208,   340,   209,     7,   348,     6,
     0,    46,   208,   340,   209,     7,   348,     6,     0,    56,
    46,   208,   340,   209,     7,   348,     6,     0,    63,   342,
   215,   317,   216,     0,    62,   215,   342,   214,   342,   214,
   340,   216,   215,   317,   216,     0,    64,   342,   215,   317,
   216,     0,    65,   215,   342,   214,   340,   216,   215,   317,
   216,     0,   319,     0,   318,     0,   316,     0,     0,   318,
   315,     0,   318,    40,   215,   350,   216,     6,     0,   318,
    43,   215,   350,   216,     6,     0,   318,    44,   215,   350,
   216,     6,     0,   318,    46,   215,   350,   216,     6,     0,
    67,   215,   318,   216,     0,    67,     4,   210,   340,   211,
     6,     0,    75,     4,   210,   340,   211,     6,     0,    76,
     4,   210,   340,   211,     6,     0,    70,   215,   318,   216,
     0,    70,     4,   210,   340,   211,     6,     0,    70,     4,
     6,     0,    70,     4,     4,     6,     0,   113,   351,   215,
   318,   216,     0,   125,   354,     6,     0,   126,   354,     6,
     0,   125,   215,   318,   216,     0,   126,   215,   318,   216,
     0,     4,   354,     6,     0,     4,     4,   210,   340,   211,
   354,     6,     0,     4,   340,     6,     0,    60,   208,     4,
   209,   212,     4,     6,     0,   105,     4,     6,     0,   120,
     6,     0,    37,     6,     0,    37,   215,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   216,     6,
     0,    38,     6,     0,   115,   208,   340,     8,   340,   209,
     0,   115,   208,   340,     8,   340,     8,   340,   209,     0,
   115,     4,   116,   215,   340,     8,   340,   216,     0,   115,
     4,   116,   215,   340,     8,   340,     8,   340,   216,     0,
   117,     0,   123,     4,     0,   121,     0,   122,     4,     6,
     0,   118,   208,   340,   209,     0,   119,     0,    66,    40,
   215,   340,   214,   342,   216,     6,     0,    66,    40,   215,
   340,   214,   342,   214,   342,   214,   340,   216,     6,     0,
    66,    40,   215,   340,   214,   342,   214,   342,   214,   342,
   214,   340,   216,     6,     0,     0,    66,    40,   215,   340,
   214,   342,   216,   326,   215,   335,   216,     6,     0,     0,
    66,    40,   215,   340,   214,   342,   214,   342,   214,   340,
   216,   327,   215,   335,   216,     6,     0,     0,    66,    40,
   215,   340,   214,   342,   214,   342,   214,   342,   214,   340,
   216,   328,   215,   335,   216,     6,     0,    66,    43,   215,
   340,   214,   342,   216,     6,     0,    66,    43,   215,   340,
   214,   342,   214,   342,   214,   340,   216,     6,     0,    66,
    43,   215,   340,   214,   342,   214,   342,   214,   342,   214,
   340,   216,     6,     0,     0,    66,    43,   215,   340,   214,
   342,   216,   329,   215,   335,   216,     6,     0,     0,    66,
    43,   215,   340,   214,   342,   214,   342,   214,   340,   216,
   330,   215,   335,   216,     6,     0,     0,    66,    43,   215,
   340,   214,   342,   214,   342,   214,   342,   214,   340,   216,
   331,   215,   335,   216,     6,     0,    66,    44,   215,   340,
   214,   342,   216,     6,     0,    66,    44,   215,   340,   214,
   342,   214,   342,   214,   340,   216,     6,     0,    66,    44,
   215,   340,   214,   342,   214,   342,   214,   342,   214,   340,
   216,     6,     0,     0,    66,    44,   215,   340,   214,   342,
   216,   332,   215,   335,   216,     6,     0,     0,    66,    44,
   215,   340,   214,   342,   214,   342,   214,   340,   216,   333,
   215,   335,   216,     6,     0,     0,    66,    44,   215,   340,
   214,   342,   214,   342,   214,   342,   214,   340,   216,   334,
   215,   335,   216,     6,     0,   336,     0,   335,   336,     0,
    74,   215,   348,   214,   348,   214,   348,   216,     6,     0,
    74,   215,   348,   214,   348,   216,     6,     0,    69,     6,
     0,    54,    43,   348,     7,   340,     6,     0,    54,    43,
   348,     7,   340,    57,    59,   340,     6,     0,    54,    43,
   348,     7,   340,    57,    58,   340,     6,     0,    54,    44,
   215,   340,   216,     7,   348,     6,     0,    50,    44,   215,
   340,   216,     7,   348,     6,     0,    54,    46,   215,   340,
   216,     7,   348,     6,     0,    69,    44,   348,     7,   340,
     6,     0,    69,    44,   348,     6,     0,    71,     6,     0,
    72,     6,     0,   134,     0,   135,     0,   136,     0,   137,
     0,   138,     0,   341,     0,   208,   340,   209,     0,   198,
   340,     0,   197,   340,     0,   203,   340,     0,   340,   198,
   340,     0,   340,   197,   340,     0,   340,   199,   340,     0,
   340,   200,   340,     0,   340,   201,   340,     0,   340,   207,
   340,     0,   340,   193,   340,     0,   340,   195,   340,     0,
   340,   194,   340,     0,   340,   196,   340,     0,   340,   190,
   340,     0,   340,   191,   340,     0,   340,   189,   340,     0,
   340,   188,   340,     0,   340,   187,   340,     8,   340,     0,
    12,   208,   340,   209,     0,    13,   208,   340,   209,     0,
    14,   208,   340,   209,     0,    15,   208,   340,   209,     0,
    16,   208,   340,   209,     0,    17,   208,   340,   209,     0,
    18,   208,   340,   209,     0,    19,   208,   340,   209,     0,
    20,   208,   340,   209,     0,    22,   208,   340,   209,     0,
    23,   208,   340,   214,   340,   209,     0,    24,   208,   340,
   209,     0,    25,   208,   340,   209,     0,    26,   208,   340,
   209,     0,    27,   208,   340,   209,     0,    28,   208,   340,
   209,     0,    29,   208,   340,   209,     0,    30,   208,   340,
   214,   340,   209,     0,    31,   208,   340,   214,   340,   209,
     0,    32,   208,   340,   214,   340,   209,     0,    21,   208,
   340,   209,     0,    12,   210,   340,   211,     0,    13,   210,
   340,   211,     0,    14,   210,   340,   211,     0,    15,   210,
   340,   211,     0,    16,   210,   340,   211,     0,    17,   210,
   340,   211,     0,    18,   210,   340,   211,     0,    19,   210,
   340,   211,     0,    20,   210,   340,   211,     0,    22,   210,
   340,   211,     0,    23,   210,   340,   214,   340,   211,     0,
    24,   210,   340,   211,     0,    25,   210,   340,   211,     0,
    26,   210,   340,   211,     0,    27,   210,   340,   211,     0,
    28,   210,   340,   211,     0,    29,   210,   340,   211,     0,
    30,   210,   340,   214,   340,   211,     0,    31,   210,   340,
   214,   340,   211,     0,    32,   210,   340,   214,   340,   211,
     0,    21,   210,   340,   211,     0,     3,     0,     9,     0,
    10,     0,    11,     0,   128,     0,   129,     0,   130,     0,
     4,     0,     4,   210,   340,   211,     0,   213,     4,   210,
   211,     0,     4,   313,     0,     4,   210,   340,   211,   313,
     0,     4,   212,     4,     0,     4,   210,   340,   211,   212,
     4,     0,     4,   212,     4,   313,     0,     4,   210,   340,
   211,   212,     4,   313,     0,   127,   208,     5,   214,   340,
   209,     0,   343,     0,   198,   342,     0,   197,   342,     0,
   342,   198,   342,     0,   342,   197,   342,     0,   215,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   216,     0,
   215,   340,   214,   340,   214,   340,   214,   340,   216,     0,
   215,   340,   214,   340,   214,   340,   216,     0,   208,   340,
   214,   340,   214,   340,   209,     0,     0,   208,   345,   209,
     0,     5,     0,   345,   214,     5,     0,     0,   215,   347,
   216,     0,   208,   347,   209,     0,   348,     0,   347,   214,
   348,     0,   340,     0,   349,     0,   215,   350,   216,     0,
   198,   215,   350,   216,     0,   340,     8,   340,     0,   340,
     8,   340,     8,   340,     0,    40,   215,   340,   216,     0,
   316,     0,   319,     0,   325,     0,     4,   210,   211,     0,
   198,     4,   210,   211,     0,     4,   210,   215,   350,   216,
   211,     0,   198,     4,   210,   215,   350,   216,   211,     0,
   340,     0,   349,     0,   350,   214,   340,     0,   350,   214,
   349,     0,   215,   340,   214,   340,   214,   340,   214,   340,
   216,     0,   215,   340,   214,   340,   214,   340,   216,     0,
     4,     0,     4,   212,   113,   212,     4,     0,   215,   353,
   216,     0,     4,   210,   340,   211,   212,   114,     0,   351,
     0,   353,   214,   351,     0,     5,     0,    39,     0,    35,
   208,   354,   214,   354,   209,     0,    36,   208,   354,   209,
     0,    34,   208,   354,   209,     0,    34,   208,   354,   214,
   350,   209,     0,    34,   208,     4,   212,     4,   209,     0,
    34,   208,     4,   210,   340,   211,   212,     4,   209,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   162,   164,   165,   166,   171,   173,   176,   178,   181,   188,
   201,   215,   217,   220,   222,   223,   226,   232,   237,   238,
   239,   242,   246,   249,   255,   260,   266,   274,   279,   283,
   289,   294,   298,   303,   307,   310,   315,   319,   323,   327,
   332,   336,   339,   343,   347,   351,   355,   359,   363,   366,
   370,   373,   377,   380,   387,   389,   392,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
   409,   415,   432,   440,   449,   457,   458,   459,   460,   461,
   462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
   472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
   482,   483,   484,   487,   490,   494,   500,   506,   509,   513,
   520,   527,   530,   534,   541,   548,   551,   555,   564,   571,
   574,   578,   587,   594,   597,   601,   610,   617,   620,   624,
   637,   644,   647,   651,   664,   671,   674,   678,   691,   698,
   701,   705,   719,   726,   729,   733,   747,   754,   757,   761,
   775,   782,   785,   789,   803,   810,   813,   817,   831,   838,
   841,   845,   859,   866,   869,   873,   897,   904,   907,   911,
   935,   942,   945,   949,   973,   980,   983,   987,  1006,  1013,
  1016,  1020,  1039,  1046,  1049,  1053,  1072,  1079,  1082,  1086,
  1104,  1111,  1114,  1118,  1136,  1143,  1146,  1150,  1168,  1175,
  1181,  1188,  1196,  1202,  1208,  1215,  1223,  1229,  1237,  1240,
  1244,  1252,  1254,  1255,  1256,  1257,  1260,  1262,  1265,  1300,
  1339,  1393,  1410,  1421,  1440,  1454,  1471,  1497,  1524,  1538,
  1555,  1569,  1586,  1606,  1629,  1639,  1654,  1674,  1690,  1709,
  1728,  1746,  1764,  1782,  1808,  1826,  1852,  1872,  1896,  1920,
  1946,  1963,  1981,  2000,  2019,  2058,  2083,  2103,  2122,  2139,
  2158,  2177,  2193,  2213,  2230,  2247,  2267,  2273,  2278,  2283,
  2290,  2292,  2293,  2296,  2301,  2305,  2321,  2337,  2353,  2373,
  2388,  2394,  2400,  2411,  2421,  2431,  2441,  2459,  2473,  2482,
  2488,  2499,  2512,  2557,  2572,  2588,  2598,  2609,  2613,  2617,
  2621,  2632,  2649,  2665,  2691,  2718,  2750,  2757,  2762,  2768,
  2772,  2780,  2799,  2815,  2831,  2836,  2852,  2857,  2873,  2878,
  2896,  2919,  2942,  2965,  2970,  2993,  2998,  3021,  3026,  3052,
  3075,  3098,  3121,  3126,  3149,  3155,  3178,  3184,  3209,  3213,
  3218,  3245,  3269,  3277,  3296,  3314,  3332,  3359,  3385,  3411,
  3425,  3443,  3448,  3457,  3459,  3460,  3461,  3462,  3465,  3467,
  3468,  3469,  3470,  3471,  3472,  3473,  3474,  3481,  3482,  3483,
  3484,  3485,  3486,  3487,  3488,  3489,  3490,  3491,  3492,  3493,
  3494,  3495,  3496,  3497,  3498,  3499,  3500,  3501,  3502,  3503,
  3504,  3505,  3506,  3507,  3508,  3509,  3510,  3511,  3512,  3514,
  3515,  3516,  3517,  3518,  3519,  3520,  3521,  3522,  3523,  3524,
  3525,  3526,  3527,  3528,  3529,  3530,  3531,  3532,  3533,  3534,
  3539,  3544,  3545,  3546,  3547,  3548,  3549,  3553,  3566,  3586,
  3600,  3613,  3636,  3654,  3672,  3690,  3708,  3715,  3720,  3724,
  3728,  3732,  3738,  3743,  3747,  3751,  3757,  3761,  3766,  3770,
  3775,  3779,  3783,  3789,  3795,  3802,  3808,  3812,  3816,  3827,
  3834,  3845,  3865,  3875,  3885,  3897,  3914,  3933,  3957,  3985,
  3991,  3995,  3999,  4011,  4016,  4028,  4035,  4056,  4061,  4075,
  4081,  4087,  4092,  4100,  4108,  4122,  4126,  4145,  4161
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tDiscrete","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers",
"tAlias","tAliasWithOptions","tScalarPoint","tVectorPoint","tTensorPoint","tScalarLine",
"tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle","tTensorTriangle",
"tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron","tVectorHexahedron",
"tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism","tScalarPyramid",
"tVectorPyramid","tTensorPyramid","tText2D","tText3D","tInterpolationScheme",
"tTime","tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds",
"tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit",
"tReturn","tCall","tFunction","tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION",
"tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ScalarPointValues",
"ScalarPoint","@1","VectorPointValues","VectorPoint","@2","TensorPointValues",
"TensorPoint","@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine",
"@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","InterpolationMatrix","TimeValues","Time","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Colorify","Visibility","Command","Loop","Extrude","@27","@28","@29",
"@30","@31","@32","@33","@34","@35","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   217,   217,   217,   217,   218,   218,   219,   219,   220,   220,
   220,   221,   221,   222,   222,   222,   223,   223,   223,   223,
   223,   224,   224,   224,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   226,   226,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   228,   228,   229,   229,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   231,   231,   233,   232,   234,   234,   236,
   235,   237,   237,   239,   238,   240,   240,   242,   241,   243,
   243,   245,   244,   246,   246,   248,   247,   249,   249,   251,
   250,   252,   252,   254,   253,   255,   255,   257,   256,   258,
   258,   260,   259,   261,   261,   263,   262,   264,   264,   266,
   265,   267,   267,   269,   268,   270,   270,   272,   271,   273,
   273,   275,   274,   276,   276,   278,   277,   279,   279,   281,
   280,   282,   282,   284,   283,   285,   285,   287,   286,   288,
   288,   290,   289,   291,   291,   293,   292,   294,   294,   296,
   295,   297,   297,   299,   298,   300,   300,   302,   301,   303,
   303,   305,   304,   306,   306,   308,   307,   309,   310,   310,
   311,   312,   312,   312,   312,   312,   313,   313,   314,   314,
   314,   314,   314,   314,   314,   314,   314,   314,   314,   314,
   314,   314,   314,   314,   314,   314,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   316,   316,   316,   316,
   317,   317,   317,   318,   318,   318,   318,   318,   318,   319,
   319,   319,   319,   320,   320,   320,   320,   321,   322,   322,
   322,   322,   323,   323,   323,   323,   323,   323,   323,   323,
   323,   324,   324,   324,   324,   324,   324,   324,   324,   324,
   324,   325,   325,   325,   326,   325,   327,   325,   328,   325,
   325,   325,   325,   329,   325,   330,   325,   331,   325,   325,
   325,   325,   332,   325,   333,   325,   334,   325,   335,   335,
   336,   336,   336,   337,   337,   337,   337,   337,   337,   337,
   337,   338,   338,   339,   339,   339,   339,   339,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   342,   342,   342,
   342,   342,   343,   343,   343,   343,   344,   344,   345,   345,
   346,   346,   346,   347,   347,   348,   348,   348,   348,   349,
   349,   349,   349,   349,   349,   349,   349,   349,   349,   350,
   350,   350,   350,   351,   351,   351,   351,   352,   352,   353,
   353,   354,   354,   354,   354,   354,   354,   354,   354
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
     8,    12,     8,     8,     8,    12,    14,    14,    14,    22,
    20,     8,     8,     8,     7,     8,     5,    11,     5,     9,
     1,     1,     1,     0,     2,     6,     6,     6,     6,     4,
     6,     6,     6,     4,     6,     3,     4,     5,     3,     3,
     4,     4,     3,     7,     3,     7,     3,     2,     2,    15,
     2,     6,     8,     8,    10,     1,     2,     1,     3,     4,
     1,     8,    12,    14,     0,    12,     0,    16,     0,    18,
     8,    12,    14,     0,    12,     0,    16,     0,    18,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     1,     2,
     9,     7,     2,     6,     9,     9,     8,     8,     8,     6,
     4,     2,     2,     1,     1,     1,     1,     1,     1,     3,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     4,     4,     4,     6,     6,     6,     4,
     1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
     2,     5,     3,     6,     4,     7,     6,     1,     2,     2,
     3,     3,    11,     9,     7,     7,     0,     3,     1,     3,
     0,     3,     3,     1,     3,     1,     1,     3,     4,     3,
     5,     4,     1,     1,     1,     3,     4,     6,     7,     1,
     1,     3,     3,     9,     7,     1,     5,     3,     6,     1,
     3,     1,     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   306,     0,   311,     0,   308,     0,     0,
     0,     0,     0,    56,    58,    57,    59,    60,    61,    62,
    63,    64,    65,    70,    69,    66,    67,    68,     0,     0,
    17,    18,    20,    19,    21,   447,   447,     0,   421,   428,
   482,   212,   422,   423,   424,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   483,
     0,   425,   426,   427,   213,   214,   215,   216,     0,     0,
     0,   217,   218,     0,     0,     0,     0,     0,     0,     0,
   359,     0,     0,   299,     0,   301,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   438,     0,     0,     0,
     0,     0,     0,   274,     0,     0,   274,   352,   353,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   476,     0,
     0,     0,     0,     0,   298,     0,   307,     0,   482,   274,
     0,   274,     0,     5,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   431,     0,    75,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   428,   362,   361,   363,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   223,   295,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   293,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   428,     0,     0,     0,   463,   464,   465,   456,
     0,   457,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   440,
   439,     0,     0,     0,     0,   274,   274,     0,     0,     0,
     0,     0,     0,     0,     0,   286,     0,     0,     0,     0,
     0,     0,   297,     0,     0,     0,     0,     0,     0,     0,
   274,     0,     0,     0,   309,     0,     0,   289,     0,   290,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   449,     0,     0,     0,     0,     0,   433,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   360,
     0,     0,   470,   471,     0,     0,   212,     0,     0,     0,
     0,     0,   219,     0,   377,   376,   374,   375,   370,   372,
   371,   373,   365,   364,   366,   367,   368,   369,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   428,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   442,   441,   273,     0,   272,
   271,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   280,   275,   351,     0,   287,     0,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   310,     0,   291,   292,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   448,     0,     0,
    23,     0,   429,   435,    75,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   379,   400,   380,   401,   381,   402,   382,   403,
   383,   404,   384,   405,   385,   406,   386,   407,   387,   408,
   399,   420,   388,   409,     0,     0,   390,   411,   391,   412,
   392,   413,   393,   414,   394,   415,   395,   416,     0,     0,
     0,     0,     0,     0,     0,     0,   486,     0,     0,   485,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   229,     0,     0,     0,     0,   430,     0,    71,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   466,     0,
     0,     0,     0,   458,   460,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   267,   269,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   288,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   450,     0,   447,     0,   432,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   429,   222,   472,   473,     0,     0,     0,
     0,     0,   224,   225,   227,     0,     0,   480,     0,   233,
   378,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   462,   467,     0,   459,     0,   240,     0,     0,
     0,     0,     0,   344,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   281,     0,     0,     0,     0,   350,   285,     0,
     0,   282,   283,     0,     0,     0,   451,     0,   477,     0,
     0,     0,   302,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   354,   355,
   356,   357,   358,     0,     0,     0,     0,     0,     0,     0,
    22,     0,   434,   294,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   454,     0,   209,   389,   410,   396,   417,   397,
   418,   398,   419,     0,   488,   487,   484,   437,     0,   212,
     0,     0,     0,     0,   220,     0,     0,     0,   478,    72,
     0,   237,   243,     0,   245,     0,     0,   241,     0,   242,
   265,     0,     0,   461,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   296,     0,
     0,     0,     0,     0,     0,   274,     0,   315,     0,   324,
     0,   333,     0,     0,     0,     0,     0,     0,   248,   249,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   447,   436,    74,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   230,     0,     0,
   231,     0,   481,     0,     0,     0,   251,   262,   468,     0,
     0,   348,   254,   255,     0,     0,     0,   347,   349,   264,
   238,   253,   263,   266,     0,     0,     0,     0,     0,   446,
     0,   445,     0,     0,   312,     0,     0,   321,     0,     0,
   330,     0,   276,   277,   278,   279,     0,     0,   451,     0,
     0,     0,     0,     0,   475,     0,   304,   303,     0,     0,
     0,     0,     0,    25,     0,    34,     0,    38,     0,    32,
     0,     0,    37,     0,    42,    40,     0,     0,     0,     0,
     0,     0,    49,     0,     0,     0,     0,     0,    54,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   455,     0,   210,
   211,     0,   221,   226,   228,     0,   234,     0,     0,   244,
   246,   469,     0,     0,   346,   345,   235,   236,     0,     0,
   274,     0,   270,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   453,   452,     0,     0,     0,     0,     0,     0,
     0,   451,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   489,
     0,   479,     0,     0,     0,     0,     0,     0,     0,   444,
     0,     0,     0,     0,     0,     0,     0,     0,   339,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   474,   305,     0,     0,    39,     0,     0,     0,     0,    29,
     0,    35,     0,    41,    30,    43,     0,    46,     0,    50,
    51,     0,     0,    53,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   232,     0,     0,     0,     0,     0,   268,
     0,     0,   317,     0,   343,     0,     0,   340,   326,     0,
     0,   335,     0,     0,     0,     0,     0,     0,   250,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   106,   110,   114,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   202,     0,   208,
     0,     0,     0,     0,     0,   443,   313,     0,     0,     0,
   316,   322,     0,     0,   325,   331,     0,     0,   334,   239,
   252,     0,     0,   256,     0,     0,     0,     0,     0,    33,
    36,    44,     0,    45,    52,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   319,
     0,     0,   328,     0,   337,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   206,
     0,     0,   259,   257,   258,     0,   314,     0,     0,     0,
   323,     0,     0,   332,     0,     0,     0,     0,     0,     0,
    28,    31,     0,     0,     0,   104,     0,   108,     0,   112,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   200,     0,   300,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   318,     0,     0,   342,   327,     0,   336,     0,
     0,     0,     0,     0,     0,    48,    24,   105,   107,   109,
   111,   113,   115,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   201,   203,     0,   204,   247,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   118,   122,
   126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   320,   341,   329,   338,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   205,   207,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   261,    10,     0,     0,     0,   116,     0,   120,     0,   124,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   260,     0,    26,   117,   119,
   121,   123,   125,   127,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   130,   134,   138,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,     0,   132,     0,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   129,   131,   133,   135,   137,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   142,   146,   150,   154,
   158,   162,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    27,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   140,     0,   144,     0,   148,     0,   152,
     0,   156,     0,   160,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,   143,   145,   147,   149,   151,
   153,   155,   157,   159,   161,   163,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   190,   194,   198,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   188,
     0,   192,     0,   196,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   189,   191,   193,   195,   197,   199,     0,     0,
     0,   178,   182,   186,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   176,     0,   180,     0,   184,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   177,   179,   181,
   183,   185,   187,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   166,   170,   174,     0,     0,     0,     0,     0,     0,
     0,   164,     0,   168,     0,   172,     0,     0,     0,     0,
     0,     0,   165,   167,   169,   171,   173,   175,     0,     0,
     0
};

static const short yydefgoto[] = {  2409,
   226,     2,     9,     3,    19,    20,    21,    22,     4,    74,
    75,    76,   461,  1725,   685,  1628,  1727,   686,  1629,  1729,
   687,  1630,  1945,   688,  1891,  1947,   689,  1892,  1949,   690,
  1893,  2081,   691,  2043,  2083,   692,  2044,  2085,   693,  2045,
  2193,   694,  2163,  2195,   695,  2164,  2197,   696,  2165,  2199,
   697,  2166,  2201,   698,  2167,  2203,   699,  2168,  2391,   700,
  2385,  2393,   701,  2386,  2395,   702,  2387,  2340,   703,  2328,
  2342,   704,  2329,  2344,   705,  2330,  2289,   706,  2271,  2291,
   707,  2272,  2293,   708,  2273,  1752,   709,  1652,  1847,   710,
  1754,   711,  1074,   712,   148,   263,    77,   593,   357,   579,
   580,   358,    81,    82,    83,    84,    85,   359,  1266,  1598,
  1708,  1269,  1603,  1712,  1272,  1607,  1715,  1458,  1459,    87,
    88,  1034,   360,   151,   380,   187,   258,   454,  1154,  1072,
  1073,   362,   515,   211,   775,   939,   152
};

static const short yypact[] = {  3205,
    82,   220,   318,  3551,-32768,-32768,-32768,   -55,-32768,   120,
   136,   139,   142,   148,   206,   -29,    80,    86,-32768,-32768,
-32768,-32768,  2669,    93,    18,   215,   116,   145,   165,   -39,
   158,   175,   178,   249,   207,   357,   375,   409,   417,   539,
   435,   476,   257,   444,   278,   -84,   -84,   291,   510,    10,
   455,    12,   503,   515,    61,   553,   559,   574,   382,   383,
   -10,    13,    29,-32768,   390,-32768,   550,-32768,   610,   614,
   579,    17,    76,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    20,  3406,
-32768,-32768,-32768,-32768,-32768,   465,   465,   619,-32768,   208,
    15,-32768,-32768,-32768,-32768,  -134,     3,   112,   252,   284,
   295,   321,   401,   402,   419,   453,   454,   475,   479,   483,
   484,   487,   488,   491,   494,   499,   495,   502,   525,-32768,
   528,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2972,  2972,
  2972,-32768,-32768,  2972,  1295,    33,   662,  2972,   702,   481,
-32768,   705,   748,-32768,  2972,-32768,  2972,  2972,  2972,   575,
  2972,   581,  2972,  2972,  1024,  2972,   567,   591,   611,   650,
  1024,   590,   593,   677,   684,   701,   704,   722,   743,  -126,
   -84,   -84,   -84,  2972,  2972,  -118,-32768,   -78,   -84,   594,
   603,   607,   703,-32768,  1024,    26,-32768,-32768,-32768,  1024,
  1024,   732,   765,   946,  2972,  2972,   -37,  2972,   747,  2972,
   761,   876,  2972,  2972,-32768,   995,-32768,   795,-32768,-32768,
  1013,-32768,  1014,-32768,  1019,    20,   815,   818,   821,   823,
   824,   849,   850,   851,   852,   854,   855,   857,   858,   859,
   861,   862,   863,   864,   865,   866,   867,   868,   869,   870,
   871,   872,   873,   874,   875,   877,  1087,   879,   885,   887,
  2972,  1098,-32768,   -84,-32768,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,    94,   121,   121,
  1099,   292,   896,   896,   896,  2376,  1103,  2703,  2821,   152,
   893,  1104,   902,   700,-32768,-32768,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,-32768,   -70,  1871,  2593,  3196, 11624,  2972, 11647,  2972,
 11670, 11693,   354,   891,  1677,  2703,-32768,-32768,-32768,   817,
  1106,-32768, 11716,  2972,  2972,  2972,  2972,  1107,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,   906,  2972,  2972,   131,-32768,
-32768,  3903,  3925,   -84,   -84,   448,   448,   161,  2972,  2972,
  2972,  2972,  2068,   193,  1110,-32768,  2972,  2495,  1111,  1112,
  2972,  2972,-32768, 11739, 11762,  1006,  2972, 11785,  1007,  3947,
-32768,   907,  1628, 11808,-32768,  2972,  3024,-32768,  3292,-32768,
-32768,    20,  1116,  1118,  1121,  1122,  1123,  1124,  1125,  1126,
  1127,  1128,  1129,  1130,  1132,  1136,  1137,  1138,  1139,  1140,
  1141,  1142,  1143,  1145,  1150,   992,  1156,  1157,  1159,  1160,
  1163,  1164,-32768,   163,  1165,  1162,  1192, 10899,   126,   -34,
   749, 11831, 10924, 11854, 10949, 11877, 10974, 11900, 10999, 11923,
 11024, 11946, 11049, 11969, 11074, 11992, 11099, 12015, 11124, 12038,
 11149, 12061, 11174,  3969,  3991, 12084, 11199, 12107, 11224, 12130,
 11249, 12153, 11274, 12176, 11299, 12199, 11324,  4013,  4035,  4057,
  4079,  4101,  4123,   474,   171,   984,   991,   987,  2972,-32768,
  1024,  3031,   817,-32768,   -38,    11,   121,  2972,  1196,  1199,
    16,   993,-32768,  1670,   235,   209,   348,   348,   370,   370,
   370,   370,   380,   380,   896,   896,   896,   896,  1200,  2703,
  2972,  1198,  1201,  1202, 12222,  1203, 12245,  1205,  1206,  2402,
  2972,   416,  2703,   500,  2972,  2972,  1207,  1524, 12268, 12291,
 12314,  2972,  2946,  3025, 12337, 12360, 12383, 12406, 12429,  1003,
 12452,  3098,   -84,  2972,  2972,-32768,-32768,-32768,  1000,  2763,
-32768,  1004,  2972,  4145,  4167,  4189, 11349,  -123,   -41,   -47,
   -35,-32768,-32768,-32768,  2972,-32768, 11374,-32768,  1008,  1009,
 11399, 11424,  1212,  1218,   999, 12475,  1219,  1016,  2972,  3366,
  2972,  2972,-32768, 12498,-32768,-32768,  1050,  1017,  1020,  1021,
  1022,  1026,  1027,  1028,  1029,  1030,  1031,  1032,  1033,  1034,
  1035,  1037,  1038,  1039,  1040,  1044,  1045,  1048,  1056,  1067,
  1068,  1069,  1072,  1073,  1074,  1075,  1076,-32768,  1225,  1055,
-32768,  1077,    30,-32768,-32768,  1025,  1084,  1086,  1088,  1089,
  1092,  1093,  1094,  1095,  1120,  1131,  1134,  1135,  1144,  1146,
  1148,  1151,  1152,  1153,  1154,  1158,  1161,  1166,  1168,  1169,
  1170,  1080,  1114,  1324,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2972,  2972,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  1327,-32768,  2703,   121,-32768,
  2972, 11449,  1326,  2703,  1133,    39,  2972,  1328,  1329,   728,
-32768,  1330,  1155,    13,  1332,-32768,  2972,-32768,   213,  4211,
   -84,  1024,  1024,  1338,  1024,  1341,  1024,  1024,-32768,  2703,
  3247,  2432,   501,-32768,  1730,   750,  1149,  1342,  1343,  1360,
  1361,   443,  1363,  1364,  1372,  1374,  1375,  1376,  1377,  1382,
  1380,  1409,   173,  4233,  4255,-32768,-32768,  3288,   -84,   -84,
   -84,  1383,  2703,  2703,  2703,  2703,   773,  1412,  2972,  2972,
  1413,  1421,  1024,  1024,  2972,  1429,  1024,  1472,  4277,-32768,
  1786,   458,  1470,  1298,  1333,  2972,  2972,   -84,  1476,  1477,
  1283,  1480,  1481,  1024,  1024,  1483,   -84,  1484,  1485,  1024,
  1024,  1486,  1487,  1488,  1491,  1492,  1024,   400,  1024,  1493,
  1494,  1495,  1498,  1499,-32768,  1501,   465,  1500,-32768,  1503,
  3432,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  1024,  2972,-32768,
 12521, 11474, 12544, 11499, 12567, 11524, 12590, 11549, 11574,  1288,
   241,  1296, 12613,   -54,-32768,   817,-32768,    24,   177,  1300,
  1506,  1078,-32768,-32768,-32768,    13,  2972,-32768,   504,-32768,
  1259,  1508,  2972,    22,    42,    43,  1024,  1509,  1024,  1510,
  1512,   505,-32768,-32768,  2703,-32768,  2972,-32768,  2972,  1024,
  1024,  1024,  1311,-32768,   281,  1024,  1024,  1024,  1024,  1024,
  1024,  1024,   519,  1321,  1322,  2972,  2972,  2972,  1350,  -114,
  -111,  -107,-32768,   508,   509,   523,   526,-32768,-32768,  4299,
  4321,-32768,-32768,  1520,  1533, 12636,     9,  1221,-32768,  2972,
  2972,  2972,-32768,  1352,  1367,  1355,  4343,  4365,   -32,  1356,
  1362,  1358,  1365,  1366,  1369,  1368,  1370,   167,  1371,  1378,
  1379,  1399,  1400,  1401,  1402,  1403,  1405,  1381,-32768,-32768,
-32768,-32768,-32768,  1406,  1407,  1408,  1410,  1414,  1384,  1415,
-32768,  1417,   126,-32768,  1570,  4387,  4409,  4431,  4453,  4475,
  4497,  4519,  4541,  4563,  4585,  4607,  4629,  4651,  4673,  4695,
  4717,  4739,  4761,  4783,  4805,  4827,  4849,  4871,  4893,  4915,
  4937,   529,-32768,   532,  1259,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1422,-32768,-32768,-32768,-32768,  1024,   121,
  2972,  1573,  1577,    16,-32768,  1580, 11599,    13,-32768,-32768,
  4959,-32768,-32768,   -84,-32768,   -84,  1583,-32768,  1585,-32768,
-32768,  1385,   536,  1259,  4981,  1586,  1588,  1617,  2972,  2972,
  2972,  1619,  1620,  1629,  1632,  1633,  1634,  1635,-32768,  2909,
  2972,  2972,  3444, 12659,   597,   448,   -84,  1636,   -84,  1637,
   -84,  1638,  1639,  1640,  1641,  1642,  2972,  2972,-32768,-32768,
  1576,  1024,  1024,  1537,  1024,  2308,   406, 12682,  2972,    20,
  1647,  2972,  1024,  1645,  1673,  1671,  1511,  1676,   400,  1678,
  1682,  2972,  1710,  1724,  1722,  1723,  1731,   400,  2972,  2972,
  2972,  1024,  1727,  1732,   400,  2972,  1733,  1734,  1735,  2972,
   465,-32768,-32768,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  1024,
  1464,  2972,  1736,  1740,  1739,  1741,  1244,-32768,  1743,  1742,
-32768,  1527,-32768,  2972,    89,   102,-32768,-32768,-32768,  1535,
  2972,-32768,-32768,-32768,  5003,  1274,  1334,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1411,  1746,  5025,  5047,  1539,-32768,
  2972,-32768,  1565,   240,-32768,  1578,   242,-32768,  1582,   261,
-32768,  1584,-32768,-32768,-32768,-32768,  5069,  5091,     9,   243,
   541,  1587,  1683,  2972,-32768,  2972,-32768,-32768,  5113,    20,
  1591,  5135,  1581,-32768,  1594,-32768,  1595,-32768,  1592,-32768,
  1599, 12705,-32768,  1606,-32768,-32768,  1621,  1624, 12728,  5157,
 12751,  1622,-32768,  1625,  1653,  5179,  1623,  1663,-32768,  5201,
  1659,  5223,  5245,  5267,  5289,  5311,  5333,  5355,  5377,  5399,
  5421,  5443,  5465,  5487,  5509,  5531,  5553,  5575,  5597,  5619,
  5641,  5663,  5685,  5707,  5729,  5751,  5773,-32768,  1024,  1259,
-32768,  1667,-32768,-32768,-32768,    13,-32768,  1684,  5795,-32768,
-32768,-32768,  5817,  2972,-32768,-32768,-32768,-32768,  2972,  2972,
   448,  2557,-32768,  2462,   101,  2462,   101,  2462,   101,  2972,
  2972,  1679,-32768,-32768,  1024,  2972,  3491,  3515,  1024,    20,
  1797,     9,   400,  1835,  2972,  1872,   400,  1873,  1878,  1876,
  1877,  1880,  2972,  1881,  1024,  1883,  1887,  2972,  1891,  1889,
  2972,  1879,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,   544,-32768,
  1916,-32768,  2972,  1927, 12774,  3539,  3563,  1717,  2972,-32768,
  2462,  2462,  2972,  3587,   266,  1928,  1720,   -30,-32768,  3611,
   287,   -28,  3635,   293,   -27,  3659,  3683,  1721,  1725,  1589,
-32768,-32768,  1726,  1762,-32768,  1738,  1764,  1774,  5839,-32768,
  1737,-32768,  1745,-32768,-32768,-32768, 12797,-32768,  1775,-32768,
-32768, 12820,  1781,-32768, 12843,  1777, 12866, 12889, 12912,  5861,
  5883,  5905,  5927,  5949,  5971,  5993,  6015,  6037,  6059,  6081,
  6103,  6125,  6147,  6169,  6191,  6213,  6235,  6257,  6279,  6301,
 12935,  6323,  1934,-32768,  6345,  1778,  1024,  1024,  1024,-32768,
  3707,  3875,  1935,  2972,-32768,  1024,  1938,-32768,  1939,  2972,
  1941,  1942,  2972,  1944,  1988,  1989,  1024,  1024,-32768,  1990,
    20,   400,   400,   400,   400,  1991,  1992,  1993,   400,  1994,
  1995,  1996,  1998,-32768,-32768,-32768,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,-32768,  2972,-32768,
  2972,  2014,  1024,  1024,  1024,-32768,-32768,  1805,  3731,  1807,
-32768,-32768,  1808,  3755,-32768,-32768,  1809,  3779,-32768,-32768,
-32768,  1811,  1806,-32768,    20,  1812,  1813,  1819,  1820,-32768,
-32768,-32768,  1816,-32768,-32768,-32768,  1817,  1818,  1821,  1822,
  6367,  6389,  6411,  6433,  6455,  6477,  6499,  6521,  6543,  6565,
  6587,  6609,  6631,  6653,  6675,  6697,  6719,  6741,  6763,  6785,
  6807,  1823, 12958,  3803,  1843,  2026,  2028,  2029,   101,  2057,
  1024,   101,  2067,   101,  2069,  1024,  1965,    20,   400,   400,
  2070,  2071,   400,  2074,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,   121,-32768,
  2075,  2078,-32768,-32768,-32768,   -24,-32768,  1886,   545,   -15,
-32768,  1888,   -14,-32768,  1890,  1900,  1892,  1926,  1904,  1908,
-32768,-32768,  1895,  1897,   548,  1259,   549,  1259,   552,  1259,
  6829,  6851,  6873,  6895,  6917,  6939,  6961,  6983,  7005,  7027,
  7049,  7071,  7093,  7115,  7137,  7159,  7181,  7203,  7225,  7247,
  7269,   556,-32768,  1910,-32768,  1911,  2120,   101,  1024,  2122,
  2133,   101,  2134,   101,  2033,  2972,    20,   400,  1024,  2137,
  2138,  2972,  2139,  2972,  2140,  2972,  2141,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,   121,  2142,
   121,  2143,-32768,   -12,  1936,-32768,-32768,   -11,-32768,    -2,
  1955,  7291,    20,  1937,  1940,-32768,-32768,  1259,-32768,  1259,
-32768,  1259,-32768, 12981, 13004, 13027,  7313,  7335,  7357,  7379,
  7401,  7423,  7445,  7467,  7489,  7511,  7533,  7555,  7577,  7599,
  7621,  7643,  7665,  7687,-32768,-32768,   557,-32768,-32768,  2144,
  2147,  2165,  2166,  2972,  2972,    20,   400,  1024,-32768,-32768,
-32768,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,   121,
  2167,-32768,-32768,-32768,-32768,  7709,  3827,  1997,  1963,  1966,
  1964,  1967,  1968,  7731,  7753,  7775,  7797,  7819,  7841,  7863,
  7885,  7907,  7929,  7951,  7973,  7995,  8017,  8039,  8061,  8083,
  8105,-32768,-32768,  2972,  2175,  2002,  1024,   400,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  3851,
-32768,-32768,  1971,  1977,   560,  1259,   561,  1259,   564,  1259,
  8127,  8149,  8171,  8193,  8215,  8237,  8259,  8281,  8303,  8325,
  8347,  8369,  8391,  8413,  8435,  8457,  8479,  8501,  2181,  1024,
  2182,  2972,  2183,  2972,  2184,  2972,  2188,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,-32768,  1982,-32768,  1259,-32768,
  1259,-32768,  1259,-32768, 13050, 13073, 13096,  8523,  8545,  8567,
  8589,  8611,  8633,  8655,  8677,  8699,  8721,  8743,  8765,  8787,
  8809,  8831,  1024,-32768,-32768,-32768,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  1984,  1985,  1987,  2001,  8853,  8875,  8897,  8919,  8941,
  8963,  8985,  9007,  9029,  9051,  9073,  9095,  9117,  9139,  9161,
  1024,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  1999,
   600,  1259,   601,  1259,   640,  1259,  9183,  9205,  9227,  9249,
  9271,  9293,  9315,  9337,  9359,  9381,  9403,  9425,  9447,  9469,
  9491,   400,  2972,  2206,  2972,  2212,  2972,  2215,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2013,  1259,-32768,  1259,-32768,  1259,-32768,
 13119, 13142, 13165, 13188, 13211, 13234,  9513,  9535,  9557,  9579,
  9601,  9623,  9645,  9667,  9689,  2217,-32768,-32768,-32768,-32768,
-32768,-32768,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,-32768,  2009,  2010,  2011,  2012,  2015,  2016,  9711,  9733,
  9755,  9777,  9799,  9821,  9843,  9865,  9887,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,   641,  1259,   688,  1259,   689,  1259,   694,  1259,
   717,  1259,   742,  1259,  9909,  9931,  9953,  9975,  9997, 10019,
 10041, 10063, 10085,  2972,  2222,  2972,  2223,  2972,  2226,  2972,
  2233,  2972,  2234,  2972,  2235,  2972,  2972,  2972,  2972,  2972,
  2972,  2972,  2972,  2972,  1259,-32768,  1259,-32768,  1259,-32768,
  1259,-32768,  1259,-32768,  1259,-32768, 10107, 10129, 10151, 10173,
 10195, 10217, 13257, 13280, 13303,  2972,  2972,  2972,  2972,  2972,
  2972,-32768,-32768,-32768, 10239, 10261, 10283, 10305, 10327, 10349,
  2027,  2030,  2031,  2972,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2972, 10371, 10393, 10415, 10437, 10459, 10481,   767,  1259,
   768,  1259,   771,  1259,  2972,  2972,  2972,  2972,  2972,  2972,
  2972,  2237,  2972,  2238,  2972,  2241, 10503, 10525, 10547, 13326,
 13349, 13372,  1259,-32768,  1259,-32768,  1259,-32768,  2972,  2972,
  2972,-32768,-32768,-32768, 10569, 10591, 10613,  2034,  2035,  2045,
  2972,  2972,  2972,  2972,  2972,  2972, 10635, 10657, 10679,   774,
  1259,   775,  1259,   779,  1259,  2972,  2972,  2972,  2972,  2242,
  2972,  2255,  2972,  2256, 10701, 10723, 10745,  1259,-32768,  1259,
-32768,  1259,-32768,  2972,  2972,  2972, 10767, 10789, 10811,  2972,
  2972,  2972, 10833, 10855, 10877,  2972,  2972,  2972, 13395, 13418,
 13441,-32768,-32768,-32768,  2048,  2049,  2052,  2972,  2972,  2972,
   782,  1259,   783,  1259,   786,  1259,  2972,  2262,  2972,  2264,
  2972,  2265,  1259,-32768,  1259,-32768,  1259,-32768,  2279,  2281,
-32768
};

static const short yypgoto[] = {-32768,
  -130,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1630,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -313,   -18,-32768,  2284,     2,  -385,
  -182,     4,-32768,-32768,-32768,-32768,-32768,  2285,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1366, -1387,-32768,
-32768, -1108,   -23,-32768,   436,-32768,   -96,-32768, -1243, -1127,
  1432,  -250,  -347,  -764,  1189,-32768,   -69
};


#define	YYLAST		13650


static const short yytable[] = {   150,
   259,   582,   221,   223,   149,    79,   518,    80,   554,   938,
  1462,   393,  1465,   193,   398,   196,   209,   102,   264,   773,
   162,   219,   224,   154,  1280,  1281,   160,  1102,   160,   395,
   102,   396,   212,   207,   219,  1382,   320,   417,  1456,   419,
  1456,  1456,   929,  1457,  1456,  1457,  1457,  1103,  1105,  1457,
   127,   128,   129,  1456,  1456,   130,  1456,  1456,  1457,  1457,
  1299,  1457,  1457,   127,   128,   129,  1456,   514,   130,  1308,
  1538,  1457,   406,   266,  1538,   267,  1315,  1538,   384,   385,
   219,   377,   384,   385,   157,   384,   385,     5,   378,   384,
   385,   823,  1104,  1106,  1360,   422,   386,   504,   219,  1137,
   200,  1138,  1139,   201,  1140,   514,  1141,  1361,  1142,   127,
   128,   129,   182,   183,   130,   313,   314,   315,   384,   385,
   316,   319,    89,   184,   324,   219,    90,   127,   128,   129,
   185,   344,   130,   345,   346,   347,   387,   349,   539,   351,
   352,    91,   363,   540,    92,   321,   322,    93,  1476,   142,
   143,   930,   931,    94,   127,   128,   129,   878,   517,   130,
   382,   383,   384,   385,   384,   385,   161,   825,   161,  1456,
   407,  1096,   164,   824,  1457,   764,  1164,   765,    96,   826,
   655,   404,   405,  1090,   408,  1537,   410,  1541,  1544,   413,
   414,  1757,   779,   135,   136,   137,   138,   208,   594,   595,
  1761,  1763,   767,  1850,  1852,   793,   135,   136,   137,   138,
   268,    95,   269,  1853,   142,   143,  1152,   225,   384,   385,
   156,  1439,   766,  1153,   194,   162,   197,   210,   610,   265,
   774,   220,   155,   142,   143,   397,   213,   458,   505,   506,
   507,   878,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
   480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
   490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
   500,   501,   502,   503,  1477,   384,   385,    97,  1481,   514,
   222,   617,  1706,    98,   513,  1710,   165,  1713,   384,   385,
   153,   519,   514,   524,   525,   526,   527,   528,   529,   530,
   531,   532,   533,   534,   535,   536,   537,   538,  1538,   270,
    10,   271,  1538,   157,   545,  1538,   547,   384,   385,   142,
   143,   314,   513,  1233,   135,   136,   137,   138,  1120,  1121,
   558,   559,   560,   561,   573,   563,   564,   565,   566,   567,
   568,   569,   158,   571,   572,   142,   143,   384,   385,   135,
   136,   137,   138,   384,   385,   584,   585,   586,   587,   384,
   385,   648,   159,   597,   583,  1173,   649,   601,   602,   757,
   142,   143,   163,   606,   758,   164,   976,   578,   578,   581,
   581,  1804,   614,     6,     7,  1808,     8,  1810,   330,   331,
   167,   332,   333,   334,   335,   336,   337,   338,   339,   340,
   921,   142,   143,  1286,   166,   341,  1538,   261,   168,   262,
  1538,   942,  1538,   329,   330,   331,   764,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   384,   385,   384,   385,
   654,   341,   952,  1616,  1617,  1618,  1619,   769,   964,  1086,
  1623,  1383,   169,  1374,   764,  1376,  1220,   384,   385,   272,
   170,   273,   384,   385,   179,  1002,    11,    12,    13,    14,
    15,    16,    17,    18,  1378,   984,   985,   986,   987,  1534,
   174,   186,   188,   384,   385,   762,   326,   180,   314,   384,
   385,   274,   181,   275,   770,   142,   143,   768,   195,   965,
  1540,   509,   276,   262,   277,   189,  1543,   514,   198,    45,
    46,    47,    48,   927,    50,   175,   513,   780,   176,   177,
   199,   178,    56,    57,  1129,  1130,   762,   791,   278,   513,
   279,   795,   796,  1029,  1030,  1031,  1032,  1033,   802,   514,
   332,   333,   334,   335,   336,   337,   338,   339,   340,   190,
   814,   815,   191,   192,   341,   215,   202,   142,   143,   818,
  1719,  1720,   203,   550,  1723,   262,   336,   337,   338,   339,
   340,   827,   514,   514,   514,   514,   341,   204,   338,   339,
   340,   171,   172,   880,   173,   839,   341,   841,   842,   205,
   206,  1441,   327,   328,   329,   330,   331,   214,   332,   333,
   334,   335,   336,   337,   338,   339,   340,  1113,   280,   282,
   281,   283,   341,   216,  1089,  1091,   379,   217,   381,   142,
   143,  1287,   218,   260,   388,   792,   284,   262,   285,   327,
   328,   329,   330,   331,   879,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   327,   328,   329,   330,   331,   341,
   332,   333,   334,   335,   336,   337,   338,   339,   340,  1814,
   286,   288,   287,   289,   341,   323,  1003,   327,   328,   329,
   330,   331,   257,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   290,   755,   291,   756,   292,   341,   293,   922,
   294,   296,   295,   297,   298,   300,   299,   301,   302,   460,
   303,   304,   308,   305,   514,   523,   306,   325,   307,   309,
   342,   911,   912,   764,   764,   794,   956,  1098,   764,  1099,
  1112,   764,   764,  1143,  1144,   913,   914,   915,   916,   917,
   918,   919,   310,   935,   513,   311,   764,   923,  1145,   764,
   926,  1146,  1220,   932,  1221,  1222,   376,  1223,  1889,   764,
  1263,  1240,   343,   941,  1220,   958,  1384,  1220,  1759,  1523,
  1760,  1772,  1774,  1773,  1775,  1776,   513,  1777,   762,  1799,
  1880,  1800,  1881,  1972,  1974,  1973,  1975,  1976,   988,  1977,
  1042,   364,   348,   327,   328,   329,   330,   331,   350,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   365,   513,
   513,   513,   513,   341,   369,   990,   991,   370,   389,  1944,
  1261,   996,  1262,  2103,  2105,  2104,  2106,   390,   366,   576,
   577,   391,  1007,  1008,   555,   656,   657,   658,   659,   660,
   661,   662,   663,   664,   665,   666,   667,   668,   669,   670,
   671,   672,   673,   674,   675,   676,   677,   678,   679,   680,
   681,   682,   683,  2107,  2214,  2108,  2215,   367,  1046,  1047,
  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,
  1058,  1059,  1060,  1061,  1062,  1063,  1064,  1065,  1066,  1067,
  1068,  1069,  1070,  1071,   371,  1075,   327,   328,   329,   330,
   331,   372,   332,   333,   334,   335,   336,   337,   338,   339,
   340,  2216,  2218,  2217,  2219,   879,   341,  2220,   373,  2221,
  1092,   374,   392,  1097,   327,   328,   329,   330,   331,  1101,
   332,   333,   334,   335,   336,   337,   338,   339,   340,   375,
  2222,   513,  2223,  1114,   341,  1115,   327,   328,   329,   330,
   331,   401,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   403,  1133,  1134,  1135,  2224,   341,  2225,   409,   327,
   328,   329,   330,   331,   684,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   402,   411,  1156,  1157,  1158,   341,
  2301,  2303,  2302,  2304,  2305,  1448,  2306,  2349,  2351,  2350,
  2352,   412,  2353,  2124,  2354,  2397,  2399,  2398,  2400,  2401,
   415,  2402,   416,   327,   328,   329,   330,   331,   813,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   418,   420,
  1226,   421,   423,   341,  1192,   424,    99,   353,   425,  1290,
   426,   427,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   428,   429,   430,   431,
  1256,   432,   433,   354,   434,   435,   436,  1227,   437,   438,
   439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
   449,   450,   451,  1095,   452,    45,    46,    47,    48,    49,
    50,   453,   455,   456,  1321,  1245,  1246,  1247,    56,    57,
   457,   459,   341,   508,   520,   551,  1255,  1257,  1258,   511,
   521,   522,   556,   562,   570,   596,   605,   599,   600,   608,
   618,   611,   619,  1277,  1278,   620,   621,   622,   623,   624,
   625,   626,   627,   628,   629,  1289,   630,   578,  1292,   581,
   631,   632,   633,   634,   635,   636,   637,   638,  1302,   639,
   131,   132,   133,   134,   640,  1309,  1310,  1311,   641,  1390,
   642,   643,  1316,   644,   645,   646,  1320,   651,   647,   650,
  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,
  1342,  1343,  1344,  1345,  1346,  1347,   652,   759,  1350,   760,
   761,   771,   772,   776,   781,   778,   835,   782,   783,   785,
  1359,   787,   788,   797,   810,   816,   944,  1363,   833,   817,
   139,   355,   829,   830,   834,   837,   141,   838,   844,   875,
   845,   144,   882,   846,   847,   848,   147,  1372,   356,   849,
   850,   851,   852,   853,   854,   855,   856,   857,   858,  1355,
   859,   860,   861,   862,   980,   981,   982,   863,   864,  1474,
  1387,   865,  1388,   876,   327,   328,   329,   330,   331,   866,
   332,   333,   334,   335,   336,   337,   338,   339,   340,  1365,
   867,   868,   869,  1009,   341,   870,   871,   872,   873,   874,
   877,   883,  1018,   884,   908,   885,   886,    99,   312,   887,
   888,   889,   890,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   891,   909,   910,
   920,   925,  1155,   933,   934,  1006,   936,   940,   892,  1366,
  1445,   893,   894,   928,   947,  1446,  1447,   949,   960,   961,
  1454,   895,  1460,   896,  1463,   897,  1466,  1467,   898,   899,
   900,   901,  1470,   959,   937,   902,   962,   963,   903,   966,
   967,  1479,   578,   904,   581,   905,   906,   907,   968,  1487,
   969,   970,   971,   972,  1492,   973,   974,  1495,   983,  1497,
  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,
  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,
  1518,  1519,  1520,  1521,  1522,   975,  1367,   989,   992,  1525,
  1615,   131,   132,   133,   134,  1531,   993,   313,   314,  1532,
   327,   328,   329,   330,   331,   997,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   327,   328,   329,   330,   331,
   341,   332,   333,   334,   335,   336,   337,   338,   339,   340,
   327,   328,   329,   330,   331,   341,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   999,  1004,  1005,  1010,  1011,
   341,  1012,  1013,  1014,  1668,  1017,  1019,  1020,  1023,  1024,
  1025,   139,   140,  1026,  1027,  1036,  1085,   141,  1037,  1038,
  1039,  1040,   144,  1043,  1087,   317,  1041,   147,  1044,   318,
  1599,  1093,  1094,  1100,  1108,  1110,  1604,  1111,  1119,  1608,
   327,   328,   329,   330,   331,  1149,   332,   333,   334,   335,
   336,   337,   338,   339,   340,  1131,  1132,  1718,  1150,  1235,
   341,  1236,  1160,  1631,  1632,  1633,  1634,  1635,  1636,  1637,
  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,
  1648,  1649,  1650,  1651,  1136,  1653,  1159,  1654,  1161,  1165,
  1166,  1167,  1264,  1168,  1267,  1193,  1270,  1170,  1228,  1169,
  1229,  1171,  1279,  1172,  1174,  1231,  1175,  1176,  1237,  1183,
  1238,  1242,  1189,  1243,  1549,  1239,   361,   327,   328,   329,
   330,   331,   368,   332,   333,   334,   335,   336,   337,   338,
   339,   340,  1177,  1178,  1179,  1180,  1181,   341,  1182,  1184,
  1185,  1186,  1244,  1187,  1248,  1249,   394,  1188,  1190,  1753,
  1191,   399,   400,  1224,  1250,   612,  1813,  1251,  1252,  1253,
  1254,  1265,  1268,  1271,  1273,  1274,  1275,  1276,  1282,  1291,
  1294,  1726,  1728,  1730,  1731,  1732,  1733,  1734,  1735,  1736,
  1737,  1738,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,
  1747,  1748,  1749,  1750,  1751,  1295,  1296,   777,  1349,    99,
   552,  1298,  1856,  1300,  1301,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,  1297,
   327,   328,   329,   330,   331,  1303,   332,   333,   334,   335,
   336,   337,   338,   339,   340,  1888,  1304,  1305,  1306,  1845,
   341,  1848,  1313,  1307,  1314,  1317,  1318,   957,  1358,   798,
  1319,  1351,  1812,  1352,  1353,  1362,  1354,  1357,  1818,  1356,
  1820,  1368,  1822,  1371,  1824,  1825,  1826,  1827,  1828,  1829,
  1830,  1831,  1832,  1833,  1834,  1835,  1836,  1837,  1838,  1839,
  1840,  1841,  1842,  1843,  1844,   327,   328,   329,   330,   331,
  1373,   332,   333,   334,   335,   336,   337,   338,   339,   340,
  1468,  1386,  1375,  1001,  1393,   341,  1377,  1442,  1379,  1391,
  1396,  1385,  1475,   131,   132,   133,   134,  1394,  1395,  1455,
  1912,  1461,  1397,  1464,   327,   328,   329,   330,   331,  1399,
   332,   333,   334,   335,   336,   337,   338,   339,   340,  1400,
  1886,  1887,  1401,  1406,   341,  1405,  1409,  1478,  1894,  1895,
  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,  1905,
  1906,  1907,  1908,  1909,  1910,  1911,   327,   328,   329,   330,
   331,  1407,   332,   333,   334,   335,   336,   337,   338,   339,
   340,  1410,  1412,   139,   140,  1440,   341,  1480,  1482,   141,
  1483,  1484,  1485,  1496,   144,  1486,  1488,   381,  1490,   147,
  1940,   553,  1491,  1493,  1494,  1946,  1948,  1950,  1951,  1952,
  1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,
  1963,  1964,  1965,  1966,  1967,  1968,   327,   328,   329,   330,
   331,  1524,   332,   333,   334,   335,   336,   337,   338,   339,
   340,  1526,  1530,  1535,  1536,  1547,   341,  1551,  1548,  1590,
  1597,  1550,   763,  1601,  1602,  1556,  1605,  1606,  1999,  1609,
  2001,  1552,  2003,  1557,  2005,  2006,  2007,  2008,  2009,  2010,
  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,
  2021,  2022,   327,   328,   329,   330,   331,  1553,   332,   333,
   334,   335,   336,   337,   338,   339,   340,  1554,  1559,  1561,
  1563,  1592,   341,  1610,  1611,  1614,  1620,  1621,  1622,  1624,
  1625,  1626,  1627,  2046,  2047,  2048,  2049,  2050,  2051,  2052,
  2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,  1655,  1659,
  1661,  1667,  1662,  1664,  1666,  1669,  1670,  1671,  1672,  1673,
  1674,  1703,  1675,  1704,  1705,  1676,  1677,  1699,  2082,  2084,
  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
  2096,  2097,  2098,  2099,  2100,  2101,  1702,   327,   328,   329,
   330,   331,  1707,   332,   333,   334,   335,   336,   337,   338,
   339,   340,  1711,  1717,  1714,  1721,  1722,   341,  1724,  2125,
  1755,  2127,  1756,  2129,   541,  2131,  2132,  2133,  2134,  2135,
  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,
  1758,  1767,  1762,  1770,  1764,  1771,  1766,   588,    28,    29,
   589,   590,    32,   591,    34,  1765,    35,  1768,    37,    38,
    39,  1769,    41,    42,  1801,  1803,  1802,  1806,    44,  2169,
  2170,  2171,  2172,  2173,  2174,  2175,  2176,  2177,  1807,  1809,
    55,  1811,  1816,  1817,  1819,  1821,  1823,  1846,  1849,  1882,
  1857,  1851,  1883,  1858,  2194,  2196,  2198,  2200,  2202,  2204,
  2205,  2206,  2207,  2208,  2209,  2210,  2211,  2212,  2213,  1854,
  1884,  1885,  1913,    59,    60,    61,  1917,  1916,  1919,  1918,
  1941,  1920,  1921,  1942,  1970,  1971,  1996,  1998,  2000,  2002,
  2235,    71,  2237,  2004,  2239,  2023,  2241,  2061,  2243,  2062,
  2245,  2063,  2247,  2248,  2249,  2250,  2251,  2252,  2253,  2254,
  2255,  2126,  2102,   945,   946,  2064,   948,  2128,   950,   951,
  2130,  2146,  2162,  2178,  2179,  2180,  2181,  2236,  2238,  2182,
  2183,  2240,  2265,  2266,  2267,  2268,  2269,  2270,  2242,  2244,
  2246,  2280,  2314,  2316,  2281,  2282,  2318,  2359,  2334,  2335,
  2283,  2284,  2285,  2286,  2287,  2288,  2290,  2292,  2294,  2336,
  2361,  2363,  2388,  2389,   994,   995,  2390,  2404,   998,  2406,
  2408,  2307,  2308,  2309,  2310,  2311,  2312,  2313,  2410,  2315,
  2411,  2317,  1230,   592,   881,  1015,  1016,    78,    86,     0,
     0,  1021,  1022,     0,     0,  2325,  2326,  2327,  1028,     0,
  1035,     0,     0,     0,     0,     0,     0,  2337,  2338,  2339,
  2341,  2343,  2345,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  2355,  2356,  2357,  2358,     0,  2360,     0,  2362,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  2367,  2368,  2369,     0,     0,     0,  2373,  2374,  2375,     0,
     0,     0,  2379,  2380,  2381,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  2392,  2394,  2396,     0,     0,     0,
     0,     0,     0,  2403,     0,  2405,     0,  2407,  1107,     0,
  1109,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1116,  1117,  1118,     0,     0,     0,  1122,  1123,  1124,
  1125,  1126,  1127,  1128,    99,   312,     0,     0,     0,     0,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,    99,   312,     0,     0,     0,     0,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,    99,   312,     0,     0,     0,     0,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,     0,     0,     0,     0,
  1225,  1284,     0,  1285,     0,     0,     0,     0,   131,   132,
   133,   134,     0,     0,   588,    28,    29,   589,   590,    32,
   591,    34,     0,    35,     0,    37,    38,    39,     0,    41,
    42,     0,     0,     0,     0,    44,     0,     0,   131,   132,
   133,   134,   327,   328,   329,   330,   331,    55,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,   510,     0,  1283,     0,   131,   132,
   133,   134,     0,     0,  1293,     0,     0,     0,   139,   140,
    59,    60,    61,     0,   141,     0,     0,     0,     0,   144,
     0,     0,   789,  1312,   147,     0,   790,     0,    71,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   139,   140,
     0,     0,     0,     0,   141,     0,     0,     0,     0,   144,
     0,     0,   954,     0,   147,     0,   955,     0,     0,     0,
     0,  1348,     0,     0,     0,     0,     0,     0,  1451,  1452,
     0,     0,     0,     0,   141,     0,     0,     0,     0,  1453,
     0,    99,   100,   101,   147,   102,   185,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,     0,   127,   128,   129,    99,   353,   130,     0,     0,
   598,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,     0,     0,
     0,     0,   354,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,    45,    46,    47,    48,    49,    50,
  1449,     0,  1450,     0,     0,     0,     0,    56,    57,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,   131,   132,   133,   134,   341,
     0,   542,   588,    28,    29,   589,   590,    32,   591,    34,
     0,    35,     0,    37,    38,    39,  1469,    41,    42,     0,
  1473,     0,     0,    44,     0,     0,     0,     0,     0,   131,
   132,   133,   134,     0,     0,    55,  1489,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   135,   136,   137,   138,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,   140,     0,    59,    60,
    61,   141,   142,   143,     0,     0,   144,     0,   145,     0,
   146,   147,     0,     0,     0,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
   512,     0,     0,     0,     0,   141,     0,     0,     0,     0,
   144,    99,   312,   219,     0,   147,     0,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,     0,   127,   128,   129,     0,     0,   130,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1593,  1594,
  1595,     0,     0,     0,     0,     0,     0,  1600,     0,     0,
     0,     0,     0,     0,    99,   312,     0,     0,  1612,  1613,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,     0,     0,     0,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,  1656,  1657,  1658,   341,     0,     0,
     0,   516,     0,    99,   552,   131,   132,   133,   134,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   588,    28,    29,   589,   590,    32,   591,
    34,     0,    35,     0,    37,    38,    39,     0,    41,    42,
     0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
     0,     0,  1709,     0,     0,     0,    55,  1716,   131,   132,
   133,   134,     0,     0,     0,   139,   140,     0,     0,     0,
     0,   141,     0,     0,     0,     0,   144,     0,     0,     0,
     0,   147,     0,     0,     0,     0,     0,     0,     0,    59,
    60,    61,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,    71,     0,     0,
     0,     0,   341,     0,     0,     0,     0,   131,   132,   133,
   134,   803,     0,     0,     0,     0,     0,     0,   139,   140,
     0,     0,     0,     0,   141,     0,     0,     0,     0,   144,
     0,     0,     0,     0,   147,     0,     0,     0,     0,     0,
  1805,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1815,     0,     0,     0,    -7,     1,     0,   -12,   -55,     0,
     0,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,   139,   140,     0,
     0,   341,     0,   141,     0,     0,     0,   -55,   144,   615,
   804,   -55,   -55,   147,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,     0,     0,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,     0,   -55,
   -55,     0,     0,     0,   327,   328,   329,   330,   331,  1890,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,     0,     0,     0,   -55,
   -55,   -55,   -55,   812,     0,     0,     0,   -55,     0,   -55,
     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   588,    28,    29,   589,   590,    32,   591,    34,     0,
    35,     0,    37,    38,    39,     0,    41,    42,  1943,     0,
     0,     0,    44,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
   -12,     0,     0,     0,    55,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    -7,    -7,
     0,    -7,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,    59,    60,    61,
     0,  1997,   341,     0,   543,   588,    28,    29,   589,   590,
    32,   591,    34,     0,    35,    71,    37,    38,    39,     0,
    41,    42,     0,     0,     0,     0,    44,     0,     0,     0,
     0,     0,     0,   327,   328,   329,   330,   331,    55,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   227,     0,
     0,     0,     0,   341,  2042,     0,     0,     0,     0,     0,
     0,     0,   953,     0,     0,     0,     0,     0,     0,     0,
     0,    59,    60,    61,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,    71,
     0,     0,  2080,     0,   341,     0,     0,     0,     0,     0,
     0,     0,     0,   979,     0,     0,     0,   616,   656,   657,
   658,   659,   660,   661,   662,   663,   664,   665,   666,   667,
   668,   669,   670,   671,   672,   673,   674,   675,   676,   677,
   678,   679,   680,   681,   682,   683,   228,   229,   230,     0,
     0,     0,     0,     0,   231,   232,   233,   234,   235,   236,
   237,   238,   239,   240,    23,     0,     0,     0,     0,     0,
     0,     0,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,     0,   251,   252,   253,   254,   255,   256,     0,
     0,   840,     0,    24,     0,     0,     0,    25,    26,     0,
    27,    28,    29,    30,    31,    32,    33,    34,     0,    35,
    36,    37,    38,    39,    40,    41,    42,     0,     0,     0,
    43,    44,    45,    46,    47,    48,    49,    50,     0,    51,
    52,    53,    54,    55,     0,    56,    57,     0,     0,     0,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,  1045,     0,     0,
   341,     0,     0,     0,     0,    58,    59,    60,    61,  1259,
     0,     0,     0,    62,     0,    63,     0,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,     0,
     0,   327,   328,   329,   330,   331,  1471,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,     0,     0,   327,   328,   329,   330,   331,
  1472,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   327,
   328,   329,   330,   331,  1528,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,     0,     0,   327,   328,   329,   330,   331,  1529,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,     0,     0,   327,   328,   329,
   330,   331,  1533,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,     0,
     0,   327,   328,   329,   330,   331,  1539,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,     0,     0,   327,   328,   329,   330,   331,
  1542,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   327,
   328,   329,   330,   331,  1545,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,     0,     0,   327,   328,   329,   330,   331,  1546,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,     0,     0,   327,   328,   329,
   330,   331,  1596,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,     0,
     0,   327,   328,   329,   330,   331,  1660,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,     0,     0,   327,   328,   329,   330,   331,
  1663,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   327,
   328,   329,   330,   331,  1665,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,     0,     0,   327,   328,   329,   330,   331,  1701,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,     0,     0,   327,   328,   329,
   330,   331,  1915,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,     0,
     0,   327,   328,   329,   330,   331,  1969,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   510,     0,     0,     0,     0,   574,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,   574,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,   575,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
   609,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,   735,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,   736,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,   749,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,   750,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
   751,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,   752,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,   753,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,   754,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,   819,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
   820,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,   821,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,   943,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,   977,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,   978,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1000,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1147,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1148,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1162,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1163,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1194,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1195,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1196,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1197,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1198,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1199,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1200,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1201,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1202,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1203,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1204,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1205,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1206,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1207,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1208,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1209,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1210,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1211,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1212,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1213,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1214,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1215,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1216,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1217,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1218,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1219,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1234,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1241,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1364,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1369,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1370,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1380,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1381,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1389,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1392,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1403,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1408,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1411,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1413,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1414,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1415,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1416,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1417,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1418,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1419,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1420,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1421,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1422,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1423,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1424,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1425,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1426,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1427,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1428,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1429,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1430,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1431,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1432,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1433,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1434,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1435,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1436,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1437,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1438,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1443,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1444,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1555,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1567,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1568,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1569,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1570,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1571,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1572,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1573,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1574,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1575,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1576,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1577,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1578,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1579,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1580,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1581,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1582,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1583,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1584,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1585,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1586,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1587,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1589,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1591,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1678,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1679,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1680,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1681,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1682,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1683,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1684,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1685,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1686,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1687,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1688,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1689,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1690,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1691,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1692,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1693,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1694,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1695,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1696,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1697,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1698,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1778,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1779,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1780,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1781,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1782,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1783,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1784,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1785,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1786,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1787,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1788,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1789,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1790,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1791,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1792,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1793,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1794,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1795,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1796,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1797,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1798,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1855,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1862,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1863,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1864,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1865,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1866,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1867,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1868,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1869,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1870,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1871,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1872,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1873,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1874,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1875,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1876,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1877,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1878,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1879,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1914,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1922,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1923,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1924,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1925,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1926,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1927,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1928,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1929,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1930,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1931,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1932,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1933,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1934,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1935,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1936,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1937,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1938,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1939,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1978,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1979,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1980,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1981,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1982,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1983,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1984,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1985,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1986,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1987,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1988,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1989,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1990,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  1991,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  1992,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  1993,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  1994,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  1995,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2027,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2028,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2029,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2030,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2031,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2032,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2033,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2034,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2035,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2036,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2037,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2038,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2039,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2040,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2041,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2065,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2066,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2067,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2068,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2069,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2070,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2071,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2072,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2073,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2074,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2075,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2076,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2077,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2078,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2079,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2109,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2110,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2111,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2112,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2113,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2114,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2115,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2116,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2117,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2118,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2119,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2120,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2121,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2122,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2123,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2153,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2154,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2155,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2156,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2157,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2158,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2159,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2160,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2161,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2184,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2185,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2186,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2187,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2188,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2189,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2190,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2191,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2192,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2226,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2227,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2228,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2229,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2230,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2231,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2232,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2233,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2234,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2256,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2257,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2258,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2259,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2260,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2261,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2274,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2275,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2276,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2277,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2278,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2279,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2295,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2296,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2297,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2298,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2299,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2300,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2319,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2320,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2321,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2332,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2333,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2346,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2347,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2348,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2364,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2365,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2366,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2370,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   327,   328,   329,
   330,   331,  2371,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   327,
   328,   329,   330,   331,  2372,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   327,   328,   329,   330,   331,  2376,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   327,   328,   329,   330,   331,  2377,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   327,   328,   329,   330,   331,
  2378,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   653,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   714,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   716,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   718,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   720,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   722,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   724,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   726,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   728,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   730,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   732,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   734,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   738,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   740,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   742,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   744,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   746,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   748,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   822,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   828,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   831,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,   832,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,   924,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,  1077,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,  1079,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,  1081,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,  1083,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,     0,     0,  1084,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,     0,     0,  1232,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,   544,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   546,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,   548,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   549,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,   557,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   603,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
   604,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   607,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,   613,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   713,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,   715,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   717,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,   719,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   721,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,   723,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   725,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
   727,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   729,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,   731,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   733,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,   737,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   739,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,   741,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   743,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,   745,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   747,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
   784,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   786,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,   799,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,   800,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,   801,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,   805,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,   806,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,   807,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,   808,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,   809,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
   811,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,   836,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,   843,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,  1076,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,  1078,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,  1080,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,  1082,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,  1088,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,  1151,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,  1260,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
  1288,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,  1398,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,  1402,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,  1404,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,  1527,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,  1558,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,  1560,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,  1562,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,  1564,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,  1565,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
  1566,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,  1588,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,  1700,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,  1859,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,  1860,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,  1861,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,  2024,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,  2025,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,  2026,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,  2147,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
  2148,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,  2149,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,  2150,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,  2151,
   327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
   336,   337,   338,   339,   340,     0,     0,     0,     0,     0,
   341,     0,  2152,   327,   328,   329,   330,   331,     0,   332,
   333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     0,     0,     0,   341,     0,  2262,   327,   328,   329,   330,
   331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
   340,     0,     0,     0,     0,     0,   341,     0,  2263,   327,
   328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
   337,   338,   339,   340,     0,     0,     0,     0,     0,   341,
     0,  2264,   327,   328,   329,   330,   331,     0,   332,   333,
   334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     0,     0,   341,     0,  2322,   327,   328,   329,   330,   331,
     0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     0,     0,     0,     0,     0,   341,     0,  2323,   327,   328,
   329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
   338,   339,   340,     0,     0,     0,     0,     0,   341,     0,
  2324,   327,   328,   329,   330,   331,     0,   332,   333,   334,
   335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     0,   341,     0,  2382,   327,   328,   329,   330,   331,     0,
   332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     0,     0,     0,     0,   341,     0,  2383,   327,   328,   329,
   330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
   339,   340,     0,     0,     0,     0,     0,   341,     0,  2384
};

static const short yycheck[] = {    23,
    97,   387,    72,    73,    23,     4,   320,     4,   356,   774,
  1377,   194,  1379,     4,   197,     4,     4,     7,     4,     4,
    68,     5,     3,     6,  1152,  1153,    68,     6,    68,     4,
     7,     6,     4,    44,     5,  1279,     4,   220,    69,   222,
    69,    69,     4,    74,    69,    74,    74,     6,     6,    74,
    34,    35,    36,    69,    69,    39,    69,    69,    74,    74,
  1169,    74,    74,    34,    35,    36,    69,   318,    39,  1178,
  1458,    74,   110,   208,  1462,   210,  1185,  1465,   197,   198,
     5,   208,   197,   198,   208,   197,   198,     6,   215,   197,
   198,   215,    51,    51,     6,   226,   215,     4,     5,   214,
    40,   216,   214,    43,   216,   356,   214,     6,   216,    34,
    35,    36,   197,   198,    39,   139,   140,   141,   197,   198,
   144,   145,   178,   208,   148,     5,     7,    34,    35,    36,
   215,   155,    39,   157,   158,   159,   215,   161,   209,   163,
   164,     6,   166,   214,     6,   113,   114,     6,  1392,   204,
   205,   113,   114,     6,    34,    35,    36,   212,     7,    39,
   184,   185,   197,   198,   197,   198,   208,   215,   208,    69,
   208,   936,   208,   215,    74,   214,   209,   216,   208,   215,
   215,   205,   206,     7,   208,   216,   210,   216,   216,   213,
   214,   216,   540,   183,   184,   185,   186,   208,     6,     7,
   216,   216,   516,   216,   216,   553,   183,   184,   185,   186,
   208,     6,   210,   216,   204,   205,   208,   198,   197,   198,
     6,  1349,   212,   215,   215,    68,   215,   215,   411,   215,
   215,   215,   215,   204,   205,   210,   208,   261,   308,   309,
   310,   212,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,  1393,   197,   198,   208,  1397,   540,
   215,   422,  1659,   208,   318,  1662,    48,  1664,   197,   198,
   208,   320,   553,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,  1706,   208,
     3,   210,  1710,   208,   348,  1713,   350,   197,   198,   204,
   205,   355,   356,  1098,   183,   184,   185,   186,    58,    59,
   364,   365,   366,   367,   214,   369,   370,   371,   372,   373,
   374,   375,   208,   377,   378,   204,   205,   197,   198,   183,
   184,   185,   186,   197,   198,   389,   390,   391,   392,   197,
   198,   209,   208,   397,   214,   209,   214,   401,   402,   209,
   204,   205,   208,   407,   214,   208,   214,   386,   387,   386,
   387,  1758,   416,   174,   175,  1762,   177,  1764,   190,   191,
    44,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   758,   204,   205,     8,   208,   207,  1804,   210,    44,   212,
  1808,   209,  1810,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,   197,   198,   197,   198,
   459,   207,   790,  1552,  1553,  1554,  1555,   517,     6,   209,
  1559,   209,    44,   214,   214,   214,   214,   197,   198,   208,
    44,   210,   197,   198,   208,     8,   149,   150,   151,   152,
   153,   154,   155,   156,   214,   823,   824,   825,   826,   214,
    46,    46,    47,   197,   198,   509,     6,    44,   512,   197,
   198,   208,   215,   210,   518,   204,   205,   516,    44,    57,
   214,   210,   208,   212,   210,   215,   214,   758,     6,    62,
    63,    64,    65,   764,    67,    40,   540,   541,    43,    44,
     6,    46,    75,    76,     6,     7,   550,   551,   208,   553,
   210,   555,   556,   134,   135,   136,   137,   138,   562,   790,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    40,
   574,   575,    43,    44,   207,     6,     4,   204,   205,   583,
  1669,  1670,     4,   210,  1673,   212,   197,   198,   199,   200,
   201,   595,   823,   824,   825,   826,   207,     4,   199,   200,
   201,    43,    44,   653,    46,   609,   207,   611,   612,   208,
   208,  1356,   187,   188,   189,   190,   191,   208,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   955,   208,   208,
   210,   210,   207,     4,   928,   929,   181,     4,   183,   204,
   205,   216,    44,     5,   189,   210,   208,   212,   210,   187,
   188,   189,   190,   191,   653,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   187,   188,   189,   190,   191,   207,
   193,   194,   195,   196,   197,   198,   199,   200,   201,  1768,
   208,   208,   210,   210,   207,     4,   209,   187,   188,   189,
   190,   191,   208,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   208,   210,   210,   212,   208,   207,   210,   759,
   208,   208,   210,   210,   208,   208,   210,   210,   208,   264,
   210,   208,   208,   210,   955,     6,   208,     6,   210,   208,
     6,   735,   736,   214,   214,   216,   216,   214,   214,   216,
   216,   214,   214,   216,   216,   749,   750,   751,   752,   753,
   754,   755,   208,     6,   758,   208,   214,   761,   216,   214,
   764,   216,   214,   767,   216,   214,     4,   216,  1857,   214,
  1136,   216,     5,   777,   214,     6,   216,   214,   214,   216,
   216,   214,   214,   216,   216,   214,   790,   216,   792,   214,
   214,   216,   216,   214,   214,   216,   216,   214,     6,   216,
   877,   215,   208,   187,   188,   189,   190,   191,   208,   193,
   194,   195,   196,   197,   198,   199,   200,   201,   208,   823,
   824,   825,   826,   207,   215,   829,   830,   215,   215,  1918,
   214,   835,   216,   214,   214,   216,   216,   215,   208,   384,
   385,   215,   846,   847,     8,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   214,   214,   216,   216,   208,   882,   883,
   884,   885,   886,   887,   888,   889,   890,   891,   892,   893,
   894,   895,   896,   897,   898,   899,   900,   901,   902,   903,
   904,   905,   906,   907,   208,   909,   187,   188,   189,   190,
   191,   208,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   214,   214,   216,   216,   924,   207,   214,   208,   216,
   929,   208,   210,   937,   187,   188,   189,   190,   191,   943,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   208,
   214,   955,   216,   957,   207,   959,   187,   188,   189,   190,
   191,   210,   193,   194,   195,   196,   197,   198,   199,   200,
   201,     6,   976,   977,   978,   214,   207,   216,   212,   187,
   188,   189,   190,   191,   216,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   210,   215,  1000,  1001,  1002,   207,
   214,   214,   216,   216,   214,  1371,   216,   214,   214,   216,
   216,   116,   214,  2102,   216,   214,   214,   216,   216,   214,
     6,   216,   208,   187,   188,   189,   190,   191,   573,   193,
   194,   195,   196,   197,   198,   199,   200,   201,     6,     6,
  1090,     3,   208,   207,  1043,   208,     3,     4,   208,  1160,
   208,   208,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   208,   208,   208,   208,
  1130,   208,   208,    40,   208,   208,   208,  1091,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,     6,   208,    62,    63,    64,    65,    66,
    67,     5,   214,   209,  1191,  1119,  1120,  1121,    75,    76,
   214,     4,   207,     5,   212,   215,  1130,  1131,  1132,     7,
     7,   210,     7,     7,   209,     6,   111,     7,     7,   113,
     5,   215,     5,  1147,  1148,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,  1159,     5,  1136,  1162,  1136,
     5,     5,     5,     5,     5,     5,     5,     5,  1172,     5,
   127,   128,   129,   130,     5,  1179,  1180,  1181,   167,  1290,
     5,     5,  1186,     5,     5,     3,  1190,     6,     5,     5,
  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,
  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,  1217,  1218,  1219,     5,   214,  1222,   209,
   214,     6,     4,   211,     7,     6,   208,     7,     7,     7,
  1234,     7,     7,     7,   212,   216,   781,  1241,     7,   216,
   197,   198,   215,   215,     7,     7,   203,   212,   179,     5,
   214,   208,   208,   214,   214,   214,   213,  1261,   215,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,     6,
   214,   214,   214,   214,   819,   820,   821,   214,   214,  1390,
  1284,   214,  1286,   209,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,     6,
   214,   214,   214,   848,   207,   214,   214,   214,   214,   214,
   214,   208,   857,   208,   215,   208,   208,     3,     4,   208,
   208,   208,   208,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   208,   215,     6,
     4,     6,   112,     6,     6,     3,     7,     6,   208,     6,
  1364,   208,   208,   211,     7,  1369,  1370,     7,     7,     7,
  1374,   208,  1376,   208,  1378,   208,  1380,  1381,   208,   208,
   208,   208,  1386,   215,   210,   208,     7,     7,   208,     7,
     7,  1395,  1371,   208,  1371,   208,   208,   208,     7,  1403,
     7,     7,     7,     7,  1408,     4,     7,  1411,     6,  1413,
  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,
  1424,  1425,  1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,
  1434,  1435,  1436,  1437,  1438,     7,     6,     6,     6,  1443,
  1551,   127,   128,   129,   130,  1449,     6,  1451,  1452,  1453,
   187,   188,   189,   190,   191,     7,   193,   194,   195,   196,
   197,   198,   199,   200,   201,   187,   188,   189,   190,   191,
   207,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   187,   188,   189,   190,   191,   207,   193,   194,   195,   196,
   197,   198,   199,   200,   201,     4,     7,   180,     3,     3,
   207,   199,     3,     3,  1615,     3,     3,     3,     3,     3,
     3,   197,   198,     3,     3,     3,   209,   203,     5,     5,
     3,     3,   208,     4,   209,   211,     6,   213,     6,   215,
  1534,   212,     7,     6,     6,     6,  1540,     6,   208,  1543,
   187,   188,   189,   190,   191,     6,   193,   194,   195,   196,
   197,   198,   199,   200,   201,   215,   215,  1668,     6,  1104,
   207,  1106,   176,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,
  1584,  1585,  1586,  1587,   215,  1589,   215,  1591,   214,   214,
   209,   214,  1137,   209,  1139,     6,  1141,   209,     6,   214,
     4,   214,     7,   214,   214,     6,   209,   209,     6,   209,
     6,     6,   209,     6,     6,   211,   165,   187,   188,   189,
   190,   191,   171,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   214,   214,   214,   214,   214,   207,   214,   214,
   214,   214,     6,   214,     6,     6,   195,   214,   214,  1699,
   214,   200,   201,   212,     6,     8,  1767,     6,     6,     6,
     6,     6,     6,     6,     6,     6,     6,     6,   112,     3,
     6,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
  1684,  1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,
  1694,  1695,  1696,  1697,  1698,     3,     6,     8,   215,     3,
     4,     6,  1813,     6,     3,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   199,
   187,   188,   189,   190,   191,     6,   193,   194,   195,   196,
   197,   198,   199,   200,   201,  1856,     3,     6,     6,  1799,
   207,  1801,     6,     3,     3,     3,     3,     8,   212,   216,
     6,     6,  1766,     4,     6,   211,     6,     6,  1772,     7,
  1774,     6,  1776,   215,  1778,  1779,  1780,  1781,  1782,  1783,
  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,
  1794,  1795,  1796,  1797,  1798,   187,   188,   189,   190,   191,
   216,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   112,   109,   215,     8,   214,   207,   215,   114,   215,   209,
   209,   215,     6,   127,   128,   129,   130,   214,   214,  1374,
  1880,  1376,   214,  1378,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   209,
  1854,  1855,   209,   209,   207,   214,   214,     3,  1862,  1863,
  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,  1877,  1878,  1879,   187,   188,   189,   190,
   191,   209,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   209,   214,   197,   198,   209,   207,     6,     6,   203,
     3,     6,     6,     5,   208,     6,     6,  1452,     6,   213,
  1914,   215,     6,     3,     6,  1919,  1920,  1921,  1922,  1923,
  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,
  1934,  1935,  1936,  1937,  1938,  1939,   187,   188,   189,   190,
   191,     6,   193,   194,   195,   196,   197,   198,   199,   200,
   201,     5,   216,     6,   215,   215,   207,   176,   214,     6,
     6,   216,   511,     6,     6,   209,     6,     6,  1972,     6,
  1974,   214,  1976,   209,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,
  1994,  1995,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   214,   214,   209,
   214,   214,   207,     6,     6,     6,     6,     6,     6,     6,
     6,     6,     5,  2027,  2028,  2029,  2030,  2031,  2032,  2033,
  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,     5,   215,
   214,   216,   215,   215,   214,   214,   214,   209,   209,   214,
   214,     6,   215,     6,     6,   215,   215,   215,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,
  2074,  2075,  2076,  2077,  2078,  2079,   214,   187,   188,   189,
   190,   191,     6,   193,   194,   195,   196,   197,   198,   199,
   200,   201,     6,   109,     6,     6,     6,   207,     5,  2103,
     6,  2105,     5,  2107,   214,  2109,  2110,  2111,  2112,  2113,
  2114,  2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,
   215,   176,   215,   209,   215,   209,   215,    40,    41,    42,
    43,    44,    45,    46,    47,   216,    49,   214,    51,    52,
    53,   214,    55,    56,   215,     6,   216,     6,    61,  2153,
  2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,     6,     6,
    73,   109,     6,     6,     6,     6,     6,     6,     6,     6,
   214,   216,     6,   214,  2178,  2179,  2180,  2181,  2182,  2183,
  2184,  2185,  2186,  2187,  2188,  2189,  2190,  2191,  2192,   215,
     6,     6,     6,   106,   107,   108,   214,   181,   215,   214,
     6,   215,   215,   182,   214,   209,     6,     6,     6,     6,
  2214,   124,  2216,     6,  2218,   214,  2220,   214,  2222,   215,
  2224,   215,  2226,  2227,  2228,  2229,  2230,  2231,  2232,  2233,
  2234,     6,   214,   782,   783,   215,   785,     6,   787,   788,
     6,   209,     6,   215,   215,   215,   215,     6,     6,   215,
   215,     6,  2256,  2257,  2258,  2259,  2260,  2261,     6,     6,
     6,   215,     6,     6,   215,   215,     6,     6,   215,   215,
  2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,  2282,   215,
     6,     6,   215,   215,   833,   834,   215,     6,   837,     6,
     6,  2295,  2296,  2297,  2298,  2299,  2300,  2301,     0,  2303,
     0,  2305,  1094,   216,   655,   854,   855,     4,     4,    -1,
    -1,   860,   861,    -1,    -1,  2319,  2320,  2321,   867,    -1,
   869,    -1,    -1,    -1,    -1,    -1,    -1,  2331,  2332,  2333,
  2334,  2335,  2336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  2346,  2347,  2348,  2349,    -1,  2351,    -1,  2353,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  2364,  2365,  2366,    -1,    -1,    -1,  2370,  2371,  2372,    -1,
    -1,    -1,  2376,  2377,  2378,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  2388,  2389,  2390,    -1,    -1,    -1,
    -1,    -1,    -1,  2397,    -1,  2399,    -1,  2401,   947,    -1,
   949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   960,   961,   962,    -1,    -1,    -1,   966,   967,   968,
   969,   970,   971,   972,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,
  1089,   214,    -1,   216,    -1,    -1,    -1,    -1,   127,   128,
   129,   130,    -1,    -1,    40,    41,    42,    43,    44,    45,
    46,    47,    -1,    49,    -1,    51,    52,    53,    -1,    55,
    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,   127,   128,
   129,   130,   187,   188,   189,   190,   191,    73,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,    -1,  1155,    -1,   127,   128,
   129,   130,    -1,    -1,  1163,    -1,    -1,    -1,   197,   198,
   106,   107,   108,    -1,   203,    -1,    -1,    -1,    -1,   208,
    -1,    -1,   211,  1182,   213,    -1,   215,    -1,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,   198,
    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,
    -1,    -1,   211,    -1,   213,    -1,   215,    -1,    -1,    -1,
    -1,  1220,    -1,    -1,    -1,    -1,    -1,    -1,   197,   198,
    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,
    -1,     3,     4,     5,   213,     7,   215,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,     3,     4,    39,    -1,    -1,
   216,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    40,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    62,    63,    64,    65,    66,    67,
   214,    -1,   216,    -1,    -1,    -1,    -1,    75,    76,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,   127,   128,   129,   130,   207,
    -1,   209,    40,    41,    42,    43,    44,    45,    46,    47,
    -1,    49,    -1,    51,    52,    53,  1385,    55,    56,    -1,
  1389,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,   127,
   128,   129,   130,    -1,    -1,    73,  1405,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   183,   184,   185,   186,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   197,   198,    -1,   106,   107,
   108,   203,   204,   205,    -1,    -1,   208,    -1,   210,    -1,
   212,   213,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,
   198,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,
   208,     3,     4,     5,    -1,   213,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,    -1,    -1,    39,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1527,  1528,
  1529,    -1,    -1,    -1,    -1,    -1,    -1,  1536,    -1,    -1,
    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,  1547,  1548,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    -1,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,  1593,  1594,  1595,   207,    -1,    -1,
    -1,   211,    -1,     3,     4,   127,   128,   129,   130,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    49,    -1,    51,    52,    53,    -1,    55,    56,
    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1661,    -1,    -1,    -1,    73,  1666,   127,   128,
   129,   130,    -1,    -1,    -1,   197,   198,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,
    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
   107,   108,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   124,    -1,    -1,
    -1,    -1,   207,    -1,    -1,    -1,    -1,   127,   128,   129,
   130,   216,    -1,    -1,    -1,    -1,    -1,    -1,   197,   198,
    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,
    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,
  1759,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1769,    -1,    -1,    -1,     0,     1,    -1,     3,     4,    -1,
    -1,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,   197,   198,    -1,
    -1,   207,    -1,   203,    -1,    -1,    -1,    33,   208,   216,
   216,    37,    38,   213,    40,    41,    42,    43,    44,    45,
    46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
    76,    -1,    -1,    -1,   187,   188,   189,   190,   191,  1858,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,   105,
   106,   107,   108,   216,    -1,    -1,    -1,   113,    -1,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
    49,    -1,    51,    52,    53,    -1,    55,    56,  1917,    -1,
    -1,    -1,    61,   149,   150,   151,   152,   153,   154,   155,
   156,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,
    -1,   177,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   106,   107,   108,
    -1,  1970,   207,    -1,   209,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,    49,   124,    51,    52,    53,    -1,
    55,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
    -1,    -1,    -1,   187,   188,   189,   190,   191,    73,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    43,    -1,
    -1,    -1,    -1,   207,  2023,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   106,   107,   108,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   124,
    -1,    -1,  2061,    -1,   207,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   216,    -1,    -1,    -1,   216,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   131,   132,   133,    -1,
    -1,    -1,    -1,    -1,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,     4,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
    -1,   216,    -1,    33,    -1,    -1,    -1,    37,    38,    -1,
    40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
    50,    51,    52,    53,    54,    55,    56,    -1,    -1,    -1,
    60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
    70,    71,    72,    73,    -1,    75,    76,    -1,    -1,    -1,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,   216,    -1,    -1,
   207,    -1,    -1,    -1,    -1,   105,   106,   107,   108,   216,
    -1,    -1,    -1,   113,    -1,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,
    -1,   187,   188,   189,   190,   191,   216,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,    -1,    -1,   187,   188,   189,   190,   191,
   216,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,
   188,   189,   190,   191,   216,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,    -1,    -1,   187,   188,   189,   190,   191,   216,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,   188,   189,
   190,   191,   216,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,
    -1,   187,   188,   189,   190,   191,   216,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,    -1,    -1,   187,   188,   189,   190,   191,
   216,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,
   188,   189,   190,   191,   216,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,    -1,    -1,   187,   188,   189,   190,   191,   216,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,   188,   189,
   190,   191,   216,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,
    -1,   187,   188,   189,   190,   191,   216,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,    -1,    -1,   187,   188,   189,   190,   191,
   216,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,
   188,   189,   190,   191,   216,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,    -1,    -1,   187,   188,   189,   190,   191,   216,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,   188,   189,
   190,   191,   216,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,
    -1,   187,   188,   189,   190,   191,   216,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,    -1,    -1,    -1,    -1,   214,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,
   190,   191,   214,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   187,   188,   189,   190,   191,   214,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   187,   188,   189,   190,   191,   214,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,
   214,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   211,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 166 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 172 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 173 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 183 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STLStartSolid();
      return 1;
    ;
    break;}
case 10:
#line 196 "Gmsh.y"
{
      STLAddFacet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d,
		  yyvsp[-18].d, yyvsp[-17].d, yyvsp[-16].d);
      return 1;
    ;
    break;}
case 11:
#line 202 "Gmsh.y"
{
      STLEndSolid();
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 223 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 228 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 233 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 244 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 247 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 251 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 257 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 263 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 270 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 276 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 280 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 284 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 291 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 295 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 300 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 304 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 312 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 316 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 320 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 324 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 328 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 340 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 344 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 348 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 352 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 356 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 375 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 397 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 398 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 402 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 411 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 416 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 434 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 441 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 451 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 489 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 491 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 496 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 501 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 508 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 510 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 515 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 521 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 529 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 531 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 536 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 542 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 550 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 552 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 558 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 565 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 573 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 575 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 581 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 588 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 596 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 598 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 604 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 611 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 619 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 621 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 628 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 638 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 646 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 648 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 655 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 665 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 673 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 675 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 682 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 692 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 700 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 702 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 710 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 720 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 728 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 730 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 738 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 748 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 756 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 758 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 766 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 776 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 784 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 786 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 794 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 804 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 812 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 814 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 822 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 832 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 840 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 842 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 850 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 860 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 868 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 870 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 882 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 898 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 906 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 908 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 920 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 936 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 944 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 946 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 958 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 974 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 982 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 984 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 994 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1007 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1015 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1017 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1027 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1040 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1048 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1050 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1060 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1073 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1081 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1083 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1092 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1105 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1113 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1115 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1124 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1137 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1145 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1147 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1156 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1169 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1177 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1182 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1190 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1197 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1204 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1209 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1217 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1224 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1232 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1239 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1241 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1246 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1253 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1254 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1255 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1256 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1257 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1261 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1262 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1270 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 220:
#line 1301 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 221:
#line 1340 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1394 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1411 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 224:
#line 1422 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 225:
#line 1441 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 226:
#line 1455 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 227:
#line 1472 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 228:
#line 1498 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1525 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 230:
#line 1539 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 231:
#line 1556 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 232:
#line 1570 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 233:
#line 1587 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1607 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1630 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1640 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 237:
#line 1659 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1675 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1691 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1710 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1729 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1747 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1765 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1783 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1809 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1827 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1854 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1873 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1897 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1921 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1947 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1964 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 253:
#line 1982 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 2001 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2020 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2059 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2085 "Gmsh.y"
{
      // define a new surface
      int num = (int)yyvsp[-10].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	s->Support = s;
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      yyval.s.Type = MSH_SURF_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2105 "Gmsh.y"
{
      // add a poly rep to an existing surface
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2124 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2142 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2161 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2178 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2194 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2214 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2231 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2248 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 267:
#line 2269 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 268:
#line 2274 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 269:
#line 2279 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2284 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 271:
#line 2291 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 272:
#line 2292 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 273:
#line 2293 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 274:
#line 2298 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 275:
#line 2302 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 276:
#line 2306 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 277:
#line 2322 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 278:
#line 2338 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2354 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 280:
#line 2375 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 281:
#line 2389 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 282:
#line 2395 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 283:
#line 2401 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 284:
#line 2413 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 285:
#line 2422 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 286:
#line 2432 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 287:
#line 2442 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 288:
#line 2461 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 289:
#line 2475 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2483 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 291:
#line 2489 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 292:
#line 2500 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 293:
#line 2514 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2558 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 295:
#line 2573 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 296:
#line 2589 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 297:
#line 2599 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 298:
#line 2610 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 299:
#line 2614 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 300:
#line 2618 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 301:
#line 2622 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 302:
#line 2635 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 303:
#line 2650 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 304:
#line 2666 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 305:
#line 2692 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 306:
#line 2719 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 307:
#line 2751 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 308:
#line 2758 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 309:
#line 2763 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 310:
#line 2769 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 311:
#line 2773 "Gmsh.y"
{
    ;
    break;}
case 312:
#line 2784 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 313:
#line 2800 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 314:
#line 2816 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 315:
#line 2832 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 316:
#line 2837 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 317:
#line 2853 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2858 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2874 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 320:
#line 2879 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2897 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 322:
#line 2920 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 2943 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 324:
#line 2966 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 325:
#line 2971 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 326:
#line 2994 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 327:
#line 2999 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3022 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 329:
#line 3027 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3053 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 331:
#line 3076 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 332:
#line 3099 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 333:
#line 3122 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 334:
#line 3127 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 335:
#line 3150 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 336:
#line 3156 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 337:
#line 3179 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 338:
#line 3185 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 339:
#line 3211 "Gmsh.y"
{
    ;
    break;}
case 340:
#line 3214 "Gmsh.y"
{
    ;
    break;}
case 341:
#line 3220 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 342:
#line 3246 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 343:
#line 3270 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 344:
#line 3279 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 345:
#line 3297 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 346:
#line 3315 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 347:
#line 3333 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 348:
#line 3360 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 349:
#line 3386 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 350:
#line 3412 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 351:
#line 3426 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 352:
#line 3445 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 353:
#line 3449 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 354:
#line 3458 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 355:
#line 3459 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 356:
#line 3460 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 357:
#line 3461 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 358:
#line 3462 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 359:
#line 3466 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 360:
#line 3467 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 361:
#line 3468 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 362:
#line 3469 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 363:
#line 3470 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 364:
#line 3471 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 365:
#line 3472 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 366:
#line 3473 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 367:
#line 3475 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 368:
#line 3481 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 369:
#line 3482 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 370:
#line 3483 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 371:
#line 3484 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 372:
#line 3485 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 373:
#line 3486 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 374:
#line 3487 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 375:
#line 3488 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 376:
#line 3489 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 377:
#line 3490 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 378:
#line 3491 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 379:
#line 3492 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 380:
#line 3493 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 381:
#line 3494 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 382:
#line 3495 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 383:
#line 3496 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 384:
#line 3497 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 385:
#line 3498 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 386:
#line 3499 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 387:
#line 3500 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 388:
#line 3501 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3502 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 390:
#line 3503 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3504 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 392:
#line 3505 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3506 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 394:
#line 3507 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 395:
#line 3508 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 396:
#line 3509 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 397:
#line 3510 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 398:
#line 3511 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 399:
#line 3512 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 400:
#line 3514 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 401:
#line 3515 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 402:
#line 3516 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 403:
#line 3517 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 404:
#line 3518 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 405:
#line 3519 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 406:
#line 3520 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 407:
#line 3521 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 408:
#line 3522 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 409:
#line 3523 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3524 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 411:
#line 3525 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3526 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 413:
#line 3527 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 414:
#line 3528 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 415:
#line 3529 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 416:
#line 3530 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 417:
#line 3531 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 418:
#line 3532 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 419:
#line 3533 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 420:
#line 3534 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 421:
#line 3543 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 422:
#line 3544 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 423:
#line 3545 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 424:
#line 3546 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 425:
#line 3547 "Gmsh.y"
{ yyval.d = GMSH_MAJOR_VERSION; ;
    break;}
case 426:
#line 3548 "Gmsh.y"
{ yyval.d = GMSH_MINOR_VERSION; ;
    break;}
case 427:
#line 3549 "Gmsh.y"
{ yyval.d = GMSH_PATCH_VERSION; ;
    break;}
case 428:
#line 3554 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 429:
#line 3567 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 430:
#line 3587 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 431:
#line 3601 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 432:
#line 3614 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 433:
#line 3637 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 434:
#line 3655 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 435:
#line 3673 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 436:
#line 3691 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 437:
#line 3709 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 438:
#line 3717 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 439:
#line 3721 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 440:
#line 3725 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 441:
#line 3729 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 442:
#line 3733 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 443:
#line 3740 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 444:
#line 3744 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 445:
#line 3748 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 446:
#line 3752 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 447:
#line 3759 "Gmsh.y"
{
    ;
    break;}
case 448:
#line 3762 "Gmsh.y"
{
    ;
    break;}
case 449:
#line 3768 "Gmsh.y"
{
    ;
    break;}
case 450:
#line 3771 "Gmsh.y"
{
    ;
    break;}
case 451:
#line 3777 "Gmsh.y"
{
    ;
    break;}
case 452:
#line 3780 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 453:
#line 3784 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 454:
#line 3791 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 455:
#line 3796 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 456:
#line 3804 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 457:
#line 3809 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 458:
#line 3813 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 459:
#line 3817 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 460:
#line 3829 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 461:
#line 3835 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 462:
#line 3846 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 463:
#line 3866 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 464:
#line 3876 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 465:
#line 3886 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 466:
#line 3898 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 467:
#line 3915 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 468:
#line 3934 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 469:
#line 3958 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 470:
#line 3987 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 471:
#line 3992 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 472:
#line 3996 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 473:
#line 4000 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 474:
#line 4013 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 475:
#line 4017 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 476:
#line 4029 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 477:
#line 4036 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 478:
#line 4058 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 479:
#line 4062 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 480:
#line 4077 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 481:
#line 4082 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 482:
#line 4089 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 483:
#line 4093 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 484:
#line 4101 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 485:
#line 4109 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 486:
#line 4123 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 487:
#line 4127 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 488:
#line 4146 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 489:
#line 4162 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4179 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
