
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipsis	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTransfinite	305
#define	tComplex	306
#define	tPhysical	307
#define	tUsing	308
#define	tBump	309
#define	tProgression	310
#define	tPlugin	311
#define	tRotate	312
#define	tTranslate	313
#define	tSymmetry	314
#define	tDilate	315
#define	tExtrude	316
#define	tDuplicata	317
#define	tLoop	318
#define	tRecombine	319
#define	tDelete	320
#define	tCoherence	321
#define	tIntersect	322
#define	tAttractor	323
#define	tLayers	324
#define	tScalarTetrahedron	325
#define	tVectorTetrahedron	326
#define	tTensorTetrahedron	327
#define	tScalarTriangle	328
#define	tVectorTriangle	329
#define	tTensorTriangle	330
#define	tScalarLine	331
#define	tVectorLine	332
#define	tTensorLine	333
#define	tScalarPoint	334
#define	tVectorPoint	335
#define	tTensorPoint	336
#define	tBSpline	337
#define	tBezier	338
#define	tNurbs	339
#define	tOrder	340
#define	tWith	341
#define	tBounds	342
#define	tKnots	343
#define	tColor	344
#define	tColorTable	345
#define	tFor	346
#define	tIn	347
#define	tEndFor	348
#define	tIf	349
#define	tEndIf	350
#define	tExit	351
#define	tReturn	352
#define	tCall	353
#define	tFunction	354
#define	tMesh	355
#define	tB_SPLINE_SURFACE_WITH_KNOTS	356
#define	tB_SPLINE_CURVE_WITH_KNOTS	357
#define	tCARTESIAN_POINT	358
#define	tTRUE	359
#define	tFALSE	360
#define	tUNSPECIFIED	361
#define	tU	362
#define	tV	363
#define	tEDGE_CURVE	364
#define	tVERTEX_POINT	365
#define	tORIENTED_EDGE	366
#define	tPLANE	367
#define	tFACE_OUTER_BOUND	368
#define	tEDGE_LOOP	369
#define	tADVANCED_FACE	370
#define	tVECTOR	371
#define	tDIRECTION	372
#define	tAXIS2_PLACEMENT_3D	373
#define	tISO	374
#define	tENDISO	375
#define	tENDSEC	376
#define	tDATA	377
#define	tHEADER	378
#define	tFILE_DESCRIPTION	379
#define	tFILE_SCHEMA	380
#define	tFILE_NAME	381
#define	tMANIFOLD_SOLID_BREP	382
#define	tCLOSED_SHELL	383
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	384
#define	tFACE_BOUND	385
#define	tCYLINDRICAL_SURFACE	386
#define	tCONICAL_SURFACE	387
#define	tCIRCLE	388
#define	tTRIMMED_CURVE	389
#define	tGEOMETRIC_SET	390
#define	tCOMPOSITE_CURVE_SEGMENT	391
#define	tCONTINUOUS	392
#define	tCOMPOSITE_CURVE	393
#define	tTOROIDAL_SURFACE	394
#define	tPRODUCT_DEFINITION	395
#define	tPRODUCT_DEFINITION_SHAPE	396
#define	tSHAPE_DEFINITION_REPRESENTATION	397
#define	tELLIPSE	398
#define	tTrimmed	399
#define	tSolid	400
#define	tEndSolid	401
#define	tVertex	402
#define	tFacet	403
#define	tNormal	404
#define	tOuter	405
#define	tLoopSTL	406
#define	tEndLoop	407
#define	tEndFacet	408
#define	tAFFECTPLUS	409
#define	tAFFECTMINUS	410
#define	tAFFECTTIMES	411
#define	tAFFECTDIVIDE	412
#define	tOR	413
#define	tAND	414
#define	tEQUAL	415
#define	tNOTEQUAL	416
#define	tAPPROXEQUAL	417
#define	tLESSOREQUAL	418
#define	tGREATEROREQUAL	419
#define	tCROSSPRODUCT	420
#define	tPLUSPLUS	421
#define	tMINUSMINUS	422
#define	UNARYPREC	423

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.114 2001-09-24 06:56:02 geuzaine Exp $

#include <stdarg.h>
#ifndef _NOPLUGIN
#include "PluginManager.h"
#endif
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][256];
static char           tmpstring[256];
static char           tmpstring2[256], tmpstring3[256];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);
static Post_View      *View;

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 70 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1630
#define	YYFLAG		-32768
#define	YYNTBASE	188

#define YYTRANSLATE(x) ((unsigned)(x) <= 423 ? yytranslate[x] : 273)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   175,     2,     2,     2,   173,     2,     2,   180,
   181,   171,   169,   185,   170,   184,   172,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   165,
     2,   167,   159,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   182,     2,   183,   179,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   186,     2,   187,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   160,   161,   162,   163,   164,   166,   168,   174,
   176,   177,   178
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   531,   539,   546,
   555,   556,   559,   562,   565,   568,   571,   574,   577,   580,
   583,   586,   589,   592,   594,   598,   599,   613,   615,   619,
   620,   634,   636,   640,   641,   655,   657,   661,   662,   682,
   684,   688,   689,   709,   711,   715,   716,   736,   738,   742,
   743,   769,   771,   775,   776,   802,   804,   808,   809,   835,
   837,   841,   842,   874,   876,   880,   881,   913,   915,   919,
   920,   952,   954,   956,   958,   960,   962,   964,   966,   971,
   979,   989,   996,  1000,  1007,  1014,  1024,  1031,  1041,  1047,
  1056,  1065,  1077,  1084,  1094,  1104,  1114,  1122,  1131,  1144,
  1151,  1157,  1165,  1173,  1186,  1194,  1202,  1212,  1230,  1239,
  1248,  1256,  1264,  1276,  1282,  1291,  1304,  1313,  1336,  1357,
  1366,  1375,  1381,  1390,  1398,  1407,  1413,  1425,  1431,  1441,
  1443,  1445,  1447,  1448,  1451,  1456,  1461,  1468,  1472,  1476,
  1480,  1488,  1491,  1494,  1501,  1510,  1519,  1530,  1532,  1535,
  1537,  1541,  1546,  1548,  1557,  1570,  1579,  1592,  1593,  1606,
  1607,  1624,  1633,  1646,  1647,  1660,  1661,  1678,  1680,  1683,
  1693,  1696,  1703,  1713,  1723,  1732,  1741,  1750,  1757,  1762,
  1765,  1768,  1770,  1772,  1774,  1776,  1778,  1780,  1784,  1787,
  1790,  1793,  1797,  1801,  1805,  1809,  1813,  1817,  1821,  1825,
  1829,  1833,  1837,  1841,  1845,  1849,  1855,  1860,  1865,  1870,
  1875,  1880,  1885,  1890,  1895,  1900,  1905,  1912,  1917,  1922,
  1927,  1932,  1937,  1942,  1949,  1956,  1963,  1968,  1973,  1978,
  1983,  1988,  1993,  1998,  2003,  2008,  2013,  2018,  2025,  2030,
  2035,  2040,  2045,  2050,  2055,  2062,  2069,  2076,  2081,  2083,
  2085,  2087,  2089,  2091,  2096,  2099,  2105,  2109,  2116,  2121,
  2129,  2131,  2134,  2137,  2141,  2145,  2157,  2167,  2175,  2183,
  2184,  2188,  2190,  2194,  2195,  2199,  2203,  2205,  2209,  2211,
  2213,  2217,  2222,  2226,  2232,  2236,  2241,  2248,  2256,  2258,
  2260,  2264,  2268,  2278,  2286,  2288,  2294,  2298,  2305,  2307,
  2311,  2313,  2320,  2325,  2330,  2337,  2344
};

static const short yyrhs[] = {   191,
     0,   190,     0,   196,     0,     1,     6,     0,     3,     0,
   170,     3,     0,   146,     0,   149,   150,   189,   189,   189,
   151,   152,   148,   189,   189,   189,   148,   189,   189,   189,
   148,   189,   189,   189,   153,   154,     0,   147,     0,     0,
   191,   192,     0,   193,     0,   195,     0,   194,     0,   120,
     6,     0,   121,     6,     0,   123,     6,     0,   122,     6,
     0,   124,     6,     0,   125,   180,   262,   185,     5,   181,
     6,     0,   126,   180,   262,   181,     6,     0,   127,   180,
     5,   185,     5,   185,   262,   185,   262,   185,     5,   185,
     5,   185,     5,   181,     6,     0,     3,     7,   104,   180,
     5,   185,   260,   181,     6,     0,     3,     7,   103,   180,
     5,   185,   258,   185,   266,   185,   257,   185,   257,   185,
   257,   185,   266,   185,   266,   185,   257,   181,     6,     0,
     3,     7,   102,   180,     5,   185,   258,   185,   258,   185,
   264,   185,   257,   185,   257,   185,   257,   185,   257,   185,
   266,   185,   266,   185,   266,   185,   266,   185,   257,   181,
     6,     0,     3,     7,   110,   180,     5,   185,     3,   185,
     3,   185,     3,   185,   257,   181,     6,     0,     3,     7,
   114,   180,     5,   185,     3,   185,   257,   181,     6,     0,
     3,     7,   131,   180,     5,   185,     3,   185,   257,   181,
     6,     0,     3,     7,   112,   180,     5,   185,   171,   185,
   171,   185,   258,   185,   257,   181,     6,     0,     3,     7,
   115,   180,     5,   185,   266,   181,     6,     0,     3,     7,
   116,   180,     5,   185,   266,   185,     3,   185,   257,   181,
     6,     0,     3,     7,   111,   180,     5,   185,     3,   181,
     6,     0,     3,     7,   117,   180,     5,   185,     3,   185,
   258,   181,     6,     0,     3,     7,   119,   180,     5,   185,
     3,   185,     3,   185,     3,   181,     6,     0,     3,     7,
   118,   180,     5,   185,   260,   181,     6,     0,     3,     7,
   113,   180,     5,   185,     3,   181,     6,     0,     3,     7,
    41,   180,     5,   185,     3,   185,     3,   181,     6,     0,
     3,     7,   129,   180,     5,   185,   266,   181,     6,     0,
     3,     7,   130,   180,     5,   185,   266,   185,     3,   181,
     6,     0,     3,     7,   128,   180,     5,   185,     3,   181,
     6,     0,     3,     7,   132,   180,     5,   185,     3,   185,
   258,   181,     6,     0,     3,     7,   133,   180,     5,   185,
     3,   185,   258,   185,   258,   181,     6,     0,     3,     7,
   140,   180,     5,   185,     3,   185,   258,   185,   258,   181,
     6,     0,     3,     7,   134,   180,     5,   185,     3,   185,
   258,   181,     6,     0,     3,     7,   144,   180,     5,   185,
     3,   185,   258,   185,   258,   181,     6,     0,     3,     7,
   135,   180,     5,   185,     3,   185,   266,   185,   266,   185,
   257,   185,   257,   181,     6,     0,     3,     7,   136,   180,
     5,   185,   266,   181,     6,     0,     3,     7,   137,   180,
   138,   185,   257,   185,     3,   181,     6,     0,     3,     7,
   139,   180,     5,   185,   266,   185,   257,   181,     6,     0,
     3,     7,   141,   180,     5,   185,     5,   185,     3,   185,
     3,   181,     6,     0,     3,     7,   142,   180,     5,   185,
     5,   185,     3,   181,     6,     0,     3,     7,   143,   180,
     3,   185,     3,   181,     6,     0,     0,   196,   197,     0,
   199,     0,   198,     0,   239,     0,   240,     0,   241,     0,
   244,     0,   245,     0,   248,     0,   255,     0,   256,     0,
   247,     0,   246,     0,    33,   180,     5,   181,     6,     0,
    33,   180,     5,   185,   268,   181,     6,     0,     4,     5,
   186,   200,   187,     6,     0,     4,     5,     4,   260,   186,
   200,   187,     6,     0,     0,   200,   202,     0,   200,   205,
     0,   200,   208,     0,   200,   211,     0,   200,   214,     0,
   200,   217,     0,   200,   220,     0,   200,   223,     0,   200,
   226,     0,   200,   229,     0,   200,   232,     0,   200,   235,
     0,   258,     0,   201,   185,   258,     0,     0,    80,   180,
   258,   185,   258,   185,   258,   181,   203,   186,   201,   187,
     6,     0,   258,     0,   204,   185,   258,     0,     0,    81,
   180,   258,   185,   258,   185,   258,   181,   206,   186,   204,
   187,     6,     0,   258,     0,   207,   185,   258,     0,     0,
    82,   180,   258,   185,   258,   185,   258,   181,   209,   186,
   207,   187,     6,     0,   258,     0,   210,   185,   258,     0,
     0,    77,   180,   258,   185,   258,   185,   258,   185,   258,
   185,   258,   185,   258,   181,   212,   186,   210,   187,     6,
     0,   258,     0,   213,   185,   258,     0,     0,    78,   180,
   258,   185,   258,   185,   258,   185,   258,   185,   258,   185,
   258,   181,   215,   186,   213,   187,     6,     0,   258,     0,
   216,   185,   258,     0,     0,    79,   180,   258,   185,   258,
   185,   258,   185,   258,   185,   258,   185,   258,   181,   218,
   186,   216,   187,     6,     0,   258,     0,   219,   185,   258,
     0,     0,    74,   180,   258,   185,   258,   185,   258,   185,
   258,   185,   258,   185,   258,   185,   258,   185,   258,   185,
   258,   181,   221,   186,   219,   187,     6,     0,   258,     0,
   222,   185,   258,     0,     0,    75,   180,   258,   185,   258,
   185,   258,   185,   258,   185,   258,   185,   258,   185,   258,
   185,   258,   185,   258,   181,   224,   186,   222,   187,     6,
     0,   258,     0,   225,   185,   258,     0,     0,    76,   180,
   258,   185,   258,   185,   258,   185,   258,   185,   258,   185,
   258,   185,   258,   185,   258,   185,   258,   181,   227,   186,
   225,   187,     6,     0,   258,     0,   228,   185,   258,     0,
     0,    71,   180,   258,   185,   258,   185,   258,   185,   258,
   185,   258,   185,   258,   185,   258,   185,   258,   185,   258,
   185,   258,   185,   258,   185,   258,   181,   230,   186,   228,
   187,     6,     0,   258,     0,   231,   185,   258,     0,     0,
    72,   180,   258,   185,   258,   185,   258,   185,   258,   185,
   258,   185,   258,   185,   258,   185,   258,   185,   258,   185,
   258,   185,   258,   185,   258,   181,   233,   186,   231,   187,
     6,     0,   258,     0,   234,   185,   258,     0,     0,    73,
   180,   258,   185,   258,   185,   258,   185,   258,   185,   258,
   185,   258,   185,   258,   185,   258,   185,   258,   185,   258,
   185,   258,   185,   258,   181,   236,   186,   234,   187,     6,
     0,     7,     0,   155,     0,   156,     0,   157,     0,   158,
     0,   176,     0,   177,     0,     4,   237,   258,     6,     0,
     4,   182,   258,   183,   237,   258,     6,     0,     4,   182,
   186,   268,   187,   183,   237,   266,     6,     0,     4,   182,
   183,     7,   266,     6,     0,     4,   238,     6,     0,     4,
   182,   258,   183,   238,     6,     0,     4,   184,     4,     7,
   272,     6,     0,     4,   182,   258,   183,   184,     4,     7,
   272,     6,     0,     4,   184,     4,   237,   258,     6,     0,
     4,   182,   258,   183,   184,     4,   237,   258,     6,     0,
     4,   184,     4,   238,     6,     0,     4,   182,   258,   183,
   184,     4,   238,     6,     0,     4,   184,    90,   184,     4,
     7,   269,     6,     0,     4,   182,   258,   183,   184,    90,
   184,     4,     7,   269,     6,     0,     4,   184,    91,     7,
   270,     6,     0,     4,   182,   258,   183,   184,    91,     7,
   270,     6,     0,    57,   180,     4,   181,   184,     4,     7,
   258,     6,     0,    57,   180,     4,   181,   184,     4,     7,
   272,     6,     0,    38,   180,   258,   181,     7,   260,     6,
     0,    53,    38,   180,   258,   181,     7,   266,     6,     0,
    69,    38,   266,     7,   186,   258,   185,   258,   185,   258,
   187,     6,     0,    45,    46,   266,     7,   258,     6,     0,
    38,   186,   258,   187,     6,     0,    41,   180,   258,   181,
     7,   266,     6,     0,    43,   180,   258,   181,     7,   266,
     6,     0,    69,    41,   266,     7,   186,   258,   185,   258,
   185,   258,   187,     6,     0,    39,   180,   258,   181,     7,
   266,     6,     0,    40,   180,   258,   181,     7,   266,     6,
     0,    39,   180,   258,   181,     7,   266,    49,   260,     6,
     0,    47,   180,   258,   181,     7,   186,   258,   185,   258,
   185,     5,   185,     5,   185,     5,   187,     6,     0,    53,
    41,   180,   258,   181,     7,   266,     6,     0,    41,    64,
   180,   258,   181,     7,   266,     6,     0,    83,   180,   258,
   181,     7,   266,     6,     0,    84,   180,   258,   181,     7,
   266,     6,     0,    85,   180,   258,   181,     7,   266,    89,
   266,    86,   258,     6,     0,    41,   186,   258,   187,     6,
     0,    49,    42,   180,   258,   181,     7,   266,     6,     0,
   145,    42,   180,   258,   181,     7,   186,   258,   185,   266,
   187,     6,     0,    50,    42,   180,   258,   181,     7,   266,
     6,     0,    85,    42,    87,    88,   180,   258,   181,     7,
   264,    89,   186,   266,   185,   266,   187,    86,   186,   258,
   185,   258,   187,     6,     0,    85,    42,   180,   258,   181,
     7,   264,    89,   186,   266,   185,   266,   187,    86,   186,
   258,   185,   258,   187,     6,     0,    53,    42,   180,   258,
   181,     7,   266,     6,     0,    42,    64,   180,   258,   181,
     7,   266,     6,     0,    42,   186,   258,   187,     6,     0,
    52,    44,   180,   258,   181,     7,   266,     6,     0,    44,
   180,   258,   181,     7,   266,     6,     0,    53,    44,   180,
   258,   181,     7,   266,     6,     0,    59,   260,   186,   242,
   187,     0,    58,   186,   260,   185,   260,   185,   258,   187,
   186,   242,   187,     0,    60,   260,   186,   242,   187,     0,
    61,   186,   260,   185,   258,   187,   186,   242,   187,     0,
   244,     0,   243,     0,   241,     0,     0,   243,   240,     0,
    63,   186,   243,   187,     0,    66,   186,   243,   187,     0,
    66,     4,   182,   258,   183,     6,     0,    66,   101,     6,
     0,     4,   272,     6,     0,     4,   258,     6,     0,    57,
   180,     4,   181,   184,     4,     6,     0,    97,     6,     0,
    37,     6,     0,    92,   180,   258,     8,   258,   181,     0,
    92,   180,   258,     8,   258,     8,   258,   181,     0,    92,
     4,    93,   186,   258,     8,   258,   187,     0,    92,     4,
    93,   186,   258,     8,   258,     8,   258,   187,     0,    94,
     0,   100,     4,     0,    98,     0,    99,     4,     6,     0,
    95,   180,   258,   181,     0,    96,     0,    62,    38,   186,
   258,   185,   260,   187,     6,     0,    62,    38,   186,   258,
   185,   260,   185,   260,   185,   258,   187,     6,     0,    62,
    41,   186,   258,   185,   260,   187,     6,     0,    62,    41,
   186,   258,   185,   260,   185,   260,   185,   258,   187,     6,
     0,     0,    62,    41,   186,   258,   185,   260,   187,   249,
   186,   253,   187,     6,     0,     0,    62,    41,   186,   258,
   185,   260,   185,   260,   185,   258,   187,   250,   186,   253,
   187,     6,     0,    62,    42,   186,   258,   185,   260,   187,
     6,     0,    62,    42,   186,   258,   185,   260,   185,   260,
   185,   258,   187,     6,     0,     0,    62,    42,   186,   258,
   185,   260,   187,   251,   186,   253,   187,     6,     0,     0,
    62,    42,   186,   258,   185,   260,   185,   260,   185,   258,
   187,   252,   186,   253,   187,     6,     0,   254,     0,   253,
   254,     0,    70,   186,   266,   185,   266,   185,   266,   187,
     6,     0,    65,     6,     0,    51,    41,   266,     7,   258,
     6,     0,    51,    41,   266,     7,   258,    54,    56,   258,
     6,     0,    51,    41,   266,     7,   258,    54,    55,   258,
     6,     0,    51,    42,   186,   258,   187,     7,   266,     6,
     0,    48,    42,   186,   258,   187,     7,   266,     6,     0,
    51,    44,   186,   258,   187,     7,   266,     6,     0,    65,
    42,   266,     7,   258,     6,     0,    65,    42,   266,     6,
     0,    67,     6,     0,    68,     6,     0,   105,     0,   106,
     0,   107,     0,   108,     0,   109,     0,   259,     0,   180,
   258,   181,     0,   170,   258,     0,   169,   258,     0,   175,
   258,     0,   258,   170,   258,     0,   258,   169,   258,     0,
   258,   171,   258,     0,   258,   172,   258,     0,   258,   173,
   258,     0,   258,   179,   258,     0,   258,   165,   258,     0,
   258,   167,   258,     0,   258,   166,   258,     0,   258,   168,
   258,     0,   258,   162,   258,     0,   258,   163,   258,     0,
   258,   161,   258,     0,   258,   160,   258,     0,   258,   159,
   258,     8,   258,     0,    12,   180,   258,   181,     0,    13,
   180,   258,   181,     0,    14,   180,   258,   181,     0,    15,
   180,   258,   181,     0,    16,   180,   258,   181,     0,    17,
   180,   258,   181,     0,    18,   180,   258,   181,     0,    19,
   180,   258,   181,     0,    20,   180,   258,   181,     0,    22,
   180,   258,   181,     0,    23,   180,   258,   185,   258,   181,
     0,    24,   180,   258,   181,     0,    25,   180,   258,   181,
     0,    26,   180,   258,   181,     0,    27,   180,   258,   181,
     0,    28,   180,   258,   181,     0,    29,   180,   258,   181,
     0,    30,   180,   258,   185,   258,   181,     0,    31,   180,
   258,   185,   258,   181,     0,    32,   180,   258,   185,   258,
   181,     0,    21,   180,   258,   181,     0,    12,   182,   258,
   183,     0,    13,   182,   258,   183,     0,    14,   182,   258,
   183,     0,    15,   182,   258,   183,     0,    16,   182,   258,
   183,     0,    17,   182,   258,   183,     0,    18,   182,   258,
   183,     0,    19,   182,   258,   183,     0,    20,   182,   258,
   183,     0,    22,   182,   258,   183,     0,    23,   182,   258,
   185,   258,   183,     0,    24,   182,   258,   183,     0,    25,
   182,   258,   183,     0,    26,   182,   258,   183,     0,    27,
   182,   258,   183,     0,    28,   182,   258,   183,     0,    29,
   182,   258,   183,     0,    30,   182,   258,   185,   258,   183,
     0,    31,   182,   258,   185,   258,   183,     0,    32,   182,
   258,   185,   258,   183,     0,    21,   182,   258,   183,     0,
     3,     0,     9,     0,    10,     0,    11,     0,     4,     0,
     4,   182,   258,   183,     0,     4,   238,     0,     4,   182,
   258,   183,   238,     0,     4,   184,     4,     0,     4,   182,
   258,   183,   184,     4,     0,     4,   184,     4,   238,     0,
     4,   182,   258,   183,   184,     4,   238,     0,   261,     0,
   170,   260,     0,   169,   260,     0,   260,   170,   260,     0,
   260,   169,   260,     0,   186,   258,   185,   258,   185,   258,
   185,   258,   185,   258,   187,     0,   186,   258,   185,   258,
   185,   258,   185,   258,   187,     0,   186,   258,   185,   258,
   185,   258,   187,     0,   180,   258,   185,   258,   185,   258,
   181,     0,     0,   180,   263,   181,     0,     5,     0,   263,
   185,     5,     0,     0,   186,   265,   187,     0,   180,   265,
   181,     0,   266,     0,   265,   185,   266,     0,   258,     0,
   267,     0,   186,   268,   187,     0,   170,   186,   268,   187,
     0,   258,     8,   258,     0,   258,     8,   258,     8,   258,
     0,     4,   182,   183,     0,   170,     4,   182,   183,     0,
     4,   182,   186,   268,   187,   183,     0,   170,     4,   182,
   186,   268,   187,   183,     0,   258,     0,   267,     0,   268,
   185,   258,     0,   268,   185,   267,     0,   186,   258,   185,
   258,   185,   258,   185,   258,   187,     0,   186,   258,   185,
   258,   185,   258,   187,     0,     4,     0,     4,   184,    90,
   184,     4,     0,   186,   271,   187,     0,     4,   182,   258,
   183,   184,    91,     0,   269,     0,   271,   185,   269,     0,
     5,     0,    35,   180,   272,   185,   272,   181,     0,    36,
   180,   272,   181,     0,    34,   180,   272,   181,     0,    34,
   180,   272,   185,   268,   181,     0,    34,   180,     4,   184,
     4,   181,     0,    34,   180,     4,   182,   258,   183,   184,
     4,   181,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   152,   154,   155,   156,   163,   165,   168,   176,   190,   202,
   204,   207,   209,   210,   213,   219,   224,   225,   226,   229,
   233,   236,   242,   247,   253,   261,   266,   270,   276,   281,
   285,   290,   294,   297,   302,   306,   310,   314,   319,   323,
   326,   330,   334,   338,   342,   346,   350,   353,   357,   360,
   364,   367,   376,   380,   386,   388,   389,   390,   391,   392,
   393,   394,   395,   396,   397,   398,   401,   406,   435,   440,
   446,   451,   452,   453,   454,   455,   456,   457,   458,   459,
   460,   461,   462,   465,   468,   472,   478,   484,   487,   491,
   497,   503,   506,   510,   516,   522,   525,   529,   537,   543,
   546,   550,   558,   564,   567,   571,   579,   585,   588,   592,
   604,   610,   613,   617,   629,   635,   638,   642,   654,   660,
   663,   667,   680,   686,   689,   693,   706,   712,   715,   719,
   732,   744,   746,   747,   748,   749,   751,   753,   755,   786,
   820,   867,   882,   891,   906,   918,   932,   955,   979,   991,
  1005,  1017,  1031,  1047,  1063,  1076,  1096,  1107,  1113,  1132,
  1143,  1151,  1157,  1163,  1182,  1188,  1194,  1210,  1217,  1223,
  1229,  1240,  1251,  1273,  1285,  1291,  1310,  1331,  1339,  1345,
  1351,  1357,  1369,  1375,  1381,  1393,  1399,  1404,  1409,  1416,
  1418,  1419,  1422,  1427,  1438,  1456,  1464,  1469,  1480,  1548,
  1568,  1575,  1579,  1599,  1615,  1629,  1654,  1679,  1705,  1711,
  1716,  1721,  1725,  1735,  1742,  1751,  1755,  1759,  1764,  1768,
  1773,  1780,  1784,  1788,  1793,  1798,  1804,  1811,  1815,  1820,
  1850,  1860,  1879,  1897,  1915,  1937,  1958,  1979,  1993,  2014,
  2019,  2030,  2032,  2033,  2034,  2035,  2038,  2040,  2041,  2042,
  2043,  2044,  2045,  2046,  2047,  2054,  2055,  2056,  2057,  2058,
  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,  2068,
  2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,
  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2087,  2088,  2089,
  2090,  2091,  2092,  2093,  2094,  2095,  2096,  2097,  2098,  2099,
  2100,  2101,  2102,  2103,  2104,  2105,  2106,  2107,  2112,  2117,
  2118,  2119,  2123,  2134,  2151,  2162,  2181,  2197,  2213,  2229,
  2246,  2251,  2255,  2259,  2263,  2268,  2273,  2277,  2281,  2287,
  2291,  2296,  2300,  2305,  2309,  2313,  2319,  2325,  2332,  2338,
  2342,  2346,  2356,  2363,  2374,  2388,  2404,  2424,  2448,  2454,
  2458,  2462,  2473,  2478,  2489,  2494,  2512,  2517,  2530,  2536,
  2542,  2547,  2555,  2568,  2572,  2597,  2611
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence",
"tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","SignedDouble","STLFormatItem","StepFormatItems","StepFormatItem",
"StepSpecial","StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat",
"Printf","View","Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues",
"VectorPoint","@2","TensorPointValues","TensorPoint","@3","ScalarLineValues",
"ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine",
"@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Command","Loop","Extrude","@13","@14","@15","@16","ExtrudeParameters",
"ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   188,   188,   188,   188,   189,   189,   190,   190,   190,   191,
   191,   192,   192,   192,   193,   193,   193,   193,   193,   194,
   194,   194,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   196,   196,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   198,   198,   199,   199,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   200,   201,   201,   203,   202,   204,   204,   206,
   205,   207,   207,   209,   208,   210,   210,   212,   211,   213,
   213,   215,   214,   216,   216,   218,   217,   219,   219,   221,
   220,   222,   222,   224,   223,   225,   225,   227,   226,   228,
   228,   230,   229,   231,   231,   233,   232,   234,   234,   236,
   235,   237,   237,   237,   237,   237,   238,   238,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   241,   241,   241,   241,   242,
   242,   242,   243,   243,   244,   245,   245,   245,   246,   246,
   246,   246,   246,   247,   247,   247,   247,   247,   247,   247,
   247,   247,   247,   248,   248,   248,   248,   249,   248,   250,
   248,   248,   248,   251,   248,   252,   248,   253,   253,   254,
   254,   255,   255,   255,   255,   255,   255,   255,   255,   256,
   256,   257,   257,   257,   257,   257,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   258,   258,   259,   259,
   259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
   260,   260,   260,   260,   260,   261,   261,   261,   261,   262,
   262,   263,   263,   264,   264,   264,   265,   265,   266,   266,
   266,   266,   267,   267,   267,   267,   267,   267,   268,   268,
   268,   268,   269,   269,   269,   269,   270,   270,   271,   271,
   272,   272,   272,   272,   272,   272,   272
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     7,     6,     8,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     5,     7,     7,    12,     7,     7,     9,    17,     8,     8,
     7,     7,    11,     5,     8,    12,     8,    22,    20,     8,
     8,     5,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     4,     4,     6,     3,     3,     3,
     7,     2,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     8,    12,     8,    12,     0,    12,     0,
    16,     8,    12,     0,    12,     0,    16,     1,     2,     9,
     2,     6,     9,     9,     8,     8,     8,     6,     4,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     1,     1,     4,     2,     5,     3,     6,     4,     7,
     1,     2,     2,     3,     3,    11,     9,     7,     7,     0,
     3,     1,     3,     0,     3,     3,     1,     3,     1,     1,
     3,     4,     3,     5,     3,     4,     6,     7,     1,     1,
     3,     3,     9,     7,     1,     5,     3,     6,     1,     3,
     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   208,     0,   213,     0,
   210,     0,     0,     0,    54,    56,    55,    57,    58,    59,
    60,    61,    66,    65,    62,    63,    64,     5,     0,     0,
     0,    15,    16,    18,    17,    19,   330,   330,     0,   309,
   313,   361,   132,   310,   311,   312,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   133,   134,   135,   136,     0,     0,     0,   137,   138,     0,
     0,     0,     0,     0,     0,   247,     0,     0,   203,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   321,     0,     0,     0,     0,     0,   193,     0,     0,     0,
   193,   240,   241,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   202,     0,   209,     0,     6,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   315,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   250,   249,   251,     0,     0,     0,     0,     0,
     0,     0,     0,   143,   200,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   199,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   313,     0,     0,   339,     0,   340,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   323,   322,     0,     0,     0,     0,   193,
   193,     0,     0,     0,     0,     0,     0,     0,   198,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   332,     0,     0,     0,     0,     0,   317,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   361,     0,     0,     0,   248,
     0,     0,   349,   350,     0,     0,   132,     0,     0,     0,
     0,   139,     0,   265,   264,   262,   263,   258,   260,   259,
   261,   253,   252,   254,   255,   256,   257,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   313,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   325,   324,   192,     0,   191,   190,     0,     0,
     0,     0,     0,   195,   194,   239,     0,     0,   196,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   212,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   331,     0,     0,    21,     0,   314,   319,    71,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,   267,   288,   268,   289,   269,   290,
   270,   291,   271,   292,   272,   293,   273,   294,   274,   295,
   275,   296,   287,   308,   276,   297,     0,     0,   278,   299,
   279,   300,   280,   301,   281,   302,   282,   303,   283,   304,
     0,     0,     0,     0,     0,     0,     0,     0,   364,     0,
     0,   363,     0,     0,     0,     0,     0,     0,     0,     0,
   149,     0,     0,     0,     0,     0,    67,     0,     0,   161,
     0,     0,     0,     0,   174,     0,   182,     0,     0,   345,
     0,     0,     0,   341,   343,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   186,   188,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   333,     0,   330,     0,   316,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    69,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   142,   351,   352,     0,     0,     0,     0,     0,
   144,   145,   147,     0,     0,   355,     0,   359,     0,   153,
   266,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   346,     0,   342,     0,   160,     0,     0,     0,     0,
   232,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   238,   197,     0,
     0,     0,     0,     0,   334,     0,     0,     0,   204,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   242,   243,   244,   245,   246,     0,
     0,     0,     0,     0,     0,     0,    20,     0,   318,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   277,   298,   284,   305,   285,   306,   286,   307,
     0,   366,   365,   362,     0,   132,     0,     0,     0,     0,
   140,     0,     0,     0,     0,     0,   357,    68,   157,   165,
     0,   166,     0,   162,     0,   163,   184,     0,     0,   344,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   201,     0,     0,     0,     0,   193,     0,
     0,     0,   218,     0,   224,     0,     0,   171,   172,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   330,   320,
    70,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   150,     0,     0,
   151,     0,     0,     0,   360,     0,   170,   181,   347,     0,
     0,   236,   175,   177,     0,     0,   235,   237,   183,   158,
   169,   180,   185,     0,     0,     0,   329,     0,   328,     0,
     0,   214,     0,   216,     0,     0,   222,     0,     0,     0,
   334,     0,   337,     0,     0,     0,     0,   206,   205,     0,
     0,     0,     0,     0,    23,     0,    32,     0,    36,     0,
    30,     0,     0,    35,     0,    40,    38,     0,     0,     0,
     0,     0,     0,    47,     0,     0,     0,     0,     0,    52,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   141,   146,   148,     0,   154,
     0,     0,     0,   167,   348,     0,   234,   233,   155,   156,
   193,     0,   189,     0,     0,     0,     0,     0,     0,     0,
     0,   336,     0,   335,     0,     0,     0,     0,     0,     0,
   334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   367,     0,   358,   356,     0,     0,     0,
     0,   327,     0,     0,     0,     0,     0,   228,     0,     0,
     0,     0,     0,   338,     0,     0,   207,     0,     0,    37,
     0,     0,     0,     0,    27,     0,    33,     0,    39,    28,
    41,     0,    44,     0,    48,    49,     0,     0,    51,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   152,     0,     0,   187,     0,     0,   220,
   231,     0,     0,   229,   226,     0,     0,     0,     0,     0,
   173,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    86,    90,    94,     0,   354,     0,
   326,   215,   217,     0,     0,   219,   223,     0,   225,   159,
   164,     0,     0,   176,     0,     0,     0,     0,     0,    31,
    34,    42,     0,    43,    50,    45,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   353,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    26,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    84,
     0,    88,     0,    92,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   221,     0,   227,     0,     0,     0,     0,     0,    46,
    22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    85,    87,    89,    91,    93,    95,   168,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    98,
   102,   106,   230,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   179,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    96,     0,   100,     0,   104,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   178,     0,    24,     0,     0,     0,     0,     0,
     0,    97,    99,   101,   103,   105,   107,     0,     0,     0,
     0,   110,   114,   118,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,     0,   112,     0,   116,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,   111,   113,   115,   117,   119,     0,   122,
   126,   130,    25,     0,     0,     0,     0,     0,     0,     0,
   120,     0,   124,     0,   128,     0,     0,     0,     0,     0,
     0,   121,   123,   125,   127,   129,   131,     0,     0,     0
};

static const short yydefgoto[] = {  1628,
    80,     5,     6,    19,    20,    21,    22,     7,    65,    66,
    67,   412,  1399,   603,  1347,  1401,   604,  1348,  1403,   605,
  1349,  1512,   606,  1485,  1514,   607,  1486,  1516,   608,  1487,
  1573,   609,  1559,  1575,   610,  1560,  1577,   611,  1561,  1610,
   612,  1604,  1612,   613,  1605,  1614,   614,  1606,   133,   235,
    68,   535,   525,   526,   527,   528,    72,    73,    74,    75,
  1075,  1314,  1078,  1318,  1217,  1218,    76,    77,   890,   327,
   136,   170,   171,   230,   405,   983,  1082,  1083,   329,   465,
   808,   675,   809,   137
};

static const short yypact[] = {  2052,
    45,-32768,-32768,   -73,-32768,   298,  2196,-32768,    14,   102,
   106,   137,   146,   172,   206,   -56,    92,   131,-32768,-32768,
-32768,-32768,  1595,   148,   342,   -88,   162,   176,   -10,     8,
   179,   182,   301,   200,   348,   373,   391,    91,   339,   167,
   260,   276,   154,   154,   295,   435,   319,   466,    10,   506,
   514,    23,   358,   379,   -18,    78,-32768,   394,-32768,   548,
-32768,   563,   586,   554,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   599,    14,
  2235,-32768,-32768,-32768,-32768,-32768,   441,   441,   615,-32768,
    85,     9,-32768,-32768,-32768,-32768,   118,   283,   304,   305,
   320,   321,   324,   333,   336,   337,   341,   346,   349,   350,
   368,   378,   384,   405,   406,   412,   413,   446,   459,   471,
-32768,-32768,-32768,-32768,  1643,  1643,  1643,-32768,-32768,  1643,
    17,    49,  1643,   629,   677,-32768,   651,   662,-32768,  1643,
  1643,  1643,  1643,   498,  1643,  1643,   501,  1643,  1643,  1643,
   382,  1643,   484,   517,   524,   382,   522,   523,   537,   577,
   578,   579,   580,   681,   154,   154,   154,  1643,  1643,   -99,
-32768,   -70,   154,   575,   587,   592,-32768,   382,   518,   737,
-32768,-32768,-32768,   382,   382,  1643,  1643,   -32,  1643,   670,
  1643,  1643,-32768,   758,-32768,   601,-32768,    14,   603,   614,
   617,   618,   621,   623,   626,   627,   628,   633,   634,   635,
   636,   637,   641,   642,   643,   644,   645,   646,   647,   648,
   649,   650,   653,   661,   671,   672,   673,   674,   790,   624,
   676,   675,  1643,   827,-32768,   154,-32768,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,    79,
    54,    54,   679,   679,   679,  2154,   848,  1673,  5001,   181,
   680,   852,   756,-32768,-32768,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
-32768,   -30,  5651,  1261,  5674,  5697,  1643,  5720,  2279,  1643,
  2302,  5743,  5766,   145,  1239,  1673,  1819,   854,-32768,  5789,
  1643,  1643,  1643,   856,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,   684,   -64,-32768,-32768,  2670,  2691,   154,   154,   411,
   411,   185,  1643,  1643,  1643,   727,   483,  1643,-32768,  2142,
   859,   860,  5812,  5835,   780,  1643,  5858,   683,  1841,  5881,
-32768,  1643,   720,   868,   869,   870,   871,   875,   876,   877,
   878,   880,   881,   882,   883,   885,   886,   888,   889,   891,
   892,   893,   894,   895,   896,   897,   765,   900,   901,   902,
   903,   906,   905,-32768,   114,   908,   914,   925,  5026,   -91,
   -39,   376,  5904,  5051,  5927,  5076,  5950,  5101,  5973,  5126,
  5996,  5151,  6019,  5176,  6042,  5201,  6065,  5226,  6088,  5251,
  6111,  5276,  6134,  5301,  2712,  2733,  6157,  5326,  6180,  5351,
  6203,  5376,  6226,  5401,  6249,  5426,  6272,  5451,  2754,  2775,
  2796,  2817,  2838,  2859,   434,-32768,   160,   726,   750,-32768,
   382,  1777,  1819,-32768,   437,   149,    54,  1643,   930,   933,
    12,-32768,  1856,   493,   803,   620,   620,   -12,   -12,   -12,
   -12,   258,   258,   679,   679,   679,   679,   932,  1673,   937,
   934,   939,   940,  6295,   941,   943,  6318,   944,   945,   948,
   709,   259,  1673,   440,  1643,  1643,   949,  2325,  6341,  6364,
  1643,  2348,  2371,  6387,  6410,  6433,  6456,  6479,   755,   154,
  1643,  1643,-32768,-32768,-32768,   764,  2259,-32768,   770,  1643,
  2880,  2901,  2922,-32768,-32768,-32768,  1643,  5476,-32768,   772,
   773,   953,   954,   782,  6502,   956,  1643,  1643,-32768,  6525,
   826,   794,   795,   796,   798,   802,   805,   807,   808,   809,
   811,   812,   813,   828,   829,   830,   831,   832,   833,   834,
   835,   837,   853,   855,   857,   861,   862,   863,   865,   866,
   872,-32768,   983,   858,-32768,   911,   284,-32768,-32768,   874,
   913,   917,   919,   935,   936,   942,   946,   950,   955,   958,
   959,  1005,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1643,  1643,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1008,-32768,  1673,
    54,-32768,  1035,  1673,   873,    59,  1643,  1038,  1043,   864,
-32768,  1056,   884,    15,  1059,  1643,-32768,   194,   154,-32768,
   382,   382,  1084,   382,-32768,  1107,-32768,   382,   382,-32768,
  1673,  1058,   451,-32768,  1878,  1052,   931,  1113,  1114,  1116,
   410,  1117,  1121,  1122,  1126,  1133,  1134,  1135,  1140,   196,
  2943,  2964,-32768,-32768,  2394,   154,   154,   154,  1350,  1139,
  1643,  1643,   382,   382,  1643,  1141,   382,  1899,   438,  1142,
   998,  1144,  1643,  1643,   154,  1147,  1149,   982,  1151,  1152,
   382,   382,  1153,   154,  1154,  1155,   382,   382,  1157,  1158,
  1159,  1160,  1162,   382,   387,   382,  1163,  1176,  1177,  1165,
  1180,-32768,  1178,   441,  1182,-32768,  1029,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,-32768,
  6548,  5501,  6571,  5526,  6594,  5551,  6617,  5576,  5601,  1009,
   253,  1010,-32768,  1819,-32768,    16,   195,  1011,  1185,  1409,
-32768,-32768,-32768,    15,  1643,  1012,  1643,-32768,   455,-32768,
  7123,  1187,    44,    52,  1188,   382,  1191,   382,  1192,  1196,
   458,-32768,  1673,-32768,  1643,-32768,  1643,   382,   382,   382,
-32768,   208,   382,   382,   382,   382,   382,   382,   382,   606,
  1643,  1643,  1643,  1017,   -94,   -90,   191,-32768,-32768,  2985,
  3006,  1220,  1223,  6640,   -52,  1143,  1643,  1643,-32768,  1048,
    14,  1050,  3027,  3048,  -103,  1051,  1064,  1054,  1065,  1055,
  1066,  1087,  1097,   -16,  1098,  1105,  1106,  1103,  1104,  1109,
  1110,  1136,  1145,  1146,-32768,-32768,-32768,-32768,-32768,  1148,
  1150,  1168,  1169,  1189,  1156,  1190,-32768,  1193,   -91,  1231,
  3069,  3090,  3111,  3132,  3153,  3174,  3195,  3216,  3237,  3258,
  3279,  3300,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1195,-32768,-32768,-32768,   382,    54,  1643,  1284,  1321,    12,
-32768,  1322,  5626,  1241,  3321,    15,-32768,-32768,-32768,-32768,
   154,-32768,  1323,-32768,  1326,-32768,-32768,  1197,   461,  7123,
  3342,  1328,  1330,  1332,  1643,  1643,  1333,  1334,  1366,  1367,
  1370,  1376,  1380,-32768,  1288,  2417,  6663,  1198,   411,   154,
  1382,   154,  1383,   154,  1384,  1643,  1643,-32768,-32768,  1385,
   382,   382,  1302,   382,   374,  6686,  1643,    14,  1400,  1643,
   382,  1399,  1404,  1405,  1242,  1410,   387,  1411,  1407,  1643,
  1412,  1432,  1433,  1441,  1446,   387,  1643,  1643,  1643,   382,
  1444,  1448,   387,  1643,  1449,  1450,  1453,  1643,   441,-32768,
-32768,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1451,  1454,  1455,  1548,-32768,  1447,  1456,
-32768,  1272,  1280,  1643,-32768,    90,-32768,-32768,-32768,  1283,
  1643,-32768,-32768,-32768,  1706,  1732,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1755,  1461,  1293,-32768,  1643,-32768,  1282,
   199,-32768,   204,-32768,  1294,   257,-32768,  1295,  3363,  3384,
   -52,   294,-32768,   462,  1296,  1397,  1643,-32768,-32768,  3405,
    14,  1303,  3426,  1300,-32768,  1301,-32768,  1304,-32768,  1306,
-32768,  1305,  6709,-32768,  1307,-32768,-32768,  1310,  1312,  6732,
  3447,  6755,  1309,-32768,  1314,  1315,  3468,  1320,  1316,-32768,
  3489,  1329,  3510,  3531,  3552,  3573,  3594,  3615,  3636,  3657,
  3678,  3699,  3720,  3741,  1343,-32768,-32768,-32768,    15,-32768,
  1416,  1484,  3762,-32768,-32768,  3783,-32768,-32768,-32768,-32768,
   411,  2221,-32768,  1643,  1643,   223,  1643,   223,  1643,  1643,
  1436,-32768,   382,-32768,   382,  1643,  2440,   382,  1387,  1524,
   -52,   387,  1528,  1643,  1526,   387,  1527,  1534,  1532,  1540,
  1541,  1643,  1542,   382,  1543,  1544,  1643,  1549,  1545,  1643,
  1551,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,-32768,  1547,-32768,-32768,  1643,  1556,  1378,
  1643,-32768,  2463,  2486,  1557,  1381,    -8,-32768,  2509,    -5,
  2532,  2555,  1401,-32768,  1388,  1804,-32768,  1379,    14,-32768,
  1398,  1406,  1418,  3804,-32768,  1408,-32768,  1413,-32768,-32768,
-32768,  6778,-32768,  1443,-32768,-32768,  6801,  1415,-32768,  6824,
  1452,  3825,  3846,  3867,  3888,  3909,  3930,  3951,  3972,  3993,
  6847,  6870,  6893,-32768,  2250,  1457,-32768,  2578,  1584,  1586,
-32768,   382,  1626,-32768,  1627,  1628,  1629,  1630,   382,   382,
-32768,  1632,    14,   387,   387,   387,   387,  1633,  1634,  1635,
   387,  1638,  1639,  1642,  1596,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,-32768,-32768,-32768,  1643,-32768,  1644,
-32768,-32768,-32768,  1492,  1494,-32768,-32768,  1495,-32768,-32768,
-32768,  1521,  1493,-32768,    14,  1537,  1538,  1550,  1552,-32768,
-32768,-32768,  1554,-32768,-32768,-32768,  1555,  4014,  4035,  4056,
  4077,  4098,  4119,  4140,  4161,  4182,  1539,  1546,  1558,  2601,
  1560,   223,   382,   223,   382,  1648,  1580,   387,   387,  1723,
  1724,   387,  1730,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,-32768,  1731,     3,  1561,     4,
  1562,  1568,    14,  1563,  1570,-32768,-32768,  1566,  1575,  4203,
  4224,  4245,  4266,  4287,  4308,  4329,  4350,  4371,   486,  7123,
   489,  7123,   490,  7123,  1571,  1735,   382,  1736,  1651,  1643,
    14,   387,   382,  1737,  1751,  1643,  1643,  1643,  1643,  1643,
  1643,  1643,  1643,  1643,  1643,  1753,  1643,  1754,  1643,  1756,
  1757,-32768,  1579,-32768,  1581,  4392,    14,  1583,  1588,-32768,
-32768,  4413,  4434,  4455,  4476,  4497,  4518,  6916,  6939,  6962,
  7123,-32768,  7123,-32768,  7123,-32768,-32768,  1763,  1643,  1643,
  1621,   387,   382,  1643,  1643,  1643,  1643,  1643,  1643,-32768,
-32768,-32768,-32768,  4539,  2624,  1622,  1597,  1598,  4560,  4581,
  4602,  4623,  4644,  4665,  1599,  1625,  1631,  1643,  1808,-32768,
   382,   387,  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1643,
  1643,  2647,-32768,  1636,  1641,  4686,  4707,  4728,  4749,  4770,
  4791,   495,  7123,   499,  7123,   505,  7123,  1809,   382,  1810,
  1643,  1643,  1643,  1643,  1643,  1643,  1643,  1813,  1643,  1814,
  1643,  1818,-32768,  1640,-32768,  4812,  4833,  4854,  6985,  7008,
  7031,  7123,-32768,  7123,-32768,  7123,-32768,   382,  1643,  1643,
  1643,-32768,-32768,-32768,  1645,  4875,  4896,  4917,  1646,  1647,
  1649,   382,  1643,  1643,  1643,  1643,  1643,  1643,  1652,  4938,
  4959,  4980,   508,  7123,   509,  7123,   516,  7123,   387,  1643,
  1643,  1643,  1643,  1820,  1643,  1822,  1643,  1823,  1650,  7054,
  7077,  7100,  7123,-32768,  7123,-32768,  7123,-32768,  1830,-32768,
-32768,-32768,-32768,  1653,  1654,  1655,  1643,  1643,  1643,   520,
  7123,   529,  7123,   557,  7123,  1643,  1832,  1643,  1838,  1643,
  1839,  7123,-32768,  7123,-32768,  7123,-32768,  1846,  1847,-32768
};

static const short yypgoto[] = {-32768,
     1,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1262,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -286,   -22,
-32768,  1843,  1845,  -346,    89,  1848,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, -1148, -1195,-32768,-32768,  -995,   -23,
-32768,   -29,-32768,   -85,-32768, -1029,   879,   371,  -232,  -314,
  -795,   924,-32768,  -274
};


#define	YYLAST		7302


static const short yytable[] = {   135,
   134,  1100,   231,   468,   529,   457,   458,   459,   932,  1220,
  1109,   504,   236,   179,   172,   673,    78,  1116,   806,    90,
    91,  1274,    93,   188,  1274,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   939,
     8,  1161,   290,   144,   365,   464,  1215,   940,   456,  1215,
   184,  1216,   797,   185,  1216,   348,   349,  1215,  1215,   348,
   349,   147,  1216,  1216,   348,   349,     9,   992,   348,   349,
   198,   190,   455,   456,   128,   129,   350,   118,   119,   120,
   970,   140,   971,   464,   972,  1144,   973,   141,   348,   349,
   941,   283,   284,   285,   348,   349,   286,   289,    81,   293,
   180,    82,   118,   119,   120,   351,   313,   314,   315,   316,
   520,   318,   319,    87,   321,   322,   323,   981,   330,   348,
   349,   156,   157,   982,   158,   343,   344,   345,   291,   292,
  1045,  1231,    83,   352,   346,   347,   589,   366,   798,   799,
   488,    84,   348,   349,   489,    93,   305,   306,   307,   308,
   309,   189,   363,   364,  1001,   367,   310,   369,   370,   145,
   121,   122,   123,   124,   678,   146,  1232,    85,  1273,   667,
  1236,  1276,  1274,    79,  1274,   125,   126,   467,   693,  1406,
  1408,   127,   669,   148,   237,   181,   130,   674,   373,   287,
   807,   926,   288,  1378,   160,  1380,   411,   161,   162,   409,
   163,    86,   348,   349,   413,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
   439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
   449,   450,   451,   452,   453,   454,   464,   191,   348,   349,
   128,   129,   955,   956,   463,   356,   233,   469,   234,   360,
   464,    88,   473,   474,   475,   476,   477,   478,   479,   480,
   481,   482,   483,   484,   485,   486,   487,  1215,  1326,  1327,
  1328,  1329,  1216,   494,   582,  1333,   497,   238,   583,   239,
    10,   284,   463,   121,   122,   123,   124,   508,   509,   510,
    89,   512,   513,   514,   515,   516,   517,   518,   523,   524,
   128,   129,   166,   167,   128,   129,   501,   138,   234,   531,
   532,   533,   666,   168,   538,   121,   122,   123,   124,   169,
   659,   142,   545,  1205,   660,   791,   151,   139,   550,   121,
   122,   123,   124,   348,   349,   143,   128,   129,   149,   348,
   349,   150,  1384,  1385,   348,   349,  1388,   348,   349,   530,
   128,   129,   348,   349,   812,   974,   821,   975,   664,   152,
   841,  1087,   159,  1154,    90,   324,   792,   588,  1155,   153,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   154,   831,  1438,    11,    12,    13,
    14,    15,    16,    17,    18,   348,   349,   464,   307,   308,
   309,   795,   155,   923,   128,   129,   310,   664,   284,   164,
   692,  1157,   234,   668,   670,   858,   590,   591,   592,   593,
   594,   595,   596,   597,   598,   599,   600,   601,   464,   128,
   129,   165,   240,   832,   241,   463,  1477,   765,    42,    43,
    44,    45,   174,    47,  1162,   175,   176,   409,  1163,   463,
   173,   695,   696,   242,   244,   243,   245,   701,   536,   537,
   710,   885,   886,   887,   888,   889,  1505,   711,   712,   246,
   248,   247,   249,   250,   177,   251,   715,   178,   949,   925,
   927,   182,   252,   719,   253,   254,   256,   255,   257,   183,
   258,   328,   259,   728,   729,   260,   334,   261,   262,   264,
   263,   265,   296,   297,   298,   299,   300,   186,   301,   302,
   303,   304,   305,   306,   307,   308,   309,   266,   357,   267,
   125,   325,   310,   193,   361,   362,   127,   268,   187,   269,
  1088,   130,   602,   270,   766,   271,   194,   326,   296,   297,
   298,   299,   300,   192,   301,   302,   303,   304,   305,   306,
   307,   308,   309,  1589,   272,   274,   273,   275,   310,   195,
   464,   276,   278,   277,   279,   196,   296,   297,   298,   299,
   300,   197,   301,   302,   303,   304,   305,   306,   307,   308,
   309,   964,   965,   781,   782,   657,   310,   658,   859,   232,
   229,   664,  1070,   665,   664,   280,   694,   783,   784,   785,
   786,   787,   788,   789,   294,   664,   463,   824,   281,   936,
   794,   937,   664,   800,   948,   664,  1163,  1050,  1164,   813,
   282,  1036,   811,   298,   299,   300,   311,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   312,   463,   409,   331,
  1425,   310,  1426,  1427,  1429,  1428,  1430,   317,   898,  1527,
   320,  1528,   295,  1529,   342,  1530,   845,   846,   847,  1531,
  1065,  1532,  1583,  1585,  1584,  1586,   332,   850,   851,   358,
  1587,   854,  1588,   333,  1616,   865,  1617,   335,   336,   863,
   864,    90,    91,  1618,   874,  1619,   337,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,  1620,   359,  1621,   901,   902,   903,   904,   905,   906,
   907,   908,   909,   910,   911,   912,   338,   339,   340,   341,
   353,   472,   368,   371,    26,    27,    28,    29,    30,    31,
    32,    33,   354,    34,   928,    36,    37,   355,    39,    40,
   372,   933,   374,   935,   301,   302,   303,   304,   305,   306,
   307,   308,   309,   375,   404,    52,   376,   377,   310,   463,
   378,   950,   379,   951,  1210,   380,   381,   382,   406,    53,
    54,    55,   383,   384,   385,   386,   387,   966,   967,   968,
   388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
   410,   663,   398,   985,   986,   296,   297,   298,   299,   300,
   399,   301,   302,   303,   304,   305,   306,   307,   308,   309,
   400,   401,   402,   403,   461,   310,   407,   310,   471,   408,
   506,   988,   511,   470,   519,   540,   541,   544,   547,   803,
   551,    64,   552,   553,   554,   555,  1020,   125,   126,   556,
   557,   558,   559,   127,   560,   561,   562,   563,   130,   564,
   565,   690,   566,   567,   691,   568,   569,   570,   571,   572,
   573,   574,   575,  1037,   576,   577,   578,   579,   580,   581,
   661,  1046,   584,   534,   296,   297,   298,   299,   300,   585,
   301,   302,   303,   304,   305,   306,   307,   308,   309,   586,
   662,  1055,  1056,  1122,   310,   671,   672,   677,   709,   680,
  1071,  1064,  1073,   679,  1076,   681,   682,   684,   685,   687,
   713,   688,  1079,  1080,   689,   697,   714,   721,   722,   723,
   724,   725,   727,  1090,   299,   300,  1093,   301,   302,   303,
   304,   305,   306,   307,   308,   309,  1103,   731,   732,   733,
   734,   310,   735,  1110,  1111,  1112,   736,   762,  1091,   737,
  1117,   738,   739,   740,  1121,   741,   742,   743,  1123,  1124,
  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,
   780,   790,   744,   745,   746,   747,   748,   749,   750,   751,
  1143,   752,   296,   297,   298,   299,   300,  1146,   301,   302,
   303,   304,   305,   306,   307,   308,   309,   753,   763,   754,
   793,   755,   310,   801,  1152,   756,   757,   758,   802,   759,
   760,   814,   815,   768,   817,   796,   761,   826,   819,   820,
    90,    91,   804,  1167,   810,   805,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   816,  1169,   769,   852,   853,   764,   770,   856,   771,   590,
   591,   592,   593,   594,   595,   596,   597,   598,   599,   600,
   601,   871,   872,   818,   772,   773,   827,   877,   878,   828,
   829,   774,   830,   833,   884,   775,   891,   834,   835,   776,
  1213,  1214,   836,  1219,   777,  1221,  1222,   778,   779,   837,
   838,   839,  1226,   840,   849,   861,   862,   855,   860,   866,
  1234,   867,   868,   869,   870,   873,   875,   876,  1242,   879,
   880,   881,   882,  1247,   883,   892,  1250,   895,  1252,  1253,
  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,
   893,   894,   896,   897,  1265,   899,   943,  1268,   945,   922,
   924,   930,   938,   942,   929,   934,   944,   946,   952,   953,
   954,   947,   969,   957,   958,   959,   960,   961,   962,   963,
   296,   297,   298,   299,   300,   900,   301,   302,   303,   304,
   305,   306,   307,   308,   309,   978,   125,   126,   979,  1283,
   310,   984,   127,   987,   989,   993,  1021,   130,   995,   997,
   822,    90,   502,   823,   994,   996,   998,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   999,  1338,  1339,  1340,  1341,  1342,  1343,  1344,  1345,
  1346,  1000,  1002,  1325,  1350,  1003,  1004,  1005,  1006,  1038,
    90,    91,   456,  1007,  1008,  1035,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
  1009,   118,   119,   120,  1039,  1357,  1011,  1041,  1047,  1010,
  1043,  1048,  1012,  1052,  1013,  1053,  1017,  1054,  1057,  1058,
  1390,  1391,  1392,  1393,  1394,  1395,  1396,  1397,  1398,  1400,
  1402,  1404,  1014,  1015,  1086,   848,   296,   297,   298,   299,
   300,  1094,   301,   302,   303,   304,   305,   306,   307,   308,
   309,  1059,  1060,  1016,  1018,  1061,   310,  1019,  1034,  1049,
  1113,  1062,  1068,  1411,  1069,  1063,  1436,  1072,  1074,  1077,
  1085,  1081,  1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,
  1450,  1451,  1092,  1453,  1095,  1455,  1096,   125,   126,  1102,
  1097,  1437,  1098,   127,   931,  1099,  1101,  1104,   130,   296,
   297,   298,   299,   300,   503,   301,   302,   303,   304,   305,
   306,   307,   308,   309,  1105,  1474,  1475,  1461,  1106,   310,
  1479,  1480,  1481,  1482,  1483,  1484,  1107,   491,  1108,  1114,
  1115,  1118,  1119,  1139,  1135,  1141,   125,   126,  1120,  1136,
  1137,  1140,   127,  1142,  1502,  1145,  1150,   130,  1153,  1506,
  1507,  1508,  1509,  1510,  1511,  1513,  1515,  1517,  1151,  1156,
  1158,  1165,  1166,  1170,  1172,  1173,  1175,  1207,  1174,  1176,
  1179,  1178,  1180,  1184,  1185,  1186,  1189,  1536,  1537,  1538,
  1539,  1540,  1541,  1542,  1188,  1544,  1206,  1546,   296,   297,
   298,   299,   300,  1191,   301,   302,   303,   304,   305,   306,
   307,   308,   309,  1204,  1223,  1556,  1557,  1558,   310,  1230,
  1233,  1235,  1237,  1224,  1229,  1225,  1238,  1239,  1228,  1570,
  1571,  1572,  1574,  1576,  1578,  1240,  1241,  1243,  1245,  1246,
  1249,  1248,  1264,  1138,  1244,  1251,  1590,  1591,  1592,  1593,
  1266,  1595,  1271,  1597,  1267,  1282,  1272,   296,   297,   298,
   299,   300,  1280,   301,   302,   303,   304,   305,   306,   307,
   308,   309,  1284,  1611,  1613,  1615,  1279,   310,  1288,  1312,
  1285,  1313,  1622,  1289,  1624,  1293,  1626,    90,    91,    92,
  1337,    93,  1286,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,  1291,   118,   119,
   120,  1316,  1317,  1319,  1320,  1321,  1295,  1324,  1330,  1331,
  1332,  1310,  1315,  1334,  1335,    90,    91,  1336,  1351,  1322,
  1323,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,    90,   324,  1352,  1353,  1356,
  1354,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,  1355,   296,   297,   298,   299,
   300,  1147,   301,   302,   303,   304,   305,   306,   307,   308,
   309,  1358,  1359,  1379,  1373,  1381,   310,  1383,  1386,  1387,
  1360,  1374,  1361,  1382,  1389,  1405,  1435,  1148,  1362,  1363,
  1432,  1434,  1440,  1375,  1377,  1407,  1414,  1412,  1409,   121,
   122,   123,   124,  1410,  1413,  1415,  1441,  1431,  1452,  1454,
  1149,  1456,  1457,   125,   126,  1458,  1459,  1462,  1473,   127,
   128,   129,  1463,  1476,   130,  1490,   131,  1433,   132,    90,
   502,  1491,  1492,  1439,  1499,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,  1281,
  1500,   125,   126,  1503,  1533,  1535,  1501,   127,  1543,  1545,
  1519,  1520,   130,  1547,  1548,  1594,   505,  1596,  1598,  1562,
  1599,  1566,  1567,  1478,  1568,  1603,  1579,  1623,  1607,  1608,
  1609,   125,   462,  1625,  1627,  1629,  1630,   127,   548,    69,
   767,    70,   130,  1040,    71,     0,     0,     0,     0,     0,
  1084,  1504,     0,   676,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   825,     0,     0,     0,  1534,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,   857,     0,     0,     0,
   310,     0,     0,   296,   297,   298,   299,   300,  1555,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,  1569,   310,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   125,   126,     0,     0,     0,
     0,   127,     0,     0,     0,     0,   130,     0,     0,     0,
     0,     0,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,   296,   297,   298,
   299,   300,   310,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   296,   297,   298,   299,   300,   310,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,   -10,     1,     0,   -10,   -53,   310,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,     0,
     0,     0,     0,     0,   -53,     0,     0,     0,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,     0,     0,     0,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,
   -53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   -53,   -53,   -53,     0,     0,     0,
     0,     0,     0,   -53,     0,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   -10,   -10,   -10,   -10,   -10,   -10,   -10,   -10,    26,
    27,    28,    29,    30,    31,    32,    33,     0,    34,     0,
    36,    37,     0,    39,    40,     0,   -53,     2,     3,    23,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    53,    54,    55,     0,    24,     0,
     0,     0,    25,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
     0,     0,    41,    42,    43,    44,    45,    46,    47,     0,
    48,    49,    50,    51,    52,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   199,     0,     0,    53,    54,
    55,     0,     0,     0,     0,     0,    64,    56,     0,    57,
    58,    59,    60,    61,    62,    63,    26,    27,    28,    29,
    30,    31,    32,    33,     0,    34,     0,    36,    37,     0,
    39,    40,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,    52,   539,     0,
     0,     0,   310,     0,   460,     0,   200,   201,   202,     0,
    64,    53,    54,    55,   203,   204,   205,   206,   207,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,     0,   223,   224,   225,   226,   227,   228,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,    64,     0,  1211,     0,  1212,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
     0,     0,     0,     0,  1308,     0,  1309,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,     0,
   296,   297,   298,   299,   300,   496,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,     0,   296,   297,   298,   299,   300,   498,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,     0,   296,   297,   298,   299,
   300,   698,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,     0,   296,
   297,   298,   299,   300,   702,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,   296,   297,   298,   299,   300,   703,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,     0,   296,   297,   298,   299,   300,
   844,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,     0,   296,   297,
   298,   299,   300,  1066,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
     0,   296,   297,   298,   299,   300,  1227,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,     0,   296,   297,   298,   299,   300,  1269,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,   296,   297,   298,
   299,   300,  1270,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,     0,
   296,   297,   298,   299,   300,  1275,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,     0,   296,   297,   298,   299,   300,  1277,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,     0,   296,   297,   298,   299,
   300,  1278,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,     0,   296,
   297,   298,   299,   300,  1311,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,   296,   297,   298,   299,   300,  1376,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,     0,   296,   297,   298,   299,   300,
  1489,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,     0,   296,   297,
   298,   299,   300,  1518,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,   521,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,   522,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,   637,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,   638,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,   651,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,   652,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
   653,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,   654,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,   655,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,   656,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,   716,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,   717,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,   718,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,   842,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,   843,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,   976,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
   977,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,   990,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,   991,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1022,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1023,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1024,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1025,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1026,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1027,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1028,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1029,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1030,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1031,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1032,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1033,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1044,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1051,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1159,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1160,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1168,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1171,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1182,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1187,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1190,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1192,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1193,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1194,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1195,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1196,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1197,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1198,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1199,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1200,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1201,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1202,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1203,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1208,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1209,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1287,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1296,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1297,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1298,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1299,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1300,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1301,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1302,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1303,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1304,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1364,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1365,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1366,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1367,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1368,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1369,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1370,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1371,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1372,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1416,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1417,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1418,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1419,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1420,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1421,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1422,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1423,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1424,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1460,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1464,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1465,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1466,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1467,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1468,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1469,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1488,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1493,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1494,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1495,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1496,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1497,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1498,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1521,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1522,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1523,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1524,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1525,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
   296,   297,   298,   299,   300,  1526,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,   296,   297,   298,   299,   300,  1549,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,   296,   297,   298,   299,   300,  1550,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,   296,   297,   298,   299,   300,  1551,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,   296,   297,   298,   299,   300,  1563,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,   296,   297,   298,   299,   300,
  1564,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,   296,   297,   298,   299,
   300,  1565,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,   296,   297,   298,
   299,   300,  1580,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,   296,   297,
   298,   299,   300,  1581,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,   296,
   297,   298,   299,   300,  1582,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   466,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   587,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   616,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   618,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   620,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   622,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   624,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   626,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   628,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   630,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   632,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   634,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   636,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   640,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   642,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   644,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   646,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   648,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   650,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   720,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   914,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   916,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   918,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,   920,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   921,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,     0,     0,  1042,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   490,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   492,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   493,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   495,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   499,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   500,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   507,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   542,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   543,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   546,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   549,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   615,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   617,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   619,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   621,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   623,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   625,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   627,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   629,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   631,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   633,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   635,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   639,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   641,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   643,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   645,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   647,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   649,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   683,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   686,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   699,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   700,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   704,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   705,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,   706,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,   707,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,   708,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,   726,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,   730,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,   913,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,   915,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,   917,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,   919,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
   980,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,  1067,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,  1089,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,  1177,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,  1181,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,  1183,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,  1290,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,  1292,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,  1294,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,  1305,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
  1306,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310,     0,  1307,   296,   297,   298,   299,   300,     0,
   301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     0,     0,     0,     0,   310,     0,  1470,   296,   297,   298,
   299,   300,     0,   301,   302,   303,   304,   305,   306,   307,
   308,   309,     0,     0,     0,     0,     0,   310,     0,  1471,
   296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
   305,   306,   307,   308,   309,     0,     0,     0,     0,     0,
   310,     0,  1472,   296,   297,   298,   299,   300,     0,   301,
   302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     0,     0,     0,   310,     0,  1552,   296,   297,   298,   299,
   300,     0,   301,   302,   303,   304,   305,   306,   307,   308,
   309,     0,     0,     0,     0,     0,   310,     0,  1553,   296,
   297,   298,   299,   300,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,     0,     0,     0,     0,   310,
     0,  1554,   296,   297,   298,   299,   300,     0,   301,   302,
   303,   304,   305,   306,   307,   308,   309,     0,     0,     0,
     0,     0,   310,     0,  1600,   296,   297,   298,   299,   300,
     0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     0,     0,     0,     0,     0,   310,     0,  1601,   296,   297,
   298,   299,   300,     0,   301,   302,   303,   304,   305,   306,
   307,   308,   309,     0,     0,     0,     0,     0,   310,     0,
  1602,   296,   297,   298,   299,   300,     0,   301,   302,   303,
   304,   305,   306,   307,   308,   309,     0,     0,     0,     0,
     0,   310
};

static const short yycheck[] = {    23,
    23,   997,    88,   290,   351,   280,   281,   282,   804,  1158,
  1006,   326,     4,     4,    44,     4,     3,  1013,     4,     3,
     4,  1217,     7,    42,  1220,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     6,
     6,  1081,     4,    64,    87,   288,    65,     6,     5,    65,
    38,    70,     4,    41,    70,   169,   170,    65,    65,   169,
   170,    64,    70,    70,   169,   170,   150,   181,   169,   170,
    80,     4,     4,     5,   176,   177,   186,    34,    35,    36,
   185,   180,   187,   326,   185,     6,   187,   186,   169,   170,
    49,   125,   126,   127,   169,   170,   130,   131,     7,   133,
   101,     6,    34,    35,    36,   186,   140,   141,   142,   143,
   185,   145,   146,   180,   148,   149,   150,   180,   152,   169,
   170,    41,    42,   186,    44,   165,   166,   167,    90,    91,
   936,  1171,     6,   173,   168,   169,   186,   180,    90,    91,
   181,     6,   169,   170,   185,     7,   169,   170,   171,   172,
   173,   180,   186,   187,   181,   189,   179,   191,   192,   180,
   155,   156,   157,   158,   489,   186,  1172,     6,   187,   466,
  1176,   187,  1378,   170,  1380,   169,   170,     7,   503,   187,
   187,   175,   467,   186,   186,   186,   180,   186,   198,   183,
   186,     7,   186,  1352,    38,  1354,   236,    41,    42,   233,
    44,     6,   169,   170,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   489,   180,   169,   170,
   176,   177,    55,    56,   288,   177,   182,   290,   184,   181,
   503,   180,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   310,    65,  1284,  1285,
  1286,  1287,    70,   317,   181,  1291,   320,   180,   185,   182,
     3,   325,   326,   155,   156,   157,   158,   331,   332,   333,
   180,   335,   336,   337,   338,   339,   340,   341,   348,   349,
   176,   177,   169,   170,   176,   177,   182,   180,   184,   353,
   354,   355,   184,   180,   358,   155,   156,   157,   158,   186,
   181,   180,   366,  1139,   185,   660,    46,     6,   372,   155,
   156,   157,   158,   169,   170,   180,   176,   177,   180,   169,
   170,   180,  1358,  1359,   169,   170,  1362,   169,   170,   185,
   176,   177,   169,   170,   181,   185,   691,   187,   185,   180,
   185,     8,    44,   185,     3,     4,   661,   410,   185,    42,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    42,     6,  1412,   120,   121,   122,
   123,   124,   125,   126,   127,   169,   170,   660,   171,   172,
   173,   664,    42,   181,   176,   177,   179,   185,   462,   180,
   182,   185,   184,   466,   468,     8,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,   691,   176,
   177,   186,   180,    54,   182,   489,  1462,   184,    58,    59,
    60,    61,    38,    63,   181,    41,    42,   501,   185,   503,
   186,   505,   506,   180,   180,   182,   182,   511,     6,     7,
   520,   105,   106,   107,   108,   109,  1492,   521,   522,   180,
   180,   182,   182,   180,   186,   182,   530,    42,   823,   796,
   797,     6,   180,   537,   182,   180,   180,   182,   182,     6,
   180,   151,   182,   547,   548,   180,   156,   182,   180,   180,
   182,   182,   159,   160,   161,   162,   163,   180,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   180,   178,   182,
   169,   170,   179,     6,   184,   185,   175,   180,   180,   182,
   187,   180,   187,   180,   587,   182,     4,   186,   159,   160,
   161,   162,   163,   180,   165,   166,   167,   168,   169,   170,
   171,   172,   173,  1579,   180,   180,   182,   182,   179,     4,
   823,   180,   180,   182,   182,    42,   159,   160,   161,   162,
   163,     3,   165,   166,   167,   168,   169,   170,   171,   172,
   173,     6,     7,   637,   638,   182,   179,   184,   181,     5,
   180,   185,   969,   187,   185,   180,   187,   651,   652,   653,
   654,   655,   656,   657,     6,   185,   660,   187,   180,   185,
   664,   187,   185,   667,   187,   185,   185,   187,   187,   679,
   180,   926,   676,   161,   162,   163,     6,   165,   166,   167,
   168,   169,   170,   171,   172,   173,     5,   691,   692,   186,
   185,   179,   187,   185,   185,   187,   187,   180,   764,   185,
   180,   187,     6,   185,     4,   187,   716,   717,   718,   185,
   965,   187,   185,   185,   187,   187,   180,   721,   722,   182,
   185,   725,   187,   180,   185,   735,   187,   186,   186,   733,
   734,     3,     4,   185,   744,   187,   180,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   185,     6,   187,   768,   769,   770,   771,   772,   773,
   774,   775,   776,   777,   778,   779,   180,   180,   180,   180,
   186,     6,    93,     6,    38,    39,    40,    41,    42,    43,
    44,    45,   186,    47,   797,    49,    50,   186,    52,    53,
   180,   805,   180,   807,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   180,     5,    69,   180,   180,   179,   823,
   180,   825,   180,   827,  1151,   180,   180,   180,   185,    83,
    84,    85,   180,   180,   180,   180,   180,   841,   842,   843,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
     4,   461,   180,   857,   858,   159,   160,   161,   162,   163,
   180,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   180,   180,   180,   180,     7,   179,   181,   179,     7,   185,
     7,   861,     7,   184,   181,     7,     7,    88,   186,     6,
   151,   145,     5,     5,     5,     5,   899,   169,   170,     5,
     5,     5,     5,   175,     5,     5,     5,     5,   180,     5,
     5,   183,     5,     5,   186,     5,     5,     5,     5,     5,
     5,     5,   138,   927,     5,     5,     5,     5,     3,     5,
   185,   941,     5,   187,   159,   160,   161,   162,   163,     6,
   165,   166,   167,   168,   169,   170,   171,   172,   173,     5,
   181,   955,   956,  1019,   179,     6,     4,     6,   184,     6,
   970,   965,   972,     7,   974,     7,     7,     7,     6,     6,
   187,     7,   976,   977,     7,     7,   187,   186,   186,     7,
     7,   180,     7,   987,   162,   163,   990,   165,   166,   167,
   168,   169,   170,   171,   172,   173,  1000,   152,   185,   185,
   185,   179,   185,  1007,  1008,  1009,   185,     5,   988,   185,
  1014,   185,   185,   185,  1018,   185,   185,   185,  1022,  1023,
  1024,  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1032,  1033,
     6,     4,   185,   185,   185,   185,   185,   185,   185,   185,
  1044,   185,   159,   160,   161,   162,   163,  1051,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   185,   181,   185,
     6,   185,   179,     6,  1068,   185,   185,   185,     6,   185,
   185,   681,   682,   180,   684,   183,   185,     6,   688,   689,
     3,     4,     7,  1087,     6,   182,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     7,  1091,   180,   723,   724,   185,   180,   727,   180,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,   741,   742,     7,   180,   180,   186,   747,   748,     7,
     7,   180,     7,     7,   754,   180,   756,     7,     7,   180,
  1154,  1155,     7,  1157,   180,  1159,  1160,   180,   180,     7,
     7,     7,  1166,     4,     6,   148,     3,     7,     7,     3,
  1174,     3,   171,     3,     3,     3,     3,     3,  1182,     3,
     3,     3,     3,  1187,     3,     3,  1190,     3,  1192,  1193,
  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,
     5,     5,     3,     6,  1208,     4,   816,  1211,   818,   181,
   181,     7,     6,     6,   184,   184,     6,     6,   828,   829,
   830,     6,   186,   833,   834,   835,   836,   837,   838,   839,
   159,   160,   161,   162,   163,   187,   165,   166,   167,   168,
   169,   170,   171,   172,   173,     6,   169,   170,     6,  1229,
   179,    89,   175,   186,   185,   185,     6,   180,   185,   185,
   183,     3,     4,   186,   181,   181,   181,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   185,  1296,  1297,  1298,  1299,  1300,  1301,  1302,  1303,
  1304,   185,   185,  1283,  1308,   181,   181,   185,   185,     6,
     3,     4,     5,   185,   185,   925,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   185,    34,    35,    36,     4,  1325,   181,     6,     6,   185,
    90,     6,   185,     6,   185,     6,   181,     6,     6,     6,
  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,
  1374,  1375,   185,   185,   984,     6,   159,   160,   161,   162,
   163,   991,   165,   166,   167,   168,   169,   170,   171,   172,
   173,     6,     6,   185,   185,     6,   179,   185,   184,   183,
  1010,     6,   185,  1383,   187,     6,  1410,     6,     6,     6,
    89,     7,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,
  1424,  1425,     3,  1427,     6,  1429,     3,   169,   170,     3,
     6,  1411,   171,   175,     6,     6,     6,     6,   180,   159,
   160,   161,   162,   163,   186,   165,   166,   167,   168,   169,
   170,   171,   172,   173,     3,  1459,  1460,  1437,     6,   179,
  1464,  1465,  1466,  1467,  1468,  1469,     6,   187,     3,     6,
     3,     3,     3,     7,     4,   184,   169,   170,     6,     6,
     6,     6,   175,   184,  1488,   183,     6,   180,   187,  1493,
  1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,   186,   186,
   186,   186,    86,   181,   185,   185,   181,     4,   185,   185,
   181,   185,   181,   185,   181,   181,   181,  1521,  1522,  1523,
  1524,  1525,  1526,  1527,   185,  1529,    91,  1531,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   181,    89,  1549,  1550,  1551,   179,     6,
     3,     6,     6,  1163,   148,  1165,     3,     6,  1168,  1563,
  1564,  1565,  1566,  1567,  1568,     6,     6,     6,     6,     6,
     6,     3,     6,     6,  1184,     5,  1580,  1581,  1582,  1583,
     5,  1585,     6,  1587,   187,   187,   186,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   185,  1607,  1608,  1609,   186,   179,   181,     6,
   185,     6,  1616,   181,  1618,   181,  1620,     3,     4,     5,
     5,     7,   185,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   185,    34,    35,
    36,     6,     6,     6,     6,     6,   185,     6,     6,     6,
     6,   185,  1272,     6,     6,     3,     4,     6,     5,  1279,
  1280,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     3,     4,   186,   185,   187,
   186,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   185,   159,   160,   161,   162,
   163,     6,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   185,   185,  1353,   186,  1355,   179,   148,     6,     6,
   181,   186,   181,    86,     5,     5,    86,     6,   185,   185,
     6,     6,     6,   186,   185,   185,   181,   185,   187,   155,
   156,   157,   158,   186,   185,   181,     6,   187,     6,     6,
     6,     6,     6,   169,   170,   187,   186,   185,     6,   175,
   176,   177,   185,   153,   180,   154,   182,  1407,   184,     3,
     4,   185,   185,  1413,   186,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     6,
   186,   169,   170,     6,     6,     6,   186,   175,     6,     6,
   185,   181,   180,     6,   185,     6,     8,     6,     6,   185,
   181,   186,   186,  1463,   186,     6,   185,     6,   186,   186,
   186,   169,   170,     6,     6,     0,     0,   175,     8,     7,
   589,     7,   180,   930,     7,    -1,    -1,    -1,    -1,    -1,
   982,  1491,    -1,     8,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,     8,    -1,    -1,    -1,  1519,
   159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,     8,    -1,    -1,    -1,
   179,    -1,    -1,   159,   160,   161,   162,   163,  1548,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,  1562,   179,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   169,   170,    -1,    -1,    -1,
    -1,   175,    -1,    -1,    -1,    -1,   180,    -1,    -1,    -1,
    -1,    -1,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   159,   160,   161,
   162,   163,   179,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   159,   160,   161,   162,   163,   179,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,   159,   160,   161,   162,
   163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
   173,     0,     1,    -1,     3,     4,   179,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    47,    48,
    49,    50,    51,    52,    53,    -1,    -1,    -1,    57,    58,
    59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    83,    84,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    92,    -1,    94,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,   121,   122,   123,   124,   125,   126,   127,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    47,    -1,
    49,    50,    -1,    52,    53,    -1,   145,   146,   147,     4,
   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    83,    84,    85,    -1,    33,    -1,
    -1,    -1,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    47,    48,    49,    50,    51,    52,    53,    -1,
    -1,    -1,    57,    58,    59,    60,    61,    62,    63,    -1,
    65,    66,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    83,    84,
    85,    -1,    -1,    -1,    -1,    -1,   145,    92,    -1,    94,
    95,    96,    97,    98,    99,   100,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
    52,    53,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    69,   187,    -1,
    -1,    -1,   179,    -1,   181,    -1,   102,   103,   104,    -1,
   145,    83,    84,    85,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,    -1,   139,   140,   141,   142,   143,   144,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   145,    -1,   185,    -1,   187,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
    -1,    -1,    -1,    -1,   185,    -1,   187,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
   159,   160,   161,   162,   163,   187,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,    -1,   159,   160,   161,   162,   163,   187,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,    -1,   159,   160,   161,   162,
   163,   187,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,   159,
   160,   161,   162,   163,   187,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,   159,   160,   161,   162,   163,   187,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,    -1,   159,   160,   161,   162,   163,
   187,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,   159,   160,
   161,   162,   163,   187,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
    -1,   159,   160,   161,   162,   163,   187,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,    -1,    -1,   159,   160,   161,   162,   163,   187,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,   159,   160,   161,
   162,   163,   187,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
   159,   160,   161,   162,   163,   187,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,    -1,   159,   160,   161,   162,   163,   187,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,    -1,   159,   160,   161,   162,
   163,   187,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,   159,
   160,   161,   162,   163,   187,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,   159,   160,   161,   162,   163,   187,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,    -1,   159,   160,   161,   162,   163,
   187,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,   159,   160,
   161,   162,   163,   187,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
   159,   160,   161,   162,   163,   185,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   159,   160,   161,   162,   163,   185,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,   159,   160,   161,   162,   163,   185,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,   159,   160,   161,   162,   163,   185,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,   185,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,   163,
   185,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,   162,
   163,   185,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,   161,
   162,   163,   185,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,   160,
   161,   162,   163,   185,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,   159,
   160,   161,   162,   163,   185,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,    -1,    -1,   183,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,    -1,   181,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,
   159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,   181,   159,   160,   161,   162,   163,    -1,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,
   163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,    -1,   181,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,
   159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,   181,   159,   160,   161,   162,   163,    -1,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,
   163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,    -1,   181,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,
   159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,   181,   159,   160,   161,   162,   163,    -1,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,
   163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,    -1,   181,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,
   159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,   181,   159,   160,   161,   162,   163,    -1,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,
   163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,    -1,   181,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,
   159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,   181,   159,   160,   161,   162,   163,    -1,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,
   163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179,    -1,   181,   159,   160,   161,   162,   163,    -1,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,
   162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,
   159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,    -1,   181,   159,   160,   161,   162,   163,    -1,   165,
   166,   167,   168,   169,   170,   171,   172,   173,    -1,    -1,
    -1,    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,
   163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,
   160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,
    -1,   181,   159,   160,   161,   162,   163,    -1,   165,   166,
   167,   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,
    -1,    -1,   179,    -1,   181,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,   171,   172,   173,
    -1,    -1,    -1,    -1,    -1,   179,    -1,   181,   159,   160,
   161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
    -1,   179
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 156 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 164 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 165 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 170 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 184 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 191 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 208 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 209 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 210 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 215 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 220 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 231 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 234 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 238 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 244 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 250 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 257 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 263 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 267 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 271 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 278 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 282 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 287 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 291 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 295 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 299 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 303 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 307 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 311 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 315 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 321 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 324 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 327 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 331 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 335 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 339 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 343 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 348 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 351 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 355 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 358 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 365 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 378 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 381 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh file format read");
    ;
    break;}
case 55:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 403 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 68:
#line 407 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Printf format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 69:
#line 437 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 70:
#line 441 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 71:
#line 448 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 84:
#line 467 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 469 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 474 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 87:
#line 479 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 88:
#line 486 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 488 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 493 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 91:
#line 498 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 92:
#line 505 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 507 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 512 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 517 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 96:
#line 524 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 526 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 532 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 538 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 100:
#line 545 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 547 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 553 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 559 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 104:
#line 566 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 568 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 574 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 580 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 108:
#line 587 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 589 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 596 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 605 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 112:
#line 612 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 614 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 621 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 630 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 116:
#line 637 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 639 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 646 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 655 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 120:
#line 662 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 664 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 672 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 681 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 124:
#line 688 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 690 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 698 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 707 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 128:
#line 714 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 716 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 724 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 733 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 132:
#line 745 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 133:
#line 746 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 134:
#line 747 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 135:
#line 748 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 136:
#line 749 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 137:
#line 752 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 138:
#line 753 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 139:
#line 760 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 140:
#line 787 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 141:
#line 821 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	    }
	    List_Add(Symbol_L, &TheSymbol);
	  }
	  else
	    vyyerror("Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 142:
#line 868 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 143:
#line 883 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 144:
#line 892 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 145:
#line 907 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 146:
#line 919 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 147:
#line 933 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 148:
#line 956 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 149:
#line 980 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 150:
#line 992 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 151:
#line 1006 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 152:
#line 1018 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 153:
#line 1032 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 154:
#line 1048 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 1064 "Gmsh.y"
{
#ifndef _NOPLUGIN
    if(CTX.default_plugins){
      try {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].d); 
      }
      catch (...) {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
    }
#endif
  ;
    break;}
case 156:
#line 1077 "Gmsh.y"
{
#ifndef _NOPLUGIN
    if(CTX.default_plugins){
      try {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].c); 
      }
      catch (...) {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
    }
#endif
  ;
    break;}
case 157:
#line 1101 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 1108 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 159:
#line 1114 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 160:
#line 1133 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 161:
#line 1144 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 162:
#line 1152 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1158 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1164 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1183 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 166:
#line 1189 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1195 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 168:
#line 1212 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 169:
#line 1218 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1224 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1230 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	vyyerror("Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
		 List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 172:
#line 1241 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BEZIER,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	vyyerror("Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
		 List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 173:
#line 1252 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong definition of Nurbs Curve %d: "
		 "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
		 (int)yyvsp[-8].d, 
		 List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
	for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
	  List_Read(yyvsp[-5].l,i,&d);
	  j = (int)d;
	  List_Add(Temp,&j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 174:
#line 1274 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 175:
#line 1286 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1292 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 177:
#line 1311 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 178:
#line 1334 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 179:
#line 1342 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 180:
#line 1346 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1352 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 182:
#line 1358 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 183:
#line 1370 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 184:
#line 1376 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1382 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 186:
#line 1395 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 187:
#line 1400 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 188:
#line 1405 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 189:
#line 1410 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 190:
#line 1417 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 191:
#line 1418 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 192:
#line 1419 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 193:
#line 1424 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 194:
#line 1428 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 195:
#line 1440 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 196:
#line 1458 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 197:
#line 1465 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 198:
#line 1470 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 199:
#line 1482 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  //
	  //Est-ce grave de laisser le stream ouvert? Si on fait le
	  //fclose, on ne peut pas faire appel a une fonction
	  //(Function) definie en dehors de son fichier de
	  //definition...
	  //
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing system call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 200:
#line 1549 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 201:
#line 1569 "Gmsh.y"
{
#ifndef _NOPLUGIN
    if(CTX.default_plugins)
      GMSH_PluginManager::Instance()->Action(yyvsp[-4].c,yyvsp[-1].c,0); 
#endif
   ;
    break;}
case 202:
#line 1576 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 203:
#line 1580 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 204:
#line 1602 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 205:
#line 1616 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 206:
#line 1630 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 207:
#line 1655 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 208:
#line 1680 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 209:
#line 1706 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 210:
#line 1712 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 211:
#line 1717 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 212:
#line 1722 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 213:
#line 1726 "Gmsh.y"
{
    ;
    break;}
case 214:
#line 1738 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 215:
#line 1743 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 216:
#line 1752 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 217:
#line 1756 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 218:
#line 1760 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 219:
#line 1765 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],0.,0.,0.,0.,&extr);
    ;
    break;}
case 220:
#line 1769 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 221:
#line 1774 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-12].d,yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,&extr);
    ;
    break;}
case 222:
#line 1781 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 223:
#line 1785 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 224:
#line 1789 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 225:
#line 1794 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(1,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],0.,0.,0.,0.,vol,&extr);
    ;
    break;}
case 226:
#line 1799 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 227:
#line 1805 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(0,(int)yyvsp[-12].d,yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 228:
#line 1813 "Gmsh.y"
{
    ;
    break;}
case 229:
#line 1816 "Gmsh.y"
{
    ;
    break;}
case 230:
#line 1822 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(extr.mesh.NbLayer > NB_LAYER_MAX){
	vyyerror("Too many layers in extrusion");
      }
      else if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	  List_Read(yyvsp[-6].l,i,&d);
	  j = (int)d;
	  extr.mesh.NbElmLayer[i] = j;
	  List_Read(yyvsp[-4].l,i,&d);
	  j = (int)d;
	  extr.mesh.ZonLayer[i] = j;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	vyyerror("Wrong layer definition {%d, %d, %d}", 
	       List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 231:
#line 1851 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 232:
#line 1862 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 233:
#line 1880 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 234:
#line 1898 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 235:
#line 1916 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong definition of Transfinite Surface %d: "
		   "%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 236:
#line 1938 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong definition of Elliptic Surface %d: "
		   "%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 237:
#line 1959 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	Msg(WARNING, "Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong definition of Transfinite Volume %d: "
		   "%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 238:
#line 1980 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 239:
#line 1994 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 240:
#line 2016 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 241:
#line 2020 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 242:
#line 2031 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 243:
#line 2032 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 244:
#line 2033 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 245:
#line 2034 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 246:
#line 2035 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 247:
#line 2039 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 248:
#line 2040 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 249:
#line 2041 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 250:
#line 2042 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 251:
#line 2043 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 252:
#line 2044 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 253:
#line 2045 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 254:
#line 2046 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 255:
#line 2048 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 256:
#line 2054 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 257:
#line 2055 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 258:
#line 2056 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 259:
#line 2057 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 260:
#line 2058 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 261:
#line 2059 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 262:
#line 2060 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 263:
#line 2061 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 264:
#line 2062 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 265:
#line 2063 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 266:
#line 2064 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 267:
#line 2065 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 268:
#line 2066 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2067 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 270:
#line 2068 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2069 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 272:
#line 2070 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2071 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 274:
#line 2072 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2073 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 276:
#line 2074 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 277:
#line 2075 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 278:
#line 2076 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2077 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2078 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 281:
#line 2079 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2080 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 283:
#line 2081 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 284:
#line 2082 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 285:
#line 2083 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 286:
#line 2084 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 287:
#line 2085 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 288:
#line 2087 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 289:
#line 2088 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 290:
#line 2089 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 291:
#line 2090 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 292:
#line 2091 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 293:
#line 2092 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 294:
#line 2093 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 295:
#line 2094 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 296:
#line 2095 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 297:
#line 2096 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 298:
#line 2097 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 299:
#line 2098 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 300:
#line 2099 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 301:
#line 2100 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 302:
#line 2101 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 303:
#line 2102 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 304:
#line 2103 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 305:
#line 2104 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 306:
#line 2105 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 307:
#line 2106 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 308:
#line 2107 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 309:
#line 2116 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 310:
#line 2117 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 311:
#line 2118 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 312:
#line 2119 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 313:
#line 2124 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 314:
#line 2135 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 315:
#line 2152 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 316:
#line 2163 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 317:
#line 2182 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 318:
#line 2198 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 319:
#line 2214 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 320:
#line 2230 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 321:
#line 2248 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 322:
#line 2252 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 323:
#line 2256 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 324:
#line 2260 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 325:
#line 2264 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 326:
#line 2270 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 327:
#line 2274 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 328:
#line 2278 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 329:
#line 2282 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 330:
#line 2289 "Gmsh.y"
{
    ;
    break;}
case 331:
#line 2292 "Gmsh.y"
{
    ;
    break;}
case 332:
#line 2298 "Gmsh.y"
{
    ;
    break;}
case 333:
#line 2301 "Gmsh.y"
{
    ;
    break;}
case 334:
#line 2307 "Gmsh.y"
{
    ;
    break;}
case 335:
#line 2310 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 336:
#line 2314 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 337:
#line 2321 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 338:
#line 2326 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 339:
#line 2334 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 340:
#line 2339 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 341:
#line 2343 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 342:
#line 2347 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 343:
#line 2358 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 344:
#line 2364 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 345:
#line 2375 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 346:
#line 2389 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 347:
#line 2405 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 348:
#line 2425 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 349:
#line 2450 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 350:
#line 2455 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 351:
#line 2459 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 352:
#line 2463 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 353:
#line 2475 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 354:
#line 2479 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 355:
#line 2490 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 356:
#line 2495 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 357:
#line 2514 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 358:
#line 2518 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 359:
#line 2532 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 360:
#line 2537 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 361:
#line 2544 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 362:
#line 2548 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 363:
#line 2556 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 364:
#line 2569 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 365:
#line 2573 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Sprintf format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
      strcpy(yyval.c, tmpstring);
      List_Delete(yyvsp[-1].l);
      Free(yyvsp[-3].c);
    ;
    break;}
case 366:
#line 2598 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 367:
#line 2612 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2627 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


