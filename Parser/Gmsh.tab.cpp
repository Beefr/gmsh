
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tToday	293
#define	tPoint	294
#define	tCircle	295
#define	tEllipse	296
#define	tLine	297
#define	tSurface	298
#define	tSpline	299
#define	tVolume	300
#define	tCharacteristic	301
#define	tLength	302
#define	tParametric	303
#define	tElliptic	304
#define	tPlane	305
#define	tRuled	306
#define	tTriangulation	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tDiscrete	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tIntersect	326
#define	tAttractor	327
#define	tLayers	328
#define	tAlias	329
#define	tAliasWithOptions	330
#define	tScalarPoint	331
#define	tVectorPoint	332
#define	tTensorPoint	333
#define	tScalarLine	334
#define	tVectorLine	335
#define	tTensorLine	336
#define	tScalarTriangle	337
#define	tVectorTriangle	338
#define	tTensorTriangle	339
#define	tScalarQuadrangle	340
#define	tVectorQuadrangle	341
#define	tTensorQuadrangle	342
#define	tScalarTetrahedron	343
#define	tVectorTetrahedron	344
#define	tTensorTetrahedron	345
#define	tScalarHexahedron	346
#define	tVectorHexahedron	347
#define	tTensorHexahedron	348
#define	tScalarPrism	349
#define	tVectorPrism	350
#define	tTensorPrism	351
#define	tScalarPyramid	352
#define	tVectorPyramid	353
#define	tTensorPyramid	354
#define	tText2D	355
#define	tText3D	356
#define	tInterpolationScheme	357
#define	tTime	358
#define	tCombine	359
#define	tBSpline	360
#define	tBezier	361
#define	tNurbs	362
#define	tOrder	363
#define	tWith	364
#define	tBounds	365
#define	tKnots	366
#define	tColor	367
#define	tColorTable	368
#define	tFor	369
#define	tIn	370
#define	tEndFor	371
#define	tIf	372
#define	tEndIf	373
#define	tExit	374
#define	tReturn	375
#define	tCall	376
#define	tFunction	377
#define	tTrimmed	378
#define	tShow	379
#define	tHide	380
#define	tGetValue	381
#define	tB_SPLINE_SURFACE_WITH_KNOTS	382
#define	tB_SPLINE_CURVE_WITH_KNOTS	383
#define	tCARTESIAN_POINT	384
#define	tTRUE	385
#define	tFALSE	386
#define	tUNSPECIFIED	387
#define	tU	388
#define	tV	389
#define	tEDGE_CURVE	390
#define	tVERTEX_POINT	391
#define	tORIENTED_EDGE	392
#define	tPLANE	393
#define	tFACE_OUTER_BOUND	394
#define	tEDGE_LOOP	395
#define	tADVANCED_FACE	396
#define	tVECTOR	397
#define	tDIRECTION	398
#define	tAXIS2_PLACEMENT_3D	399
#define	tISO	400
#define	tENDISO	401
#define	tENDSEC	402
#define	tDATA	403
#define	tHEADER	404
#define	tFILE_DESCRIPTION	405
#define	tFILE_SCHEMA	406
#define	tFILE_NAME	407
#define	tMANIFOLD_SOLID_BREP	408
#define	tCLOSED_SHELL	409
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	410
#define	tFACE_BOUND	411
#define	tCYLINDRICAL_SURFACE	412
#define	tCONICAL_SURFACE	413
#define	tCIRCLE	414
#define	tTRIMMED_CURVE	415
#define	tGEOMETRIC_SET	416
#define	tCOMPOSITE_CURVE_SEGMENT	417
#define	tCONTINUOUS	418
#define	tCOMPOSITE_CURVE	419
#define	tTOROIDAL_SURFACE	420
#define	tPRODUCT_DEFINITION	421
#define	tPRODUCT_DEFINITION_SHAPE	422
#define	tSHAPE_DEFINITION_REPRESENTATION	423
#define	tELLIPSE	424
#define	tSolid	425
#define	tEndSolid	426
#define	tVertex	427
#define	tFacet	428
#define	tNormal	429
#define	tOuter	430
#define	tLoopSTL	431
#define	tEndLoop	432
#define	tEndFacet	433
#define	tAFFECTPLUS	434
#define	tAFFECTMINUS	435
#define	tAFFECTTIMES	436
#define	tAFFECTDIVIDE	437
#define	tOR	438
#define	tAND	439
#define	tEQUAL	440
#define	tNOTEQUAL	441
#define	tAPPROXEQUAL	442
#define	tLESSOREQUAL	443
#define	tGREATEROREQUAL	444
#define	tCROSSPRODUCT	445
#define	tPLUSPLUS	446
#define	tMINUSMINUS	447
#define	UNARYPREC	448

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.230 2005-01-16 20:44:35 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 74 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2408
#define	YYFLAG		-32768
#define	YYNTBASE	214

#define YYTRANSLATE(x) ((unsigned)(x) <= 448 ? yytranslate[x] : 352)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   200,     2,   210,     2,   198,     2,     2,   205,
   206,   196,   194,   211,   195,   209,   197,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   190,
     2,   192,   184,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   207,     2,   208,   204,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   212,     2,   213,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   185,   186,   187,
   188,   189,   191,   193,   199,   201,   202,   203
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1973,  1986,  1995,  2004,  2013,  2026,  2041,  2056,  2071,
  2094,  2115,  2124,  2133,  2142,  2150,  2159,  2165,  2177,  2183,
  2193,  2195,  2197,  2199,  2200,  2203,  2210,  2217,  2224,  2231,
  2236,  2243,  2250,  2257,  2262,  2269,  2273,  2278,  2284,  2288,
  2292,  2297,  2302,  2306,  2314,  2318,  2326,  2330,  2333,  2336,
  2352,  2355,  2362,  2371,  2380,  2391,  2393,  2396,  2398,  2402,
  2407,  2409,  2418,  2431,  2446,  2447,  2460,  2461,  2478,  2479,
  2498,  2507,  2520,  2535,  2536,  2549,  2550,  2567,  2568,  2587,
  2596,  2609,  2624,  2625,  2638,  2639,  2656,  2657,  2676,  2678,
  2681,  2691,  2699,  2702,  2709,  2719,  2729,  2738,  2747,  2756,
  2763,  2768,  2771,  2774,  2776,  2778,  2780,  2782,  2784,  2786,
  2790,  2793,  2796,  2799,  2803,  2807,  2811,  2815,  2819,  2823,
  2827,  2831,  2835,  2839,  2843,  2847,  2851,  2855,  2861,  2866,
  2871,  2876,  2881,  2886,  2891,  2896,  2901,  2906,  2911,  2918,
  2923,  2928,  2933,  2938,  2943,  2948,  2955,  2962,  2969,  2974,
  2979,  2984,  2989,  2994,  2999,  3004,  3009,  3014,  3019,  3024,
  3031,  3036,  3041,  3046,  3051,  3056,  3061,  3068,  3075,  3082,
  3087,  3089,  3091,  3093,  3095,  3097,  3102,  3107,  3110,  3116,
  3120,  3127,  3132,  3140,  3147,  3149,  3152,  3155,  3159,  3163,
  3175,  3185,  3193,  3201,  3202,  3206,  3208,  3212,  3213,  3217,
  3221,  3223,  3227,  3229,  3231,  3235,  3240,  3244,  3250,  3255,
  3257,  3259,  3261,  3265,  3270,  3277,  3285,  3287,  3289,  3293,
  3297,  3307,  3315,  3317,  3323,  3327,  3334,  3336,  3340,  3342,
  3344,  3351,  3356,  3361,  3368,  3375
};

static const short yyrhs[] = {   218,
     0,   216,     0,   223,     0,     1,     6,     0,     3,     0,
   195,     3,     0,     0,   216,   217,     0,   171,     0,   174,
   175,   215,   215,   215,   176,   177,   173,   215,   215,   215,
   173,   215,   215,   215,   173,   215,   215,   215,   178,   179,
     0,   172,     0,     0,   218,   219,     0,   220,     0,   222,
     0,   221,     0,   146,     6,     0,   147,     6,     0,   149,
     6,     0,   148,     6,     0,   150,     6,     0,   151,   205,
   341,   211,     5,   206,     6,     0,   152,   205,   341,   206,
     6,     0,   153,   205,     5,   211,     5,   211,   341,   211,
   341,   211,     5,   211,     5,   211,     5,   206,     6,     0,
     3,     7,   130,   205,     5,   211,   339,   206,     6,     0,
     3,     7,   129,   205,     5,   211,   337,   211,   345,   211,
   336,   211,   336,   211,   336,   211,   345,   211,   345,   211,
   336,   206,     6,     0,     3,     7,   128,   205,     5,   211,
   337,   211,   337,   211,   343,   211,   336,   211,   336,   211,
   336,   211,   336,   211,   345,   211,   345,   211,   345,   211,
   345,   211,   336,   206,     6,     0,     3,     7,   136,   205,
     5,   211,     3,   211,     3,   211,     3,   211,   336,   206,
     6,     0,     3,     7,   140,   205,     5,   211,     3,   211,
   336,   206,     6,     0,     3,     7,   157,   205,     5,   211,
     3,   211,   336,   206,     6,     0,     3,     7,   138,   205,
     5,   211,   196,   211,   196,   211,   337,   211,   336,   206,
     6,     0,     3,     7,   141,   205,     5,   211,   345,   206,
     6,     0,     3,     7,   142,   205,     5,   211,   345,   211,
     3,   211,   336,   206,     6,     0,     3,     7,   137,   205,
     5,   211,     3,   206,     6,     0,     3,     7,   143,   205,
     5,   211,     3,   211,   337,   206,     6,     0,     3,     7,
   145,   205,     5,   211,     3,   211,     3,   211,     3,   206,
     6,     0,     3,     7,   144,   205,     5,   211,   339,   206,
     6,     0,     3,     7,   139,   205,     5,   211,     3,   206,
     6,     0,     3,     7,    43,   205,     5,   211,     3,   211,
     3,   206,     6,     0,     3,     7,   155,   205,     5,   211,
   345,   206,     6,     0,     3,     7,   156,   205,     5,   211,
   345,   211,     3,   206,     6,     0,     3,     7,   154,   205,
     5,   211,     3,   206,     6,     0,     3,     7,   158,   205,
     5,   211,     3,   211,   337,   206,     6,     0,     3,     7,
   159,   205,     5,   211,     3,   211,   337,   211,   337,   206,
     6,     0,     3,     7,   166,   205,     5,   211,     3,   211,
   337,   211,   337,   206,     6,     0,     3,     7,   160,   205,
     5,   211,     3,   211,   337,   206,     6,     0,     3,     7,
   170,   205,     5,   211,     3,   211,   337,   211,   337,   206,
     6,     0,     3,     7,   161,   205,     5,   211,     3,   211,
   345,   211,   345,   211,   336,   211,   336,   206,     6,     0,
     3,     7,   162,   205,     5,   211,   345,   206,     6,     0,
     3,     7,   163,   205,   164,   211,   336,   211,     3,   206,
     6,     0,     3,     7,   165,   205,     5,   211,   345,   211,
   336,   206,     6,     0,     3,     7,   167,   205,     5,   211,
     5,   211,     3,   211,     3,   206,     6,     0,     3,     7,
   168,   205,     5,   211,     5,   211,     3,   206,     6,     0,
     3,     7,   169,   205,     3,   211,     3,   206,     6,     0,
     0,   223,   224,     0,   226,     0,   225,     0,   311,     0,
   312,     0,   313,     0,   316,     0,   317,     0,   318,     0,
   319,     0,   322,     0,   334,     0,   335,     0,   321,     0,
   320,     0,    33,   205,     5,   206,     6,     0,    33,   205,
     5,   211,   347,   206,     6,     0,     4,     5,   212,   227,
   213,     6,     0,     4,     5,     4,   339,   212,   227,   213,
     6,     0,     0,   227,   229,     0,   227,   232,     0,   227,
   235,     0,   227,   238,     0,   227,   241,     0,   227,   244,
     0,   227,   247,     0,   227,   250,     0,   227,   253,     0,
   227,   256,     0,   227,   259,     0,   227,   262,     0,   227,
   265,     0,   227,   268,     0,   227,   271,     0,   227,   274,
     0,   227,   277,     0,   227,   280,     0,   227,   283,     0,
   227,   286,     0,   227,   289,     0,   227,   292,     0,   227,
   295,     0,   227,   298,     0,   227,   301,     0,   227,   304,
     0,   227,   306,     0,   227,   308,     0,   337,     0,   228,
   211,   337,     0,     0,    77,   205,   337,   211,   337,   211,
   337,   206,   230,   212,   228,   213,     6,     0,   337,     0,
   231,   211,   337,     0,     0,    78,   205,   337,   211,   337,
   211,   337,   206,   233,   212,   231,   213,     6,     0,   337,
     0,   234,   211,   337,     0,     0,    79,   205,   337,   211,
   337,   211,   337,   206,   236,   212,   234,   213,     6,     0,
   337,     0,   237,   211,   337,     0,     0,    80,   205,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   206,   239,   212,   237,   213,     6,     0,   337,     0,   240,
   211,   337,     0,     0,    81,   205,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   206,   242,   212,
   240,   213,     6,     0,   337,     0,   243,   211,   337,     0,
     0,    82,   205,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   206,   245,   212,   243,   213,     6,
     0,   337,     0,   246,   211,   337,     0,     0,    83,   205,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   206,   248,   212,
   246,   213,     6,     0,   337,     0,   249,   211,   337,     0,
     0,    84,   205,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   206,   251,   212,   249,   213,     6,     0,   337,     0,   252,
   211,   337,     0,     0,    85,   205,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   206,   254,   212,   252,   213,     6,     0,
   337,     0,   255,   211,   337,     0,     0,    86,   205,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   206,   257,   212,   255,   213,     6,     0,   337,
     0,   258,   211,   337,     0,     0,    87,   205,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   206,   260,   212,   258,   213,     6,     0,   337,     0,
   261,   211,   337,     0,     0,    88,   205,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   206,   263,   212,   261,   213,     6,     0,   337,     0,   264,
   211,   337,     0,     0,    89,   205,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   206,
   266,   212,   264,   213,     6,     0,   337,     0,   267,   211,
   337,     0,     0,    90,   205,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   206,   269,
   212,   267,   213,     6,     0,   337,     0,   270,   211,   337,
     0,     0,    91,   205,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   206,   272,   212,
   270,   213,     6,     0,   337,     0,   273,   211,   337,     0,
     0,    92,   205,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   206,   275,   212,   273,   213,     6,     0,   337,     0,   276,
   211,   337,     0,     0,    93,   205,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   206,   278,   212,   276,   213,     6,     0,
   337,     0,   279,   211,   337,     0,     0,    94,   205,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   206,   281,   212,   279,
   213,     6,     0,   337,     0,   282,   211,   337,     0,     0,
    95,   205,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   206,   284,   212,
   282,   213,     6,     0,   337,     0,   285,   211,   337,     0,
     0,    96,   205,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   206,   287,
   212,   285,   213,     6,     0,   337,     0,   288,   211,   337,
     0,     0,    97,   205,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   206,
   290,   212,   288,   213,     6,     0,   337,     0,   291,   211,
   337,     0,     0,    98,   205,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   206,   293,   212,   291,   213,     6,
     0,   337,     0,   294,   211,   337,     0,     0,    99,   205,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   211,
   337,   211,   337,   211,   337,   211,   337,   211,   337,   206,
   296,   212,   294,   213,     6,     0,   337,     0,   297,   211,
   337,     0,     0,   100,   205,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   211,   337,   206,   299,   212,   297,   213,     6,
     0,   351,     0,   300,   211,   351,     0,     0,   101,   205,
   337,   211,   337,   211,   337,   206,   302,   212,   300,   213,
     6,     0,   351,     0,   303,   211,   351,     0,     0,   102,
   205,   337,   211,   337,   211,   337,   211,   337,   206,   305,
   212,   303,   213,     6,     0,   103,   212,   344,   213,   212,
   344,   213,     6,     0,   337,     0,   307,   211,   337,     0,
   104,   212,   307,   213,     6,     0,     7,     0,   180,     0,
   181,     0,   182,     0,   183,     0,   201,     0,   202,     0,
     4,   309,   337,     6,     0,     4,   207,   337,   208,   309,
   337,     6,     0,     4,   207,   212,   347,   213,   208,   309,
   345,     6,     0,     4,   207,   208,     7,   345,     6,     0,
     4,   310,     6,     0,     4,   207,   337,   208,   310,     6,
     0,     4,   209,     4,     7,   351,     6,     0,     4,   207,
   337,   208,   209,     4,     7,   351,     6,     0,     4,   209,
     4,   309,   337,     6,     0,     4,   207,   337,   208,   209,
     4,   309,   337,     6,     0,     4,   209,     4,   310,     6,
     0,     4,   207,   337,   208,   209,     4,   310,     6,     0,
     4,   209,   113,   209,     4,     7,   348,     6,     0,     4,
   207,   337,   208,   209,   113,   209,     4,     7,   348,     6,
     0,     4,   209,   114,     7,   349,     6,     0,     4,   207,
   337,   208,   209,   114,     7,   349,     6,     0,    60,   205,
     4,   206,   209,     4,     7,   337,     6,     0,    60,   205,
     4,   206,   209,     4,     7,   351,     6,     0,    40,   205,
   337,   206,     7,   339,     6,     0,    56,    40,   205,   337,
   206,     7,   345,     6,     0,    73,    40,   345,     7,   212,
   337,   211,   337,   211,   337,   213,     6,     0,    47,    48,
   345,     7,   337,     6,     0,    43,   205,   337,   206,     7,
   345,     6,     0,    45,   205,   337,   206,     7,   345,     6,
     0,    41,   205,   337,   206,     7,   345,     6,     0,    41,
   205,   337,   206,     7,   345,    51,   339,     6,     0,    42,
   205,   337,   206,     7,   345,     6,     0,    42,   205,   337,
   206,     7,   345,    51,   339,     6,     0,    49,   205,   337,
   206,     7,   212,   337,   211,   337,   211,     5,   211,     5,
   211,     5,   213,     6,     0,   106,   205,   337,   206,     7,
   345,     6,     0,   107,   205,   337,   206,     7,   345,     6,
     0,   108,   205,   337,   206,     7,   345,   112,   345,   109,
   337,     6,     0,    43,    68,   205,   337,   206,     7,   345,
     6,     0,    73,    43,   345,     7,   212,   337,   211,   337,
   211,   337,   213,     6,     0,    56,    43,   205,   337,   206,
     7,   345,     6,     0,    51,    44,   205,   337,   206,     7,
   345,     6,     0,    52,    44,   205,   337,   206,     7,   345,
     6,     0,   124,    44,   205,   337,   206,     7,   212,   337,
   211,   345,   213,     6,     0,    61,    44,   205,   337,   206,
     7,   212,   337,   211,   337,   213,   345,   345,     6,     0,
    61,    44,   212,   337,   213,     7,   212,   337,   211,   337,
   213,   345,   345,     6,     0,    53,    44,   205,   337,   206,
     7,   205,   337,   211,   337,   206,   345,   345,     6,     0,
   108,    44,   110,   111,   205,   337,   206,     7,   343,   112,
   212,   345,   211,   345,   213,   109,   212,   337,   211,   337,
   213,     6,     0,   108,    44,   205,   337,   206,     7,   343,
   112,   212,   345,   211,   345,   213,   109,   212,   337,   211,
   337,   213,     6,     0,    44,    68,   205,   337,   206,     7,
   345,     6,     0,    56,    44,   205,   337,   206,     7,   345,
     6,     0,    55,    46,   205,   337,   206,     7,   345,     6,
     0,    46,   205,   337,   206,     7,   345,     6,     0,    56,
    46,   205,   337,   206,     7,   345,     6,     0,    63,   339,
   212,   314,   213,     0,    62,   212,   339,   211,   339,   211,
   337,   213,   212,   314,   213,     0,    64,   339,   212,   314,
   213,     0,    65,   212,   339,   211,   337,   213,   212,   314,
   213,     0,   316,     0,   315,     0,   313,     0,     0,   315,
   312,     0,   315,    40,   212,   347,   213,     6,     0,   315,
    43,   212,   347,   213,     6,     0,   315,    44,   212,   347,
   213,     6,     0,   315,    46,   212,   347,   213,     6,     0,
    67,   212,   315,   213,     0,    67,     4,   207,   337,   208,
     6,     0,    75,     4,   207,   337,   208,     6,     0,    76,
     4,   207,   337,   208,     6,     0,    70,   212,   315,   213,
     0,    70,     4,   207,   337,   208,     6,     0,    70,     4,
     6,     0,    70,     4,     4,     6,     0,   113,   348,   212,
   315,   213,     0,   125,   351,     6,     0,   126,   351,     6,
     0,   125,   212,   315,   213,     0,   126,   212,   315,   213,
     0,     4,   351,     6,     0,     4,     4,   207,   337,   208,
   351,     6,     0,     4,   337,     6,     0,    60,   205,     4,
   206,   209,     4,     6,     0,   105,     4,     6,     0,   120,
     6,     0,    37,     6,     0,    37,   212,   337,   211,   337,
   211,   337,   211,   337,   211,   337,   211,   337,   213,     6,
     0,    38,     6,     0,   115,   205,   337,     8,   337,   206,
     0,   115,   205,   337,     8,   337,     8,   337,   206,     0,
   115,     4,   116,   212,   337,     8,   337,   213,     0,   115,
     4,   116,   212,   337,     8,   337,     8,   337,   213,     0,
   117,     0,   123,     4,     0,   121,     0,   122,     4,     6,
     0,   118,   205,   337,   206,     0,   119,     0,    66,    40,
   212,   337,   211,   339,   213,     6,     0,    66,    40,   212,
   337,   211,   339,   211,   339,   211,   337,   213,     6,     0,
    66,    40,   212,   337,   211,   339,   211,   339,   211,   339,
   211,   337,   213,     6,     0,     0,    66,    40,   212,   337,
   211,   339,   213,   323,   212,   332,   213,     6,     0,     0,
    66,    40,   212,   337,   211,   339,   211,   339,   211,   337,
   213,   324,   212,   332,   213,     6,     0,     0,    66,    40,
   212,   337,   211,   339,   211,   339,   211,   339,   211,   337,
   213,   325,   212,   332,   213,     6,     0,    66,    43,   212,
   337,   211,   339,   213,     6,     0,    66,    43,   212,   337,
   211,   339,   211,   339,   211,   337,   213,     6,     0,    66,
    43,   212,   337,   211,   339,   211,   339,   211,   339,   211,
   337,   213,     6,     0,     0,    66,    43,   212,   337,   211,
   339,   213,   326,   212,   332,   213,     6,     0,     0,    66,
    43,   212,   337,   211,   339,   211,   339,   211,   337,   213,
   327,   212,   332,   213,     6,     0,     0,    66,    43,   212,
   337,   211,   339,   211,   339,   211,   339,   211,   337,   213,
   328,   212,   332,   213,     6,     0,    66,    44,   212,   337,
   211,   339,   213,     6,     0,    66,    44,   212,   337,   211,
   339,   211,   339,   211,   337,   213,     6,     0,    66,    44,
   212,   337,   211,   339,   211,   339,   211,   339,   211,   337,
   213,     6,     0,     0,    66,    44,   212,   337,   211,   339,
   213,   329,   212,   332,   213,     6,     0,     0,    66,    44,
   212,   337,   211,   339,   211,   339,   211,   337,   213,   330,
   212,   332,   213,     6,     0,     0,    66,    44,   212,   337,
   211,   339,   211,   339,   211,   339,   211,   337,   213,   331,
   212,   332,   213,     6,     0,   333,     0,   332,   333,     0,
    74,   212,   345,   211,   345,   211,   345,   213,     6,     0,
    74,   212,   345,   211,   345,   213,     6,     0,    69,     6,
     0,    54,    43,   345,     7,   337,     6,     0,    54,    43,
   345,     7,   337,    57,    59,   337,     6,     0,    54,    43,
   345,     7,   337,    57,    58,   337,     6,     0,    54,    44,
   212,   337,   213,     7,   345,     6,     0,    50,    44,   212,
   337,   213,     7,   345,     6,     0,    54,    46,   212,   337,
   213,     7,   345,     6,     0,    69,    44,   345,     7,   337,
     6,     0,    69,    44,   345,     6,     0,    71,     6,     0,
    72,     6,     0,   131,     0,   132,     0,   133,     0,   134,
     0,   135,     0,   338,     0,   205,   337,   206,     0,   195,
   337,     0,   194,   337,     0,   200,   337,     0,   337,   195,
   337,     0,   337,   194,   337,     0,   337,   196,   337,     0,
   337,   197,   337,     0,   337,   198,   337,     0,   337,   204,
   337,     0,   337,   190,   337,     0,   337,   192,   337,     0,
   337,   191,   337,     0,   337,   193,   337,     0,   337,   187,
   337,     0,   337,   188,   337,     0,   337,   186,   337,     0,
   337,   185,   337,     0,   337,   184,   337,     8,   337,     0,
    12,   205,   337,   206,     0,    13,   205,   337,   206,     0,
    14,   205,   337,   206,     0,    15,   205,   337,   206,     0,
    16,   205,   337,   206,     0,    17,   205,   337,   206,     0,
    18,   205,   337,   206,     0,    19,   205,   337,   206,     0,
    20,   205,   337,   206,     0,    22,   205,   337,   206,     0,
    23,   205,   337,   211,   337,   206,     0,    24,   205,   337,
   206,     0,    25,   205,   337,   206,     0,    26,   205,   337,
   206,     0,    27,   205,   337,   206,     0,    28,   205,   337,
   206,     0,    29,   205,   337,   206,     0,    30,   205,   337,
   211,   337,   206,     0,    31,   205,   337,   211,   337,   206,
     0,    32,   205,   337,   211,   337,   206,     0,    21,   205,
   337,   206,     0,    12,   207,   337,   208,     0,    13,   207,
   337,   208,     0,    14,   207,   337,   208,     0,    15,   207,
   337,   208,     0,    16,   207,   337,   208,     0,    17,   207,
   337,   208,     0,    18,   207,   337,   208,     0,    19,   207,
   337,   208,     0,    20,   207,   337,   208,     0,    22,   207,
   337,   208,     0,    23,   207,   337,   211,   337,   208,     0,
    24,   207,   337,   208,     0,    25,   207,   337,   208,     0,
    26,   207,   337,   208,     0,    27,   207,   337,   208,     0,
    28,   207,   337,   208,     0,    29,   207,   337,   208,     0,
    30,   207,   337,   211,   337,   208,     0,    31,   207,   337,
   211,   337,   208,     0,    32,   207,   337,   211,   337,   208,
     0,    21,   207,   337,   208,     0,     3,     0,     9,     0,
    10,     0,    11,     0,     4,     0,     4,   207,   337,   208,
     0,   210,     4,   207,   208,     0,     4,   310,     0,     4,
   207,   337,   208,   310,     0,     4,   209,     4,     0,     4,
   207,   337,   208,   209,     4,     0,     4,   209,     4,   310,
     0,     4,   207,   337,   208,   209,     4,   310,     0,   127,
   205,     5,   211,   337,   206,     0,   340,     0,   195,   339,
     0,   194,   339,     0,   339,   195,   339,     0,   339,   194,
   339,     0,   212,   337,   211,   337,   211,   337,   211,   337,
   211,   337,   213,     0,   212,   337,   211,   337,   211,   337,
   211,   337,   213,     0,   212,   337,   211,   337,   211,   337,
   213,     0,   205,   337,   211,   337,   211,   337,   206,     0,
     0,   205,   342,   206,     0,     5,     0,   342,   211,     5,
     0,     0,   212,   344,   213,     0,   205,   344,   206,     0,
   345,     0,   344,   211,   345,     0,   337,     0,   346,     0,
   212,   347,   213,     0,   195,   212,   347,   213,     0,   337,
     8,   337,     0,   337,     8,   337,     8,   337,     0,    40,
   212,   337,   213,     0,   313,     0,   316,     0,   322,     0,
     4,   207,   208,     0,   195,     4,   207,   208,     0,     4,
   207,   212,   347,   213,   208,     0,   195,     4,   207,   212,
   347,   213,   208,     0,   337,     0,   346,     0,   347,   211,
   337,     0,   347,   211,   346,     0,   212,   337,   211,   337,
   211,   337,   211,   337,   213,     0,   212,   337,   211,   337,
   211,   337,   213,     0,     4,     0,     4,   209,   113,   209,
     4,     0,   212,   350,   213,     0,     4,   207,   337,   208,
   209,   114,     0,   348,     0,   350,   211,   348,     0,     5,
     0,    39,     0,    35,   205,   351,   211,   351,   206,     0,
    36,   205,   351,   206,     0,    34,   205,   351,   206,     0,
    34,   205,   351,   211,   347,   206,     0,    34,   205,     4,
   209,     4,   206,     0,    34,   205,     4,   207,   337,   208,
   209,     4,   206,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   160,   162,   163,   164,   169,   171,   174,   176,   179,   186,
   199,   213,   215,   218,   220,   221,   224,   230,   235,   236,
   237,   240,   244,   247,   253,   258,   264,   272,   277,   281,
   287,   292,   296,   301,   305,   308,   313,   317,   321,   325,
   330,   334,   337,   341,   345,   349,   353,   357,   361,   364,
   368,   371,   375,   378,   385,   387,   390,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
   407,   413,   430,   438,   447,   455,   456,   457,   458,   459,
   460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
   480,   481,   482,   485,   488,   492,   498,   504,   507,   511,
   518,   525,   528,   532,   539,   546,   549,   553,   562,   569,
   572,   576,   585,   592,   595,   599,   608,   615,   618,   622,
   635,   642,   645,   649,   662,   669,   672,   676,   689,   696,
   699,   703,   717,   724,   727,   731,   745,   752,   755,   759,
   773,   780,   783,   787,   801,   808,   811,   815,   829,   836,
   839,   843,   857,   864,   867,   871,   895,   902,   905,   909,
   933,   940,   943,   947,   971,   978,   981,   985,  1004,  1011,
  1014,  1018,  1037,  1044,  1047,  1051,  1070,  1077,  1080,  1084,
  1102,  1109,  1112,  1116,  1134,  1141,  1144,  1148,  1166,  1173,
  1179,  1186,  1194,  1200,  1206,  1213,  1221,  1227,  1235,  1238,
  1242,  1250,  1252,  1253,  1254,  1255,  1258,  1260,  1263,  1298,
  1337,  1391,  1408,  1419,  1438,  1452,  1469,  1495,  1522,  1536,
  1553,  1567,  1584,  1604,  1627,  1637,  1652,  1672,  1688,  1707,
  1726,  1744,  1762,  1780,  1806,  1824,  1850,  1870,  1894,  1918,
  1944,  1961,  1979,  1998,  2017,  2056,  2081,  2101,  2120,  2137,
  2156,  2175,  2191,  2211,  2228,  2245,  2265,  2271,  2276,  2281,
  2288,  2290,  2291,  2294,  2299,  2303,  2319,  2335,  2351,  2371,
  2386,  2392,  2398,  2409,  2419,  2429,  2439,  2457,  2471,  2480,
  2486,  2497,  2510,  2555,  2570,  2586,  2596,  2607,  2611,  2615,
  2619,  2630,  2647,  2663,  2689,  2716,  2748,  2755,  2760,  2766,
  2770,  2778,  2797,  2813,  2829,  2834,  2850,  2855,  2871,  2876,
  2894,  2917,  2940,  2963,  2968,  2991,  2996,  3019,  3024,  3050,
  3073,  3096,  3119,  3124,  3147,  3153,  3176,  3182,  3207,  3211,
  3216,  3243,  3267,  3275,  3294,  3312,  3330,  3357,  3383,  3409,
  3423,  3441,  3446,  3455,  3457,  3458,  3459,  3460,  3463,  3465,
  3466,  3467,  3468,  3469,  3470,  3471,  3472,  3479,  3480,  3481,
  3482,  3483,  3484,  3485,  3486,  3487,  3488,  3489,  3490,  3491,
  3492,  3493,  3494,  3495,  3496,  3497,  3498,  3499,  3500,  3501,
  3502,  3503,  3504,  3505,  3506,  3507,  3508,  3509,  3510,  3512,
  3513,  3514,  3515,  3516,  3517,  3518,  3519,  3520,  3521,  3522,
  3523,  3524,  3525,  3526,  3527,  3528,  3529,  3530,  3531,  3532,
  3537,  3542,  3543,  3544,  3548,  3561,  3581,  3595,  3608,  3631,
  3649,  3667,  3685,  3703,  3710,  3715,  3719,  3723,  3727,  3733,
  3738,  3742,  3746,  3752,  3756,  3761,  3765,  3770,  3774,  3778,
  3784,  3790,  3797,  3803,  3807,  3811,  3822,  3829,  3840,  3860,
  3870,  3880,  3892,  3909,  3928,  3952,  3980,  3986,  3990,  3994,
  4006,  4011,  4023,  4030,  4051,  4056,  4070,  4076,  4082,  4087,
  4095,  4103,  4117,  4121,  4140,  4156
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tDiscrete","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers",
"tAlias","tAliasWithOptions","tScalarPoint","tVectorPoint","tTensorPoint","tScalarLine",
"tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle","tTensorTriangle",
"tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron","tVectorHexahedron",
"tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism","tScalarPyramid",
"tVectorPyramid","tTensorPyramid","tText2D","tText3D","tInterpolationScheme",
"tTime","tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds",
"tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit",
"tReturn","tCall","tFunction","tTrimmed","tShow","tHide","tGetValue","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter","tLoopSTL",
"tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","All","SignedDouble","StlFormatItems","StlFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeoFormatItems",
"GeoFormatItem","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarQuadrangleValues",
"ScalarQuadrangle","@10","VectorQuadrangleValues","VectorQuadrangle","@11","TensorQuadrangleValues",
"TensorQuadrangle","@12","ScalarTetrahedronValues","ScalarTetrahedron","@13",
"VectorTetrahedronValues","VectorTetrahedron","@14","TensorTetrahedronValues",
"TensorTetrahedron","@15","ScalarHexahedronValues","ScalarHexahedron","@16",
"VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues","TensorHexahedron",
"@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues","VectorPrism",
"@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues","ScalarPyramid",
"@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues","TensorPyramid",
"@24","Text2DValues","Text2D","@25","Text3DValues","Text3D","@26","InterpolationMatrix",
"TimeValues","Time","NumericAffectation","NumericIncrement","Affectation","Shape",
"Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   214,   214,   214,   214,   215,   215,   216,   216,   217,   217,
   217,   218,   218,   219,   219,   219,   220,   220,   220,   220,
   220,   221,   221,   221,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   223,   223,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   225,   225,   226,   226,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   228,   228,   230,   229,   231,   231,   233,
   232,   234,   234,   236,   235,   237,   237,   239,   238,   240,
   240,   242,   241,   243,   243,   245,   244,   246,   246,   248,
   247,   249,   249,   251,   250,   252,   252,   254,   253,   255,
   255,   257,   256,   258,   258,   260,   259,   261,   261,   263,
   262,   264,   264,   266,   265,   267,   267,   269,   268,   270,
   270,   272,   271,   273,   273,   275,   274,   276,   276,   278,
   277,   279,   279,   281,   280,   282,   282,   284,   283,   285,
   285,   287,   286,   288,   288,   290,   289,   291,   291,   293,
   292,   294,   294,   296,   295,   297,   297,   299,   298,   300,
   300,   302,   301,   303,   303,   305,   304,   306,   307,   307,
   308,   309,   309,   309,   309,   309,   310,   310,   311,   311,
   311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
   311,   311,   311,   311,   311,   311,   312,   312,   312,   312,
   312,   312,   312,   312,   312,   312,   312,   312,   312,   312,
   312,   312,   312,   312,   312,   312,   312,   312,   312,   312,
   312,   312,   312,   312,   312,   312,   313,   313,   313,   313,
   314,   314,   314,   315,   315,   315,   315,   315,   315,   316,
   316,   316,   316,   317,   317,   317,   317,   318,   319,   319,
   319,   319,   320,   320,   320,   320,   320,   320,   320,   320,
   320,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   322,   322,   322,   323,   322,   324,   322,   325,   322,
   322,   322,   322,   326,   322,   327,   322,   328,   322,   322,
   322,   322,   329,   322,   330,   322,   331,   322,   332,   332,
   333,   333,   333,   334,   334,   334,   334,   334,   334,   334,
   334,   335,   335,   336,   336,   336,   336,   336,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   337,   337,   337,   337,   337,   337,   337,   337,   337,   337,
   338,   338,   338,   338,   338,   338,   338,   338,   338,   338,
   338,   338,   338,   338,   339,   339,   339,   339,   339,   340,
   340,   340,   340,   341,   341,   342,   342,   343,   343,   343,
   344,   344,   345,   345,   345,   345,   346,   346,   346,   346,
   346,   346,   346,   346,   346,   346,   347,   347,   347,   347,
   348,   348,   348,   348,   349,   349,   350,   350,   351,   351,
   351,   351,   351,   351,   351,   351
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
     8,    12,     8,     8,     8,    12,    14,    14,    14,    22,
    20,     8,     8,     8,     7,     8,     5,    11,     5,     9,
     1,     1,     1,     0,     2,     6,     6,     6,     6,     4,
     6,     6,     6,     4,     6,     3,     4,     5,     3,     3,
     4,     4,     3,     7,     3,     7,     3,     2,     2,    15,
     2,     6,     8,     8,    10,     1,     2,     1,     3,     4,
     1,     8,    12,    14,     0,    12,     0,    16,     0,    18,
     8,    12,    14,     0,    12,     0,    16,     0,    18,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     1,     2,
     9,     7,     2,     6,     9,     9,     8,     8,     8,     6,
     4,     2,     2,     1,     1,     1,     1,     1,     1,     3,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     4,     4,     4,     6,     6,     6,     4,
     1,     1,     1,     1,     1,     4,     4,     2,     5,     3,
     6,     4,     7,     6,     1,     2,     2,     3,     3,    11,
     9,     7,     7,     0,     3,     1,     3,     0,     3,     3,
     1,     3,     1,     1,     3,     4,     3,     5,     4,     1,
     1,     1,     3,     4,     6,     7,     1,     1,     3,     3,
     9,     7,     1,     5,     3,     6,     1,     3,     1,     1,
     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   306,     0,   311,     0,   308,     0,     0,
     0,     0,     0,    56,    58,    57,    59,    60,    61,    62,
    63,    64,    65,    70,    69,    66,    67,    68,     0,     0,
    17,    18,    20,    19,    21,   444,   444,     0,   421,   425,
   479,   212,   422,   423,   424,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   480,
     0,   213,   214,   215,   216,     0,     0,     0,   217,   218,
     0,     0,     0,     0,     0,     0,     0,   359,     0,     0,
   299,     0,   301,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   435,     0,     0,     0,     0,     0,     0,
   274,     0,     0,   274,   352,   353,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   473,     0,     0,     0,     0,
     0,   298,     0,   307,     0,   479,   274,     0,   274,     0,
     5,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   428,
     0,    75,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   425,   362,
   361,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   223,   295,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   293,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   425,
     0,     0,     0,   460,   461,   462,   453,     0,   454,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   437,   436,     0,     0,
     0,     0,   274,   274,     0,     0,     0,     0,     0,     0,
     0,     0,   286,     0,     0,     0,     0,     0,     0,   297,
     0,     0,     0,     0,     0,     0,     0,   274,     0,     0,
     0,   309,     0,     0,   289,     0,   290,     6,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   446,
     0,     0,     0,     0,     0,   430,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   360,     0,     0,   467,
   468,     0,     0,   212,     0,     0,     0,     0,     0,   219,
     0,   377,   376,   374,   375,   370,   372,   371,   373,   365,
   364,   366,   367,   368,   369,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   425,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   439,   438,   273,     0,   272,   271,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   280,   275,
   351,     0,   287,     0,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   310,
     0,   291,   292,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   445,     0,     0,    23,     0,   426,
   432,    75,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   379,
   400,   380,   401,   381,   402,   382,   403,   383,   404,   384,
   405,   385,   406,   386,   407,   387,   408,   399,   420,   388,
   409,     0,     0,   390,   411,   391,   412,   392,   413,   393,
   414,   394,   415,   395,   416,     0,     0,     0,     0,     0,
     0,     0,     0,   483,     0,     0,   482,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   229,     0,     0,
     0,     0,   427,     0,    71,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   463,     0,     0,     0,     0,
   455,   457,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   267,   269,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   288,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   447,     0,   444,     0,   429,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   426,   222,   469,   470,     0,     0,     0,     0,     0,   224,
   225,   227,     0,     0,   477,     0,   233,   378,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   459,
   464,     0,   456,     0,   240,     0,     0,     0,     0,     0,
   344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   281,
     0,     0,     0,     0,   350,   285,     0,     0,   282,   283,
     0,     0,     0,   448,     0,   474,     0,     0,     0,   302,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   354,   355,   356,   357,   358,
     0,     0,     0,     0,     0,     0,     0,    22,     0,   431,
   294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   451,
     0,   209,   389,   410,   396,   417,   397,   418,   398,   419,
     0,   485,   484,   481,   434,     0,   212,     0,     0,     0,
     0,   220,     0,     0,     0,   475,    72,     0,   237,   243,
     0,   245,     0,     0,   241,     0,   242,   265,     0,     0,
   458,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   296,     0,     0,     0,     0,
     0,     0,   274,     0,   315,     0,   324,     0,   333,     0,
     0,     0,     0,     0,     0,   248,   249,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   444,   433,    74,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   230,     0,     0,   231,     0,   478,
     0,     0,     0,   251,   262,   465,     0,     0,   348,   254,
   255,     0,     0,     0,   347,   349,   264,   238,   253,   263,
   266,     0,     0,     0,     0,     0,   443,     0,   442,     0,
     0,   312,     0,     0,   321,     0,     0,   330,     0,   276,
   277,   278,   279,     0,     0,   448,     0,     0,     0,     0,
     0,   472,     0,   304,   303,     0,     0,     0,     0,     0,
    25,     0,    34,     0,    38,     0,    32,     0,     0,    37,
     0,    42,    40,     0,     0,     0,     0,     0,     0,    49,
     0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   452,     0,   210,   211,     0,   221,
   226,   228,     0,   234,     0,     0,   244,   246,   466,     0,
     0,   346,   345,   235,   236,     0,     0,   274,     0,   270,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   450,
   449,     0,     0,     0,     0,     0,     0,     0,   448,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   486,     0,   476,     0,
     0,     0,     0,     0,     0,     0,   441,     0,     0,     0,
     0,     0,     0,     0,     0,   339,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   471,   305,     0,
     0,    39,     0,     0,     0,     0,    29,     0,    35,     0,
    41,    30,    43,     0,    46,     0,    50,    51,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   232,     0,     0,     0,     0,     0,   268,     0,     0,   317,
     0,   343,     0,     0,   340,   326,     0,     0,   335,     0,
     0,     0,     0,     0,     0,   250,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   106,   110,   114,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   202,     0,   208,     0,     0,     0,
     0,     0,   440,   313,     0,     0,     0,   316,   322,     0,
     0,   325,   331,     0,     0,   334,   239,   252,     0,     0,
   256,     0,     0,     0,     0,     0,    33,    36,    44,     0,
    45,    52,    47,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   319,     0,     0,   328,
     0,   337,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   206,     0,     0,   259,
   257,   258,     0,   314,     0,     0,     0,   323,     0,     0,
   332,     0,     0,     0,     0,     0,     0,    28,    31,     0,
     0,     0,   104,     0,   108,     0,   112,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   200,
     0,   300,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   318,
     0,     0,   342,   327,     0,   336,     0,     0,     0,     0,
     0,     0,    48,    24,   105,   107,   109,   111,   113,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   201,   203,     0,   204,   247,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   118,   122,   126,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   320,   341,
   329,   338,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   205,   207,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   261,    10,     0,
     0,     0,   116,     0,   120,     0,   124,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   260,     0,    26,   117,   119,   121,   123,   125,
   127,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   130,   134,   138,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   128,     0,
   132,     0,   136,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   129,   131,   133,   135,   137,   139,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   142,   146,   150,   154,   158,   162,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   140,     0,   144,     0,   148,     0,   152,     0,   156,     0,
   160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   141,   143,   145,   147,   149,   151,   153,   155,   157,
   159,   161,   163,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   190,   194,
   198,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   188,     0,   192,     0,
   196,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   189,
   191,   193,   195,   197,   199,     0,     0,     0,   178,   182,
   186,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   176,     0,   180,
     0,   184,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   177,   179,   181,   183,   185,   187,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   166,   170,
   174,     0,     0,     0,     0,     0,     0,     0,   164,     0,
   168,     0,   172,     0,     0,     0,     0,     0,     0,   165,
   167,   169,   171,   173,   175,     0,     0,     0
};

static const short yydefgoto[] = {  2406,
   223,     2,     9,     3,    19,    20,    21,    22,     4,    74,
    75,    76,   458,  1722,   682,  1625,  1724,   683,  1626,  1726,
   684,  1627,  1942,   685,  1888,  1944,   686,  1889,  1946,   687,
  1890,  2078,   688,  2040,  2080,   689,  2041,  2082,   690,  2042,
  2190,   691,  2160,  2192,   692,  2161,  2194,   693,  2162,  2196,
   694,  2163,  2198,   695,  2164,  2200,   696,  2165,  2388,   697,
  2382,  2390,   698,  2383,  2392,   699,  2384,  2337,   700,  2325,
  2339,   701,  2326,  2341,   702,  2327,  2286,   703,  2268,  2288,
   704,  2269,  2290,   705,  2270,  1749,   706,  1649,  1844,   707,
  1751,   708,  1071,   709,   145,   260,    77,   590,   354,   576,
   577,   355,    81,    82,    83,    84,    85,   356,  1263,  1595,
  1705,  1266,  1600,  1709,  1269,  1604,  1712,  1455,  1456,    87,
    88,  1031,   357,   148,   377,   184,   255,   451,  1151,  1069,
  1070,   359,   512,   208,   772,   936,   149
};

static const short yypact[] = {  3159,
    42,   231,   412,  3499,-32768,-32768,-32768,  -110,-32768,    54,
   120,   136,   156,   164,   168,    -8,    -1,    34,-32768,-32768,
-32768,-32768,  2519,   113,    18,   185,   121,   127,   132,   -32,
   142,   137,   145,   249,   152,   343,   349,   353,   365,   474,
   393,   447,   243,   374,   232,   201,   201,   242,   377,     6,
   415,    12,   473,   498,    96,   518,   519,   542,   342,   348,
   -15,    13,    16,-32768,   351,-32768,   566,-32768,   564,   569,
   534,    17,    73,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    20,  3357,
-32768,-32768,-32768,-32768,-32768,   382,   382,   588,-32768,   -46,
    14,-32768,-32768,-32768,-32768,  -161,   165,   248,   289,   321,
   345,   372,   398,   428,   429,   483,   512,   526,   532,   556,
   562,   563,   583,   584,   587,   600,   383,   392,   410,-32768,
   417,-32768,-32768,-32768,-32768,  2883,  2883,  2883,-32768,-32768,
  2883,   821,    30,   590,  2883,   632,   459,-32768,   642,   659,
-32768,  2883,-32768,  2883,  2883,  2883,   466,  2883,   484,  2883,
  2883,  1252,  2883,   480,   488,   494,   516,  1252,   503,   504,
   517,   525,   531,   535,   557,   768,  -131,   201,   201,   201,
  2883,  2883,  -127,-32768,  -123,   201,   599,   610,   611,   594,
-32768,  1252,    24,-32768,-32768,-32768,  1252,  1252,   595,   647,
   807,  2883,  2883,   -75,  2883,   586,  2883,   643,   680,  2883,
  2883,-32768,   879,-32768,   687,-32768,-32768,   899,-32768,   900,
-32768,   906,    20,   705,   722,   741,   744,   753,   767,   783,
   792,   808,   815,   819,   829,   835,   845,   846,   852,   874,
   882,   892,   894,   895,   896,   897,   898,   902,   903,   905,
   907,   908,   909,   934,   801,   772,   904,  2883,  1052,-32768,
   201,-32768,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,    65,   112,   112,  1106,   389,   912,
   912,   912, 11503,  1110,  2727,   851,    31,   910,  1111,   913,
   482,-32768,-32768,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,-32768,  -115,
  1871, 11526, 11549, 11572,  2883, 11595,  2883, 11618, 11641,   407,
   911,  2430,  2727,-32768,-32768,-32768,   703,  1117,-32768, 11664,
  2883,  2883,  2883,  2883,  1118,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,   920,  2883,  2883,   -84,-32768,-32768,  3782,  3804,
   201,   201,   537,   537,   -70,  2883,  2883,  2883,  2883,  2063,
    99,  1121,-32768,  2883,  2520,  1122,  1123,  2883,  2883,-32768,
 11687, 11710,  1017,  2883, 11733,  1018,  3826,-32768,   922,  1589,
 11756,-32768,  2883,  3062,-32768,  3196,-32768,-32768,    20,  1127,
  1130,  1132,  1134,  1135,  1137,  1138,  1139,  1140,  1142,  1143,
  1144,  1145,  1146,  1147,  1151,  1153,  1154,  1156,  1157,  1158,
  1160,  1161,  1003,  1189,  1190,  1192,  1193,  1196,  1195,-32768,
  -114,  1197,  1198,  1200, 10778,   176,   -92,  3293, 11779, 10803,
 11802, 10828, 11825, 10853, 11848, 10878, 11871, 10903, 11894, 10928,
 11917, 10953, 11940, 10978, 11963, 11003, 11986, 11028, 12009, 11053,
  3848,  3870, 12032, 11078, 12055, 11103, 12078, 11128, 12101, 11153,
 12124, 11178, 12147, 11203,  3892,  3914,  3936,  3958,  3980,  4002,
   375,   -90,   990,   997,   995,  2883,-32768,  1252,  2971,   703,
-32768,   597,   153,   112,  2883,  1201,  1205,    15,  1019,-32768,
  1627,   433,   239,   552,   552,   487,   487,   487,   487,   561,
   561,   912,   912,   912,   912,  1219,  2727,  2883,  1221,  1222,
  1224, 12170,  1225, 12193,  1226,  1227,  1679,  2883,   511,  2727,
   601,  2883,  2883,  1229,  2312, 12216, 12239, 12262,  2883,  2490,
  2584, 12285, 12308, 12331, 12354, 12377,  1028, 12400,  2635,   201,
  2883,  2883,-32768,-32768,-32768,  1013,  3018,-32768,  1025,  2883,
  4024,  4046,  4068, 11228,  -129,   -41,   -47,  -118,-32768,-32768,
-32768,  2883,-32768, 11253,-32768,  1027,  1029, 11278, 11303,  1233,
  1235,  1038, 12423,  1237,  1036,  2883,  3296,  2883,  2883,-32768,
 12446,-32768,-32768,  1070,  1037,  1040,  1041,  1042,  1043,  1048,
  1074,  1075,  1091,  1092,  1093,  1095,  1097,  1098,  1099,  1100,
  1101,  1102,  1109,  1112,  1113,  1114,  1115,  1119,  1120,  1124,
  1125,  1131,  1136,  1148,-32768,  1242,  1116,-32768,  1150,   118,
-32768,-32768,  1044,  1128,  1129,  1141,  1152,  1159,  1162,  1163,
  1166,  1170,  1173,  1175,  1176,  1178,  1179,  1181,  1208,  1209,
  1210,  1211,  1214,  1215,  1216,  1217,  1228,  1238,  1133,  1212,
  1315,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2883,  2883,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  1325,-32768,  2727,   112,-32768,  2883, 11328,  1326,
  2727,  1155,    36,  2883,  1335,  1343,   510,-32768,  1344,  1149,
    13,  1347,-32768,  2883,-32768,   -30,  4090,   201,  1252,  1252,
  1351,  1252,  1355,  1252,  1252,-32768,  2727,  2755,  2400,   605,
-32768,  1671,   589,  1232,  1358,  1359,  1438,  1442,   347,  1443,
  1444,  1446,  1447,  1448,  1449,  1451,  1455,  1453,  1454,   -28,
  4112,  4134,-32768,-32768,  2821,   201,   201,   201,  1457,  2727,
  2727,  2727,  2727,   728,  1459,  2883,  2883,  1460,  1461,  1252,
  1252,  2883,  1462,  1252,  1464,  4156,-32768,  1730,   315,  1463,
  1294,  1469,  2883,  2883,   201,  1470,  1471,  1279,  1473,  1474,
  1252,  1252,  1475,   201,  1476,  1477,  1252,  1252,  1478,  1485,
  1495,  1496,  1497,  1252,   527,  1252,  1498,  1499,  1500,  1503,
  1504,-32768,  1505,   382,  1506,-32768,  1507,  3344,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  1252,  2883,-32768, 12469, 11353, 12492,
 11378, 12515, 11403, 12538, 11428, 11453,  1296,    82,  1303, 12561,
   551,-32768,   703,-32768,    26,   178,  1306,  1509,   876,-32768,
-32768,-32768,    13,  2883,-32768,   606,-32768, 13412,  1517,  2883,
    25,    35,    37,  1252,  1527,  1252,  1528,  1530,   615,-32768,
-32768,  2727,-32768,  2883,-32768,  2883,  1252,  1252,  1252,  1307,
-32768,   158,  1252,  1252,  1252,  1252,  1252,  1252,  1252,   478,
  1327,  1328,  2883,  2883,  2883,  1350,   -17,   173,   188,-32768,
   616,   673,   691,   717,-32768,-32768,  4178,  4200,-32768,-32768,
  1531,  1558, 12584,   -37,  1472,-32768,  2883,  2883,  2883,-32768,
  1369,  1398,  1371,  4222,  4244,   179,  1372,  1379,  1376,  1383,
  1377,  1384,  1380,  1381,   252,  1385,  1392,  1393,  1390,  1391,
  1394,  1395,  1397,  1399,  1406,-32768,-32768,-32768,-32768,-32768,
  1402,  1403,  1404,  1405,  1407,  1411,  1408,-32768,  1409,   176,
-32768,  1597,  4266,  4288,  4310,  4332,  4354,  4376,  4398,  4420,
  4442,  4464,  4486,  4508,  4530,  4552,  4574,  4596,  4618,  4640,
  4662,  4684,  4706,  4728,  4750,  4772,  4794,  4816,   723,-32768,
   724, 13412,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1412,-32768,-32768,-32768,-32768,  1252,   112,  2883,  1598,  1618,
    15,-32768,  1617, 11478,    13,-32768,-32768,  4838,-32768,-32768,
   201,-32768,   201,  1619,-32768,  1620,-32768,-32768,  1420,   727,
 13412,  4860,  1625,  1626,  1630,  2883,  2883,  2883,  1631,  1632,
  1633,  1634,  1635,  1636,  1637,-32768,  2846,  2883,  2883,  2960,
 12607,   769,   537,   201,  1638,   201,  1639,   201,  1640,  1641,
  1642,  1667,  1668,  2883,  2883,-32768,-32768,  1669,  1252,  1252,
  1521,  1252,  1382,   276, 12630,  2883,    20,  1672,  2883,  1252,
  1675,  1674,  1678,  1482,  1680,   527,  1681,  1709,  2883,  1707,
  1711,  1710,  1712,  1714,   527,  2883,  2883,  2883,  1252,  1713,
  1717,   527,  2883,  1718,  1719,  1720,  2883,   382,-32768,-32768,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  1252,  1512,  2883,  1722,
  1721,  1724,  1725,  1026,-32768,  1708,  1726,-32768,  1524,-32768,
  2883,    92,   122,-32768,-32768,-32768,  1526,  2883,-32768,-32768,
-32768,  4882,  1103,  1244,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1299,  1729,  4904,  4926,  1525,-32768,  2883,-32768,  1523,
   213,-32768,  1529,   217,-32768,  1532,   246,-32768,  1533,-32768,
-32768,-32768,-32768,  4948,  4970,   -37,    85,   730,  1535,  1682,
  2883,-32768,  2883,-32768,-32768,  4992,    20,  1536,  5014,  1538,
-32768,  1540,-32768,  1567,-32768,  1537,-32768,  1577, 12653,-32768,
  1578,-32768,-32768,  1584,  1586, 12676,  5036, 12699,  1583,-32768,
  1590,  1591,  5058,  1587,  1593,-32768,  5080,  1592,  5102,  5124,
  5146,  5168,  5190,  5212,  5234,  5256,  5278,  5300,  5322,  5344,
  5366,  5388,  5410,  5432,  5454,  5476,  5498,  5520,  5542,  5564,
  5586,  5608,  5630,  5652,-32768,  1252, 13412,-32768,  1594,-32768,
-32768,-32768,    13,-32768,  1687,  5674,-32768,-32768,-32768,  5696,
  2883,-32768,-32768,-32768,-32768,  2883,  2883,   537,  1786,-32768,
  2460,   126,  2460,   126,  2460,   126,  2883,  2883,  1683,-32768,
-32768,  1252,  2883,  3131,  3269,  1252,    20,  1733,   -37,   527,
  1799,  2883,  1798,   527,  1801,  1802,  1803,  1804,  1810,  2883,
  1820,  1252,  1821,  1824,  2883,  1829,  1827,  2883,  1830,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,   731,-32768,  1828,-32768,  2883,
  1849, 12722,  3395,  3442,  1647,  2883,-32768,  2460,  2460,  2883,
  3466,   287,  1864,  1659,   -27,-32768,  3490,   360,   -24,  3514,
   381,   -20,  3538,  3562,  1660,  1665,  1334,-32768,-32768,  1664,
  1705,-32768,  1670,  1727,  1728,  5718,-32768,  1676,-32768,  1677,
-32768,-32768,-32768, 12745,-32768,  1731,-32768,-32768, 12768,  1684,
-32768, 12791,  1732, 12814, 12837, 12860,  5740,  5762,  5784,  5806,
  5828,  5850,  5872,  5894,  5916,  5938,  5960,  5982,  6004,  6026,
  6048,  6070,  6092,  6114,  6136,  6158,  6180, 12883,  6202,  1874,
-32768,  6224,  1734,  1252,  1252,  1252,-32768,  3586,  3754,  1879,
  2883,-32768,  1252,  1880,-32768,  1886,  2883,  1913,  1923,  2883,
  1924,  1925,  1926,  1252,  1252,-32768,  1927,    20,   527,   527,
   527,   527,  1929,  1930,  1931,   527,  1935,  1938,  1941,  1944,
-32768,-32768,-32768,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,-32768,  2883,-32768,  2883,  1946,  1252,
  1252,  1252,-32768,-32768,  1763,  3610,  1774,-32768,-32768,  1775,
  3634,-32768,-32768,  1776,  3658,-32768,-32768,-32768,  1778,  1773,
-32768,    20,  1780,  1781,  1787,  1788,-32768,-32768,-32768,  1784,
-32768,-32768,-32768,  1785,  1805,  1806,  1807,  6246,  6268,  6290,
  6312,  6334,  6356,  6378,  6400,  6422,  6444,  6466,  6488,  6510,
  6532,  6554,  6576,  6598,  6620,  6642,  6664,  6686,  1808, 12906,
  3682,  1789,  1992,  2010,  2015,   126,  2016,  1252,   126,  2017,
   126,  2018,  1252,  1916,    20,   527,   527,  2020,  2021,   527,
  2023,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,   112,-32768,  2024,  2026,-32768,
-32768,-32768,   -14,-32768,  1817,   734,   -12,-32768,  1822,   -11,
-32768,  1823,  1819,  1842,  1860,  1859,  1861,-32768,-32768,  1854,
  1865,   757, 13412,   758, 13412,   766, 13412,  6708,  6730,  6752,
  6774,  6796,  6818,  6840,  6862,  6884,  6906,  6928,  6950,  6972,
  6994,  7016,  7038,  7060,  7082,  7104,  7126,  7148,   770,-32768,
  1862,-32768,  1863,  2067,   126,  1252,  2072,  2074,   126,  2092,
   126,  1990,  2883,    20,   527,  1252,  2094,  2095,  2883,  2096,
  2883,  2105,  2883,  2107,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,   112,  2111,   112,  2114,-32768,
   -10,  1908,-32768,-32768,    10,-32768,    21,  1910,  7170,    20,
  1912,  1914,-32768,-32768, 13412,-32768, 13412,-32768, 13412,-32768,
 12929, 12952, 12975,  7192,  7214,  7236,  7258,  7280,  7302,  7324,
  7346,  7368,  7390,  7412,  7434,  7456,  7478,  7500,  7522,  7544,
  7566,-32768,-32768,   773,-32768,-32768,  2120,  2131,  2132,  2133,
  2883,  2883,    20,   527,  1252,-32768,-32768,-32768,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,   112,  2134,-32768,-32768,
-32768,-32768,  7588,  3706,  1963,  1932,  1933,  1934,  1936,  1937,
  7610,  7632,  7654,  7676,  7698,  7720,  7742,  7764,  7786,  7808,
  7830,  7852,  7874,  7896,  7918,  7940,  7962,  7984,-32768,-32768,
  2883,  2136,  1966,  1252,   527,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  3730,-32768,-32768,  1939,
  1945,   774, 13412,   778, 13412,   781, 13412,  8006,  8028,  8050,
  8072,  8094,  8116,  8138,  8160,  8182,  8204,  8226,  8248,  8270,
  8292,  8314,  8336,  8358,  8380,  2141,  1252,  2161,  2883,  2162,
  2883,  2166,  2883,  2167,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,-32768,  1964,-32768, 13412,-32768, 13412,-32768, 13412,
-32768, 12998, 13021, 13044,  8402,  8424,  8446,  8468,  8490,  8512,
  8534,  8556,  8578,  8600,  8622,  8644,  8666,  8688,  8710,  1252,
-32768,-32768,-32768,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  1965,  1962,
  1967,  1968,  8732,  8754,  8776,  8798,  8820,  8842,  8864,  8886,
  8908,  8930,  8952,  8974,  8996,  9018,  9040,  1252,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  1970,   782, 13412,   785,
 13412,   789, 13412,  9062,  9084,  9106,  9128,  9150,  9172,  9194,
  9216,  9238,  9260,  9282,  9304,  9326,  9348,  9370,   527,  2883,
  2171,  2883,  2172,  2883,  2176,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  1977, 13412,-32768, 13412,-32768, 13412,-32768, 13067, 13090, 13113,
 13136, 13159, 13182,  9392,  9414,  9436,  9458,  9480,  9502,  9524,
  9546,  9568,  2178,-32768,-32768,-32768,-32768,-32768,-32768,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,-32768,  1973,
  1974,  1979,  1981,  1983,  1985,  9590,  9612,  9634,  9656,  9678,
  9700,  9722,  9744,  9766,  2883,  2883,  2883,  2883,  2883,  2883,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,   790,
 13412,   793, 13412,   794, 13412,   797, 13412,   798, 13412,   806,
 13412,  9788,  9810,  9832,  9854,  9876,  9898,  9920,  9942,  9964,
  2883,  2183,  2883,  2193,  2883,  2203,  2883,  2204,  2883,  2207,
  2883,  2209,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,
  2883, 13412,-32768, 13412,-32768, 13412,-32768, 13412,-32768, 13412,
-32768, 13412,-32768,  9986, 10008, 10030, 10052, 10074, 10096, 13205,
 13228, 13251,  2883,  2883,  2883,  2883,  2883,  2883,-32768,-32768,
-32768, 10118, 10140, 10162, 10184, 10206, 10228,  2006,  2007,  2008,
  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2883, 10250,
 10272, 10294, 10316, 10338, 10360,   812, 13412,   817, 13412,   864,
 13412,  2883,  2883,  2883,  2883,  2883,  2883,  2883,  2215,  2883,
  2216,  2883,  2217, 10382, 10404, 10426, 13274, 13297, 13320, 13412,
-32768, 13412,-32768, 13412,-32768,  2883,  2883,  2883,-32768,-32768,
-32768, 10448, 10470, 10492,  2012,  2013,  2014,  2883,  2883,  2883,
  2883,  2883,  2883, 10514, 10536, 10558,   865, 13412,   871, 13412,
   872, 13412,  2883,  2883,  2883,  2883,  2221,  2883,  2222,  2883,
  2223, 10580, 10602, 10624, 13412,-32768, 13412,-32768, 13412,-32768,
  2883,  2883,  2883, 10646, 10668, 10690,  2883,  2883,  2883, 10712,
 10734, 10756,  2883,  2883,  2883, 13343, 13366, 13389,-32768,-32768,
-32768,  2025,  2027,  2028,  2883,  2883,  2883,   875, 13412,   878,
 13412,   885, 13412,  2883,  2230,  2883,  2232,  2883,  2235, 13412,
-32768, 13412,-32768, 13412,-32768,  2242,  2243,-32768
};

static const short yypgoto[] = {-32768,
  -130,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1595,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -315,   -18,-32768,  2240,     5,  -378,
  -180,     8,-32768,-32768,-32768,-32768,-32768,  2241,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1361, -1382,-32768,
-32768, -1100,   -23,-32768,   236,-32768,   -96,-32768, -1244, -1124,
  1432,  -181,  -345,  -764,  1167,-32768,   -69
};


#define	YYLAST		13616


static const short yytable[] = {   147,
   256,   515,   218,   220,   146,   579,   935,   551,    79,   190,
   390,    80,  1459,   395,  1462,   193,   206,   261,   770,   209,
   159,   216,   221,   151,  1277,  1278,   157,   392,   204,   393,
  1099,  1379,   102,   317,   403,   157,   414,   514,   416,   926,
  1100,  1453,  1102,   263,  1453,   264,  1454,     5,  1453,  1454,
   127,   128,   129,  1454,  1453,   130,  1453,  1453,  1453,  1454,
    90,  1454,  1454,  1454,    89,  1296,   381,   382,   501,   216,
   381,   382,  1535,   374,  1305,   154,  1535,   216,  1453,  1535,
   375,  1312,   820,  1454,   383,  1101,   161,  1103,   384,  1453,
   536,   645,   419,   823,  1454,   537,   646,  1357,   127,   128,
   129,   381,   382,   130,   591,   592,   127,   128,   129,   381,
   382,   130,   310,   311,   312,   754,   216,   313,   316,   652,
   755,   321,   216,   381,   382,    91,   570,  1358,   341,   404,
   342,   343,   344,   511,   346,   197,   348,   349,   198,   360,
   580,    92,   318,   319,  1473,   127,   128,   129,   927,   928,
   130,   127,   128,   129,   139,   140,   130,   379,   380,   102,
   258,    93,   259,   158,   822,   381,   382,  1149,  1093,    94,
   821,   511,   158,    95,  1150,   939,   381,   382,   401,   402,
   761,   405,   973,   407,  1087,  1534,   410,   411,  1538,   205,
   153,   776,  1541,  1134,  1453,  1135,    96,   764,  1754,  1454,
  1758,  1760,  1847,    97,   790,   132,   133,   134,   135,   159,
   132,   133,   134,   135,   222,  1117,  1118,   191,   381,   382,
   210,  1436,  1849,   194,   207,   262,   771,   607,   217,   152,
   394,   139,   140,  1850,   455,   502,   503,   504,    98,   459,
   460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
   480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
   490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
   500,   183,   185,  1283,   219,   381,   382,  1083,   614,  1474,
  1380,   510,   761,  1478,  1703,  1217,   162,  1707,   516,  1710,
   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
   531,   532,   533,   534,   535,   381,   382,   150,   139,   140,
  1535,   542,   999,   544,  1535,   154,   875,  1535,   311,   510,
  1230,   155,   132,   133,   134,   135,   156,   555,   556,   557,
   558,   160,   560,   561,   562,   563,   564,   565,   566,   161,
   568,   569,   961,   139,   140,   511,   163,   132,   133,   134,
   135,   763,   581,   582,   583,   584,   381,   382,   511,   265,
   594,   266,   381,   382,   598,   599,   139,   140,   139,   140,
   603,   381,   382,  1136,  1161,  1137,   164,   575,   575,   611,
   578,   578,   165,  1801,   179,   180,   166,  1805,  1138,  1807,
  1139,     6,     7,   962,     8,   181,   381,   382,   167,   918,
   381,   382,   182,   376,    10,   378,   187,   177,  1535,   188,
   189,   385,  1535,  1371,  1535,   327,   328,  1373,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   651,   171,   381,
   382,   949,   338,   178,   766,   381,   382,   176,  1613,  1614,
  1615,  1616,   267,   186,   268,  1620,  1375,  1170,   192,   324,
   325,   326,   327,   328,   323,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   981,   982,   983,   984,   195,   338,
   381,   382,   759,  1126,  1127,   311,   172,   520,  1284,   173,
   174,   767,   175,   269,   765,   270,   457,  1531,   324,   325,
   326,   327,   328,   196,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   510,   777,   932,   168,   169,   338,   170,
  1000,   199,   200,   759,   788,   271,   510,   272,   792,   793,
   324,   325,   326,   327,   328,   799,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   201,   202,   811,   812,   273,
   338,   274,   203,   381,   382,   211,   815,    11,    12,    13,
    14,    15,    16,    17,    18,  1716,  1717,   213,   824,  1720,
  1537,   212,   214,   511,   381,   382,   275,   215,   276,   924,
   877,   752,   836,   753,   838,   839,   254,   305,  1438,   139,
   140,  1540,   257,   320,   955,   506,   306,   259,    45,    46,
    47,    48,   277,    50,   278,   511,  1110,   139,   140,  1086,
  1088,    56,    57,   547,   307,   259,   573,   574,   326,   327,
   328,   308,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   876,   279,   281,   280,   282,   338,   322,   511,   511,
   511,   511,   324,   325,   326,   327,   328,   339,   329,   330,
   331,   332,   333,   334,   335,   336,   337,  1026,  1027,  1028,
  1029,  1030,   338,   340,  1811,   324,   325,   326,   327,   328,
   345,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   333,   334,   335,   336,   337,   338,   919,   283,   347,   284,
   338,   361,   362,   324,   325,   326,   327,   328,   363,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   908,   909,
   552,   139,   140,   338,   366,   367,   285,   789,   286,   259,
   364,   368,   910,   911,   912,   913,   914,   915,   916,   369,
   287,   510,   288,   985,   920,   370,   289,   923,   290,   371,
   929,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   938,   139,   140,  1886,  1260,   338,   335,   336,   337,   875,
   291,   372,   292,   510,   338,   759,   293,   295,   294,   296,
   511,   373,   324,   325,   326,   327,   328,  1039,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   297,   299,   298,
   300,   301,   338,   302,   406,   409,   510,   510,   510,   510,
   389,   398,   987,   988,   303,   810,   304,   761,   993,   762,
   386,   761,   400,   791,  1941,   761,  1095,   953,  1096,  1004,
  1005,   387,   388,    99,   309,   761,   761,  1109,  1140,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   399,   408,  1043,  1044,  1045,  1046,  1047,
  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,
  1058,  1059,  1060,  1061,  1062,  1063,  1064,  1065,  1066,  1067,
  1068,  1092,  1072,   761,   412,  1141,   324,   325,   326,   327,
   328,   413,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   761,   876,  1142,   415,   417,   338,  1089,   418,   420,
  1094,   324,   325,   326,   327,   328,  1098,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   421,   761,   510,  1143,
  1111,   338,  1112,  1217,  1219,  1218,  1220,   761,   450,  1237,
  1217,  1217,  1381,  1520,  1756,   422,  1757,   131,   423,  1130,
  1131,  1132,   324,   325,   326,   327,   328,   424,   329,   330,
   331,   332,   333,   334,   335,   336,   337,  1769,  1771,  1770,
  1772,   425,   338,  1153,  1154,  1155,  1773,   453,  1774,  1258,
  1796,  1259,  1797,  1877,  1969,  1878,  1970,   426,  1971,  1445,
  1972,  1973,  2100,  1974,  2101,  2102,   427,  2103,  2121,  2104,
  2211,  2105,  2212,  2213,  2215,  2214,  2216,  2217,  2219,  2218,
  2220,   452,   428,   941,   136,   137,  2221,  1223,  2222,   429,
   138,  1189,  2298,   430,  2299,   141,  1287,  2300,   314,  2301,
   144,  1352,   315,   431,   324,   325,   326,   327,   328,   432,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   433,
   434,   977,   978,   979,   338,   456,   435,  1253,   513,   324,
   325,   326,   327,   328,  1224,   329,   330,   331,   332,   333,
   334,   335,   336,   337,  2302,  2346,  2303,  2347,   436,   338,
  1006,  2348,  2350,  2349,  2351,  2394,   437,  2395,  2396,  1015,
  2397,  1318,  1242,  1243,  1244,  2398,   438,  2399,   439,   440,
   441,   442,   443,  1252,  1254,  1255,   444,   445,  1362,   446,
   505,   447,   448,   449,   454,   338,   508,   518,   517,   519,
  1274,  1275,   548,   553,   559,   567,   593,   602,   596,   597,
   605,   615,  1286,   608,   616,  1289,   617,   575,   618,   619,
   578,   620,   621,   622,   623,  1299,   624,   625,   626,   627,
   628,   629,  1306,  1307,  1308,   630,  1387,   631,   632,  1313,
   633,   634,   635,  1317,   636,   637,   638,  1319,  1320,  1321,
  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,
  1342,  1343,  1344,   639,   640,  1347,   641,   642,   643,   644,
   756,   647,   757,   648,   649,   758,   768,  1356,   769,   324,
   325,   326,   327,   328,  1360,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   775,   813,   773,   778,   779,   338,
   780,   782,   784,   785,  1369,   794,   807,   814,   826,   830,
   827,   831,   832,   834,   835,   841,   872,   842,   879,  1363,
   843,   844,   845,   846,    99,   350,  1471,  1384,   847,  1385,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   848,   849,   324,   325,   326,   327,
   328,   351,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   850,   851,   852,  1364,   853,   338,   854,   855,   856,
   857,   858,   859,    45,    46,    47,    48,    49,    50,   860,
   907,   873,   861,   862,   863,   864,    56,    57,   917,   865,
   866,   922,   880,   881,   867,   868,  1232,  1442,  1233,  1546,
   930,   869,  1443,  1444,   905,   882,   870,  1451,   931,  1457,
   933,  1460,   937,  1463,  1464,   934,   883,   944,   871,  1467,
   874,   946,   925,   884,   957,   958,   885,   886,  1476,  1261,
   887,  1264,   575,  1267,   888,   578,  1484,   889,   131,   890,
   891,  1489,   892,   893,  1492,   894,  1494,  1495,  1496,  1497,
  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,
  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,
  1518,  1519,   895,   896,   897,   898,  1522,  1612,   899,   900,
   901,   902,  1528,   906,   310,   311,  1529,   324,   325,   326,
   327,   328,   903,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   904,   956,   959,   136,   352,   338,   960,   963,
   964,   138,   965,   966,   967,   968,   141,   969,   970,   971,
   972,   144,   980,   353,   986,   989,   990,   996,   994,  1001,
  1002,  1003,  1007,  1008,  1009,  1010,  1011,  1014,  1016,  1017,
  1020,  1665,   324,   325,   326,   327,   328,  1021,   329,   330,
   331,   332,   333,   334,   335,   336,   337,  1022,  1023,  1024,
  1033,  1082,   338,  1034,  1035,  1036,  1037,  1596,  1084,  1040,
  1038,  1116,  1041,  1601,  1090,  1091,  1605,   324,   325,   326,
   327,   328,  1097,   329,   330,   331,   332,   333,   334,   335,
   336,   337,  1105,  1107,  1715,  1108,  1146,   338,  1128,  1129,
  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,  1636,  1637,
  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,
  1648,  1133,  1650,  1147,  1651,   324,   325,   326,   327,   328,
  1157,   329,   330,   331,   332,   333,   334,   335,   336,   337,
  1156,  1158,  1162,  1152,  1163,   338,  1164,  1166,  1165,  1167,
  1168,  1169,  1281,   358,  1282,  1171,   609,  1172,  1173,   365,
  1174,  1175,  1190,  1225,  1176,  1177,  1452,  1178,  1458,  1179,
  1461,  1180,  1181,  1182,  1183,  1184,  1186,  1185,  1187,  1188,
  1221,  1226,  1228,   391,  1234,  1235,  1750,  1236,   396,   397,
  1239,  1240,  1279,  1810,   774,  1241,  1245,  1246,  1247,  1248,
  1249,  1250,  1251,  1262,  1265,  1268,  1270,  1271,  1723,  1725,
  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,
  1737,  1738,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,
  1747,  1748,  1272,  1273,  1288,  1276,  1292,  1294,   954,  1853,
  1291,    99,   309,  1293,   378,  1295,  1297,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,  1298,  1300,  1301,  1353,  1302,  1304,  1303,  1310,  1311,
  1314,  1315,  1885,  1346,  1349,  1316,  1842,  1348,  1845,  1350,
  1351,  1354,  1355,  1359,  1365,  1370,  1368,   998,  1472,  1809,
  1372,  1388,  1393,  1374,  1376,  1815,  1382,  1817,  1390,  1819,
  1391,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,
  1830,  1831,  1832,  1833,  1834,  1835,  1836,  1837,  1838,  1839,
  1840,  1841,   324,   325,   326,   327,   328,  1392,   329,   330,
   331,   332,   333,   334,   335,   336,   337,  1394,  1396,  1397,
  1383,  1398,   338,  1402,  1465,  1403,  1404,  1406,  1407,  1437,
  1439,  1475,  1409,  1477,  1480,   131,  1479,  1909,  1481,  1482,
   324,   325,   326,   327,   328,  1483,   329,   330,   331,   332,
   333,   334,   335,   336,   337,  1485,  1487,  1883,  1884,  1488,
   338,  1490,  1491,  1521,  1493,  1891,  1892,  1893,  1894,  1895,
  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,  1905,
  1906,  1907,  1908,  1523,   324,   325,   326,   327,   328,  1527,
   329,   330,   331,   332,   333,   334,   335,   336,   337,  1532,
  1533,  1544,   136,   137,   338,  1545,  1547,  1548,   138,  1587,
  1549,  1553,  1554,   141,  1594,  1598,   786,  1937,   144,  1558,
   787,  1599,  1943,  1945,  1947,  1948,  1949,  1950,  1951,  1952,
  1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,
  1963,  1964,  1965,   324,   325,   326,   327,   328,  1602,   329,
   330,   331,   332,   333,   334,   335,   336,   337,  1603,  1606,
  1607,  1608,  1611,   338,  1617,  1618,  1619,  1550,  1551,   760,
  1621,  1556,  1560,  1622,  1589,  1996,  1623,  1998,  1624,  2000,
  1652,  2002,  2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,
  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,  2019,   324,
   325,   326,   327,   328,  1656,   329,   330,   331,   332,   333,
   334,   335,   336,   337,  1658,  1664,  1659,  1661,  1663,   338,
  1666,  1667,  1668,  1669,  1670,  1671,  1446,  1700,  1447,  1699,
  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,
  2053,  2054,  2055,  2056,  2057,  1701,  1672,  1673,  1674,  1696,
  1702,  1704,  1708,  1711,  1714,  1718,  1719,  1721,  1755,  1752,
  1753,  1762,  1764,  1759,  1761,  2079,  2081,  2083,  2084,  2085,
  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
  2096,  2097,  2098,  1763,   324,   325,   326,   327,   328,  1767,
   329,   330,   331,   332,   333,   334,   335,   336,   337,  1765,
  1768,  1766,  1800,  1798,   338,  1799,  2122,  1803,  2124,  1804,
  2126,   538,  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,
  2136,  2137,  2138,  2139,  2140,  2141,  2142,  1806,  1808,  1813,
  1814,  1816,   585,    28,    29,   586,   587,    32,   588,    34,
  1818,    35,  1820,    37,    38,    39,  1843,    41,    42,  1846,
  1848,  1851,  1854,    44,  1855,  1879,  2166,  2167,  2168,  2169,
  2170,  2171,  2172,  2173,  2174,    55,  1880,  1881,  1882,  1910,
  1913,  1938,  1914,  1915,  1939,  1916,  1993,  1917,  1918,  1967,
  1968,  2191,  2193,  2195,  2197,  2199,  2201,  2202,  2203,  2204,
  2205,  2206,  2207,  2208,  2209,  2210,  1995,  1997,    59,    60,
    61,  1999,  2001,  2059,  2020,  2058,  2123,  2125,  2060,  2061,
  2099,  2127,  2143,  2159,  2175,  2176,    71,  2232,  2233,  2234,
  2177,  2236,  2178,  2238,  2179,  2240,  2180,  2242,  2235,  2244,
  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2237,  2239,
   942,   943,  2241,   945,  2243,   947,   948,  2277,  2278,  2279,
  2311,  2313,  2315,  2331,  2332,  2333,  2356,  2358,  2360,  2262,
  2263,  2264,  2265,  2266,  2267,  2401,  2385,  2403,  2386,  2387,
  2405,  2407,  2408,    78,    86,     0,   878,  2280,  2281,  2282,
  2283,  2284,  2285,  2287,  2289,  2291,     0,  1227,     0,     0,
     0,   991,   992,     0,     0,   995,     0,     0,  2304,  2305,
  2306,  2307,  2308,  2309,  2310,   589,  2312,     0,  2314,     0,
     0,     0,  1012,  1013,     0,     0,     0,     0,  1018,  1019,
     0,     0,  2322,  2323,  2324,  1025,     0,  1032,     0,     0,
     0,     0,     0,     0,  2334,  2335,  2336,  2338,  2340,  2342,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  2352,
  2353,  2354,  2355,     0,  2357,     0,  2359,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  2364,  2365,  2366,
     0,     0,     0,  2370,  2371,  2372,     0,     0,     0,  2376,
  2377,  2378,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  2389,  2391,  2393,     0,     0,     0,     0,     0,     0,
  2400,     0,  2402,     0,  2404,  1104,     0,  1106,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1113,  1114,
  1115,     0,     0,     0,  1119,  1120,  1121,  1122,  1123,  1124,
  1125,     0,    99,   309,     0,     0,     0,     0,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,    99,   549,     0,     0,     0,     0,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,    99,   309,     0,     0,     0,     0,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,     0,     0,     0,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,  1222,     0,     0,
     0,    99,   100,   101,   795,   102,   131,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,     0,   127,   128,   129,     0,   131,   130,     0,   585,
    28,    29,   586,   587,    32,   588,    34,     0,    35,     0,
    37,    38,    39,     0,    41,    42,     0,     0,     0,     0,
    44,     0,     0,  1280,     0,     0,   131,     0,     0,     0,
     0,  1290,    55,   136,   137,     0,     0,     0,     0,   138,
     0,     0,     0,     0,   141,     0,     0,   951,     0,   144,
  1309,   952,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,   137,    59,    60,    61,     0,   138,
     0,     0,     0,     0,   141,     0,     0,     0,     0,   144,
     0,   550,     0,    71,     0,   131,     0,     0,  1345,     0,
     0,     0,     0,  1448,  1449,     0,     0,     0,     0,   138,
     0,     0,     0,     0,  1450,     0,     0,     0,     0,   144,
     0,   182,     0,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,     0,     0,     0,   132,   133,
   134,   135,   800,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,   137,     0,     0,     0,     0,   138,   139,
   140,     0,     0,   141,     0,   142,     0,   143,   144,    99,
   350,     0,   595,     0,     0,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     0,     0,     0,     0,     0,     0,   351,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,    45,    46,
    47,    48,    49,    50,     0,     0,   801,     0,     0,     0,
     0,    56,    57,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1466,     0,     0,     0,  1470,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,  1486,     0,     0,     0,     0,   338,     0,
     0,     0,     0,     0,     0,     0,     0,   809,    99,   309,
   216,     0,     0,   131,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
   128,   129,     0,     0,   130,    99,   309,     0,     0,     0,
     0,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,     0,     0,
   136,   509,     0,     0,     0,     0,   138,     0,     0,     0,
     0,   141,     0,     0,     0,     0,   144,     0,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,  1590,  1591,  1592,   338,     0,
     0,     0,     0,     0,  1597,     0,     0,   950,     0,     0,
     0,     0,   131,    99,   549,  1609,  1610,     0,     0,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,     0,   324,   325,   326,   327,   328,   131,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,  1653,  1654,  1655,   338,     0,     0,     0,     0,     0,
     0,     0,     0,   976,     0,     0,     0,     0,     0,   136,
   137,     0,     0,     0,     0,   138,     0,     0,     0,     0,
   141,     0,     0,     0,     0,   144,     0,   585,    28,    29,
   586,   587,    32,   588,    34,     0,    35,     0,    37,    38,
    39,     0,    41,    42,     0,     0,   136,   137,    44,     0,
     0,     0,   138,     0,     0,     0,     0,   141,     0,  1706,
    55,     0,   144,     0,  1713,     0,     0,   131,     0,     0,
     0,   585,    28,    29,   586,   587,    32,   588,    34,     0,
    35,     0,    37,    38,    39,     0,    41,    42,     0,     0,
     0,     0,    44,    59,    60,    61,     0,     0,     0,     0,
     0,     0,     0,     0,    55,     0,     0,     0,     0,     0,
     0,    71,     0,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,    -7,     1,
     0,   -12,   -55,   338,   136,   137,     0,    59,    60,    61,
   138,     0,  1256,     0,     0,   141,     0,     0,     0,     0,
   144,     0,     0,     0,     0,    71,     0,  1802,     0,     0,
     0,   -55,     0,     0,     0,   -55,   -55,  1812,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,     0,     0,     0,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   585,    28,    29,   586,   587,
    32,   588,    34,     0,    35,     0,    37,    38,    39,     0,
    41,    42,     0,     0,     0,     0,    44,     0,     0,     0,
     0,     0,     0,   -55,   -55,   -55,   -55,     0,    55,     0,
     0,   -55,     0,   -55,   612,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,     0,  1887,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    59,    60,    61,   -12,   -12,   -12,   -12,   -12,   -12,
   -12,   -12,     0,     0,   324,   325,   326,   327,   328,    71,
   329,   330,   331,   332,   333,   334,   335,   336,   337,    -7,
    -7,     0,    -7,     0,   338,   585,    28,    29,   586,   587,
    32,   588,    34,  1468,    35,  1940,    37,    38,    39,     0,
    41,    42,     0,     0,     0,     0,    44,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,   653,
   654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
   664,   665,   666,   667,   668,   669,   670,   671,   672,   673,
   674,   675,   676,   677,   678,   679,   680,     0,  1994,   224,
     0,    59,    60,    61,     0,     0,     0,     0,   613,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    71,
   653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
   663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
   673,   674,   675,   676,   677,   678,   679,   680,     0,     0,
     0,  2039,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,     0,     0,     0,     0,     0,     0,
     0,  1469,     0,     0,   225,   226,   227,     0,     0,  2077,
     0,     0,   228,   229,   230,   231,   232,   233,   234,   235,
   236,   237,    23,     0,     0,   681,     0,     0,   837,     0,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     0,   248,   249,   250,   251,   252,   253,     0,     0,     0,
     0,    24,     0,     0,     0,    25,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,     0,    35,    36,    37,
    38,    39,    40,    41,    42,     0,  1042,     0,    43,    44,
    45,    46,    47,    48,    49,    50,     0,    51,    52,    53,
    54,    55,     0,    56,    57,     0,     0,     0,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
     0,     0,     0,    58,    59,    60,    61,  1525,     0,     0,
     0,    62,     0,    63,     0,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,     0,     0,   324,
   325,   326,   327,   328,  1526,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,     0,     0,   324,   325,   326,   327,   328,  1530,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,     0,     0,   324,   325,   326,
   327,   328,  1536,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,     0,
     0,   324,   325,   326,   327,   328,  1539,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   324,   325,   326,   327,   328,
  1542,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,     0,     0,   324,
   325,   326,   327,   328,  1543,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,     0,     0,   324,   325,   326,   327,   328,  1593,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,     0,     0,   324,   325,   326,
   327,   328,  1657,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,     0,
     0,   324,   325,   326,   327,   328,  1660,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   324,   325,   326,   327,   328,
  1662,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,     0,     0,   324,
   325,   326,   327,   328,  1698,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,     0,     0,   324,   325,   326,   327,   328,  1912,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,     0,     0,   324,   325,   326,
   327,   328,  1966,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   507,
     0,     0,     0,     0,   571,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,   571,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,   572,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,   606,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,   732,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
   733,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,   746,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,   747,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,   748,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,   749,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
   750,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,   751,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,   816,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,   817,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,   818,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
   940,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,   974,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,   975,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,   997,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1144,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1145,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1159,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1160,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1191,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1192,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1193,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1194,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1195,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1196,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1197,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1198,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1199,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1200,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1201,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1202,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1203,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1204,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1205,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1206,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1207,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1208,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1209,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1210,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1211,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1212,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1213,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1214,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1215,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1216,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1231,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1238,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1361,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1366,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1367,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1377,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1378,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1386,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1389,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1400,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1405,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1408,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1410,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1411,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1412,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1413,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1414,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1415,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1416,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1417,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1418,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1419,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1420,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1421,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1422,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1423,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1424,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1425,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1426,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1427,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1428,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1429,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1430,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1431,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1432,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1433,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1434,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1435,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1440,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1441,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1552,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1564,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1565,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1566,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1567,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1568,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1569,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1570,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1571,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1572,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1573,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1574,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1575,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1576,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1577,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1578,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1579,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1580,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1581,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1582,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1583,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1584,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1586,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1588,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1675,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1676,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1677,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1678,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1679,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1680,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1681,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1682,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1683,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1684,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1685,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1686,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1687,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1688,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1689,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1690,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1691,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1692,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1693,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1694,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1695,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1775,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1776,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1777,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1778,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1779,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1780,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1781,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1782,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1783,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1784,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1785,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1786,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1787,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1788,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1789,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1790,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1791,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1792,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1793,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1794,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1795,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1852,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1859,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1860,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1861,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1862,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1863,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1864,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1865,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1866,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1867,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1868,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1869,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1870,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1871,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1872,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1873,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1874,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1875,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1876,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1911,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1919,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1920,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1921,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1922,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1923,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1924,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1925,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1926,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1927,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1928,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1929,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1930,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1931,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1932,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1933,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1934,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1935,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1936,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1975,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1976,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1977,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1978,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1979,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1980,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1981,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1982,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1983,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1984,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1985,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1986,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1987,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  1988,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  1989,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  1990,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  1991,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  1992,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2024,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2025,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2026,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2027,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2028,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2029,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2030,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2031,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2032,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2033,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2034,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2035,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2036,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2037,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2038,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2062,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2063,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2064,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2065,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2066,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2067,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2068,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2069,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2070,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2071,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2072,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2073,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2074,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2075,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2076,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2106,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2107,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2108,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2109,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2110,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2111,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2112,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2113,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2114,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2115,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2116,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2117,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2118,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2119,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2120,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2150,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2151,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2152,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2153,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2154,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2155,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2156,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2157,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2158,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2181,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2182,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2183,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2184,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2185,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2186,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2187,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2188,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2189,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2223,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2224,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2225,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2226,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2227,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2228,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2229,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2230,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2231,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2253,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2254,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2255,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2256,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2257,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2258,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2271,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2272,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2273,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2274,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2275,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2276,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2292,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2293,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2294,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2295,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2296,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2297,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2316,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2317,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2318,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2329,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2330,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2343,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2344,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2345,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2361,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2362,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2363,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2367,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   324,   325,   326,   327,   328,  2368,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   324,   325,   326,   327,   328,
  2369,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   324,   325,   326,
   327,   328,  2373,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   324,
   325,   326,   327,   328,  2374,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   324,   325,   326,   327,   328,  2375,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   650,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   711,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   713,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   715,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   717,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   719,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   721,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   723,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   725,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   727,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   729,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   731,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   735,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   737,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   739,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   741,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   743,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   745,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   819,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   825,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   828,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
   829,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,   921,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
  1074,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,  1076,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
  1078,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,  1080,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,     0,     0,
  1081,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,     0,     0,  1229,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,   507,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   539,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,   540,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   541,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
   543,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   545,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,   546,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   554,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,   600,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   601,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,   604,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   610,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,   710,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   712,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
   714,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   716,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,   718,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   720,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,   722,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   724,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,   726,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   728,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,   730,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   734,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
   736,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   738,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,   740,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   742,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,   744,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   781,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,   783,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   796,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,   797,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,   798,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
   802,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,   803,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,   804,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,   805,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,   806,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,   808,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,   833,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,   840,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,  1073,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,  1075,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
  1077,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,  1079,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,  1085,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,  1148,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,  1257,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,  1285,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,  1395,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,  1399,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,  1401,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,  1524,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
  1555,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,  1557,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,  1559,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,  1561,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,  1562,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,  1563,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,  1585,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,  1697,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,  1856,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,  1857,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
  1858,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,  2021,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,  2022,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,  2023,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,  2144,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,  2145,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,  2146,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,  2147,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,  2148,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338,     0,  2149,   324,   325,
   326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
   335,   336,   337,     0,     0,     0,     0,     0,   338,     0,
  2259,   324,   325,   326,   327,   328,     0,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,   338,     0,  2260,   324,   325,   326,   327,   328,     0,
   329,   330,   331,   332,   333,   334,   335,   336,   337,     0,
     0,     0,     0,     0,   338,     0,  2261,   324,   325,   326,
   327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
   336,   337,     0,     0,     0,     0,     0,   338,     0,  2319,
   324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
   333,   334,   335,   336,   337,     0,     0,     0,     0,     0,
   338,     0,  2320,   324,   325,   326,   327,   328,     0,   329,
   330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
     0,     0,     0,   338,     0,  2321,   324,   325,   326,   327,
   328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
   337,     0,     0,     0,     0,     0,   338,     0,  2379,   324,
   325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
   334,   335,   336,   337,     0,     0,     0,     0,     0,   338,
     0,  2380,   324,   325,   326,   327,   328,     0,   329,   330,
   331,   332,   333,   334,   335,   336,   337,     0,     0,     0,
     0,     0,   338,     0,  2381,   324,   325,   326,   327,   328,
     0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     0,     0,     0,     0,     0,   338
};

static const short yycheck[] = {    23,
    97,   317,    72,    73,    23,   384,   771,   353,     4,     4,
   191,     4,  1374,   194,  1376,     4,     4,     4,     4,     4,
    68,     5,     3,     6,  1149,  1150,    68,     4,    44,     6,
     6,  1276,     7,     4,   110,    68,   217,     7,   219,     4,
     6,    69,     6,   205,    69,   207,    74,     6,    69,    74,
    34,    35,    36,    74,    69,    39,    69,    69,    69,    74,
     7,    74,    74,    74,   175,  1166,   194,   195,     4,     5,
   194,   195,  1455,   205,  1175,   205,  1459,     5,    69,  1462,
   212,  1182,   212,    74,   212,    51,   205,    51,   212,    69,
   206,   206,   223,   212,    74,   211,   211,     6,    34,    35,
    36,   194,   195,    39,     6,     7,    34,    35,    36,   194,
   195,    39,   136,   137,   138,   206,     5,   141,   142,   212,
   211,   145,     5,   194,   195,     6,   211,     6,   152,   205,
   154,   155,   156,   315,   158,    40,   160,   161,    43,   163,
   211,     6,   113,   114,  1389,    34,    35,    36,   113,   114,
    39,    34,    35,    36,   201,   202,    39,   181,   182,     7,
   207,     6,   209,   205,   212,   194,   195,   205,   933,     6,
   212,   353,   205,     6,   212,   206,   194,   195,   202,   203,
   211,   205,   211,   207,     7,   213,   210,   211,   213,   205,
     6,   537,   213,   211,    69,   213,   205,   513,   213,    74,
   213,   213,   213,   205,   550,   180,   181,   182,   183,    68,
   180,   181,   182,   183,   195,    58,    59,   212,   194,   195,
   205,  1346,   213,   212,   212,   212,   212,   408,   212,   212,
   207,   201,   202,   213,   258,   305,   306,   307,   205,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,    46,    47,     8,   212,   194,   195,   206,   419,  1390,
   206,   315,   211,  1394,  1656,   211,    48,  1659,   317,  1661,
   324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   194,   195,   205,   201,   202,
  1703,   345,     8,   347,  1707,   205,   209,  1710,   352,   353,
  1095,   205,   180,   181,   182,   183,   205,   361,   362,   363,
   364,   205,   366,   367,   368,   369,   370,   371,   372,   205,
   374,   375,     6,   201,   202,   537,   205,   180,   181,   182,
   183,   209,   386,   387,   388,   389,   194,   195,   550,   205,
   394,   207,   194,   195,   398,   399,   201,   202,   201,   202,
   404,   194,   195,   211,   206,   213,    44,   383,   384,   413,
   383,   384,    44,  1755,   194,   195,    44,  1759,   211,  1761,
   213,   171,   172,    57,   174,   205,   194,   195,    44,   755,
   194,   195,   212,   178,     3,   180,    40,    44,  1801,    43,
    44,   186,  1805,   211,  1807,   187,   188,   211,   190,   191,
   192,   193,   194,   195,   196,   197,   198,   456,    46,   194,
   195,   787,   204,   212,   514,   194,   195,   205,  1549,  1550,
  1551,  1552,   205,   212,   207,  1556,   211,   206,    44,   184,
   185,   186,   187,   188,     6,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   820,   821,   822,   823,     6,   204,
   194,   195,   506,     6,     7,   509,    40,     6,   213,    43,
    44,   515,    46,   205,   513,   207,   261,   211,   184,   185,
   186,   187,   188,     6,   190,   191,   192,   193,   194,   195,
   196,   197,   198,   537,   538,     6,    43,    44,   204,    46,
   206,     4,     4,   547,   548,   205,   550,   207,   552,   553,
   184,   185,   186,   187,   188,   559,   190,   191,   192,   193,
   194,   195,   196,   197,   198,     4,   205,   571,   572,   205,
   204,   207,   205,   194,   195,   205,   580,   146,   147,   148,
   149,   150,   151,   152,   153,  1666,  1667,     4,   592,  1670,
   211,     6,     4,   755,   194,   195,   205,    44,   207,   761,
   650,   207,   606,   209,   608,   609,   205,   205,  1353,   201,
   202,   211,     5,     4,     6,   207,   205,   209,    62,    63,
    64,    65,   205,    67,   207,   787,   952,   201,   202,   925,
   926,    75,    76,   207,   205,   209,   381,   382,   186,   187,
   188,   205,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   650,   205,   205,   207,   207,   204,     6,   820,   821,
   822,   823,   184,   185,   186,   187,   188,     6,   190,   191,
   192,   193,   194,   195,   196,   197,   198,   131,   132,   133,
   134,   135,   204,     5,  1765,   184,   185,   186,   187,   188,
   205,   190,   191,   192,   193,   194,   195,   196,   197,   198,
   194,   195,   196,   197,   198,   204,   756,   205,   205,   207,
   204,   212,   205,   184,   185,   186,   187,   188,   205,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   732,   733,
     8,   201,   202,   204,   212,   212,   205,   207,   207,   209,
   205,   205,   746,   747,   748,   749,   750,   751,   752,   205,
   205,   755,   207,     6,   758,   205,   205,   761,   207,   205,
   764,   190,   191,   192,   193,   194,   195,   196,   197,   198,
   774,   201,   202,  1854,  1133,   204,   196,   197,   198,   209,
   205,   205,   207,   787,   204,   789,   205,   205,   207,   207,
   952,     4,   184,   185,   186,   187,   188,   874,   190,   191,
   192,   193,   194,   195,   196,   197,   198,   205,   205,   207,
   207,   205,   204,   207,   209,   116,   820,   821,   822,   823,
   207,   207,   826,   827,   205,   570,   207,   211,   832,   213,
   212,   211,     6,   213,  1915,   211,   211,   213,   213,   843,
   844,   212,   212,     3,     4,   211,   211,   213,   213,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   207,   212,   879,   880,   881,   882,   883,
   884,   885,   886,   887,   888,   889,   890,   891,   892,   893,
   894,   895,   896,   897,   898,   899,   900,   901,   902,   903,
   904,     6,   906,   211,     6,   213,   184,   185,   186,   187,
   188,   205,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   211,   921,   213,     6,     6,   204,   926,     3,   205,
   934,   184,   185,   186,   187,   188,   940,   190,   191,   192,
   193,   194,   195,   196,   197,   198,   205,   211,   952,   213,
   954,   204,   956,   211,   211,   213,   213,   211,     5,   213,
   211,   211,   213,   213,   211,   205,   213,   127,   205,   973,
   974,   975,   184,   185,   186,   187,   188,   205,   190,   191,
   192,   193,   194,   195,   196,   197,   198,   211,   211,   213,
   213,   205,   204,   997,   998,   999,   211,   206,   213,   211,
   211,   213,   213,   211,   211,   213,   213,   205,   211,  1368,
   213,   211,   211,   213,   213,   211,   205,   213,  2099,   211,
   211,   213,   213,   211,   211,   213,   213,   211,   211,   213,
   213,   211,   205,   778,   194,   195,   211,  1087,   213,   205,
   200,  1040,   211,   205,   213,   205,  1157,   211,   208,   213,
   210,     6,   212,   205,   184,   185,   186,   187,   188,   205,
   190,   191,   192,   193,   194,   195,   196,   197,   198,   205,
   205,   816,   817,   818,   204,     4,   205,  1127,   208,   184,
   185,   186,   187,   188,  1088,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   211,   211,   213,   213,   205,   204,
   845,   211,   211,   213,   213,   211,   205,   213,   211,   854,
   213,  1188,  1116,  1117,  1118,   211,   205,   213,   205,   205,
   205,   205,   205,  1127,  1128,  1129,   205,   205,     6,   205,
     5,   205,   205,   205,   211,   204,     7,     7,   209,   207,
  1144,  1145,   212,     7,     7,   206,     6,   111,     7,     7,
   113,     5,  1156,   212,     5,  1159,     5,  1133,     5,     5,
  1133,     5,     5,     5,     5,  1169,     5,     5,     5,     5,
     5,     5,  1176,  1177,  1178,     5,  1287,     5,     5,  1183,
     5,     5,     5,  1187,     5,     5,   164,  1191,  1192,  1193,
  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,
  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,     5,     5,  1219,     5,     5,     3,     5,
   211,     5,   206,     6,     5,   211,     6,  1231,     4,   184,
   185,   186,   187,   188,  1238,   190,   191,   192,   193,   194,
   195,   196,   197,   198,     6,   213,   208,     7,     7,   204,
     7,     7,     7,     7,  1258,     7,   209,   213,   212,     7,
   212,     7,   205,     7,   209,   176,     5,   211,   205,     6,
   211,   211,   211,   211,     3,     4,  1387,  1281,   211,  1283,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   211,   211,   184,   185,   186,   187,
   188,    40,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   211,   211,   211,     6,   211,   204,   211,   211,   211,
   211,   211,   211,    62,    63,    64,    65,    66,    67,   211,
     6,   206,   211,   211,   211,   211,    75,    76,     4,   211,
   211,     6,   205,   205,   211,   211,  1101,  1361,  1103,     6,
     6,   211,  1366,  1367,   212,   205,   211,  1371,     6,  1373,
     7,  1375,     6,  1377,  1378,   207,   205,     7,   211,  1383,
   211,     7,   208,   205,     7,     7,   205,   205,  1392,  1134,
   205,  1136,  1368,  1138,   205,  1368,  1400,   205,   127,   205,
   205,  1405,   205,   205,  1408,   205,  1410,  1411,  1412,  1413,
  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,
  1424,  1425,  1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,
  1434,  1435,   205,   205,   205,   205,  1440,  1548,   205,   205,
   205,   205,  1446,   212,  1448,  1449,  1450,   184,   185,   186,
   187,   188,   205,   190,   191,   192,   193,   194,   195,   196,
   197,   198,   205,   212,     7,   194,   195,   204,     7,     7,
     7,   200,     7,     7,     7,     7,   205,     7,     4,     7,
     7,   210,     6,   212,     6,     6,     6,     4,     7,     7,
   177,     3,     3,     3,   196,     3,     3,     3,     3,     3,
     3,  1612,   184,   185,   186,   187,   188,     3,   190,   191,
   192,   193,   194,   195,   196,   197,   198,     3,     3,     3,
     3,   206,   204,     5,     5,     3,     3,  1531,   206,     4,
     6,   205,     6,  1537,   209,     7,  1540,   184,   185,   186,
   187,   188,     6,   190,   191,   192,   193,   194,   195,   196,
   197,   198,     6,     6,  1665,     6,     6,   204,   212,   212,
  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,
  1584,   212,  1586,     6,  1588,   184,   185,   186,   187,   188,
   173,   190,   191,   192,   193,   194,   195,   196,   197,   198,
   212,   211,   211,   112,   206,   204,   211,   211,   206,   206,
   211,   211,   211,   162,   213,   211,     8,   206,   206,   168,
   211,   211,     6,     6,   211,   211,  1371,   211,  1373,   211,
  1375,   206,   211,   211,   211,   211,   206,   211,   211,   211,
   209,     4,     6,   192,     6,     6,  1696,   208,   197,   198,
     6,     6,   112,  1764,     8,     6,     6,     6,     6,     6,
     6,     6,     6,     6,     6,     6,     6,     6,  1672,  1673,
  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
  1684,  1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,
  1694,  1695,     6,     6,     3,     7,     3,   196,     8,  1810,
     6,     3,     4,     6,  1449,     6,     6,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     3,     6,     3,     7,     6,     3,     6,     6,     3,
     3,     3,  1853,   212,     4,     6,  1796,     6,  1798,     6,
     6,     6,   209,   208,     6,   213,   212,     8,     6,  1763,
   212,   206,   206,   212,   212,  1769,   212,  1771,   211,  1773,
   211,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,
  1794,  1795,   184,   185,   186,   187,   188,   211,   190,   191,
   192,   193,   194,   195,   196,   197,   198,   211,   211,   206,
   109,   206,   204,   211,   112,   206,   206,   211,   206,   206,
   114,     3,   211,     6,     3,   127,     6,  1877,     6,     6,
   184,   185,   186,   187,   188,     6,   190,   191,   192,   193,
   194,   195,   196,   197,   198,     6,     6,  1851,  1852,     6,
   204,     3,     6,     6,     5,  1859,  1860,  1861,  1862,  1863,
  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,     5,   184,   185,   186,   187,   188,   213,
   190,   191,   192,   193,   194,   195,   196,   197,   198,     6,
   212,   212,   194,   195,   204,   211,   213,   173,   200,     6,
   211,   206,   206,   205,     6,     6,   208,  1911,   210,   206,
   212,     6,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,
  1934,  1935,  1936,   184,   185,   186,   187,   188,     6,   190,
   191,   192,   193,   194,   195,   196,   197,   198,     6,     6,
     6,     6,     6,   204,     6,     6,     6,   211,   211,   508,
     6,   211,   211,     6,   211,  1969,     6,  1971,     5,  1973,
     5,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,   184,
   185,   186,   187,   188,   212,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   211,   213,   212,   212,   211,   204,
   211,   211,   206,   206,   211,   211,   211,     6,   213,   211,
  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,
  2034,  2035,  2036,  2037,  2038,     6,   212,   212,   212,   212,
     6,     6,     6,     6,   109,     6,     6,     5,   212,     6,
     5,   213,   173,   212,   212,  2059,  2060,  2061,  2062,  2063,
  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,
  2074,  2075,  2076,   212,   184,   185,   186,   187,   188,   206,
   190,   191,   192,   193,   194,   195,   196,   197,   198,   211,
   206,   211,     6,   212,   204,   213,  2100,     6,  2102,     6,
  2104,   211,  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,
  2114,  2115,  2116,  2117,  2118,  2119,  2120,     6,   109,     6,
     6,     6,    40,    41,    42,    43,    44,    45,    46,    47,
     6,    49,     6,    51,    52,    53,     6,    55,    56,     6,
   213,   212,   211,    61,   211,     6,  2150,  2151,  2152,  2153,
  2154,  2155,  2156,  2157,  2158,    73,     6,     6,     6,     6,
   178,     6,   211,   211,   179,   212,     6,   212,   212,   211,
   206,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,
  2184,  2185,  2186,  2187,  2188,  2189,     6,     6,   106,   107,
   108,     6,     6,   212,   211,   211,     6,     6,   212,   212,
   211,     6,   206,     6,   212,   212,   124,  2211,     6,  2213,
   212,  2215,   212,  2217,   212,  2219,   212,  2221,     6,  2223,
  2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,     6,     6,
   779,   780,     6,   782,     6,   784,   785,   212,   212,   212,
     6,     6,     6,   212,   212,   212,     6,     6,     6,  2253,
  2254,  2255,  2256,  2257,  2258,     6,   212,     6,   212,   212,
     6,     0,     0,     4,     4,    -1,   652,  2271,  2272,  2273,
  2274,  2275,  2276,  2277,  2278,  2279,    -1,  1091,    -1,    -1,
    -1,   830,   831,    -1,    -1,   834,    -1,    -1,  2292,  2293,
  2294,  2295,  2296,  2297,  2298,   213,  2300,    -1,  2302,    -1,
    -1,    -1,   851,   852,    -1,    -1,    -1,    -1,   857,   858,
    -1,    -1,  2316,  2317,  2318,   864,    -1,   866,    -1,    -1,
    -1,    -1,    -1,    -1,  2328,  2329,  2330,  2331,  2332,  2333,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2343,
  2344,  2345,  2346,    -1,  2348,    -1,  2350,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2361,  2362,  2363,
    -1,    -1,    -1,  2367,  2368,  2369,    -1,    -1,    -1,  2373,
  2374,  2375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  2385,  2386,  2387,    -1,    -1,    -1,    -1,    -1,    -1,
  2394,    -1,  2396,    -1,  2398,   944,    -1,   946,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   957,   958,
   959,    -1,    -1,    -1,   963,   964,   965,   966,   967,   968,
   969,    -1,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,  1086,    -1,    -1,
    -1,     3,     4,     5,   213,     7,   127,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,    -1,   127,    39,    -1,    40,
    41,    42,    43,    44,    45,    46,    47,    -1,    49,    -1,
    51,    52,    53,    -1,    55,    56,    -1,    -1,    -1,    -1,
    61,    -1,    -1,  1152,    -1,    -1,   127,    -1,    -1,    -1,
    -1,  1160,    73,   194,   195,    -1,    -1,    -1,    -1,   200,
    -1,    -1,    -1,    -1,   205,    -1,    -1,   208,    -1,   210,
  1179,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   194,   195,   106,   107,   108,    -1,   200,
    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,   210,
    -1,   212,    -1,   124,    -1,   127,    -1,    -1,  1217,    -1,
    -1,    -1,    -1,   194,   195,    -1,    -1,    -1,    -1,   200,
    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,   210,
    -1,   212,    -1,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,   180,   181,
   182,   183,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   194,   195,    -1,    -1,    -1,    -1,   200,   201,
   202,    -1,    -1,   205,    -1,   207,    -1,   209,   210,     3,
     4,    -1,   213,    -1,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    62,    63,
    64,    65,    66,    67,    -1,    -1,   213,    -1,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1382,    -1,    -1,    -1,  1386,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,  1402,    -1,    -1,    -1,    -1,   204,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,     3,     4,
     5,    -1,    -1,   127,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,    -1,    -1,    39,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
   194,   195,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
    -1,   205,    -1,    -1,    -1,    -1,   210,    -1,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,  1524,  1525,  1526,   204,    -1,
    -1,    -1,    -1,    -1,  1533,    -1,    -1,   213,    -1,    -1,
    -1,    -1,   127,     3,     4,  1544,  1545,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,   184,   185,   186,   187,   188,   127,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,  1590,  1591,  1592,   204,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,   194,
   195,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
   205,    -1,    -1,    -1,    -1,   210,    -1,    40,    41,    42,
    43,    44,    45,    46,    47,    -1,    49,    -1,    51,    52,
    53,    -1,    55,    56,    -1,    -1,   194,   195,    61,    -1,
    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,  1658,
    73,    -1,   210,    -1,  1663,    -1,    -1,   127,    -1,    -1,
    -1,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
    49,    -1,    51,    52,    53,    -1,    55,    56,    -1,    -1,
    -1,    -1,    61,   106,   107,   108,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    -1,   124,    -1,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,     0,     1,
    -1,     3,     4,   204,   194,   195,    -1,   106,   107,   108,
   200,    -1,   213,    -1,    -1,   205,    -1,    -1,    -1,    -1,
   210,    -1,    -1,    -1,    -1,   124,    -1,  1756,    -1,    -1,
    -1,    33,    -1,    -1,    -1,    37,    38,  1766,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
    52,    53,    54,    55,    56,    -1,    -1,    -1,    60,    61,
    62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
    72,    73,    -1,    75,    76,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,    49,    -1,    51,    52,    53,    -1,
    55,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
    -1,    -1,    -1,   105,   106,   107,   108,    -1,    73,    -1,
    -1,   113,    -1,   115,   213,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,    -1,  1855,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   106,   107,   108,   146,   147,   148,   149,   150,   151,
   152,   153,    -1,    -1,   184,   185,   186,   187,   188,   124,
   190,   191,   192,   193,   194,   195,   196,   197,   198,   171,
   172,    -1,   174,    -1,   204,    40,    41,    42,    43,    44,
    45,    46,    47,   213,    49,  1914,    51,    52,    53,    -1,
    55,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,    -1,  1967,    43,
    -1,   106,   107,   108,    -1,    -1,    -1,    -1,   213,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,    -1,
    -1,  2020,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   213,    -1,    -1,   128,   129,   130,    -1,    -1,  2058,
    -1,    -1,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,     4,    -1,    -1,   213,    -1,    -1,   213,    -1,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    33,    -1,    -1,    -1,    37,    38,    -1,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
    52,    53,    54,    55,    56,    -1,   213,    -1,    60,    61,
    62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
    72,    73,    -1,    75,    76,    -1,    -1,    -1,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
    -1,    -1,    -1,   105,   106,   107,   108,   213,    -1,    -1,
    -1,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,   184,
   185,   186,   187,   188,   213,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,    -1,    -1,   184,   185,   186,   187,   188,   213,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,    -1,    -1,   184,   185,   186,
   187,   188,   213,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,
    -1,   184,   185,   186,   187,   188,   213,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   184,   185,   186,   187,   188,
   213,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,   184,
   185,   186,   187,   188,   213,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,    -1,    -1,   184,   185,   186,   187,   188,   213,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,    -1,    -1,   184,   185,   186,
   187,   188,   213,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,
    -1,   184,   185,   186,   187,   188,   213,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   184,   185,   186,   187,   188,
   213,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,   184,
   185,   186,   187,   188,   213,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,    -1,    -1,   184,   185,   186,   187,   188,   213,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,    -1,    -1,   184,   185,   186,
   187,   188,   213,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
    -1,    -1,    -1,    -1,   211,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   184,   185,   186,   187,   188,   211,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   184,   185,   186,   187,   188,
   211,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,   185,   186,
   187,   188,   211,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   184,
   185,   186,   187,   188,   211,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   184,   185,   186,   187,   188,   211,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,    -1,    -1,   208,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,
   186,   187,   188,    -1,   190,   191,   192,   193,   194,   195,
   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,
   206,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
    -1,   204,    -1,   206,   184,   185,   186,   187,   188,    -1,
   190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,
   187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
   197,   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,
   184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,   184,   185,   186,   187,   188,    -1,   190,
   191,   192,   193,   194,   195,   196,   197,   198,    -1,    -1,
    -1,    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,
   188,    -1,   190,   191,   192,   193,   194,   195,   196,   197,
   198,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   184,
   185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,   204,
    -1,   206,   184,   185,   186,   187,   188,    -1,   190,   191,
   192,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
    -1,    -1,   204,    -1,   206,   184,   185,   186,   187,   188,
    -1,   190,   191,   192,   193,   194,   195,   196,   197,   198,
    -1,    -1,    -1,    -1,    -1,   204
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 164 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 170 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 171 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 181 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STLStartSolid();
      return 1;
    ;
    break;}
case 10:
#line 194 "Gmsh.y"
{
      STLAddFacet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d,
		  yyvsp[-18].d, yyvsp[-17].d, yyvsp[-16].d);
      return 1;
    ;
    break;}
case 11:
#line 200 "Gmsh.y"
{
      STLEndSolid();
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 219 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 226 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 231 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 242 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 245 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 249 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 255 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 261 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 268 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 274 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 278 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 282 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 289 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 293 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 298 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 302 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 306 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 310 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 314 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 318 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 322 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 326 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 338 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 342 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 346 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 350 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 354 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 373 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 395 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 396 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 400 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 409 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 414 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 432 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 449 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 487 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 489 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 494 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 499 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 506 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 508 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 513 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 519 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 527 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 529 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 534 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 540 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 548 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 550 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 556 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 563 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 571 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 573 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 579 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 586 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 594 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 596 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 602 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 609 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 617 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 619 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 626 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 636 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 644 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 646 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 653 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 663 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 671 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 673 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 680 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 690 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 698 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 700 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 708 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 718 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 728 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 736 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 746 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 754 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 756 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 764 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 774 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 782 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 784 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 792 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 802 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 810 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 812 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 820 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 830 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 838 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 840 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 848 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 858 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 868 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 880 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 896 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 904 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 906 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 918 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 934 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 942 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 944 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 956 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 972 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 980 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 982 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 992 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1005 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1013 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1015 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1025 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1038 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1046 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1048 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1058 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1071 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1079 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1081 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1090 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1103 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1111 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1113 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1122 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1135 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1143 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1145 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1154 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1167 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1175 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1180 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1188 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1195 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1202 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1207 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1215 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1222 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1230 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1237 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1239 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1244 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1251 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1252 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1253 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1254 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1255 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1259 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1260 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1268 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 220:
#line 1299 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 221:
#line 1338 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1392 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1409 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 224:
#line 1420 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 225:
#line 1439 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 226:
#line 1453 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 227:
#line 1470 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 228:
#line 1496 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1523 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 230:
#line 1537 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 231:
#line 1554 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 232:
#line 1568 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 233:
#line 1585 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1605 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1628 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1638 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 237:
#line 1657 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1673 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1689 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1708 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1727 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1745 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1763 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1781 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1807 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1825 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1852 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1871 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1895 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1919 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1945 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1962 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 253:
#line 1980 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 1999 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2018 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2057 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2083 "Gmsh.y"
{
      // define a new surface
      int num = (int)yyvsp[-10].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	s->Support = s;
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      yyval.s.Type = MSH_SURF_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2103 "Gmsh.y"
{
      // add a poly rep to an existing surface
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2122 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2140 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2159 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2176 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2192 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2212 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2229 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2246 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 267:
#line 2267 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 268:
#line 2272 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 269:
#line 2277 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2282 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 271:
#line 2289 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 272:
#line 2290 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 273:
#line 2291 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 274:
#line 2296 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 275:
#line 2300 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 276:
#line 2304 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 277:
#line 2320 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 278:
#line 2336 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2352 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 280:
#line 2373 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 281:
#line 2387 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 282:
#line 2393 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 283:
#line 2399 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 284:
#line 2411 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 285:
#line 2420 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 286:
#line 2430 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 287:
#line 2440 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 288:
#line 2459 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 289:
#line 2473 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2481 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 291:
#line 2487 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 292:
#line 2498 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 293:
#line 2512 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 294:
#line 2556 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 295:
#line 2571 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 296:
#line 2587 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 297:
#line 2597 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 298:
#line 2608 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 299:
#line 2612 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 300:
#line 2616 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 301:
#line 2620 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 302:
#line 2633 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 303:
#line 2648 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 304:
#line 2664 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 305:
#line 2690 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 306:
#line 2717 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 307:
#line 2749 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 308:
#line 2756 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 309:
#line 2761 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 310:
#line 2767 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 311:
#line 2771 "Gmsh.y"
{
    ;
    break;}
case 312:
#line 2782 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 313:
#line 2798 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 314:
#line 2814 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 315:
#line 2830 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 316:
#line 2835 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 317:
#line 2851 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2856 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2872 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 320:
#line 2877 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2895 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 322:
#line 2918 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 2941 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 324:
#line 2964 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 325:
#line 2969 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 326:
#line 2992 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 327:
#line 2997 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3020 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 329:
#line 3025 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3051 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 331:
#line 3074 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 332:
#line 3097 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 333:
#line 3120 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 334:
#line 3125 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 335:
#line 3148 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 336:
#line 3154 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 337:
#line 3177 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 338:
#line 3183 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 339:
#line 3209 "Gmsh.y"
{
    ;
    break;}
case 340:
#line 3212 "Gmsh.y"
{
    ;
    break;}
case 341:
#line 3218 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 342:
#line 3244 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 343:
#line 3268 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 344:
#line 3277 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 345:
#line 3295 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 346:
#line 3313 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 347:
#line 3331 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 348:
#line 3358 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 349:
#line 3384 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 350:
#line 3410 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 351:
#line 3424 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 352:
#line 3443 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 353:
#line 3447 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 354:
#line 3456 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 355:
#line 3457 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 356:
#line 3458 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 357:
#line 3459 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 358:
#line 3460 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 359:
#line 3464 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 360:
#line 3465 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 361:
#line 3466 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 362:
#line 3467 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 363:
#line 3468 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 364:
#line 3469 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 365:
#line 3470 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 366:
#line 3471 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 367:
#line 3473 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 368:
#line 3479 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 369:
#line 3480 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 370:
#line 3481 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 371:
#line 3482 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 372:
#line 3483 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 373:
#line 3484 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 374:
#line 3485 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 375:
#line 3486 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 376:
#line 3487 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 377:
#line 3488 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 378:
#line 3489 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 379:
#line 3490 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 380:
#line 3491 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 381:
#line 3492 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 382:
#line 3493 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 383:
#line 3494 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 384:
#line 3495 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 385:
#line 3496 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 386:
#line 3497 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 387:
#line 3498 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 388:
#line 3499 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3500 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 390:
#line 3501 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3502 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 392:
#line 3503 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3504 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 394:
#line 3505 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 395:
#line 3506 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 396:
#line 3507 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 397:
#line 3508 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 398:
#line 3509 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 399:
#line 3510 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 400:
#line 3512 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 401:
#line 3513 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 402:
#line 3514 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 403:
#line 3515 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 404:
#line 3516 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 405:
#line 3517 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 406:
#line 3518 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 407:
#line 3519 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 408:
#line 3520 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 409:
#line 3521 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3522 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 411:
#line 3523 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3524 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 413:
#line 3525 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 414:
#line 3526 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 415:
#line 3527 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 416:
#line 3528 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 417:
#line 3529 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 418:
#line 3530 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 419:
#line 3531 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 420:
#line 3532 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 421:
#line 3541 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 422:
#line 3542 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 423:
#line 3543 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 424:
#line 3544 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 425:
#line 3549 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 426:
#line 3562 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 427:
#line 3582 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 428:
#line 3596 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 429:
#line 3609 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 430:
#line 3632 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 431:
#line 3650 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 432:
#line 3668 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 433:
#line 3686 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 434:
#line 3704 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 435:
#line 3712 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 436:
#line 3716 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 437:
#line 3720 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 438:
#line 3724 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 439:
#line 3728 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 440:
#line 3735 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 441:
#line 3739 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 442:
#line 3743 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 443:
#line 3747 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 444:
#line 3754 "Gmsh.y"
{
    ;
    break;}
case 445:
#line 3757 "Gmsh.y"
{
    ;
    break;}
case 446:
#line 3763 "Gmsh.y"
{
    ;
    break;}
case 447:
#line 3766 "Gmsh.y"
{
    ;
    break;}
case 448:
#line 3772 "Gmsh.y"
{
    ;
    break;}
case 449:
#line 3775 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 450:
#line 3779 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 451:
#line 3786 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 452:
#line 3791 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 453:
#line 3799 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 454:
#line 3804 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 455:
#line 3808 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 456:
#line 3812 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 457:
#line 3824 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 458:
#line 3830 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 459:
#line 3841 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 460:
#line 3861 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 461:
#line 3871 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 462:
#line 3881 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 463:
#line 3893 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 464:
#line 3910 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 465:
#line 3929 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 466:
#line 3953 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 467:
#line 3982 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 468:
#line 3987 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 469:
#line 3991 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 470:
#line 3995 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 471:
#line 4008 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 472:
#line 4012 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 473:
#line 4024 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 474:
#line 4031 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 475:
#line 4053 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 476:
#line 4057 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 477:
#line 4072 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 478:
#line 4077 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 479:
#line 4084 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 480:
#line 4088 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 481:
#line 4096 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 482:
#line 4104 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 483:
#line 4118 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 484:
#line 4122 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 485:
#line 4141 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 486:
#line 4157 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4174 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
