
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSphere	299
#define	tSurface	300
#define	tSpline	301
#define	tVolume	302
#define	tCharacteristic	303
#define	tLength	304
#define	tParametric	305
#define	tElliptic	306
#define	tPlane	307
#define	tRuled	308
#define	tTransfinite	309
#define	tComplex	310
#define	tPhysical	311
#define	tUsing	312
#define	tBump	313
#define	tProgression	314
#define	tPlugin	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tAttractor	326
#define	tLayers	327
#define	tAlias	328
#define	tAliasWithOptions	329
#define	tText2D	330
#define	tText3D	331
#define	tInterpolationScheme	332
#define	tTime	333
#define	tGrain	334
#define	tCombine	335
#define	tBSpline	336
#define	tBezier	337
#define	tNurbs	338
#define	tOrder	339
#define	tKnots	340
#define	tColor	341
#define	tColorTable	342
#define	tFor	343
#define	tIn	344
#define	tEndFor	345
#define	tIf	346
#define	tEndIf	347
#define	tExit	348
#define	tReturn	349
#define	tCall	350
#define	tFunction	351
#define	tShow	352
#define	tHide	353
#define	tGetValue	354
#define	tGMSH_MAJOR_VERSION	355
#define	tGMSH_MINOR_VERSION	356
#define	tGMSH_PATCH_VERSION	357
#define	tAFFECTPLUS	358
#define	tAFFECTMINUS	359
#define	tAFFECTTIMES	360
#define	tAFFECTDIVIDE	361
#define	tOR	362
#define	tAND	363
#define	tEQUAL	364
#define	tNOTEQUAL	365
#define	tLESSOREQUAL	366
#define	tGREATEROREQUAL	367
#define	tPLUSPLUS	368
#define	tMINUSMINUS	369
#define	UNARYPREC	370

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.307 2007-02-26 08:25:39 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Attractors.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 77 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1183
#define	YYFLAG		-32768
#define	YYNTBASE	137

#define YYTRANSLATE(x) ((unsigned)(x) <= 370 ? yytranslate[x] : 204)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   122,     2,   132,     2,   121,     2,     2,   127,
   128,   119,   117,   133,   118,   131,   120,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   113,
     2,   115,   108,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   129,     2,   130,   126,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   134,     2,   135,   136,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   109,   110,   111,   112,   114,   116,   123,   124,   125
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   190,   197,   204,   206,   208,   210,   212,   214,   216,
   218,   223,   231,   241,   248,   255,   259,   266,   273,   283,
   290,   300,   306,   315,   324,   336,   343,   353,   363,   373,
   375,   377,   385,   398,   407,   414,   421,   428,   436,   444,
   452,   462,   470,   480,   498,   506,   514,   526,   535,   544,
   553,   562,   570,   579,   588,   597,   605,   614,   620,   632,
   638,   648,   650,   652,   654,   655,   658,   665,   672,   679,
   686,   691,   698,   705,   712,   717,   724,   728,   733,   739,
   743,   747,   752,   757,   761,   769,   777,   781,   789,   793,
   796,   799,   815,   818,   825,   834,   843,   854,   856,   859,
   861,   865,   870,   872,   878,   890,   904,   905,   913,   914,
   928,   929,   945,   946,   953,   962,   971,   980,   993,  1006,
  1019,  1034,  1049,  1064,  1065,  1078,  1079,  1092,  1093,  1106,
  1107,  1124,  1125,  1142,  1143,  1160,  1161,  1180,  1181,  1200,
  1201,  1220,  1222,  1225,  1231,  1239,  1249,  1252,  1259,  1269,
  1279,  1288,  1298,  1307,  1316,  1323,  1328,  1339,  1350,  1361,
  1372,  1375,  1377,  1381,  1384,  1387,  1390,  1394,  1398,  1402,
  1406,  1410,  1414,  1418,  1422,  1426,  1430,  1434,  1438,  1442,
  1446,  1452,  1457,  1462,  1467,  1472,  1477,  1482,  1487,  1492,
  1497,  1502,  1509,  1514,  1519,  1524,  1529,  1534,  1539,  1546,
  1553,  1560,  1565,  1570,  1575,  1580,  1585,  1590,  1595,  1600,
  1605,  1610,  1615,  1622,  1627,  1632,  1637,  1642,  1647,  1652,
  1659,  1666,  1673,  1678,  1680,  1682,  1684,  1686,  1688,  1690,
  1692,  1694,  1700,  1705,  1710,  1713,  1719,  1723,  1730,  1735,
  1743,  1750,  1752,  1755,  1758,  1762,  1766,  1778,  1788,  1796,
  1804,  1806,  1810,  1812,  1814,  1817,  1821,  1826,  1830,  1836,
  1841,  1843,  1845,  1847,  1851,  1856,  1863,  1871,  1873,  1875,
  1879,  1883,  1893,  1901,  1903,  1909,  1913,  1920,  1922,  1926,
  1928,  1930,  1937,  1942,  1947,  1952,  1959,  1966
};

static const short yyrhs[] = {   138,
     0,     1,     6,     0,     0,   138,   139,     0,   142,     0,
   141,     0,   161,     0,   163,     0,   164,     0,   167,     0,
   168,     0,   169,     0,   170,     0,   173,     0,   189,     0,
   190,     0,   191,     0,   172,     0,   171,     0,   115,     0,
   115,   115,     0,    33,   127,     5,   128,     6,     0,    33,
   127,     5,   128,   140,   203,     6,     0,    33,   127,     5,
   133,   199,   128,     6,     0,    33,   127,     5,   133,   199,
   128,   140,   203,     6,     0,     4,     5,   134,   143,   135,
     6,     0,     4,     5,     4,   194,   134,   143,   135,     6,
     0,     0,   143,   146,     0,   143,   150,     0,   143,   153,
     0,   143,   155,     0,   143,   156,     0,   143,   158,     0,
   192,     0,   144,   133,   192,     0,   192,     0,   145,   133,
   192,     0,     0,     0,     4,   147,   127,   144,   128,   148,
   134,   145,   135,     6,     0,   203,     0,   149,   133,   203,
     0,     0,    76,   127,   192,   133,   192,   133,   192,   128,
   151,   134,   149,   135,     6,     0,   203,     0,   152,   133,
   203,     0,     0,    77,   127,   192,   133,   192,   133,   192,
   133,   192,   128,   154,   134,   152,   135,     6,     0,    78,
   134,   196,   135,   134,   196,   135,     6,     0,     0,    79,
   157,   134,   145,   135,     6,     0,    80,   127,   192,   128,
   197,     6,     0,     7,     0,   104,     0,   105,     0,   106,
     0,   107,     0,   123,     0,   124,     0,     4,   159,   192,
     6,     0,     4,   129,   192,   130,   159,   192,     6,     0,
     4,   129,   134,   199,   135,   130,   159,   197,     6,     0,
     4,   129,   130,     7,   197,     6,     0,     4,   129,   130,
   104,   197,     6,     0,     4,   160,     6,     0,     4,   129,
   192,   130,   160,     6,     0,     4,   131,     4,     7,   203,
     6,     0,     4,   129,   192,   130,   131,     4,     7,   203,
     6,     0,     4,   131,     4,   159,   192,     6,     0,     4,
   129,   192,   130,   131,     4,   159,   192,     6,     0,     4,
   131,     4,   160,     6,     0,     4,   129,   192,   130,   131,
     4,   160,     6,     0,     4,   131,    87,   131,     4,     7,
   200,     6,     0,     4,   129,   192,   130,   131,    87,   131,
     4,     7,   200,     6,     0,     4,   131,    88,     7,   201,
     6,     0,     4,   129,   192,   130,   131,    88,     7,   201,
     6,     0,    61,   127,     4,   128,   131,     4,     7,   192,
     6,     0,    61,   127,     4,   128,   131,     4,     7,   203,
     6,     0,   192,     0,   203,     0,    41,   127,   192,   128,
     7,   194,     6,     0,    41,   127,   192,   128,    90,    46,
   134,   192,   135,     7,   194,     6,     0,    57,    41,   127,
   162,   128,     7,   197,     6,     0,    72,    41,   197,     7,
   197,     6,     0,    72,    44,   197,     7,   197,     6,     0,
    49,    50,   197,     7,   192,     6,     0,    44,   127,   192,
   128,     7,   197,     6,     0,    47,   127,   192,   128,     7,
   197,     6,     0,    42,   127,   192,   128,     7,   197,     6,
     0,    42,   127,   192,   128,     7,   197,    53,   194,     6,
     0,    43,   127,   192,   128,     7,   197,     6,     0,    43,
   127,   192,   128,     7,   197,    53,   194,     6,     0,    51,
   127,   192,   128,     7,   134,   192,   133,   192,   133,     5,
   133,     5,   133,     5,   135,     6,     0,    82,   127,   192,
   128,     7,   197,     6,     0,    83,   127,   192,   128,     7,
   197,     6,     0,    84,   127,   192,   128,     7,   197,    86,
   197,    85,   192,     6,     0,    44,    68,   127,   192,   128,
     7,   197,     6,     0,    57,    44,   127,   162,   128,     7,
   197,     6,     0,    53,    46,   127,   192,   128,     7,   197,
     6,     0,    54,    46,   127,   192,   128,     7,   197,     6,
     0,    45,   127,   192,   128,     7,   197,     6,     0,    46,
    68,   127,   192,   128,     7,   197,     6,     0,    57,    46,
   127,   162,   128,     7,   197,     6,     0,    56,    48,   127,
   192,   128,     7,   197,     6,     0,    48,   127,   192,   128,
     7,   197,     6,     0,    57,    48,   127,   162,   128,     7,
   197,     6,     0,    63,   194,   134,   165,   135,     0,    62,
   134,   194,   133,   194,   133,   192,   135,   134,   165,   135,
     0,    64,   194,   134,   165,   135,     0,    65,   134,   194,
   133,   192,   135,   134,   165,   135,     0,   167,     0,   166,
     0,   164,     0,     0,   166,   163,     0,   166,    41,   134,
   199,   135,     6,     0,   166,    44,   134,   199,   135,     6,
     0,   166,    46,   134,   199,   135,     6,     0,   166,    48,
   134,   199,   135,     6,     0,    67,   134,   166,   135,     0,
    67,     4,   129,   192,   130,     6,     0,    74,     4,   129,
   192,   130,     6,     0,    75,     4,   129,   192,   130,     6,
     0,    70,   134,   166,   135,     0,    70,     4,   129,   192,
   130,     6,     0,    70,     4,     6,     0,    70,     4,     4,
     6,     0,    87,   200,   134,   166,   135,     0,    98,   203,
     6,     0,    99,   203,     6,     0,    98,   134,   166,   135,
     0,    99,   134,   166,   135,     0,     4,   203,     6,     0,
     4,     4,   129,   192,   130,   203,     6,     0,     4,     4,
     4,   129,   192,   130,     6,     0,     4,   192,     6,     0,
    61,   127,     4,   128,   131,     4,     6,     0,    81,     4,
     6,     0,    94,     6,     0,    38,     6,     0,    38,   134,
   192,   133,   192,   133,   192,   133,   192,   133,   192,   133,
   192,   135,     6,     0,    39,     6,     0,    89,   127,   192,
     8,   192,   128,     0,    89,   127,   192,     8,   192,     8,
   192,   128,     0,    89,     4,    90,   134,   192,     8,   192,
   135,     0,    89,     4,    90,   134,   192,     8,   192,     8,
   192,   135,     0,    91,     0,    97,     4,     0,    95,     0,
    96,     4,     6,     0,    92,   127,   192,   128,     0,    93,
     0,    66,   194,   134,   166,   135,     0,    66,   134,   194,
   133,   194,   133,   192,   135,   134,   166,   135,     0,    66,
   134,   194,   133,   194,   133,   194,   133,   192,   135,   134,
   166,   135,     0,     0,    66,   194,   134,   166,   174,   187,
   135,     0,     0,    66,   134,   194,   133,   194,   133,   192,
   135,   134,   166,   175,   187,   135,     0,     0,    66,   134,
   194,   133,   194,   133,   194,   133,   192,   135,   134,   166,
   176,   187,   135,     0,     0,    66,   134,   166,   177,   187,
   135,     0,    66,    41,   134,   192,   133,   194,   135,     6,
     0,    66,    44,   134,   192,   133,   194,   135,     6,     0,
    66,    46,   134,   192,   133,   194,   135,     6,     0,    66,
    41,   134,   192,   133,   194,   133,   194,   133,   192,   135,
     6,     0,    66,    44,   134,   192,   133,   194,   133,   194,
   133,   192,   135,     6,     0,    66,    46,   134,   192,   133,
   194,   133,   194,   133,   192,   135,     6,     0,    66,    41,
   134,   192,   133,   194,   133,   194,   133,   194,   133,   192,
   135,     6,     0,    66,    44,   134,   192,   133,   194,   133,
   194,   133,   194,   133,   192,   135,     6,     0,    66,    46,
   134,   192,   133,   194,   133,   194,   133,   194,   133,   192,
   135,     6,     0,     0,    66,    41,   134,   192,   133,   194,
   135,   178,   134,   187,   135,     6,     0,     0,    66,    44,
   134,   192,   133,   194,   135,   179,   134,   187,   135,     6,
     0,     0,    66,    46,   134,   192,   133,   194,   135,   180,
   134,   187,   135,     6,     0,     0,    66,    41,   134,   192,
   133,   194,   133,   194,   133,   192,   135,   181,   134,   187,
   135,     6,     0,     0,    66,    44,   134,   192,   133,   194,
   133,   194,   133,   192,   135,   182,   134,   187,   135,     6,
     0,     0,    66,    46,   134,   192,   133,   194,   133,   194,
   133,   192,   135,   183,   134,   187,   135,     6,     0,     0,
    66,    41,   134,   192,   133,   194,   133,   194,   133,   194,
   133,   192,   135,   184,   134,   187,   135,     6,     0,     0,
    66,    44,   134,   192,   133,   194,   133,   194,   133,   194,
   133,   192,   135,   185,   134,   187,   135,     6,     0,     0,
    66,    46,   134,   192,   133,   194,   133,   194,   133,   194,
   133,   192,   135,   186,   134,   187,   135,     6,     0,   188,
     0,   187,   188,     0,    73,   134,   192,   135,     6,     0,
    73,   134,   197,   133,   197,   135,     6,     0,    73,   134,
   197,   133,   197,   133,   197,   135,     6,     0,    69,     6,
     0,    55,    44,   197,     7,   192,     6,     0,    55,    44,
   197,     7,   192,    58,    60,   192,     6,     0,    55,    44,
   197,     7,   192,    58,    59,   192,     6,     0,    55,    46,
   134,   192,   135,     7,   197,     6,     0,    55,    46,   134,
   192,   135,     7,   197,     4,     6,     0,    52,    46,   134,
   192,   135,     7,   197,     6,     0,    55,    48,   134,   192,
   135,     7,   197,     6,     0,    69,    46,   197,     7,   192,
     6,     0,    69,    46,   197,     6,     0,    41,   134,   199,
   135,    90,    46,   134,   192,   135,     6,     0,    44,   134,
   199,   135,    90,    46,   134,   192,   135,     6,     0,    44,
   134,   199,   135,    90,    48,   134,   192,   135,     6,     0,
    46,   134,   199,   135,    90,    48,   134,   192,   135,     6,
     0,    71,     6,     0,   193,     0,   127,   192,   128,     0,
   118,   192,     0,   117,   192,     0,   122,   192,     0,   192,
   118,   192,     0,   192,   117,   192,     0,   192,   119,   192,
     0,   192,   120,   192,     0,   192,   121,   192,     0,   192,
   126,   192,     0,   192,   113,   192,     0,   192,   115,   192,
     0,   192,   114,   192,     0,   192,   116,   192,     0,   192,
   111,   192,     0,   192,   112,   192,     0,   192,   110,   192,
     0,   192,   109,   192,     0,   192,   108,   192,     8,   192,
     0,    12,   127,   192,   128,     0,    13,   127,   192,   128,
     0,    14,   127,   192,   128,     0,    15,   127,   192,   128,
     0,    16,   127,   192,   128,     0,    17,   127,   192,   128,
     0,    18,   127,   192,   128,     0,    19,   127,   192,   128,
     0,    20,   127,   192,   128,     0,    22,   127,   192,   128,
     0,    23,   127,   192,   133,   192,   128,     0,    24,   127,
   192,   128,     0,    25,   127,   192,   128,     0,    26,   127,
   192,   128,     0,    27,   127,   192,   128,     0,    28,   127,
   192,   128,     0,    29,   127,   192,   128,     0,    30,   127,
   192,   133,   192,   128,     0,    31,   127,   192,   133,   192,
   128,     0,    32,   127,   192,   133,   192,   128,     0,    21,
   127,   192,   128,     0,    12,   129,   192,   130,     0,    13,
   129,   192,   130,     0,    14,   129,   192,   130,     0,    15,
   129,   192,   130,     0,    16,   129,   192,   130,     0,    17,
   129,   192,   130,     0,    18,   129,   192,   130,     0,    19,
   129,   192,   130,     0,    20,   129,   192,   130,     0,    22,
   129,   192,   130,     0,    23,   129,   192,   133,   192,   130,
     0,    24,   129,   192,   130,     0,    25,   129,   192,   130,
     0,    26,   129,   192,   130,     0,    27,   129,   192,   130,
     0,    28,   129,   192,   130,     0,    29,   129,   192,   130,
     0,    30,   129,   192,   133,   192,   130,     0,    31,   129,
   192,   133,   192,   130,     0,    32,   129,   192,   133,   192,
   130,     0,    21,   129,   192,   130,     0,     3,     0,     9,
     0,    10,     0,    11,     0,   101,     0,   102,     0,   103,
     0,     4,     0,     4,   136,   134,   192,   135,     0,     4,
   129,   192,   130,     0,   132,     4,   129,   130,     0,     4,
   160,     0,     4,   129,   192,   130,   160,     0,     4,   131,
     4,     0,     4,   129,   192,   130,   131,     4,     0,     4,
   131,     4,   160,     0,     4,   129,   192,   130,   131,     4,
   160,     0,   100,   127,     5,   133,   192,   128,     0,   195,
     0,   118,   194,     0,   117,   194,     0,   194,   118,   194,
     0,   194,   117,   194,     0,   134,   192,   133,   192,   133,
   192,   133,   192,   133,   192,   135,     0,   134,   192,   133,
   192,   133,   192,   133,   192,   135,     0,   134,   192,   133,
   192,   133,   192,   135,     0,   127,   192,   133,   192,   133,
   192,   128,     0,   197,     0,   196,   133,   197,     0,   192,
     0,   198,     0,   134,   135,     0,   134,   199,   135,     0,
   118,   134,   199,   135,     0,   192,     8,   192,     0,   192,
     8,   192,     8,   192,     0,    41,   134,   192,   135,     0,
   164,     0,   167,     0,   173,     0,     4,   129,   130,     0,
   118,     4,   129,   130,     0,     4,   129,   134,   199,   135,
   130,     0,   118,     4,   129,   134,   199,   135,   130,     0,
   192,     0,   198,     0,   199,   133,   192,     0,   199,   133,
   198,     0,   134,   192,   133,   192,   133,   192,   133,   192,
   135,     0,   134,   192,   133,   192,   133,   192,   135,     0,
     4,     0,     4,   131,    87,   131,     4,     0,   134,   202,
   135,     0,     4,   129,   192,   130,   131,    88,     0,   200,
     0,   202,   133,   200,     0,     5,     0,    40,     0,    35,
   127,   203,   133,   203,   128,     0,    36,   127,   203,   128,
     0,    37,   127,   203,   128,     0,    34,   127,   203,   128,
     0,    34,   127,   203,   133,   199,   128,     0,    34,   127,
     4,   131,     4,   128,     0,    34,   127,     4,   129,   192,
   130,   131,     4,   128,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   142,   144,   149,   151,   154,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   172,
   177,   183,   189,   204,   217,   245,   253,   262,   270,   271,
   272,   273,   274,   275,   278,   281,   285,   288,   292,   483,
   501,   511,   517,   524,   532,   538,   544,   551,   559,   565,
   573,   578,   582,   591,   593,   594,   595,   596,   599,   601,
   604,   639,   678,   732,   749,   767,   778,   797,   811,   828,
   854,   881,   895,   912,   926,   943,   963,   986,   996,  1010,
  1015,  1023,  1045,  1068,  1084,  1112,  1142,  1164,  1182,  1200,
  1218,  1244,  1262,  1288,  1308,  1332,  1356,  1382,  1399,  1418,
  1436,  1474,  1496,  1512,  1532,  1549,  1566,  1586,  1592,  1597,
  1602,  1609,  1611,  1612,  1615,  1620,  1624,  1640,  1656,  1672,
  1692,  1705,  1711,  1717,  1728,  1738,  1748,  1764,  1782,  1796,
  1803,  1809,  1818,  1831,  1882,  1897,  1908,  1928,  1938,  1960,
  1964,  1969,  1974,  1984,  2001,  2017,  2043,  2070,  2102,  2109,
  2114,  2120,  2124,  2132,  2141,  2149,  2157,  2162,  2170,  2175,
  2183,  2188,  2196,  2201,  2210,  2217,  2224,  2231,  2238,  2245,
  2252,  2259,  2266,  2273,  2278,  2285,  2290,  2297,  2302,  2309,
  2314,  2321,  2326,  2333,  2338,  2345,  2350,  2357,  2362,  2369,
  2374,  2384,  2388,  2393,  2403,  2425,  2449,  2457,  2476,  2494,
  2512,  2541,  2576,  2581,  2608,  2622,  2640,  2647,  2653,  2656,
  2664,  2674,  2676,  2677,  2678,  2679,  2680,  2681,  2682,  2683,
  2690,  2691,  2692,  2693,  2694,  2695,  2696,  2697,  2698,  2699,
  2700,  2701,  2702,  2703,  2704,  2705,  2706,  2707,  2708,  2709,
  2710,  2711,  2712,  2713,  2714,  2715,  2716,  2717,  2718,  2719,
  2720,  2721,  2723,  2724,  2725,  2726,  2727,  2728,  2729,  2730,
  2731,  2732,  2733,  2734,  2735,  2736,  2737,  2738,  2739,  2740,
  2741,  2742,  2743,  2748,  2753,  2754,  2755,  2756,  2757,  2758,
  2762,  2778,  2793,  2813,  2827,  2840,  2863,  2881,  2899,  2917,
  2935,  2942,  2947,  2951,  2955,  2959,  2965,  2970,  2974,  2978,
  2984,  2990,  2997,  3003,  3007,  3012,  3016,  3027,  3034,  3045,
  3065,  3075,  3085,  3095,  3112,  3131,  3155,  3183,  3189,  3193,
  3197,  3209,  3214,  3226,  3233,  3254,  3259,  3273,  3279,  3285,
  3290,  3298,  3306,  3320,  3334,  3338,  3357,  3379
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere","tSurface",
"tSpline","tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane",
"tRuled","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tPlugin","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tAttractor","tLayers","tAlias",
"tAliasWithOptions","tText2D","tText3D","tInterpolationScheme","tTime","tGrain",
"tCombine","tBSpline","tBezier","tNurbs","tOrder","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND",
"tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'",
"'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'",
"'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems","GeoFormatItem",
"SendToFile","Printf","View","Views","ElementCoords","ElementValues","Element",
"@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4","InterpolationMatrix",
"Time","@5","Grain","NumericAffectation","NumericIncrement","Affectation","PhysicalId",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify",
"Visibility","Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12",
"@13","@14","@15","@16","@17","@18","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Embedding","Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   137,   137,   138,   138,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   140,
   140,   141,   141,   141,   141,   142,   142,   143,   143,   143,
   143,   143,   143,   143,   144,   144,   145,   145,   147,   148,
   146,   149,   149,   151,   150,   152,   152,   154,   153,   155,
   157,   156,   158,   159,   159,   159,   159,   159,   160,   160,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   162,
   162,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   164,   164,   164,
   164,   165,   165,   165,   166,   166,   166,   166,   166,   166,
   167,   167,   167,   167,   168,   168,   168,   168,   169,   170,
   170,   170,   170,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   173,   173,   173,   174,   173,   175,   173,
   176,   173,   177,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   178,   173,   179,   173,   180,   173,   181,
   173,   182,   173,   183,   173,   184,   173,   185,   173,   186,
   173,   187,   187,   188,   188,   188,   188,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   190,   190,   190,   190,
   191,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   193,   193,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   194,   194,   194,   195,   195,   195,   195,
   196,   196,   197,   197,   197,   197,   197,   198,   198,   198,
   198,   198,   198,   198,   198,   198,   198,   199,   199,   199,
   199,   200,   200,   200,   200,   201,   201,   202,   202,   203,
   203,   203,   203,   203,   203,   203,   203,   203
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
     0,     6,     6,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     6,     3,     6,     6,     9,     6,
     9,     5,     8,     8,    11,     6,     9,     9,     9,     1,
     1,     7,    12,     8,     6,     6,     6,     7,     7,     7,
     9,     7,     9,    17,     7,     7,    11,     8,     8,     8,
     8,     7,     8,     8,     8,     7,     8,     5,    11,     5,
     9,     1,     1,     1,     0,     2,     6,     6,     6,     6,
     4,     6,     6,     6,     4,     6,     3,     4,     5,     3,
     3,     4,     4,     3,     7,     7,     3,     7,     3,     2,
     2,    15,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     5,    11,    13,     0,     7,     0,    13,
     0,    15,     0,     6,     8,     8,     8,    12,    12,    12,
    14,    14,    14,     0,    12,     0,    12,     0,    12,     0,
    16,     0,    16,     0,    16,     0,    18,     0,    18,     0,
    18,     1,     2,     5,     7,     9,     2,     6,     9,     9,
     8,     9,     8,     8,     6,     4,    10,    10,    10,    10,
     2,     1,     3,     2,     2,     2,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     5,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     4,     4,     4,     6,     6,
     6,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     4,     4,     4,     6,
     6,     6,     4,     1,     1,     1,     1,     1,     1,     1,
     1,     5,     4,     4,     2,     5,     3,     6,     4,     7,
     6,     1,     2,     2,     3,     3,    11,     9,     7,     7,
     1,     3,     1,     1,     2,     3,     4,     3,     5,     4,
     1,     1,     1,     3,     4,     6,     7,     1,     1,     3,
     3,     9,     7,     1,     5,     3,     6,     1,     3,     1,
     1,     6,     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   148,     0,   153,     0,   150,     0,     0,     0,
     0,     4,     6,     5,     7,     8,     9,    10,    11,    12,
    13,    19,    18,    14,    15,    16,    17,   274,   281,   330,
    54,   275,   276,   277,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     0,   278,   279,   280,    55,    56,    57,    58,     0,     0,
     0,    59,    60,     0,     0,     0,     0,     0,     0,     0,
   212,     0,     0,   141,     0,   143,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   292,     0,
     0,     0,     0,     0,   115,     0,     0,   115,     0,     0,
   115,   211,     0,     0,     0,     0,     0,     0,     0,     0,
   324,     0,     0,     0,     0,     0,   140,     0,   149,   330,
   115,     0,   115,     0,     0,     0,     0,     0,   285,     0,
    28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   281,   215,
   214,   216,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    66,   137,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   134,     0,
     0,     0,   281,     0,     0,   311,   312,   313,   318,   319,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   303,     0,   304,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   294,   293,     0,     0,     0,     0,   115,   115,     0,     0,
     0,     0,     0,     0,     0,   163,     0,   115,     0,     0,
     0,     0,   127,     0,     0,     0,     0,     0,     0,   139,
     0,     0,     0,     0,     0,   115,     0,     0,     0,   151,
     0,   130,     0,   131,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   213,
     0,     0,     0,     0,    54,     0,     0,     0,     0,     0,
    61,     0,   230,   229,   227,   228,   223,   225,   224,   226,
   218,   217,   219,   220,   221,   222,     0,     0,     0,     0,
     0,     0,   281,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   305,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
    81,     0,     0,     0,     0,     0,     0,     0,   296,   295,
   114,     0,   113,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   116,     0,     0,   157,     0,   121,
   206,     0,   128,     0,   125,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   152,   132,   133,
     0,   283,   289,     0,    28,    39,     0,     0,     0,    51,
     0,     0,    29,    30,    31,    32,    33,    34,   232,   253,
   233,   254,   234,   255,   235,   256,   236,   257,   237,   258,
   238,   259,   239,   260,   240,   261,   252,   273,   241,   262,
     0,     0,   243,   264,   244,   265,   245,   266,   246,   267,
   247,   268,   248,   269,     0,     0,     0,     0,     0,     0,
     0,     0,   335,     0,     0,   333,   334,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    72,     0,     0,
     0,     0,   284,     0,    22,    20,     0,     0,     0,     0,
     0,   314,     0,     0,     0,   308,   320,   321,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   108,   110,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   192,     0,   154,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   129,     0,     0,
     0,     0,   286,     0,   282,     0,     0,     0,     0,     0,
     0,     0,    26,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   283,    64,    65,     0,
     0,     0,     0,     0,    67,    68,    70,     0,     0,   328,
     0,    76,   231,    21,     0,     0,     0,     0,     0,     0,
   310,   315,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   307,    87,     0,     0,
     0,     0,   198,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   197,     0,   164,   193,     0,     0,   122,
   205,   126,    85,    86,   123,   124,     0,     0,     0,   325,
     0,     0,     0,   144,   136,   288,   135,     0,     0,     0,
     0,     0,   301,     0,     0,   242,   263,   249,   270,   250,
   271,   251,   272,     0,   337,   336,   332,   291,     0,    54,
     0,     0,     0,     0,    62,     0,     0,     0,   326,    23,
    24,     0,     0,    82,     0,     0,     0,   309,     0,    90,
     0,    92,     0,     0,    88,     0,     0,   102,     0,     0,
    89,   106,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,     0,     0,     0,     0,
   115,     0,   174,     0,   176,     0,   178,     0,     0,     0,
     0,   303,     0,     0,     0,   158,    95,    96,     0,     0,
     0,     0,   290,    27,     0,    35,     0,     0,     0,     0,
     0,    37,     0,     0,     0,     0,     0,    73,     0,     0,
    74,     0,   329,     0,     0,     0,   316,     0,     0,     0,
     0,    98,     0,     0,   103,     0,     0,   203,   100,   101,
     0,     0,     0,   201,   204,   105,    84,    99,   104,   107,
     0,     0,     0,   300,     0,   299,     0,     0,   165,     0,
     0,   166,     0,     0,   167,     0,   117,   118,   119,   120,
     0,     0,     0,     0,     0,     0,   323,     0,   146,   145,
    40,     0,     0,     0,   302,     0,     0,     0,     0,     0,
    63,    69,    71,     0,    77,     0,    25,     0,     0,   317,
     0,    91,    93,     0,     0,     0,     0,   200,   199,   202,
    78,    79,   115,     0,   111,     0,     0,     0,     0,     0,
     0,   194,     0,   115,     0,     0,     0,     0,     0,    36,
     0,     0,     0,    38,    52,    53,   338,     0,   327,     0,
     0,   207,   208,   209,   210,     0,     0,     0,   298,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   159,     0,     0,   322,   147,     0,     0,     0,     0,    75,
     0,     0,     0,   109,     0,   180,     0,     0,   182,     0,
     0,   184,     0,     0,     0,   195,   155,     0,   115,    97,
     0,    44,     0,    50,     0,    83,     0,   297,   168,     0,
     0,   175,   169,     0,     0,   177,   170,     0,     0,   179,
     0,     0,   161,     0,     0,     0,     0,     0,     0,   186,
     0,   188,     0,   190,   196,   160,   156,     0,    41,     0,
    48,     0,     0,     0,   171,     0,     0,   172,     0,     0,
   173,     0,     0,     0,    42,     0,   142,     0,     0,     0,
     0,     0,     0,     0,   162,     0,     0,     0,     0,   181,
     0,   183,     0,   185,     0,    43,    45,     0,    46,    94,
     0,     0,     0,     0,     0,   187,   189,   191,    47,    49,
     0,     0,     0
};

static const short yydefgoto[] = {  1181,
     2,    52,   617,    53,    54,   370,   905,   911,   543,   697,
  1029,  1144,   544,  1115,  1168,   545,  1146,   546,   547,   701,
   548,   118,   199,    55,   479,   505,   286,   492,   493,   287,
    59,    60,    61,    62,    63,   288,   675,  1088,  1128,   506,
   960,   963,   966,  1100,  1104,  1108,  1136,  1139,  1142,   671,
   672,    65,    66,    67,   304,   121,   321,   159,   812,   813,
   306,   291,   183,   612,   731,   481
};

static const short yypact[] = {  2365,
    59,  2434,-32768,  1756,   -45,     1,    73,   -63,   -41,   -27,
   -60,   -16,   -18,    -2,    29,    91,    87,   104,   124,   179,
    -8,   188,   328,   207,   210,   301,   301,   221,   407,     6,
   313,    10,   371,    85,   390,   413,   439,   334,   337,   341,
    11,    24,-32768,   374,-32768,   444,-32768,   483,   489,     8,
    21,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     7,    12,
-32768,-32768,-32768,-32768,   182,   211,   225,   296,   309,   315,
   365,   377,   383,   392,   393,   402,   420,   432,   455,   481,
   482,   495,   498,   502,   514,   387,   403,   424,   425,-32768,
   428,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1953,  1953,
  1953,-32768,-32768,  1953,  1369,    18,   494,  1953,   563,   849,
-32768,   572,   561,-32768,  1953,-32768,  1953,  1886,  1953,  1953,
   452,  1953,  1886,  1953,   456,  1886,  1953,  1953,  1302,  1953,
   496,   460,   466,  1302,   506,   510,   470,   499,   527,   537,
   538,   586,   301,   301,   301,  1953,  1953,   -93,-32768,   105,
   301,   535,   536,   544,  1595,   214,   565,-32768,  1302,    23,
-32768,-32768,  1302,  1302,   573,   578,   705,  1953,  1953,  1953,
   601,  1953,   583,   658,  1953,  1953,-32768,   735,-32768,-32768,
-32768,   736,-32768,   747,   625,  1953,   754,   640,-32768,   301,
-32768,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,
  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,
  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,
  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,
  1953,  1953,  1953,   503,   528,   528,   528,   770,   492,   653,
   653,   653,  4874,    30,  1886,  4161,   303,   678,   776,   660,
   878,-32768,-32768,  1953,  1953,  1953,  1953,  1953,  1953,  1953,
  1953,  1953,  1953,  1953,  1953,  1953,  1953,  1953,-32768,   -13,
  3407,  4895,   543,   714,  2078,-32768,-32768,-32768,  2152,-32768,
   342,  4916,  4937,  1953,  4958,   512,  4979,  1953,   515,  5000,
  5021,  1721,  1164,  2152,   809,-32768,  5042,  1953,  1953,  1953,
   812,  1953,  1953,  1953,  2011,  2011,  2011,  2011,   703,    50,
-32768,-32768,  3433,  3459,   301,   301,   634,   634,   287,  1953,
  1953,  1953,  1595,  1595,  1953,  2703,   323,-32768,  1953,   999,
   196,   833,-32768,  1953,  2493,   846,   847,  1953,  1953,-32768,
  5063,  5084,  5105,   769,  3485,-32768,   724,  2174,  5126,-32768,
  2510,-32768,  2554,-32768,  1953,  4184,   261,  1953,   345,    14,
  5147,  4207,  5168,  4230,  5189,  4253,  5210,  4276,  5231,  4299,
  5252,  4322,  5273,  4345,  5294,  4368,  5315,  4391,  5336,  4414,
  5357,  4437,  3511,  3537,  5378,  4460,  5399,  4483,  5420,  4506,
  5441,  4529,  5462,  4552,  5483,  4575,  3563,  3589,  3615,  3641,
  3667,  3693,   520,    20,   727,   731,   733,   730,  1953,-32768,
  1302,  1302,   554,   114,   528,  1953,   858,   862,    13,   737,
-32768,  2193,  1158,  1045,   992,   992,   726,   726,   726,   726,
   486,   486,   653,   653,   653,   653,    54,  1886,  1953,    28,
  1428,  1953,   689,  1953,  1886,   778,   863,   864,  5504,   865,
   779,   867,  5525,   785,   869,   870,  1886,-32768,   557,  1953,
   871,  1236,  5546,  5567,  1953,  2737,  2765,  5588,   752,  5819,
-32768,   757,   758,   760,   751,   301,  1953,  1953,-32768,-32768,
-32768,   755,  2703,-32768,   756,  1953,  3719,  3745,  3771,  3381,
   -59,   -17,    55,   -51,-32768,    39,   301,  2576,  4598,-32768,
-32768,  1953,-32768,  4621,-32768,  1302,  1302,  4644,  4667,   885,
   887,   888,   765,  1953,  2620,  1953,  1953,-32768,-32768,-32768,
  4690,    67,-32768,  2793,-32768,-32768,   771,   772,   766,-32768,
   774,   896,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1953,  1953,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1953,  1953,  1953,  1953,  1953,  1953,
  1953,   899,-32768,  1886,   528,-32768,-32768,  1953,  4713,   900,
   901,   780,    26,  1953,   903,   905,  1098,-32768,   906,   783,
    11,   908,-32768,  1953,-32768,   802,   528,    68,  3797,   301,
   872,-32768,  1886,  2821,  1560,  2223,  2152,-32768,   873,  1302,
  1302,   913,  1302,   607,  1302,   914,   874,  1302,  1302,   560,
-32768,  1132,   789,   917,   919,   920,   685,   921,   922,   941,
   942,   943,   944,   946,   967,   348,  3823,  3849,-32768,-32768,
  2849,   301,   301,   301,  1886,  1886,  1886,  1886,   966,   842,
    -7,-32768,   399,-32768,    39,   971,  1400,   972,   973,   974,
   975,   976,  1302,  1302,  1302,   979,  3875,-32768,  2242,   826,
   978,   996,-32768,   995,-32768,    19,   875,  1953,  1953,  1302,
   876,  1953,-32768,  5609,  4736,  5630,  4759,  5651,  4782,  5672,
  4805,  4828,   877,    83,   879,  5693,   176,-32768,-32768,   102,
   366,   880,  1001,  1521,-32768,-32768,-32768,    11,  1953,-32768,
   577,-32768,  5819,-32768,  1000,    57,  1953,    15,   882,   600,
-32768,-32768,  1886,  1953,   883,    25,    27,  1302,  1003,   884,
   886,  1006,  1302,   889,  1008,  1013,-32768,-32768,  1953,  1302,
  1302,  1302,-32768,   339,  1302,  1302,  1302,  1302,  1302,  1302,
  1302,   405,  1953,  1953,  1953,   891,   -48,    77,    82,   604,
   605,   616,   624,-32768,  1302,-32768,-32768,  1595,     4,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1015,  1021,   945,-32768,
  1953,  1953,  1953,-32768,-32768,   261,-32768,  1022,  1953,  3901,
  3927,   647,-32768,  1953,  5714,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   898,-32768,-32768,-32768,-32768,  1302,   528,
  1953,  1026,  1029,    13,-32768,  1028,  4851,    11,-32768,-32768,
-32768,   528,  3953,-32768,  1953,   907,   651,  5819,  1953,-32768,
   301,-32768,   301,  1030,-32768,  1953,  1953,-32768,  1032,  1953,
-32768,-32768,  3979,  1033,  1043,  1048,  1953,  1953,   784,  1052,
  1053,  1054,  1055,  1056,  1057,-32768,  2011,  2877,  5735,  2262,
   634,   301,  1059,   301,  1061,   301,  1063,  1064,  1066,  1067,
  1069,   610,   918,  2905,   409,-32768,-32768,-32768,  1302,  2680,
   652,  5756,-32768,-32768,    96,  5819,  1953,  1953,  1302,   950,
   675,  5819,  1302,  1072,  1071,  1079,  1693,-32768,  1080,  1083,
-32768,   947,-32768,  1084,  1953,  2933,-32768,   956,  2961,    43,
    47,-32768,  2989,  3017,-32768,  3045,  1953,-32768,-32768,-32768,
  1820,  2038,  1085,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2109,  1086,   959,-32768,  1953,-32768,   960,   440,-32768,   963,
   453,-32768,   964,   459,-32768,   965,-32768,-32768,-32768,-32768,
  1088,  1302,   968,  1953,  1016,  1953,-32768,  1953,-32768,-32768,
-32768,  1953,  4005,  4031,-32768,  1302,  1953,  1094,  1097,   987,
-32768,-32768,-32768,    11,-32768,  1031,-32768,  4057,  1109,-32768,
  1111,-32768,-32768,  1115,  1117,  1118,  4083,-32768,-32768,-32768,
-32768,-32768,   634,  2709,-32768,  1595,    39,  1595,    39,  1595,
    39,-32768,   682,-32768,  3073,  1953,  3101,  3129,   993,  5819,
  1953,  1953,   694,  5819,-32768,-32768,-32768,  1123,-32768,  1953,
   301,-32768,-32768,-32768,-32768,  1125,   997,  1953,-32768,  3157,
   463,   162,  3185,   471,   232,  3213,   484,   233,  1302,  1127,
  2637,  1002,  2128,-32768,-32768,  1953,  5777,  4109,  1129,-32768,
  4135,    75,  1004,-32768,  3241,  1133,  1953,  1134,  1136,  1953,
  1138,  1139,  1953,  1140,  1012,-32768,-32768,    39,-32768,-32768,
   697,-32768,  1953,-32768,  1953,-32768,  1143,-32768,-32768,  1035,
  3269,-32768,-32768,  1038,  3297,-32768,-32768,  1065,  3325,-32768,
  1144,   235,  2681,  1191,  1068,  5798,  3353,  1070,    39,  1192,
    39,  1194,    39,  1195,-32768,-32768,-32768,    39,-32768,   528,
-32768,  1198,  1215,   266,-32768,  1087,   280,-32768,  1089,   302,
-32768,  1091,   317,   702,-32768,  1099,-32768,  1014,  1216,    39,
  1226,    39,  1228,    39,-32768,   528,  1229,   528,  1230,-32768,
   320,-32768,   322,-32768,   360,-32768,-32768,   707,-32768,-32768,
  1231,  1248,  1249,   528,  1250,-32768,-32768,-32768,-32768,-32768,
  1257,  1259,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   524,-32768,-32768,   728,-32768,   195,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -237,    35,-32768,   -69,  1260,     0,  -325,  -159,     2,
-32768,-32768,-32768,-32768,-32768,  1278,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -674,
  -652,-32768,-32768,-32768,    48,-32768,   269,-32768,   297,   -85,
    -9,    38,  -606,   454,-32768,    -4
};


#define	YYLAST		5945


static const short yytable[] = {   122,
   789,    57,   495,    58,   730,   336,   124,   131,   340,   167,
   195,   345,   190,   170,   181,   200,   610,   536,   787,   426,
   844,   257,   536,   325,   326,   190,   342,   184,   343,   721,
   850,   361,   852,   363,   620,   144,   421,   145,   119,   146,
   327,    96,    97,    98,    99,   192,   194,   100,  1002,   135,
   131,   120,  1003,   305,    96,    97,    98,    99,   311,   615,
   100,   669,   841,   127,     3,   670,   132,   127,   325,   326,
   128,   190,   669,   133,   665,   138,   670,   851,   126,   853,
  1096,   123,   668,   341,   882,   129,   883,   346,   347,   537,
   538,   539,   540,   541,   537,   538,   539,   540,   541,   130,
    96,    97,    98,    99,   258,   259,   100,   669,    71,   132,
   134,   670,   722,   723,   447,   136,   666,   621,   290,   448,
    71,   836,   135,   290,   137,   173,   290,   786,   174,   112,
   113,   325,   326,   422,   125,   196,   787,   197,   896,   168,
   139,   191,   198,   171,   182,   201,   611,   593,   542,   141,
   185,   344,   594,   808,   193,   138,   250,   251,   252,   325,
   326,   253,   256,   325,   326,   261,   325,   326,   616,   142,
   296,   616,   281,   299,   282,   289,   292,   293,   508,   295,
   289,   297,   486,   289,   300,   301,   604,   307,   667,   112,
   113,   325,   326,   325,   326,   736,   525,   692,   325,   326,
   455,   511,   512,   323,   324,   105,   106,   107,   108,   884,
   826,   885,   324,   140,   886,   455,   887,   105,   106,   107,
   108,   325,   326,   981,   143,   351,   352,   353,   982,   355,
   669,   923,   358,   359,   670,   147,   112,   113,   328,   414,
   415,   416,   417,   366,   603,   290,   482,   483,   484,   371,
   372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
   382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
   392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
   402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
   412,   427,   423,   290,   158,   160,  1078,   166,   112,   113,
   669,   669,   289,   669,   670,   670,   692,   670,   202,   425,
   203,   432,   433,   434,   435,   436,   437,   438,   439,   440,
   441,   442,   443,   444,   445,   446,   491,   491,   494,   494,
   325,   326,   251,   152,   669,   600,   601,   204,   670,   205,
   469,   459,  1052,   153,  1055,   463,  1058,   338,   669,   251,
   289,   206,   670,   207,   161,   472,   473,   474,   169,   476,
   477,   478,   480,   480,   480,   480,  1081,  1084,   148,  1126,
   669,   149,   830,   150,   670,   151,   172,   497,   498,   499,
   250,   251,   500,   112,   113,   669,   509,  1038,   669,   670,
   669,   514,   670,   175,   670,   518,   519,   867,   868,   787,
  1149,   533,   787,   325,   326,   787,   105,   106,   107,   108,
   876,   877,   531,  1112,  1151,   534,   176,   154,   155,   496,
   606,   320,   208,   322,   209,   112,   113,   156,   669,   329,
   679,   680,   670,   337,   157,   210,  1153,   211,   290,   325,
   326,   212,   177,   213,  1134,   628,  1137,   162,  1140,   187,
   163,  1155,   164,  1143,  1171,   507,  1172,   290,   605,   787,
   178,   325,   326,   179,   325,   326,   599,   180,   369,   105,
   106,   107,   108,   607,   455,  1161,   456,  1163,   535,  1165,
   773,   787,   829,   831,   787,   618,   188,   787,   112,   113,
   787,   214,   189,   215,  1173,   289,   619,   260,   599,   624,
   186,   626,   627,   216,   640,   217,   413,   190,   787,   218,
   787,   219,   787,   244,   289,   325,   326,   642,   220,   222,
   221,   223,   647,   154,   155,   325,   326,   694,   224,   245,
   225,   788,   190,   156,   657,   658,    96,    97,    98,    99,
   165,   974,   100,   661,   746,   747,   226,   749,   227,   752,
   246,   247,   755,   756,   248,   957,   325,   326,   228,   677,
   229,    96,    97,    98,    99,   280,   693,   100,   262,   325,
   326,   687,  1016,   689,   690,   325,   326,   279,   294,   325,
   326,   230,   298,   231,   290,  1018,   309,   325,   326,   319,
   715,  1020,   310,   489,   490,  1077,   314,   797,   798,   799,
   325,   326,   322,  1080,   275,   276,   277,   232,   234,   233,
   235,   278,   735,   290,   112,   113,  1083,   454,   704,   705,
   419,   236,   197,   237,   238,   315,   239,   198,   240,   308,
   241,   714,   706,   707,   708,   709,   710,   711,   712,   312,
   242,   289,   243,   313,   455,   716,   461,   455,   591,   464,
   592,   724,   750,   316,   751,   290,   290,   290,   290,   978,
   740,   733,   854,   317,   318,   112,   113,   859,   330,   331,
   289,   451,   599,   197,   864,   865,   866,   332,   198,   869,
   870,   871,   872,   873,   874,   875,   455,  1047,   602,   455,
   763,   641,   455,   339,   757,    25,    26,    27,    28,   893,
    30,   348,   780,   781,   782,   783,   349,    35,    36,   838,
   350,   839,   289,   289,   289,   289,   356,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   354,   455,   290,   846,   278,   455,   455,   888,   889,
   360,   362,   764,   915,   971,   810,   811,   357,   455,   815,
   890,   693,   364,   365,   656,   832,   455,   367,   891,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   368,   418,   673,   837,   278,   278,   909,
   847,   910,   429,   455,   843,   928,   979,   943,   430,   944,
   289,   848,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   863,   987,   428,   988,
   278,   112,   113,   975,  1059,   470,  1060,   625,   475,   197,
   878,   879,   880,   985,   198,   916,   909,   989,  1069,   987,
   485,  1114,   892,   803,  1156,   894,  1157,   924,   513,  1174,
   903,  1175,   273,   274,   275,   276,   277,   452,   900,   901,
   902,   278,   516,   517,   263,   523,   906,   526,   596,   595,
   597,   912,   598,   608,  1061,   609,   613,   629,   634,   630,
   631,   633,   952,   635,   637,   638,   639,   643,   917,   651,
   491,   655,   494,   431,   652,   653,  1023,   654,   738,   659,
   660,   683,   926,   684,   685,   686,   929,   698,   699,   700,
   702,   703,   713,   933,   934,   718,   719,   936,   725,   720,
   726,   729,   728,   732,   941,   942,   734,   739,   745,   748,
   753,   754,   759,   760,   951,   761,   762,   765,   766,  1113,
   777,   778,   779,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   767,   768,   769,
   770,   278,   771,   804,   983,   984,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   772,   784,   998,  1085,   278,   785,   790,   792,   793,   794,
   795,   796,   800,   805,  1007,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   806,
   807,   809,  1014,   278,   825,   840,   827,   834,   855,   814,
   833,   858,   491,   861,   494,   845,   849,   856,   862,   857,
   897,  1025,   860,  1027,   881,  1028,   898,   904,   914,  1030,
   899,   918,   919,   921,  1034,   932,   927,   935,   938,   501,
     9,    10,   502,    12,   503,    14,   504,    16,   939,    17,
   972,    19,    20,   940,    22,    23,   895,   945,   946,   947,
   948,   949,   950,  1050,   959,  1053,   962,  1056,   965,   967,
    34,   968,   969,  1063,   970,   990,   991,   996,  1067,  1068,
    38,    39,    40,   986,   992,  1000,   994,  1071,   995,   997,
  1010,  1012,  1013,  1022,  1015,  1075,  1017,  1019,  1021,  1035,
  1026,  1024,  1036,   727,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   912,  1037,  1041,  1042,   278,  1039,   930,
  1043,   931,  1044,  1045,  1101,  1145,  1066,  1105,  1070,  1073,
  1109,  1074,  1086,   510,  1094,  1089,  1097,   758,  1099,  1102,
  1116,  1103,  1117,  1106,  1107,  1110,  1111,  1118,  1159,  1125,
   958,  1166,   961,  1169,   964,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,    68,   283,  1119,  1179,
   278,  1121,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,  1129,  1135,  1123,  1138,
  1141,  1130,  1133,  1147,   284,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,  1148,
  1150,  1160,  1152,   278,  1154,    25,    26,    27,    28,    29,
    30,  1162,  1158,  1164,  1167,  1170,  1176,    35,    36,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,  1177,  1178,  1180,  1182,   278,  1183,   842,
  1091,    56,   696,   101,   102,   103,   104,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,    64,
   109,   285,  1033,   278,  1051,   111,  1054,   920,  1057,     0,
   114,     0,     0,     0,     0,   117,     0,     0,   468,     0,
     0,     0,     0,     0,    68,   283,     0,     0,     0,  1072,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,     0,     0,     0,     0,     0,     0,
     0,     0,   284,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,    25,    26,    27,    28,    29,    30,     0,
   644,    68,   249,     0,     0,    35,    36,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,   101,   102,   103,   104,   791,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   302,
     0,     0,     0,   111,     0,     0,     0,     0,   114,     0,
    68,   249,     0,   117,     0,   303,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
     0,     0,     0,     0,     0,     0,     0,     0,   101,   102,
   103,   104,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   110,     0,     0,     0,
   111,     0,     0,     0,     0,   114,     0,     0,   254,     0,
   117,     0,   255,     0,     0,     0,     0,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,   835,   101,   102,   103,
   104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,     0,     0,     0,   111,
     0,     0,     0,     0,   114,     0,     0,   622,     0,   117,
     0,   623,    68,   249,     0,     0,     0,     0,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,     0,     0,     0,     0,     0,    68,   249,     0,
     0,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   101,
   102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,   110,     0,     0,
     0,   111,     0,     0,     0,     0,   114,     0,     0,   742,
     0,   117,     0,   743,   101,   102,   103,   104,   993,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   333,   334,     0,     0,     0,   111,     0,     0,     0,
     0,   335,     0,    68,   453,     0,   117,     0,   157,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,     0,     0,     0,     0,     0,    68,    69,
    70,     0,    71,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,    96,
    97,    98,    99,     0,     0,   100,     0,     0,     0,     0,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   101,   102,   103,   104,     0,  1008,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,     0,
     0,     0,   111,     0,     0,     0,     0,   114,     0,     0,
     0,     0,   117,     0,   467,   101,   102,   103,   104,   105,
   106,   107,   108,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,   110,     0,     0,     0,   111,   112,   113,
     0,     0,   114,     0,   115,     0,   116,   117,    68,   283,
     0,     0,     0,     0,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,     0,
     0,     0,     0,     0,     0,     0,   284,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,    25,    26,    27,
    28,    29,    30,     0,     0,    68,   249,     0,     0,    35,
    36,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,   101,   102,   103,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,   285,     0,     0,     0,   111,     0,     0,
     0,     0,   114,    68,   249,   190,     0,   117,     0,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,  1009,    96,    97,    98,    99,     0,     0,
   100,     0,   101,   102,   103,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
   110,     0,     0,     0,   111,     0,     0,     0,     0,   114,
    68,   453,     0,     0,   117,     0,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
   101,   102,   103,   104,  1011,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,     0,
     0,     0,   111,  1090,     0,     0,     0,   114,     0,     0,
     0,     0,   117,     0,     0,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   454,
     0,     0,     0,   278,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   101,   102,   103,
   104,   527,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   110,     0,     0,     0,   111,
   614,     0,     0,     0,   114,     0,     0,     0,     0,   117,
     0,     0,     0,     0,     0,     0,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   744,     0,     0,     0,   278,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   802,
     0,     0,     0,   278,     0,     0,     0,     0,     0,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,    -3,     1,     0,   278,    -3,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,     0,     0,     0,   955,     0,   956,    -3,     0,     0,
     0,     0,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,     0,     0,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,    -3,    -3,    -3,    -3,     4,    -3,    -3,
     0,     0,     0,     0,     0,    -3,    -3,    -3,    -3,     0,
     0,    -3,     0,    -3,     0,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,    -3,    -3,     0,     0,     5,     0,     0,     0,
     0,     6,     7,     0,     8,     9,    10,    11,    12,    13,
    14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
    23,     0,     0,     0,    24,    25,    26,    27,    28,    29,
    30,     0,    31,    32,    33,    34,     0,    35,    36,     0,
     0,     0,     0,     0,    37,    38,    39,    40,     0,     0,
    41,     0,    42,     0,    43,    44,    45,    46,    47,    48,
    49,    50,    51,   501,     9,    10,   502,    12,   503,    14,
   504,    16,     0,    17,     0,    19,    20,     0,    22,    23,
   501,     9,    10,   502,    12,   503,    14,   504,    16,     0,
    17,     0,    19,    20,    34,    22,    23,     0,     0,     0,
     0,     0,     0,     0,    38,    39,    40,     0,     0,     0,
     0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,    39,    40,   501,     9,    10,   502,    12,   503,
    14,   504,    16,     0,    17,     0,    19,    20,     0,    22,
    23,     0,     0,     0,     0,     0,   501,     9,    10,   502,
    12,   503,    14,   504,    16,    34,    17,   515,    19,    20,
     0,    22,    23,     0,     0,    38,    39,    40,     0,     0,
     0,     0,     0,     0,   529,     0,     0,    34,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    38,    39,    40,
   501,     9,    10,   502,    12,   503,    14,   504,    16,     0,
    17,     0,    19,    20,     0,    22,    23,   501,     9,    10,
   502,    12,   503,    14,   504,    16,     0,    17,   530,    19,
    20,    34,    22,    23,     0,     0,     0,     0,     0,     0,
     0,    38,    39,    40,     0,     0,     0,     0,    34,     0,
   674,     0,     0,     0,     0,     0,     0,     0,    38,    39,
    40,   501,     9,    10,   502,    12,   503,    14,   504,    16,
     0,    17,     0,    19,    20,     0,    22,    23,     0,     0,
     0,     0,     0,   501,     9,    10,   502,    12,   503,    14,
   504,    16,    34,    17,   688,    19,    20,     0,    22,    23,
     0,     0,    38,    39,    40,     0,     0,     0,     0,     0,
     0,  1087,     0,     0,    34,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    38,    39,    40,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,     0,     0,     0,
     0,     0,   976,     0,   977,  1127,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,  1048,     0,  1049,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,   648,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,   649,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,   695,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,   741,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,   776,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,   953,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,   973,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,   999,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,  1001,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,  1004,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,  1005,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,  1006,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,  1062,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,  1064,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,  1065,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,  1076,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,  1079,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,  1082,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,     0,     0,  1098,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,     0,     0,  1120,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,  1122,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,  1124,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,     0,  1132,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   420,     0,
     0,     0,     0,   487,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   449,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   487,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   488,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   524,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   571,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   572,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   585,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   586,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   587,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   588,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   589,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   590,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   662,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   663,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   664,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   737,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   774,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   775,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,   801,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,   907,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,   908,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,   925,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,   937,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,  1031,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
     0,     0,     0,  1032,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,  1040,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,  1046,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,     0,     0,
     0,  1093,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,  1095,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
   424,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,     0,     0,   532,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,   550,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,     0,     0,   552,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,   554,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,     0,     0,   556,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,   558,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,   560,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,   562,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,     0,     0,   564,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
   566,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,     0,     0,   568,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,   570,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,     0,     0,   574,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,   576,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,     0,     0,   578,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,   580,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,   582,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,   584,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,     0,     0,   676,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
   678,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,     0,     0,   681,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,     0,     0,   682,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,     0,     0,   691,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
     0,     0,   717,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,     0,     0,   817,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,     0,     0,   819,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,     0,
     0,   821,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,     0,     0,   823,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,     0,     0,   824,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,     0,     0,
   922,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   420,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   450,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   457,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   458,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   460,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   462,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   465,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   466,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   471,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   520,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   521,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   522,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   528,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   549,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   551,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   553,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   555,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   557,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   559,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   561,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   563,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   565,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   567,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   569,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   573,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   575,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   577,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   579,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   581,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   583,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   632,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   636,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   645,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,   646,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,   650,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278,     0,   816,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,   278,     0,   818,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,   278,     0,   820,   264,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,   278,     0,   822,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,   278,     0,
   828,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,   278,
     0,   913,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
   278,     0,   954,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,   278,     0,   980,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,   278,     0,  1092,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,   278,     0,  1131,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,   278
};

static const short yycheck[] = {     4,
   675,     2,   328,     2,   611,   165,     6,    68,   168,     4,
     4,   171,     5,     4,     4,     4,     4,     4,   671,   257,
     6,     4,     4,   117,   118,     5,     4,     4,     6,     4,
     6,   191,     6,   193,     7,    44,     7,    46,     4,    48,
   134,    34,    35,    36,    37,    50,    51,    40,     6,    68,
    68,     4,     6,   139,    34,    35,    36,    37,   144,     6,
    40,    69,     6,   127,     6,    73,   127,   127,   117,   118,
   134,     5,    69,   134,   134,   127,    73,    53,     6,    53,
     6,   127,   134,   169,   133,   127,   135,   173,   174,    76,
    77,    78,    79,    80,    76,    77,    78,    79,    80,   127,
    34,    35,    36,    37,    87,    88,    40,    69,     7,   127,
   127,    73,    87,    88,   128,   134,   134,    90,   128,   133,
     7,   728,    68,   133,   127,    41,   136,   135,    44,   123,
   124,   117,   118,   104,   134,   129,   789,   131,   135,   134,
    50,   134,   136,   134,   134,   134,   134,   128,   135,    46,
   127,   129,   133,   135,   134,   127,   109,   110,   111,   117,
   118,   114,   115,   117,   118,   118,   117,   118,   115,    46,
   133,   115,   125,   136,   127,   128,   129,   130,   338,   132,
   133,   134,   133,   136,   137,   138,   424,   140,   134,   123,
   124,   117,   118,   117,   118,   128,   356,   131,   117,   118,
   133,     6,     7,   156,   157,   104,   105,   106,   107,   133,
   128,   135,   165,   127,   133,   133,   135,   104,   105,   106,
   107,   117,   118,   128,    46,   178,   179,   180,   133,   182,
    69,   838,   185,   186,    73,    48,   123,   124,   134,   244,
   245,   246,   247,   196,   131,   255,   316,   317,   318,   202,
   203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   257,   255,   303,    26,    27,   135,    29,   123,   124,
    69,    69,   255,    69,    73,    73,   131,    73,   127,     7,
   129,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   327,   328,   327,   328,
   117,   118,   285,   127,    69,   421,   422,   127,    73,   129,
   303,   294,  1017,   134,  1019,   298,  1021,   134,    69,   302,
   303,   127,    73,   129,   134,   308,   309,   310,    46,   312,
   313,   314,   315,   316,   317,   318,   135,   135,    41,   135,
    69,    44,     7,    46,    73,    48,     6,   330,   331,   332,
   333,   334,   335,   123,   124,    69,   339,   994,    69,    73,
    69,   344,    73,     4,    73,   348,   349,    59,    60,  1052,
   135,   367,  1055,   117,   118,  1058,   104,   105,   106,   107,
     6,     7,   365,  1088,   135,   368,     4,   117,   118,   133,
   425,   153,   127,   155,   129,   123,   124,   127,    69,   161,
   516,   517,    73,   165,   134,   127,   135,   129,   448,   117,
   118,   127,     4,   129,  1119,   455,  1121,    41,  1123,     6,
    44,   135,    46,  1128,   135,   133,   135,   467,   424,  1112,
   127,   117,   118,   127,   117,   118,   419,   127,   200,   104,
   105,   106,   107,   426,   133,  1150,   135,  1152,   134,  1154,
   133,  1134,   720,   721,  1137,   448,     4,  1140,   123,   124,
  1143,   127,     4,   129,   135,   448,   449,     4,   451,   452,
   127,   454,   455,   127,   467,   129,     4,     5,  1161,   127,
  1163,   129,  1165,   127,   467,   117,   118,   470,   127,   127,
   129,   129,   475,   117,   118,   117,   118,   532,   127,   127,
   129,   133,     5,   127,   487,   488,    34,    35,    36,    37,
   134,   133,    40,   496,   630,   631,   127,   633,   129,   635,
   127,   127,   638,   639,   127,   881,   117,   118,   127,   512,
   129,    34,    35,    36,    37,     5,   532,    40,     6,   117,
   118,   524,   133,   526,   527,   117,   118,     6,   127,   117,
   118,   127,   127,   129,   594,   133,   127,   117,   118,     4,
   595,   133,   127,   325,   326,   133,   127,   683,   684,   685,
   117,   118,   334,   133,   119,   120,   121,   127,   127,   129,
   129,   126,   617,   623,   123,   124,   133,     8,   571,   572,
   129,   127,   131,   129,   127,   127,   129,   136,   127,   134,
   129,   594,   585,   586,   587,   588,   589,   590,   591,   134,
   127,   594,   129,   134,   133,   598,   135,   133,   129,   135,
   131,   604,    46,   127,    48,   665,   666,   667,   668,     8,
   623,   614,   748,   127,   127,   123,   124,   753,   134,   134,
   623,   129,   625,   131,   760,   761,   762,   134,   136,   765,
   766,   767,   768,   769,   770,   771,   133,  1013,   135,   133,
     6,   135,   133,   129,   135,    62,    63,    64,    65,   785,
    67,   129,   665,   666,   667,   668,   129,    74,    75,   133,
     6,   135,   665,   666,   667,   668,   134,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   131,   133,   743,   135,   126,   133,   133,   135,   135,
     6,     6,    58,   829,   135,   698,   699,    90,   133,   702,
   135,   717,     6,   129,   486,   721,   133,     4,   135,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   134,     5,   507,   729,   126,   126,   133,
   743,   135,     7,   133,   737,   135,   135,     4,   129,     6,
   743,   744,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   759,   133,   131,   135,
   126,   123,   124,   899,   133,     7,   135,   129,     7,   131,
   773,   774,   775,   909,   136,   830,   133,   913,   135,   133,
   128,   135,   785,     8,   133,   788,   135,   842,     6,   133,
   806,   135,   117,   118,   119,   120,   121,   134,   801,   802,
   803,   126,     7,     7,     6,    87,   809,   134,   128,   133,
   128,   814,   133,     6,  1024,     4,   130,    90,    90,     7,
     7,     7,   877,     7,    90,     7,     7,     7,   831,   128,
   881,   131,   881,     6,   128,   128,   972,   128,   620,   135,
   135,     7,   845,     7,     7,   131,   849,   127,   127,   134,
   127,     6,     4,   856,   857,     6,     6,   860,     6,   130,
     6,   129,     7,     6,   867,   868,   115,    46,    46,     7,
     7,    48,   134,     7,   877,     7,     7,     7,     7,  1089,
   662,   663,   664,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,     7,     7,     7,
     7,   126,     7,   128,   907,   908,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     4,     6,   925,  1059,   126,   134,     6,     6,     6,     6,
     6,     6,     4,     6,   937,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,     4,
     6,   127,   955,   126,   128,     6,   128,     7,     6,   134,
   131,     6,  1013,     6,  1013,   134,   134,   134,     6,   134,
     6,   974,   134,   976,   134,   978,     6,     6,   131,   982,
    86,     6,     4,     6,   987,     6,   130,     6,     6,    41,
    42,    43,    44,    45,    46,    47,    48,    49,     6,    51,
   133,    53,    54,     6,    56,    57,   788,     6,     6,     6,
     6,     6,     6,  1016,     6,  1018,     6,  1020,     6,     6,
    72,     6,     6,  1026,     6,     4,     6,   131,  1031,  1032,
    82,    83,    84,   134,     6,   130,     7,  1040,     6,     6,
     6,     6,   134,     6,   135,  1048,   134,   134,   134,     6,
    85,   134,     6,     6,   113,   114,   115,   116,   117,   118,
   119,   120,   121,  1066,   128,     7,     6,   126,    88,   851,
     6,   853,     6,     6,  1077,  1130,   134,  1080,     6,     5,
  1083,   135,     6,   135,     6,   134,   133,     6,     6,     6,
  1093,     6,  1095,     6,     6,     6,   135,     5,   135,     6,
   882,  1156,   884,  1158,   886,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,     3,     4,   134,  1174,
   126,   134,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     6,     6,   134,     6,
     6,   134,   133,     6,    41,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,     5,
   134,     6,   134,   126,   134,    62,    63,    64,    65,    66,
    67,     6,   134,     6,     6,     6,     6,    74,    75,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,     6,     6,     6,     0,   126,     0,   736,
  1066,     2,   535,   100,   101,   102,   103,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,     2,
   117,   118,   986,   126,  1016,   122,  1018,   834,  1020,    -1,
   127,    -1,    -1,    -1,    -1,   132,    -1,    -1,   135,    -1,
    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,  1041,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    62,    63,    64,    65,    66,    67,    -1,
   135,     3,     4,    -1,    -1,    74,    75,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,   100,   101,   102,   103,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,
    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
     3,     4,    -1,   132,    -1,   134,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,
   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,
   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,    -1,
   132,    -1,   134,    -1,    -1,    -1,    -1,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,     6,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,
    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,    -1,   132,
    -1,   134,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
   101,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,
    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,
    -1,   132,    -1,   134,   100,   101,   102,   103,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,
    -1,   127,    -1,     3,     4,    -1,   132,    -1,   134,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    -1,    -1,     3,     4,
     5,    -1,     7,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,    37,    -1,    -1,    40,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   100,   101,   102,   103,    -1,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,
    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,   134,   100,   101,   102,   103,   104,
   105,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   117,   118,    -1,    -1,    -1,   122,   123,   124,
    -1,    -1,   127,    -1,   129,    -1,   131,   132,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    41,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    62,    63,    64,
    65,    66,    67,    -1,    -1,     3,     4,    -1,    -1,    74,
    75,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   100,   101,   102,   103,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,
    -1,    -1,   127,     3,     4,     5,    -1,   132,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     6,    34,    35,    36,    37,    -1,    -1,
    40,    -1,   100,   101,   102,   103,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     3,     4,    -1,    -1,   132,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   100,   101,   102,   103,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,    -1,
    -1,    -1,   122,     6,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,    -1,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,     8,
    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,   102,
   103,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,
     8,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     8,    -1,    -1,    -1,   126,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,     8,
    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,     0,     1,    -1,   126,     4,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,    -1,    -1,    -1,   133,    -1,   135,    33,    -1,    -1,
    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    55,
    56,    57,    -1,    -1,    -1,    61,    62,    63,    64,    65,
    66,    67,    -1,    69,    70,    71,    72,     4,    74,    75,
    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,
    -1,    87,    -1,    89,    -1,    91,    92,    93,    94,    95,
    96,    97,    98,    99,    -1,    -1,    33,    -1,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    55,    56,
    57,    -1,    -1,    -1,    61,    62,    63,    64,    65,    66,
    67,    -1,    69,    70,    71,    72,    -1,    74,    75,    -1,
    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,
    87,    -1,    89,    -1,    91,    92,    93,    94,    95,    96,
    97,    98,    99,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    51,    -1,    53,    54,    -1,    56,    57,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    -1,
    51,    -1,    53,    54,    72,    56,    57,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    82,    83,    84,    -1,    -1,    -1,
    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    82,    83,    84,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    -1,    51,    -1,    53,    54,    -1,    56,
    57,    -1,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    72,    51,   135,    53,    54,
    -1,    56,    57,    -1,    -1,    82,    83,    84,    -1,    -1,
    -1,    -1,    -1,    -1,   135,    -1,    -1,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,    84,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    -1,
    51,    -1,    53,    54,    -1,    56,    57,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    -1,    51,   135,    53,
    54,    72,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    82,    83,    84,    -1,    -1,    -1,    -1,    72,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,
    84,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    -1,    51,    -1,    53,    54,    -1,    56,    57,    -1,    -1,
    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    72,    51,   135,    53,    54,    -1,    56,    57,
    -1,    -1,    82,    83,    84,    -1,    -1,    -1,    -1,    -1,
    -1,   135,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    82,    83,    84,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,
    -1,    -1,   133,    -1,   135,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   135,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   135,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,   133,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,   133,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
    -1,   133,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
    -1,    -1,   130,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
    -1,   130,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,    -1,    -1,   130,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
   130,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
   128,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,   126,
    -1,   128,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,    -1,
   126,    -1,   128,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,    -1,    -1,    -1,
    -1,   126,    -1,   128,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,   126,    -1,   128,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
    -1,    -1,    -1,    -1,   126
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 144 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 159 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 160 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 163 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 164 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 169 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 174 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 178 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 185 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 190 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 205 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 218 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 247 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 254 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 264 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 280 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 282 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 287 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 289 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 294 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 484 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 502 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 513 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 518 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 526 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 533 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 540 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 545 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 553 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 560 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 568 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 575 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 52:
#line 579 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 584 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 54:
#line 592 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 55:
#line 593 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 56:
#line 594 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 57:
#line 595 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 58:
#line 596 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 59:
#line 600 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 60:
#line 601 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 61:
#line 609 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 62:
#line 640 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 63:
#line 679 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 64:
#line 733 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 750 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 768 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 67:
#line 779 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 68:
#line 798 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 69:
#line 812 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 70:
#line 829 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 71:
#line 855 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 72:
#line 882 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 73:
#line 896 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 74:
#line 913 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 927 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 76:
#line 944 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 77:
#line 964 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 78:
#line 987 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 79:
#line 997 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 80:
#line 1012 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 81:
#line 1016 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 82:
#line 1028 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v = Create_Vertex(num, x, y, z, lc, 1.0);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(x, y, z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 83:
#line 1046 "Gmsh.y"
{
      int num = (int)yyvsp[-9].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double u = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double v = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	gmshSurface *surf = gmshSurface::surfaceByTag((int)yyvsp[-4].d);
	if(!surf){
	  yymsg(GERROR, "gmshSurface %d does not exist", (int)yyvsp[-4].d);
	}
	else{
	  Vertex *vt = Create_Vertex(num, u, v, surf, lc);
	  Tree_Add(THEM->Points, &vt);
	  AddToTemporaryBoundingBox(vt->Pos.X,vt->Pos.Y,vt->Pos.Z);
	}
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1069 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 85:
#line 1085 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      Attractor *att = tresholdAttractor::New(pars[0], pars[1], pars[2], pars[4]);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  att->addPoint(v->Pos.X,v->Pos.Y,v->Pos.Z);
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    att->addPoint(gv->x(),gv->y(),gv->z());
	}
      }
      att->buildFastSearchStructures();
      yyval.s.Type = MSH_POINT_ATTRACTOR;
      yyval.s.Num = 0;
    ;
    break;}
case 86:
#line 1113 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      Attractor *att = tresholdAttractor::New(pars[0], pars[1], pars[2], pars[4]);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  buildListOfPoints( att , c , (int) pars[3] );
	}
	else{
	  GEdge *ge = GMODEL->edgeByTag((int)d);
	  if(ge){
	    buildListOfPoints( att , ge , (int) pars[3] );
	  }
	}
      }
      att->buildFastSearchStructures();
      yyval.s.Type = MSH_LINE_ATTRACTOR;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1143 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 88:
#line 1165 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 89:
#line 1183 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1201 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1219 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1245 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1263 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1290 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1309 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1333 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1357 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1383 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1400 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1419 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1437 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1475 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	gmshSurface *myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 103:
#line 1497 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1513 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1533 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1550 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1567 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1588 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 109:
#line 1593 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 110:
#line 1598 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 111:
#line 1603 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 112:
#line 1610 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 113:
#line 1611 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 114:
#line 1612 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 115:
#line 1617 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 116:
#line 1621 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 117:
#line 1625 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 118:
#line 1641 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 119:
#line 1657 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 120:
#line 1673 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 121:
#line 1694 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 122:
#line 1706 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 123:
#line 1712 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 124:
#line 1718 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 125:
#line 1730 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 126:
#line 1739 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 127:
#line 1749 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 128:
#line 1765 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 129:
#line 1784 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 130:
#line 1798 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 131:
#line 1804 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 132:
#line 1810 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 133:
#line 1819 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 134:
#line 1833 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from THEM in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GMODEL->importTHEM();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 135:
#line 1883 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 136:
#line 1898 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 137:
#line 1909 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 138:
#line 1929 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 139:
#line 1939 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 140:
#line 1961 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 141:
#line 1965 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 142:
#line 1970 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 143:
#line 1975 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 144:
#line 1987 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 145:
#line 2002 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 146:
#line 2018 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 147:
#line 2044 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 148:
#line 2071 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 149:
#line 2103 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 150:
#line 2110 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 151:
#line 2115 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 152:
#line 2121 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 153:
#line 2125 "Gmsh.y"
{
    ;
    break;}
case 154:
#line 2134 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 2142 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 156:
#line 2150 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 157:
#line 2158 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 158:
#line 2163 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 159:
#line 2171 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 160:
#line 2176 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 161:
#line 2184 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 162:
#line 2189 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 163:
#line 2197 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 164:
#line 2202 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 165:
#line 2211 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 166:
#line 2218 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 167:
#line 2225 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 168:
#line 2232 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 169:
#line 2239 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 170:
#line 2246 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 171:
#line 2253 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 172:
#line 2260 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 173:
#line 2267 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 174:
#line 2274 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 175:
#line 2279 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 176:
#line 2286 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 177:
#line 2291 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 178:
#line 2298 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 179:
#line 2303 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 180:
#line 2310 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 181:
#line 2315 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 182:
#line 2322 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 183:
#line 2327 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 184:
#line 2334 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 185:
#line 2339 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 186:
#line 2346 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 187:
#line 2351 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 188:
#line 2358 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 189:
#line 2363 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 190:
#line 2370 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 191:
#line 2375 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 192:
#line 2386 "Gmsh.y"
{
    ;
    break;}
case 193:
#line 2389 "Gmsh.y"
{
    ;
    break;}
case 194:
#line 2395 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 195:
#line 2404 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 196:
#line 2426 "Gmsh.y"
{
      yymsg(WARNING, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 197:
#line 2450 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 198:
#line 2459 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 199:
#line 2477 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 200:
#line 2495 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 201:
#line 2513 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 202:
#line 2542 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 203:
#line 2577 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 204:
#line 2582 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 205:
#line 2609 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 206:
#line 2623 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 207:
#line 2642 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 208:
#line 2648 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 209:
#line 2654 "Gmsh.y"
{
    ;
    break;}
case 210:
#line 2657 "Gmsh.y"
{
    ;
    break;}
case 211:
#line 2666 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 212:
#line 2675 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 213:
#line 2676 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 214:
#line 2677 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 215:
#line 2678 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 216:
#line 2679 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 217:
#line 2680 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 218:
#line 2681 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 219:
#line 2682 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 220:
#line 2684 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 221:
#line 2690 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 222:
#line 2691 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 223:
#line 2692 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 224:
#line 2693 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 225:
#line 2694 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 226:
#line 2695 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 227:
#line 2696 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 228:
#line 2697 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 229:
#line 2698 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 230:
#line 2699 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 231:
#line 2700 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 232:
#line 2701 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 233:
#line 2702 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 234:
#line 2703 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 235:
#line 2704 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 236:
#line 2705 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 237:
#line 2706 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 238:
#line 2707 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 239:
#line 2708 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 240:
#line 2709 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 241:
#line 2710 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 242:
#line 2711 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 243:
#line 2712 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 244:
#line 2713 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 245:
#line 2714 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 246:
#line 2715 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 247:
#line 2716 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 248:
#line 2717 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 249:
#line 2718 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 250:
#line 2719 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 251:
#line 2720 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 252:
#line 2721 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 253:
#line 2723 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2724 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 255:
#line 2725 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 256:
#line 2726 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2727 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 258:
#line 2728 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2729 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2730 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2731 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2732 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2733 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 264:
#line 2734 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2735 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2736 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2737 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2738 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 269:
#line 2739 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2740 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 271:
#line 2741 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 272:
#line 2742 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 273:
#line 2743 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 274:
#line 2752 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 275:
#line 2753 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 276:
#line 2754 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 277:
#line 2755 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 278:
#line 2756 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 279:
#line 2757 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 280:
#line 2758 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 281:
#line 2763 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 282:
#line 2779 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 283:
#line 2794 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 284:
#line 2814 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 285:
#line 2828 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 286:
#line 2841 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 287:
#line 2864 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 288:
#line 2882 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 289:
#line 2900 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2918 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 291:
#line 2936 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 292:
#line 2944 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 293:
#line 2948 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 294:
#line 2952 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 295:
#line 2956 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 296:
#line 2960 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 297:
#line 2967 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 298:
#line 2971 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 299:
#line 2975 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 300:
#line 2979 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 301:
#line 2986 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 302:
#line 2991 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 303:
#line 2999 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 304:
#line 3004 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 305:
#line 3008 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 306:
#line 3013 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 307:
#line 3017 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 308:
#line 3029 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 309:
#line 3035 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 310:
#line 3046 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 311:
#line 3066 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 312:
#line 3076 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 313:
#line 3086 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 314:
#line 3096 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 315:
#line 3113 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 316:
#line 3132 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 317:
#line 3156 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 318:
#line 3185 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 319:
#line 3190 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 320:
#line 3194 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 321:
#line 3198 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 322:
#line 3211 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 323:
#line 3215 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 324:
#line 3227 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 325:
#line 3234 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 326:
#line 3256 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 327:
#line 3260 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 328:
#line 3275 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 329:
#line 3280 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 330:
#line 3287 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 331:
#line 3291 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 332:
#line 3299 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 333:
#line 3307 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 334:
#line 3321 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 335:
#line 3335 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 336:
#line 3339 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 337:
#line 3358 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 338:
#line 3380 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3403 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
