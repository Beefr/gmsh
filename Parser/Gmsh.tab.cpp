
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tPoint	293
#define	tCircle	294
#define	tEllipse	295
#define	tLine	296
#define	tSurface	297
#define	tSpline	298
#define	tVolume	299
#define	tCharacteristic	300
#define	tLength	301
#define	tParametric	302
#define	tElliptic	303
#define	tPlane	304
#define	tRuled	305
#define	tTriangulation	306
#define	tTransfinite	307
#define	tComplex	308
#define	tPhysical	309
#define	tUsing	310
#define	tBump	311
#define	tProgression	312
#define	tPlugin	313
#define	tRotate	314
#define	tTranslate	315
#define	tSymmetry	316
#define	tDilate	317
#define	tExtrude	318
#define	tDuplicata	319
#define	tLoop	320
#define	tRecombine	321
#define	tDelete	322
#define	tCoherence	323
#define	tIntersect	324
#define	tAttractor	325
#define	tLayers	326
#define	tScalarPoint	327
#define	tVectorPoint	328
#define	tTensorPoint	329
#define	tScalarLine	330
#define	tVectorLine	331
#define	tTensorLine	332
#define	tScalarTriangle	333
#define	tVectorTriangle	334
#define	tTensorTriangle	335
#define	tScalarQuadrangle	336
#define	tVectorQuadrangle	337
#define	tTensorQuadrangle	338
#define	tScalarTetrahedron	339
#define	tVectorTetrahedron	340
#define	tTensorTetrahedron	341
#define	tScalarHexahedron	342
#define	tVectorHexahedron	343
#define	tTensorHexahedron	344
#define	tScalarPrism	345
#define	tVectorPrism	346
#define	tTensorPrism	347
#define	tScalarPyramid	348
#define	tVectorPyramid	349
#define	tTensorPyramid	350
#define	tText2D	351
#define	tText3D	352
#define	tInterpolationScheme	353
#define	tTime	354
#define	tCombine	355
#define	tBSpline	356
#define	tBezier	357
#define	tNurbs	358
#define	tOrder	359
#define	tWith	360
#define	tBounds	361
#define	tKnots	362
#define	tColor	363
#define	tColorTable	364
#define	tFor	365
#define	tIn	366
#define	tEndFor	367
#define	tIf	368
#define	tEndIf	369
#define	tExit	370
#define	tReturn	371
#define	tCall	372
#define	tFunction	373
#define	tTrimmed	374
#define	tShow	375
#define	tHide	376
#define	tB_SPLINE_SURFACE_WITH_KNOTS	377
#define	tB_SPLINE_CURVE_WITH_KNOTS	378
#define	tCARTESIAN_POINT	379
#define	tTRUE	380
#define	tFALSE	381
#define	tUNSPECIFIED	382
#define	tU	383
#define	tV	384
#define	tEDGE_CURVE	385
#define	tVERTEX_POINT	386
#define	tORIENTED_EDGE	387
#define	tPLANE	388
#define	tFACE_OUTER_BOUND	389
#define	tEDGE_LOOP	390
#define	tADVANCED_FACE	391
#define	tVECTOR	392
#define	tDIRECTION	393
#define	tAXIS2_PLACEMENT_3D	394
#define	tISO	395
#define	tENDISO	396
#define	tENDSEC	397
#define	tDATA	398
#define	tHEADER	399
#define	tFILE_DESCRIPTION	400
#define	tFILE_SCHEMA	401
#define	tFILE_NAME	402
#define	tMANIFOLD_SOLID_BREP	403
#define	tCLOSED_SHELL	404
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	405
#define	tFACE_BOUND	406
#define	tCYLINDRICAL_SURFACE	407
#define	tCONICAL_SURFACE	408
#define	tCIRCLE	409
#define	tTRIMMED_CURVE	410
#define	tGEOMETRIC_SET	411
#define	tCOMPOSITE_CURVE_SEGMENT	412
#define	tCONTINUOUS	413
#define	tCOMPOSITE_CURVE	414
#define	tTOROIDAL_SURFACE	415
#define	tPRODUCT_DEFINITION	416
#define	tPRODUCT_DEFINITION_SHAPE	417
#define	tSHAPE_DEFINITION_REPRESENTATION	418
#define	tELLIPSE	419
#define	tSolid	420
#define	tEndSolid	421
#define	tVertex	422
#define	tFacet	423
#define	tNormal	424
#define	tOuter	425
#define	tLoopSTL	426
#define	tEndLoop	427
#define	tEndFacet	428
#define	tAFFECTPLUS	429
#define	tAFFECTMINUS	430
#define	tAFFECTTIMES	431
#define	tAFFECTDIVIDE	432
#define	tOR	433
#define	tAND	434
#define	tEQUAL	435
#define	tNOTEQUAL	436
#define	tAPPROXEQUAL	437
#define	tLESSOREQUAL	438
#define	tGREATEROREQUAL	439
#define	tCROSSPRODUCT	440
#define	tPLUSPLUS	441
#define	tMINUSMINUS	442
#define	UNARYPREC	443

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.214 2004-12-17 05:11:59 geuzaine Exp $
//
// Copyright (C) 1997-2004 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

// FIXME: most tSTRING and tBIGSTRING are leaked: Free() them!

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static Surface *STL_Surf;
static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

#if defined(HAVE_FLTK)
void UpdateViewsInGUI();
#endif

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 81 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2373
#define	YYFLAG		-32768
#define	YYNTBASE	209

#define YYTRANSLATE(x) ((unsigned)(x) <= 443 ? yytranslate[x] : 347)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   195,     2,   205,     2,   193,     2,     2,   200,
   201,   191,   189,   206,   190,   204,   192,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   185,
     2,   187,   179,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   202,     2,   203,   199,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   207,     2,   208,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   180,   181,   182,   183,   184,   186,   188,   194,
   196,   197,   198
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1973,  1986,  1995,  2004,  2013,  2026,  2041,  2056,  2079,
  2100,  2109,  2118,  2127,  2135,  2144,  2150,  2162,  2168,  2178,
  2180,  2182,  2184,  2185,  2188,  2195,  2202,  2209,  2216,  2221,
  2228,  2233,  2240,  2244,  2250,  2254,  2258,  2263,  2268,  2272,
  2280,  2284,  2292,  2296,  2299,  2302,  2318,  2321,  2328,  2337,
  2346,  2357,  2359,  2362,  2364,  2368,  2373,  2375,  2384,  2397,
  2412,  2413,  2426,  2427,  2444,  2445,  2464,  2473,  2486,  2501,
  2502,  2515,  2516,  2533,  2534,  2553,  2562,  2575,  2590,  2591,
  2604,  2605,  2622,  2623,  2642,  2644,  2647,  2657,  2665,  2668,
  2675,  2685,  2695,  2704,  2713,  2722,  2729,  2734,  2737,  2740,
  2742,  2744,  2746,  2748,  2750,  2752,  2756,  2759,  2762,  2765,
  2769,  2773,  2777,  2781,  2785,  2789,  2793,  2797,  2801,  2805,
  2809,  2813,  2817,  2821,  2827,  2832,  2837,  2842,  2847,  2852,
  2857,  2862,  2867,  2872,  2877,  2884,  2889,  2894,  2899,  2904,
  2909,  2914,  2921,  2928,  2935,  2940,  2945,  2950,  2955,  2960,
  2965,  2970,  2975,  2980,  2985,  2990,  2997,  3002,  3007,  3012,
  3017,  3022,  3027,  3034,  3041,  3048,  3053,  3055,  3057,  3059,
  3061,  3063,  3068,  3073,  3076,  3082,  3086,  3093,  3098,  3106,
  3108,  3111,  3114,  3118,  3122,  3134,  3144,  3152,  3160,  3161,
  3165,  3167,  3171,  3172,  3176,  3180,  3182,  3186,  3188,  3190,
  3194,  3199,  3203,  3209,  3214,  3216,  3218,  3220,  3224,  3229,
  3236,  3244,  3246,  3248,  3252,  3256,  3266,  3274,  3276,  3282,
  3286,  3293,  3295,  3299,  3301,  3308,  3313,  3318,  3325,  3332
};

static const short yyrhs[] = {   213,
     0,   211,     0,   218,     0,     1,     6,     0,     3,     0,
   190,     3,     0,     0,   211,   212,     0,   166,     0,   169,
   170,   210,   210,   210,   171,   172,   168,   210,   210,   210,
   168,   210,   210,   210,   168,   210,   210,   210,   173,   174,
     0,   167,     0,     0,   213,   214,     0,   215,     0,   217,
     0,   216,     0,   141,     6,     0,   142,     6,     0,   144,
     6,     0,   143,     6,     0,   145,     6,     0,   146,   200,
   336,   206,     5,   201,     6,     0,   147,   200,   336,   201,
     6,     0,   148,   200,     5,   206,     5,   206,   336,   206,
   336,   206,     5,   206,     5,   206,     5,   201,     6,     0,
     3,     7,   125,   200,     5,   206,   334,   201,     6,     0,
     3,     7,   124,   200,     5,   206,   332,   206,   340,   206,
   331,   206,   331,   206,   331,   206,   340,   206,   340,   206,
   331,   201,     6,     0,     3,     7,   123,   200,     5,   206,
   332,   206,   332,   206,   338,   206,   331,   206,   331,   206,
   331,   206,   331,   206,   340,   206,   340,   206,   340,   206,
   340,   206,   331,   201,     6,     0,     3,     7,   131,   200,
     5,   206,     3,   206,     3,   206,     3,   206,   331,   201,
     6,     0,     3,     7,   135,   200,     5,   206,     3,   206,
   331,   201,     6,     0,     3,     7,   152,   200,     5,   206,
     3,   206,   331,   201,     6,     0,     3,     7,   133,   200,
     5,   206,   191,   206,   191,   206,   332,   206,   331,   201,
     6,     0,     3,     7,   136,   200,     5,   206,   340,   201,
     6,     0,     3,     7,   137,   200,     5,   206,   340,   206,
     3,   206,   331,   201,     6,     0,     3,     7,   132,   200,
     5,   206,     3,   201,     6,     0,     3,     7,   138,   200,
     5,   206,     3,   206,   332,   201,     6,     0,     3,     7,
   140,   200,     5,   206,     3,   206,     3,   206,     3,   201,
     6,     0,     3,     7,   139,   200,     5,   206,   334,   201,
     6,     0,     3,     7,   134,   200,     5,   206,     3,   201,
     6,     0,     3,     7,    42,   200,     5,   206,     3,   206,
     3,   201,     6,     0,     3,     7,   150,   200,     5,   206,
   340,   201,     6,     0,     3,     7,   151,   200,     5,   206,
   340,   206,     3,   201,     6,     0,     3,     7,   149,   200,
     5,   206,     3,   201,     6,     0,     3,     7,   153,   200,
     5,   206,     3,   206,   332,   201,     6,     0,     3,     7,
   154,   200,     5,   206,     3,   206,   332,   206,   332,   201,
     6,     0,     3,     7,   161,   200,     5,   206,     3,   206,
   332,   206,   332,   201,     6,     0,     3,     7,   155,   200,
     5,   206,     3,   206,   332,   201,     6,     0,     3,     7,
   165,   200,     5,   206,     3,   206,   332,   206,   332,   201,
     6,     0,     3,     7,   156,   200,     5,   206,     3,   206,
   340,   206,   340,   206,   331,   206,   331,   201,     6,     0,
     3,     7,   157,   200,     5,   206,   340,   201,     6,     0,
     3,     7,   158,   200,   159,   206,   331,   206,     3,   201,
     6,     0,     3,     7,   160,   200,     5,   206,   340,   206,
   331,   201,     6,     0,     3,     7,   162,   200,     5,   206,
     5,   206,     3,   206,     3,   201,     6,     0,     3,     7,
   163,   200,     5,   206,     5,   206,     3,   201,     6,     0,
     3,     7,   164,   200,     3,   206,     3,   201,     6,     0,
     0,   218,   219,     0,   221,     0,   220,     0,   306,     0,
   307,     0,   308,     0,   311,     0,   312,     0,   313,     0,
   314,     0,   317,     0,   329,     0,   330,     0,   316,     0,
   315,     0,    33,   200,     5,   201,     6,     0,    33,   200,
     5,   206,   342,   201,     6,     0,     4,     5,   207,   222,
   208,     6,     0,     4,     5,     4,   334,   207,   222,   208,
     6,     0,     0,   222,   224,     0,   222,   227,     0,   222,
   230,     0,   222,   233,     0,   222,   236,     0,   222,   239,
     0,   222,   242,     0,   222,   245,     0,   222,   248,     0,
   222,   251,     0,   222,   254,     0,   222,   257,     0,   222,
   260,     0,   222,   263,     0,   222,   266,     0,   222,   269,
     0,   222,   272,     0,   222,   275,     0,   222,   278,     0,
   222,   281,     0,   222,   284,     0,   222,   287,     0,   222,
   290,     0,   222,   293,     0,   222,   296,     0,   222,   299,
     0,   222,   301,     0,   222,   303,     0,   332,     0,   223,
   206,   332,     0,     0,    73,   200,   332,   206,   332,   206,
   332,   201,   225,   207,   223,   208,     6,     0,   332,     0,
   226,   206,   332,     0,     0,    74,   200,   332,   206,   332,
   206,   332,   201,   228,   207,   226,   208,     6,     0,   332,
     0,   229,   206,   332,     0,     0,    75,   200,   332,   206,
   332,   206,   332,   201,   231,   207,   229,   208,     6,     0,
   332,     0,   232,   206,   332,     0,     0,    76,   200,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   201,   234,   207,   232,   208,     6,     0,   332,     0,   235,
   206,   332,     0,     0,    77,   200,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   201,   237,   207,
   235,   208,     6,     0,   332,     0,   238,   206,   332,     0,
     0,    78,   200,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   201,   240,   207,   238,   208,     6,
     0,   332,     0,   241,   206,   332,     0,     0,    79,   200,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   201,   243,   207,
   241,   208,     6,     0,   332,     0,   244,   206,   332,     0,
     0,    80,   200,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   201,   246,   207,   244,   208,     6,     0,   332,     0,   247,
   206,   332,     0,     0,    81,   200,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   201,   249,   207,   247,   208,     6,     0,
   332,     0,   250,   206,   332,     0,     0,    82,   200,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   201,   252,   207,   250,   208,     6,     0,   332,
     0,   253,   206,   332,     0,     0,    83,   200,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   201,   255,   207,   253,   208,     6,     0,   332,     0,
   256,   206,   332,     0,     0,    84,   200,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   201,   258,   207,   256,   208,     6,     0,   332,     0,   259,
   206,   332,     0,     0,    85,   200,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   201,
   261,   207,   259,   208,     6,     0,   332,     0,   262,   206,
   332,     0,     0,    86,   200,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   201,   264,
   207,   262,   208,     6,     0,   332,     0,   265,   206,   332,
     0,     0,    87,   200,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   201,   267,   207,
   265,   208,     6,     0,   332,     0,   268,   206,   332,     0,
     0,    88,   200,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   201,   270,   207,   268,   208,     6,     0,   332,     0,   271,
   206,   332,     0,     0,    89,   200,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   201,   273,   207,   271,   208,     6,     0,
   332,     0,   274,   206,   332,     0,     0,    90,   200,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   201,   276,   207,   274,
   208,     6,     0,   332,     0,   277,   206,   332,     0,     0,
    91,   200,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   201,   279,   207,
   277,   208,     6,     0,   332,     0,   280,   206,   332,     0,
     0,    92,   200,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   201,   282,
   207,   280,   208,     6,     0,   332,     0,   283,   206,   332,
     0,     0,    93,   200,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   201,
   285,   207,   283,   208,     6,     0,   332,     0,   286,   206,
   332,     0,     0,    94,   200,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   201,   288,   207,   286,   208,     6,
     0,   332,     0,   289,   206,   332,     0,     0,    95,   200,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   206,   332,   206,   332,   206,   332,   206,   332,   201,
   291,   207,   289,   208,     6,     0,   332,     0,   292,   206,
   332,     0,     0,    96,   200,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   201,   294,   207,   292,   208,     6,
     0,   346,     0,   295,   206,   346,     0,     0,    97,   200,
   332,   206,   332,   206,   332,   201,   297,   207,   295,   208,
     6,     0,   346,     0,   298,   206,   346,     0,     0,    98,
   200,   332,   206,   332,   206,   332,   206,   332,   201,   300,
   207,   298,   208,     6,     0,    99,   207,   339,   208,   207,
   339,   208,     6,     0,   332,     0,   302,   206,   332,     0,
   100,   207,   302,   208,     6,     0,     7,     0,   175,     0,
   176,     0,   177,     0,   178,     0,   196,     0,   197,     0,
     4,   304,   332,     6,     0,     4,   202,   332,   203,   304,
   332,     6,     0,     4,   202,   207,   342,   208,   203,   304,
   340,     6,     0,     4,   202,   203,     7,   340,     6,     0,
     4,   305,     6,     0,     4,   202,   332,   203,   305,     6,
     0,     4,   204,     4,     7,   346,     6,     0,     4,   202,
   332,   203,   204,     4,     7,   346,     6,     0,     4,   204,
     4,   304,   332,     6,     0,     4,   202,   332,   203,   204,
     4,   304,   332,     6,     0,     4,   204,     4,   305,     6,
     0,     4,   202,   332,   203,   204,     4,   305,     6,     0,
     4,   204,   109,   204,     4,     7,   343,     6,     0,     4,
   202,   332,   203,   204,   109,   204,     4,     7,   343,     6,
     0,     4,   204,   110,     7,   344,     6,     0,     4,   202,
   332,   203,   204,   110,     7,   344,     6,     0,    59,   200,
     4,   201,   204,     4,     7,   332,     6,     0,    59,   200,
     4,   201,   204,     4,     7,   346,     6,     0,    39,   200,
   332,   201,     7,   334,     6,     0,    55,    39,   200,   332,
   201,     7,   340,     6,     0,    71,    39,   340,     7,   207,
   332,   206,   332,   206,   332,   208,     6,     0,    46,    47,
   340,     7,   332,     6,     0,    42,   200,   332,   201,     7,
   340,     6,     0,    44,   200,   332,   201,     7,   340,     6,
     0,    40,   200,   332,   201,     7,   340,     6,     0,    40,
   200,   332,   201,     7,   340,    50,   334,     6,     0,    41,
   200,   332,   201,     7,   340,     6,     0,    41,   200,   332,
   201,     7,   340,    50,   334,     6,     0,    48,   200,   332,
   201,     7,   207,   332,   206,   332,   206,     5,   206,     5,
   206,     5,   208,     6,     0,   102,   200,   332,   201,     7,
   340,     6,     0,   103,   200,   332,   201,     7,   340,     6,
     0,   104,   200,   332,   201,     7,   340,   108,   340,   105,
   332,     6,     0,    42,    66,   200,   332,   201,     7,   340,
     6,     0,    71,    42,   340,     7,   207,   332,   206,   332,
   206,   332,   208,     6,     0,    55,    42,   200,   332,   201,
     7,   340,     6,     0,    50,    43,   200,   332,   201,     7,
   340,     6,     0,    51,    43,   200,   332,   201,     7,   340,
     6,     0,   120,    43,   200,   332,   201,     7,   207,   332,
   206,   340,   208,     6,     0,    52,    43,   207,   332,   208,
     7,   200,   332,   206,   332,   201,   340,   340,     6,     0,
    52,    43,   200,   332,   201,     7,   200,   332,   206,   332,
   201,   340,   340,     6,     0,   104,    43,   106,   107,   200,
   332,   201,     7,   338,   108,   207,   340,   206,   340,   208,
   105,   207,   332,   206,   332,   208,     6,     0,   104,    43,
   200,   332,   201,     7,   338,   108,   207,   340,   206,   340,
   208,   105,   207,   332,   206,   332,   208,     6,     0,    43,
    66,   200,   332,   201,     7,   340,     6,     0,    55,    43,
   200,   332,   201,     7,   340,     6,     0,    54,    45,   200,
   332,   201,     7,   340,     6,     0,    45,   200,   332,   201,
     7,   340,     6,     0,    55,    45,   200,   332,   201,     7,
   340,     6,     0,    61,   334,   207,   309,   208,     0,    60,
   207,   334,   206,   334,   206,   332,   208,   207,   309,   208,
     0,    62,   334,   207,   309,   208,     0,    63,   207,   334,
   206,   332,   208,   207,   309,   208,     0,   311,     0,   310,
     0,   308,     0,     0,   310,   307,     0,   310,    39,   207,
   342,   208,     6,     0,   310,    42,   207,   342,   208,     6,
     0,   310,    43,   207,   342,   208,     6,     0,   310,    45,
   207,   342,   208,     6,     0,    65,   207,   310,   208,     0,
    65,     4,   202,   332,   203,     6,     0,    68,   207,   310,
   208,     0,    68,     4,   202,   332,   203,     6,     0,    68,
     4,     6,     0,   109,   343,   207,   310,   208,     0,   121,
   346,     6,     0,   122,   346,     6,     0,   121,   207,   310,
   208,     0,   122,   207,   310,   208,     0,     4,   346,     6,
     0,     4,     4,   202,   332,   203,   346,     6,     0,     4,
   332,     6,     0,    59,   200,     4,   201,   204,     4,     6,
     0,   101,     4,     6,     0,   116,     6,     0,    37,     6,
     0,    37,   207,   332,   206,   332,   206,   332,   206,   332,
   206,   332,   206,   332,   208,     6,     0,    38,     6,     0,
   111,   200,   332,     8,   332,   201,     0,   111,   200,   332,
     8,   332,     8,   332,   201,     0,   111,     4,   112,   207,
   332,     8,   332,   208,     0,   111,     4,   112,   207,   332,
     8,   332,     8,   332,   208,     0,   113,     0,   119,     4,
     0,   117,     0,   118,     4,     6,     0,   114,   200,   332,
   201,     0,   115,     0,    64,    39,   207,   332,   206,   334,
   208,     6,     0,    64,    39,   207,   332,   206,   334,   206,
   334,   206,   332,   208,     6,     0,    64,    39,   207,   332,
   206,   334,   206,   334,   206,   334,   206,   332,   208,     6,
     0,     0,    64,    39,   207,   332,   206,   334,   208,   318,
   207,   327,   208,     6,     0,     0,    64,    39,   207,   332,
   206,   334,   206,   334,   206,   332,   208,   319,   207,   327,
   208,     6,     0,     0,    64,    39,   207,   332,   206,   334,
   206,   334,   206,   334,   206,   332,   208,   320,   207,   327,
   208,     6,     0,    64,    42,   207,   332,   206,   334,   208,
     6,     0,    64,    42,   207,   332,   206,   334,   206,   334,
   206,   332,   208,     6,     0,    64,    42,   207,   332,   206,
   334,   206,   334,   206,   334,   206,   332,   208,     6,     0,
     0,    64,    42,   207,   332,   206,   334,   208,   321,   207,
   327,   208,     6,     0,     0,    64,    42,   207,   332,   206,
   334,   206,   334,   206,   332,   208,   322,   207,   327,   208,
     6,     0,     0,    64,    42,   207,   332,   206,   334,   206,
   334,   206,   334,   206,   332,   208,   323,   207,   327,   208,
     6,     0,    64,    43,   207,   332,   206,   334,   208,     6,
     0,    64,    43,   207,   332,   206,   334,   206,   334,   206,
   332,   208,     6,     0,    64,    43,   207,   332,   206,   334,
   206,   334,   206,   334,   206,   332,   208,     6,     0,     0,
    64,    43,   207,   332,   206,   334,   208,   324,   207,   327,
   208,     6,     0,     0,    64,    43,   207,   332,   206,   334,
   206,   334,   206,   332,   208,   325,   207,   327,   208,     6,
     0,     0,    64,    43,   207,   332,   206,   334,   206,   334,
   206,   334,   206,   332,   208,   326,   207,   327,   208,     6,
     0,   328,     0,   327,   328,     0,    72,   207,   340,   206,
   340,   206,   340,   208,     6,     0,    72,   207,   340,   206,
   340,   208,     6,     0,    67,     6,     0,    53,    42,   340,
     7,   332,     6,     0,    53,    42,   340,     7,   332,    56,
    58,   332,     6,     0,    53,    42,   340,     7,   332,    56,
    57,   332,     6,     0,    53,    43,   207,   332,   208,     7,
   340,     6,     0,    49,    43,   207,   332,   208,     7,   340,
     6,     0,    53,    45,   207,   332,   208,     7,   340,     6,
     0,    67,    43,   340,     7,   332,     6,     0,    67,    43,
   340,     6,     0,    69,     6,     0,    70,     6,     0,   126,
     0,   127,     0,   128,     0,   129,     0,   130,     0,   333,
     0,   200,   332,   201,     0,   190,   332,     0,   189,   332,
     0,   195,   332,     0,   332,   190,   332,     0,   332,   189,
   332,     0,   332,   191,   332,     0,   332,   192,   332,     0,
   332,   193,   332,     0,   332,   199,   332,     0,   332,   185,
   332,     0,   332,   187,   332,     0,   332,   186,   332,     0,
   332,   188,   332,     0,   332,   182,   332,     0,   332,   183,
   332,     0,   332,   181,   332,     0,   332,   180,   332,     0,
   332,   179,   332,     8,   332,     0,    12,   200,   332,   201,
     0,    13,   200,   332,   201,     0,    14,   200,   332,   201,
     0,    15,   200,   332,   201,     0,    16,   200,   332,   201,
     0,    17,   200,   332,   201,     0,    18,   200,   332,   201,
     0,    19,   200,   332,   201,     0,    20,   200,   332,   201,
     0,    22,   200,   332,   201,     0,    23,   200,   332,   206,
   332,   201,     0,    24,   200,   332,   201,     0,    25,   200,
   332,   201,     0,    26,   200,   332,   201,     0,    27,   200,
   332,   201,     0,    28,   200,   332,   201,     0,    29,   200,
   332,   201,     0,    30,   200,   332,   206,   332,   201,     0,
    31,   200,   332,   206,   332,   201,     0,    32,   200,   332,
   206,   332,   201,     0,    21,   200,   332,   201,     0,    12,
   202,   332,   203,     0,    13,   202,   332,   203,     0,    14,
   202,   332,   203,     0,    15,   202,   332,   203,     0,    16,
   202,   332,   203,     0,    17,   202,   332,   203,     0,    18,
   202,   332,   203,     0,    19,   202,   332,   203,     0,    20,
   202,   332,   203,     0,    22,   202,   332,   203,     0,    23,
   202,   332,   206,   332,   203,     0,    24,   202,   332,   203,
     0,    25,   202,   332,   203,     0,    26,   202,   332,   203,
     0,    27,   202,   332,   203,     0,    28,   202,   332,   203,
     0,    29,   202,   332,   203,     0,    30,   202,   332,   206,
   332,   203,     0,    31,   202,   332,   206,   332,   203,     0,
    32,   202,   332,   206,   332,   203,     0,    21,   202,   332,
   203,     0,     3,     0,     9,     0,    10,     0,    11,     0,
     4,     0,     4,   202,   332,   203,     0,   205,     4,   202,
   203,     0,     4,   305,     0,     4,   202,   332,   203,   305,
     0,     4,   204,     4,     0,     4,   202,   332,   203,   204,
     4,     0,     4,   204,     4,   305,     0,     4,   202,   332,
   203,   204,     4,   305,     0,   335,     0,   190,   334,     0,
   189,   334,     0,   334,   190,   334,     0,   334,   189,   334,
     0,   207,   332,   206,   332,   206,   332,   206,   332,   206,
   332,   208,     0,   207,   332,   206,   332,   206,   332,   206,
   332,   208,     0,   207,   332,   206,   332,   206,   332,   208,
     0,   200,   332,   206,   332,   206,   332,   201,     0,     0,
   200,   337,   201,     0,     5,     0,   337,   206,     5,     0,
     0,   207,   339,   208,     0,   200,   339,   201,     0,   340,
     0,   339,   206,   340,     0,   332,     0,   341,     0,   207,
   342,   208,     0,   190,   207,   342,   208,     0,   332,     8,
   332,     0,   332,     8,   332,     8,   332,     0,    39,   207,
   332,   208,     0,   308,     0,   311,     0,   317,     0,     4,
   202,   203,     0,   190,     4,   202,   203,     0,     4,   202,
   207,   342,   208,   203,     0,   190,     4,   202,   207,   342,
   208,   203,     0,   332,     0,   341,     0,   342,   206,   332,
     0,   342,   206,   341,     0,   207,   332,   206,   332,   206,
   332,   206,   332,   208,     0,   207,   332,   206,   332,   206,
   332,   208,     0,     4,     0,     4,   204,   109,   204,     4,
     0,   207,   345,   208,     0,     4,   202,   332,   203,   204,
   110,     0,   343,     0,   345,   206,   343,     0,     5,     0,
    35,   200,   346,   206,   346,   201,     0,    36,   200,   346,
   201,     0,    34,   200,   346,   201,     0,    34,   200,   346,
   206,   342,   201,     0,    34,   200,     4,   204,     4,   201,
     0,    34,   200,     4,   202,   332,   203,   204,     4,   201,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   167,   169,   170,   171,   176,   178,   181,   183,   186,   194,
   208,   225,   227,   230,   232,   233,   236,   242,   247,   248,
   249,   252,   256,   259,   265,   270,   276,   284,   289,   293,
   299,   304,   308,   313,   317,   320,   325,   329,   333,   337,
   342,   346,   349,   353,   357,   361,   365,   369,   373,   376,
   380,   383,   387,   390,   397,   399,   402,   404,   405,   406,
   407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
   419,   424,   440,   446,   453,   461,   462,   463,   464,   465,
   466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
   476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
   486,   487,   488,   491,   494,   498,   504,   510,   513,   517,
   524,   531,   534,   538,   545,   552,   555,   559,   568,   575,
   578,   582,   591,   598,   601,   605,   614,   621,   624,   628,
   641,   648,   651,   655,   668,   675,   678,   682,   695,   702,
   705,   709,   723,   730,   733,   737,   751,   758,   761,   765,
   779,   786,   789,   793,   807,   814,   817,   821,   835,   842,
   845,   849,   863,   870,   873,   877,   901,   908,   911,   915,
   939,   946,   949,   953,   977,   984,   987,   991,  1010,  1017,
  1020,  1024,  1043,  1050,  1053,  1057,  1076,  1083,  1086,  1090,
  1108,  1115,  1118,  1122,  1140,  1147,  1150,  1154,  1172,  1179,
  1185,  1192,  1200,  1206,  1212,  1219,  1227,  1233,  1241,  1244,
  1248,  1256,  1258,  1259,  1260,  1261,  1264,  1266,  1269,  1301,
  1337,  1386,  1402,  1412,  1430,  1443,  1459,  1484,  1510,  1523,
  1539,  1552,  1568,  1587,  1609,  1618,  1632,  1652,  1668,  1687,
  1706,  1724,  1742,  1760,  1786,  1804,  1830,  1849,  1873,  1897,
  1923,  1940,  1958,  1977,  1996,  2035,  2060,  2082,  2098,  2117,
  2136,  2152,  2171,  2188,  2205,  2225,  2231,  2236,  2241,  2248,
  2250,  2251,  2254,  2259,  2263,  2279,  2295,  2311,  2331,  2345,
  2355,  2365,  2375,  2384,  2398,  2406,  2411,  2422,  2435,  2479,
  2493,  2508,  2517,  2527,  2531,  2535,  2539,  2550,  2566,  2580,
  2605,  2630,  2657,  2663,  2668,  2673,  2677,  2685,  2704,  2720,
  2736,  2741,  2757,  2762,  2778,  2783,  2801,  2824,  2847,  2870,
  2875,  2898,  2903,  2926,  2931,  2957,  2980,  3003,  3026,  3031,
  3054,  3060,  3083,  3089,  3114,  3118,  3123,  3150,  3174,  3182,
  3201,  3219,  3237,  3264,  3290,  3316,  3330,  3348,  3353,  3362,
  3364,  3365,  3366,  3367,  3370,  3372,  3373,  3374,  3375,  3376,
  3377,  3378,  3379,  3386,  3387,  3388,  3389,  3390,  3391,  3392,
  3393,  3394,  3395,  3396,  3397,  3398,  3399,  3400,  3401,  3402,
  3403,  3404,  3405,  3406,  3407,  3408,  3409,  3410,  3411,  3412,
  3413,  3414,  3415,  3416,  3417,  3419,  3420,  3421,  3422,  3423,
  3424,  3425,  3426,  3427,  3428,  3429,  3430,  3431,  3432,  3433,
  3434,  3435,  3436,  3437,  3438,  3439,  3444,  3449,  3450,  3451,
  3455,  3467,  3486,  3499,  3511,  3533,  3550,  3567,  3584,  3603,
  3608,  3612,  3616,  3620,  3626,  3631,  3635,  3639,  3645,  3649,
  3654,  3658,  3663,  3667,  3671,  3677,  3683,  3690,  3696,  3700,
  3704,  3715,  3722,  3733,  3753,  3763,  3773,  3785,  3801,  3819,
  3842,  3869,  3875,  3879,  3883,  3895,  3900,  3912,  3918,  3938,
  3943,  3956,  3962,  3968,  3973,  3981,  3995,  3999,  4018,  4034
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic",
"tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tInterpolationScheme",
"tTime","tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds",
"tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit",
"tReturn","tCall","tFunction","tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter","tLoopSTL",
"tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","All","SignedDouble","StlFormatItems","StlFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeoFormatItems",
"GeoFormatItem","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarQuadrangleValues",
"ScalarQuadrangle","@10","VectorQuadrangleValues","VectorQuadrangle","@11","TensorQuadrangleValues",
"TensorQuadrangle","@12","ScalarTetrahedronValues","ScalarTetrahedron","@13",
"VectorTetrahedronValues","VectorTetrahedron","@14","TensorTetrahedronValues",
"TensorTetrahedron","@15","ScalarHexahedronValues","ScalarHexahedron","@16",
"VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues","TensorHexahedron",
"@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues","VectorPrism",
"@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues","ScalarPyramid",
"@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues","TensorPyramid",
"@24","Text2DValues","Text2D","@25","Text3DValues","Text3D","@26","InterpolationMatrix",
"TimeValues","Time","NumericAffectation","NumericIncrement","Affectation","Shape",
"Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   209,   209,   209,   209,   210,   210,   211,   211,   212,   212,
   212,   213,   213,   214,   214,   214,   215,   215,   215,   215,
   215,   216,   216,   216,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   218,   218,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   220,   220,   221,   221,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   223,   223,   225,   224,   226,   226,   228,
   227,   229,   229,   231,   230,   232,   232,   234,   233,   235,
   235,   237,   236,   238,   238,   240,   239,   241,   241,   243,
   242,   244,   244,   246,   245,   247,   247,   249,   248,   250,
   250,   252,   251,   253,   253,   255,   254,   256,   256,   258,
   257,   259,   259,   261,   260,   262,   262,   264,   263,   265,
   265,   267,   266,   268,   268,   270,   269,   271,   271,   273,
   272,   274,   274,   276,   275,   277,   277,   279,   278,   280,
   280,   282,   281,   283,   283,   285,   284,   286,   286,   288,
   287,   289,   289,   291,   290,   292,   292,   294,   293,   295,
   295,   297,   296,   298,   298,   300,   299,   301,   302,   302,
   303,   304,   304,   304,   304,   304,   305,   305,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   308,   308,   308,   308,   309,
   309,   309,   310,   310,   310,   310,   310,   310,   311,   311,
   312,   312,   312,   313,   314,   314,   314,   314,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   316,   316,   316,
   316,   316,   316,   316,   316,   316,   316,   317,   317,   317,
   318,   317,   319,   317,   320,   317,   317,   317,   317,   321,
   317,   322,   317,   323,   317,   317,   317,   317,   324,   317,
   325,   317,   326,   317,   327,   327,   328,   328,   328,   329,
   329,   329,   329,   329,   329,   329,   329,   330,   330,   331,
   331,   331,   331,   331,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,   334,
   334,   334,   334,   334,   335,   335,   335,   335,   336,   336,
   337,   337,   338,   338,   338,   339,   339,   340,   340,   340,
   340,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   342,   342,   342,   342,   343,   343,   343,   343,   344,
   344,   345,   345,   346,   346,   346,   346,   346,   346,   346
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
     8,    12,     8,     8,     8,    12,    14,    14,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     4,     6,     3,     5,     3,     3,     4,     4,     3,     7,
     3,     7,     3,     2,     2,    15,     2,     6,     8,     8,
    10,     1,     2,     1,     3,     4,     1,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     1,     2,     9,     7,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     4,     4,     2,     5,     3,     6,     4,     7,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     1,     1,     3,
     4,     3,     5,     4,     1,     1,     1,     3,     4,     6,
     7,     1,     1,     3,     3,     9,     7,     1,     5,     3,
     6,     1,     3,     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   302,     0,   307,     0,   304,     0,     0,     0,     0,     0,
    56,    58,    57,    59,    60,    61,    62,    63,    64,    65,
    70,    69,    66,    67,    68,     0,     0,    17,    18,    20,
    19,    21,   439,   439,     0,   417,   421,   474,   212,   418,
   419,   420,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   213,   214,   215,   216,
     0,     0,     0,   217,   218,     0,     0,     0,     0,     0,
     0,     0,   355,     0,     0,   295,     0,   297,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   430,     0,     0,
     0,     0,     0,     0,   273,     0,     0,   273,   348,   349,
     0,     0,     0,     0,     0,     0,     0,   468,     0,     0,
     0,     0,     0,   294,     0,   303,     0,   474,   273,     0,
   273,     0,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   424,     0,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   421,
   358,   357,   359,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   223,   291,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   289,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   421,     0,     0,     0,   455,   456,   457,   448,     0,   449,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   432,   431,     0,     0,
     0,     0,   273,   273,     0,     0,     0,     0,     0,     0,
     0,   283,     0,     0,     0,     0,   293,     0,     0,     0,
     0,     0,     0,     0,   273,     0,     0,     0,   305,     0,
     0,   285,     0,   286,     6,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   441,     0,     0,     0,
     0,     0,   426,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   356,     0,     0,   462,   463,     0,     0,   212,
     0,     0,     0,     0,     0,   219,     0,   373,   372,   370,
   371,   366,   368,   367,   369,   361,   360,   362,   363,   364,
   365,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   421,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   434,   433,   272,
     0,   271,   270,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   279,   274,   347,     0,     0,   281,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   306,     0,   287,   288,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   440,     0,     0,    23,
     0,   422,   428,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   375,   396,   376,   397,   377,   398,   378,   399,   379,
   400,   380,   401,   381,   402,   382,   403,   383,   404,   395,
   416,   384,   405,     0,     0,   386,   407,   387,   408,   388,
   409,   389,   410,   390,   411,   391,   412,     0,     0,     0,
     0,     0,     0,     0,     0,   477,     0,     0,   476,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   229,     0,
     0,     0,     0,   423,     0,    71,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   458,     0,     0,     0,
     0,   450,   452,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   266,   268,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   442,
     0,   439,     0,   425,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    73,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   422,   222,   464,
   465,     0,     0,     0,     0,     0,   224,   225,   227,     0,
     0,   472,     0,   233,   374,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   454,   459,     0,   451,
     0,   240,     0,     0,     0,     0,     0,     0,   340,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   280,     0,     0,     0,     0,
   346,   282,     0,     0,     0,     0,     0,   443,     0,   469,
     0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
   351,   352,   353,   354,     0,     0,     0,     0,     0,     0,
     0,    22,     0,   427,   290,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   446,     0,   209,   385,   406,   392,   413,
   393,   414,   394,   415,     0,   479,   478,   475,     0,   212,
     0,     0,     0,     0,   220,     0,     0,     0,   470,    72,
     0,   237,   243,     0,   245,     0,     0,   241,     0,   242,
   264,     0,     0,   453,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   292,
     0,     0,     0,     0,   273,     0,   311,     0,   320,     0,
   329,     0,     0,     0,     0,     0,     0,   248,   249,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   439,
   429,    74,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   230,     0,     0,   231,
     0,   473,     0,     0,     0,   251,   261,   460,     0,     0,
   344,   254,   255,     0,     0,     0,     0,   343,   345,   263,
   238,   253,   262,   265,     0,     0,     0,   438,     0,   437,
     0,     0,   308,     0,     0,   317,     0,     0,   326,     0,
   275,   276,   277,   278,     0,     0,   443,     0,     0,     0,
     0,     0,   467,     0,   300,   299,     0,     0,     0,     0,
     0,    25,     0,    34,     0,    38,     0,    32,     0,     0,
    37,     0,    42,    40,     0,     0,     0,     0,     0,     0,
    49,     0,     0,     0,     0,     0,    54,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   447,     0,   210,   211,     0,
   221,   226,   228,     0,   234,     0,     0,   244,   246,   461,
     0,     0,     0,   342,   341,   235,   236,   273,     0,   269,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   445,
   444,     0,     0,     0,     0,     0,     0,     0,   443,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   480,     0,   471,     0,
     0,     0,     0,     0,     0,   436,     0,     0,     0,     0,
     0,     0,     0,     0,   335,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   466,   301,     0,     0,
    39,     0,     0,     0,     0,    29,     0,    35,     0,    41,
    30,    43,     0,    46,     0,    50,    51,     0,     0,    53,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   232,
     0,     0,     0,     0,   267,     0,     0,   313,     0,   339,
     0,     0,   336,   322,     0,     0,   331,     0,     0,     0,
     0,     0,     0,   250,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   106,   110,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   202,     0,   208,     0,     0,     0,     0,   435,
   309,     0,     0,     0,   312,   318,     0,     0,   321,   327,
     0,     0,   330,   239,   252,     0,     0,   256,     0,     0,
     0,     0,     0,    33,    36,    44,     0,    45,    52,    47,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   315,     0,     0,   324,     0,   333,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   206,     0,     0,   258,   257,     0,   310,     0,
     0,     0,   319,     0,     0,   328,     0,     0,     0,     0,
     0,     0,    28,    31,     0,     0,     0,   104,     0,   108,
     0,   112,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   200,     0,   296,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   314,     0,     0,   338,   323,     0,
   332,     0,     0,     0,     0,     0,     0,    48,    24,   105,
   107,   109,   111,   113,   115,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   201,   203,     0,   204,
   247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   118,   122,   126,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   316,   337,   325,   334,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   205,   207,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   260,    10,     0,     0,     0,   116,     0,   120,
     0,   124,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   259,     0,    26,
   117,   119,   121,   123,   125,   127,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   130,   134,   138,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   128,     0,   132,     0,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   129,   131,   133,   135,
   137,   139,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   142,   146,
   150,   154,   158,   162,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   140,     0,   144,     0,   148,
     0,   152,     0,   156,     0,   160,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   141,   143,   145,   147,
   149,   151,   153,   155,   157,   159,   161,   163,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   190,   194,   198,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   188,     0,   192,     0,   196,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   189,   191,   193,   195,   197,   199,
     0,     0,     0,   178,   182,   186,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   176,     0,   180,     0,   184,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   177,
   179,   181,   183,   185,   187,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   166,   170,   174,     0,     0,     0,     0,
     0,     0,     0,   164,     0,   168,     0,   172,     0,     0,
     0,     0,     0,     0,   165,   167,   169,   171,   173,   175,
     0,     0,     0
};

static const short yydefgoto[] = {  2371,
   215,     2,     9,     3,    19,    20,    21,    22,     4,    71,
    72,    73,   445,  1687,   664,  1592,  1689,   665,  1593,  1691,
   666,  1594,  1907,   667,  1853,  1909,   668,  1854,  1911,   669,
  1855,  2043,   670,  2005,  2045,   671,  2006,  2047,   672,  2007,
  2155,   673,  2125,  2157,   674,  2126,  2159,   675,  2127,  2161,
   676,  2128,  2163,   677,  2129,  2165,   678,  2130,  2353,   679,
  2347,  2355,   680,  2348,  2357,   681,  2349,  2302,   682,  2290,
  2304,   683,  2291,  2306,   684,  2292,  2251,   685,  2233,  2253,
   686,  2234,  2255,   687,  2235,  1714,   688,  1616,  1809,   689,
  1716,   690,  1045,   691,   140,   252,    74,   575,   345,   561,
   562,   346,    78,    79,    80,    81,    82,   347,  1234,  1562,
  1670,  1237,  1567,  1674,  1240,  1571,  1677,  1424,  1425,    84,
    85,  1005,   348,   143,   367,   178,   247,   438,  1123,  1043,
  1044,   350,   498,   200,   753,   913,   144
};

static const short yypact[] = {  2925,
    71,   374,   415,  3324,-32768,-32768,-32768,  -128,-32768,    95,
   100,   106,   119,   134,   157,    29,    89,   116,-32768,-32768,
-32768,-32768,  2459,   122,    12,   268,   169,   190,   191,   -41,
   253,   201,   208,   281,   216,   389,   404,   410,   430,   502,
   289,   385,   246,   280,   -53,   -53,   302,   428,     5,   454,
     6,   516,   521,   136,   504,   331,   346,   -17,     7,    23,
-32768,   350,-32768,   572,-32768,   581,   582,   556,    11,    17,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    36,  3162,-32768,-32768,-32768,
-32768,-32768,   398,   398,   605,-32768,   202,     9,-32768,-32768,
-32768,-32768,   150,   159,   178,   182,   330,   351,   364,   379,
   382,   391,   394,   395,   402,   403,   406,   407,   411,   417,
   418,   445,   461,   480,   490,   512,-32768,-32768,-32768,-32768,
  2756,  2756,  2756,-32768,-32768,  2756,  1032,    52,   698,  2756,
   711,   732,-32768,   714,   699,-32768,  2756,-32768,  2756,  2756,
  2756,   557,  2756,   560,  2756,  2756,   612,  2756,   569,   585,
   586,  -126,   612,   574,   575,   594,   600,   618,   621,   623,
   793,   -53,   -53,   -53,  2756,  2756,  -103,-32768,   -68,   -53,
   619,   620,   622,   626,-32768,   612,    28,-32768,-32768,-32768,
   612,   612,   819,  2756,  2756,   -71,  2756,   627,  2756,   625,
   718,  2756,  2756,-32768,   827,-32768,   660,-32768,-32768,   856,
-32768,   857,-32768,   866,    36,   679,   681,   682,   683,   686,
   687,   689,   690,   691,   692,   695,   696,   697,   700,   701,
   702,   703,   704,   705,   707,   709,   716,   729,   730,   737,
   747,   751,   755,   756,   757,   893,   693,   752,   754,  2756,
   954,-32768,   -53,-32768,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,    84,    64,    64,   241,
   760,   760,   760,  2562,   969,  2494, 10760,    14,   773,   971,
   777,   753,-32768,-32768,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,-32768,
  -121,  3764, 11460, 11483, 11506,  2756, 11529,  2756, 11552, 11575,
   310,   775,  2383,  2494,-32768,-32768,-32768,  1756,   976,-32768,
 11598,  2756,  2756,  2756,  2756,  2756,   977,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,   784,   -99,-32768,-32768,  3786,  3808,
   -53,   -53,   414,   414,   -33,  2756,  2756,  2756,  2756,  2495,
   188,-32768,  2756,  2817,   979,   980,-32768, 11621, 11644,   881,
  2756, 11667,   882,  3830,-32768,   783,  1844, 11690,-32768,  2756,
  3009,-32768,  3076,-32768,-32768,    36,   987,   988,   989,   997,
  1007,  1008,  1011,  1014,  1015,  1016,  1017,  1020,  1021,  1022,
  1023,  1024,  1025,  1026,  1027,  1028,  1029,  1034,  1060,   855,
  1066,  1067,  1068,  1069,  1072,  1071,-32768,  -105,  1074,  1031,
  1075, 10785,   111,   -22,  3146, 11713, 10810, 11736, 10835, 11759,
 10860, 11782, 10885, 11805, 10910, 11828, 10935, 11851, 10960, 11874,
 10985, 11897, 11010, 11920, 11035, 11943, 11060,  3852,  3874, 11966,
 11085, 11989, 11110, 12012, 11135, 12035, 11160, 12058, 11185, 12081,
 11210,  3896,  3918,  3940,  3962,  3984,  4006,   301,   -57,   871,
   883,  2756,-32768,   612,  2809,  1756,-32768,   456,   170,    64,
  2756,  1076,  1081,    10,   884,-32768,  1884,   467,   496,   384,
   384,   230,   230,   230,   230,   326,   326,   760,   760,   760,
   760,  1080,  2494,  2756,  1082,  1083,  1084, 12104,  1085, 12127,
  1088,  1089,  1237,  2756,   324,  2494,   459,  2756,  2756,  1090,
  3150, 12150, 12173, 12196,  3284,  2756,  3308,  3332, 12219, 12242,
 12265, 12288, 12311,   894,   -53,  2756,  2756,-32768,-32768,-32768,
   880,  3358,-32768,   891,  2756,  4028,  4050,  4072, 11235,   -62,
   -49,   -11,   142,-32768,-32768,-32768,  2756, 11260,-32768,   896,
   899,  1093,  1094,   907, 12334,  1102,   906,  2756,  3098,  2756,
  2756,-32768, 12357,-32768,-32768,   940,   908,   909,   910,   911,
   913,   914,   915,   916,   917,   918,   922,   923,   924,   925,
   927,   928,   929,   931,   932,   933,   960,   961,   963,   964,
   965,   966,   967,   968,   970,   972,-32768,  1107,   912,-32768,
   973,    24,-32768,-32768,   975,   981,   983,   984,   985,   986,
   993,  1003,  1004,  1005,  1010,  1012,  1013,  1018,  1019,  1030,
  1033,  1036,  1038,  1042,  1043,  1044,  1045,  1070,  1073,  1101,
  1000,  1002,  1171,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2756,  2756,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  1207,-32768,  2494,    64,-32768, 11285,
  1208,  2494,  1099,    60,  2756,  1209,  1210,   782,-32768,  1213,
  1103,     7,  1211,-32768,  2756,-32768,   196,  4094,   -53,   612,
   612,  1216,   612,  1217,   612,   612,-32768,  2494,  3356,  1268,
   462,-32768,  1953,   818,  1096,  1218,  1221,  1227,  1267,  1269,
   269,  1297,  1299,  1300,  1301,  1304,  1305,  1308,  1271,    -2,
  4116,  4138,-32768,-32768,  3380,   -53,   -53,   -53,  1310,  2494,
  2494,  2494,  2494,  1009,  1311,  2756,  2756,   612,   612,  2756,
  1312,   612,  1317,  4160,-32768,  2182,   303,  1316,  1142,  1324,
  2756,  2756,   -53,  1325,  1326,  1140,  1329,  1330,   612,   612,
  1331,   -53,  1333,  1335,   612,   612,  1337,  1339,  1340,  1341,
  1342,   612,   409,   612,  1343,  1344,  1345,  1348,  1350,-32768,
  1378,   398,  1352,-32768,  1379,  3174,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,   612,  2756,-32768, 12380, 11310, 12403, 11335, 12426,
 11360, 12449, 11385, 11410,  1147,   211,  1153,   -81,-32768,  1756,
-32768,    25,   218,  1182,  1381,  1220,-32768,-32768,-32768,     7,
  2756,-32768,   463,-32768,  1356,  1383,  2756,    18,    55,    61,
   612,  1384,   612,  1385,  1387,   488,-32768,-32768,  2494,-32768,
  2756,-32768,  2756,   612,   612,   612,  1197,  1198,-32768,   148,
   612,   612,   612,   612,   612,   612,   612,   435,  2756,  2756,
  2756,  1214,  -124,  -114,  -111,-32768,   491,   492,   495,   507,
-32768,-32768,  4182,  4204,  1408,  1409, 12472,   144,  1309,-32768,
  2756,  2756,  2756,-32768,  1215,  1248,  1212,  4226,  4248,  -118,
  1219,  1222,  1223,  1229,  1225,  1232,  1228,  1230,    -8,  1233,
  1234,  1240,  1239,  1241,  1242,  1243,  1244,  1245,  1251,-32768,
-32768,-32768,-32768,-32768,  1247,  1249,  1253,  1254,  1255,  1261,
  1258,-32768,  1259,   111,-32768,  1414,  4270,  4292,  4314,  4336,
  4358,  4380,  4402,  4424,  4446,  4468,  4490,  4512,  4534,  4556,
  4578,  4600,  4622,  4644,  4666,  4688,  4710,  4732,  4754,  4776,
  4798,  4820,   515,-32768,   518,  1356,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1224,-32768,-32768,-32768,   612,    64,
  2756,  1418,  1434,    10,-32768,  1437, 11435,     7,-32768,-32768,
  4842,-32768,-32768,   -53,-32768,   -53,  1440,-32768,  1448,-32768,
-32768,  1263,   519,  1356,  4864,  1461,  1463,  1464,  2756,  2756,
  2756,  2756,  1468,  1471,  1472,  1473,  1474,  1475,  1477,-32768,
  2703,  3404, 12495,  2487,   414,   -53,  1478,   -53,  1485,   -53,
  1495,  1496,  1497,  1499,  1501,  2756,  2756,-32768,-32768,  1523,
   612,   612,  1400,   612,  2896,   685, 12518,  2756,    36,  1529,
  2756,   612,  1528,  1537,  1544,  1360,  1546,   409,  1547,  1558,
  2756,  1565,  1569,  1567,  1568,  1572,   409,  2756,  2756,  2756,
   612,  1571,  1575,   409,  2756,  1578,  1579,  1577,  2756,   398,
-32768,-32768,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,   612,  1380,
  2756,  1580,  1581,  1582,  1583,  1307,-32768,  1584,  1588,-32768,
  1386,-32768,  2756,    97,   128,-32768,-32768,-32768,  1393,  2756,
-32768,-32768,-32768,  4886,  4908,  1377,  1466,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1498,  1593,  1394,-32768,  2756,-32768,
  1376,   137,-32768,  1395,   175,-32768,  1396,   186,-32768,  1397,
-32768,-32768,-32768,-32768,  4930,  4952,   144,   238,   522,  1398,
  1502,  2756,-32768,  2756,-32768,-32768,  4974,    36,  1405,  4996,
  1402,-32768,  1403,-32768,  1404,-32768,  1410,-32768,  1406, 12541,
-32768,  1407,-32768,-32768,  1413,  1438, 12564,  5018, 12587,  1454,
-32768,  1462,  1465,  5040,  1458,  1469,-32768,  5062,  1467,  5084,
  5106,  5128,  5150,  5172,  5194,  5216,  5238,  5260,  5282,  5304,
  5326,  5348,  5370,  5392,  5414,  5436,  5458,  5480,  5502,  5524,
  5546,  5568,  5590,  5612,  5634,-32768,   612,  1356,-32768,  1470,
-32768,-32768,-32768,     7,-32768,  1559,  5656,-32768,-32768,-32768,
  5678,  2756,  2756,-32768,-32768,-32768,-32768,   414,  2975,-32768,
  2414,    93,  2414,    93,  2414,    93,  2756,  2756,  1564,-32768,
-32768,   612,  2756,  3428,  3452,   612,    36,  1669,   144,   409,
  1679,  2756,  1686,   409,  1687,  1691,  1689,  1690,  1692,  2756,
  1693,   612,  1694,  1695,  2756,  1699,  1697,  2756,  1702,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,   523,-32768,  1698,-32768,  2756,
  1704, 12610, 12633,  1504,  2756,-32768,  2414,  2414,  2756,  3476,
   197,  1710,  1503,   -44,-32768,  3500,   199,   -24,  3524,   220,
   -10,  3548,  3572,  1531,  1533,  1644,-32768,-32768,  1532,  1574,
-32768,  1538,  1539,  1540,  5700,-32768,  1548,-32768,  1549,-32768,
-32768,-32768, 12656,-32768,  1541,-32768,-32768, 12679,  1550,-32768,
 12702,  1542, 12725, 12748, 12771,  5722,  5744,  5766,  5788,  5810,
  5832,  5854,  5876,  5898,  5920,  5942,  5964,  5986,  6008,  6030,
  6052,  6074,  6096,  6118,  6140,  6162, 12794,  6184,  1746,-32768,
  6206,  1551,   612,   612,-32768,  3596,  2610,  1748,  2756,-32768,
   612,  1750,-32768,  1752,  2756,  1753,  1754,  2756,  1755,  1757,
  1759,   612,   612,-32768,  1763,    36,   409,   409,   409,   409,
  1764,  1765,  1766,   409,  1774,  1775,  1776,  1778,-32768,-32768,
-32768,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,-32768,  2756,-32768,  2756,  1779,   612,   612,-32768,
-32768,  1555,  3620,  1585,-32768,-32768,  1589,  3644,-32768,-32768,
  1590,  3668,-32768,-32768,-32768,  1586,  1587,-32768,    36,  1592,
  1594,  1598,  1618,-32768,-32768,-32768,  1614,-32768,-32768,-32768,
  1615,  1621,  1631,  1632,  6228,  6250,  6272,  6294,  6316,  6338,
  6360,  6382,  6404,  6426,  6448,  6470,  6492,  6514,  6536,  6558,
  6580,  6602,  6624,  6646,  6668,  1633, 12817,  3692,  1635,  1780,
  1782,    93,  1783,   612,    93,  1784,    93,  1836,   612,  1680,
    36,   409,   409,  1838,  1839,   409,  1841,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,    64,-32768,  1842,  1845,-32768,-32768,     1,-32768,  1640,
   528,    74,-32768,  1642,    76,-32768,  1647,  1643,  1648,  1688,
  1651,  1673,-32768,-32768,  1681,  1682,   531,  1356,   534,  1356,
   535,  1356,  6690,  6712,  6734,  6756,  6778,  6800,  6822,  6844,
  6866,  6888,  6910,  6932,  6954,  6976,  6998,  7020,  7042,  7064,
  7086,  7108,  7130,   538,-32768,  1674,-32768,  1672,  1878,    93,
   612,  1879,  1880,    93,  1881,    93,  1785,  2756,    36,   409,
   612,  1882,  1883,  2756,  1887,  2756,  1888,  2756,  1889,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
    64,  1890,    64,  1891,-32768,    83,  1696,-32768,-32768,   290,
-32768,   291,  1700,  7152,    36,  1703,  1706,-32768,-32768,  1356,
-32768,  1356,-32768,  1356,-32768, 12840, 12863, 12886,  7174,  7196,
  7218,  7240,  7262,  7284,  7306,  7328,  7350,  7372,  7394,  7416,
  7438,  7460,  7482,  7504,  7526,  7548,-32768,-32768,   542,-32768,
-32768,  1892,  1893,  1894,  1895,  2756,  2756,    36,   409,   612,
-32768,-32768,-32768,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,    64,  1896,-32768,-32768,-32768,-32768,  7570,  3716,  1730,
  1708,  1734,  1701,  1709,  1743,  7592,  7614,  7636,  7658,  7680,
  7702,  7724,  7746,  7768,  7790,  7812,  7834,  7856,  7878,  7900,
  7922,  7944,  7966,-32768,-32768,  2756,  1904,  1777,   612,   409,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  3740,-32768,-32768,  1747,  1751,   543,  1356,   546,  1356,
   547,  1356,  7988,  8010,  8032,  8054,  8076,  8098,  8120,  8142,
  8164,  8186,  8208,  8230,  8252,  8274,  8296,  8318,  8340,  8362,
  1948,   612,  1951,  2756,  1952,  2756,  1954,  2756,  1956,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,-32768,  1781,-32768,
  1356,-32768,  1356,-32768,  1356,-32768, 12909, 12932, 12955,  8384,
  8406,  8428,  8450,  8472,  8494,  8516,  8538,  8560,  8582,  8604,
  8626,  8648,  8670,  8692,   612,-32768,-32768,-32768,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  1786,  1758,  1787,  1788,  8714,  8736,  8758,
  8780,  8802,  8824,  8846,  8868,  8890,  8912,  8934,  8956,  8978,
  9000,  9022,   612,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  1790,   550,  1356,   555,  1356,   558,  1356,  9044,  9066,
  9088,  9110,  9132,  9154,  9176,  9198,  9220,  9242,  9264,  9286,
  9308,  9330,  9352,   409,  2756,  1957,  2756,  1975,  2756,  1976,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  1789,  1356,-32768,  1356,-32768,
  1356,-32768, 12978, 13001, 13024, 13047, 13070, 13093,  9374,  9396,
  9418,  9440,  9462,  9484,  9506,  9528,  9550,  1978,-32768,-32768,
-32768,-32768,-32768,-32768,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,-32768,  1791,  1792,  1793,  1812,  1813,  1815,
  9572,  9594,  9616,  9638,  9660,  9682,  9704,  9726,  9748,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,   559,  1356,   562,  1356,   563,  1356,
   566,  1356,   567,  1356,   583,  1356,  9770,  9792,  9814,  9836,
  9858,  9880,  9902,  9924,  9946,  2756,  1979,  2756,  1980,  2756,
  1982,  2756,  1983,  2756,  1985,  2756,  1987,  2756,  2756,  2756,
  2756,  2756,  2756,  2756,  2756,  2756,  1356,-32768,  1356,-32768,
  1356,-32768,  1356,-32768,  1356,-32768,  1356,-32768,  9968,  9990,
 10012, 10034, 10056, 10078, 13116, 13139, 13162,  2756,  2756,  2756,
  2756,  2756,  2756,-32768,-32768,-32768, 10100, 10122, 10144, 10166,
 10188, 10210,  1821,  1831,  1832,  2756,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  2756, 10232, 10254, 10276, 10298, 10320, 10342,
   584,  1356,   587,  1356,   597,  1356,  2756,  2756,  2756,  2756,
  2756,  2756,  2756,  1991,  2756,  2034,  2756,  2035, 10364, 10386,
 10408, 13185, 13208, 13231,  1356,-32768,  1356,-32768,  1356,-32768,
  2756,  2756,  2756,-32768,-32768,-32768, 10430, 10452, 10474,  1840,
  1861,  1871,  2756,  2756,  2756,  2756,  2756,  2756, 10496, 10518,
 10540,   598,  1356,   602,  1356,   603,  1356,  2756,  2756,  2756,
  2756,  2039,  2756,  2073,  2756,  2074, 10562, 10584, 10606,  1356,
-32768,  1356,-32768,  1356,-32768,  2756,  2756,  2756, 10628, 10650,
 10672,  2756,  2756,  2756, 10694, 10716, 10738,  2756,  2756,  2756,
 13254, 13277, 13300,-32768,-32768,-32768,  1874,  1875,  1877,  2756,
  2756,  2756,   607,  1356,   608,  1356,   614,  1356,  2756,  2079,
  2756,  2080,  2756,  2081,  1356,-32768,  1356,-32768,  1356,-32768,
  1959,  2088,-32768
};

static const short yypgoto[] = {-32768,
  -175,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1456,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -302,   -18,-32768,  2087,    -3,  -372,
  -173,    -1,-32768,-32768,-32768,-32768,-32768,  2097,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1313, -1387,-32768,
-32768, -1084,   -23,-32768,  1534,-32768,   -90,-32768, -1217, -1102,
   832,  -213,  -337,  -744,  1039,-32768,   -20
};


#define	YYLAST		13501


static const short yytable[] = {   142,
    76,   564,    77,   248,   141,   501,   537,   912,   184,   187,
   198,   380,   253,   751,   384,   208,   152,   146,  1248,  1249,
   500,   208,  1422,  1072,   152,   196,   201,  1423,   208,  1349,
  1428,    99,  1431,   382,   390,   401,  1503,   403,   213,   406,
  1503,    86,  1422,  1503,   124,   125,   126,  1423,   210,   212,
   124,   125,   126,  1267,   154,   308,  1422,   124,   125,   126,
  1073,  1423,  1276,   903,   371,   372,  1075,  1422,   208,  1283,
   371,   372,  1423,   355,   371,   372,     5,   371,   372,   522,
   356,  1106,  1133,  1107,   523,   371,   372,   488,   208,   371,
   372,  1108,   497,  1109,  1110,   627,  1111,   124,   125,   126,
   628,    87,  1328,   373,  1074,    88,   555,   301,   302,   303,
  1076,    89,   304,   307,   134,   135,   312,   124,   125,   126,
   371,   372,   853,   332,    90,   333,   334,   335,   391,   337,
   497,   339,   340,  1329,   351,   173,   174,   149,   374,    91,
  1422,  1442,  1422,   736,   800,  1423,   175,  1423,   737,  1422,
   153,   369,   370,   176,  1423,   371,   372,   801,   153,  1422,
   309,   310,    92,  1502,  1423,  1066,   371,   372,   904,   905,
   388,   389,   565,   392,   191,   394,    99,   192,   397,   398,
   371,   372,   197,  1506,   634,   757,   371,   372,   127,   128,
   129,   130,  1142,   576,   577,   802,   745,  1509,   771,   127,
   128,   129,   130,   949,  1091,  1092,   371,   372,  1719,   134,
   135,   185,   188,   199,  1406,   254,   752,   209,   147,   134,
   135,   589,   202,   211,  1060,   214,   442,   853,    93,   383,
   596,   446,   447,   448,   449,   450,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
   475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
   485,   486,   487,   148,   939,  1443,   489,   490,   491,  1447,
  1503,  1723,   496,  1725,  1503,   371,   372,  1503,    94,   502,
  1812,   507,   508,   509,   510,   511,   512,   513,   514,   515,
   516,   517,   518,   519,   520,   521,   134,   135,  1668,   497,
   973,  1672,   528,  1675,   530,    95,   371,   372,   154,   302,
   496,   145,   497,  1202,   940,   371,   372,   157,   541,   542,
   543,   544,   545,   166,   547,   548,   549,   550,   551,   552,
   553,   156,  1341,  1121,   127,   128,   129,   130,   803,   255,
  1122,   256,   566,   567,   568,   569,  1422,  1422,   257,   578,
   258,  1423,  1423,   371,   372,   134,   135,   585,   149,   560,
   560,   563,   563,   744,   371,   372,   593,   259,  1503,   260,
  1343,   261,  1503,   262,  1503,   371,   372,   371,   372,   150,
   151,  1345,   127,   128,   129,   130,   916,   134,   135,   896,
   155,   742,  1499,   250,  1505,   251,  1766,   156,   371,   372,
  1770,  1057,  1772,   134,   135,   158,   742,    10,   324,   325,
   326,   327,   328,   167,   633,  1508,   168,   169,   329,   170,
   926,   159,  1580,  1581,  1582,  1583,   134,   135,  1350,  1587,
  1100,  1101,   492,  1189,   251,   171,   160,   315,   316,   317,
   318,   319,   161,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   957,   958,   959,   960,   181,   329,   740,   182,
   183,   302,   162,    44,    45,    46,    47,   748,    49,   747,
   746,   315,   316,   317,   318,   319,   172,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   186,  1814,  1815,   496,
   758,   329,   734,   974,   735,   134,   135,   193,   180,   740,
   769,   533,   496,   251,   773,   774,   326,   327,   328,   134,
   135,   189,   781,   497,   329,   770,   190,   251,   901,   263,
   194,   264,   791,   792,  1000,  1001,  1002,  1003,  1004,     6,
     7,   795,     8,   163,   164,   195,   165,  1681,  1682,   203,
   265,  1685,   266,   804,   497,    11,    12,    13,    14,    15,
    16,    17,    18,   267,   814,   268,   816,   817,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   204,   269,  1408,
   270,   271,   329,   272,   205,   206,   497,   497,   497,   497,
   273,  1083,   274,   275,   277,   276,   278,   246,   207,  1059,
  1061,   279,   281,   280,   282,   283,   285,   284,   286,   249,
   287,   855,   288,   854,    96,   341,   289,   291,   290,   292,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   293,  1776,   294,   317,   318,   319,
   342,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   295,   742,   296,   743,   742,   329,   772,   742,  1068,   930,
  1069,    44,    45,    46,    47,    48,    49,   318,   319,   297,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   298,
   886,   887,  1254,   742,   329,  1082,   742,   742,  1112,  1113,
   742,   311,  1114,   331,   888,   889,   890,   891,   892,   893,
   894,   299,   742,   496,  1115,   497,   313,   897,   900,   330,
  1189,   906,  1190,  1191,   742,  1192,  1209,  1189,  1189,  1351,
  1489,   915,  1231,  1721,  1851,  1722,  1734,   314,  1735,  1736,
  1738,  1737,  1739,  1761,   496,  1762,   740,  1842,  1934,  1843,
  1935,  1936,  1938,  1937,  1939,  2065,   336,  2066,   506,   338,
  2067,  1013,  2068,  2069,  2176,  2070,  2177,  2178,  2180,  2179,
  2181,  2182,  2184,  2183,  2185,   352,   496,   496,   496,   496,
   358,   359,   963,   964,   353,   354,   967,   909,  2186,  2263,
  2187,  2264,  2265,   360,  2266,  1906,   365,   978,   979,   361,
   131,   343,  2267,  2311,  2268,  2312,   133,  2313,  2315,  2314,
  2316,   136,  2359,  2361,  2360,  2362,   139,   362,   344,  2363,
   363,  2364,   364,   932,   387,   376,   377,   379,   378,   396,
   393,   395,   399,  1017,  1018,  1019,  1020,  1021,  1022,  1023,
  1024,  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1032,  1033,
  1034,  1035,  1036,  1037,  1038,  1039,  1040,  1041,  1042,   400,
  1046,   402,   404,   315,   316,   317,   318,   319,   405,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   407,   854,
   408,   409,   410,   329,  1062,   411,   412,  1067,   413,   414,
   415,   416,  1255,  1071,   417,   418,   419,   437,   439,   420,
   421,   422,   423,   424,   425,   496,   426,  1084,   427,  1085,
   315,   316,   317,   318,   319,   428,   320,   321,   322,   323,
   324,   325,   326,   327,   328,  1102,  1103,  1104,   429,   430,
   329,   315,   316,   317,   318,   319,   431,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   432,  1125,  1126,  1127,
   433,   329,   440,  1258,   434,   435,   436,   443,   329,   441,
   315,   316,   317,   318,   319,  1414,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   494,   503,   504,   505,  2086,
   329,   534,   539,   546,   554,   580,   581,   584,   349,   590,
   587,   597,   598,   599,   357,  1161,   315,   316,   317,   318,
   319,   600,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   601,   602,   620,   961,   603,   329,   381,   604,   605,
   606,   607,   385,   386,   608,   609,   610,   611,   612,   613,
   614,   615,   616,   617,    96,   300,   630,  1196,   618,  1195,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   619,  1214,  1215,  1216,  1217,  1289,
   621,   622,   623,   624,   625,   626,   738,  1225,   629,   631,
  1226,   749,  1357,   739,   750,   756,   754,   793,   759,   760,
   761,   763,  1245,  1246,   765,   766,   775,   789,   794,   808,
   809,   560,   806,   563,  1257,   807,   810,  1260,   812,   813,
   819,   850,   851,   820,   821,   822,   823,  1270,   824,   825,
   826,   827,   828,   829,  1277,  1278,  1279,   830,   831,   832,
   833,  1284,   834,   835,   836,  1288,   837,   838,   839,  1290,
  1291,  1292,  1293,  1294,  1295,  1296,  1297,  1298,  1299,  1300,
  1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,
  1311,  1312,  1313,  1314,  1315,   840,   841,  1318,   842,   843,
   844,   845,   846,   847,   857,   848,   885,   849,   852,  1327,
   858,  1440,   859,   860,   861,   862,  1331,   315,   316,   317,
   318,   319,   863,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   864,   865,   866,  1339,   883,   329,   884,   867,
   895,   868,   869,   899,   907,   908,   914,   870,   871,   910,
   131,   132,   921,   923,   934,  1065,   133,   935,  1354,   872,
  1355,   136,   873,   936,   305,   874,   139,   875,   306,    96,
   300,   876,   877,   878,   879,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   880,
    96,   300,   881,   937,   948,   938,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   882,   902,   933,   941,   911,   942,   943,   944,  1412,  1413,
   945,   946,  1323,   976,   947,   956,   962,  1420,   968,  1426,
   970,  1429,   975,  1432,  1433,   741,   977,   981,   982,  1436,
   983,   984,   985,   988,   560,   990,   563,   991,  1445,   994,
  1579,   995,   996,   997,   998,  1007,  1453,  1056,  1008,  1009,
  1010,  1458,  1011,  1058,  1461,  1014,  1463,  1464,  1465,  1466,
  1467,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,  1476,
  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,
  1487,  1488,  1334,  1012,  1015,  1063,  1491,  1064,  1070,  1078,
  1080,  1496,  1081,   301,   302,  1497,  1089,  1090,   315,   316,
   317,   318,   319,  1631,   320,   321,   322,   323,   324,   325,
   326,   327,   328,  1118,  1119,  1129,  1124,  1130,   329,  1162,
  1105,  1128,  1135,  1197,  1134,   131,   132,  1193,  1136,  1137,
  1138,   133,  1139,  1140,  1144,  1141,   136,  1198,  1143,   767,
  1145,   139,  1200,   768,  1146,  1206,  1147,  1148,  1149,  1150,
  1151,  1152,  1153,  1207,  1154,  1680,   131,   132,  1155,  1156,
  1157,  1158,   133,  1159,  1160,  1208,  1211,   136,  1212,  1213,
   928,  1335,   139,  1218,   929,  1563,  1219,  1220,  1221,  1222,
  1223,  1568,  1224,  1233,  1572,   315,   316,   317,   318,   319,
  1236,   320,   321,   322,   323,   324,   325,   326,   327,   328,
  1239,  1241,  1242,  1336,  1243,   329,  1244,  1250,  1595,  1596,
  1597,  1598,  1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,
  1607,  1608,  1609,  1610,  1611,  1612,  1613,  1614,  1615,  1247,
  1617,  1259,  1618,  1262,   315,   316,   317,   318,   319,  1263,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1264,
  1265,  1266,  1268,  1775,   329,   315,   316,   317,   318,   319,
  1269,   320,   321,   322,   323,   324,   325,   326,   327,   328,
  1271,  1272,  1273,  1274,  1275,   329,  1281,  1282,   177,   179,
  1285,  1286,  1287,  1340,  1320,  1319,  1317,  1321,  1322,  1326,
  1324,   919,   920,  1325,   922,  1330,   924,   925,  1337,  1818,
  1338,  1342,  1344,  1346,  1352,  1358,  1353,  1360,  1361,  1362,
  1363,  1364,  1366,  1367,  1688,  1690,  1692,  1693,  1694,  1695,
  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,  1704,  1705,
  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,  1368,   965,
   966,  1715,  1850,   969,   315,   316,   317,   318,   319,  1514,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1372,
   986,   987,  1373,  1376,   329,  1374,   992,   993,  1409,  1377,
  1407,  1434,  1379,   999,  1441,  1006,   315,   316,   317,   318,
   319,  1444,   320,   321,   322,   323,   324,   325,   326,   327,
   328,  1446,  1448,  1449,  1450,  1451,   329,  1452,  1454,  1456,
  1457,  1459,  1460,  1490,  1774,   366,  1462,   368,  1492,  1501,
  1780,  1495,  1782,   375,  1784,  1500,  1786,  1787,  1788,  1789,
  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,
  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1512,  1513,  1515,
  1807,  1516,  1810,  1517,  1518,  1519,  1524,  1528,  1521,  1522,
  1526,  1555,  1077,  1561,  1079,  1565,  1557,  1566,  1569,  1570,
  1573,  1622,  1574,   538,  1575,  1086,  1087,  1088,  1578,  1584,
  1585,  1586,  1093,  1094,  1095,  1096,  1097,  1098,  1099,  1588,
  1589,  1590,  1591,  1619,  1679,  1666,   444,  1667,  1669,  1673,
  1624,  1629,  1848,  1849,  1630,  1625,  1627,  1632,  1634,  1633,
  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,
  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1635,  1636,
  1637,  1874,   315,   316,   317,   318,   319,  1638,   320,   321,
   322,   323,   324,   325,   326,   327,   328,  1639,  1640,  1662,
  1665,  1676,   329,  1683,  1684,  1686,  1720,  1717,  1724,  1718,
  1727,   591,  1902,  1726,  1728,  1729,  1730,  1908,  1910,  1912,
  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,
  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1731,  1764,
  1763,  1732,  1733,  1765,  1768,  1769,  1771,  1778,  1779,  1773,
  1194,   755,  1781,  1783,  1785,  1808,  1811,  1844,  1845,  1846,
  1847,  1875,  1878,  1813,   558,   559,  1816,  1881,  1819,  1903,
  1961,  1820,  1963,  1879,  1965,  1882,  1967,  1968,  1969,  1970,
  1971,  1972,  1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,
  1981,  1982,  1983,  1984,   315,   316,   317,   318,   319,  1880,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1883,
  1904,  1933,  1932,  1958,   329,  1251,  1960,  1962,  2372,  1964,
   931,  1966,  2088,  1261,  2024,  2008,  2009,  2010,  2011,  2012,
  2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,
  2090,  2092,  1280,  2124,  2198,  2200,  1985,  2202,  2204,  2108,
  2206,  2023,  2208,  2025,  2026,  2064,  2276,  2140,  2141,  2142,
  2044,  2046,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2143,  2144,
  1316,  2145,   315,   316,   317,   318,   319,  2242,   320,   321,
   322,   323,   324,   325,   326,   327,   328,  2243,  2244,  2278,
  2280,  2087,   329,  2089,  2321,  2091,  2296,  2093,  2094,  2095,
  2096,  2097,  2098,  2099,  2100,  2101,  2102,  2103,  2104,  2105,
  2106,  2107,   315,   316,   317,   318,   319,  2297,   320,   321,
   322,   323,   324,   325,   326,   327,   328,  2298,  2323,  2325,
  2350,  2351,   329,  2352,  2366,  2368,  2370,  2373,   790,   856,
    75,  2131,  2132,  2133,  2134,  2135,  2136,  2137,  2138,  2139,
    83,     0,  1199,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  2156,  2158,  2160,  2162,
  2164,  2166,  2167,  2168,  2169,  2170,  2171,  2172,  2173,  2174,
  2175,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,  2197,     0,  2199,     0,  2201,     0,  2203,     0,
  2205,     0,  2207,     0,  2209,  2210,  2211,  2212,  2213,  2214,
  2215,  2216,  2217,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1435,     0,     0,     0,  1439,     0,   972,
     0,     0,     0,     0,  2227,  2228,  2229,  2230,  2231,  2232,
     0,     0,     0,  1455,     0,     0,     0,     0,     0,     0,
     0,     0,  2245,  2246,  2247,  2248,  2249,  2250,  2252,  2254,
  2256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2269,  2270,  2271,  2272,  2273,  2274,  2275,
     0,  2277,     0,  2279,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  2287,  2288,  2289,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  2299,
  2300,  2301,  2303,  2305,  2307,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  2317,  2318,  2319,  2320,     0,  2322,
     0,  2324,   918,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  2329,  2330,  2331,     0,     0,     0,  2335,  2336,
  2337,     0,     0,     0,  2341,  2342,  2343,     0,     0,     0,
     0,     0,     0,     0,  1558,  1559,  2354,  2356,  2358,   953,
   954,   955,  1564,     0,     0,  2365,     0,  2367,     0,  2369,
     0,     0,     0,  1576,  1577,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   980,     0,     0,     0,
   315,   316,   317,   318,   319,   989,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,     0,    96,   535,     0,     0,  1620,
  1621,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,     0,    96,   300,     0,     0,
     0,     0,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1671,     0,     0,     0,     0,
  1678,    96,    97,    98,     0,    99,     0,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,     0,   124,   125,   126,     0,    96,   341,     0,     0,
     0,     0,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,     0,     0,     0,     0,
     0,     0,   342,   570,    28,    29,   571,   572,    32,   573,
    34,     0,    35,     0,    37,    38,    39,     0,    41,    42,
     0,     0,  1767,    44,    45,    46,    47,    48,    49,     0,
     0,     0,  1777,     0,     0,    54,     0,     0,     0,     0,
     0,   131,   132,     0,     0,     0,     0,   133,     0,     0,
     0,     0,   136,     0,     0,     0,     0,   139,     0,   536,
     0,     0,     0,     0,     0,     0,    56,    57,    58,     0,
     0,     0,  1417,  1418,     0,     0,     0,  1204,   133,  1205,
     0,     0,     0,  1419,    68,     0,     0,     0,   139,     0,
   176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   127,   128,   129,   130,     0,     0,  1232,
     0,  1235,     0,  1238,     0,     0,     0,   131,   132,     0,
     0,  1852,     0,   133,   134,   135,     0,     0,   136,     0,
   137,     0,   138,   139,     0,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,   131,   495,     0,   329,     0,     0,   133,     0,
     0,     0,  1229,   136,  1230,     0,     0,     0,   139,     0,
     0,     0,   574,     0,     0,    96,   300,   208,     0,     0,
  1905,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,     0,   124,   125,   126,     0,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,    96,   300,
   329,     0,   493,  1959,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   493,    96,   535,     0,     0,   556,  2004,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  2042,   570,    28,    29,   571,   572,
    32,   573,    34,     0,    35,     0,    37,    38,    39,     0,
    41,    42,     0,     0,  1421,     0,  1427,     0,  1430,     0,
     0,     0,     0,     0,     0,     0,     0,    54,     0,     0,
     0,   131,   132,     0,     0,     0,     0,   133,     0,     0,
     0,     0,   136,     0,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    56,    57,
    58,     0,     0,     0,    -7,     1,     0,   -12,   -55,     0,
     0,     0,     0,     0,     0,     0,    68,     0,     0,     0,
     0,     0,     0,     0,   131,   132,     0,     0,     0,     0,
   133,   368,     0,     0,     0,   136,     0,   -55,     0,     0,
   139,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
     0,     0,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
     0,   -55,   -55,   -55,   -55,   -55,     0,   131,   132,     0,
     0,     0,     0,   133,     0,     0,     0,     0,   136,     0,
     0,     0,     0,   139,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   579,   -55,   -55,   -55,   -55,     0,
     0,     0,     0,   -55,     0,   -55,     0,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,   -55,   570,    28,    29,
   571,   572,    32,   573,    34,     0,    35,     0,    37,    38,
    39,     0,    41,    42,     0,   -12,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,     0,   315,   316,   317,   318,   319,    54,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
    -7,    -7,     0,    -7,   329,     0,     0,     0,     0,     0,
     0,  1252,     0,  1253,     0,     0,     0,     0,     0,     0,
    56,    57,    58,     0,   570,    28,    29,   571,   572,    32,
   573,    34,     0,    35,     0,    37,    38,    39,    68,    41,
    42,     0,     0,     0,     0,     0,   570,    28,    29,   571,
   572,    32,   573,    34,     0,    35,    54,    37,    38,    39,
     0,    41,    42,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,    54,     0,
     0,     0,     0,   329,     0,     0,     0,    56,    57,    58,
  1415,     0,  1416,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    68,     0,     0,     0,    56,
    57,    58,     0,   216,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   594,    68,   635,   636,
   637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
   647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
   657,   658,   659,   660,   661,   662,   635,   636,   637,   638,
   639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
   649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
   659,   660,   661,   662,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   595,   217,   218,   219,     0,     0,     0,
     0,     0,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,     0,     0,     0,   815,     0,     0,     0,     0,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     0,   240,   241,   242,   243,   244,   245,    23,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,     0,   663,     0,     0,    24,   776,     0,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
     0,    35,    36,    37,    38,    39,    40,    41,    42,     0,
     0,  1016,    43,    44,    45,    46,    47,    48,    49,     0,
    50,    51,    52,    53,    54,     0,   570,    28,    29,   571,
   572,    32,   573,    34,     0,    35,     0,    37,    38,    39,
     0,    41,    42,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    54,     0,
     0,     0,    59,     0,    60,     0,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    56,
    57,    58,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,    68,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,   780,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,   782,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   315,   316,   317,   318,   319,   783,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,   927,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,   952,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,  1227,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,  1437,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   315,   316,   317,   318,   319,  1438,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,  1498,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,  1504,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,  1507,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,  1510,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   315,   316,   317,   318,   319,  1511,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,  1560,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,  1623,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,  1626,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,  1628,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   315,   316,   317,   318,   319,  1664,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,  1877,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,  1931,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,   524,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,   556,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,   557,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   588,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,   714,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,   715,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,   728,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,   729,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   730,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,   731,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,   732,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,   733,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,   796,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   797,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,   798,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,   917,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,   950,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,   951,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   971,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1116,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1117,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1131,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1132,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1163,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1164,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1165,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1166,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1167,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1168,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1169,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1170,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1171,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1172,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1173,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1174,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1175,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1176,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1177,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1178,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1179,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1180,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1181,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1182,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1183,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1184,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1185,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1186,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1187,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1188,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1203,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1210,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1332,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1333,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1347,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1348,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1356,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1359,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1370,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1375,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1378,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1380,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1381,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1382,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1383,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1384,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1385,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1386,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1387,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1388,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1389,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1390,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1391,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1392,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1393,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1394,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1395,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1396,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1397,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1398,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1399,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1400,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1401,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1402,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1403,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1404,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1405,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1410,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1411,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1520,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1532,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1533,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1534,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1535,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1536,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1537,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1538,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1539,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1540,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1541,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1542,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1543,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1544,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1545,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1546,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1547,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1548,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1549,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1550,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1551,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1552,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1554,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1556,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1641,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1642,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1643,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1644,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1645,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1646,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1647,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1648,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1649,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1650,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1651,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1652,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1653,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1654,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1655,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1656,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1657,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1658,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1659,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1660,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1661,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1740,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1741,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1742,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1743,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1744,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1745,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1746,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1747,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1748,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1749,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1750,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1751,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1752,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1753,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1754,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1755,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1756,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1757,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1758,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1759,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1760,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1817,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1824,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1825,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1826,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1827,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1828,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1829,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1830,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1831,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1832,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1833,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1834,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1835,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1836,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1837,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1838,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1839,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1840,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1841,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1876,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1884,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1885,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1886,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1887,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1888,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1889,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1890,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1891,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1892,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1893,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1894,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1895,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1896,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1897,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1898,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1899,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1900,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1901,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1940,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1941,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1942,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1943,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1944,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1945,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1946,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1947,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1948,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1949,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1950,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1951,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1952,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1953,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1954,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1955,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1956,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1957,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1989,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1990,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1991,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1992,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1993,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1994,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1995,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1996,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1997,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1998,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1999,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2000,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2001,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2002,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2003,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2027,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2028,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2029,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2030,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2031,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2032,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2033,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2034,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2035,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2036,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2037,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2038,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2039,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2040,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2041,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2071,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2072,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2073,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2074,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2075,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2076,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2077,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2078,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2079,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2080,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2081,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2082,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2083,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2084,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2085,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2115,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2116,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2117,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2118,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2119,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2120,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2121,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2122,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2123,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2146,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2147,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2148,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2149,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2150,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2151,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2152,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2153,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2154,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2188,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2189,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2190,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2191,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2192,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2193,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2194,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2195,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2196,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2218,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2219,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2220,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2221,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2222,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2223,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2236,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2237,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2238,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2239,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2240,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2241,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2257,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2258,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2259,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2260,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2261,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2262,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2281,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2282,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2283,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2293,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2294,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2295,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2308,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2309,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2310,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2326,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2327,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2328,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2332,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2333,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2334,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2338,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2339,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2340,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   499,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   632,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   693,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   695,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   697,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   699,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   701,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   703,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   705,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   707,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   709,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   711,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   713,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   717,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   719,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   721,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   723,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   725,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   727,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   799,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   805,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,   898,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,  1048,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,  1050,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,  1052,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,  1054,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,  1055,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,  1201,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   525,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   526,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   527,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   529,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   531,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   532,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   540,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   582,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   583,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   586,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   592,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   692,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   694,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   696,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   698,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   700,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   702,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   704,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   706,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   708,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   710,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   712,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   716,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   718,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   720,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   722,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   724,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   726,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   762,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   764,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   777,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   778,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   779,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   784,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   785,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   786,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   787,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   788,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   811,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   818,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1047,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1049,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1051,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1053,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1120,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1228,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  1256,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1365,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  1369,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  1371,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1493,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1494,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1523,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1525,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1527,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1529,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  1530,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1531,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  1553,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  1663,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1821,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1822,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1823,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1986,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1987,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1988,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  2109,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  2110,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  2111,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  2112,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  2113,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  2114,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  2224,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  2225,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  2226,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  2284,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  2285,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  2286,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  2344,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  2345,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  2346
};

static const short yycheck[] = {    23,
     4,   374,     4,    94,    23,   308,   344,   752,     4,     4,
     4,   185,     4,     4,   188,     5,    66,     6,  1121,  1122,
     7,     5,    67,     6,    66,    43,     4,    72,     5,  1247,
  1344,     7,  1346,     6,   106,   209,  1424,   211,     3,   215,
  1428,   170,    67,  1431,    34,    35,    36,    72,    69,    70,
    34,    35,    36,  1138,    66,     4,    67,    34,    35,    36,
     6,    72,  1147,     4,   189,   190,     6,    67,     5,  1154,
   189,   190,    72,   200,   189,   190,     6,   189,   190,   201,
   207,   206,   201,   208,   206,   189,   190,     4,     5,   189,
   190,   206,   306,   208,   206,   201,   208,    34,    35,    36,
   206,     7,     6,   207,    50,     6,   206,   131,   132,   133,
    50,     6,   136,   137,   196,   197,   140,    34,    35,    36,
   189,   190,   204,   147,     6,   149,   150,   151,   200,   153,
   344,   155,   156,     6,   158,   189,   190,   200,   207,     6,
    67,  1359,    67,   201,   207,    72,   200,    72,   206,    67,
   200,   175,   176,   207,    72,   189,   190,   207,   200,    67,
   109,   110,     6,   208,    72,   910,   189,   190,   109,   110,
   194,   195,   206,   197,    39,   199,     7,    42,   202,   203,
   189,   190,   200,   208,   207,   523,   189,   190,   175,   176,
   177,   178,   201,     6,     7,   207,   499,   208,   536,   175,
   176,   177,   178,   206,    57,    58,   189,   190,   208,   196,
   197,   207,   207,   207,  1317,   207,   207,   207,   207,   196,
   197,   395,   200,   207,     7,   190,   250,   204,   200,   202,
   406,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,     6,     6,  1360,   297,   298,   299,  1364,
  1668,   208,   306,   208,  1672,   189,   190,  1675,   200,   308,
   208,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   196,   197,  1622,   523,
     8,  1625,   336,  1627,   338,   200,   189,   190,    66,   343,
   344,   200,   536,  1068,    56,   189,   190,    47,   352,   353,
   354,   355,   356,    45,   358,   359,   360,   361,   362,   363,
   364,   200,   206,   200,   175,   176,   177,   178,   207,   200,
   207,   202,   376,   377,   378,   379,    67,    67,   200,   383,
   202,    72,    72,   189,   190,   196,   197,   391,   200,   373,
   374,   373,   374,   204,   189,   190,   400,   200,  1766,   202,
   206,   200,  1770,   202,  1772,   189,   190,   189,   190,   200,
   200,   206,   175,   176,   177,   178,   201,   196,   197,   737,
   200,   206,   206,   202,   206,   204,  1720,   200,   189,   190,
  1724,   201,  1726,   196,   197,   200,   206,     3,   189,   190,
   191,   192,   193,    39,   443,   206,    42,    43,   199,    45,
   768,    43,  1517,  1518,  1519,  1520,   196,   197,   201,  1524,
     6,     7,   202,   206,   204,   200,    43,   179,   180,   181,
   182,   183,    43,   185,   186,   187,   188,   189,   190,   191,
   192,   193,   800,   801,   802,   803,    39,   199,   492,    42,
    43,   495,    43,    60,    61,    62,    63,   501,    65,   500,
   499,   179,   180,   181,   182,   183,   207,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    43,   208,   208,   523,
   524,   199,   202,   201,   204,   196,   197,     4,   207,   533,
   534,   202,   536,   204,   538,   539,   191,   192,   193,   196,
   197,     6,   546,   737,   199,   202,     6,   204,   742,   200,
   200,   202,   556,   557,   126,   127,   128,   129,   130,   166,
   167,   565,   169,    42,    43,   200,    45,  1632,  1633,   200,
   200,  1636,   202,   577,   768,   141,   142,   143,   144,   145,
   146,   147,   148,   200,   588,   202,   590,   591,   185,   186,
   187,   188,   189,   190,   191,   192,   193,     6,   200,  1324,
   202,   200,   199,   202,     4,     4,   800,   801,   802,   803,
   200,   929,   202,   200,   200,   202,   202,   200,    43,   902,
   903,   200,   200,   202,   202,   200,   200,   202,   202,     5,
   200,   632,   202,   632,     3,     4,   200,   200,   202,   202,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   200,  1730,   202,   181,   182,   183,
    39,   185,   186,   187,   188,   189,   190,   191,   192,   193,
   200,   206,   202,   208,   206,   199,   208,   206,   206,   208,
   208,    60,    61,    62,    63,    64,    65,   182,   183,   200,
   185,   186,   187,   188,   189,   190,   191,   192,   193,   200,
   714,   715,     8,   206,   199,   208,   206,   206,   208,   208,
   206,     4,   208,     5,   728,   729,   730,   731,   732,   733,
   734,   200,   206,   737,   208,   929,     6,   738,   742,     6,
   206,   745,   208,   206,   206,   208,   208,   206,   206,   208,
   208,   755,  1105,   206,  1819,   208,   206,     6,   208,   206,
   206,   208,   208,   206,   768,   208,   770,   206,   206,   208,
   208,   206,   206,   208,   208,   206,   200,   208,     6,   200,
   206,   852,   208,   206,   206,   208,   208,   206,   206,   208,
   208,   206,   206,   208,   208,   207,   800,   801,   802,   803,
   207,   207,   806,   807,   200,   200,   810,     6,   206,   206,
   208,   208,   206,   200,   208,  1880,     4,   821,   822,   200,
   189,   190,   206,   206,   208,   208,   195,   206,   206,   208,
   208,   200,   206,   206,   208,   208,   205,   200,   207,   206,
   200,   208,   200,     6,     6,   207,   207,   202,   207,   112,
   204,   207,     6,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   866,   867,   868,   869,   870,   871,   872,   873,
   874,   875,   876,   877,   878,   879,   880,   881,   882,   200,
   884,     6,     6,   179,   180,   181,   182,   183,     3,   185,
   186,   187,   188,   189,   190,   191,   192,   193,   200,   898,
   200,   200,   200,   199,   903,   200,   200,   911,   200,   200,
   200,   200,   208,   917,   200,   200,   200,     5,   206,   200,
   200,   200,   200,   200,   200,   929,   200,   931,   200,   933,
   179,   180,   181,   182,   183,   200,   185,   186,   187,   188,
   189,   190,   191,   192,   193,   949,   950,   951,   200,   200,
   199,   179,   180,   181,   182,   183,   200,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   200,   971,   972,   973,
   200,   199,   201,  1129,   200,   200,   200,     4,   199,   206,
   179,   180,   181,   182,   183,  1338,   185,   186,   187,   188,
   189,   190,   191,   192,   193,     7,   204,     7,   202,  2064,
   199,   207,     7,     7,   201,     7,     7,   107,   157,   207,
   109,     5,     5,     5,   163,  1014,   179,   180,   181,   182,
   183,     5,   185,   186,   187,   188,   189,   190,   191,   192,
   193,     5,     5,   159,     6,     5,   199,   186,     5,     5,
     5,     5,   191,   192,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     3,     4,     6,  1061,     5,  1060,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     5,  1089,  1090,  1091,  1092,  1160,
     5,     5,     5,     5,     3,     5,   206,  1101,     5,     5,
  1101,     6,  1258,   201,     4,     6,   203,   208,     7,     7,
     7,     7,  1116,  1117,     7,     7,     7,   204,   208,     7,
     7,  1105,   207,  1105,  1128,   207,   200,  1131,     7,   204,
   171,     5,   201,   206,   206,   206,   206,  1141,   206,   206,
   206,   206,   206,   206,  1148,  1149,  1150,   206,   206,   206,
   206,  1155,   206,   206,   206,  1159,   206,   206,   206,  1163,
  1164,  1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,
  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,  1186,  1187,  1188,   206,   206,  1191,   206,   206,
   206,   206,   206,   206,   200,   206,     6,   206,   206,  1203,
   200,  1357,   200,   200,   200,   200,  1210,   179,   180,   181,
   182,   183,   200,   185,   186,   187,   188,   189,   190,   191,
   192,   193,   200,   200,   200,  1229,   207,   199,   207,   200,
     4,   200,   200,     6,     6,     6,     6,   200,   200,     7,
   189,   190,     7,     7,     7,     6,   195,     7,  1252,   200,
  1254,   200,   200,     7,   203,   200,   205,   200,   207,     3,
     4,   200,   200,   200,   200,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   200,
     3,     4,   200,     7,     4,     7,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   200,   203,   207,     7,   202,     7,     7,     7,  1332,  1333,
     7,     7,     6,   172,     7,     6,     6,  1341,     7,  1343,
     4,  1345,     7,  1347,  1348,   494,     3,     3,     3,  1353,
   191,     3,     3,     3,  1338,     3,  1338,     3,  1362,     3,
  1516,     3,     3,     3,     3,     3,  1370,   201,     5,     5,
     3,  1375,     3,   201,  1378,     4,  1380,  1381,  1382,  1383,
  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,
  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,
  1404,  1405,     6,     6,     6,   204,  1410,     7,     6,     6,
     6,  1415,     6,  1417,  1418,  1419,   200,   200,   179,   180,
   181,   182,   183,  1579,   185,   186,   187,   188,   189,   190,
   191,   192,   193,     6,     6,   168,   108,   206,   199,     6,
   207,   207,   201,     6,   206,   189,   190,   204,   206,   201,
   206,   195,   201,   206,   201,   206,   200,     4,   206,   203,
   201,   205,     6,   207,   206,     6,   206,   206,   206,   206,
   206,   201,   206,     6,   206,  1631,   189,   190,   206,   206,
   206,   201,   195,   206,   206,   203,     6,   200,     6,     6,
   203,     6,   205,     6,   207,  1499,     6,     6,     6,     6,
     6,  1505,     6,     6,  1508,   179,   180,   181,   182,   183,
     6,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     6,     6,     6,     6,     6,   199,     6,   108,  1532,  1533,
  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,
  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,     7,
  1554,     3,  1556,     6,   179,   180,   181,   182,   183,     3,
   185,   186,   187,   188,   189,   190,   191,   192,   193,     6,
   191,     6,     6,  1729,   199,   179,   180,   181,   182,   183,
     3,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     6,     3,     6,     6,     3,   199,     6,     3,    45,    46,
     3,     3,     6,   208,     4,     6,   207,     6,     6,   204,
     7,   760,   761,     6,   763,   203,   765,   766,     6,  1775,
   207,   207,   207,   207,   207,   201,   105,   206,   206,   206,
   201,   206,   206,   201,  1638,  1639,  1640,  1641,  1642,  1643,
  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,   201,   808,
   809,  1662,  1818,   812,   179,   180,   181,   182,   183,     6,
   185,   186,   187,   188,   189,   190,   191,   192,   193,   206,
   829,   830,   201,   206,   199,   201,   835,   836,   110,   201,
   201,   108,   206,   842,     6,   844,   179,   180,   181,   182,
   183,     3,   185,   186,   187,   188,   189,   190,   191,   192,
   193,     6,     6,     3,     6,     6,   199,     6,     6,     6,
     6,     3,     6,     6,  1728,   172,     5,   174,     5,   207,
  1734,   208,  1736,   180,  1738,     6,  1740,  1741,  1742,  1743,
  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,
  1754,  1755,  1756,  1757,  1758,  1759,  1760,   207,   206,   208,
  1761,   168,  1763,   206,   206,   206,   206,   206,   201,   201,
   201,     6,   921,     6,   923,     6,   206,     6,     6,     6,
     6,   207,     6,     8,     6,   934,   935,   936,     6,     6,
     6,     6,   941,   942,   943,   944,   945,   946,   947,     6,
     6,     6,     5,     5,   105,     6,   253,     6,     6,     6,
   206,   206,  1816,  1817,   208,   207,   207,   206,   201,   206,
  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,
  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,   201,   206,
   206,  1842,   179,   180,   181,   182,   183,   207,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   207,   207,   207,
   206,     6,   199,     6,     6,     5,   207,     6,   207,     5,
   208,     8,  1876,   207,   207,   168,   206,  1881,  1882,  1883,
  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,   206,   208,
   207,   201,   201,     6,     6,     6,     6,     6,     6,   105,
  1059,     8,     6,     6,     6,     6,     6,     6,     6,     6,
     6,     6,   173,   208,   371,   372,   207,   207,   206,     6,
  1934,   206,  1936,   206,  1938,   207,  1940,  1941,  1942,  1943,
  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,  1953,
  1954,  1955,  1956,  1957,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,   207,
   174,   201,   206,     6,   199,  1124,     6,     6,     0,     6,
     8,     6,     6,  1132,   207,  1989,  1990,  1991,  1992,  1993,
  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
     6,     6,  1151,     6,     6,     6,   206,     6,     6,   201,
     6,   206,     6,   207,   207,   206,     6,   207,   207,   207,
  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,
  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,   207,   207,
  1189,   207,   179,   180,   181,   182,   183,   207,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   207,   207,     6,
     6,  2065,   199,  2067,     6,  2069,   207,  2071,  2072,  2073,
  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,  2082,  2083,
  2084,  2085,   179,   180,   181,   182,   183,   207,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   207,     6,     6,
   207,   207,   199,   207,     6,     6,     6,     0,   555,   634,
     4,  2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,  2123,
     4,    -1,  1064,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  2140,  2141,  2142,  2143,
  2144,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,  2153,
  2154,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,  2176,    -1,  2178,    -1,  2180,    -1,  2182,    -1,
  2184,    -1,  2186,    -1,  2188,  2189,  2190,  2191,  2192,  2193,
  2194,  2195,  2196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1352,    -1,    -1,    -1,  1356,    -1,     8,
    -1,    -1,    -1,    -1,  2218,  2219,  2220,  2221,  2222,  2223,
    -1,    -1,    -1,  1372,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2243,
  2244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2257,  2258,  2259,  2260,  2261,  2262,  2263,
    -1,  2265,    -1,  2267,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2281,  2282,  2283,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2293,
  2294,  2295,  2296,  2297,  2298,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  2308,  2309,  2310,  2311,    -1,  2313,
    -1,  2315,   759,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  2326,  2327,  2328,    -1,    -1,    -1,  2332,  2333,
  2334,    -1,    -1,    -1,  2338,  2339,  2340,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1493,  1494,  2350,  2351,  2352,   796,
   797,   798,  1501,    -1,    -1,  2359,    -1,  2361,    -1,  2363,
    -1,    -1,    -1,  1512,  1513,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   823,    -1,    -1,    -1,
   179,   180,   181,   182,   183,   832,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,  1558,
  1559,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1624,    -1,    -1,    -1,    -1,
  1629,     3,     4,     5,    -1,     7,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,    -1,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    39,    40,    41,    42,    43,    44,    45,
    46,    -1,    48,    -1,    50,    51,    52,    -1,    54,    55,
    -1,    -1,  1721,    60,    61,    62,    63,    64,    65,    -1,
    -1,    -1,  1731,    -1,    -1,    71,    -1,    -1,    -1,    -1,
    -1,   189,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,   207,
    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,    -1,
    -1,    -1,   189,   190,    -1,    -1,    -1,  1074,   195,  1076,
    -1,    -1,    -1,   200,   120,    -1,    -1,    -1,   205,    -1,
   207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   175,   176,   177,   178,    -1,    -1,  1106,
    -1,  1108,    -1,  1110,    -1,    -1,    -1,   189,   190,    -1,
    -1,  1820,    -1,   195,   196,   197,    -1,    -1,   200,    -1,
   202,    -1,   204,   205,    -1,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,   189,   190,    -1,   199,    -1,    -1,   195,    -1,
    -1,    -1,   206,   200,   208,    -1,    -1,    -1,   205,    -1,
    -1,    -1,   208,    -1,    -1,     3,     4,     5,    -1,    -1,
  1879,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    34,    35,    36,    -1,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,     3,     4,
   199,    -1,   201,  1932,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,     3,     4,    -1,    -1,   206,  1985,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  2023,    39,    40,    41,    42,    43,
    44,    45,    46,    -1,    48,    -1,    50,    51,    52,    -1,
    54,    55,    -1,    -1,  1341,    -1,  1343,    -1,  1345,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
    -1,   189,   190,    -1,    -1,    -1,    -1,   195,    -1,    -1,
    -1,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
   104,    -1,    -1,    -1,     0,     1,    -1,     3,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   189,   190,    -1,    -1,    -1,    -1,
   195,  1418,    -1,    -1,    -1,   200,    -1,    33,    -1,    -1,
   205,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
    -1,    -1,    -1,    59,    60,    61,    62,    63,    64,    65,
    -1,    67,    68,    69,    70,    71,    -1,   189,   190,    -1,
    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,   200,    -1,
    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   208,   101,   102,   103,   104,    -1,
    -1,    -1,    -1,   109,    -1,   111,    -1,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,    39,    40,    41,
    42,    43,    44,    45,    46,    -1,    48,    -1,    50,    51,
    52,    -1,    54,    55,    -1,   141,   142,   143,   144,   145,
   146,   147,   148,    -1,   179,   180,   181,   182,   183,    71,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
   166,   167,    -1,   169,   199,    -1,    -1,    -1,    -1,    -1,
    -1,   206,    -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,
   102,   103,   104,    -1,    39,    40,    41,    42,    43,    44,
    45,    46,    -1,    48,    -1,    50,    51,    52,   120,    54,
    55,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,    42,
    43,    44,    45,    46,    -1,    48,    71,    50,    51,    52,
    -1,    54,    55,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    71,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   102,   103,   104,
   206,    -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,   102,
   103,   104,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   208,   120,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   208,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,    -1,    -1,    -1,   208,    -1,    -1,    -1,    -1,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
    -1,   160,   161,   162,   163,   164,   165,     4,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,    -1,   208,    -1,    -1,    33,   208,    -1,    -1,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    -1,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
    -1,   208,    59,    60,    61,    62,    63,    64,    65,    -1,
    67,    68,    69,    70,    71,    -1,    39,    40,    41,    42,
    43,    44,    45,    46,    -1,    48,    -1,    50,    51,    52,
    -1,    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   101,   102,   103,   104,    71,    -1,
    -1,    -1,   109,    -1,   111,    -1,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
   103,   104,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   120,    -1,    -1,
    -1,    -1,   199,    -1,    -1,    -1,   179,   180,   181,   182,
   183,   208,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
   179,   180,   181,   182,   183,   208,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,    -1,    -1,   179,   180,   181,   182,   183,   208,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,   179,   180,
   181,   182,   183,   208,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   179,   180,   181,   182,   183,   208,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,    -1,    -1,   179,   180,   181,   182,
   183,   208,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
   179,   180,   181,   182,   183,   208,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,    -1,    -1,   179,   180,   181,   182,   183,   208,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,   179,   180,
   181,   182,   183,   208,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   179,   180,   181,   182,   183,   208,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,    -1,    -1,   179,   180,   181,   182,
   183,   208,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
   179,   180,   181,   182,   183,   208,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,    -1,    -1,   179,   180,   181,   182,   183,   208,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,   179,   180,
   181,   182,   183,   208,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   179,   180,   181,   182,   183,   208,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,    -1,    -1,   179,   180,   181,   182,
   183,   208,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
   179,   180,   181,   182,   183,   208,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,    -1,    -1,   179,   180,   181,   182,   183,   208,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,   179,   180,
   181,   182,   183,   208,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   179,   180,   181,   182,   183,   208,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   179,   180,   181,   182,   183,   206,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   179,   180,   181,   182,   183,   206,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   179,   180,   181,   182,   183,   206,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   179,   180,   181,   182,
   183,   206,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   179,   180,
   181,   182,   183,   206,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
    -1,    -1,   203,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,    -1,    -1,   203,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,
    -1,   199,    -1,   201,   179,   180,   181,   182,   183,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,
   182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,
   179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
   199,    -1,   201,   179,   180,   181,   182,   183,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
    -1,    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,
   183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,
   180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,
    -1,   201,   179,   180,   181,   182,   183,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    -1,    -1,    -1,
    -1,    -1,   199,    -1,   201,   179,   180,   181,   182,   183,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
    -1,    -1,    -1,    -1,    -1,   199,    -1,   201,   179,   180,
   181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
   201
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 171 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 177 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 178 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 188 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STL_Surf = Create_Surface(NEWSURFACE(), MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 10:
#line 202 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d, CTX.geom.stl_create_elementary);
      return 1;
    ;
    break;}
case 11:
#line 209 "Gmsh.y"
{
      if(CTX.geom.stl_create_elementary){
	STL_Surf->STL->ReplaceDuplicate();
	if(CTX.geom.stl_create_physical)
	  STL_Surf->STL->CreatePhysicalSurface();
      }
      else{
	Tree_Add(THEM->Surfaces, &STL_Surf);
      }
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 231 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 232 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 233 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 238 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 243 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 254 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 257 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 261 "Gmsh.y"
{
   ;
    break;}
case 25:
#line 267 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 273 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 280 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 286 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 290 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 294 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 301 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 305 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 310 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 314 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 318 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 322 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 326 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 330 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 334 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 338 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 344 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 347 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 350 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 354 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 358 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 362 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 366 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 374 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 385 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 388 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 391 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 407 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 408 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 411 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 412 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 413 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 414 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 415 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 416 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 421 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 72:
#line 425 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 442 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View))
	EndView(View, 1, yyname, yyvsp[-4].c);
    ;
    break;}
case 74:
#line 447 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View))
	EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 75:
#line 455 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 493 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 495 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 500 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 505 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 512 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 514 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 519 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 525 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 533 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 535 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 540 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 546 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 554 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 556 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 562 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 569 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 577 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 579 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 585 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 592 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 600 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 602 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 608 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 615 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 623 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 625 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 632 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 642 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 650 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 652 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 659 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 669 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 677 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 679 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 686 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 696 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 704 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 706 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 714 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 724 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 732 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 734 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 742 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 752 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 760 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 762 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 770 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 780 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 788 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 790 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 798 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 808 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 816 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 818 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 826 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 836 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 844 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 846 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 854 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 864 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 872 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 874 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 886 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 902 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 910 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 912 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 924 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 940 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 948 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 950 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 962 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 978 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 986 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 988 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 998 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1011 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1019 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1021 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1031 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1044 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1052 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1054 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1064 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1077 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1085 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1087 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1096 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1109 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1117 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1119 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1128 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1141 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1149 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1151 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1160 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1173 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1181 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1186 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1194 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1201 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1208 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1213 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1221 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1228 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1236 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1243 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1245 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1250 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1257 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1258 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1259 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1260 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1261 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1265 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1266 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1274 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 220:
#line 1302 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
      }
    ;
    break;}
case 221:
#line 1338 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1387 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1403 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 224:
#line 1413 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
    ;
    break;}
case 225:
#line 1431 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 226:
#line 1444 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 227:
#line 1460 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 228:
#line 1485 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 229:
#line 1511 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 230:
#line 1524 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 231:
#line 1540 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 232:
#line 1553 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 233:
#line 1569 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1588 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1610 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 236:
#line 1619 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 237:
#line 1637 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1653 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1669 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1688 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1707 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1725 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1743 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1761 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1787 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1805 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1832 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1850 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1874 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1898 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1924 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1941 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 253:
#line 1959 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 1978 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 1997 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2036 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2062 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	// FIXME: parameters not used; undocumented
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      //FIXME: do you copy the data?
      //List_Delete($12);
      //List_Delete($13);
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 258:
#line 2084 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 259:
#line 2101 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2120 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2137 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2153 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2172 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2189 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2206 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2227 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 267:
#line 2232 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 268:
#line 2237 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 269:
#line 2242 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2249 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 271:
#line 2250 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 272:
#line 2251 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 273:
#line 2256 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 274:
#line 2260 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 275:
#line 2264 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 276:
#line 2280 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 277:
#line 2296 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 278:
#line 2312 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2333 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 280:
#line 2346 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 281:
#line 2357 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 282:
#line 2366 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
#if defined(HAVE_FLTK)
	if(!CTX.batch)
	  UpdateViewsInGUI();
#endif
      }
    ;
    break;}
case 283:
#line 2376 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All"))
	Init_Mesh(THEM);
    ;
    break;}
case 284:
#line 2386 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 285:
#line 2400 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 286:
#line 2407 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 287:
#line 2412 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 288:
#line 2423 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 289:
#line 2437 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 290:
#line 2480 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 291:
#line 2494 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 292:
#line 2509 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch(...) {
	yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 293:
#line 2518 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
    ;
    break;}
case 294:
#line 2528 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 295:
#line 2532 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 296:
#line 2536 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 297:
#line 2540 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 298:
#line 2553 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 299:
#line 2567 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 300:
#line 2581 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 301:
#line 2606 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 302:
#line 2631 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  Symbol TheSymbol;
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  Symbol *pSymbol;
	  if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	    yymsg(GERROR, "Unknown loop variable");
	  else
	    *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	      LoopControlVariablesTab[ImbricatedLoop-1][2];
	}
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
	if(ImbricatedLoop < 0){
	  yymsg(GERROR, "Problem with imbricated loops");
	  ImbricatedLoop = 0;
	}
      }
    ;
    break;}
case 303:
#line 2658 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 304:
#line 2664 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 305:
#line 2669 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 306:
#line 2674 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 307:
#line 2678 "Gmsh.y"
{
    ;
    break;}
case 308:
#line 2689 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 309:
#line 2705 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 310:
#line 2721 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 311:
#line 2737 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 312:
#line 2742 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 313:
#line 2758 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 314:
#line 2763 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 315:
#line 2779 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 316:
#line 2784 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 317:
#line 2802 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 318:
#line 2825 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2848 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 320:
#line 2871 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 321:
#line 2876 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 322:
#line 2899 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 323:
#line 2904 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 324:
#line 2927 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 325:
#line 2932 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 326:
#line 2958 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 327:
#line 2981 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3004 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 329:
#line 3027 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 330:
#line 3032 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 331:
#line 3055 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 332:
#line 3061 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 333:
#line 3084 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 334:
#line 3090 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 335:
#line 3116 "Gmsh.y"
{
    ;
    break;}
case 336:
#line 3119 "Gmsh.y"
{
    ;
    break;}
case 337:
#line 3125 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 338:
#line 3151 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 339:
#line 3175 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 340:
#line 3184 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 341:
#line 3202 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 342:
#line 3220 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 343:
#line 3238 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 344:
#line 3265 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 345:
#line 3291 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 346:
#line 3317 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 347:
#line 3331 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 348:
#line 3350 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 349:
#line 3354 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 350:
#line 3363 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 351:
#line 3364 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 352:
#line 3365 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 353:
#line 3366 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 354:
#line 3367 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 355:
#line 3371 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 356:
#line 3372 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 357:
#line 3373 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 358:
#line 3374 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 359:
#line 3375 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 360:
#line 3376 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 361:
#line 3377 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 362:
#line 3378 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 363:
#line 3380 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 364:
#line 3386 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 365:
#line 3387 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 366:
#line 3388 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 367:
#line 3389 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 368:
#line 3390 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 369:
#line 3391 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 370:
#line 3392 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 371:
#line 3393 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 372:
#line 3394 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 373:
#line 3395 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 374:
#line 3396 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 375:
#line 3397 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 376:
#line 3398 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 377:
#line 3399 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 378:
#line 3400 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 379:
#line 3401 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 380:
#line 3402 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 381:
#line 3403 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 382:
#line 3404 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 383:
#line 3405 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 384:
#line 3406 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 385:
#line 3407 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 386:
#line 3408 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 387:
#line 3409 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 388:
#line 3410 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3411 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 390:
#line 3412 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 391:
#line 3413 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 392:
#line 3414 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 393:
#line 3415 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 394:
#line 3416 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 395:
#line 3417 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 396:
#line 3419 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 397:
#line 3420 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 398:
#line 3421 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 399:
#line 3422 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 400:
#line 3423 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 401:
#line 3424 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 402:
#line 3425 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 403:
#line 3426 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 404:
#line 3427 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 405:
#line 3428 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 406:
#line 3429 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 407:
#line 3430 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 408:
#line 3431 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 409:
#line 3432 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3433 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 411:
#line 3434 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 412:
#line 3435 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 413:
#line 3436 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 414:
#line 3437 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 415:
#line 3438 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 416:
#line 3439 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 417:
#line 3448 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 418:
#line 3449 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 419:
#line 3450 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 420:
#line 3451 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 421:
#line 3456 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
    ;
    break;}
case 422:
#line 3468 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 423:
#line 3487 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
    ;
    break;}
case 424:
#line 3500 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
    ;
    break;}
case 425:
#line 3512 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 426:
#line 3534 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 427:
#line 3551 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 428:
#line 3568 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 429:
#line 3585 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 430:
#line 3605 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 431:
#line 3609 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 432:
#line 3613 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 433:
#line 3617 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 434:
#line 3621 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 435:
#line 3628 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 436:
#line 3632 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 437:
#line 3636 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 438:
#line 3640 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 439:
#line 3647 "Gmsh.y"
{
    ;
    break;}
case 440:
#line 3650 "Gmsh.y"
{
    ;
    break;}
case 441:
#line 3656 "Gmsh.y"
{
    ;
    break;}
case 442:
#line 3659 "Gmsh.y"
{
    ;
    break;}
case 443:
#line 3665 "Gmsh.y"
{
    ;
    break;}
case 444:
#line 3668 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 445:
#line 3672 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 446:
#line 3679 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 447:
#line 3684 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 448:
#line 3692 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 449:
#line 3697 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 450:
#line 3701 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 451:
#line 3705 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 452:
#line 3717 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 453:
#line 3723 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 454:
#line 3734 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 455:
#line 3754 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 456:
#line 3764 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 457:
#line 3774 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 458:
#line 3786 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
    ;
    break;}
case 459:
#line 3802 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
    ;
    break;}
case 460:
#line 3820 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 461:
#line 3843 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 462:
#line 3871 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 463:
#line 3876 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 464:
#line 3880 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 465:
#line 3884 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 466:
#line 3897 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 467:
#line 3901 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 468:
#line 3913 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 469:
#line 3919 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
    ;
    break;}
case 470:
#line 3940 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 471:
#line 3944 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 472:
#line 3958 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 473:
#line 3963 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 474:
#line 3970 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 475:
#line 3974 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);  
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 476:
#line 3982 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 477:
#line 3996 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 478:
#line 4000 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 479:
#line 4019 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 480:
#line 4035 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4052 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
