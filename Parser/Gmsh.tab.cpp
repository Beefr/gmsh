
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSurface	299
#define	tSpline	300
#define	tVolume	301
#define	tCharacteristic	302
#define	tLength	303
#define	tParametric	304
#define	tElliptic	305
#define	tPlane	306
#define	tRuled	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tRotate	315
#define	tTranslate	316
#define	tSymmetry	317
#define	tDilate	318
#define	tExtrude	319
#define	tDuplicata	320
#define	tLoop	321
#define	tRecombine	322
#define	tDelete	323
#define	tCoherence	324
#define	tAttractor	325
#define	tLayers	326
#define	tAlias	327
#define	tAliasWithOptions	328
#define	tText2D	329
#define	tText3D	330
#define	tInterpolationScheme	331
#define	tTime	332
#define	tGrain	333
#define	tCombine	334
#define	tBSpline	335
#define	tBezier	336
#define	tNurbs	337
#define	tOrder	338
#define	tKnots	339
#define	tColor	340
#define	tColorTable	341
#define	tFor	342
#define	tIn	343
#define	tEndFor	344
#define	tIf	345
#define	tEndIf	346
#define	tExit	347
#define	tReturn	348
#define	tCall	349
#define	tFunction	350
#define	tShow	351
#define	tHide	352
#define	tGetValue	353
#define	tGMSH_MAJOR_VERSION	354
#define	tGMSH_MINOR_VERSION	355
#define	tGMSH_PATCH_VERSION	356
#define	tAFFECTPLUS	357
#define	tAFFECTMINUS	358
#define	tAFFECTTIMES	359
#define	tAFFECTDIVIDE	360
#define	tOR	361
#define	tAND	362
#define	tEQUAL	363
#define	tNOTEQUAL	364
#define	tLESSOREQUAL	365
#define	tGREATEROREQUAL	366
#define	tPLUSPLUS	367
#define	tMINUSMINUS	368
#define	UNARYPREC	369

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.298 2007-01-25 15:50:58 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "GeoUtils.h"
#include "Generator.h"
#include "Draw.h"
#include "Views.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;
extern GModel *GMODEL;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 76 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1168
#define	YYFLAG		-32768
#define	YYNTBASE	136

#define YYTRANSLATE(x) ((unsigned)(x) <= 369 ? yytranslate[x] : 202)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   121,     2,   131,     2,   120,     2,     2,   126,
   127,   118,   116,   132,   117,   130,   119,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   112,
     2,   114,   107,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   128,     2,   129,   125,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   133,     2,   134,   135,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   108,   109,   110,   111,   113,   115,   122,   123,   124
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    44,    50,    58,    66,    76,    83,    92,    93,    96,
    99,   102,   105,   108,   111,   113,   117,   119,   123,   124,
   125,   136,   138,   142,   143,   157,   159,   163,   164,   180,
   189,   190,   197,   204,   206,   208,   210,   212,   214,   216,
   218,   223,   231,   241,   248,   255,   259,   266,   273,   283,
   290,   300,   306,   315,   324,   336,   343,   353,   363,   373,
   375,   377,   385,   394,   407,   414,   422,   430,   438,   448,
   456,   466,   484,   492,   500,   512,   521,   534,   543,   552,
   561,   570,   579,   588,   596,   605,   611,   623,   629,   639,
   641,   643,   645,   646,   649,   656,   663,   670,   677,   682,
   689,   696,   703,   708,   715,   719,   724,   730,   734,   738,
   743,   748,   752,   760,   768,   772,   780,   784,   787,   790,
   806,   809,   816,   825,   834,   845,   847,   850,   852,   856,
   861,   863,   869,   881,   895,   896,   904,   905,   919,   920,
   936,   945,   954,   963,   976,   989,  1002,  1017,  1032,  1047,
  1048,  1061,  1062,  1075,  1076,  1089,  1090,  1107,  1108,  1125,
  1126,  1143,  1144,  1163,  1164,  1183,  1184,  1203,  1205,  1208,
  1214,  1222,  1232,  1235,  1242,  1252,  1262,  1271,  1281,  1290,
  1299,  1306,  1311,  1318,  1325,  1332,  1339,  1342,  1344,  1348,
  1351,  1354,  1357,  1361,  1365,  1369,  1373,  1377,  1381,  1385,
  1389,  1393,  1397,  1401,  1405,  1409,  1413,  1419,  1424,  1429,
  1434,  1439,  1444,  1449,  1454,  1459,  1464,  1469,  1476,  1481,
  1486,  1491,  1496,  1501,  1506,  1513,  1520,  1527,  1532,  1537,
  1542,  1547,  1552,  1557,  1562,  1567,  1572,  1577,  1582,  1589,
  1594,  1599,  1604,  1609,  1614,  1619,  1626,  1633,  1640,  1645,
  1647,  1649,  1651,  1653,  1655,  1657,  1659,  1661,  1667,  1672,
  1677,  1680,  1686,  1690,  1697,  1702,  1710,  1717,  1719,  1722,
  1725,  1729,  1733,  1745,  1755,  1763,  1771,  1773,  1777,  1779,
  1781,  1784,  1788,  1793,  1797,  1803,  1808,  1810,  1812,  1814,
  1818,  1823,  1830,  1838,  1840,  1842,  1846,  1850,  1860,  1868,
  1870,  1876,  1880,  1887,  1889,  1893,  1895,  1897,  1904,  1909,
  1914,  1919,  1926,  1933
};

static const short yyrhs[] = {   137,
     0,     1,     6,     0,     0,   137,   138,     0,   141,     0,
   140,     0,   160,     0,   162,     0,   163,     0,   166,     0,
   167,     0,   168,     0,   169,     0,   172,     0,   187,     0,
   188,     0,   189,     0,   171,     0,   170,     0,   114,     0,
   114,   114,     0,    33,   126,     5,   127,     6,     0,    33,
   126,     5,   127,   139,   201,     6,     0,    33,   126,     5,
   132,   197,   127,     6,     0,    33,   126,     5,   132,   197,
   127,   139,   201,     6,     0,     4,     5,   133,   142,   134,
     6,     0,     4,     5,     4,   192,   133,   142,   134,     6,
     0,     0,   142,   145,     0,   142,   149,     0,   142,   152,
     0,   142,   154,     0,   142,   155,     0,   142,   157,     0,
   190,     0,   143,   132,   190,     0,   190,     0,   144,   132,
   190,     0,     0,     0,     4,   146,   126,   143,   127,   147,
   133,   144,   134,     6,     0,   201,     0,   148,   132,   201,
     0,     0,    75,   126,   190,   132,   190,   132,   190,   127,
   150,   133,   148,   134,     6,     0,   201,     0,   151,   132,
   201,     0,     0,    76,   126,   190,   132,   190,   132,   190,
   132,   190,   127,   153,   133,   151,   134,     6,     0,    77,
   133,   194,   134,   133,   194,   134,     6,     0,     0,    78,
   156,   133,   144,   134,     6,     0,    79,   126,   190,   127,
   195,     6,     0,     7,     0,   103,     0,   104,     0,   105,
     0,   106,     0,   122,     0,   123,     0,     4,   158,   190,
     6,     0,     4,   128,   190,   129,   158,   190,     6,     0,
     4,   128,   133,   197,   134,   129,   158,   195,     6,     0,
     4,   128,   129,     7,   195,     6,     0,     4,   128,   129,
   103,   195,     6,     0,     4,   159,     6,     0,     4,   128,
   190,   129,   159,     6,     0,     4,   130,     4,     7,   201,
     6,     0,     4,   128,   190,   129,   130,     4,     7,   201,
     6,     0,     4,   130,     4,   158,   190,     6,     0,     4,
   128,   190,   129,   130,     4,   158,   190,     6,     0,     4,
   130,     4,   159,     6,     0,     4,   128,   190,   129,   130,
     4,   159,     6,     0,     4,   130,    86,   130,     4,     7,
   198,     6,     0,     4,   128,   190,   129,   130,    86,   130,
     4,     7,   198,     6,     0,     4,   130,    87,     7,   199,
     6,     0,     4,   128,   190,   129,   130,    87,     7,   199,
     6,     0,    60,   126,     4,   127,   130,     4,     7,   190,
     6,     0,    60,   126,     4,   127,   130,     4,     7,   201,
     6,     0,   190,     0,   201,     0,    41,   126,   190,   127,
     7,   192,     6,     0,    56,    41,   126,   161,   127,     7,
   195,     6,     0,    71,    41,   195,     7,   133,   190,   132,
   190,   132,   190,   134,     6,     0,    48,    49,   195,     7,
   190,     6,     0,    44,   126,   190,   127,     7,   195,     6,
     0,    46,   126,   190,   127,     7,   195,     6,     0,    42,
   126,   190,   127,     7,   195,     6,     0,    42,   126,   190,
   127,     7,   195,    52,   192,     6,     0,    43,   126,   190,
   127,     7,   195,     6,     0,    43,   126,   190,   127,     7,
   195,    52,   192,     6,     0,    50,   126,   190,   127,     7,
   133,   190,   132,   190,   132,     5,   132,     5,   132,     5,
   134,     6,     0,    81,   126,   190,   127,     7,   195,     6,
     0,    82,   126,   190,   127,     7,   195,     6,     0,    83,
   126,   190,   127,     7,   195,    85,   195,    84,   190,     6,
     0,    44,    67,   126,   190,   127,     7,   195,     6,     0,
    71,    44,   195,     7,   133,   190,   132,   190,   132,   190,
   134,     6,     0,    56,    44,   126,   161,   127,     7,   195,
     6,     0,    52,    45,   126,   190,   127,     7,   195,     6,
     0,    53,    45,   126,   190,   127,     7,   195,     6,     0,
    45,    67,   126,   190,   127,     7,   195,     6,     0,    56,
    45,   126,   161,   127,     7,   195,     6,     0,    55,    47,
   126,   190,   127,     7,   195,     6,     0,    47,   126,   190,
   127,     7,   195,     6,     0,    56,    47,   126,   161,   127,
     7,   195,     6,     0,    62,   192,   133,   164,   134,     0,
    61,   133,   192,   132,   192,   132,   190,   134,   133,   164,
   134,     0,    63,   192,   133,   164,   134,     0,    64,   133,
   192,   132,   190,   134,   133,   164,   134,     0,   166,     0,
   165,     0,   163,     0,     0,   165,   162,     0,   165,    41,
   133,   197,   134,     6,     0,   165,    44,   133,   197,   134,
     6,     0,   165,    45,   133,   197,   134,     6,     0,   165,
    47,   133,   197,   134,     6,     0,    66,   133,   165,   134,
     0,    66,     4,   128,   190,   129,     6,     0,    73,     4,
   128,   190,   129,     6,     0,    74,     4,   128,   190,   129,
     6,     0,    69,   133,   165,   134,     0,    69,     4,   128,
   190,   129,     6,     0,    69,     4,     6,     0,    69,     4,
     4,     6,     0,    86,   198,   133,   165,   134,     0,    97,
   201,     6,     0,    98,   201,     6,     0,    97,   133,   165,
   134,     0,    98,   133,   165,   134,     0,     4,   201,     6,
     0,     4,     4,   128,   190,   129,   201,     6,     0,     4,
     4,     4,   128,   190,   129,     6,     0,     4,   190,     6,
     0,    60,   126,     4,   127,   130,     4,     6,     0,    80,
     4,     6,     0,    93,     6,     0,    38,     6,     0,    38,
   133,   190,   132,   190,   132,   190,   132,   190,   132,   190,
   132,   190,   134,     6,     0,    39,     6,     0,    88,   126,
   190,     8,   190,   127,     0,    88,   126,   190,     8,   190,
     8,   190,   127,     0,    88,     4,    89,   133,   190,     8,
   190,   134,     0,    88,     4,    89,   133,   190,     8,   190,
     8,   190,   134,     0,    90,     0,    96,     4,     0,    94,
     0,    95,     4,     6,     0,    91,   126,   190,   127,     0,
    92,     0,    65,   192,   133,   165,   134,     0,    65,   133,
   192,   132,   192,   132,   190,   134,   133,   165,   134,     0,
    65,   133,   192,   132,   192,   132,   192,   132,   190,   134,
   133,   165,   134,     0,     0,    65,   192,   133,   165,   173,
   185,   134,     0,     0,    65,   133,   192,   132,   192,   132,
   190,   134,   133,   165,   174,   185,   134,     0,     0,    65,
   133,   192,   132,   192,   132,   192,   132,   190,   134,   133,
   165,   175,   185,   134,     0,    65,    41,   133,   190,   132,
   192,   134,     6,     0,    65,    44,   133,   190,   132,   192,
   134,     6,     0,    65,    45,   133,   190,   132,   192,   134,
     6,     0,    65,    41,   133,   190,   132,   192,   132,   192,
   132,   190,   134,     6,     0,    65,    44,   133,   190,   132,
   192,   132,   192,   132,   190,   134,     6,     0,    65,    45,
   133,   190,   132,   192,   132,   192,   132,   190,   134,     6,
     0,    65,    41,   133,   190,   132,   192,   132,   192,   132,
   192,   132,   190,   134,     6,     0,    65,    44,   133,   190,
   132,   192,   132,   192,   132,   192,   132,   190,   134,     6,
     0,    65,    45,   133,   190,   132,   192,   132,   192,   132,
   192,   132,   190,   134,     6,     0,     0,    65,    41,   133,
   190,   132,   192,   134,   176,   133,   185,   134,     6,     0,
     0,    65,    44,   133,   190,   132,   192,   134,   177,   133,
   185,   134,     6,     0,     0,    65,    45,   133,   190,   132,
   192,   134,   178,   133,   185,   134,     6,     0,     0,    65,
    41,   133,   190,   132,   192,   132,   192,   132,   190,   134,
   179,   133,   185,   134,     6,     0,     0,    65,    44,   133,
   190,   132,   192,   132,   192,   132,   190,   134,   180,   133,
   185,   134,     6,     0,     0,    65,    45,   133,   190,   132,
   192,   132,   192,   132,   190,   134,   181,   133,   185,   134,
     6,     0,     0,    65,    41,   133,   190,   132,   192,   132,
   192,   132,   192,   132,   190,   134,   182,   133,   185,   134,
     6,     0,     0,    65,    44,   133,   190,   132,   192,   132,
   192,   132,   192,   132,   190,   134,   183,   133,   185,   134,
     6,     0,     0,    65,    45,   133,   190,   132,   192,   132,
   192,   132,   192,   132,   190,   134,   184,   133,   185,   134,
     6,     0,   186,     0,   185,   186,     0,    72,   133,   190,
   134,     6,     0,    72,   133,   195,   132,   195,   134,     6,
     0,    72,   133,   195,   132,   195,   132,   195,   134,     6,
     0,    68,     6,     0,    54,    44,   195,     7,   190,     6,
     0,    54,    44,   195,     7,   190,    57,    59,   190,     6,
     0,    54,    44,   195,     7,   190,    57,    58,   190,     6,
     0,    54,    45,   133,   190,   134,     7,   195,     6,     0,
    54,    45,   133,   190,   134,     7,   195,     4,     6,     0,
    51,    45,   133,   190,   134,     7,   195,     6,     0,    54,
    47,   133,   190,   134,     7,   195,     6,     0,    68,    45,
   195,     7,   190,     6,     0,    68,    45,   195,     6,     0,
    41,   195,    89,    45,   190,     6,     0,    44,   195,    89,
    45,   190,     6,     0,    44,   195,    89,    47,   190,     6,
     0,    45,   195,    89,    47,   190,     6,     0,    70,     6,
     0,   191,     0,   126,   190,   127,     0,   117,   190,     0,
   116,   190,     0,   121,   190,     0,   190,   117,   190,     0,
   190,   116,   190,     0,   190,   118,   190,     0,   190,   119,
   190,     0,   190,   120,   190,     0,   190,   125,   190,     0,
   190,   112,   190,     0,   190,   114,   190,     0,   190,   113,
   190,     0,   190,   115,   190,     0,   190,   110,   190,     0,
   190,   111,   190,     0,   190,   109,   190,     0,   190,   108,
   190,     0,   190,   107,   190,     8,   190,     0,    12,   126,
   190,   127,     0,    13,   126,   190,   127,     0,    14,   126,
   190,   127,     0,    15,   126,   190,   127,     0,    16,   126,
   190,   127,     0,    17,   126,   190,   127,     0,    18,   126,
   190,   127,     0,    19,   126,   190,   127,     0,    20,   126,
   190,   127,     0,    22,   126,   190,   127,     0,    23,   126,
   190,   132,   190,   127,     0,    24,   126,   190,   127,     0,
    25,   126,   190,   127,     0,    26,   126,   190,   127,     0,
    27,   126,   190,   127,     0,    28,   126,   190,   127,     0,
    29,   126,   190,   127,     0,    30,   126,   190,   132,   190,
   127,     0,    31,   126,   190,   132,   190,   127,     0,    32,
   126,   190,   132,   190,   127,     0,    21,   126,   190,   127,
     0,    12,   128,   190,   129,     0,    13,   128,   190,   129,
     0,    14,   128,   190,   129,     0,    15,   128,   190,   129,
     0,    16,   128,   190,   129,     0,    17,   128,   190,   129,
     0,    18,   128,   190,   129,     0,    19,   128,   190,   129,
     0,    20,   128,   190,   129,     0,    22,   128,   190,   129,
     0,    23,   128,   190,   132,   190,   129,     0,    24,   128,
   190,   129,     0,    25,   128,   190,   129,     0,    26,   128,
   190,   129,     0,    27,   128,   190,   129,     0,    28,   128,
   190,   129,     0,    29,   128,   190,   129,     0,    30,   128,
   190,   132,   190,   129,     0,    31,   128,   190,   132,   190,
   129,     0,    32,   128,   190,   132,   190,   129,     0,    21,
   128,   190,   129,     0,     3,     0,     9,     0,    10,     0,
    11,     0,   100,     0,   101,     0,   102,     0,     4,     0,
     4,   135,   133,   190,   134,     0,     4,   128,   190,   129,
     0,   131,     4,   128,   129,     0,     4,   159,     0,     4,
   128,   190,   129,   159,     0,     4,   130,     4,     0,     4,
   128,   190,   129,   130,     4,     0,     4,   130,     4,   159,
     0,     4,   128,   190,   129,   130,     4,   159,     0,    99,
   126,     5,   132,   190,   127,     0,   193,     0,   117,   192,
     0,   116,   192,     0,   192,   117,   192,     0,   192,   116,
   192,     0,   133,   190,   132,   190,   132,   190,   132,   190,
   132,   190,   134,     0,   133,   190,   132,   190,   132,   190,
   132,   190,   134,     0,   133,   190,   132,   190,   132,   190,
   134,     0,   126,   190,   132,   190,   132,   190,   127,     0,
   195,     0,   194,   132,   195,     0,   190,     0,   196,     0,
   133,   134,     0,   133,   197,   134,     0,   117,   133,   197,
   134,     0,   190,     8,   190,     0,   190,     8,   190,     8,
   190,     0,    41,   133,   190,   134,     0,   163,     0,   166,
     0,   172,     0,     4,   128,   129,     0,   117,     4,   128,
   129,     0,     4,   128,   133,   197,   134,   129,     0,   117,
     4,   128,   133,   197,   134,   129,     0,   190,     0,   196,
     0,   197,   132,   190,     0,   197,   132,   196,     0,   133,
   190,   132,   190,   132,   190,   132,   190,   134,     0,   133,
   190,   132,   190,   132,   190,   134,     0,     4,     0,     4,
   130,    86,   130,     4,     0,   133,   200,   134,     0,     4,
   128,   190,   129,   130,    87,     0,   198,     0,   200,   132,
   198,     0,     5,     0,    40,     0,    35,   126,   201,   132,
   201,   127,     0,    36,   126,   201,   127,     0,    37,   126,
   201,   127,     0,    34,   126,   201,   127,     0,    34,   126,
   201,   132,   197,   127,     0,    34,   126,     4,   130,     4,
   127,     0,    34,   126,     4,   128,   190,   129,   130,     4,
   127,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   141,   143,   148,   150,   153,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   171,
   176,   182,   188,   203,   216,   244,   252,   261,   269,   270,
   271,   272,   273,   274,   277,   280,   284,   287,   291,   482,
   500,   510,   516,   523,   531,   537,   543,   550,   558,   564,
   572,   577,   581,   590,   592,   593,   594,   595,   598,   600,
   603,   638,   677,   731,   748,   766,   777,   796,   810,   827,
   853,   880,   894,   911,   925,   942,   962,   985,   995,  1009,
  1014,  1021,  1043,  1059,  1066,  1088,  1106,  1124,  1142,  1168,
  1186,  1212,  1232,  1256,  1280,  1306,  1323,  1330,  1349,  1367,
  1405,  1421,  1441,  1458,  1475,  1495,  1501,  1506,  1511,  1518,
  1520,  1521,  1524,  1529,  1533,  1549,  1565,  1581,  1601,  1616,
  1622,  1628,  1639,  1649,  1659,  1675,  1693,  1707,  1714,  1720,
  1729,  1742,  1788,  1803,  1814,  1834,  1844,  1866,  1870,  1875,
  1880,  1890,  1907,  1923,  1949,  1976,  2008,  2015,  2020,  2026,
  2030,  2038,  2047,  2055,  2063,  2068,  2076,  2081,  2089,  2094,
  2104,  2111,  2118,  2125,  2132,  2139,  2146,  2153,  2160,  2167,
  2172,  2179,  2184,  2191,  2196,  2203,  2208,  2215,  2220,  2227,
  2232,  2239,  2244,  2251,  2256,  2263,  2268,  2278,  2282,  2287,
  2297,  2319,  2343,  2351,  2370,  2388,  2406,  2435,  2470,  2475,
  2502,  2516,  2534,  2541,  2547,  2550,  2558,  2568,  2570,  2571,
  2572,  2573,  2574,  2575,  2576,  2577,  2584,  2585,  2586,  2587,
  2588,  2589,  2590,  2591,  2592,  2593,  2594,  2595,  2596,  2597,
  2598,  2599,  2600,  2601,  2602,  2603,  2604,  2605,  2606,  2607,
  2608,  2609,  2610,  2611,  2612,  2613,  2614,  2615,  2617,  2618,
  2619,  2620,  2621,  2622,  2623,  2624,  2625,  2626,  2627,  2628,
  2629,  2630,  2631,  2632,  2633,  2634,  2635,  2636,  2637,  2642,
  2647,  2648,  2649,  2650,  2651,  2652,  2656,  2672,  2687,  2707,
  2721,  2734,  2757,  2775,  2793,  2811,  2829,  2836,  2841,  2845,
  2849,  2853,  2859,  2864,  2868,  2872,  2878,  2884,  2891,  2897,
  2901,  2906,  2910,  2921,  2928,  2939,  2959,  2969,  2979,  2989,
  3006,  3025,  3049,  3077,  3083,  3087,  3091,  3103,  3108,  3120,
  3127,  3148,  3153,  3167,  3173,  3179,  3184,  3192,  3200,  3214,
  3228,  3232,  3251,  3273
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline",
"tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tAttractor","tLayers","tAlias","tAliasWithOptions",
"tText2D","tText3D","tInterpolationScheme","tTime","tGrain","tCombine","tBSpline",
"tBezier","tNurbs","tOrder","tKnots","tColor","tColorTable","tFor","tIn","tEndFor",
"tIf","tEndIf","tExit","tReturn","tCall","tFunction","tShow","tHide","tGetValue",
"tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","'~'","All","GeoFormatItems","GeoFormatItem","SendToFile",
"Printf","View","Views","ElementCoords","ElementValues","Element","@1","@2",
"Text2DValues","Text2D","@3","Text3DValues","Text3D","@4","InterpolationMatrix",
"Time","@5","Grain","NumericAffectation","NumericIncrement","Affectation","PhysicalId",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify",
"Visibility","Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12",
"@13","@14","@15","@16","@17","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Embedding","Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   136,   136,   137,   137,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   139,
   139,   140,   140,   140,   140,   141,   141,   142,   142,   142,
   142,   142,   142,   142,   143,   143,   144,   144,   146,   147,
   145,   148,   148,   150,   149,   151,   151,   153,   152,   154,
   156,   155,   157,   158,   158,   158,   158,   158,   159,   159,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   161,
   161,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   163,   163,   163,   163,   164,
   164,   164,   165,   165,   165,   165,   165,   165,   166,   166,
   166,   166,   167,   167,   167,   167,   168,   169,   169,   169,
   169,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   172,   172,   172,   173,   172,   174,   172,   175,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   176,
   172,   177,   172,   178,   172,   179,   172,   180,   172,   181,
   172,   182,   172,   183,   172,   184,   172,   185,   185,   186,
   186,   186,   186,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   188,   188,   188,   188,   189,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   192,   192,   192,
   192,   192,   193,   193,   193,   193,   194,   194,   195,   195,
   195,   195,   195,   196,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   197,   197,   197,   197,   198,   198,   198,
   198,   199,   199,   200,   200,   201,   201,   201,   201,   201,
   201,   201,   201,   201
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     5,     7,     7,     9,     6,     8,     0,     2,     2,
     2,     2,     2,     2,     1,     3,     1,     3,     0,     0,
    10,     1,     3,     0,    13,     1,     3,     0,    15,     8,
     0,     6,     6,     1,     1,     1,     1,     1,     1,     1,
     4,     7,     9,     6,     6,     3,     6,     6,     9,     6,
     9,     5,     8,     8,    11,     6,     9,     9,     9,     1,
     1,     7,     8,    12,     6,     7,     7,     7,     9,     7,
     9,    17,     7,     7,    11,     8,    12,     8,     8,     8,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     6,     6,     4,     6,     3,     4,     5,     3,     3,     4,
     4,     3,     7,     7,     3,     7,     3,     2,     2,    15,
     2,     6,     8,     8,    10,     1,     2,     1,     3,     4,
     1,     5,    11,    13,     0,     7,     0,    13,     0,    15,
     8,     8,     8,    12,    12,    12,    14,    14,    14,     0,
    12,     0,    12,     0,    12,     0,    16,     0,    16,     0,
    16,     0,    18,     0,    18,     0,    18,     1,     2,     5,
     7,     9,     2,     6,     9,     9,     8,     9,     8,     8,
     6,     4,     6,     6,     6,     6,     2,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     4,     4,
     2,     5,     3,     6,     4,     7,     6,     1,     2,     2,
     3,     3,    11,     9,     7,     7,     1,     3,     1,     1,
     2,     3,     4,     3,     5,     4,     1,     1,     1,     3,
     4,     6,     7,     1,     1,     3,     3,     9,     7,     1,
     5,     3,     6,     1,     3,     1,     1,     6,     4,     4,
     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   146,     0,   151,     0,   148,     0,     0,     0,     0,
     4,     6,     5,     7,     8,     9,    10,    11,    12,    13,
    19,    18,    14,    15,    16,    17,   270,   277,   326,    54,
   271,   272,   273,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
   274,   275,   276,    55,    56,    57,    58,     0,     0,     0,
    59,    60,     0,     0,     0,     0,     0,     0,     0,   208,
     0,     0,   139,     0,   141,   277,     0,     0,     0,     0,
   307,   308,   309,   299,     0,   300,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   288,     0,     0,     0,     0,
     0,     0,     0,     0,   113,     0,     0,   113,   207,     0,
     0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     0,     0,     0,   138,     0,   147,   326,   113,     0,   113,
     0,     0,     0,     0,     0,   281,     0,    28,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   277,   211,   210,   212,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    66,   135,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
   277,     0,     0,     0,   301,   314,   315,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   290,   289,     0,     0,     0,     0,
   113,   113,     0,     0,     0,     0,     0,     0,     0,     0,
   113,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,     0,     0,   113,     0,
     0,     0,   149,     0,   128,     0,   129,     0,     0,   283,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   209,     0,     0,     0,     0,    54,     0,     0,
     0,     0,     0,    61,     0,   226,   225,   223,   224,   219,
   221,   220,   222,   214,   213,   215,   216,   217,   218,     0,
     0,     0,   310,     0,     0,     0,     0,     0,   209,     0,
   302,   304,     0,     0,     0,     0,   209,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    80,    81,     0,     0,     0,     0,     0,
     0,     0,   292,   291,   112,     0,   111,   110,     0,     0,
     0,     0,     0,     0,     0,   155,     0,     0,     0,     0,
     0,   119,   114,   202,     0,   126,     0,   123,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   150,   130,   131,     0,   279,   285,     0,    28,    39,     0,
     0,     0,    51,     0,     0,    29,    30,    31,    32,    33,
    34,   228,   249,   229,   250,   230,   251,   231,   252,   232,
   253,   233,   254,   234,   255,   235,   256,   236,   257,   248,
   269,   237,   258,     0,     0,   239,   260,   240,   261,   241,
   262,   242,   263,   243,   264,   244,   265,     0,     0,     0,
     0,     0,     0,     0,     0,   331,     0,     0,   329,   330,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    72,
     0,     0,     0,     0,   280,     0,    22,    20,     0,     0,
     0,     0,   279,   306,   311,     0,   303,     0,   316,   317,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
   108,     0,     0,     0,     0,     0,   152,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   127,     0,     0,     0,
     0,   282,     0,   278,     0,     0,     0,     0,     0,     0,
     0,    26,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    64,    65,     0,     0,     0,
     0,     0,    67,    68,    70,     0,     0,   324,     0,    76,
   227,    21,     0,     0,     0,     0,     0,     0,   305,   203,
     0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
    85,     0,     0,     0,     0,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   188,   120,     0,     0,
     0,     0,     0,     0,   201,   124,     0,     0,   121,   122,
     0,     0,     0,   321,     0,     0,     0,   142,   134,   284,
   133,     0,     0,     0,     0,     0,   297,     0,     0,   238,
   259,   245,   266,   246,   267,   247,   268,     0,   333,   332,
   328,   287,     0,    54,     0,     0,     0,     0,    62,     0,
     0,     0,   322,    23,    24,     0,     0,   312,     0,    82,
    88,     0,    90,     0,     0,    86,     0,    87,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,     0,     0,     0,     0,   113,     0,   170,
     0,   172,     0,   174,     0,     0,   193,     0,   156,   189,
     0,     0,     0,     0,     0,     0,     0,     0,    93,    94,
     0,     0,     0,     0,   286,    27,     0,    35,     0,     0,
     0,     0,     0,    37,     0,     0,     0,     0,     0,    73,
     0,     0,    74,     0,   325,     0,     0,   313,     0,     0,
    96,   101,     0,   199,    99,   100,     0,     0,     0,   197,
   200,   103,    83,    98,   102,   105,     0,     0,     0,   296,
     0,   295,     0,     0,   161,     0,     0,   162,     0,     0,
   163,     0,     0,     0,   299,     0,   115,   116,   117,   118,
     0,     0,     0,     0,   319,     0,   144,   143,    40,     0,
     0,     0,   298,     0,     0,     0,     0,     0,    63,    69,
    71,     0,    77,     0,    25,     0,    89,    91,     0,   196,
   195,   198,    78,    79,   113,     0,   109,     0,     0,     0,
     0,     0,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    36,     0,     0,     0,    38,    52,    53,
   334,     0,   323,     0,     0,     0,     0,   294,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   157,     0,   190,
     0,     0,     0,     0,   318,   145,     0,     0,     0,     0,
    75,     0,     0,   107,     0,   176,     0,     0,   178,     0,
     0,   180,     0,     0,   153,     0,   113,     0,     0,     0,
     0,    95,     0,    44,     0,    50,     0,     0,   293,   164,
     0,     0,   171,   165,     0,     0,   173,   166,     0,     0,
   175,     0,   159,     0,   191,    84,    97,     0,     0,     0,
     0,     0,     0,   182,     0,   184,     0,   186,   158,   154,
     0,     0,    41,     0,    48,     0,     0,     0,   167,     0,
     0,   168,     0,     0,   169,     0,     0,   192,     0,    42,
     0,   140,     0,     0,     0,     0,     0,     0,     0,   160,
     0,     0,     0,     0,   177,     0,   179,     0,   181,     0,
    43,    45,     0,    46,    92,     0,     0,     0,     0,     0,
   183,   185,   187,    47,    49,     0,     0,     0
};

static const short yydefgoto[] = {  1166,
     2,    51,   619,    52,    53,   373,   897,   903,   546,   696,
  1013,  1129,   547,  1099,  1153,   548,  1131,   549,   550,   700,
   551,   117,   206,    54,   483,   513,   131,   496,   497,   132,
    58,    59,    60,    61,    62,   133,   668,  1066,  1111,   946,
   949,   952,  1081,  1085,  1089,  1120,  1123,  1126,   776,   777,
    64,    65,    66,   134,   120,   325,   166,   806,   807,   136,
   298,   190,   614,   729,   485
};

static const short yypact[] = {  2694,
    42,  2762,-32768,  2088,   -55,     5,    71,  1547,   -37,   -29,
  1297,  1422,   -23,   -15,    90,    -9,   -27,    81,   102,   405,
   158,   558,    97,   118,    93,    93,   169,   325,    12,   182,
    16,   304,   190,   305,   336,   344,   203,   225,   232,    17,
    10,-32768,   241,-32768,   380,-32768,   364,   372,    25,    59,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,     0,    21,-32768,
-32768,-32768,-32768,    51,    63,    92,   175,   208,   245,   263,
   362,   370,   401,   449,   463,   486,   498,   515,   535,   542,
   619,   620,   638,   639,   275,   286,   287,   300,-32768,   313,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2293,  2293,  2293,
-32768,-32768,  2293,   672,    20,   443,  2293,   447,  1015,-32768,
   487,   494,-32768,  2293,-32768,   434,   369,  1928,  2293,  1161,
-32768,-32768,-32768,  1482,   416,-32768,  2293,  2293,   383,  2293,
   424,   392,   439,  2293,  2293,  1672,  2293,   390,   406,   407,
  1672,   403,   408,   428,   437,   440,   441,   445,   546,    93,
    93,    93,  2293,  2293,   303,-32768,   391,    93,   476,   477,
   495,  1963,   404,   452,-32768,  1672,    37,-32768,-32768,  1672,
  1672,   491,   492,   621,  2293,  2293,  2293,   518,  2293,   519,
   571,  2293,  2293,-32768,   658,-32768,-32768,-32768,   661,-32768,
   674,   544,  2293,   701,   573,-32768,    93,-32768,  2293,  2293,
  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,
  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,
  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,
  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,
   511,   433,   433,   433,   706,   662,   598,   598,   598,  5213,
    24,  2134,  4500,   293,   608,   732,   615,  1130,-32768,-32768,
  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,  2293,
  2293,  2293,  2293,  2293,  2293,-32768,  -105,  3642,  1738,  2293,
   684,  2134,  5234,  2417,-32768,  1482,-32768,   647,  2293,   705,
  5255,  5276,  2293,  5297,    86,  2293,   722,  5318,  5339,   773,
  5360,  2293,  2293,  2293,   776,  2293,  2293,  2293,  2258,  2258,
  2258,  2258,   659,   339,-32768,-32768,  3668,  3694,    93,    93,
   646,   646,   423,  2293,  2293,  2293,  1963,  1963,  2293,   436,
-32768,  2293,  2820,   163,   785,-32768,  2293,  2837,   792,   797,
  2293,  2293,-32768,  5381,  5402,  5423,   731,  3720,-32768,   675,
  1607,  5444,-32768,  2880,-32768,  2897,-32768,  2293,  4523,   117,
  2293,   409,     3,  5465,  4546,  5486,  4569,  5507,  4592,  5528,
  4615,  5549,  4638,  5570,  4661,  5591,  4684,  5612,  4707,  5633,
  4730,  5654,  4753,  5675,  4776,  3746,  3772,  5696,  4799,  5717,
  4822,  5738,  4845,  5759,  4868,  5780,  4891,  5801,  4914,  3798,
  3824,  3850,  3876,  3902,  3928,   666,   -99,   686,   694,   751,
   717,  2293,-32768,  1672,  1672,   668,    94,   433,  2293,   859,
   862,    22,   752,-32768,  2534,   643,   798,   910,   910,   708,
   708,   708,   708,   657,   657,   598,   598,   598,   598,    11,
  2134,  2293,-32768,  2134,  4937,  1232,  1797,   681,   873,  2134,
-32768,  2553,  2293,   875,   877,  5822,   879,  2293,  2293,  5843,
  2293,   881,   882,  2293,   883,  3056,  5864,  5885,  2293,  3084,
  3112,  5906,   764,  6179,-32768,   765,   766,   768,   769,    93,
  2293,  2293,-32768,-32768,-32768,   762,   540,-32768,   767,  2293,
  3954,  3980,  4006,  3616,    93,  2940,  4960,   -76,   -35,   -31,
   -18,-32768,-32768,-32768,  2293,-32768,  4983,-32768,   770,   772,
  5006,  5029,   893,   895,   899,   789,  2293,  2957,  2293,  2293,
-32768,-32768,-32768,  5052,    18,-32768,  3140,-32768,-32768,   794,
   796,   791,-32768,   799,   920,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2293,  2293,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2293,  2293,  2293,
  2293,  2293,  2293,  2293,   923,-32768,  2134,   433,-32768,-32768,
  2293,   922,   926,   800,    34,  2293,   927,   928,  1265,-32768,
   929,   807,    17,   931,-32768,  2293,-32768,   824,   433,   -60,
  4032,   697,   -54,-32768,-32768,  2134,-32768,    93,  1482,-32768,
  2293,  1394,  1672,  1672,   932,  1672,  1519,  1769,   933,  1889,
  1672,  1672,  2219,   808,   951,   952,   954,   837,   956,   957,
   958,   960,   975,   976,   978,   983,   444,  4058,  4084,-32768,
-32768,  3168,    93,    93,    93,   481,-32768,    91,   984,  2293,
  2134,  2293,  2134,  2134,  2134,  2343,   985,  2293,  2293,   986,
   987,  1672,  1672,  1672,   991,  4110,-32768,  2572,   861,   990,
   994,-32768,   993,-32768,     9,   863,  2293,  2293,  1672,   867,
  2293,-32768,  5927,  5075,  5948,  5098,  5969,  5121,  5990,  5144,
  5167,   874,    -8,   876,  6011,-32768,-32768,    98,   299,   878,
   997,  2362,-32768,-32768,-32768,    17,  2293,-32768,   702,-32768,
  6179,-32768,   999,    50,  2293,   886,   703,    45,  6179,-32768,
    23,    38,  1672,  1000,-32768,-32768,  1672,-32768,  1004,  1005,
-32768,  2293,  1672,  1672,  1672,-32768,   185,  1672,  1672,  1672,
  1672,  1672,  1672,  1672,   291,  2293,  2293,  2293,   884,   179,
   301,   329,  1963,  1013,   887,    -2,-32768,-32768,  6032,   710,
  6053,   713,   716,   720,-32768,-32768,  4136,  4162,-32768,-32768,
  1027,  1030,   953,-32768,  2293,  2293,  2293,-32768,-32768,   117,
-32768,  1031,  2293,  4188,  4214,   721,-32768,  2293,  6074,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   912,-32768,-32768,
-32768,-32768,  1672,   433,  2293,  1038,  1042,    22,-32768,  1041,
  5190,    17,-32768,-32768,-32768,   433,  4240,-32768,   919,-32768,
-32768,    93,-32768,    93,  1043,-32768,  1044,-32768,-32768,  4266,
  1048,  1049,  1050,  2293,  2293,   853,  1051,  1054,  1055,  1056,
  1057,  1058,-32768,  2258,  3196,  6095,  2592,   646,    93,  1059,
    93,  1060,    93,  1062,  3224,   484,-32768,  1672,-32768,-32768,
   873,  1063,   879,  1065,  1066,  1067,  2293,  2293,-32768,-32768,
  1672,  2994,   367,  6116,-32768,-32768,     2,  6179,  2293,  2293,
  1672,   941,   729,  6179,  1672,  1071,  1070,  1072,  2381,-32768,
  1076,  1073,-32768,   947,-32768,  1078,  2293,-32768,    68,    77,
-32768,-32768,  2293,-32768,-32768,-32768,  2458,  2477,  1079,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2496,  1080,   955,-32768,
  2293,-32768,   959,   513,-32768,   961,   522,-32768,   962,   530,
-32768,   963,   964,  2293,   617,   966,-32768,-32768,-32768,-32768,
  4292,  4318,  1003,  2293,-32768,  2293,-32768,-32768,-32768,  2293,
  4344,  4370,-32768,  1672,  2293,  1083,  1085,   965,-32768,-32768,
-32768,    17,-32768,  1012,-32768,  4396,-32768,-32768,  4422,-32768,
-32768,-32768,-32768,-32768,   646,  3028,-32768,  1963,    91,  1963,
    91,  1963,    91,-32768,  3252,  1095,  1672,  2293,  2293,  2293,
  3280,  3308,   969,  6179,  2293,  2293,   730,  6179,-32768,-32768,
-32768,  1098,-32768,  2293,  1100,   973,  2293,-32768,  3336,   534,
    32,  3364,   539,    41,  3392,   541,   165,  3000,   979,-32768,
   738,  3420,  3448,  2515,-32768,-32768,  2293,  6137,  4448,  1102,
-32768,  4474,   977,-32768,  3476,  1105,  2293,  1107,  1108,  2293,
  1109,  1110,  2293,  1111,-32768,    91,-32768,  1672,  1113,  1115,
  1132,-32768,   739,-32768,  2293,-32768,  2293,  1137,-32768,-32768,
  1010,  3504,-32768,-32768,  1011,  3532,-32768,-32768,  1014,  3560,
-32768,   170,  3017,  1016,-32768,-32768,-32768,  1140,  1021,  6158,
  3588,  1017,    91,  1142,    91,  1157,    91,  1160,-32768,-32768,
    91,  1162,-32768,   433,-32768,  1163,  1189,   173,-32768,  1034,
   240,-32768,  1064,   273,-32768,  1068,   320,-32768,   742,-32768,
  1074,-32768,  1061,  1190,    91,  1192,    91,  1193,    91,-32768,
   433,  1194,   433,  1197,-32768,   355,-32768,   357,-32768,   376,
-32768,-32768,   745,-32768,-32768,  1198,  1199,  1200,   433,  1202,
-32768,-32768,-32768,-32768,-32768,  1209,  1210,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   478,-32768,-32768,   673,-32768,   166,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -259,    30,-32768,  -108,  1212,    -1,  -330,  -163,     7,
-32768,-32768,-32768,-32768,-32768,  1213,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -993,  -684,
-32768,-32768,-32768,    43,-32768,    14,-32768,   242,   398,   -67,
  -243,  -610,   389,-32768,    -4
};


#define	YYLAST		6304


static const short yytable[] = {   121,
    56,   499,   728,   202,   429,  1031,   539,  1034,    57,  1037,
   123,   343,   539,   191,   348,   174,   617,   148,   426,   177,
   188,   450,   197,   264,   207,   612,   451,   596,   841,   197,
   424,   139,   597,   118,   364,   142,   366,   719,   165,   167,
   345,   173,   346,   843,   199,   201,   119,     3,   458,   670,
   840,    95,    96,    97,    98,   835,   671,    99,    95,    96,
    97,    98,   297,   197,    99,   774,   734,   111,   112,   775,
   122,   460,  1092,   987,   842,   691,   125,   540,   541,   542,
   543,   544,   988,   540,   541,   542,   543,   544,   137,   844,
   672,   880,    95,    96,    97,    98,   138,   673,    99,   774,
    70,   674,   144,   775,    70,   265,   266,   145,   774,  1118,
   145,  1121,   775,  1124,   675,   830,   147,  1127,   820,   720,
   721,   111,   112,   460,   618,   149,   425,   203,   969,   204,
   468,   879,   469,   970,   205,   192,   545,   124,   146,   111,
   112,  1146,   802,  1148,   175,  1150,   150,   691,   178,   189,
   257,   258,   259,   208,   613,   260,   263,   198,   774,   268,
   329,   330,   775,   618,   347,  1058,   288,   606,   514,   515,
   258,   293,   296,   324,  1061,   326,   209,   506,   210,   301,
   302,   333,   304,   329,   330,   340,   308,   309,   211,   311,
   212,   200,   329,   330,   297,   528,   104,   105,   106,   107,
   104,   105,   106,   107,   154,   327,   328,   620,   161,   162,
   622,   486,   487,   488,   328,   111,   112,   213,   163,   214,
   372,   915,   159,   605,   297,   164,   176,   354,   355,   356,
   180,   358,   774,   181,   361,   362,   775,   774,   111,   112,
   774,   775,   854,   855,   775,   369,   417,   418,   419,   420,
   160,   374,   375,   376,   377,   378,   379,   380,   381,   382,
   383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
   393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
   403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
   413,   414,   415,   430,   329,   330,   863,   864,  1064,   428,
   215,   168,   216,  1109,   296,   824,  1134,   774,   182,   179,
   869,   775,   870,   435,   436,   437,   438,   439,   440,   441,
   442,   443,   444,   445,   446,   447,   448,   449,   185,   495,
   495,   455,   456,   217,   296,   218,   258,   498,   498,   183,
   774,   462,   493,   494,   775,   466,   880,   184,   470,   880,
   186,   326,   880,   713,   476,   477,   478,   187,   480,   481,
   482,   484,   484,   484,   484,   169,   193,   195,   170,   171,
   219,  1022,   220,  1136,   966,   196,   501,   502,   503,   257,
   258,   504,   737,   297,   507,   194,   297,   774,   221,   517,
   222,   775,   630,   521,   522,   104,   105,   106,   107,   536,
   251,   104,   105,   106,   107,   135,  1138,   880,   141,   143,
   534,   252,   253,   537,   111,   112,   329,   330,   329,   330,
   111,   112,   774,   608,   774,   254,   775,   780,   775,   782,
   783,   784,   871,   880,   872,   331,   880,   197,   255,   880,
   161,   162,   880,   774,   329,   330,   267,   775,   151,   152,
   163,   153,   269,  1140,   329,   330,   607,   172,   823,   825,
   873,   880,   874,   880,   455,   880,    95,    96,    97,    98,
   490,   609,    99,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   223,  1156,   224,
  1157,   285,   286,   296,   621,   225,   296,   226,   287,   455,
   967,   290,   629,   657,   300,   632,   329,   330,   303,  1158,
   637,   638,   305,   640,   416,   197,   643,   306,   666,   329,
   330,   648,   312,   332,   329,   330,   227,   307,   228,   297,
   693,   313,   314,   658,   659,   316,   341,   943,   329,   330,
   317,   538,   662,   310,    95,    96,    97,    98,   315,   323,
    99,   329,   330,   318,   500,   111,   112,   676,   297,   329,
   330,   289,   319,   204,   692,   320,   321,   505,   205,   686,
   322,   688,   689,   344,   229,   766,   230,   349,   350,   342,
   508,     9,    10,   509,   510,    13,   511,    15,   231,    16,
   232,    18,    19,   714,    21,    22,   329,   330,   155,   329,
   330,   156,   157,   297,   158,   297,   297,   297,   334,   335,
    33,   233,   773,   234,   733,   954,   703,   704,   351,   352,
    37,    38,    39,   235,   299,   236,   353,   336,   329,   330,
   705,   706,   707,   708,   709,   710,   711,   329,   330,   296,
   237,   738,   238,   715,   998,   329,   330,   357,   722,   329,
   330,   359,   692,  1000,   329,   330,   329,   330,   731,   360,
   239,  1002,   240,   363,  1026,  1057,   365,   241,   296,   242,
  1060,   368,  1063,   739,    67,   256,   770,   771,   772,   367,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,   370,   371,    24,    25,    26,    27,
   421,    29,   779,   296,   781,   296,   296,   296,    34,    35,
   787,   788,   285,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   431,   432,   804,
   805,   285,   433,   809,   243,   245,   244,   246,   826,   463,
  1006,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   247,   249,   248,   250,   285,   471,   831,
   100,   101,   102,   103,   282,   283,   284,   837,   460,   474,
   461,   285,   479,   111,   112,   489,   876,   108,   109,   422,
   516,   204,   110,   594,   850,   595,   205,   113,   519,   460,
   261,   604,   116,   520,   262,   111,   112,   529,   865,   866,
   867,   457,   460,   204,   627,   875,   526,   598,   205,   908,
   599,   602,   603,   280,   281,   282,   283,   284,   460,   895,
   736,   916,   285,   832,   460,   833,   839,   892,   893,   894,
  1038,   460,   756,   882,   460,   898,   884,   460,   601,   885,
   904,   460,   901,   886,   902,   919,   929,   920,   930,   938,
   975,   901,   976,  1050,   610,   611,   495,   909,   797,  1068,
   975,  1069,  1098,  1141,   498,  1142,  1159,   600,  1160,   628,
   615,   633,   944,   634,   947,   636,   950,   641,   642,   644,
   652,   653,   654,   757,   655,   660,   927,   928,   656,   682,
   661,   683,   678,  1093,   679,   684,   937,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   685,   697,
   955,   698,   285,   699,   701,   702,   712,   716,   718,   961,
   962,   717,   723,   724,   727,   726,   730,   732,   743,   747,
   752,   971,   972,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   753,   754,   986,
   755,   285,   758,   759,   760,   989,   761,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   762,   763,   996,   764,   285,   765,   798,   803,   778,
   786,   789,   790,   495,   794,   799,  1005,   800,   801,   808,
   819,   498,   821,   828,   834,   846,  1011,   827,  1012,   848,
   849,  1030,  1014,  1033,   838,  1036,   868,  1018,   877,   878,
   270,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   741,   742,   889,   744,   285,   890,   896,   891,   749,   750,
  1029,   906,  1032,   910,  1035,   911,   913,   918,   921,   922,
  1042,  1043,  1044,   924,   925,   926,   931,  1048,  1049,   932,
   933,   934,   935,   936,   945,   948,  1052,   951,   957,  1055,
   958,   959,   960,   974,   978,   979,   984,   980,   983,   791,
   792,   793,   982,   985,   992,   994,  1010,   995,  1019,   904,
  1020,  1021,   997,   999,  1001,  1003,  1004,  1007,  1023,  1082,
  1040,  1047,  1086,  1051,  1053,  1090,  1054,  1076,  1078,  1130,
  1080,  1067,  1083,  1084,  1087,  1088,  1091,  1100,  1095,  1101,
  1096,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   434,  1151,  1097,  1154,   285,
   845,  1102,  1103,  1105,   847,  1113,  1107,  1119,  1117,  1112,
   851,   852,   853,  1114,  1164,   856,   857,   858,   859,   860,
   861,   862,  1122,    67,   126,  1125,  1135,  1128,  1132,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,  1133,  1144,  1145,  1137,  1147,  1149,  1152,
  1139,   127,  1155,  1161,  1162,  1163,  1143,  1165,  1167,  1168,
   695,   836,  1073,    55,    63,  1017,   912,     0,     0,     0,
   907,    24,    25,    26,    27,    28,    29,     0,     0,     0,
     0,     0,     0,    34,    35,     0,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,   100,
   101,   102,   103,     0,     0,     0,     0,     0,     0,     0,
   725,     0,     0,     0,     0,   956,   108,   294,     0,     0,
     0,   110,     0,     0,     0,     0,   113,     0,   963,     0,
     0,   116,     0,     0,   295,     0,     0,     0,   973,    67,
   126,     0,   977,     0,     0,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,     0,
     0,     0,     0,     0,     0,     0,     0,   127,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,    24,    25,    26,
    27,    28,    29,   139,     0,   624,     0,     0,     0,    34,
    35,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,     0,     0,     0,   100,   101,   102,   103,   740,
     0,     0,     0,     0,  1041,     0,     0,     0,     0,     0,
     0,     0,   108,   128,     0,     0,     0,   110,     0,     0,
     0,     0,   140,     0,    67,   126,     0,   116,     0,   130,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,     0,     0,     0,     0,     0,     0,
     0,     0,   127,     0,     0,  1094,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    24,    25,    26,    27,    28,    29,   142,   299,
     0,     0,     0,     0,    34,    35,     0,     0,     0,     0,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   100,   101,   102,   103,   745,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,   128,     0,
     0,     0,   110,     0,     0,     0,     0,   113,     0,    67,
   126,     0,   116,     0,   130,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,     0,
     0,     0,     0,     0,     0,     0,     0,   127,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,    24,    25,    26,
    27,    28,    29,     0,   530,     0,     0,     0,     0,    34,
    35,     0,     0,     0,     0,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   100,   101,   102,   103,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   108,   128,     0,     0,     0,   110,     0,     0,
     0,     0,   129,     0,    67,   126,     0,   116,     0,   130,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,     0,     0,     0,     0,     0,     0,
     0,     0,   127,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,    24,    25,    26,    27,    28,    29,     0,     0,
    67,   256,     0,     0,    34,    35,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
   100,   101,   102,   103,   746,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,   128,     0,
     0,     0,   110,     0,     0,     0,     0,   113,     0,    67,
   256,     0,   116,     0,   130,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,     0,
     0,     0,     0,     0,     0,     0,   100,   101,   102,   103,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,     0,     0,     0,   110,     0,
     0,     0,     0,   113,     0,     0,   453,     0,   116,     0,
   454,     0,     0,     0,     0,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,   748,   100,   101,   102,   103,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   108,   109,     0,     0,     0,   110,     0,     0,
     0,     0,   113,     0,     0,   625,     0,   116,     0,   626,
    67,   291,     0,     0,     0,     0,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
     0,     0,     0,     0,     0,    67,   256,     0,     0,     0,
     0,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   100,   101,   102,   103,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,   109,     0,     0,     0,   110,     0,
     0,     0,     0,   113,     0,     0,     0,     0,   116,     0,
   292,   100,   101,   102,   103,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   337,   338,
     0,     0,     0,   110,     0,     0,     0,     0,   339,     0,
    67,    68,    69,   116,    70,   164,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
     0,    95,    96,    97,    98,     0,     0,    99,     0,     0,
     0,     0,     0,     0,     0,     0,    67,   126,     0,     0,
     0,     0,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,     0,     0,     0,     0,
     0,     0,     0,     0,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   100,   101,   102,   103,
   104,   105,   106,   107,    24,    25,    26,    27,    28,    29,
     0,     0,     0,   108,   109,     0,    34,    35,   110,   111,
   112,     0,     0,   113,     0,   114,     0,   115,   116,     0,
     0,     0,     0,     0,   751,     0,     0,     0,     0,     0,
     0,     0,   100,   101,   102,   103,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
   294,     0,     0,     0,   110,     0,     0,     0,     0,   113,
    67,   256,   197,     0,   116,     0,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
     0,    95,    96,    97,    98,    67,   256,    99,     0,     0,
     0,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,     0,   785,     0,
     0,     0,     0,     0,     0,     0,   100,   101,   102,   103,
     0,     0,     0,     0,     0,     0,     0,   829,     0,     0,
     0,     0,     0,   108,   109,     0,     0,     0,   110,     0,
     0,     0,     0,   113,     0,     0,   981,     0,   116,     0,
     0,   100,   101,   102,   103,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
     0,     0,     0,   110,     0,     0,     0,     0,   113,    67,
   291,     0,     0,   116,     0,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   990,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   991,     0,     0,     0,   285,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   993,     0,     0,     0,   285,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   100,   101,   102,   103,     0,
  1072,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   108,   109,     0,     0,     0,   110,     0,     0,
     0,   616,   113,     0,     0,     0,     0,   116,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   631,     0,     0,     0,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,   796,
     0,     0,   285,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,    -3,     1,     0,   285,    -3,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   941,     0,   942,    -3,     0,     0,     0,
     0,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,     0,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,    -3,    -3,    -3,    -3,     4,    -3,    -3,     0,     0,
     0,     0,     0,    -3,    -3,    -3,    -3,     0,     0,    -3,
     0,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,     0,     5,     0,     0,     0,     0,     6,
     7,     0,     8,     9,    10,    11,    12,    13,    14,    15,
     0,    16,    17,    18,    19,    20,    21,    22,     0,     0,
     0,    23,    24,    25,    26,    27,    28,    29,     0,    30,
    31,    32,    33,     0,    34,    35,     0,     0,     0,     0,
     0,    36,    37,    38,    39,     0,     0,    40,     0,    41,
     0,    42,    43,    44,    45,    46,    47,    48,    49,    50,
   508,     9,    10,   509,   510,    13,   511,    15,     0,    16,
     0,    18,    19,     0,    21,    22,     0,   508,     9,    10,
   509,   510,    13,   511,    15,     0,    16,     0,    18,    19,
    33,    21,    22,     0,     0,     0,     0,     0,     0,     0,
    37,    38,    39,     0,     0,     0,     0,    33,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    37,    38,    39,
   508,     9,    10,   509,   510,    13,   511,    15,     0,    16,
     0,    18,    19,     0,    21,    22,     0,   508,     9,    10,
   509,   510,    13,   511,    15,     0,    16,     0,    18,    19,
    33,    21,    22,   512,     0,     0,     0,     0,     0,     0,
    37,    38,    39,     0,     0,     0,     0,    33,     0,     0,
   518,     0,     0,     0,     0,     0,     0,    37,    38,    39,
   508,     9,    10,   509,   510,    13,   511,    15,     0,    16,
     0,    18,    19,     0,    21,    22,     0,   508,     9,    10,
   509,   510,    13,   511,    15,     0,    16,     0,    18,    19,
    33,    21,    22,   532,     0,     0,     0,     0,     0,     0,
    37,    38,    39,     0,     0,     0,     0,    33,     0,     0,
   533,     0,     0,     0,     0,     0,     0,    37,    38,    39,
   508,     9,    10,   509,   510,    13,   511,    15,     0,    16,
     0,    18,    19,     0,    21,    22,     0,   508,     9,    10,
   509,   510,    13,   511,    15,     0,    16,     0,    18,    19,
    33,    21,    22,   667,     0,     0,     0,     0,     0,     0,
    37,    38,    39,     0,     0,     0,     0,    33,     0,     0,
   687,     0,     0,     0,     0,     0,     0,    37,    38,    39,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   964,     0,   965,     0,     0,
     0,     0,     0,  1065,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
  1110,     0,   285,     0,     0,     0,     0,     0,     0,  1027,
     0,  1028,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,   645,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,   649,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,   650,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,   694,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,   769,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,   939,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,   953,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,  1039,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,  1045,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,  1046,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,  1056,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,  1059,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,  1062,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,  1070,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,  1071,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,     0,     0,  1079,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,     0,     0,  1104,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,     0,     0,  1106,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,  1108,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,     0,
     0,  1116,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   423,     0,     0,     0,     0,   491,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   452,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   491,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   492,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   527,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   574,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   575,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   588,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   589,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   590,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   591,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   592,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   593,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   663,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   664,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   665,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   735,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   767,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   768,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   795,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   887,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,   888,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,   899,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,   900,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,   917,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,   923,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,  1008,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,  1009,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,  1015,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,  1016,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,     0,     0,     0,  1024,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
     0,     0,     0,  1025,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,     0,     0,     0,  1075,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,     0,  1077,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,   427,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,     0,
     0,   535,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,   553,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,   555,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
   557,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,     0,   559,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,   561,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,   563,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,   565,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,     0,     0,   567,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,   569,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,     0,
     0,   571,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,   573,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,   577,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
   579,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,     0,   581,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,   583,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,   585,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,   587,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,     0,     0,   623,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,   669,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,     0,
     0,   677,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,     0,     0,   680,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,     0,     0,   681,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,     0,     0,
   690,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,     0,     0,   811,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,     0,     0,   813,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,     0,     0,   815,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
     0,     0,   817,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,     0,     0,   818,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,     0,     0,   914,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   423,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   459,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   464,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   465,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   467,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   472,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   473,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   475,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   523,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   524,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   525,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   531,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   552,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   554,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   556,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   558,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   560,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   562,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   564,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   566,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   568,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   570,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   572,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   576,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   578,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   580,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   582,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   584,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   586,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   635,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   639,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   646,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   647,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   651,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,   810,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,   812,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285,     0,   814,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,   285,     0,   816,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,   285,     0,   822,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,   285,     0,   881,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,   285,     0,   883,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,   285,     0,
   905,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,   285,
     0,   940,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
   285,     0,   968,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,   285,     0,  1074,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,   285,     0,  1115,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,   285
};

static const short yycheck[] = {     4,
     2,   332,   613,     4,   264,   999,     4,  1001,     2,  1003,
     6,   175,     4,     4,   178,     4,     6,    45,   262,     4,
     4,   127,     5,     4,     4,     4,   132,   127,     6,     5,
     7,    67,   132,     4,   198,    67,   200,     4,    25,    26,
     4,    28,     6,     6,    49,    50,     4,     6,   292,   126,
     6,    34,    35,    36,    37,     6,   133,    40,    34,    35,
    36,    37,   130,     5,    40,    68,   127,   122,   123,    72,
   126,   132,  1066,     6,    52,   130,     6,    75,    76,    77,
    78,    79,     6,    75,    76,    77,    78,    79,   126,    52,
   126,   776,    34,    35,    36,    37,   126,   133,    40,    68,
     7,   133,   126,    72,     7,    86,    87,   126,    68,  1103,
   126,  1105,    72,  1107,   133,   726,   126,  1111,   127,    86,
    87,   122,   123,   132,   114,    45,   103,   128,   127,   130,
    45,   134,    47,   132,   135,   126,   134,   133,    49,   122,
   123,  1135,   134,  1137,   133,  1139,    45,   130,   133,   133,
   108,   109,   110,   133,   133,   113,   114,   133,    68,   117,
   116,   117,    72,   114,   128,   134,   124,   427,     6,     7,
   128,   129,   130,   160,   134,   162,   126,   341,   128,   137,
   138,   168,   140,   116,   117,   172,   144,   145,   126,   147,
   128,   133,   116,   117,   262,   359,   103,   104,   105,   106,
   103,   104,   105,   106,    47,   163,   164,   451,   116,   117,
   454,   320,   321,   322,   172,   122,   123,   126,   126,   128,
   207,   832,   126,   130,   292,   133,    45,   185,   186,   187,
    41,   189,    68,    44,   192,   193,    72,    68,   122,   123,
    68,    72,    58,    59,    72,   203,   251,   252,   253,   254,
   133,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   264,   116,   117,     6,     7,   134,     7,
   126,   133,   128,   134,   262,     7,   134,    68,     4,     6,
   132,    72,   134,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   126,   331,
   332,   289,   290,   126,   292,   128,   294,   331,   332,     4,
    68,   299,   329,   330,    72,   303,  1031,     4,   306,  1034,
   126,   338,  1037,   597,   312,   313,   314,   126,   316,   317,
   318,   319,   320,   321,   322,    41,   126,     4,    44,    45,
   126,   982,   128,   134,     8,     4,   334,   335,   336,   337,
   338,   339,   626,   451,   342,     6,   454,    68,   126,   347,
   128,    72,   460,   351,   352,   103,   104,   105,   106,   370,
   126,   103,   104,   105,   106,     8,   134,  1092,    11,    12,
   368,   126,   126,   371,   122,   123,   116,   117,   116,   117,
   122,   123,    68,   428,    68,   126,    72,   671,    72,   673,
   674,   675,   132,  1118,   134,   133,  1121,     5,   126,  1124,
   116,   117,  1127,    68,   116,   117,     4,    72,    44,    45,
   126,    47,     6,   134,   116,   117,   427,   133,   718,   719,
   132,  1146,   134,  1148,   422,  1150,    34,    35,    36,    37,
   132,   429,    40,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   126,   134,   128,
   134,   125,     6,   451,   452,   126,   454,   128,     5,   457,
   134,   133,   460,   490,    89,   463,   116,   117,   126,   134,
   468,   469,    89,   471,     4,     5,   474,   126,   505,   116,
   117,   479,   133,   133,   116,   117,   126,    89,   128,   597,
   535,   126,   126,   491,   492,   133,   133,   868,   116,   117,
   133,   133,   500,   146,    34,    35,    36,    37,   151,     4,
    40,   116,   117,   126,   132,   122,   123,   515,   626,   116,
   117,   128,   126,   130,   535,   126,   126,   132,   135,   527,
   126,   529,   530,   176,   126,   132,   128,   180,   181,   128,
    41,    42,    43,    44,    45,    46,    47,    48,   126,    50,
   128,    52,    53,   598,    55,    56,   116,   117,    41,   116,
   117,    44,    45,   671,    47,   673,   674,   675,   133,   133,
    71,   126,   132,   128,   619,   132,   574,   575,   128,   128,
    81,    82,    83,   126,     8,   128,     6,   133,   116,   117,
   588,   589,   590,   591,   592,   593,   594,   116,   117,   597,
   126,   628,   128,   601,   132,   116,   117,   130,   606,   116,
   117,   133,   623,   132,   116,   117,   116,   117,   616,    89,
   126,   132,   128,     6,   995,   132,     6,   126,   626,   128,
   132,   128,   132,   631,     3,     4,   663,   664,   665,     6,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     4,   133,    61,    62,    63,    64,
     5,    66,   670,   671,   672,   673,   674,   675,    73,    74,
   678,   679,   125,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   130,     7,   697,
   698,   125,   128,   701,   126,   126,   128,   128,   719,    45,
   134,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   126,   126,   128,   128,   125,    47,   727,
    99,   100,   101,   102,   118,   119,   120,   735,   132,     7,
   134,   125,     7,   122,   123,   127,   773,   116,   117,   128,
     6,   130,   121,   128,   752,   130,   135,   126,     7,   132,
   129,   134,   131,     7,   133,   122,   123,   133,   766,   767,
   768,   128,   132,   130,   134,   773,    86,   132,   135,   824,
   127,   424,   425,   116,   117,   118,   119,   120,   132,   800,
   134,   836,   125,   132,   132,   134,   134,   795,   796,   797,
  1004,   132,     6,   134,   132,   803,   134,   132,   132,   134,
   808,   132,   132,   134,   134,   842,     4,   844,     6,   864,
   132,   132,   134,   134,     6,     4,   868,   825,     8,   132,
   132,   134,   134,   132,   868,   134,   132,   127,   134,     7,
   129,     7,   869,     7,   871,     7,   873,     7,     7,     7,
   127,   127,   127,    57,   127,   134,   854,   855,   130,     7,
   134,     7,   133,  1067,   133,     7,   864,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   130,   126,
   878,   126,   125,   133,   126,     6,     4,     6,   129,   887,
   888,     6,     6,     6,   128,     7,     6,   114,     7,     7,
   133,   899,   900,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,     7,     7,   917,
     7,   125,     7,     7,     7,   923,     7,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,     7,     7,   941,     7,   125,     4,   127,   126,     6,
     6,     6,     6,   995,     4,     6,   954,     4,     6,   133,
   127,   995,   127,     7,     6,     6,   964,   130,   966,     6,
     6,   998,   970,  1000,   129,  1002,   133,   975,     6,   133,
     6,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   633,   634,     6,   636,   125,     6,     6,    85,   641,   642,
   998,   130,  1000,     6,  1002,     4,     6,   129,     6,     6,
  1008,  1009,  1010,     6,     6,     6,     6,  1015,  1016,     6,
     6,     6,     6,     6,     6,     6,  1024,     6,     6,  1027,
     6,     6,     6,   133,     4,     6,   130,     6,     6,   682,
   683,   684,     7,     6,     6,     6,    84,   133,     6,  1047,
     6,   127,   134,   133,   133,   133,   133,   132,    87,  1057,
     6,   133,  1060,     6,     5,  1063,   134,     6,   132,  1114,
     6,   133,     6,     6,     6,     6,     6,  1075,     6,  1077,
     6,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,     6,  1141,     6,  1143,   125,
   743,     5,   133,   133,   747,     6,   133,     6,   132,   134,
   753,   754,   755,   133,  1159,   758,   759,   760,   761,   762,
   763,   764,     6,     3,     4,     6,   133,     6,     6,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     5,   134,     6,   133,     6,     6,     6,
   133,    41,     6,     6,     6,     6,   133,     6,     0,     0,
   538,   734,  1047,     2,     2,   974,   828,    -1,    -1,    -1,
   823,    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,
    -1,    -1,    -1,    73,    74,    -1,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    99,
   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,    -1,   878,   116,   117,    -1,    -1,
    -1,   121,    -1,    -1,    -1,    -1,   126,    -1,   891,    -1,
    -1,   131,    -1,    -1,   134,    -1,    -1,    -1,   901,     3,
     4,    -1,   905,    -1,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    61,    62,    63,
    64,    65,    66,    67,    -1,   134,    -1,    -1,    -1,    73,
    74,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   102,     6,
    -1,    -1,    -1,    -1,  1007,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   116,   117,    -1,    -1,    -1,   121,    -1,    -1,
    -1,    -1,   126,    -1,     3,     4,    -1,   131,    -1,   133,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,  1068,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    61,    62,    63,    64,    65,    66,    67,     8,
    -1,    -1,    -1,    -1,    73,    74,    -1,    -1,    -1,    -1,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    99,   100,   101,   102,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,   117,    -1,
    -1,    -1,   121,    -1,    -1,    -1,    -1,   126,    -1,     3,
     4,    -1,   131,    -1,   133,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    61,    62,    63,
    64,    65,    66,    -1,     8,    -1,    -1,    -1,    -1,    73,
    74,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,    99,   100,   101,   102,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   116,   117,    -1,    -1,    -1,   121,    -1,    -1,
    -1,    -1,   126,    -1,     3,     4,    -1,   131,    -1,   133,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    61,    62,    63,    64,    65,    66,    -1,    -1,
     3,     4,    -1,    -1,    73,    74,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    99,   100,   101,   102,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,   117,    -1,
    -1,    -1,   121,    -1,    -1,    -1,    -1,   126,    -1,     3,
     4,    -1,   131,    -1,   133,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   102,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,   129,    -1,   131,    -1,
   133,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,     6,    99,   100,   101,   102,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   116,   117,    -1,    -1,    -1,   121,    -1,    -1,
    -1,    -1,   126,    -1,    -1,   129,    -1,   131,    -1,   133,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   102,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,
   133,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,   117,
    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,   126,    -1,
     3,     4,     5,   131,     7,   133,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    34,    35,    36,    37,    -1,    -1,    40,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   102,
   103,   104,   105,   106,    61,    62,    63,    64,    65,    66,
    -1,    -1,    -1,   116,   117,    -1,    73,    74,   121,   122,
   123,    -1,    -1,   126,    -1,   128,    -1,   130,   131,    -1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,
   117,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,   126,
     3,     4,     5,    -1,   131,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    34,    35,    36,    37,     3,     4,    40,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   102,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,    -1,    -1,   116,   117,    -1,    -1,    -1,   121,    -1,
    -1,    -1,    -1,   126,    -1,    -1,     6,    -1,   131,    -1,
    -1,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,   117,
    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,   126,     3,
     4,    -1,    -1,   131,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,     6,    -1,    -1,    -1,   125,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,     6,    -1,    -1,    -1,   125,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,     6,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    99,   100,   101,   102,    -1,
     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   116,   117,    -1,    -1,    -1,   121,    -1,    -1,
    -1,     8,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     8,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,     8,
    -1,    -1,   125,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,     0,     1,    -1,   125,     4,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,    -1,   134,    33,    -1,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
    47,    48,    -1,    50,    51,    52,    53,    54,    55,    56,
    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
    -1,    68,    69,    70,    71,     4,    73,    74,    -1,    -1,
    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,    86,
    -1,    88,    -1,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    -1,    -1,    33,    -1,    -1,    -1,    -1,    38,
    39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
    -1,    50,    51,    52,    53,    54,    55,    56,    -1,    -1,
    -1,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
    69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,
    -1,    80,    81,    82,    83,    -1,    -1,    86,    -1,    88,
    -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    -1,    52,    53,    -1,    55,    56,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    -1,    52,    53,
    71,    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    81,    82,    83,    -1,    -1,    -1,    -1,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    -1,    52,    53,    -1,    55,    56,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    -1,    52,    53,
    71,    55,    56,   134,    -1,    -1,    -1,    -1,    -1,    -1,
    81,    82,    83,    -1,    -1,    -1,    -1,    71,    -1,    -1,
   134,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    -1,    52,    53,    -1,    55,    56,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    -1,    52,    53,
    71,    55,    56,   134,    -1,    -1,    -1,    -1,    -1,    -1,
    81,    82,    83,    -1,    -1,    -1,    -1,    71,    -1,    -1,
   134,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    -1,    52,    53,    -1,    55,    56,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    -1,    52,    53,
    71,    55,    56,   134,    -1,    -1,    -1,    -1,    -1,    -1,
    81,    82,    83,    -1,    -1,    -1,    -1,    71,    -1,    -1,
   134,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,    -1,   134,    -1,    -1,
    -1,    -1,    -1,   134,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
   134,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
    -1,   134,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   134,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   134,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   134,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   134,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   134,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   134,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   134,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   134,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   134,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   134,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   134,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   134,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,   127,    -1,    -1,    -1,    -1,   132,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,   132,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,   132,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,   132,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,   132,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,   132,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,   132,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,   132,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,   132,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
    -1,   129,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,   129,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
   129,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,    -1,    -1,   129,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,   129,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,   129,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,    -1,    -1,   129,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
    -1,   129,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,   129,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
   129,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,    -1,    -1,   129,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,   129,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,   129,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,    -1,    -1,   129,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
    -1,   129,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,   129,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
   129,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,    -1,    -1,   129,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,   129,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,   129,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,    -1,    -1,   129,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
   127,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,   127,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,   127,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,   127,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
   127,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,   127,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,   127,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,   127,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
   127,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,   127,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,   127,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,   127,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
   127,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,   127,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,   127,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,   127,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
   127,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
    -1,   127,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
   125,    -1,   127,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
    -1,   125,    -1,   127,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
    -1,    -1,   125,    -1,   127,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
    -1,    -1,    -1,   125
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 143 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 154 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 158 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 159 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 11:
#line 160 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 163 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 15:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 20:
#line 173 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 21:
#line 177 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 22:
#line 184 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 23:
#line 189 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 24:
#line 204 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 25:
#line 217 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 26:
#line 246 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 253 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 28:
#line 263 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 35:
#line 279 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 36:
#line 281 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 37:
#line 286 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 288 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 39:
#line 293 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 40:
#line 483 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 41:
#line 501 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 42:
#line 512 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 517 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 44:
#line 525 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 45:
#line 532 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 46:
#line 539 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 544 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 48:
#line 552 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 49:
#line 559 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 50:
#line 567 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 574 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 52:
#line 578 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 583 "Gmsh.y"
{
      (*View->Grains) [(int)yyvsp[-3].d] = yyvsp[-1].l;
    ;
    break;}
case 54:
#line 591 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 55:
#line 592 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 56:
#line 593 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 57:
#line 594 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 58:
#line 595 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 59:
#line 599 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 60:
#line 600 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 61:
#line 608 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 62:
#line 639 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 63:
#line 678 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 64:
#line 732 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 749 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 66:
#line 767 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 67:
#line 778 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 68:
#line 797 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 69:
#line 811 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 70:
#line 828 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 71:
#line 854 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 72:
#line 881 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 73:
#line 895 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 74:
#line 912 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 926 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 76:
#line 943 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 77:
#line 963 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 78:
#line 986 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 79:
#line 996 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 80:
#line 1011 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 81:
#line 1015 "Gmsh.y"
{ 
      yyval.i = GMODEL->setPhysicalName(std::string(yyvsp[0].c), ++THEM->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 82:
#line 1026 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v = Create_Vertex(num, x, y, z, lc, 1.0);
	Tree_Add(THEM->Points, &v);
	AddToTemporaryBoundingBox(x, y, z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 83:
#line 1044 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1060 "Gmsh.y"
{
      yymsg(WARNING, "Attractors are deprecated");
      List_Delete(yyvsp[-9].l);
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 85:
#line 1067 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GMODEL->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 86:
#line 1089 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 87:
#line 1107 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 88:
#line 1125 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 89:
#line 1143 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 90:
#line 1169 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 91:
#line 1187 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 92:
#line 1214 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 93:
#line 1233 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 94:
#line 1257 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 95:
#line 1281 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1307 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1324 "Gmsh.y"
{
      yymsg(WARNING, "Attractors are deprecated");
      List_Delete(yyvsp[-9].l);
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 98:
#line 1331 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1350 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1368 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1406 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1422 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1442 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1459 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1476 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1497 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 107:
#line 1502 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 108:
#line 1507 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 109:
#line 1512 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 110:
#line 1519 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 111:
#line 1520 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 112:
#line 1521 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 113:
#line 1526 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 114:
#line 1530 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 115:
#line 1534 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 116:
#line 1550 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 117:
#line 1566 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 118:
#line 1582 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 119:
#line 1603 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 120:
#line 1617 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 121:
#line 1623 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 122:
#line 1629 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 123:
#line 1641 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 124:
#line 1650 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 125:
#line 1660 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GMODEL->destroy();
	THEM->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
	GMODEL->deletePhysicalGroups();
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 126:
#line 1676 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 127:
#line 1695 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 128:
#line 1709 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 129:
#line 1715 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 130:
#line 1721 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 131:
#line 1730 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 132:
#line 1744 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 133:
#line 1789 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 134:
#line 1804 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-2].d);
	if(vv) BGMWithView(*vv);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 135:
#line 1815 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 136:
#line 1835 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 137:
#line 1845 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 138:
#line 1867 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 139:
#line 1871 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 140:
#line 1876 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 141:
#line 1881 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 142:
#line 1893 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 143:
#line 1908 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 144:
#line 1924 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 145:
#line 1950 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 146:
#line 1977 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 147:
#line 2009 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 148:
#line 2016 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 149:
#line 2021 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 150:
#line 2027 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 151:
#line 2031 "Gmsh.y"
{
    ;
    break;}
case 152:
#line 2040 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 153:
#line 2048 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 154:
#line 2056 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 2064 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 156:
#line 2069 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 157:
#line 2077 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 158:
#line 2082 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 159:
#line 2090 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 160:
#line 2095 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 161:
#line 2105 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 162:
#line 2112 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 163:
#line 2119 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 164:
#line 2126 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 165:
#line 2133 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 166:
#line 2140 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 167:
#line 2147 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 168:
#line 2154 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 169:
#line 2161 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 170:
#line 2168 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 171:
#line 2173 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 172:
#line 2180 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 173:
#line 2185 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 174:
#line 2192 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 175:
#line 2197 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 176:
#line 2204 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 177:
#line 2209 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 178:
#line 2216 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 179:
#line 2221 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 180:
#line 2228 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 181:
#line 2233 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 182:
#line 2240 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 183:
#line 2245 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 184:
#line 2252 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 185:
#line 2257 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 186:
#line 2264 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 187:
#line 2269 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 188:
#line 2280 "Gmsh.y"
{
    ;
    break;}
case 189:
#line 2283 "Gmsh.y"
{
    ;
    break;}
case 190:
#line 2289 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 191:
#line 2298 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 192:
#line 2320 "Gmsh.y"
{
      yymsg(WARNING, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 193:
#line 2344 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 194:
#line 2353 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 195:
#line 2371 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 196:
#line 2389 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 197:
#line 2407 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 198:
#line 2436 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 199:
#line 2471 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 200:
#line 2476 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 201:
#line 2503 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 202:
#line 2517 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 203:
#line 2536 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-1].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-4].l);
    ;
    break;}
case 204:
#line 2542 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-1].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-4].l);
    ;
    break;}
case 205:
#line 2548 "Gmsh.y"
{
    ;
    break;}
case 206:
#line 2551 "Gmsh.y"
{
    ;
    break;}
case 207:
#line 2560 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 208:
#line 2569 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 209:
#line 2570 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 210:
#line 2571 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 211:
#line 2572 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 212:
#line 2573 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 213:
#line 2574 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 214:
#line 2575 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 215:
#line 2576 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 216:
#line 2578 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 217:
#line 2584 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 218:
#line 2585 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 219:
#line 2586 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 220:
#line 2587 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 221:
#line 2588 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 222:
#line 2589 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 223:
#line 2590 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 224:
#line 2591 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 225:
#line 2592 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 226:
#line 2593 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 227:
#line 2594 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 228:
#line 2595 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 229:
#line 2596 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 230:
#line 2597 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 231:
#line 2598 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 232:
#line 2599 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 233:
#line 2600 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 234:
#line 2601 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 235:
#line 2602 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 236:
#line 2603 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 237:
#line 2604 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 238:
#line 2605 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 239:
#line 2606 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 240:
#line 2607 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 241:
#line 2608 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 242:
#line 2609 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 243:
#line 2610 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 244:
#line 2611 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 245:
#line 2612 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 246:
#line 2613 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 247:
#line 2614 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 248:
#line 2615 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 249:
#line 2617 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 250:
#line 2618 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 251:
#line 2619 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 252:
#line 2620 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 253:
#line 2621 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 254:
#line 2622 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 255:
#line 2623 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 256:
#line 2624 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2625 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 258:
#line 2626 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2627 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 260:
#line 2628 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2629 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2630 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2631 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2632 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 265:
#line 2633 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2634 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 267:
#line 2635 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 268:
#line 2636 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 269:
#line 2637 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 270:
#line 2646 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 271:
#line 2647 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 272:
#line 2648 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 273:
#line 2649 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 274:
#line 2650 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 275:
#line 2651 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 276:
#line 2652 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 277:
#line 2657 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 278:
#line 2673 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 279:
#line 2688 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 280:
#line 2708 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 281:
#line 2722 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 282:
#line 2735 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 283:
#line 2758 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 284:
#line 2776 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 285:
#line 2794 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 286:
#line 2812 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 287:
#line 2830 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 288:
#line 2838 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 289:
#line 2842 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 290:
#line 2846 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 291:
#line 2850 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 292:
#line 2854 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 293:
#line 2861 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 294:
#line 2865 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 295:
#line 2869 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 296:
#line 2873 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 297:
#line 2880 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 298:
#line 2885 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 299:
#line 2893 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 300:
#line 2898 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 301:
#line 2902 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 302:
#line 2907 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 303:
#line 2911 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 304:
#line 2923 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 305:
#line 2929 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 306:
#line 2940 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 307:
#line 2960 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 308:
#line 2970 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 309:
#line 2980 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 310:
#line 2990 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 311:
#line 3007 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 312:
#line 3026 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 313:
#line 3050 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 314:
#line 3079 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 315:
#line 3084 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 316:
#line 3088 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 317:
#line 3092 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 318:
#line 3105 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 319:
#line 3109 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 320:
#line 3121 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 321:
#line 3128 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 322:
#line 3150 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 323:
#line 3154 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 324:
#line 3169 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 325:
#line 3174 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 326:
#line 3181 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 327:
#line 3185 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 328:
#line 3193 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 329:
#line 3201 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 330:
#line 3215 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 331:
#line 3229 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 332:
#line 3233 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 333:
#line 3252 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 334:
#line 3274 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3297 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
