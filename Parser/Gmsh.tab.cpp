
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tToday	293
#define	tPoint	294
#define	tCircle	295
#define	tEllipse	296
#define	tLine	297
#define	tSurface	298
#define	tSpline	299
#define	tVolume	300
#define	tCharacteristic	301
#define	tLength	302
#define	tParametric	303
#define	tElliptic	304
#define	tPlane	305
#define	tRuled	306
#define	tTriangulation	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tRotate	315
#define	tTranslate	316
#define	tSymmetry	317
#define	tDilate	318
#define	tExtrude	319
#define	tDuplicata	320
#define	tLoop	321
#define	tRecombine	322
#define	tDelete	323
#define	tCoherence	324
#define	tIntersect	325
#define	tAttractor	326
#define	tLayers	327
#define	tScalarPoint	328
#define	tVectorPoint	329
#define	tTensorPoint	330
#define	tScalarLine	331
#define	tVectorLine	332
#define	tTensorLine	333
#define	tScalarTriangle	334
#define	tVectorTriangle	335
#define	tTensorTriangle	336
#define	tScalarQuadrangle	337
#define	tVectorQuadrangle	338
#define	tTensorQuadrangle	339
#define	tScalarTetrahedron	340
#define	tVectorTetrahedron	341
#define	tTensorTetrahedron	342
#define	tScalarHexahedron	343
#define	tVectorHexahedron	344
#define	tTensorHexahedron	345
#define	tScalarPrism	346
#define	tVectorPrism	347
#define	tTensorPrism	348
#define	tScalarPyramid	349
#define	tVectorPyramid	350
#define	tTensorPyramid	351
#define	tText2D	352
#define	tText3D	353
#define	tInterpolationScheme	354
#define	tTime	355
#define	tCombine	356
#define	tBSpline	357
#define	tBezier	358
#define	tNurbs	359
#define	tOrder	360
#define	tWith	361
#define	tBounds	362
#define	tKnots	363
#define	tColor	364
#define	tColorTable	365
#define	tFor	366
#define	tIn	367
#define	tEndFor	368
#define	tIf	369
#define	tEndIf	370
#define	tExit	371
#define	tReturn	372
#define	tCall	373
#define	tFunction	374
#define	tTrimmed	375
#define	tShow	376
#define	tHide	377
#define	tGetValue	378
#define	tB_SPLINE_SURFACE_WITH_KNOTS	379
#define	tB_SPLINE_CURVE_WITH_KNOTS	380
#define	tCARTESIAN_POINT	381
#define	tTRUE	382
#define	tFALSE	383
#define	tUNSPECIFIED	384
#define	tU	385
#define	tV	386
#define	tEDGE_CURVE	387
#define	tVERTEX_POINT	388
#define	tORIENTED_EDGE	389
#define	tPLANE	390
#define	tFACE_OUTER_BOUND	391
#define	tEDGE_LOOP	392
#define	tADVANCED_FACE	393
#define	tVECTOR	394
#define	tDIRECTION	395
#define	tAXIS2_PLACEMENT_3D	396
#define	tISO	397
#define	tENDISO	398
#define	tENDSEC	399
#define	tDATA	400
#define	tHEADER	401
#define	tFILE_DESCRIPTION	402
#define	tFILE_SCHEMA	403
#define	tFILE_NAME	404
#define	tMANIFOLD_SOLID_BREP	405
#define	tCLOSED_SHELL	406
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	407
#define	tFACE_BOUND	408
#define	tCYLINDRICAL_SURFACE	409
#define	tCONICAL_SURFACE	410
#define	tCIRCLE	411
#define	tTRIMMED_CURVE	412
#define	tGEOMETRIC_SET	413
#define	tCOMPOSITE_CURVE_SEGMENT	414
#define	tCONTINUOUS	415
#define	tCOMPOSITE_CURVE	416
#define	tTOROIDAL_SURFACE	417
#define	tPRODUCT_DEFINITION	418
#define	tPRODUCT_DEFINITION_SHAPE	419
#define	tSHAPE_DEFINITION_REPRESENTATION	420
#define	tELLIPSE	421
#define	tSolid	422
#define	tEndSolid	423
#define	tVertex	424
#define	tFacet	425
#define	tNormal	426
#define	tOuter	427
#define	tLoopSTL	428
#define	tEndLoop	429
#define	tEndFacet	430
#define	tAFFECTPLUS	431
#define	tAFFECTMINUS	432
#define	tAFFECTTIMES	433
#define	tAFFECTDIVIDE	434
#define	tOR	435
#define	tAND	436
#define	tEQUAL	437
#define	tNOTEQUAL	438
#define	tAPPROXEQUAL	439
#define	tLESSOREQUAL	440
#define	tGREATEROREQUAL	441
#define	tCROSSPRODUCT	442
#define	tPLUSPLUS	443
#define	tMINUSMINUS	444
#define	UNARYPREC	445

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.225 2005-01-02 17:46:07 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static Surface *STL_Surf;
static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 76 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2382
#define	YYFLAG		-32768
#define	YYNTBASE	211

#define YYTRANSLATE(x) ((unsigned)(x) <= 445 ? yytranslate[x] : 349)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   197,     2,   207,     2,   195,     2,     2,   202,
   203,   193,   191,   208,   192,   206,   194,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   187,
     2,   189,   181,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   204,     2,   205,   201,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   209,     2,   210,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   182,   183,   184,   185,   186,   188,
   190,   196,   198,   199,   200
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1973,  1986,  1995,  2004,  2013,  2026,  2041,  2056,  2079,
  2100,  2109,  2118,  2127,  2135,  2144,  2150,  2162,  2168,  2178,
  2180,  2182,  2184,  2185,  2188,  2195,  2202,  2209,  2216,  2221,
  2228,  2233,  2240,  2244,  2249,  2255,  2259,  2263,  2268,  2273,
  2277,  2285,  2289,  2297,  2301,  2304,  2307,  2323,  2326,  2333,
  2342,  2351,  2362,  2364,  2367,  2369,  2373,  2378,  2380,  2389,
  2402,  2417,  2418,  2431,  2432,  2449,  2450,  2469,  2478,  2491,
  2506,  2507,  2520,  2521,  2538,  2539,  2558,  2567,  2580,  2595,
  2596,  2609,  2610,  2627,  2628,  2647,  2649,  2652,  2662,  2670,
  2673,  2680,  2690,  2700,  2709,  2718,  2727,  2734,  2739,  2742,
  2745,  2747,  2749,  2751,  2753,  2755,  2757,  2761,  2764,  2767,
  2770,  2774,  2778,  2782,  2786,  2790,  2794,  2798,  2802,  2806,
  2810,  2814,  2818,  2822,  2826,  2832,  2837,  2842,  2847,  2852,
  2857,  2862,  2867,  2872,  2877,  2882,  2889,  2894,  2899,  2904,
  2909,  2914,  2919,  2926,  2933,  2940,  2945,  2950,  2955,  2960,
  2965,  2970,  2975,  2980,  2985,  2990,  2995,  3002,  3007,  3012,
  3017,  3022,  3027,  3032,  3039,  3046,  3053,  3058,  3060,  3062,
  3064,  3066,  3068,  3073,  3078,  3081,  3087,  3091,  3098,  3103,
  3111,  3118,  3120,  3123,  3126,  3130,  3134,  3146,  3156,  3164,
  3172,  3173,  3177,  3179,  3183,  3184,  3188,  3192,  3194,  3198,
  3200,  3202,  3206,  3211,  3215,  3221,  3226,  3228,  3230,  3232,
  3236,  3241,  3248,  3256,  3258,  3260,  3264,  3268,  3278,  3286,
  3288,  3294,  3298,  3305,  3307,  3311,  3313,  3315,  3322,  3327,
  3332,  3339,  3346
};

static const short yyrhs[] = {   215,
     0,   213,     0,   220,     0,     1,     6,     0,     3,     0,
   192,     3,     0,     0,   213,   214,     0,   168,     0,   171,
   172,   212,   212,   212,   173,   174,   170,   212,   212,   212,
   170,   212,   212,   212,   170,   212,   212,   212,   175,   176,
     0,   169,     0,     0,   215,   216,     0,   217,     0,   219,
     0,   218,     0,   143,     6,     0,   144,     6,     0,   146,
     6,     0,   145,     6,     0,   147,     6,     0,   148,   202,
   338,   208,     5,   203,     6,     0,   149,   202,   338,   203,
     6,     0,   150,   202,     5,   208,     5,   208,   338,   208,
   338,   208,     5,   208,     5,   208,     5,   203,     6,     0,
     3,     7,   127,   202,     5,   208,   336,   203,     6,     0,
     3,     7,   126,   202,     5,   208,   334,   208,   342,   208,
   333,   208,   333,   208,   333,   208,   342,   208,   342,   208,
   333,   203,     6,     0,     3,     7,   125,   202,     5,   208,
   334,   208,   334,   208,   340,   208,   333,   208,   333,   208,
   333,   208,   333,   208,   342,   208,   342,   208,   342,   208,
   342,   208,   333,   203,     6,     0,     3,     7,   133,   202,
     5,   208,     3,   208,     3,   208,     3,   208,   333,   203,
     6,     0,     3,     7,   137,   202,     5,   208,     3,   208,
   333,   203,     6,     0,     3,     7,   154,   202,     5,   208,
     3,   208,   333,   203,     6,     0,     3,     7,   135,   202,
     5,   208,   193,   208,   193,   208,   334,   208,   333,   203,
     6,     0,     3,     7,   138,   202,     5,   208,   342,   203,
     6,     0,     3,     7,   139,   202,     5,   208,   342,   208,
     3,   208,   333,   203,     6,     0,     3,     7,   134,   202,
     5,   208,     3,   203,     6,     0,     3,     7,   140,   202,
     5,   208,     3,   208,   334,   203,     6,     0,     3,     7,
   142,   202,     5,   208,     3,   208,     3,   208,     3,   203,
     6,     0,     3,     7,   141,   202,     5,   208,   336,   203,
     6,     0,     3,     7,   136,   202,     5,   208,     3,   203,
     6,     0,     3,     7,    43,   202,     5,   208,     3,   208,
     3,   203,     6,     0,     3,     7,   152,   202,     5,   208,
   342,   203,     6,     0,     3,     7,   153,   202,     5,   208,
   342,   208,     3,   203,     6,     0,     3,     7,   151,   202,
     5,   208,     3,   203,     6,     0,     3,     7,   155,   202,
     5,   208,     3,   208,   334,   203,     6,     0,     3,     7,
   156,   202,     5,   208,     3,   208,   334,   208,   334,   203,
     6,     0,     3,     7,   163,   202,     5,   208,     3,   208,
   334,   208,   334,   203,     6,     0,     3,     7,   157,   202,
     5,   208,     3,   208,   334,   203,     6,     0,     3,     7,
   167,   202,     5,   208,     3,   208,   334,   208,   334,   203,
     6,     0,     3,     7,   158,   202,     5,   208,     3,   208,
   342,   208,   342,   208,   333,   208,   333,   203,     6,     0,
     3,     7,   159,   202,     5,   208,   342,   203,     6,     0,
     3,     7,   160,   202,   161,   208,   333,   208,     3,   203,
     6,     0,     3,     7,   162,   202,     5,   208,   342,   208,
   333,   203,     6,     0,     3,     7,   164,   202,     5,   208,
     5,   208,     3,   208,     3,   203,     6,     0,     3,     7,
   165,   202,     5,   208,     5,   208,     3,   203,     6,     0,
     3,     7,   166,   202,     3,   208,     3,   203,     6,     0,
     0,   220,   221,     0,   223,     0,   222,     0,   308,     0,
   309,     0,   310,     0,   313,     0,   314,     0,   315,     0,
   316,     0,   319,     0,   331,     0,   332,     0,   318,     0,
   317,     0,    33,   202,     5,   203,     6,     0,    33,   202,
     5,   208,   344,   203,     6,     0,     4,     5,   209,   224,
   210,     6,     0,     4,     5,     4,   336,   209,   224,   210,
     6,     0,     0,   224,   226,     0,   224,   229,     0,   224,
   232,     0,   224,   235,     0,   224,   238,     0,   224,   241,
     0,   224,   244,     0,   224,   247,     0,   224,   250,     0,
   224,   253,     0,   224,   256,     0,   224,   259,     0,   224,
   262,     0,   224,   265,     0,   224,   268,     0,   224,   271,
     0,   224,   274,     0,   224,   277,     0,   224,   280,     0,
   224,   283,     0,   224,   286,     0,   224,   289,     0,   224,
   292,     0,   224,   295,     0,   224,   298,     0,   224,   301,
     0,   224,   303,     0,   224,   305,     0,   334,     0,   225,
   208,   334,     0,     0,    74,   202,   334,   208,   334,   208,
   334,   203,   227,   209,   225,   210,     6,     0,   334,     0,
   228,   208,   334,     0,     0,    75,   202,   334,   208,   334,
   208,   334,   203,   230,   209,   228,   210,     6,     0,   334,
     0,   231,   208,   334,     0,     0,    76,   202,   334,   208,
   334,   208,   334,   203,   233,   209,   231,   210,     6,     0,
   334,     0,   234,   208,   334,     0,     0,    77,   202,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   203,   236,   209,   234,   210,     6,     0,   334,     0,   237,
   208,   334,     0,     0,    78,   202,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   203,   239,   209,
   237,   210,     6,     0,   334,     0,   240,   208,   334,     0,
     0,    79,   202,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   203,   242,   209,   240,   210,     6,
     0,   334,     0,   243,   208,   334,     0,     0,    80,   202,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   203,   245,   209,
   243,   210,     6,     0,   334,     0,   246,   208,   334,     0,
     0,    81,   202,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   203,   248,   209,   246,   210,     6,     0,   334,     0,   249,
   208,   334,     0,     0,    82,   202,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   203,   251,   209,   249,   210,     6,     0,
   334,     0,   252,   208,   334,     0,     0,    83,   202,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   203,   254,   209,   252,   210,     6,     0,   334,
     0,   255,   208,   334,     0,     0,    84,   202,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   203,   257,   209,   255,   210,     6,     0,   334,     0,
   258,   208,   334,     0,     0,    85,   202,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   203,   260,   209,   258,   210,     6,     0,   334,     0,   261,
   208,   334,     0,     0,    86,   202,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   203,
   263,   209,   261,   210,     6,     0,   334,     0,   264,   208,
   334,     0,     0,    87,   202,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   203,   266,
   209,   264,   210,     6,     0,   334,     0,   267,   208,   334,
     0,     0,    88,   202,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   203,   269,   209,
   267,   210,     6,     0,   334,     0,   270,   208,   334,     0,
     0,    89,   202,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   203,   272,   209,   270,   210,     6,     0,   334,     0,   273,
   208,   334,     0,     0,    90,   202,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   203,   275,   209,   273,   210,     6,     0,
   334,     0,   276,   208,   334,     0,     0,    91,   202,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   203,   278,   209,   276,
   210,     6,     0,   334,     0,   279,   208,   334,     0,     0,
    92,   202,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   203,   281,   209,
   279,   210,     6,     0,   334,     0,   282,   208,   334,     0,
     0,    93,   202,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   203,   284,
   209,   282,   210,     6,     0,   334,     0,   285,   208,   334,
     0,     0,    94,   202,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   203,
   287,   209,   285,   210,     6,     0,   334,     0,   288,   208,
   334,     0,     0,    95,   202,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   203,   290,   209,   288,   210,     6,
     0,   334,     0,   291,   208,   334,     0,     0,    96,   202,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   203,
   293,   209,   291,   210,     6,     0,   334,     0,   294,   208,
   334,     0,     0,    97,   202,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   208,   334,   208,   334,   208,   334,
   208,   334,   208,   334,   203,   296,   209,   294,   210,     6,
     0,   348,     0,   297,   208,   348,     0,     0,    98,   202,
   334,   208,   334,   208,   334,   203,   299,   209,   297,   210,
     6,     0,   348,     0,   300,   208,   348,     0,     0,    99,
   202,   334,   208,   334,   208,   334,   208,   334,   203,   302,
   209,   300,   210,     6,     0,   100,   209,   341,   210,   209,
   341,   210,     6,     0,   334,     0,   304,   208,   334,     0,
   101,   209,   304,   210,     6,     0,     7,     0,   177,     0,
   178,     0,   179,     0,   180,     0,   198,     0,   199,     0,
     4,   306,   334,     6,     0,     4,   204,   334,   205,   306,
   334,     6,     0,     4,   204,   209,   344,   210,   205,   306,
   342,     6,     0,     4,   204,   205,     7,   342,     6,     0,
     4,   307,     6,     0,     4,   204,   334,   205,   307,     6,
     0,     4,   206,     4,     7,   348,     6,     0,     4,   204,
   334,   205,   206,     4,     7,   348,     6,     0,     4,   206,
     4,   306,   334,     6,     0,     4,   204,   334,   205,   206,
     4,   306,   334,     6,     0,     4,   206,     4,   307,     6,
     0,     4,   204,   334,   205,   206,     4,   307,     6,     0,
     4,   206,   110,   206,     4,     7,   345,     6,     0,     4,
   204,   334,   205,   206,   110,   206,     4,     7,   345,     6,
     0,     4,   206,   111,     7,   346,     6,     0,     4,   204,
   334,   205,   206,   111,     7,   346,     6,     0,    60,   202,
     4,   203,   206,     4,     7,   334,     6,     0,    60,   202,
     4,   203,   206,     4,     7,   348,     6,     0,    40,   202,
   334,   203,     7,   336,     6,     0,    56,    40,   202,   334,
   203,     7,   342,     6,     0,    72,    40,   342,     7,   209,
   334,   208,   334,   208,   334,   210,     6,     0,    47,    48,
   342,     7,   334,     6,     0,    43,   202,   334,   203,     7,
   342,     6,     0,    45,   202,   334,   203,     7,   342,     6,
     0,    41,   202,   334,   203,     7,   342,     6,     0,    41,
   202,   334,   203,     7,   342,    51,   336,     6,     0,    42,
   202,   334,   203,     7,   342,     6,     0,    42,   202,   334,
   203,     7,   342,    51,   336,     6,     0,    49,   202,   334,
   203,     7,   209,   334,   208,   334,   208,     5,   208,     5,
   208,     5,   210,     6,     0,   103,   202,   334,   203,     7,
   342,     6,     0,   104,   202,   334,   203,     7,   342,     6,
     0,   105,   202,   334,   203,     7,   342,   109,   342,   106,
   334,     6,     0,    43,    67,   202,   334,   203,     7,   342,
     6,     0,    72,    43,   342,     7,   209,   334,   208,   334,
   208,   334,   210,     6,     0,    56,    43,   202,   334,   203,
     7,   342,     6,     0,    51,    44,   202,   334,   203,     7,
   342,     6,     0,    52,    44,   202,   334,   203,     7,   342,
     6,     0,   121,    44,   202,   334,   203,     7,   209,   334,
   208,   342,   210,     6,     0,    53,    44,   209,   334,   210,
     7,   202,   334,   208,   334,   203,   342,   342,     6,     0,
    53,    44,   202,   334,   203,     7,   202,   334,   208,   334,
   203,   342,   342,     6,     0,   105,    44,   107,   108,   202,
   334,   203,     7,   340,   109,   209,   342,   208,   342,   210,
   106,   209,   334,   208,   334,   210,     6,     0,   105,    44,
   202,   334,   203,     7,   340,   109,   209,   342,   208,   342,
   210,   106,   209,   334,   208,   334,   210,     6,     0,    44,
    67,   202,   334,   203,     7,   342,     6,     0,    56,    44,
   202,   334,   203,     7,   342,     6,     0,    55,    46,   202,
   334,   203,     7,   342,     6,     0,    46,   202,   334,   203,
     7,   342,     6,     0,    56,    46,   202,   334,   203,     7,
   342,     6,     0,    62,   336,   209,   311,   210,     0,    61,
   209,   336,   208,   336,   208,   334,   210,   209,   311,   210,
     0,    63,   336,   209,   311,   210,     0,    64,   209,   336,
   208,   334,   210,   209,   311,   210,     0,   313,     0,   312,
     0,   310,     0,     0,   312,   309,     0,   312,    40,   209,
   344,   210,     6,     0,   312,    43,   209,   344,   210,     6,
     0,   312,    44,   209,   344,   210,     6,     0,   312,    46,
   209,   344,   210,     6,     0,    66,   209,   312,   210,     0,
    66,     4,   204,   334,   205,     6,     0,    69,   209,   312,
   210,     0,    69,     4,   204,   334,   205,     6,     0,    69,
     4,     6,     0,    69,     4,     4,     6,     0,   110,   345,
   209,   312,   210,     0,   122,   348,     6,     0,   123,   348,
     6,     0,   122,   209,   312,   210,     0,   123,   209,   312,
   210,     0,     4,   348,     6,     0,     4,     4,   204,   334,
   205,   348,     6,     0,     4,   334,     6,     0,    60,   202,
     4,   203,   206,     4,     6,     0,   102,     4,     6,     0,
   117,     6,     0,    37,     6,     0,    37,   209,   334,   208,
   334,   208,   334,   208,   334,   208,   334,   208,   334,   210,
     6,     0,    38,     6,     0,   112,   202,   334,     8,   334,
   203,     0,   112,   202,   334,     8,   334,     8,   334,   203,
     0,   112,     4,   113,   209,   334,     8,   334,   210,     0,
   112,     4,   113,   209,   334,     8,   334,     8,   334,   210,
     0,   114,     0,   120,     4,     0,   118,     0,   119,     4,
     6,     0,   115,   202,   334,   203,     0,   116,     0,    65,
    40,   209,   334,   208,   336,   210,     6,     0,    65,    40,
   209,   334,   208,   336,   208,   336,   208,   334,   210,     6,
     0,    65,    40,   209,   334,   208,   336,   208,   336,   208,
   336,   208,   334,   210,     6,     0,     0,    65,    40,   209,
   334,   208,   336,   210,   320,   209,   329,   210,     6,     0,
     0,    65,    40,   209,   334,   208,   336,   208,   336,   208,
   334,   210,   321,   209,   329,   210,     6,     0,     0,    65,
    40,   209,   334,   208,   336,   208,   336,   208,   336,   208,
   334,   210,   322,   209,   329,   210,     6,     0,    65,    43,
   209,   334,   208,   336,   210,     6,     0,    65,    43,   209,
   334,   208,   336,   208,   336,   208,   334,   210,     6,     0,
    65,    43,   209,   334,   208,   336,   208,   336,   208,   336,
   208,   334,   210,     6,     0,     0,    65,    43,   209,   334,
   208,   336,   210,   323,   209,   329,   210,     6,     0,     0,
    65,    43,   209,   334,   208,   336,   208,   336,   208,   334,
   210,   324,   209,   329,   210,     6,     0,     0,    65,    43,
   209,   334,   208,   336,   208,   336,   208,   336,   208,   334,
   210,   325,   209,   329,   210,     6,     0,    65,    44,   209,
   334,   208,   336,   210,     6,     0,    65,    44,   209,   334,
   208,   336,   208,   336,   208,   334,   210,     6,     0,    65,
    44,   209,   334,   208,   336,   208,   336,   208,   336,   208,
   334,   210,     6,     0,     0,    65,    44,   209,   334,   208,
   336,   210,   326,   209,   329,   210,     6,     0,     0,    65,
    44,   209,   334,   208,   336,   208,   336,   208,   334,   210,
   327,   209,   329,   210,     6,     0,     0,    65,    44,   209,
   334,   208,   336,   208,   336,   208,   336,   208,   334,   210,
   328,   209,   329,   210,     6,     0,   330,     0,   329,   330,
     0,    73,   209,   342,   208,   342,   208,   342,   210,     6,
     0,    73,   209,   342,   208,   342,   210,     6,     0,    68,
     6,     0,    54,    43,   342,     7,   334,     6,     0,    54,
    43,   342,     7,   334,    57,    59,   334,     6,     0,    54,
    43,   342,     7,   334,    57,    58,   334,     6,     0,    54,
    44,   209,   334,   210,     7,   342,     6,     0,    50,    44,
   209,   334,   210,     7,   342,     6,     0,    54,    46,   209,
   334,   210,     7,   342,     6,     0,    68,    44,   342,     7,
   334,     6,     0,    68,    44,   342,     6,     0,    70,     6,
     0,    71,     6,     0,   128,     0,   129,     0,   130,     0,
   131,     0,   132,     0,   335,     0,   202,   334,   203,     0,
   192,   334,     0,   191,   334,     0,   197,   334,     0,   334,
   192,   334,     0,   334,   191,   334,     0,   334,   193,   334,
     0,   334,   194,   334,     0,   334,   195,   334,     0,   334,
   201,   334,     0,   334,   187,   334,     0,   334,   189,   334,
     0,   334,   188,   334,     0,   334,   190,   334,     0,   334,
   184,   334,     0,   334,   185,   334,     0,   334,   183,   334,
     0,   334,   182,   334,     0,   334,   181,   334,     8,   334,
     0,    12,   202,   334,   203,     0,    13,   202,   334,   203,
     0,    14,   202,   334,   203,     0,    15,   202,   334,   203,
     0,    16,   202,   334,   203,     0,    17,   202,   334,   203,
     0,    18,   202,   334,   203,     0,    19,   202,   334,   203,
     0,    20,   202,   334,   203,     0,    22,   202,   334,   203,
     0,    23,   202,   334,   208,   334,   203,     0,    24,   202,
   334,   203,     0,    25,   202,   334,   203,     0,    26,   202,
   334,   203,     0,    27,   202,   334,   203,     0,    28,   202,
   334,   203,     0,    29,   202,   334,   203,     0,    30,   202,
   334,   208,   334,   203,     0,    31,   202,   334,   208,   334,
   203,     0,    32,   202,   334,   208,   334,   203,     0,    21,
   202,   334,   203,     0,    12,   204,   334,   205,     0,    13,
   204,   334,   205,     0,    14,   204,   334,   205,     0,    15,
   204,   334,   205,     0,    16,   204,   334,   205,     0,    17,
   204,   334,   205,     0,    18,   204,   334,   205,     0,    19,
   204,   334,   205,     0,    20,   204,   334,   205,     0,    22,
   204,   334,   205,     0,    23,   204,   334,   208,   334,   205,
     0,    24,   204,   334,   205,     0,    25,   204,   334,   205,
     0,    26,   204,   334,   205,     0,    27,   204,   334,   205,
     0,    28,   204,   334,   205,     0,    29,   204,   334,   205,
     0,    30,   204,   334,   208,   334,   205,     0,    31,   204,
   334,   208,   334,   205,     0,    32,   204,   334,   208,   334,
   205,     0,    21,   204,   334,   205,     0,     3,     0,     9,
     0,    10,     0,    11,     0,     4,     0,     4,   204,   334,
   205,     0,   207,     4,   204,   205,     0,     4,   307,     0,
     4,   204,   334,   205,   307,     0,     4,   206,     4,     0,
     4,   204,   334,   205,   206,     4,     0,     4,   206,     4,
   307,     0,     4,   204,   334,   205,   206,     4,   307,     0,
   124,   202,     5,   208,   334,   203,     0,   337,     0,   192,
   336,     0,   191,   336,     0,   336,   192,   336,     0,   336,
   191,   336,     0,   209,   334,   208,   334,   208,   334,   208,
   334,   208,   334,   210,     0,   209,   334,   208,   334,   208,
   334,   208,   334,   210,     0,   209,   334,   208,   334,   208,
   334,   210,     0,   202,   334,   208,   334,   208,   334,   203,
     0,     0,   202,   339,   203,     0,     5,     0,   339,   208,
     5,     0,     0,   209,   341,   210,     0,   202,   341,   203,
     0,   342,     0,   341,   208,   342,     0,   334,     0,   343,
     0,   209,   344,   210,     0,   192,   209,   344,   210,     0,
   334,     8,   334,     0,   334,     8,   334,     8,   334,     0,
    40,   209,   334,   210,     0,   310,     0,   313,     0,   319,
     0,     4,   204,   205,     0,   192,     4,   204,   205,     0,
     4,   204,   209,   344,   210,   205,     0,   192,     4,   204,
   209,   344,   210,   205,     0,   334,     0,   343,     0,   344,
   208,   334,     0,   344,   208,   343,     0,   209,   334,   208,
   334,   208,   334,   208,   334,   210,     0,   209,   334,   208,
   334,   208,   334,   210,     0,     4,     0,     4,   206,   110,
   206,     4,     0,   209,   347,   210,     0,     4,   204,   334,
   205,   206,   111,     0,   345,     0,   347,   208,   345,     0,
     5,     0,    39,     0,    35,   202,   348,   208,   348,   203,
     0,    36,   202,   348,   203,     0,    34,   202,   348,   203,
     0,    34,   202,   348,   208,   344,   203,     0,    34,   202,
     4,   206,     4,   203,     0,    34,   202,     4,   204,   334,
   205,   206,     4,   203,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   162,   164,   165,   166,   171,   173,   176,   178,   181,   189,
   203,   224,   226,   229,   231,   232,   235,   241,   246,   247,
   248,   251,   255,   258,   264,   269,   275,   283,   288,   292,
   298,   303,   307,   312,   316,   319,   324,   328,   332,   336,
   341,   345,   348,   352,   356,   360,   364,   368,   372,   375,
   379,   382,   386,   389,   396,   398,   401,   403,   404,   405,
   406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
   418,   424,   441,   449,   458,   466,   467,   468,   469,   470,
   471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
   481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
   491,   492,   493,   496,   499,   503,   509,   515,   518,   522,
   529,   536,   539,   543,   550,   557,   560,   564,   573,   580,
   583,   587,   596,   603,   606,   610,   619,   626,   629,   633,
   646,   653,   656,   660,   673,   680,   683,   687,   700,   707,
   710,   714,   728,   735,   738,   742,   756,   763,   766,   770,
   784,   791,   794,   798,   812,   819,   822,   826,   840,   847,
   850,   854,   868,   875,   878,   882,   906,   913,   916,   920,
   944,   951,   954,   958,   982,   989,   992,   996,  1015,  1022,
  1025,  1029,  1048,  1055,  1058,  1062,  1081,  1088,  1091,  1095,
  1113,  1120,  1123,  1127,  1145,  1152,  1155,  1159,  1177,  1184,
  1190,  1197,  1205,  1211,  1217,  1224,  1232,  1238,  1246,  1249,
  1253,  1261,  1263,  1264,  1265,  1266,  1269,  1271,  1274,  1309,
  1348,  1402,  1419,  1430,  1449,  1463,  1480,  1506,  1533,  1547,
  1564,  1578,  1595,  1615,  1638,  1648,  1663,  1683,  1699,  1718,
  1737,  1755,  1773,  1791,  1817,  1835,  1861,  1881,  1905,  1929,
  1955,  1972,  1990,  2009,  2028,  2067,  2092,  2114,  2130,  2149,
  2168,  2184,  2203,  2220,  2237,  2257,  2263,  2268,  2273,  2280,
  2282,  2283,  2286,  2291,  2295,  2311,  2327,  2343,  2363,  2377,
  2388,  2398,  2408,  2418,  2436,  2450,  2459,  2465,  2476,  2489,
  2534,  2549,  2565,  2575,  2586,  2590,  2594,  2598,  2609,  2626,
  2642,  2668,  2695,  2727,  2734,  2739,  2745,  2749,  2757,  2776,
  2792,  2808,  2813,  2829,  2834,  2850,  2855,  2873,  2896,  2919,
  2942,  2947,  2970,  2975,  2998,  3003,  3029,  3052,  3075,  3098,
  3103,  3126,  3132,  3155,  3161,  3186,  3190,  3195,  3222,  3246,
  3254,  3273,  3291,  3309,  3336,  3362,  3388,  3402,  3420,  3425,
  3434,  3436,  3437,  3438,  3439,  3442,  3444,  3445,  3446,  3447,
  3448,  3449,  3450,  3451,  3458,  3459,  3460,  3461,  3462,  3463,
  3464,  3465,  3466,  3467,  3468,  3469,  3470,  3471,  3472,  3473,
  3474,  3475,  3476,  3477,  3478,  3479,  3480,  3481,  3482,  3483,
  3484,  3485,  3486,  3487,  3488,  3489,  3491,  3492,  3493,  3494,
  3495,  3496,  3497,  3498,  3499,  3500,  3501,  3502,  3503,  3504,
  3505,  3506,  3507,  3508,  3509,  3510,  3511,  3516,  3521,  3522,
  3523,  3527,  3540,  3560,  3574,  3587,  3610,  3628,  3646,  3664,
  3682,  3689,  3694,  3698,  3702,  3706,  3712,  3717,  3721,  3725,
  3731,  3735,  3740,  3744,  3749,  3753,  3757,  3763,  3769,  3776,
  3782,  3786,  3790,  3801,  3808,  3819,  3839,  3849,  3859,  3871,
  3888,  3907,  3931,  3959,  3965,  3969,  3973,  3985,  3990,  4002,
  4009,  4030,  4035,  4049,  4055,  4061,  4066,  4074,  4082,  4096,
  4100,  4119,  4135
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint",
"tVectorPoint","tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle",
"tVectorTriangle","tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle",
"tTensorQuadrangle","tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron",
"tScalarHexahedron","tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism",
"tTensorPrism","tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D",
"tText3D","tInterpolationScheme","tTime","tCombine","tBSpline","tBezier","tNurbs",
"tOrder","tWith","tBounds","tKnots","tColor","tColorTable","tFor","tIn","tEndFor",
"tIf","tEndIf","tExit","tReturn","tCall","tFunction","tTrimmed","tShow","tHide",
"tGetValue","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter","tLoopSTL",
"tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'","tLESSOREQUAL",
"'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","'!'",
"tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'","'#'",
"','","'{'","'}'","All","SignedDouble","StlFormatItems","StlFormatItem","StepFormatItems",
"StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem","GeoFormatItems",
"GeoFormatItem","Printf","View","Views","ScalarPointValues","ScalarPoint","@1",
"VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint","@3",
"ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues",
"TensorLine","@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues",
"VectorTriangle","@8","TensorTriangleValues","TensorTriangle","@9","ScalarQuadrangleValues",
"ScalarQuadrangle","@10","VectorQuadrangleValues","VectorQuadrangle","@11","TensorQuadrangleValues",
"TensorQuadrangle","@12","ScalarTetrahedronValues","ScalarTetrahedron","@13",
"VectorTetrahedronValues","VectorTetrahedron","@14","TensorTetrahedronValues",
"TensorTetrahedron","@15","ScalarHexahedronValues","ScalarHexahedron","@16",
"VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues","TensorHexahedron",
"@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues","VectorPrism",
"@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues","ScalarPyramid",
"@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues","TensorPyramid",
"@24","Text2DValues","Text2D","@25","Text3DValues","Text3D","@26","InterpolationMatrix",
"TimeValues","Time","NumericAffectation","NumericIncrement","Affectation","Shape",
"Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   211,   211,   211,   211,   212,   212,   213,   213,   214,   214,
   214,   215,   215,   216,   216,   216,   217,   217,   217,   217,
   217,   218,   218,   218,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   220,   220,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   222,   222,   223,   223,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   225,   225,   227,   226,   228,   228,   230,
   229,   231,   231,   233,   232,   234,   234,   236,   235,   237,
   237,   239,   238,   240,   240,   242,   241,   243,   243,   245,
   244,   246,   246,   248,   247,   249,   249,   251,   250,   252,
   252,   254,   253,   255,   255,   257,   256,   258,   258,   260,
   259,   261,   261,   263,   262,   264,   264,   266,   265,   267,
   267,   269,   268,   270,   270,   272,   271,   273,   273,   275,
   274,   276,   276,   278,   277,   279,   279,   281,   280,   282,
   282,   284,   283,   285,   285,   287,   286,   288,   288,   290,
   289,   291,   291,   293,   292,   294,   294,   296,   295,   297,
   297,   299,   298,   300,   300,   302,   301,   303,   304,   304,
   305,   306,   306,   306,   306,   306,   307,   307,   308,   308,
   308,   308,   308,   308,   308,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   308,   309,   309,   309,   309,
   309,   309,   309,   309,   309,   309,   309,   309,   309,   309,
   309,   309,   309,   309,   309,   309,   309,   309,   309,   309,
   309,   309,   309,   309,   309,   310,   310,   310,   310,   311,
   311,   311,   312,   312,   312,   312,   312,   312,   313,   313,
   314,   314,   314,   314,   315,   316,   316,   316,   316,   317,
   317,   317,   317,   317,   317,   317,   317,   317,   318,   318,
   318,   318,   318,   318,   318,   318,   318,   318,   319,   319,
   319,   320,   319,   321,   319,   322,   319,   319,   319,   319,
   323,   319,   324,   319,   325,   319,   319,   319,   319,   326,
   319,   327,   319,   328,   319,   329,   329,   330,   330,   330,
   331,   331,   331,   331,   331,   331,   331,   331,   332,   332,
   333,   333,   333,   333,   333,   334,   334,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   335,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   336,   336,   336,   336,   336,   337,   337,   337,   337,
   338,   338,   339,   339,   340,   340,   340,   341,   341,   342,
   342,   342,   342,   343,   343,   343,   343,   343,   343,   343,
   343,   343,   343,   344,   344,   344,   344,   345,   345,   345,
   345,   346,   346,   347,   347,   348,   348,   348,   348,   348,
   348,   348,   348
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
     8,    12,     8,     8,     8,    12,    14,    14,    22,    20,
     8,     8,     8,     7,     8,     5,    11,     5,     9,     1,
     1,     1,     0,     2,     6,     6,     6,     6,     4,     6,
     4,     6,     3,     4,     5,     3,     3,     4,     4,     3,
     7,     3,     7,     3,     2,     2,    15,     2,     6,     8,
     8,    10,     1,     2,     1,     3,     4,     1,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     1,     2,     9,     7,     2,
     6,     9,     9,     8,     8,     8,     6,     4,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     5,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     1,     1,     4,     4,     2,     5,     3,     6,     4,     7,
     6,     1,     2,     2,     3,     3,    11,     9,     7,     7,
     0,     3,     1,     3,     0,     3,     3,     1,     3,     1,
     1,     3,     4,     3,     5,     4,     1,     1,     1,     3,
     4,     6,     7,     1,     1,     3,     3,     9,     7,     1,
     5,     3,     6,     1,     3,     1,     1,     6,     4,     4,
     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   303,     0,   308,     0,   305,     0,     0,     0,     0,     0,
    56,    58,    57,    59,    60,    61,    62,    63,    64,    65,
    70,    69,    66,    67,    68,     0,     0,    17,    18,    20,
    19,    21,   441,   441,     0,   418,   422,   476,   212,   419,
   420,   421,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   477,     0,   213,   214,
   215,   216,     0,     0,     0,   217,   218,     0,     0,     0,
     0,     0,     0,     0,   356,     0,     0,   296,     0,   298,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   432,
     0,     0,     0,     0,     0,     0,   273,     0,     0,   273,
   349,   350,     0,     0,     0,     0,     0,     0,     0,   470,
     0,     0,     0,     0,     0,   295,     0,   304,     0,   476,
   273,     0,   273,     0,     5,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   425,     0,    75,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   422,   359,   358,   360,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   223,   292,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   290,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   422,     0,     0,     0,   457,   458,   459,
   450,     0,   451,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   434,
   433,     0,     0,     0,     0,   273,   273,     0,     0,     0,
     0,     0,     0,     0,     0,   283,     0,     0,     0,     0,
   294,     0,     0,     0,     0,     0,     0,     0,   273,     0,
     0,     0,   306,     0,     0,   286,     0,   287,     6,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   443,     0,     0,     0,     0,     0,   427,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   357,     0,     0,
   464,   465,     0,     0,   212,     0,     0,     0,     0,     0,
   219,     0,   374,   373,   371,   372,   367,   369,   368,   370,
   362,   361,   363,   364,   365,   366,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   422,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   436,   435,   272,     0,   271,   270,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   279,   274,
   348,     0,   284,     0,   281,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   307,     0,   288,
   289,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   442,     0,     0,    23,     0,   423,   429,    75,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   376,   397,   377,
   398,   378,   399,   379,   400,   380,   401,   381,   402,   382,
   403,   383,   404,   384,   405,   396,   417,   385,   406,     0,
     0,   387,   408,   388,   409,   389,   410,   390,   411,   391,
   412,   392,   413,     0,     0,     0,     0,     0,     0,     0,
     0,   480,     0,     0,   479,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   229,     0,     0,     0,     0,
   424,     0,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   460,     0,     0,     0,     0,   452,   454,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   266,
   268,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   285,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   444,     0,   441,     0,
   426,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   423,   222,   466,   467,     0,
     0,     0,     0,     0,   224,   225,   227,     0,     0,   474,
     0,   233,   375,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   456,   461,     0,   453,     0,   240,
     0,     0,     0,     0,     0,     0,   341,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   280,     0,     0,     0,     0,   347,   282,
     0,     0,     0,     0,     0,   445,     0,   471,     0,     0,
     0,   299,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   351,   352,   353,
   354,   355,     0,     0,     0,     0,     0,     0,     0,    22,
     0,   428,   291,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   448,     0,   209,   386,   407,   393,   414,   394,   415,
   395,   416,     0,   482,   481,   478,   431,     0,   212,     0,
     0,     0,     0,   220,     0,     0,     0,   472,    72,     0,
   237,   243,     0,   245,     0,     0,   241,     0,   242,   264,
     0,     0,   455,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   293,     0,
     0,     0,     0,   273,     0,   312,     0,   321,     0,   330,
     0,     0,     0,     0,     0,     0,   248,   249,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   441,   430,
    74,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   230,     0,     0,   231,     0,
   475,     0,     0,     0,   251,   261,   462,     0,     0,   345,
   254,   255,     0,     0,     0,     0,   344,   346,   263,   238,
   253,   262,   265,     0,     0,     0,   440,     0,   439,     0,
     0,   309,     0,     0,   318,     0,     0,   327,     0,   275,
   276,   277,   278,     0,     0,   445,     0,     0,     0,     0,
     0,   469,     0,   301,   300,     0,     0,     0,     0,     0,
    25,     0,    34,     0,    38,     0,    32,     0,     0,    37,
     0,    42,    40,     0,     0,     0,     0,     0,     0,    49,
     0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   449,     0,   210,   211,     0,   221,
   226,   228,     0,   234,     0,     0,   244,   246,   463,     0,
     0,     0,   343,   342,   235,   236,   273,     0,   269,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   447,   446,
     0,     0,     0,     0,     0,     0,     0,   445,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   483,     0,   473,     0,     0,
     0,     0,     0,     0,   438,     0,     0,     0,     0,     0,
     0,     0,     0,   336,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   468,   302,     0,     0,    39,
     0,     0,     0,     0,    29,     0,    35,     0,    41,    30,
    43,     0,    46,     0,    50,    51,     0,     0,    53,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   232,     0,
     0,     0,     0,   267,     0,     0,   314,     0,   340,     0,
     0,   337,   323,     0,     0,   332,     0,     0,     0,     0,
     0,     0,   250,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   106,   110,   114,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   202,     0,   208,     0,     0,     0,     0,   437,   310,
     0,     0,     0,   313,   319,     0,     0,   322,   328,     0,
     0,   331,   239,   252,     0,     0,   256,     0,     0,     0,
     0,     0,    33,    36,    44,     0,    45,    52,    47,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   316,     0,     0,   325,     0,   334,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   206,     0,     0,   258,   257,     0,   311,     0,     0,
     0,   320,     0,     0,   329,     0,     0,     0,     0,     0,
     0,    28,    31,     0,     0,     0,   104,     0,   108,     0,
   112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   200,     0,   297,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   315,     0,     0,   339,   324,     0,   333,
     0,     0,     0,     0,     0,     0,    48,    24,   105,   107,
   109,   111,   113,   115,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   201,   203,     0,   204,   247,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
   122,   126,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   317,   338,   326,   335,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   205,   207,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   260,    10,     0,     0,     0,   116,     0,   120,     0,
   124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   259,     0,    26,   117,
   119,   121,   123,   125,   127,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   130,   134,   138,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   128,     0,   132,     0,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   129,   131,   133,   135,   137,
   139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   142,   146,   150,
   154,   158,   162,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   140,     0,   144,     0,   148,     0,
   152,     0,   156,     0,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   141,   143,   145,   147,   149,
   151,   153,   155,   157,   159,   161,   163,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   190,   194,   198,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   188,     0,   192,     0,   196,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   189,   191,   193,   195,   197,   199,     0,
     0,     0,   178,   182,   186,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   176,     0,   180,     0,   184,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   177,   179,
   181,   183,   185,   187,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   166,   170,   174,     0,     0,     0,     0,     0,
     0,     0,   164,     0,   168,     0,   172,     0,     0,     0,
     0,     0,     0,   165,   167,   169,   171,   173,   175,     0,
     0,     0
};

static const short yydefgoto[] = {  2380,
   217,     2,     9,     3,    19,    20,    21,    22,     4,    71,
    72,    73,   449,  1696,   670,  1601,  1698,   671,  1602,  1700,
   672,  1603,  1916,   673,  1862,  1918,   674,  1863,  1920,   675,
  1864,  2052,   676,  2014,  2054,   677,  2015,  2056,   678,  2016,
  2164,   679,  2134,  2166,   680,  2135,  2168,   681,  2136,  2170,
   682,  2137,  2172,   683,  2138,  2174,   684,  2139,  2362,   685,
  2356,  2364,   686,  2357,  2366,   687,  2358,  2311,   688,  2299,
  2313,   689,  2300,  2315,   690,  2301,  2260,   691,  2242,  2262,
   692,  2243,  2264,   693,  2244,  1723,   694,  1625,  1818,   695,
  1725,   696,  1053,   697,   142,   254,    74,   580,   348,   566,
   567,   349,    78,    79,    80,    81,    82,   350,  1243,  1571,
  1679,  1246,  1576,  1683,  1249,  1580,  1686,  1433,  1434,    84,
    85,  1013,   351,   145,   370,   180,   249,   442,  1132,  1051,
  1052,   353,   503,   202,   760,   921,   146
};

static const short yypact[] = {  2848,
    55,   365,   276,  3276,-32768,-32768,-32768,   -86,-32768,    75,
   117,   121,   132,   144,   164,   -22,    -8,     3,-32768,-32768,
-32768,-32768,  2379,    89,    13,   178,   113,   126,   149,   -36,
   258,   169,   175,   161,   184,   177,   336,   392,   402,   569,
   370,   436,   248,   269,   -78,   -78,   272,   511,    10,   441,
    14,   508,   526,   152,   488,   301,   315,   -15,    16,    76,
-32768,   342,-32768,   566,-32768,   504,   545,   509,    21,    67,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    24,  3108,-32768,-32768,-32768,
-32768,-32768,   388,   388,   596,-32768,     4,    18,-32768,-32768,
-32768,-32768,    83,   109,   300,   378,   419,   424,   425,   473,
   477,   486,   487,   490,   491,   497,   498,   501,   502,   505,
   506,   517,   523,   400,   408,   412,-32768,   420,-32768,-32768,
-32768,-32768,  2618,  2618,  2618,-32768,-32768,  2618,  1002,    41,
   602,  2618,   654,   404,-32768,   659,   673,-32768,  2618,-32768,
  2618,  2618,  2618,   516,  2618,   522,  2618,  2618,   621,  2618,
   568,   529,   565,   -66,   621,   573,   574,   586,   587,   590,
   597,   601,   737,   -78,   -78,   -78,  2618,  2618,  -124,-32768,
   -92,   -78,   620,   630,   631,   604,-32768,   621,    73,-32768,
-32768,-32768,   621,   621,   805,  2618,  2618,   -60,  2618,   661,
  2618,   665,   774,  2618,  2618,-32768,   888,-32768,   693,-32768,
-32768,   906,-32768,   913,-32768,   919,    24,   730,   731,   742,
   767,   769,   785,   787,   788,   789,   792,   793,   794,   795,
   796,   797,   798,   800,   801,   807,   808,   833,   834,   835,
   836,   837,   838,   839,   841,   843,   844,   933,   746,   790,
   747,  2618,  1003,-32768,   -78,-32768,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,    86,   128,
   128,  1043,   331,   848,   848,   848, 11353,  1044,  2416,  3035,
   205,   846,  1046,   851,   716,-32768,-32768,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,-32768,  -110,  3682, 11376, 11399, 11422,  2618, 11445,
  2618, 11468, 11491,   344,   849,  1646,  2416,-32768,-32768,-32768,
  1121,  1050,-32768, 11514,  2618,  2618,  2618,  2618,  2618,  1052,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,   847,     7,-32768,
-32768,  3704,  3726,   -78,   -78,   515,   515,   157,  2618,  2618,
  2618,  2618,  2663,    46,  1059,-32768,  2618,  2932,  1074,  1075,
-32768, 11537, 11560,   975,  2618, 11583,   974,  3748,-32768,   876,
  1763, 11606,-32768,  2618,  3022,-32768,  3044,-32768,-32768,    24,
  1084,  1086,  1087,  1088,  1089,  1090,  1091,  1092,  1093,  1094,
  1095,  1096,  1099,  1100,  1101,  1102,  1103,  1104,  1105,  1106,
  1107,  1110,  1113,   958,  1115,  1116,  1117,  1118,  1122,  1119,
-32768,   -99,  1123,  1124,  1126, 10678,   -38,   138,  1469, 11629,
 10703, 11652, 10728, 11675, 10753, 11698, 10778, 11721, 10803, 11744,
 10828, 11767, 10853, 11790, 10878, 11813, 10903, 11836, 10928, 11859,
 10953,  3770,  3792, 11882, 10978, 11905, 11003, 11928, 11028, 11951,
 11053, 11974, 11078, 11997, 11103,  3814,  3836,  3858,  3880,  3902,
  3924,   -35,   123,   924,   930,   931,  2618,-32768,   621,  2648,
  1121,-32768,   197,   190,   128,  2618,  1132,  1136,    19,   937,
-32768,  1848,   479,   736,   374,   374,   318,   318,   318,   318,
   259,   259,   848,   848,   848,   848,  1137,  2416,  2618,  1139,
  1140,  1141, 12020,  1168, 12043,  1169,  1171,  1238,  2618,   405,
  2416,   520,  2618,  2618,  1172,  2677, 12066, 12089, 12112,  3101,
  2618,  3219,  3243, 12135, 12158, 12181, 12204, 12227,   938,   -78,
  2618,  2618,-32768,-32768,-32768,   970,  2685,-32768,   971,  2618,
  3946,  3968,  3990, 11128,    81,   -37,   -34,   153,-32768,-32768,
-32768,  2618,-32768, 11153,-32768,   973,   976,  1176,  1177,   984,
 12250,  1180,   982,  2618,  3066,  2618,  2618,-32768, 12273,-32768,
-32768,  1017,   983,   987,   989,   990,   992,   993,   994,   995,
   997,   998,  1000,  1004,  1005,  1006,  1008,  1009,  1010,  1016,
  1026,  1027,  1035,  1036,  1037,  1065,  1066,  1067,  1068,  1109,
  1120,  1127,-32768,  1187,  1007,-32768,  1128,   154,-32768,-32768,
  1130,  1135,  1138,  1142,  1143,  1145,  1148,  1149,  1150,  1151,
  1152,  1153,  1155,  1156,  1157,  1158,  1161,  1163,  1191,  1192,
  1195,  1197,  1198,  1200,  1204,  1206,  1098,  1129,  1240,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2618,
  2618,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  1297,-32768,  2416,   128,-32768,  2618, 11178,  1318,  2416,  1125,
    47,  2618,  1320,  1335,   758,-32768,  1336,  1205,    16,  1404,
-32768,  2618,-32768,   158,  4012,   -78,   621,   621,  1410,   621,
  1420,   621,   621,-32768,  2416,  3274,  1268,   524,-32768,  1960,
   791,  1133,  1421,  1424,  1426,  1427,  1429,   306,  1430,  1431,
  1432,  1434,  1435,  1437,  1439,  1407,   182,  4034,  4056,-32768,
-32768,  3298,   -78,   -78,   -78,  1442,  2416,  2416,  2416,  2416,
   879,  1443,  2618,  2618,   621,   621,  2618,  1444,   621,  1446,
  4078,-32768,  2270,   688,  1445,  1279,  1451,  2618,  2618,   -78,
  1452,  1453,  1264,  1458,  1459,   621,   621,  1460,   -78,  1461,
  1463,   621,   621,  1464,  1465,  1466,  1468,  1471,   621,   527,
   621,  1473,  1467,  1474,  1475,  1477,-32768,  1476,   388,  1479,
-32768,  1478,  3114,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,   621,
  2618,-32768, 12296, 11203, 12319, 11228, 12342, 11253, 12365, 11278,
 11303,  1278,   189,  1283, 12388,   -58,-32768,  1121,-32768,   142,
   347,  1281,  1481,  1038,-32768,-32768,-32768,    16,  2618,-32768,
   525,-32768, 13262,  1483,  2618,    15,    33,    44,   621,  1484,
   621,  1486,  1487,   528,-32768,-32768,  2416,-32768,  2618,-32768,
  2618,   621,   621,   621,  1298,  1309,-32768,   464,   621,   621,
   621,   621,   621,   621,   621,   534,  2618,  2618,  2618,  1303,
  -127,  -116,  -103,-32768,   532,   539,   540,   543,-32768,-32768,
  4100,  4122,  1507,  1508, 12411,   200,  1408,-32768,  2618,  2618,
  2618,-32768,  1307,  1369,  1333,  4144,  4166,   -95,  1363,  1370,
  1366,  1372,  1368,  1374,  1371,  1389,   236,  1390,  1375,  1377,
  1391,  1392,  1393,  1396,  1397,  1398,  1409,-32768,-32768,-32768,
-32768,-32768,  1399,  1403,  1405,  1406,  1411,  1414,  1412,-32768,
  1413,   -38,-32768,  1612,  4188,  4210,  4232,  4254,  4276,  4298,
  4320,  4342,  4364,  4386,  4408,  4430,  4452,  4474,  4496,  4518,
  4540,  4562,  4584,  4606,  4628,  4650,  4672,  4694,  4716,  4738,
   547,-32768,   548, 13262,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1416,-32768,-32768,-32768,-32768,   621,   128,  2618,
  1617,  1644,    19,-32768,  1645, 11328,    16,-32768,-32768,  4760,
-32768,-32768,   -78,-32768,   -78,  1647,-32768,  1679,-32768,-32768,
  1447,   551, 13262,  4782,  1689,  1690,  1692,  2618,  2618,  2618,
  2618,  1693,  1695,  1697,  1699,  1700,  1702,  1704,-32768,  2495,
  3322, 12434,  1499,   515,   -78,  1705,   -78,  1706,   -78,  1707,
  1709,  1710,  1711,  1712,  2618,  2618,-32768,-32768,  1714,   621,
   621,  1610,   621,  2746,   274, 12457,  2618,    24,  1720,  2618,
   621,  1719,  1749,  1756,  1570,  1758,   527,  1759,  1765,  2618,
  1760,  1766,  1767,  1768,  1769,   527,  2618,  2618,  2618,   621,
  1770,  1772,   527,  2618,  1774,  1775,  1773,  2618,   388,-32768,
-32768,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,   621,  1571,  2618,
  1776,  1777,  1783,  1793,  1231,-32768,  1794,  1799,-32768,  1594,
-32768,  2618,    22,    26,-32768,-32768,-32768,  1601,  2618,-32768,
-32768,-32768,  4804,  4826,  1314,  1401,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1566,  1801,  1599,-32768,  2618,-32768,  1618,
   203,-32768,  1600,   207,-32768,  1620,   209,-32768,  1621,-32768,
-32768,-32768,-32768,  4848,  4870,   200,   210,   552,  1622,  1726,
  2618,-32768,  2618,-32768,-32768,  4892,    24,  1630,  4914,  1626,
-32768,  1627,-32768,  1628,-32768,  1636,-32768,  1632, 12480,-32768,
  1633,-32768,-32768,  1639,  1641, 12503,  4936, 12526,  1637,-32768,
  1643,  1648,  4958,  1642,  1649,-32768,  4980,  1650,  5002,  5024,
  5046,  5068,  5090,  5112,  5134,  5156,  5178,  5200,  5222,  5244,
  5266,  5288,  5310,  5332,  5354,  5376,  5398,  5420,  5442,  5464,
  5486,  5508,  5530,  5552,-32768,   621, 13262,-32768,  1651,-32768,
-32768,-32768,    16,-32768,  1736,  5574,-32768,-32768,-32768,  5596,
  2618,  2618,-32768,-32768,-32768,-32768,   515,  2839,-32768,  1885,
   372,  1885,   372,  1885,   372,  2618,  2618,  1740,-32768,-32768,
   621,  2618,  3346,  3370,   621,    24,  1851,   200,   527,  1856,
  2618,  1854,   527,  1855,  1860,  1858,  1859,  1884,  2618,  1886,
   621,  1887,  1912,  2618,  1863,  1913,  2618,  1918,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,   555,-32768,  1919,-32768,  2618,  1944,
 12549, 12572,  1681,  2618,-32768,  1885,  1885,  2618,  3394,   239,
  1953,  1751,   -33,-32768,  3418,   241,   -31,  3442,   243,   -27,
  3466,  3490,  1752,  1754,  1603,-32768,-32768,  1753,  1795,-32768,
  1761,  1762,  1764,  5618,-32768,  1771,-32768,  1787,-32768,-32768,
-32768, 12595,-32768,  1784,-32768,-32768, 12618,  1788,-32768, 12641,
  1785, 12664, 12687, 12710,  5640,  5662,  5684,  5706,  5728,  5750,
  5772,  5794,  5816,  5838,  5860,  5882,  5904,  5926,  5948,  5970,
  5992,  6014,  6036,  6058,  6080, 12733,  6102,  1961,-32768,  6124,
  1786,   621,   621,-32768,  3514,  2408,  1965,  2618,-32768,   621,
  1967,-32768,  1989,  2618,  1990,  1991,  2618,  1992,  1993,  1994,
   621,   621,-32768,  1995,    24,   527,   527,   527,   527,  1996,
  1997,  1998,   527,  1999,  2000,  2001,  2003,-32768,-32768,-32768,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,-32768,  2618,-32768,  2618,  2023,   621,   621,-32768,-32768,
  1757,  3538,  1826,-32768,-32768,  1835,  3562,-32768,-32768,  1836,
  3586,-32768,-32768,-32768,  1838,  1837,-32768,    24,  1840,  1842,
  1849,  1853,-32768,-32768,-32768,  1846,-32768,-32768,-32768,  1864,
  1865,  1866,  1869,  6146,  6168,  6190,  6212,  6234,  6256,  6278,
  6300,  6322,  6344,  6366,  6388,  6410,  6432,  6454,  6476,  6498,
  6520,  6542,  6564,  6586,  1870, 12756,  3610,  1872,  2067,  2075,
   372,  2077,   621,   372,  2078,   372,  2079,   621,  1980,    24,
   527,   527,  2082,  2083,   527,  2085,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
   128,-32768,  2087,  2086,-32768,-32768,   -25,-32768,  1888,   558,
   -24,-32768,  1889,   -14,-32768,  1890,  1900,  1891,  1925,  1903,
  1904,-32768,-32768,  1893,  1910,   562, 13262,   563, 13262,   570,
 13262,  6608,  6630,  6652,  6674,  6696,  6718,  6740,  6762,  6784,
  6806,  6828,  6850,  6872,  6894,  6916,  6938,  6960,  6982,  7004,
  7026,  7048,   571,-32768,  1905,-32768,  1906,  2109,   372,   621,
  2111,  2112,   372,  2113,   372,  2014,  2618,    24,   527,   621,
  2115,  2116,  2618,  2117,  2618,  2118,  2618,  2119,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,   128,
  2140,   128,  2150,-32768,   -10,  1947,-32768,-32768,     1,-32768,
    71,  1949,  7070,    24,  1951,  1952,-32768,-32768, 13262,-32768,
 13262,-32768, 13262,-32768, 12779, 12802, 12825,  7092,  7114,  7136,
  7158,  7180,  7202,  7224,  7246,  7268,  7290,  7312,  7334,  7356,
  7378,  7400,  7422,  7444,  7466,-32768,-32768,   585,-32768,-32768,
  2157,  2159,  2161,  2163,  2618,  2618,    24,   527,   621,-32768,
-32768,-32768,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
   128,  2165,-32768,-32768,-32768,-32768,  7488,  3634,  2008,  1976,
  1977,  1964,  1978,  1979,  7510,  7532,  7554,  7576,  7598,  7620,
  7642,  7664,  7686,  7708,  7730,  7752,  7774,  7796,  7818,  7840,
  7862,  7884,-32768,-32768,  2618,  2180,  2015,   621,   527,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  3658,-32768,-32768,  1985,  2007,   588, 13262,   592, 13262,   599,
 13262,  7906,  7928,  7950,  7972,  7994,  8016,  8038,  8060,  8082,
  8104,  8126,  8148,  8170,  8192,  8214,  8236,  8258,  8280,  2190,
   621,  2191,  2618,  2192,  2618,  2193,  2618,  2194,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,-32768,  2004,-32768, 13262,
-32768, 13262,-32768, 13262,-32768, 12848, 12871, 12894,  8302,  8324,
  8346,  8368,  8390,  8412,  8434,  8456,  8478,  8500,  8522,  8544,
  8566,  8588,  8610,   621,-32768,-32768,-32768,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2005,  2002,  2006,  2009,  8632,  8654,  8676,  8698,
  8720,  8742,  8764,  8786,  8808,  8830,  8852,  8874,  8896,  8918,
  8940,   621,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2011,   606, 13262,   607, 13262,   611, 13262,  8962,  8984,  9006,
  9028,  9050,  9072,  9094,  9116,  9138,  9160,  9182,  9204,  9226,
  9248,  9270,   527,  2618,  2195,  2618,  2196,  2618,  2197,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2013, 13262,-32768, 13262,-32768, 13262,
-32768, 12917, 12940, 12963, 12986, 13009, 13032,  9292,  9314,  9336,
  9358,  9380,  9402,  9424,  9446,  9468,  2208,-32768,-32768,-32768,
-32768,-32768,-32768,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,-32768,  2012,  2022,  2024,  2025,  2026,  2027,  9490,
  9512,  9534,  9556,  9578,  9600,  9622,  9644,  9666,  2618,  2618,
  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,   612, 13262,   616, 13262,   617, 13262,   623,
 13262,   624, 13262,   627, 13262,  9688,  9710,  9732,  9754,  9776,
  9798,  9820,  9842,  9864,  2618,  2211,  2618,  2214,  2618,  2226,
  2618,  2233,  2618,  2234,  2618,  2236,  2618,  2618,  2618,  2618,
  2618,  2618,  2618,  2618,  2618, 13262,-32768, 13262,-32768, 13262,
-32768, 13262,-32768, 13262,-32768, 13262,-32768,  9886,  9908,  9930,
  9952,  9974,  9996, 13055, 13078, 13101,  2618,  2618,  2618,  2618,
  2618,  2618,-32768,-32768,-32768, 10018, 10040, 10062, 10084, 10106,
 10128,  2041,  2043,  2045,  2618,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2618, 10150, 10172, 10194, 10216, 10238, 10260,   628,
 13262,   676, 13262,   682, 13262,  2618,  2618,  2618,  2618,  2618,
  2618,  2618,  2249,  2618,  2250,  2618,  2251, 10282, 10304, 10326,
 13124, 13147, 13170, 13262,-32768, 13262,-32768, 13262,-32768,  2618,
  2618,  2618,-32768,-32768,-32768, 10348, 10370, 10392,  2051,  2052,
  2053,  2618,  2618,  2618,  2618,  2618,  2618, 10414, 10436, 10458,
   705, 13262,   752, 13262,   753, 13262,  2618,  2618,  2618,  2618,
  2257,  2618,  2260,  2618,  2264, 10480, 10502, 10524, 13262,-32768,
 13262,-32768, 13262,-32768,  2618,  2618,  2618, 10546, 10568, 10590,
  2618,  2618,  2618, 10612, 10634, 10656,  2618,  2618,  2618, 13193,
 13216, 13239,-32768,-32768,-32768,  2063,  2065,  2066,  2618,  2618,
  2618,   756, 13262,   757, 13262,   760, 13262,  2618,  2271,  2618,
  2279,  2618,  2280, 13262,-32768, 13262,-32768, 13262,-32768,  2276,
  2287,-32768
};

static const short yypgoto[] = {-32768,
  -130,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1652,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -303,   -18,-32768,  2284,    -1,  -370,
  -175,     2,-32768,-32768,-32768,-32768,-32768,  2285,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1342, -1367,-32768,
-32768, -1085,   -23,-32768,   -29,-32768,   -90,-32768, -1222, -1106,
  1422,  -191,  -337,  -750,  1217,-32768,   -68
};


#define	YYLAST		13463


static const short yytable[] = {   144,
   212,   214,    76,   250,   143,    77,   569,   506,   920,   542,
  1437,   383,  1440,   186,   388,   179,   181,   189,   148,   200,
  1081,   255,   758,  1257,  1258,   210,   215,  1337,   198,   154,
   154,  1338,   156,  1358,  1431,   405,  1431,   407,  1082,  1432,
  1431,  1432,  1431,  1431,   311,  1432,   394,  1432,  1432,  1084,
   911,   581,   582,  1431,   124,   125,   126,  1431,  1432,   127,
     5,  1276,  1432,   374,   375,  1512,   374,   375,  1431,  1512,
  1285,   210,  1512,  1432,   374,   375,   385,  1292,   386,   203,
  1115,    87,  1116,  1083,   376,    86,   410,   374,   375,   492,
   210,  1117,   527,  1118,  1085,   374,   375,   528,   374,   375,
   124,   125,   126,   633,  1119,   127,  1120,  1142,   634,   304,
   305,   306,   175,   176,   307,   310,   377,   502,   315,   124,
   125,   126,    88,   177,   127,   335,    89,   336,   337,   338,
   178,   340,   210,   342,   343,   358,   354,    90,  1431,   136,
   137,   395,   359,  1432,   369,  1451,   371,   860,    99,    91,
   312,   313,   378,   372,   373,   502,   912,   913,   210,   136,
   137,   124,   125,   126,   155,   155,   127,  1075,   740,    92,
   741,   808,   392,   393,   809,   396,  1511,   398,  1515,    93,
   401,   402,  1518,   150,  1728,  1732,   199,   124,   125,   126,
   764,   193,   127,    94,   194,  1734,    99,   374,   375,  1821,
   752,   136,   137,   778,    95,   374,   375,   252,   159,   253,
  1823,   505,   374,   375,   560,   216,   374,   375,   187,  1415,
   161,   149,   190,   595,   201,   448,   256,   759,   446,   211,
   493,   494,   495,   450,   451,   452,   453,   454,   455,   456,
   457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
   467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
   477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
   487,   488,   489,   490,   491,   213,   387,   204,    10,   602,
  1824,  1263,   151,  1452,   257,   501,   258,  1456,  1677,   807,
   147,  1681,   507,  1684,   512,   513,   514,   515,   516,   517,
   518,   519,   520,   521,   522,   523,   524,   525,   526,  1512,
   259,   947,   260,  1512,   151,   533,  1512,   535,   129,   130,
   131,   132,   305,   501,   156,   742,  1211,   152,   374,   375,
   743,   546,   547,   548,   549,   550,   502,   552,   553,   554,
   555,   556,   557,   558,   563,   564,   640,   374,   375,   502,
   153,   136,   137,  1069,   158,   571,   572,   573,   574,   860,
   924,   810,   948,   584,   570,   749,   129,   130,   131,   132,
   157,   591,   374,   375,   565,   565,   158,   568,   568,   162,
   599,   129,   130,   131,   132,   160,  1775,   136,   137,   957,
  1779,  1065,  1781,   374,   375,   751,   749,   374,   375,   374,
   375,  1130,   136,   137,   749,   903,   750,  1512,  1131,   317,
  1350,  1512,  1359,  1512,  1352,   168,  1354,  1198,    11,    12,
    13,    14,    15,    16,    17,    18,   374,   375,   639,   374,
   375,   374,   375,   374,   375,   163,   754,   934,  1151,  1431,
  1589,  1590,  1591,  1592,  1432,   164,  1508,  1596,  1514,   173,
  1517,   329,   330,   331,   318,   319,   320,   321,   322,   332,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   965,
   966,   967,   968,   747,   332,   169,   305,   174,   170,   171,
   182,   172,   755,  1264,   188,   753,   318,   319,   320,   321,
   322,   195,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   261,   196,   262,   501,   765,   332,   207,   327,   328,
   329,   330,   331,   191,   747,   776,   197,   501,   332,   780,
   781,  1100,  1101,   129,   130,   131,   132,   788,   136,   137,
   797,   192,     6,     7,   497,     8,   253,   798,   799,  1109,
  1110,   136,   137,   205,   136,   137,   802,   538,   208,   253,
   183,   502,   209,   184,   185,  1690,  1691,   909,   811,  1694,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   862,
   821,   206,   823,   824,   332,    44,    45,    46,    47,   263,
    49,   264,  1417,   502,   318,   319,   320,   321,   322,   248,
   323,   324,   325,   326,   327,   328,   329,   330,   331,  1092,
   251,   299,   136,   137,   332,   314,  1068,  1070,   777,   300,
   253,   165,   166,   301,   167,   502,   502,   502,   502,   861,
   265,   302,   266,    96,   344,   267,   269,   268,   270,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,  1785,  1008,  1009,  1010,  1011,  1012,   316,
   345,   320,   321,   322,   333,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   271,   904,   272,   334,   273,   332,
   274,    44,    45,    46,    47,    48,    49,   275,   277,   276,
   278,   279,   281,   280,   282,   981,   893,   894,   283,   285,
   284,   286,   287,   289,   288,   290,   291,   293,   292,   294,
   895,   896,   897,   898,   899,   900,   901,   339,   295,   501,
   296,   511,   905,   341,   297,   908,   298,   749,   914,   779,
   356,   749,  1077,   938,  1078,   749,   926,  1091,   923,   749,
   368,  1121,  1860,  1240,   128,   502,   749,   749,  1122,  1123,
   749,   501,  1124,   747,  1198,  1200,  1199,  1201,   749,  1198,
  1218,  1360,  1198,   917,  1498,  1730,   357,  1731,  1021,  1743,
  1745,  1744,  1746,   961,   962,   963,   355,  1747,  1770,  1748,
  1771,   361,   362,   501,   501,   501,   501,   363,   364,   971,
   972,   365,  1851,   975,  1852,  1943,   940,  1944,   366,  1945,
   988,  1946,   367,  1915,   986,   987,  1947,   382,  1948,   997,
   391,   133,   346,  2074,  2076,  2075,  2077,   135,  2078,  2185,
  2079,  2186,   138,  2187,  2189,  2188,  2190,   141,   379,   347,
  2191,  2193,  2192,  2194,  2195,  2272,  2196,  2273,   380,   381,
  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1032,  1033,  1034,
  1035,  1036,  1037,  1038,  1039,  1040,  1041,  1042,  1043,  1044,
  1045,  1046,  1047,  1048,  1049,  1050,   397,  1054,   318,   319,
   320,   321,   322,   399,   323,   324,   325,   326,   327,   328,
   329,   330,   331,  2274,   969,  2275,   400,   861,   332,  2276,
   982,  2277,  1071,   403,   404,  1076,   318,   319,   320,   321,
   322,  1080,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   406,  2320,   501,  2321,  1093,   332,  1094,   408,   321,
   322,   409,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   411,   412,  1111,  1112,  1113,   332,   441,   318,   319,
   320,   321,   322,   413,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   443,   445,  1134,  1135,  1136,   332,  2322,
  2324,  2323,  2325,  2368,  2370,  2369,  2371,  2372,   414,  2373,
   415,   318,   319,   320,   321,   322,  1423,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   416,  2095,   417,   418,
   419,   332,   444,   420,   421,   422,   423,   424,   425,   426,
  1204,   427,   428,  1170,    96,   303,   447,  1267,   429,   430,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   431,   432,   433,   434,   435,   436,
   437,  1235,   438,  1074,   439,   440,  1205,   496,   332,   559,
   499,   508,   509,  1213,   510,  1214,   544,   539,   551,   318,
   319,   320,   321,   322,   583,   323,   324,   325,   326,   327,
   328,   329,   330,   331,  1223,  1224,  1225,  1226,  1298,   332,
   586,   587,   590,   593,   596,  1241,  1234,  1244,   603,  1247,
   604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
   614,  1254,  1255,   615,   616,   617,   618,   619,   620,   621,
   622,   623,   565,  1266,   624,   568,  1269,   625,   626,   627,
   628,   629,   630,   632,   631,   128,  1279,   635,   543,   636,
   637,   744,   745,  1286,  1287,  1288,  1366,   756,   746,   757,
  1293,   761,   763,   796,  1297,   766,   767,   768,  1299,  1300,
  1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,
  1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,
  1321,  1322,  1323,  1324,   770,   772,  1327,   773,   782,   800,
   801,   813,   815,   816,   814,   817,   819,   820,  1336,   826,
   827,   857,   133,   134,   828,  1340,   829,   830,   135,   831,
   832,   833,   834,   138,   835,   836,   308,   837,   141,   858,
   309,   838,   839,   840,  1348,   841,   842,   843,   318,   319,
   320,   321,   322,   844,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   845,   846,  1449,  1332,  1363,   332,  1364,
    96,   303,   847,   848,   849,   892,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
    96,   303,   850,   851,   852,   853,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   902,   318,   319,   320,   321,   322,   890,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   854,  1421,  1422,  1343,
  1430,   332,  1436,   907,  1439,   915,  1429,   855,  1435,   910,
  1438,   864,  1441,  1442,   856,   859,   865,   891,  1445,   866,
   916,   941,   918,   867,   868,   565,   869,  1454,   568,   870,
   871,   872,   873,   874,   875,  1462,   876,   877,   878,   879,
  1467,   128,   880,  1470,   881,  1472,  1473,  1474,  1475,  1476,
  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,
  1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,
  1497,   128,   882,   883,  1588,  1500,   884,   371,   885,   886,
  1505,   887,   304,   305,  1506,   888,  1344,   889,   919,   922,
   956,   318,   319,   320,   321,   322,   929,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   931,   942,   133,   134,
   943,   332,   944,   945,   135,   946,   949,   950,   951,   138,
   952,   953,   774,   954,   141,   955,   775,   964,   970,   978,
   976,   983,   984,   985,   989,   990,   991,  1640,   133,   134,
   992,   993,   996,   998,   135,   999,  1002,  1003,  1004,   138,
  1005,  1016,   936,  1006,   141,  1015,   937,  1018,  1017,  1019,
  1064,  1020,  1022,  1023,  1572,  1066,  1072,  1073,  1079,  1087,
  1577,  1089,  1090,  1581,   318,   319,   320,   321,   322,  1098,
   323,   324,   325,   326,   327,   328,   329,   330,   331,  1689,
  1099,  1114,  1127,  1128,   332,  1137,  1133,  1604,  1605,  1606,
  1607,  1608,  1609,  1610,  1611,  1612,  1613,  1614,  1615,  1616,
  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1138,  1626,
  1139,  1627,   641,   642,   643,   644,   645,   646,   647,   648,
   649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
   659,   660,   661,   662,   663,   664,   665,   666,   667,   668,
  1143,  1345,  1144,  1145,  1146,  1147,  1148,  1153,  1149,  1154,
   352,   318,   319,   320,   321,   322,   360,   323,   324,   325,
   326,   327,   328,   329,   330,   331,  1150,  1152,  1155,  1156,
  1157,   332,  1724,  1158,  1159,  1160,  1162,  1784,  1523,   384,
  1163,  1161,  1164,  1165,   389,   390,  1167,  1171,  1166,  1168,
  1169,  1202,  1206,  1697,  1699,  1701,  1702,  1703,  1704,  1705,
  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,
  1716,  1717,  1718,  1719,  1720,  1721,  1722,  1207,    96,   540,
  1209,  1217,  1215,  1827,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   669,   318,
   319,   320,   321,   322,  1216,   323,   324,   325,   326,   327,
   328,   329,   330,   331,  1220,  1221,  1859,  1222,  1227,   332,
  1228,  1816,  1229,  1819,  1230,  1231,  1238,  1232,  1239,  1233,
  1242,  1245,  1248,  1783,  1250,  1251,  1252,  1253,  1259,  1789,
  1256,  1791,  1268,  1793,  1271,  1795,  1796,  1797,  1798,  1799,
  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,  1809,
  1810,  1811,  1812,  1813,  1814,  1815,   318,   319,   320,   321,
   322,  1272,   323,   324,   325,   326,   327,   328,   329,   330,
   331,  1273,  1274,  1275,  1277,  1280,   332,  1278,  1281,   128,
   597,  1284,  1282,  1283,  1291,  1290,  1294,  1295,  1296,  1326,
  1329,  1328,  1883,   318,   319,   320,   321,   322,  1330,   323,
   324,   325,   326,   327,   328,   329,   330,   331,  1331,  1335,
  1333,  1857,  1858,   332,  1334,  1339,  1346,  1347,  1351,  1865,
  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1349,  1353,  1355,
  1361,  1362,  1367,  1369,  1370,  1371,   133,   134,  1372,  1373,
  1375,  1376,   135,  1377,  1381,  1382,  1418,   138,  1443,  1385,
  1383,  1386,   141,  1416,   541,   762,  1450,  1388,  1453,  1455,
  1457,  1911,  1458,  1459,  1460,  1468,  1917,  1919,  1921,  1922,
  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,
  1933,  1934,  1935,  1936,  1937,  1938,  1939,    96,   303,  1461,
  1504,  1463,  1465,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,  1466,  1469,  1970,
   748,  1972,  1471,  1974,  1499,  1976,  1977,  1978,  1979,  1980,
  1981,  1982,  1983,  1984,  1985,  1986,  1987,  1988,  1989,  1990,
  1991,  1992,  1993,   318,   319,   320,   321,   322,  1501,   323,
   324,   325,   326,   327,   328,   329,   330,   331,  1509,  1510,
  1521,  1522,  1524,   332,  1525,  1631,  1564,   939,  1526,  1527,
  1570,  1528,  1574,  1530,  2017,  2018,  2019,  2020,  2021,  2022,
  2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  1531,
  1535,  1533,  1537,  1566,  1575,  1578,  1579,  1582,  1583,  1584,
  1587,  1593,  1594,  1595,  1597,  1598,  1599,  1600,   128,  2053,
  2055,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,
  2066,  2067,  2068,  2069,  2070,  2071,  2072,  1628,   318,   319,
   320,   321,   322,  1633,   323,   324,   325,   326,   327,   328,
   329,   330,   331,  1634,  1636,  1638,  1639,  1641,   332,  1642,
  2096,  1643,  2098,  1645,  2100,  1644,  2102,  2103,  2104,  2105,
  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,
  2116,  1646,  1675,  1647,  1648,  1426,  1427,  1649,  1671,  1674,
  1676,   135,  1678,  1682,  1685,  1688,  1428,  1692,  1693,  1695,
  1727,   141,  1726,   178,  1738,  1741,  1729,  1733,  1735,  1737,
  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,  2148,  1736,
  1739,  1740,  1742,  1772,  1774,  1773,  1777,  1778,  1780,  1782,
  1787,  1788,  1790,  1792,  1794,  2165,  2167,  2169,  2171,  2173,
  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,  2183,  2184,
   318,   319,   320,   321,   322,  1817,   323,   324,   325,   326,
   327,   328,   329,   330,   331,  1820,  1822,  1825,  1828,  1829,
   332,  2206,  1853,  2208,  1854,  2210,  1855,  2212,  1856,  2214,
  1884,  2216,  1890,  2218,  2219,  2220,  2221,  2222,  2223,  2224,
  2225,  2226,  1887,  1888,  1889,  1912,  1891,  1892,   927,   928,
  1913,   930,  1941,   932,   933,  1967,  1969,  1971,  1973,  1975,
  2097,  2099,  2101,  2236,  2237,  2238,  2239,  2240,  2241,  1942,
  2033,  1994,  2032,  2133,  2034,  2117,  2207,  2035,  2073,  2209,
  2149,  2254,  2255,  2256,  2257,  2258,  2259,  2261,  2263,  2265,
  2150,  2211,  2151,  2152,  2153,  2154,   973,   974,  2213,  2215,
   977,  2217,  2278,  2279,  2280,  2281,  2282,  2283,  2284,  2251,
  2286,  2252,  2288,  2253,  2285,  2287,  2289,   994,   995,  2305,
  2306,  2307,  2330,  1000,  1001,  2332,  2296,  2297,  2298,  2334,
  1007,  2359,  1014,  2360,  2361,  2381,  2375,   980,  2308,  2309,
  2310,  2312,  2314,  2316,  2377,  2379,  2382,    75,    83,  1208,
     0,   863,     0,  2326,  2327,  2328,  2329,     0,  2331,     0,
  2333,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  2338,  2339,  2340,     0,     0,     0,  2344,  2345,  2346,
     0,     0,     0,  2350,  2351,  2352,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  2363,  2365,  2367,     0,     0,
     0,     0,     0,     0,  2374,     0,  2376,     0,  2378,     0,
  1086,     0,  1088,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1095,  1096,  1097,     0,     0,     0,     0,
  1102,  1103,  1104,  1105,  1106,  1107,  1108,     0,     0,     0,
     0,    96,    97,    98,     0,    99,     0,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,     0,   124,   125,   126,     0,     0,   127,    96,   344,
     0,     0,     0,     0,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,     0,     0,
   318,   319,   320,   321,   322,   345,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,     0,     0,    44,    45,    46,    47,
    48,    49,     0,     0,     0,     0,     0,     0,     0,  1203,
     0,     0,     0,     0,     0,     0,     0,    96,   303,   210,
     0,     0,   128,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,     0,   124,   125,
   126,     0,     0,   127,     0,     0,     0,     0,     0,   128,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1260,   129,   130,   131,   132,     0,
     0,     0,  1270,     0,     0,     0,     0,     0,     0,   133,
   134,     0,     0,     0,     0,   135,   136,   137,     0,     0,
   138,  1289,   139,     0,   140,   141,     0,     0,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,   133,   500,   332,     0,
   498,     0,   135,     0,     0,   561,     0,   138,   128,  1325,
    96,   303,   141,     0,     0,     0,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
    96,   540,     0,     0,     0,     0,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     0,     0,     0,     0,     0,   133,   134,     0,     0,     0,
     0,   135,     0,     0,     0,     0,   138,     0,     0,     0,
     0,   141,   575,    28,    29,   576,   577,    32,   578,    34,
     0,    35,     0,    37,    38,    39,     0,    41,    42,     0,
     0,     0,     0,     0,   575,    28,    29,   576,   577,    32,
   578,    34,     0,    35,    54,    37,    38,    39,     0,    41,
    42,   128,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    54,     0,     0,     0,
     0,     0,     0,     0,     0,    56,    57,    58,     0,     0,
     0,   128,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1444,    68,     0,     0,  1448,    56,    57,    58,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1464,     0,     0,    68,     0,     0,   133,   134,
     0,     0,     0,     0,   135,     0,     0,     0,     0,   138,
     0,     0,     0,     0,   141,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   133,   134,
     0,     0,     0,     0,   135,     0,     0,    -7,     1,   138,
   -12,   -55,     0,     0,   141,     0,     0,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   579,     0,     0,     0,     0,   332,     0,     0,
   -55,     0,     0,     0,   -55,   -55,   783,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,     0,     0,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,
     0,     0,     0,  1567,  1568,     0,   318,   319,   320,   321,
   322,  1573,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,  1585,  1586,     0,     0,   332,     0,     0,   -55,
   -55,   -55,   -55,  1261,     0,  1262,     0,   -55,     0,   -55,
     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   575,    28,    29,   576,   577,    32,   578,    34,     0,
    35,     0,    37,    38,    39,     0,    41,    42,  1629,  1630,
   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,     0,     0,
     0,     0,     0,    54,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    -7,    -7,     0,    -7,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,    56,    57,    58,     0,     0,   332,
     0,     0,     0,     0,     0,     0,  1424,     0,  1425,     0,
     0,     0,    68,     0,  1680,     0,     0,     0,     0,  1687,
     0,   575,    28,    29,   576,   577,    32,   578,    34,     0,
    35,     0,    37,    38,    39,     0,    41,    42,     0,     0,
     0,     0,     0,   575,    28,    29,   576,   577,    32,   578,
    34,     0,    35,    54,    37,    38,    39,     0,    41,    42,
     0,     0,     0,     0,     0,   575,    28,    29,   576,   577,
    32,   578,    34,     0,    35,    54,    37,    38,    39,     0,
    41,    42,     0,     0,    56,    57,    58,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,     0,     0,
     0,   585,    68,     0,     0,     0,    56,    57,    58,     0,
   218,  1776,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1786,     0,     0,    68,     0,     0,     0,    56,    57,
    58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    68,   641,   642,   643,
   644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
   654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
   664,   665,   666,   667,   668,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,   600,   219,   220,   221,   332,     0,     0,     0,   504,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
  1861,     0,     0,   601,     0,     0,     0,     0,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,     0,   242,
   243,   244,   245,   246,   247,   822,     0,     0,     0,    23,
     0,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,     0,     0,     0,     0,     0,    24,  1914,
   787,     0,    25,    26,     0,    27,    28,    29,    30,    31,
    32,    33,    34,  1024,    35,    36,    37,    38,    39,    40,
    41,    42,     0,     0,     0,    43,    44,    45,    46,    47,
    48,    49,     0,    50,    51,    52,    53,    54,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1968,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,     0,     0,     0,     0,    59,     0,    60,     0,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,  2013,     0,     0,     0,   332,
     0,     0,     0,   318,   319,   320,   321,   322,   789,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,     0,     0,     0,
     0,     0,   790,  2051,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,   935,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,   960,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,     0,     0,   318,   319,   320,   321,
   322,  1236,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,     0,     0,
   318,   319,   320,   321,   322,  1446,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,   318,   319,   320,   321,   322,  1447,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,  1507,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,  1513,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,     0,     0,   318,   319,   320,   321,
   322,  1516,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,     0,     0,
   318,   319,   320,   321,   322,  1519,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,   318,   319,   320,   321,   322,  1520,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,  1569,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,  1632,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,     0,     0,   318,   319,   320,   321,
   322,  1635,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,     0,     0,
   318,   319,   320,   321,   322,  1637,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,     0,     0,   318,   319,   320,   321,   322,  1673,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,     0,     0,   318,   319,
   320,   321,   322,  1886,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   318,   319,   320,   321,   322,  1940,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   529,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   561,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   562,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   594,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,   720,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   721,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   734,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   735,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   736,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,   737,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   738,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   739,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   803,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   804,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,   805,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,   925,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,   958,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,   959,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,   979,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1125,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1126,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1140,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1141,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1172,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1173,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1174,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1175,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1176,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1177,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1178,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1179,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1180,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1181,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1182,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1183,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1184,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1185,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1186,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1187,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1188,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1189,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1190,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1191,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1192,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1193,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1194,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1195,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1196,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1197,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1212,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1219,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1341,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1342,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1356,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1357,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1365,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1368,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1379,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1384,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1387,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1389,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1390,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1391,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1392,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1393,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1394,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1395,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1396,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1397,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1398,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1399,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1400,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1401,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1402,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1403,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1404,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1405,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1406,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1407,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1408,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1409,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1410,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1411,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1412,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1413,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1414,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1419,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1420,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1529,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1541,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1542,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1543,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1544,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1545,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1546,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1547,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1548,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1549,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1550,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1551,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1552,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1553,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1554,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1555,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1556,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1557,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1558,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1559,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1560,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1561,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1563,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1565,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1650,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1651,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1652,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1653,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1654,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1655,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1656,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1657,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1658,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1659,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1660,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1661,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1662,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1663,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1664,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1665,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1666,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1667,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1668,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1669,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1670,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1749,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1750,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1751,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1752,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1753,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1754,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1755,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1756,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1757,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1758,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1759,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1760,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1761,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1762,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1763,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1764,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1765,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1766,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1767,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1768,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1769,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1826,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1833,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1834,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1835,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1836,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1837,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1838,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1839,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1840,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1841,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1842,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1843,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1844,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1845,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1846,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1847,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1848,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1849,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1850,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1885,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1893,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1894,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1895,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1896,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1897,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1898,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1899,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1900,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1901,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1902,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1903,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1904,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1905,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1906,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1907,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1908,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1909,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1910,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1949,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1950,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1951,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1952,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1953,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1954,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1955,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1956,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1957,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1958,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1959,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1960,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1961,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1962,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1963,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  1964,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  1965,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  1966,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  1998,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  1999,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2000,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2001,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2002,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2003,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2004,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2005,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2006,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2007,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2008,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2009,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2010,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2011,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2012,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2036,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2037,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2038,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2039,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2040,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2041,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2042,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2043,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2044,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2045,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2046,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2047,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2048,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2049,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2050,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2080,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2081,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2082,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2083,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2084,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2085,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2086,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2087,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2088,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2089,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2090,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2091,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2092,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2093,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2094,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2124,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2125,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2126,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2127,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2128,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2129,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2130,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2131,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2132,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2155,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2156,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2157,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2158,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2159,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2160,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2161,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2162,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2163,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2197,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2198,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2199,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2200,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2201,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2202,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2203,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2204,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2205,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2227,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2228,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2229,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2230,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2231,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2232,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2245,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2246,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2247,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2248,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2249,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2250,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2266,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2267,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2268,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2269,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2270,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2271,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2290,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2291,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2292,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2302,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2303,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2304,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2317,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2318,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2319,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2335,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2336,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2337,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2341,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   318,   319,   320,   321,   322,  2342,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   318,   319,   320,   321,   322,  2343,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   318,   319,   320,   321,   322,  2347,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   318,   319,   320,   321,
   322,  2348,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   318,   319,
   320,   321,   322,  2349,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   638,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   699,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   701,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   703,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   705,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   707,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   709,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   711,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   713,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   715,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   717,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   719,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   723,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   725,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   727,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   729,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   731,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   733,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   806,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,   812,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,   906,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,  1056,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,  1058,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,  1060,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,  1062,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,     0,     0,  1063,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
     0,     0,  1210,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   498,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   530,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   531,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   532,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   534,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   536,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   537,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   545,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   588,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   589,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   592,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   598,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   698,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   700,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   702,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   704,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   706,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   708,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   710,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   712,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   714,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   716,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   718,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   722,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   724,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   726,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   728,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   730,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   732,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   769,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   771,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,   784,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,   785,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,   786,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,   791,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
   792,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,   793,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,   794,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,   795,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,   818,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,   825,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,  1055,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,  1057,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,  1059,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,  1061,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
  1067,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,  1129,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,  1237,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,  1265,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,  1374,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,  1378,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,  1380,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,  1502,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,  1503,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,  1532,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
  1534,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,  1536,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,  1538,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,  1539,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,  1540,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,  1562,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,  1672,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,  1830,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,  1831,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,  1832,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
  1995,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,  1996,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,  1997,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,  2118,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,  2119,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,  2120,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,  2121,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,  2122,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332,     0,  2123,   318,   319,   320,   321,   322,
     0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     0,     0,     0,     0,     0,   332,     0,  2233,   318,   319,
   320,   321,   322,     0,   323,   324,   325,   326,   327,   328,
   329,   330,   331,     0,     0,     0,     0,     0,   332,     0,
  2234,   318,   319,   320,   321,   322,     0,   323,   324,   325,
   326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
     0,   332,     0,  2235,   318,   319,   320,   321,   322,     0,
   323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     0,     0,     0,     0,   332,     0,  2293,   318,   319,   320,
   321,   322,     0,   323,   324,   325,   326,   327,   328,   329,
   330,   331,     0,     0,     0,     0,     0,   332,     0,  2294,
   318,   319,   320,   321,   322,     0,   323,   324,   325,   326,
   327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
   332,     0,  2295,   318,   319,   320,   321,   322,     0,   323,
   324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     0,     0,     0,   332,     0,  2353,   318,   319,   320,   321,
   322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
   331,     0,     0,     0,     0,     0,   332,     0,  2354,   318,
   319,   320,   321,   322,     0,   323,   324,   325,   326,   327,
   328,   329,   330,   331,     0,     0,     0,     0,     0,   332,
     0,  2355,   318,   319,   320,   321,   322,     0,   323,   324,
   325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
     0,     0,   332
};

static const short yycheck[] = {    23,
    69,    70,     4,    94,    23,     4,   377,   311,   759,   347,
  1353,   187,  1355,     4,   190,    45,    46,     4,     6,     4,
     6,     4,     4,  1130,  1131,     5,     3,     6,    44,    67,
    67,     6,    67,  1256,    68,   211,    68,   213,     6,    73,
    68,    73,    68,    68,     4,    73,   107,    73,    73,     6,
     4,     6,     7,    68,    34,    35,    36,    68,    73,    39,
     6,  1147,    73,   191,   192,  1433,   191,   192,    68,  1437,
  1156,     5,  1440,    73,   191,   192,     4,  1163,     6,     4,
   208,     7,   210,    51,   209,   172,   217,   191,   192,     4,
     5,   208,   203,   210,    51,   191,   192,   208,   191,   192,
    34,    35,    36,   203,   208,    39,   210,   203,   208,   133,
   134,   135,   191,   192,   138,   139,   209,   309,   142,    34,
    35,    36,     6,   202,    39,   149,     6,   151,   152,   153,
   209,   155,     5,   157,   158,   202,   160,     6,    68,   198,
   199,   202,   209,    73,   174,  1368,   176,   206,     7,     6,
   110,   111,   182,   177,   178,   347,   110,   111,     5,   198,
   199,    34,    35,    36,   202,   202,    39,   918,   204,     6,
   206,   209,   196,   197,   209,   199,   210,   201,   210,   202,
   204,   205,   210,     6,   210,   210,   202,    34,    35,    36,
   528,    40,    39,   202,    43,   210,     7,   191,   192,   210,
   504,   198,   199,   541,   202,   191,   192,   204,    48,   206,
   210,     7,   191,   192,   208,   192,   191,   192,   209,  1326,
    44,   209,   209,   399,   209,   255,   209,   209,   252,   209,
   299,   300,   301,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   209,   204,   202,     3,   410,
   210,     8,   202,  1369,   202,   309,   204,  1373,  1631,   209,
   202,  1634,   311,  1636,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,  1677,
   202,     6,   204,  1681,   202,   339,  1684,   341,   177,   178,
   179,   180,   346,   347,    67,   203,  1077,   202,   191,   192,
   208,   355,   356,   357,   358,   359,   528,   361,   362,   363,
   364,   365,   366,   367,   374,   375,   209,   191,   192,   541,
   202,   198,   199,     7,   202,   379,   380,   381,   382,   206,
   203,   209,    57,   387,   208,   208,   177,   178,   179,   180,
   202,   395,   191,   192,   376,   377,   202,   376,   377,    44,
   404,   177,   178,   179,   180,   202,  1729,   198,   199,   208,
  1733,   203,  1735,   191,   192,   206,   208,   191,   192,   191,
   192,   202,   198,   199,   208,   743,   210,  1775,   209,     6,
   208,  1779,   203,  1781,   208,    46,   208,   208,   143,   144,
   145,   146,   147,   148,   149,   150,   191,   192,   447,   191,
   192,   191,   192,   191,   192,    44,   505,   775,   203,    68,
  1526,  1527,  1528,  1529,    73,    44,   208,  1533,   208,   202,
   208,   193,   194,   195,   181,   182,   183,   184,   185,   201,
   187,   188,   189,   190,   191,   192,   193,   194,   195,   807,
   808,   809,   810,   497,   201,    40,   500,   209,    43,    44,
   209,    46,   506,   210,    44,   504,   181,   182,   183,   184,
   185,     4,   187,   188,   189,   190,   191,   192,   193,   194,
   195,   202,   202,   204,   528,   529,   201,     4,   191,   192,
   193,   194,   195,     6,   538,   539,   202,   541,   201,   543,
   544,    58,    59,   177,   178,   179,   180,   551,   198,   199,
   560,     6,   168,   169,   204,   171,   206,   561,   562,     6,
     7,   198,   199,   202,   198,   199,   570,   204,     4,   206,
    40,   743,    44,    43,    44,  1641,  1642,   749,   582,  1645,
   187,   188,   189,   190,   191,   192,   193,   194,   195,   638,
   594,     6,   596,   597,   201,    61,    62,    63,    64,   202,
    66,   204,  1333,   775,   181,   182,   183,   184,   185,   202,
   187,   188,   189,   190,   191,   192,   193,   194,   195,   937,
     5,   202,   198,   199,   201,     4,   910,   911,   204,   202,
   206,    43,    44,   202,    46,   807,   808,   809,   810,   638,
   202,   202,   204,     3,     4,   202,   202,   204,   204,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,  1739,   128,   129,   130,   131,   132,     6,
    40,   183,   184,   185,     6,   187,   188,   189,   190,   191,
   192,   193,   194,   195,   202,   744,   204,     5,   202,   201,
   204,    61,    62,    63,    64,    65,    66,   202,   202,   204,
   204,   202,   202,   204,   204,     8,   720,   721,   202,   202,
   204,   204,   202,   202,   204,   204,   202,   202,   204,   204,
   734,   735,   736,   737,   738,   739,   740,   202,   202,   743,
   204,     6,   746,   202,   202,   749,   204,   208,   752,   210,
   202,   208,   208,   210,   210,   208,   766,   210,   762,   208,
     4,   210,  1828,  1114,   124,   937,   208,   208,   210,   210,
   208,   775,   210,   777,   208,   208,   210,   210,   208,   208,
   210,   210,   208,     6,   210,   208,   202,   210,   859,   208,
   208,   210,   210,   803,   804,   805,   209,   208,   208,   210,
   210,   209,   209,   807,   808,   809,   810,   202,   202,   813,
   814,   202,   208,   817,   210,   208,     6,   210,   202,   208,
   830,   210,   202,  1889,   828,   829,   208,   204,   210,   839,
     6,   191,   192,   208,   208,   210,   210,   197,   208,   208,
   210,   210,   202,   208,   208,   210,   210,   207,   209,   209,
   208,   208,   210,   210,   208,   208,   210,   210,   209,   209,
   864,   865,   866,   867,   868,   869,   870,   871,   872,   873,
   874,   875,   876,   877,   878,   879,   880,   881,   882,   883,
   884,   885,   886,   887,   888,   889,   206,   891,   181,   182,
   183,   184,   185,   209,   187,   188,   189,   190,   191,   192,
   193,   194,   195,   208,     6,   210,   113,   906,   201,   208,
   203,   210,   911,     6,   202,   919,   181,   182,   183,   184,
   185,   925,   187,   188,   189,   190,   191,   192,   193,   194,
   195,     6,   208,   937,   210,   939,   201,   941,     6,   184,
   185,     3,   187,   188,   189,   190,   191,   192,   193,   194,
   195,   202,   202,   957,   958,   959,   201,     5,   181,   182,
   183,   184,   185,   202,   187,   188,   189,   190,   191,   192,
   193,   194,   195,   208,   208,   979,   980,   981,   201,   208,
   208,   210,   210,   208,   208,   210,   210,   208,   202,   210,
   202,   181,   182,   183,   184,   185,  1347,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   202,  2073,   202,   202,
   202,   201,   203,   202,   202,   202,   202,   202,   202,   202,
  1069,   202,   202,  1022,     3,     4,     4,  1138,   202,   202,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,   202,   202,   202,   202,   202,   202,
   202,  1110,   202,     6,   202,   202,  1070,     5,   201,   203,
     7,   206,     7,  1083,   204,  1085,     7,   209,     7,   181,
   182,   183,   184,   185,     6,   187,   188,   189,   190,   191,
   192,   193,   194,   195,  1098,  1099,  1100,  1101,  1169,   201,
     7,     7,   108,   110,   209,  1115,  1110,  1117,     5,  1119,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,  1125,  1126,     5,     5,     5,     5,     5,     5,     5,
     5,     5,  1114,  1137,     5,  1114,  1140,     5,   161,     5,
     5,     5,     5,     5,     3,   124,  1150,     5,     8,     6,
     5,   208,   203,  1157,  1158,  1159,  1267,     6,   208,     4,
  1164,   205,     6,   206,  1168,     7,     7,     7,  1172,  1173,
  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,
  1194,  1195,  1196,  1197,     7,     7,  1200,     7,     7,   210,
   210,   209,     7,     7,   209,   202,     7,   206,  1212,   173,
   208,     5,   191,   192,   208,  1219,   208,   208,   197,   208,
   208,   208,   208,   202,   208,   208,   205,   208,   207,   203,
   209,   208,   208,   208,  1238,   208,   208,   208,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,   208,   208,  1366,     6,  1261,   201,  1263,
     3,     4,   208,   208,   208,     6,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     3,     4,   208,   208,   208,   208,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     4,   181,   182,   183,   184,   185,   209,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   208,  1341,  1342,     6,
  1350,   201,  1352,     6,  1354,     6,  1350,   208,  1352,   205,
  1354,   202,  1356,  1357,   208,   208,   202,   209,  1362,   202,
     6,   209,     7,   202,   202,  1347,   202,  1371,  1347,   202,
   202,   202,   202,   202,   202,  1379,   202,   202,   202,   202,
  1384,   124,   202,  1387,   202,  1389,  1390,  1391,  1392,  1393,
  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,
  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
  1414,   124,   202,   202,  1525,  1419,   202,  1427,   202,   202,
  1424,   202,  1426,  1427,  1428,   202,     6,   202,   204,     6,
     4,   181,   182,   183,   184,   185,     7,   187,   188,   189,
   190,   191,   192,   193,   194,   195,     7,     7,   191,   192,
     7,   201,     7,     7,   197,     7,     7,     7,     7,   202,
     7,     7,   205,     7,   207,     7,   209,     6,     6,     4,
     7,     7,   174,     3,     3,     3,   193,  1588,   191,   192,
     3,     3,     3,     3,   197,     3,     3,     3,     3,   202,
     3,     5,   205,     3,   207,     3,   209,     3,     5,     3,
   203,     6,     4,     6,  1508,   203,   206,     7,     6,     6,
  1514,     6,     6,  1517,   181,   182,   183,   184,   185,   202,
   187,   188,   189,   190,   191,   192,   193,   194,   195,  1640,
   202,   209,     6,     6,   201,   209,   109,  1541,  1542,  1543,
  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,  1553,
  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,   170,  1563,
   208,  1565,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   208,     6,   203,   208,   203,   208,   203,   203,   208,   203,
   159,   181,   182,   183,   184,   185,   165,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   208,   208,   208,   208,
   208,   201,  1671,   208,   208,   208,   208,  1738,     6,   188,
   208,   203,   208,   208,   193,   194,   203,     6,   208,   208,
   208,   206,     6,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
  1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
  1664,  1665,  1666,  1667,  1668,  1669,  1670,     4,     3,     4,
     6,   205,     6,  1784,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,   210,   181,
   182,   183,   184,   185,     6,   187,   188,   189,   190,   191,
   192,   193,   194,   195,     6,     6,  1827,     6,     6,   201,
     6,  1770,     6,  1772,     6,     6,   208,     6,   210,     6,
     6,     6,     6,  1737,     6,     6,     6,     6,   109,  1743,
     7,  1745,     3,  1747,     6,  1749,  1750,  1751,  1752,  1753,
  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,
  1764,  1765,  1766,  1767,  1768,  1769,   181,   182,   183,   184,
   185,     3,   187,   188,   189,   190,   191,   192,   193,   194,
   195,     6,   193,     6,     6,     6,   201,     3,     3,   124,
     8,     3,     6,     6,     3,     6,     3,     3,     6,   209,
     4,     6,  1851,   181,   182,   183,   184,   185,     6,   187,
   188,   189,   190,   191,   192,   193,   194,   195,     6,   206,
     7,  1825,  1826,   201,     6,   205,     6,   209,   209,  1833,
  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
  1844,  1845,  1846,  1847,  1848,  1849,  1850,   210,   209,   209,
   209,   106,   203,   208,   208,   208,   191,   192,   203,   208,
   208,   203,   197,   203,   208,   203,   111,   202,   109,   208,
   203,   203,   207,   203,   209,     8,     6,   208,     3,     6,
     6,  1885,     3,     6,     6,     3,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
  1904,  1905,  1906,  1907,  1908,  1909,  1910,     3,     4,     6,
   210,     6,     6,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     6,     6,  1943,
   499,  1945,     5,  1947,     6,  1949,  1950,  1951,  1952,  1953,
  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,  1966,   181,   182,   183,   184,   185,     5,   187,
   188,   189,   190,   191,   192,   193,   194,   195,     6,   209,
   209,   208,   210,   201,   170,   209,     6,     8,   208,   208,
     6,   208,     6,   203,  1998,  1999,  2000,  2001,  2002,  2003,
  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,   203,
   203,   208,   208,   208,     6,     6,     6,     6,     6,     6,
     6,     6,     6,     6,     6,     6,     6,     5,   124,  2033,
  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,
  2044,  2045,  2046,  2047,  2048,  2049,  2050,     5,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,   209,   209,   208,   210,   208,   201,   208,
  2074,   203,  2076,   208,  2078,   203,  2080,  2081,  2082,  2083,
  2084,  2085,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
  2094,   208,     6,   209,   209,   191,   192,   209,   209,   208,
     6,   197,     6,     6,     6,   106,   202,     6,     6,     5,
     5,   207,     6,   209,   170,   203,   209,   209,   209,   209,
  2124,  2125,  2126,  2127,  2128,  2129,  2130,  2131,  2132,   210,
   208,   208,   203,   209,     6,   210,     6,     6,     6,   106,
     6,     6,     6,     6,     6,  2149,  2150,  2151,  2152,  2153,
  2154,  2155,  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,
   181,   182,   183,   184,   185,     6,   187,   188,   189,   190,
   191,   192,   193,   194,   195,     6,   210,   209,   208,   208,
   201,  2185,     6,  2187,     6,  2189,     6,  2191,     6,  2193,
     6,  2195,   209,  2197,  2198,  2199,  2200,  2201,  2202,  2203,
  2204,  2205,   175,   208,   208,     6,   209,   209,   767,   768,
   176,   770,   208,   772,   773,     6,     6,     6,     6,     6,
     6,     6,     6,  2227,  2228,  2229,  2230,  2231,  2232,   203,
   209,   208,   208,     6,   209,   203,     6,   209,   208,     6,
   209,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,
   209,     6,   209,   209,   209,   209,   815,   816,     6,     6,
   819,     6,  2266,  2267,  2268,  2269,  2270,  2271,  2272,   209,
  2274,   209,  2276,   209,     6,     6,     6,   836,   837,   209,
   209,   209,     6,   842,   843,     6,  2290,  2291,  2292,     6,
   849,   209,   851,   209,   209,     0,     6,     8,  2302,  2303,
  2304,  2305,  2306,  2307,     6,     6,     0,     4,     4,  1073,
    -1,   640,    -1,  2317,  2318,  2319,  2320,    -1,  2322,    -1,
  2324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  2335,  2336,  2337,    -1,    -1,    -1,  2341,  2342,  2343,
    -1,    -1,    -1,  2347,  2348,  2349,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  2359,  2360,  2361,    -1,    -1,
    -1,    -1,    -1,    -1,  2368,    -1,  2370,    -1,  2372,    -1,
   929,    -1,   931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   942,   943,   944,    -1,    -1,    -1,    -1,
   949,   950,   951,   952,   953,   954,   955,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,     7,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,    -1,    -1,    39,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
   181,   182,   183,   184,   185,    40,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    64,
    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1068,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
    -1,    -1,   124,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
    36,    -1,    -1,    39,    -1,    -1,    -1,    -1,    -1,   124,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1133,   177,   178,   179,   180,    -1,
    -1,    -1,  1141,    -1,    -1,    -1,    -1,    -1,    -1,   191,
   192,    -1,    -1,    -1,    -1,   197,   198,   199,    -1,    -1,
   202,  1160,   204,    -1,   206,   207,    -1,    -1,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,   191,   192,   201,    -1,
   203,    -1,   197,    -1,    -1,   208,    -1,   202,   124,  1198,
     3,     4,   207,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,    -1,    -1,    -1,   191,   192,    -1,    -1,    -1,
    -1,   197,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
    -1,   207,    40,    41,    42,    43,    44,    45,    46,    47,
    -1,    49,    -1,    51,    52,    53,    -1,    55,    56,    -1,
    -1,    -1,    -1,    -1,    40,    41,    42,    43,    44,    45,
    46,    47,    -1,    49,    72,    51,    52,    53,    -1,    55,
    56,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   103,   104,   105,    -1,    -1,
    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1361,   121,    -1,    -1,  1365,   103,   104,   105,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1381,    -1,    -1,   121,    -1,    -1,   191,   192,
    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,   202,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,   192,
    -1,    -1,    -1,    -1,   197,    -1,    -1,     0,     1,   202,
     3,     4,    -1,    -1,   207,    -1,    -1,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,   210,    -1,    -1,    -1,    -1,   201,    -1,    -1,
    33,    -1,    -1,    -1,    37,    38,   210,    40,    41,    42,
    43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
    53,    54,    55,    56,    -1,    -1,    -1,    60,    61,    62,
    63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
    -1,    -1,    -1,  1502,  1503,    -1,   181,   182,   183,   184,
   185,  1510,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,  1521,  1522,    -1,    -1,   201,    -1,    -1,   102,
   103,   104,   105,   208,    -1,   210,    -1,   110,    -1,   112,
    -1,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
    49,    -1,    51,    52,    53,    -1,    55,    56,  1567,  1568,
   143,   144,   145,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   168,   169,    -1,   171,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,   103,   104,   105,    -1,    -1,   201,
    -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,    -1,
    -1,    -1,   121,    -1,  1633,    -1,    -1,    -1,    -1,  1638,
    -1,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
    49,    -1,    51,    52,    53,    -1,    55,    56,    -1,    -1,
    -1,    -1,    -1,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    49,    72,    51,    52,    53,    -1,    55,    56,
    -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,    49,    72,    51,    52,    53,    -1,
    55,    56,    -1,    -1,   103,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
    -1,   210,   121,    -1,    -1,    -1,   103,   104,   105,    -1,
    43,  1730,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1740,    -1,    -1,   121,    -1,    -1,    -1,   103,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   121,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,   210,   125,   126,   127,   201,    -1,    -1,    -1,   205,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
  1829,    -1,    -1,   210,    -1,    -1,    -1,    -1,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   210,    -1,    -1,    -1,     4,
    -1,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    33,  1888,
   210,    -1,    37,    38,    -1,    40,    41,    42,    43,    44,
    45,    46,    47,   210,    49,    50,    51,    52,    53,    54,
    55,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
    65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
   105,    -1,    -1,    -1,    -1,   110,    -1,   112,    -1,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,  1994,    -1,    -1,    -1,   201,
    -1,    -1,    -1,   181,   182,   183,   184,   185,   210,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   210,  2032,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,   181,   182,
   183,   184,   185,   210,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   181,   182,   183,   184,   185,   210,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,    -1,    -1,   181,   182,   183,   184,
   185,   210,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
   181,   182,   183,   184,   185,   210,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,    -1,    -1,   181,   182,   183,   184,   185,   210,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,   181,   182,
   183,   184,   185,   210,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   181,   182,   183,   184,   185,   210,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,    -1,    -1,   181,   182,   183,   184,
   185,   210,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
   181,   182,   183,   184,   185,   210,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,    -1,    -1,   181,   182,   183,   184,   185,   210,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,   181,   182,
   183,   184,   185,   210,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   181,   182,   183,   184,   185,   210,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,    -1,    -1,   181,   182,   183,   184,
   185,   210,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
   181,   182,   183,   184,   185,   210,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,    -1,    -1,   181,   182,   183,   184,   185,   210,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,   181,   182,
   183,   184,   185,   210,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   181,   182,   183,   184,   185,   210,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   181,   182,   183,   184,   185,   208,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   181,   182,   183,   184,   185,   208,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   181,   182,   183,   184,   185,   208,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   181,   182,   183,   184,
   185,   208,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   181,   182,
   183,   184,   185,   208,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
    -1,    -1,   205,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,   185,
    -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,
   183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,
   203,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,
    -1,   201,    -1,   203,   181,   182,   183,   184,   185,    -1,
   187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,
   184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
   194,   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,
   181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
   191,   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,
   201,    -1,   203,   181,   182,   183,   184,   185,    -1,   187,
   188,   189,   190,   191,   192,   193,   194,   195,    -1,    -1,
    -1,    -1,    -1,   201,    -1,   203,   181,   182,   183,   184,
   185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    -1,    -1,    -1,    -1,    -1,   201,    -1,   203,   181,
   182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
   192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   203,   181,   182,   183,   184,   185,    -1,   187,   188,
   189,   190,   191,   192,   193,   194,   195,    -1,    -1,    -1,
    -1,    -1,   201
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 166 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 172 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 173 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 183 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STL_Surf = Create_Surface(NEWSURFACE(), MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 10:
#line 197 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d, CTX.geom.stl_create_elementary);
      return 1;
    ;
    break;}
case 11:
#line 204 "Gmsh.y"
{
      if(CTX.geom.stl_create_elementary){
	STL_Surf->STL->ReplaceDuplicate();
	if(CTX.geom.stl_create_physical)
	  STL_Surf->STL->CreatePhysicalSurface();
      }
      else{
	Tree_Add(THEM->Surfaces, &STL_Surf);
      }
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 230 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 231 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 232 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 237 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 242 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 253 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 256 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 260 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 266 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 272 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 279 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 285 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 289 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 293 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 300 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 304 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 309 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 313 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 317 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 321 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 325 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 329 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 333 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 337 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 346 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 349 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 353 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 357 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 361 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 365 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 370 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 373 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 377 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 380 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 384 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 387 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 390 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 406 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 407 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 411 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 412 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 413 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 414 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 415 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 420 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 425 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 443 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 450 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 460 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 498 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 500 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 505 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 510 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 517 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 519 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 524 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 530 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 538 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 540 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 545 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 551 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 559 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 561 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 567 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 574 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 582 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 584 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 590 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 597 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 605 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 607 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 613 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 620 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 628 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 630 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 637 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 647 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 655 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 657 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 664 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 674 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 682 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 684 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 691 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 701 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 709 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 711 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 719 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 729 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 737 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 739 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 747 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 757 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 765 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 767 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 775 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 785 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 793 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 795 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 803 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 813 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 821 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 823 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 831 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 841 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 849 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 851 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 859 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 869 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 877 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 879 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 891 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 907 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 915 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 917 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 929 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 945 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 953 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 955 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 967 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 983 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 991 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 993 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 1003 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1016 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1024 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1026 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1036 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1049 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1057 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1059 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1069 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1082 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1090 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1092 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1101 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1114 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1122 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1124 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1133 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1146 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1154 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1156 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1165 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1178 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1186 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1191 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1199 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1206 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1213 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1218 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1226 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1233 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1241 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1248 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1250 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1255 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1262 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1263 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1264 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1265 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1266 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1270 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1271 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1279 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 220:
#line 1310 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 221:
#line 1349 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1403 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1420 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 224:
#line 1431 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 225:
#line 1450 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 226:
#line 1464 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 227:
#line 1481 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 228:
#line 1507 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1534 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 230:
#line 1548 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 231:
#line 1565 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 232:
#line 1579 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 233:
#line 1596 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1616 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1639 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1649 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 237:
#line 1668 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1684 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1700 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1719 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1738 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1756 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1774 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1792 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1818 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1836 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1863 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1882 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1906 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1930 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1956 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1973 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 253:
#line 1991 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 2010 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2029 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2068 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2094 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	// FIXME: parameters not used; undocumented
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      //FIXME: do you copy the data?
      //List_Delete($12);
      //List_Delete($13);
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 258:
#line 2116 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 259:
#line 2133 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2152 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2169 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2185 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2204 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2221 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2238 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2259 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 267:
#line 2264 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 268:
#line 2269 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 269:
#line 2274 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2281 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 271:
#line 2282 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 272:
#line 2283 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 273:
#line 2288 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 274:
#line 2292 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 275:
#line 2296 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 276:
#line 2312 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 277:
#line 2328 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 278:
#line 2344 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2365 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 280:
#line 2378 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 281:
#line 2390 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 282:
#line 2399 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 283:
#line 2409 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 284:
#line 2419 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 285:
#line 2438 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 286:
#line 2452 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 287:
#line 2460 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 288:
#line 2466 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 289:
#line 2477 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 290:
#line 2491 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 291:
#line 2535 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 292:
#line 2550 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 293:
#line 2566 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 294:
#line 2576 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 295:
#line 2587 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 296:
#line 2591 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 297:
#line 2595 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 298:
#line 2599 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 299:
#line 2612 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 300:
#line 2627 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 301:
#line 2643 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 302:
#line 2669 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 303:
#line 2696 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 304:
#line 2728 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 305:
#line 2735 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 306:
#line 2740 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 307:
#line 2746 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 308:
#line 2750 "Gmsh.y"
{
    ;
    break;}
case 309:
#line 2761 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 310:
#line 2777 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 311:
#line 2793 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 312:
#line 2809 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2814 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 314:
#line 2830 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 315:
#line 2835 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 316:
#line 2851 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 317:
#line 2856 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 318:
#line 2874 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2897 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 320:
#line 2920 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2943 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2948 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 2971 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 324:
#line 2976 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 325:
#line 2999 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 326:
#line 3004 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 327:
#line 3030 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3053 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 329:
#line 3076 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3099 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 331:
#line 3104 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 332:
#line 3127 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 333:
#line 3133 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 334:
#line 3156 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 335:
#line 3162 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 336:
#line 3188 "Gmsh.y"
{
    ;
    break;}
case 337:
#line 3191 "Gmsh.y"
{
    ;
    break;}
case 338:
#line 3197 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 339:
#line 3223 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 340:
#line 3247 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 341:
#line 3256 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 342:
#line 3274 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 343:
#line 3292 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 344:
#line 3310 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 345:
#line 3337 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 346:
#line 3363 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 347:
#line 3389 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 348:
#line 3403 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 349:
#line 3422 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 350:
#line 3426 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 351:
#line 3435 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 352:
#line 3436 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 353:
#line 3437 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 354:
#line 3438 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 355:
#line 3439 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 356:
#line 3443 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 357:
#line 3444 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 358:
#line 3445 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 359:
#line 3446 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 360:
#line 3447 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 361:
#line 3448 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 362:
#line 3449 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 363:
#line 3450 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 364:
#line 3452 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 365:
#line 3458 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 366:
#line 3459 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 367:
#line 3460 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 368:
#line 3461 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 369:
#line 3462 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 370:
#line 3463 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 371:
#line 3464 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 372:
#line 3465 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 373:
#line 3466 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 374:
#line 3467 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 375:
#line 3468 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 376:
#line 3469 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 377:
#line 3470 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 378:
#line 3471 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 379:
#line 3472 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 380:
#line 3473 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 381:
#line 3474 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 382:
#line 3475 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 383:
#line 3476 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 384:
#line 3477 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 385:
#line 3478 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 386:
#line 3479 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 387:
#line 3480 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 388:
#line 3481 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3482 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 390:
#line 3483 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3484 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 392:
#line 3485 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3486 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 394:
#line 3487 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 395:
#line 3488 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 396:
#line 3489 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 397:
#line 3491 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 398:
#line 3492 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 399:
#line 3493 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 400:
#line 3494 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 401:
#line 3495 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 402:
#line 3496 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 403:
#line 3497 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 404:
#line 3498 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 405:
#line 3499 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 406:
#line 3500 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 407:
#line 3501 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 408:
#line 3502 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 409:
#line 3503 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3504 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 411:
#line 3505 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3506 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 413:
#line 3507 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 414:
#line 3508 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 415:
#line 3509 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 416:
#line 3510 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 417:
#line 3511 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 418:
#line 3520 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 419:
#line 3521 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 420:
#line 3522 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 421:
#line 3523 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 422:
#line 3528 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 423:
#line 3541 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 424:
#line 3561 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 425:
#line 3575 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 426:
#line 3588 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 427:
#line 3611 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 428:
#line 3629 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 429:
#line 3647 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 430:
#line 3665 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 431:
#line 3683 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 432:
#line 3691 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 433:
#line 3695 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 434:
#line 3699 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 435:
#line 3703 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 436:
#line 3707 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 437:
#line 3714 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 438:
#line 3718 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 439:
#line 3722 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 440:
#line 3726 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 441:
#line 3733 "Gmsh.y"
{
    ;
    break;}
case 442:
#line 3736 "Gmsh.y"
{
    ;
    break;}
case 443:
#line 3742 "Gmsh.y"
{
    ;
    break;}
case 444:
#line 3745 "Gmsh.y"
{
    ;
    break;}
case 445:
#line 3751 "Gmsh.y"
{
    ;
    break;}
case 446:
#line 3754 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 447:
#line 3758 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 448:
#line 3765 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 449:
#line 3770 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 450:
#line 3778 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 451:
#line 3783 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 452:
#line 3787 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 453:
#line 3791 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 454:
#line 3803 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 455:
#line 3809 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 456:
#line 3820 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 457:
#line 3840 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 458:
#line 3850 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 459:
#line 3860 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 460:
#line 3872 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 461:
#line 3889 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 462:
#line 3908 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 463:
#line 3932 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 464:
#line 3961 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 465:
#line 3966 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 466:
#line 3970 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 467:
#line 3974 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 468:
#line 3987 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 469:
#line 3991 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 470:
#line 4003 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 471:
#line 4010 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 472:
#line 4032 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 473:
#line 4036 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 474:
#line 4051 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 475:
#line 4056 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 476:
#line 4063 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 477:
#line 4067 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 478:
#line 4075 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 479:
#line 4083 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 480:
#line 4097 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 481:
#line 4101 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 482:
#line 4120 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 483:
#line 4136 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4153 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
