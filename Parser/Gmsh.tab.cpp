
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tToday	293
#define	tPoint	294
#define	tCircle	295
#define	tEllipse	296
#define	tLine	297
#define	tSurface	298
#define	tSpline	299
#define	tVolume	300
#define	tCharacteristic	301
#define	tLength	302
#define	tParametric	303
#define	tElliptic	304
#define	tPlane	305
#define	tRuled	306
#define	tTriangulation	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tDiscrete	315
#define	tRotate	316
#define	tTranslate	317
#define	tSymmetry	318
#define	tDilate	319
#define	tExtrude	320
#define	tDuplicata	321
#define	tLoop	322
#define	tRecombine	323
#define	tDelete	324
#define	tCoherence	325
#define	tIntersect	326
#define	tAttractor	327
#define	tLayers	328
#define	tAlias	329
#define	tAliasWithOptions	330
#define	tScalarPoint	331
#define	tVectorPoint	332
#define	tTensorPoint	333
#define	tScalarLine	334
#define	tVectorLine	335
#define	tTensorLine	336
#define	tScalarTriangle	337
#define	tVectorTriangle	338
#define	tTensorTriangle	339
#define	tScalarQuadrangle	340
#define	tVectorQuadrangle	341
#define	tTensorQuadrangle	342
#define	tScalarTetrahedron	343
#define	tVectorTetrahedron	344
#define	tTensorTetrahedron	345
#define	tScalarHexahedron	346
#define	tVectorHexahedron	347
#define	tTensorHexahedron	348
#define	tScalarPrism	349
#define	tVectorPrism	350
#define	tTensorPrism	351
#define	tScalarPyramid	352
#define	tVectorPyramid	353
#define	tTensorPyramid	354
#define	tText2D	355
#define	tText3D	356
#define	tInterpolationScheme	357
#define	tTime	358
#define	tCombine	359
#define	tBSpline	360
#define	tBezier	361
#define	tNurbs	362
#define	tOrder	363
#define	tWith	364
#define	tBounds	365
#define	tKnots	366
#define	tColor	367
#define	tColorTable	368
#define	tFor	369
#define	tIn	370
#define	tEndFor	371
#define	tIf	372
#define	tEndIf	373
#define	tExit	374
#define	tReturn	375
#define	tCall	376
#define	tFunction	377
#define	tTrimmed	378
#define	tShow	379
#define	tHide	380
#define	tGetValue	381
#define	tGMSH_MAJOR_VERSION	382
#define	tGMSH_MINOR_VERSION	383
#define	tGMSH_PATCH_VERSION	384
#define	tB_SPLINE_SURFACE_WITH_KNOTS	385
#define	tB_SPLINE_CURVE_WITH_KNOTS	386
#define	tCARTESIAN_POINT	387
#define	tTRUE	388
#define	tFALSE	389
#define	tUNSPECIFIED	390
#define	tU	391
#define	tV	392
#define	tEDGE_CURVE	393
#define	tVERTEX_POINT	394
#define	tORIENTED_EDGE	395
#define	tPLANE	396
#define	tFACE_OUTER_BOUND	397
#define	tEDGE_LOOP	398
#define	tADVANCED_FACE	399
#define	tVECTOR	400
#define	tDIRECTION	401
#define	tAXIS2_PLACEMENT_3D	402
#define	tISO	403
#define	tENDISO	404
#define	tENDSEC	405
#define	tDATA	406
#define	tHEADER	407
#define	tFILE_DESCRIPTION	408
#define	tFILE_SCHEMA	409
#define	tFILE_NAME	410
#define	tMANIFOLD_SOLID_BREP	411
#define	tCLOSED_SHELL	412
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	413
#define	tFACE_BOUND	414
#define	tCYLINDRICAL_SURFACE	415
#define	tCONICAL_SURFACE	416
#define	tCIRCLE	417
#define	tTRIMMED_CURVE	418
#define	tGEOMETRIC_SET	419
#define	tCOMPOSITE_CURVE_SEGMENT	420
#define	tCONTINUOUS	421
#define	tCOMPOSITE_CURVE	422
#define	tTOROIDAL_SURFACE	423
#define	tPRODUCT_DEFINITION	424
#define	tPRODUCT_DEFINITION_SHAPE	425
#define	tSHAPE_DEFINITION_REPRESENTATION	426
#define	tELLIPSE	427
#define	tSolid	428
#define	tEndSolid	429
#define	tVertex	430
#define	tFacet	431
#define	tNormal	432
#define	tOuter	433
#define	tLoopSTL	434
#define	tEndLoop	435
#define	tEndFacet	436
#define	tAFFECTPLUS	437
#define	tAFFECTMINUS	438
#define	tAFFECTTIMES	439
#define	tAFFECTDIVIDE	440
#define	tOR	441
#define	tAND	442
#define	tEQUAL	443
#define	tNOTEQUAL	444
#define	tAPPROXEQUAL	445
#define	tLESSOREQUAL	446
#define	tGREATEROREQUAL	447
#define	tCROSSPRODUCT	448
#define	tPLUSPLUS	449
#define	tMINUSMINUS	450
#define	UNARYPREC	451

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.233 2005-02-20 06:36:54 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"
#include "GmshVersion.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;
static Post_View *View;
static int ntmp;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 75 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2430
#define	YYFLAG		-32768
#define	YYNTBASE	217

#define YYTRANSLATE(x) ((unsigned)(x) <= 451 ? yytranslate[x] : 355)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   203,     2,   213,     2,   201,     2,     2,   208,
   209,   199,   197,   214,   198,   212,   200,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   193,
     2,   195,   187,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   210,     2,   211,   207,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   215,     2,   216,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   188,   189,   190,   191,   192,   194,   196,   202,   204,   205,
   206
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   645,   648,   650,   654,   655,   669,   671,   675,
   676,   690,   692,   696,   697,   711,   713,   717,   718,   738,
   740,   744,   745,   765,   767,   771,   772,   792,   794,   798,
   799,   825,   827,   831,   832,   858,   860,   864,   865,   891,
   893,   897,   898,   930,   932,   936,   937,   969,   971,   975,
   976,  1008,  1010,  1014,  1015,  1047,  1049,  1053,  1054,  1086,
  1088,  1092,  1093,  1125,  1127,  1131,  1132,  1188,  1190,  1194,
  1195,  1251,  1253,  1257,  1258,  1314,  1316,  1320,  1321,  1365,
  1367,  1371,  1372,  1416,  1418,  1422,  1423,  1467,  1469,  1473,
  1474,  1512,  1514,  1518,  1519,  1557,  1559,  1563,  1564,  1602,
  1604,  1608,  1609,  1623,  1625,  1629,  1630,  1646,  1655,  1657,
  1661,  1667,  1669,  1671,  1673,  1675,  1677,  1679,  1681,  1686,
  1694,  1704,  1711,  1715,  1722,  1729,  1739,  1746,  1756,  1762,
  1771,  1780,  1792,  1799,  1809,  1819,  1829,  1837,  1846,  1859,
  1866,  1874,  1882,  1890,  1900,  1908,  1918,  1936,  1944,  1952,
  1964,  1976,  1988,  1997,  2010,  2019,  2028,  2037,  2050,  2065,
  2080,  2095,  2118,  2139,  2148,  2157,  2166,  2174,  2183,  2189,
  2201,  2207,  2217,  2219,  2221,  2223,  2224,  2227,  2234,  2241,
  2248,  2255,  2260,  2267,  2274,  2281,  2286,  2293,  2297,  2302,
  2308,  2312,  2316,  2321,  2326,  2330,  2338,  2342,  2350,  2354,
  2357,  2360,  2376,  2379,  2386,  2395,  2404,  2415,  2417,  2420,
  2422,  2426,  2431,  2433,  2442,  2455,  2470,  2471,  2484,  2485,
  2502,  2503,  2522,  2531,  2544,  2559,  2560,  2573,  2574,  2591,
  2592,  2611,  2620,  2633,  2648,  2649,  2662,  2663,  2680,  2681,
  2700,  2702,  2705,  2715,  2723,  2726,  2733,  2743,  2753,  2762,
  2771,  2780,  2787,  2792,  2795,  2798,  2800,  2802,  2804,  2806,
  2808,  2810,  2814,  2817,  2820,  2823,  2827,  2831,  2835,  2839,
  2843,  2847,  2851,  2855,  2859,  2863,  2867,  2871,  2875,  2879,
  2885,  2890,  2895,  2900,  2905,  2910,  2915,  2920,  2925,  2930,
  2935,  2942,  2947,  2952,  2957,  2962,  2967,  2972,  2979,  2986,
  2993,  2998,  3003,  3008,  3013,  3018,  3023,  3028,  3033,  3038,
  3043,  3048,  3055,  3060,  3065,  3070,  3075,  3080,  3085,  3092,
  3099,  3106,  3111,  3113,  3115,  3117,  3119,  3121,  3123,  3125,
  3127,  3132,  3137,  3140,  3146,  3150,  3157,  3162,  3170,  3177,
  3179,  3182,  3185,  3189,  3193,  3205,  3215,  3223,  3231,  3232,
  3236,  3238,  3242,  3243,  3247,  3251,  3253,  3257,  3259,  3261,
  3265,  3270,  3274,  3280,  3285,  3287,  3289,  3291,  3295,  3300,
  3307,  3315,  3317,  3319,  3323,  3327,  3337,  3345,  3347,  3353,
  3357,  3364,  3366,  3370,  3372,  3374,  3381,  3386,  3391,  3398,
  3405
};

static const short yyrhs[] = {   221,
     0,   219,     0,   226,     0,     1,     6,     0,     3,     0,
   198,     3,     0,     0,   219,   220,     0,   174,     0,   177,
   178,   218,   218,   218,   179,   180,   176,   218,   218,   218,
   176,   218,   218,   218,   176,   218,   218,   218,   181,   182,
     0,   175,     0,     0,   221,   222,     0,   223,     0,   225,
     0,   224,     0,   149,     6,     0,   150,     6,     0,   152,
     6,     0,   151,     6,     0,   153,     6,     0,   154,   208,
   344,   214,     5,   209,     6,     0,   155,   208,   344,   209,
     6,     0,   156,   208,     5,   214,     5,   214,   344,   214,
   344,   214,     5,   214,     5,   214,     5,   209,     6,     0,
     3,     7,   133,   208,     5,   214,   342,   209,     6,     0,
     3,     7,   132,   208,     5,   214,   340,   214,   348,   214,
   339,   214,   339,   214,   339,   214,   348,   214,   348,   214,
   339,   209,     6,     0,     3,     7,   131,   208,     5,   214,
   340,   214,   340,   214,   346,   214,   339,   214,   339,   214,
   339,   214,   339,   214,   348,   214,   348,   214,   348,   214,
   348,   214,   339,   209,     6,     0,     3,     7,   139,   208,
     5,   214,     3,   214,     3,   214,     3,   214,   339,   209,
     6,     0,     3,     7,   143,   208,     5,   214,     3,   214,
   339,   209,     6,     0,     3,     7,   160,   208,     5,   214,
     3,   214,   339,   209,     6,     0,     3,     7,   141,   208,
     5,   214,   199,   214,   199,   214,   340,   214,   339,   209,
     6,     0,     3,     7,   144,   208,     5,   214,   348,   209,
     6,     0,     3,     7,   145,   208,     5,   214,   348,   214,
     3,   214,   339,   209,     6,     0,     3,     7,   140,   208,
     5,   214,     3,   209,     6,     0,     3,     7,   146,   208,
     5,   214,     3,   214,   340,   209,     6,     0,     3,     7,
   148,   208,     5,   214,     3,   214,     3,   214,     3,   209,
     6,     0,     3,     7,   147,   208,     5,   214,   342,   209,
     6,     0,     3,     7,   142,   208,     5,   214,     3,   209,
     6,     0,     3,     7,    43,   208,     5,   214,     3,   214,
     3,   209,     6,     0,     3,     7,   158,   208,     5,   214,
   348,   209,     6,     0,     3,     7,   159,   208,     5,   214,
   348,   214,     3,   209,     6,     0,     3,     7,   157,   208,
     5,   214,     3,   209,     6,     0,     3,     7,   161,   208,
     5,   214,     3,   214,   340,   209,     6,     0,     3,     7,
   162,   208,     5,   214,     3,   214,   340,   214,   340,   209,
     6,     0,     3,     7,   169,   208,     5,   214,     3,   214,
   340,   214,   340,   209,     6,     0,     3,     7,   163,   208,
     5,   214,     3,   214,   340,   209,     6,     0,     3,     7,
   173,   208,     5,   214,     3,   214,   340,   214,   340,   209,
     6,     0,     3,     7,   164,   208,     5,   214,     3,   214,
   348,   214,   348,   214,   339,   214,   339,   209,     6,     0,
     3,     7,   165,   208,     5,   214,   348,   209,     6,     0,
     3,     7,   166,   208,   167,   214,   339,   214,     3,   209,
     6,     0,     3,     7,   168,   208,     5,   214,   348,   214,
   339,   209,     6,     0,     3,     7,   170,   208,     5,   214,
     5,   214,     3,   214,     3,   209,     6,     0,     3,     7,
   171,   208,     5,   214,     5,   214,     3,   209,     6,     0,
     3,     7,   172,   208,     3,   214,     3,   209,     6,     0,
     0,   226,   227,     0,   229,     0,   228,     0,   314,     0,
   315,     0,   316,     0,   319,     0,   320,     0,   321,     0,
   322,     0,   325,     0,   337,     0,   338,     0,   324,     0,
   323,     0,    33,   208,     5,   209,     6,     0,    33,   208,
     5,   214,   350,   209,     6,     0,     4,     5,   215,   230,
   216,     6,     0,     4,     5,     4,   342,   215,   230,   216,
     6,     0,     0,   230,   232,     0,   230,   235,     0,   230,
   238,     0,   230,   241,     0,   230,   244,     0,   230,   247,
     0,   230,   250,     0,   230,   253,     0,   230,   256,     0,
   230,   259,     0,   230,   262,     0,   230,   265,     0,   230,
   268,     0,   230,   271,     0,   230,   274,     0,   230,   277,
     0,   230,   280,     0,   230,   283,     0,   230,   286,     0,
   230,   289,     0,   230,   292,     0,   230,   295,     0,   230,
   298,     0,   230,   301,     0,   230,   304,     0,   230,   307,
     0,   230,   309,     0,   230,   311,     0,   340,     0,   231,
   214,   340,     0,     0,    77,   208,   340,   214,   340,   214,
   340,   209,   233,   215,   231,   216,     6,     0,   340,     0,
   234,   214,   340,     0,     0,    78,   208,   340,   214,   340,
   214,   340,   209,   236,   215,   234,   216,     6,     0,   340,
     0,   237,   214,   340,     0,     0,    79,   208,   340,   214,
   340,   214,   340,   209,   239,   215,   237,   216,     6,     0,
   340,     0,   240,   214,   340,     0,     0,    80,   208,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   242,   215,   240,   216,     6,     0,   340,     0,   243,
   214,   340,     0,     0,    81,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   245,   215,
   243,   216,     6,     0,   340,     0,   246,   214,   340,     0,
     0,    82,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   209,   248,   215,   246,   216,     6,
     0,   340,     0,   249,   214,   340,     0,     0,    83,   208,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   251,   215,
   249,   216,     6,     0,   340,     0,   252,   214,   340,     0,
     0,    84,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   254,   215,   252,   216,     6,     0,   340,     0,   255,
   214,   340,     0,     0,    85,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   209,   257,   215,   255,   216,     6,     0,
   340,     0,   258,   214,   340,     0,     0,    86,   208,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   209,   260,   215,   258,   216,     6,     0,   340,
     0,   261,   214,   340,     0,     0,    87,   208,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   209,   263,   215,   261,   216,     6,     0,   340,     0,
   264,   214,   340,     0,     0,    88,   208,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   266,   215,   264,   216,     6,     0,   340,     0,   267,
   214,   340,     0,     0,    89,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   209,
   269,   215,   267,   216,     6,     0,   340,     0,   270,   214,
   340,     0,     0,    90,   208,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   209,   272,
   215,   270,   216,     6,     0,   340,     0,   273,   214,   340,
     0,     0,    91,   208,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   275,   215,
   273,   216,     6,     0,   340,     0,   276,   214,   340,     0,
     0,    92,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   209,   278,   215,   276,   216,     6,     0,   340,     0,   279,
   214,   340,     0,     0,    93,   208,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   209,   281,   215,   279,   216,     6,     0,
   340,     0,   282,   214,   340,     0,     0,    94,   208,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   209,   284,   215,   282,
   216,     6,     0,   340,     0,   285,   214,   340,     0,     0,
    95,   208,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   209,   287,   215,
   285,   216,     6,     0,   340,     0,   288,   214,   340,     0,
     0,    96,   208,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   209,   290,
   215,   288,   216,     6,     0,   340,     0,   291,   214,   340,
     0,     0,    97,   208,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   209,
   293,   215,   291,   216,     6,     0,   340,     0,   294,   214,
   340,     0,     0,    98,   208,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   209,   296,   215,   294,   216,     6,
     0,   340,     0,   297,   214,   340,     0,     0,    99,   208,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   214,
   340,   214,   340,   214,   340,   214,   340,   214,   340,   209,
   299,   215,   297,   216,     6,     0,   340,     0,   300,   214,
   340,     0,     0,   100,   208,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   214,   340,   209,   302,   215,   300,   216,     6,
     0,   354,     0,   303,   214,   354,     0,     0,   101,   208,
   340,   214,   340,   214,   340,   209,   305,   215,   303,   216,
     6,     0,   354,     0,   306,   214,   354,     0,     0,   102,
   208,   340,   214,   340,   214,   340,   214,   340,   209,   308,
   215,   306,   216,     6,     0,   103,   215,   347,   216,   215,
   347,   216,     6,     0,   340,     0,   310,   214,   340,     0,
   104,   215,   310,   216,     6,     0,     7,     0,   183,     0,
   184,     0,   185,     0,   186,     0,   204,     0,   205,     0,
     4,   312,   340,     6,     0,     4,   210,   340,   211,   312,
   340,     6,     0,     4,   210,   215,   350,   216,   211,   312,
   348,     6,     0,     4,   210,   211,     7,   348,     6,     0,
     4,   313,     6,     0,     4,   210,   340,   211,   313,     6,
     0,     4,   212,     4,     7,   354,     6,     0,     4,   210,
   340,   211,   212,     4,     7,   354,     6,     0,     4,   212,
     4,   312,   340,     6,     0,     4,   210,   340,   211,   212,
     4,   312,   340,     6,     0,     4,   212,     4,   313,     6,
     0,     4,   210,   340,   211,   212,     4,   313,     6,     0,
     4,   212,   113,   212,     4,     7,   351,     6,     0,     4,
   210,   340,   211,   212,   113,   212,     4,     7,   351,     6,
     0,     4,   212,   114,     7,   352,     6,     0,     4,   210,
   340,   211,   212,   114,     7,   352,     6,     0,    60,   208,
     4,   209,   212,     4,     7,   340,     6,     0,    60,   208,
     4,   209,   212,     4,     7,   354,     6,     0,    40,   208,
   340,   209,     7,   342,     6,     0,    56,    40,   208,   340,
   209,     7,   348,     6,     0,    73,    40,   348,     7,   215,
   340,   214,   340,   214,   340,   216,     6,     0,    47,    48,
   348,     7,   340,     6,     0,    43,   208,   340,   209,     7,
   348,     6,     0,    45,   208,   340,   209,     7,   348,     6,
     0,    41,   208,   340,   209,     7,   348,     6,     0,    41,
   208,   340,   209,     7,   348,    51,   342,     6,     0,    42,
   208,   340,   209,     7,   348,     6,     0,    42,   208,   340,
   209,     7,   348,    51,   342,     6,     0,    49,   208,   340,
   209,     7,   215,   340,   214,   340,   214,     5,   214,     5,
   214,     5,   216,     6,     0,   106,   208,   340,   209,     7,
   348,     6,     0,   107,   208,   340,   209,     7,   348,     6,
     0,   108,   208,   340,   209,     7,   348,   112,   348,   109,
   340,     6,     0,    61,    43,   208,   340,   209,     7,   215,
   340,   216,   348,     6,     0,    61,    43,   215,   340,   216,
     7,   215,   340,   216,   348,     6,     0,    43,    68,   208,
   340,   209,     7,   348,     6,     0,    73,    43,   348,     7,
   215,   340,   214,   340,   214,   340,   216,     6,     0,    56,
    43,   208,   340,   209,     7,   348,     6,     0,    51,    44,
   208,   340,   209,     7,   348,     6,     0,    52,    44,   208,
   340,   209,     7,   348,     6,     0,   124,    44,   208,   340,
   209,     7,   215,   340,   214,   348,   216,     6,     0,    61,
    44,   208,   340,   209,     7,   215,   340,   214,   340,   216,
   348,   348,     6,     0,    61,    44,   215,   340,   216,     7,
   215,   340,   214,   340,   216,   348,   348,     6,     0,    53,
    44,   208,   340,   209,     7,   208,   340,   214,   340,   209,
   348,   348,     6,     0,   108,    44,   110,   111,   208,   340,
   209,     7,   346,   112,   215,   348,   214,   348,   216,   109,
   215,   340,   214,   340,   216,     6,     0,   108,    44,   208,
   340,   209,     7,   346,   112,   215,   348,   214,   348,   216,
   109,   215,   340,   214,   340,   216,     6,     0,    44,    68,
   208,   340,   209,     7,   348,     6,     0,    56,    44,   208,
   340,   209,     7,   348,     6,     0,    55,    46,   208,   340,
   209,     7,   348,     6,     0,    46,   208,   340,   209,     7,
   348,     6,     0,    56,    46,   208,   340,   209,     7,   348,
     6,     0,    63,   342,   215,   317,   216,     0,    62,   215,
   342,   214,   342,   214,   340,   216,   215,   317,   216,     0,
    64,   342,   215,   317,   216,     0,    65,   215,   342,   214,
   340,   216,   215,   317,   216,     0,   319,     0,   318,     0,
   316,     0,     0,   318,   315,     0,   318,    40,   215,   350,
   216,     6,     0,   318,    43,   215,   350,   216,     6,     0,
   318,    44,   215,   350,   216,     6,     0,   318,    46,   215,
   350,   216,     6,     0,    67,   215,   318,   216,     0,    67,
     4,   210,   340,   211,     6,     0,    75,     4,   210,   340,
   211,     6,     0,    76,     4,   210,   340,   211,     6,     0,
    70,   215,   318,   216,     0,    70,     4,   210,   340,   211,
     6,     0,    70,     4,     6,     0,    70,     4,     4,     6,
     0,   113,   351,   215,   318,   216,     0,   125,   354,     6,
     0,   126,   354,     6,     0,   125,   215,   318,   216,     0,
   126,   215,   318,   216,     0,     4,   354,     6,     0,     4,
     4,   210,   340,   211,   354,     6,     0,     4,   340,     6,
     0,    60,   208,     4,   209,   212,     4,     6,     0,   105,
     4,     6,     0,   120,     6,     0,    37,     6,     0,    37,
   215,   340,   214,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   216,     6,     0,    38,     6,     0,   115,   208,
   340,     8,   340,   209,     0,   115,   208,   340,     8,   340,
     8,   340,   209,     0,   115,     4,   116,   215,   340,     8,
   340,   216,     0,   115,     4,   116,   215,   340,     8,   340,
     8,   340,   216,     0,   117,     0,   123,     4,     0,   121,
     0,   122,     4,     6,     0,   118,   208,   340,   209,     0,
   119,     0,    66,    40,   215,   340,   214,   342,   216,     6,
     0,    66,    40,   215,   340,   214,   342,   214,   342,   214,
   340,   216,     6,     0,    66,    40,   215,   340,   214,   342,
   214,   342,   214,   342,   214,   340,   216,     6,     0,     0,
    66,    40,   215,   340,   214,   342,   216,   326,   215,   335,
   216,     6,     0,     0,    66,    40,   215,   340,   214,   342,
   214,   342,   214,   340,   216,   327,   215,   335,   216,     6,
     0,     0,    66,    40,   215,   340,   214,   342,   214,   342,
   214,   342,   214,   340,   216,   328,   215,   335,   216,     6,
     0,    66,    43,   215,   340,   214,   342,   216,     6,     0,
    66,    43,   215,   340,   214,   342,   214,   342,   214,   340,
   216,     6,     0,    66,    43,   215,   340,   214,   342,   214,
   342,   214,   342,   214,   340,   216,     6,     0,     0,    66,
    43,   215,   340,   214,   342,   216,   329,   215,   335,   216,
     6,     0,     0,    66,    43,   215,   340,   214,   342,   214,
   342,   214,   340,   216,   330,   215,   335,   216,     6,     0,
     0,    66,    43,   215,   340,   214,   342,   214,   342,   214,
   342,   214,   340,   216,   331,   215,   335,   216,     6,     0,
    66,    44,   215,   340,   214,   342,   216,     6,     0,    66,
    44,   215,   340,   214,   342,   214,   342,   214,   340,   216,
     6,     0,    66,    44,   215,   340,   214,   342,   214,   342,
   214,   342,   214,   340,   216,     6,     0,     0,    66,    44,
   215,   340,   214,   342,   216,   332,   215,   335,   216,     6,
     0,     0,    66,    44,   215,   340,   214,   342,   214,   342,
   214,   340,   216,   333,   215,   335,   216,     6,     0,     0,
    66,    44,   215,   340,   214,   342,   214,   342,   214,   342,
   214,   340,   216,   334,   215,   335,   216,     6,     0,   336,
     0,   335,   336,     0,    74,   215,   348,   214,   348,   214,
   348,   216,     6,     0,    74,   215,   348,   214,   348,   216,
     6,     0,    69,     6,     0,    54,    43,   348,     7,   340,
     6,     0,    54,    43,   348,     7,   340,    57,    59,   340,
     6,     0,    54,    43,   348,     7,   340,    57,    58,   340,
     6,     0,    54,    44,   215,   340,   216,     7,   348,     6,
     0,    50,    44,   215,   340,   216,     7,   348,     6,     0,
    54,    46,   215,   340,   216,     7,   348,     6,     0,    69,
    44,   348,     7,   340,     6,     0,    69,    44,   348,     6,
     0,    71,     6,     0,    72,     6,     0,   134,     0,   135,
     0,   136,     0,   137,     0,   138,     0,   341,     0,   208,
   340,   209,     0,   198,   340,     0,   197,   340,     0,   203,
   340,     0,   340,   198,   340,     0,   340,   197,   340,     0,
   340,   199,   340,     0,   340,   200,   340,     0,   340,   201,
   340,     0,   340,   207,   340,     0,   340,   193,   340,     0,
   340,   195,   340,     0,   340,   194,   340,     0,   340,   196,
   340,     0,   340,   190,   340,     0,   340,   191,   340,     0,
   340,   189,   340,     0,   340,   188,   340,     0,   340,   187,
   340,     8,   340,     0,    12,   208,   340,   209,     0,    13,
   208,   340,   209,     0,    14,   208,   340,   209,     0,    15,
   208,   340,   209,     0,    16,   208,   340,   209,     0,    17,
   208,   340,   209,     0,    18,   208,   340,   209,     0,    19,
   208,   340,   209,     0,    20,   208,   340,   209,     0,    22,
   208,   340,   209,     0,    23,   208,   340,   214,   340,   209,
     0,    24,   208,   340,   209,     0,    25,   208,   340,   209,
     0,    26,   208,   340,   209,     0,    27,   208,   340,   209,
     0,    28,   208,   340,   209,     0,    29,   208,   340,   209,
     0,    30,   208,   340,   214,   340,   209,     0,    31,   208,
   340,   214,   340,   209,     0,    32,   208,   340,   214,   340,
   209,     0,    21,   208,   340,   209,     0,    12,   210,   340,
   211,     0,    13,   210,   340,   211,     0,    14,   210,   340,
   211,     0,    15,   210,   340,   211,     0,    16,   210,   340,
   211,     0,    17,   210,   340,   211,     0,    18,   210,   340,
   211,     0,    19,   210,   340,   211,     0,    20,   210,   340,
   211,     0,    22,   210,   340,   211,     0,    23,   210,   340,
   214,   340,   211,     0,    24,   210,   340,   211,     0,    25,
   210,   340,   211,     0,    26,   210,   340,   211,     0,    27,
   210,   340,   211,     0,    28,   210,   340,   211,     0,    29,
   210,   340,   211,     0,    30,   210,   340,   214,   340,   211,
     0,    31,   210,   340,   214,   340,   211,     0,    32,   210,
   340,   214,   340,   211,     0,    21,   210,   340,   211,     0,
     3,     0,     9,     0,    10,     0,    11,     0,   128,     0,
   129,     0,   130,     0,     4,     0,     4,   210,   340,   211,
     0,   213,     4,   210,   211,     0,     4,   313,     0,     4,
   210,   340,   211,   313,     0,     4,   212,     4,     0,     4,
   210,   340,   211,   212,     4,     0,     4,   212,     4,   313,
     0,     4,   210,   340,   211,   212,     4,   313,     0,   127,
   208,     5,   214,   340,   209,     0,   343,     0,   198,   342,
     0,   197,   342,     0,   342,   198,   342,     0,   342,   197,
   342,     0,   215,   340,   214,   340,   214,   340,   214,   340,
   214,   340,   216,     0,   215,   340,   214,   340,   214,   340,
   214,   340,   216,     0,   215,   340,   214,   340,   214,   340,
   216,     0,   208,   340,   214,   340,   214,   340,   209,     0,
     0,   208,   345,   209,     0,     5,     0,   345,   214,     5,
     0,     0,   215,   347,   216,     0,   208,   347,   209,     0,
   348,     0,   347,   214,   348,     0,   340,     0,   349,     0,
   215,   350,   216,     0,   198,   215,   350,   216,     0,   340,
     8,   340,     0,   340,     8,   340,     8,   340,     0,    40,
   215,   340,   216,     0,   316,     0,   319,     0,   325,     0,
     4,   210,   211,     0,   198,     4,   210,   211,     0,     4,
   210,   215,   350,   216,   211,     0,   198,     4,   210,   215,
   350,   216,   211,     0,   340,     0,   349,     0,   350,   214,
   340,     0,   350,   214,   349,     0,   215,   340,   214,   340,
   214,   340,   214,   340,   216,     0,   215,   340,   214,   340,
   214,   340,   216,     0,     4,     0,     4,   212,   113,   212,
     4,     0,   215,   353,   216,     0,     4,   210,   340,   211,
   212,   114,     0,   351,     0,   353,   214,   351,     0,     5,
     0,    39,     0,    35,   208,   354,   214,   354,   209,     0,
    36,   208,   354,   209,     0,    34,   208,   354,   209,     0,
    34,   208,   354,   214,   350,   209,     0,    34,   208,     4,
   212,     4,   209,     0,    34,   208,     4,   210,   340,   211,
   212,     4,   209,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   162,   164,   165,   166,   171,   173,   176,   178,   181,   188,
   201,   215,   217,   220,   222,   223,   226,   232,   237,   238,
   239,   242,   246,   249,   255,   260,   266,   274,   279,   283,
   289,   294,   298,   303,   307,   310,   315,   319,   323,   327,
   332,   336,   339,   343,   347,   351,   355,   359,   363,   366,
   370,   373,   377,   380,   387,   389,   392,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
   409,   415,   432,   440,   449,   457,   458,   459,   460,   461,
   462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
   472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
   482,   483,   484,   487,   490,   494,   500,   506,   509,   513,
   520,   527,   530,   534,   541,   548,   551,   555,   564,   571,
   574,   578,   587,   594,   597,   601,   610,   617,   620,   624,
   637,   644,   647,   651,   664,   671,   674,   678,   691,   698,
   701,   705,   719,   726,   729,   733,   747,   754,   757,   761,
   775,   782,   785,   789,   803,   810,   813,   817,   831,   838,
   841,   845,   859,   866,   869,   873,   897,   904,   907,   911,
   935,   942,   945,   949,   973,   980,   983,   987,  1006,  1013,
  1016,  1020,  1039,  1046,  1049,  1053,  1072,  1079,  1082,  1086,
  1104,  1111,  1114,  1118,  1136,  1143,  1146,  1150,  1168,  1175,
  1181,  1188,  1196,  1202,  1208,  1215,  1223,  1229,  1237,  1240,
  1244,  1252,  1254,  1255,  1256,  1257,  1260,  1262,  1265,  1300,
  1339,  1393,  1410,  1421,  1440,  1454,  1471,  1497,  1524,  1538,
  1555,  1569,  1586,  1606,  1629,  1639,  1654,  1674,  1690,  1709,
  1728,  1746,  1764,  1782,  1808,  1826,  1852,  1872,  1896,  1920,
  1946,  1963,  1979,  1996,  2014,  2033,  2052,  2091,  2116,  2136,
  2155,  2172,  2191,  2210,  2226,  2246,  2263,  2280,  2300,  2306,
  2311,  2316,  2323,  2325,  2326,  2329,  2334,  2338,  2354,  2370,
  2386,  2406,  2421,  2427,  2433,  2444,  2454,  2464,  2474,  2492,
  2506,  2515,  2521,  2532,  2545,  2590,  2605,  2621,  2631,  2642,
  2646,  2650,  2654,  2665,  2682,  2698,  2724,  2751,  2783,  2790,
  2795,  2801,  2805,  2813,  2832,  2848,  2864,  2869,  2885,  2890,
  2906,  2911,  2929,  2952,  2975,  2998,  3003,  3026,  3031,  3054,
  3059,  3085,  3108,  3131,  3154,  3159,  3182,  3188,  3211,  3217,
  3242,  3246,  3251,  3278,  3302,  3310,  3329,  3347,  3365,  3392,
  3418,  3444,  3458,  3476,  3481,  3490,  3492,  3493,  3494,  3495,
  3498,  3500,  3501,  3502,  3503,  3504,  3505,  3506,  3507,  3514,
  3515,  3516,  3517,  3518,  3519,  3520,  3521,  3522,  3523,  3524,
  3525,  3526,  3527,  3528,  3529,  3530,  3531,  3532,  3533,  3534,
  3535,  3536,  3537,  3538,  3539,  3540,  3541,  3542,  3543,  3544,
  3545,  3547,  3548,  3549,  3550,  3551,  3552,  3553,  3554,  3555,
  3556,  3557,  3558,  3559,  3560,  3561,  3562,  3563,  3564,  3565,
  3566,  3567,  3572,  3577,  3578,  3579,  3580,  3581,  3582,  3586,
  3599,  3619,  3633,  3646,  3669,  3687,  3705,  3723,  3741,  3748,
  3753,  3757,  3761,  3765,  3771,  3776,  3780,  3784,  3790,  3794,
  3799,  3803,  3808,  3812,  3816,  3822,  3828,  3835,  3841,  3845,
  3849,  3860,  3867,  3878,  3898,  3908,  3918,  3930,  3947,  3966,
  3990,  4018,  4024,  4028,  4032,  4044,  4049,  4061,  4068,  4089,
  4094,  4108,  4114,  4120,  4125,  4133,  4141,  4155,  4159,  4178,
  4194
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tDiscrete","tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata",
"tLoop","tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers",
"tAlias","tAliasWithOptions","tScalarPoint","tVectorPoint","tTensorPoint","tScalarLine",
"tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle","tTensorTriangle",
"tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron","tVectorHexahedron",
"tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism","tScalarPyramid",
"tVectorPyramid","tTensorPyramid","tText2D","tText3D","tInterpolationScheme",
"tTime","tCombine","tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds",
"tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit",
"tReturn","tCall","tFunction","tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION",
"tGMSH_MINOR_VERSION","tGMSH_PATCH_VERSION","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ScalarPointValues",
"ScalarPoint","@1","VectorPointValues","VectorPoint","@2","TensorPointValues",
"TensorPoint","@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine",
"@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","InterpolationMatrix","TimeValues","Time","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Colorify","Visibility","Command","Loop","Extrude","@27","@28","@29",
"@30","@31","@32","@33","@34","@35","ExtrudeParameters","ExtrudeParameter","Transfinite",
"Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings",
"RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   217,   217,   217,   217,   218,   218,   219,   219,   220,   220,
   220,   221,   221,   222,   222,   222,   223,   223,   223,   223,
   223,   224,   224,   224,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   226,   226,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   228,   228,   229,   229,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   231,   231,   233,   232,   234,   234,   236,
   235,   237,   237,   239,   238,   240,   240,   242,   241,   243,
   243,   245,   244,   246,   246,   248,   247,   249,   249,   251,
   250,   252,   252,   254,   253,   255,   255,   257,   256,   258,
   258,   260,   259,   261,   261,   263,   262,   264,   264,   266,
   265,   267,   267,   269,   268,   270,   270,   272,   271,   273,
   273,   275,   274,   276,   276,   278,   277,   279,   279,   281,
   280,   282,   282,   284,   283,   285,   285,   287,   286,   288,
   288,   290,   289,   291,   291,   293,   292,   294,   294,   296,
   295,   297,   297,   299,   298,   300,   300,   302,   301,   303,
   303,   305,   304,   306,   306,   308,   307,   309,   310,   310,
   311,   312,   312,   312,   312,   312,   313,   313,   314,   314,
   314,   314,   314,   314,   314,   314,   314,   314,   314,   314,
   314,   314,   314,   314,   314,   314,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   315,   315,   315,
   315,   315,   315,   315,   315,   315,   315,   315,   316,   316,
   316,   316,   317,   317,   317,   318,   318,   318,   318,   318,
   318,   319,   319,   319,   319,   320,   320,   320,   320,   321,
   322,   322,   322,   322,   323,   323,   323,   323,   323,   323,
   323,   323,   323,   324,   324,   324,   324,   324,   324,   324,
   324,   324,   324,   325,   325,   325,   326,   325,   327,   325,
   328,   325,   325,   325,   325,   329,   325,   330,   325,   331,
   325,   325,   325,   325,   332,   325,   333,   325,   334,   325,
   335,   335,   336,   336,   336,   337,   337,   337,   337,   337,
   337,   337,   337,   338,   338,   339,   339,   339,   339,   339,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   341,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   342,
   342,   342,   342,   342,   343,   343,   343,   343,   344,   344,
   345,   345,   346,   346,   346,   347,   347,   348,   348,   348,
   348,   349,   349,   349,   349,   349,   349,   349,   349,   349,
   349,   350,   350,   350,   350,   351,   351,   351,   351,   352,
   352,   353,   353,   354,   354,   354,   354,   354,   354,   354,
   354
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    55,     1,     3,     0,
    55,     1,     3,     0,    55,     1,     3,     0,    43,     1,
     3,     0,    43,     1,     3,     0,    43,     1,     3,     0,
    37,     1,     3,     0,    37,     1,     3,     0,    37,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     1,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     7,     7,     7,     9,     7,     9,    17,     7,     7,    11,
    11,    11,     8,    12,     8,     8,     8,    12,    14,    14,
    14,    22,    20,     8,     8,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     6,     6,     6,
     6,     4,     6,     6,     6,     4,     6,     3,     4,     5,
     3,     3,     4,     4,     3,     7,     3,     7,     3,     2,
     2,    15,     2,     6,     8,     8,    10,     1,     2,     1,
     3,     4,     1,     8,    12,    14,     0,    12,     0,    16,
     0,    18,     8,    12,    14,     0,    12,     0,    16,     0,
    18,     8,    12,    14,     0,    12,     0,    16,     0,    18,
     1,     2,     9,     7,     2,     6,     9,     9,     8,     8,
     8,     6,     4,     2,     2,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     4,     4,     4,     6,     6,     6,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     4,     4,     4,     6,     6,
     6,     4,     1,     1,     1,     1,     1,     1,     1,     1,
     4,     4,     2,     5,     3,     6,     4,     7,     6,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     1,     1,     3,
     4,     3,     5,     4,     1,     1,     1,     3,     4,     6,
     7,     1,     1,     3,     3,     9,     7,     1,     5,     3,
     6,     1,     3,     1,     1,     6,     4,     4,     6,     6,
     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   308,     0,   313,     0,   310,     0,     0,
     0,     0,     0,    56,    58,    57,    59,    60,    61,    62,
    63,    64,    65,    70,    69,    66,    67,    68,     0,     0,
    17,    18,    20,    19,    21,   449,   449,     0,   423,   430,
   484,   212,   424,   425,   426,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   485,
     0,   427,   428,   429,   213,   214,   215,   216,     0,     0,
     0,   217,   218,     0,     0,     0,     0,     0,     0,     0,
   361,     0,     0,   301,     0,   303,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   440,     0,     0,
     0,     0,     0,     0,   276,     0,     0,   276,   354,   355,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   478,
     0,     0,     0,     0,     0,   300,     0,   309,     0,   484,
   276,     0,   276,     0,     5,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   433,     0,    75,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   430,   364,   363,   365,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   223,   297,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   295,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   430,     0,     0,     0,   465,   466,   467,
   458,     0,   459,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   442,   441,     0,     0,     0,     0,   276,   276,
     0,     0,     0,     0,     0,     0,     0,     0,   288,     0,
     0,     0,     0,     0,     0,   299,     0,     0,     0,     0,
     0,     0,     0,   276,     0,     0,     0,   311,     0,     0,
   291,     0,   292,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   451,     0,     0,     0,     0,
     0,   435,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   362,     0,     0,   472,   473,     0,     0,   212,
     0,     0,     0,     0,     0,   219,     0,   379,   378,   376,
   377,   372,   374,   373,   375,   367,   366,   368,   369,   370,
   371,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   430,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   444,   443,   275,     0,   274,   273,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   282,   277,   353,     0,
   289,     0,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   312,     0,   293,
   294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   450,     0,     0,    23,     0,   431,   437,    75,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   381,   402,   382,
   403,   383,   404,   384,   405,   385,   406,   386,   407,   387,
   408,   388,   409,   389,   410,   401,   422,   390,   411,     0,
     0,   392,   413,   393,   414,   394,   415,   395,   416,   396,
   417,   397,   418,     0,     0,     0,     0,     0,     0,     0,
     0,   488,     0,     0,   487,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   229,     0,     0,     0,     0,
   432,     0,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   468,     0,     0,     0,     0,   460,   462,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   269,   271,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   290,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   452,     0,   449,     0,   434,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   431,   222,   474,   475,     0,     0,     0,     0,     0,   224,
   225,   227,     0,     0,   482,     0,   233,   380,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   464,
   469,     0,   461,     0,   240,     0,     0,     0,     0,     0,
   346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   283,     0,     0,     0,     0,   352,   287,     0,     0,
   284,   285,     0,     0,     0,   453,     0,   479,     0,     0,
     0,   304,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   356,   357,   358,
   359,   360,     0,     0,     0,     0,     0,     0,     0,    22,
     0,   436,   296,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   456,     0,   209,   391,   412,   398,   419,   399,   420,
   400,   421,     0,   490,   489,   486,   439,     0,   212,     0,
     0,     0,     0,   220,     0,     0,     0,   480,    72,     0,
   237,   243,     0,   245,     0,     0,   241,     0,   242,   267,
     0,     0,   463,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,     0,     0,   276,     0,   317,     0,
   326,     0,   335,     0,     0,     0,     0,     0,     0,   248,
   249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   449,   438,    74,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
     0,   231,     0,   483,     0,     0,     0,   253,   264,   470,
     0,     0,   350,   256,   257,     0,     0,     0,   349,   351,
   266,   238,   255,   265,   268,     0,     0,     0,     0,     0,
     0,     0,   448,     0,   447,     0,     0,   314,     0,     0,
   323,     0,     0,   332,     0,   278,   279,   280,   281,     0,
     0,   453,     0,     0,     0,     0,     0,   477,     0,   306,
   305,     0,     0,     0,     0,     0,    25,     0,    34,     0,
    38,     0,    32,     0,     0,    37,     0,    42,    40,     0,
     0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
     0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   457,     0,   210,   211,     0,   221,   226,   228,     0,   234,
     0,     0,   244,   246,   471,     0,     0,   348,   347,   235,
   236,     0,     0,     0,     0,   276,     0,   272,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   455,   454,     0,
     0,     0,     0,     0,     0,     0,   453,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   491,     0,   481,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   446,     0,     0,     0,
     0,     0,     0,     0,     0,   341,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   476,   307,     0,
     0,    39,     0,     0,     0,     0,    29,     0,    35,     0,
    41,    30,    43,     0,    46,     0,    50,    51,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   232,     0,     0,     0,   251,   252,     0,     0,   270,     0,
     0,   319,     0,   345,     0,     0,   342,   328,     0,     0,
   337,     0,     0,     0,     0,     0,     0,   250,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   106,   110,   114,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   202,     0,   208,     0,
     0,     0,     0,     0,   445,   315,     0,     0,     0,   318,
   324,     0,     0,   327,   333,     0,     0,   336,   239,   254,
     0,     0,   258,     0,     0,     0,     0,     0,    33,    36,
    44,     0,    45,    52,    47,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   321,     0,
     0,   330,     0,   339,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   206,     0,
     0,   261,   259,   260,     0,   316,     0,     0,     0,   325,
     0,     0,   334,     0,     0,     0,     0,     0,     0,    28,
    31,     0,     0,     0,   104,     0,   108,     0,   112,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   200,     0,   302,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   320,     0,     0,   344,   329,     0,   338,     0,     0,
     0,     0,     0,     0,    48,    24,   105,   107,   109,   111,
   113,   115,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   201,   203,     0,   204,   247,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   118,   122,   126,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   322,   343,   331,   340,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   205,   207,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
    10,     0,     0,     0,   116,     0,   120,     0,   124,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   262,     0,    26,   117,   119,   121,
   123,   125,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   130,   134,   138,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   128,     0,   132,     0,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   129,   131,   133,   135,   137,   139,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   142,   146,   150,   154,   158,
   162,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   140,     0,   144,     0,   148,     0,   152,     0,
   156,     0,   160,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   141,   143,   145,   147,   149,   151,   153,
   155,   157,   159,   161,   163,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   190,   194,   198,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   188,     0,
   192,     0,   196,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   189,   191,   193,   195,   197,   199,     0,     0,     0,
   178,   182,   186,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   176,
     0,   180,     0,   184,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   177,   179,   181,   183,
   185,   187,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   166,   170,   174,     0,     0,     0,     0,     0,     0,     0,
   164,     0,   168,     0,   172,     0,     0,     0,     0,     0,
     0,   165,   167,   169,   171,   173,   175,     0,     0,     0
};

static const short yydefgoto[] = {  2428,
   227,     2,     9,     3,    19,    20,    21,    22,     4,    74,
    75,    76,   464,  1744,   690,  1647,  1746,   691,  1648,  1748,
   692,  1649,  1964,   693,  1910,  1966,   694,  1911,  1968,   695,
  1912,  2100,   696,  2062,  2102,   697,  2063,  2104,   698,  2064,
  2212,   699,  2182,  2214,   700,  2183,  2216,   701,  2184,  2218,
   702,  2185,  2220,   703,  2186,  2222,   704,  2187,  2410,   705,
  2404,  2412,   706,  2405,  2414,   707,  2406,  2359,   708,  2347,
  2361,   709,  2348,  2363,   710,  2349,  2308,   711,  2290,  2310,
   712,  2291,  2312,   713,  2292,  1771,   714,  1671,  1866,   715,
  1773,   716,  1083,   717,   148,   264,    77,   598,   358,   584,
   585,   359,    81,    82,    83,    84,    85,   360,  1279,  1617,
  1727,  1282,  1622,  1731,  1285,  1626,  1734,  1475,  1476,    87,
    88,  1043,   361,   151,   383,   188,   259,   457,  1165,  1081,
  1082,   363,   518,   212,   780,   946,   152
};

static const short yypact[] = {  3345,
    45,   363,   287,  3590,-32768,-32768,-32768,  -135,-32768,    67,
    99,   105,   113,   123,   179,  -122,   -50,    30,-32768,-32768,
-32768,-32768,  2770,    83,    16,   206,   122,   129,   132,   -28,
   155,   167,   178,   149,   182,   176,   255,   371,   374,   624,
   389,   457,   259,   388,   260,  -120,  -120,   266,   519,     4,
   455,     9,   502,   513,    80,   535,   542,   560,   314,   365,
   -15,    11,    17,-32768,   368,-32768,   586,-32768,   581,   599,
   570,    14,    20,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    15,  3154,
-32768,-32768,-32768,-32768,-32768,   417,   417,   652,-32768,   322,
    12,-32768,-32768,-32768,-32768,  -140,  -123,    -7,    87,   152,
   239,   350,   362,   376,   416,   432,   437,   461,   483,   484,
   514,   517,   518,   534,   537,   540,   467,   473,   496,-32768,
   521,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3131,  3131,
  3131,-32768,-32768,  3131,   831,    37,   716,  3131,   732,   489,
-32768,   733,   725,-32768,  3131,-32768,  3131,  3131,  3131,   543,
  3131,   548,  3131,  3131,  2423,  3131,   545,   549,   574,   582,
  2423,   590,   591,   604,   608,   613,   620,   621,   828,   -66,
   -56,  -120,  -120,  -120,  3131,  3131,  -117,-32768,   -70,  -120,
   618,   649,   650,   707,-32768,  2423,    22,-32768,-32768,-32768,
  2423,  2423,   710,   727,   943,  3131,  3131,   -64,  3131,   744,
  3131,   755,   868,  3131,  3131,-32768,   984,-32768,   800,-32768,
-32768,  1003,-32768,  1004,-32768,  1008,    15,   806,   807,   808,
   809,   810,   811,   812,   813,   814,   815,   816,   817,   819,
   823,   824,   825,   829,   832,   833,   837,   839,   840,   846,
   856,   863,   864,   865,   866,   867,   876,  1031,   799,   885,
   883,  3131,  1094,-32768,  -120,-32768,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,    68,    74,
    74,  1095,   378,   894,   894,   894,  1276,  1096,  3003, 10962,
   180,   890,  1101,   899,   512,-32768,-32768,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,-32768,   -53,  1890, 11712, 11735, 11758,  3131, 11781,
  3131, 11804, 11827,   434,   897,  2551,  3003,-32768,-32768,-32768,
   892,  1106,-32768, 11850,  3131,  3131,  3131,  3131,  1107,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,   906,  3131,  3131,  3131,
  3131,  -114,-32768,-32768,  2623,  3988,  -120,  -120,   504,   504,
   -83,  3131,  3131,  3131,  3131,  1776,   449,  1115,-32768,  3131,
  2087,  1116,  1117,  3131,  3131,-32768, 11873, 11896,  1011,  3131,
 11919,  1012,  4010,-32768,   911,  1299, 11942,-32768,  3131,  3383,
-32768,  3432,-32768,-32768,    15,  1122,  1123,  1124,  1125,  1126,
  1127,  1128,  1129,  1132,  1133,  1134,  1135,  1136,  1137,  1138,
  1139,  1140,  1141,  1143,  1144,  1146,  1148,  1149,   989,  1152,
  1153,  1154,  1156,  1159,  1158,-32768,   -33,  1160,  1165,  1161,
 10987,   324,   -51,  2640, 11965, 11012, 11988, 11037, 12011, 11062,
 12034, 11087, 12057, 11112, 12080, 11137, 12103, 11162, 12126, 11187,
 12149, 11212, 12172, 11237, 12195, 11262,  4032,  4054, 12218, 11287,
 12241, 11312, 12264, 11337, 12287, 11362, 12310, 11387, 12333, 11412,
  4076,  4098,  4120,  4142,  4164,  4186,   -55,   118,   950,   963,
   959,  3131,-32768,  2423,  3161,   892,-32768,   280,   117,    74,
  3131,  1169,  1172,    13,   966,-32768,  1423,   354,   316,   436,
   436,  -108,  -108,  -108,  -108,   192,   192,   894,   894,   894,
   894,  1173,  3003,  3131,  1174,  1201,  1202, 12356,  1204, 12379,
  1205,  1206,  1311,  3131,   511,  3003,   538,  3131,  3131,  1207,
  1608, 12402, 12425, 12448,  3131,  2397,  2893, 12471, 12494, 12517,
 12540, 12563,   968, 12586,  3030, 12609,  3076,  -120,  3131,  3131,
-32768,-32768,-32768,   999,  1896,-32768,  1000,  3131,  4208,  4230,
  4252, 11437,   -36,   -48,   -37,   -13,-32768,-32768,-32768,  3131,
-32768, 11462,-32768,  1002,  1005, 11487, 11512,  1211,  1212,  1013,
 12632,  1216,  1027,  3131,  3502,  3131,  3131,-32768, 12655,-32768,
-32768,  1061,  1028,  1029,  1047,  1048,  1049,  1050,  1051,  1054,
  1055,  1056,  1057,  1068,  1097,  1099,  1102,  1103,  1104,  1130,
  1131,  1142,  1145,  1150,  1151,  1155,  1157,  1162,  1163,  1166,
  1167,  1168,-32768,  1236,  1036,-32768,  1170,   134,-32768,-32768,
  1065,  1067,  1100,  1111,  1171,  1175,  1177,  1178,  1181,  1185,
  1188,  1189,  1190,  1191,  1193,  1194,  1196,  1224,  1225,  1226,
  1228,  1234,  1245,  1270,  1271,  1272,  1229,  1266,  1303,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3131,
  3131,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  1306,-32768,  3003,    74,-32768,  3131, 11537,  1340,  3003,  1147,
    40,  3131,  1341,  1342,   708,-32768,  1343,  1164,    11,  1345,
-32768,  3131,-32768,   127,  4274,  -120,  2423,  2423,  1350,  2423,
  1353,  2423,  2423,-32768,  3003,  3389,  2500,   539,-32768,  1517,
   735,  1267,  1356,  1360,  1368,  1477,   411,  1484,  1495,  1496,
  1497,  1498,  1500,  1503,  1348,  1504,  1505,  1506,  1508,   -32,
  4296,  4318,-32768,-32768,  3483,  -120,  -120,  -120,  1510,  3003,
  3003,  3003,  3003,   778,  1511,  3131,  3131,  1512,  1514,  2423,
  2423,  3131,  1516,  2423,  1523,  4340,-32768,  1532,   465,  1521,
  1349,  1346,  3131,  3131,  -120,  1518,  1528,  1333,  1530,  1531,
  2423,  2423,  1534,  -120,  1535,  1538,  2423,  2423,  1539,  1540,
  1541,  1542,  1543,  2423,   485,  2423,  1544,  1545,  1546,  1549,
  1550,-32768,  1529,   417,  1551,-32768,  1552,  2788,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  2423,  3131,-32768, 12678, 11562, 12701,
 11587, 12724, 11612, 12747, 11637, 11662,  1339,   145,  1347, 12770,
   249,-32768,   892,-32768,    31,   286,  1337,  1553,   805,-32768,
-32768,-32768,    11,  3131,-32768,   547,-32768,  1401,  1555,  3131,
    36,    55,    61,  2423,  1556,  2423,  1578,  1580,   550,-32768,
-32768,  3003,-32768,  3131,-32768,  3131,  2423,  2423,  2423,  1351,
-32768,   639,  2423,  2423,  2423,  2423,  2423,  2423,  2423,   589,
  1378,  1388,  1389,  1390,  3131,  3131,  3131,  1391,    -8,   230,
   236,-32768,   551,   554,   555,   559,-32768,-32768,  4362,  4384,
-32768,-32768,  1601,  1619, 12793,   116,  1445,-32768,  3131,  3131,
  3131,-32768,  1411,  1451,  1414,  4406,  4428,     1,  1418,  1425,
  1421,  1427,  1424,  1428,  1429,  1430,   170,  1433,  1432,  1439,
  1436,  1437,  1438,  1440,  1441,  1442,  1448,-32768,-32768,-32768,
-32768,-32768,  1446,  1447,  1449,  1450,  1452,  1453,  1454,-32768,
  1455,   324,-32768,  1633,  4450,  4472,  4494,  4516,  4538,  4560,
  4582,  4604,  4626,  4648,  4670,  4692,  4714,  4736,  4758,  4780,
  4802,  4824,  4846,  4868,  4890,  4912,  4934,  4956,  4978,  5000,
   562,-32768,   563,  1401,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1458,-32768,-32768,-32768,-32768,  2423,    74,  3131,
  1636,  1654,    13,-32768,  1653, 11687,    11,-32768,-32768,  5022,
-32768,-32768,  -120,-32768,  -120,  1659,-32768,  1661,-32768,-32768,
  1485,   567,  1401,  5044,  1689,  1691,  1692,  3131,  3131,  3131,
  1694,  1695,  1696,  1697,  1728,  1729,  1730,-32768,  2909,  3131,
  3131,  3131,  3131,  3532, 12816,   862,   504,  -120,  1731,  -120,
  1732,  -120,  1734,  1735,  1737,  1738,  1739,  3131,  3131,-32768,
-32768,  1740,  2423,  2423,  1634,  2423,  1698,   213, 12839,  3131,
    15,  1745,  3131,  2423,  1744,  1749,  1747,  1557,  1748,   485,
  1751,  1752,  3131,  1753,  1755,  1754,  1757,  1758,   485,  3131,
  3131,  3131,  2423,  1759,  1761,   485,  3131,  1763,  1764,  1765,
  3131,   417,-32768,-32768,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  2423,  1554,  3131,  1767,  1796,  1804,  1805,  1037,-32768,  1806,
  1808,-32768,  1600,-32768,  3131,    39,    91,-32768,-32768,-32768,
  1615,  3131,-32768,-32768,-32768,  5066,  1059,  1090,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1105,  1827,  3556,  3580,  5088,
  5110,  1620,-32768,  3131,-32768,  1618,   191,-32768,  1621,   265,
-32768,  1623,   268,-32768,  1624,-32768,-32768,-32768,-32768,  5132,
  5154,   116,   164,   571,  1625,  1733,  3131,-32768,  3131,-32768,
-32768,  5176,    15,  1632,  5198,  1629,-32768,  1630,-32768,  1631,
-32768,  1637,-32768,  1638, 12862,-32768,  1639,-32768,-32768,  1645,
  1646, 12885,  5220, 12908,  1642,-32768,  1648,  1667,  5242,  1663,
  1669,-32768,  5264,  1665,  5286,  5308,  5330,  5352,  5374,  5396,
  5418,  5440,  5462,  5484,  5506,  5528,  5550,  5572,  5594,  5616,
  5638,  5660,  5682,  5704,  5726,  5748,  5770,  5792,  5814,  5836,
-32768,  2423,  1401,-32768,  1671,-32768,-32768,-32768,    11,-32768,
  1787,  5858,-32768,-32768,-32768,  5880,  3131,-32768,-32768,-32768,
-32768,  2423,  2423,  3131,  3131,   504,  2277,-32768,  2642,   352,
  2642,   352,  2642,   352,  3131,  3131,  1736,-32768,-32768,  2423,
  3131,  3604,  3628,  2423,    15,  1841,   116,   485,  1878,  3131,
  1884,   485,  1897,  1899,  1898,  1900,  1901,  3131,  1902,  2423,
  1903,  1905,  3131,  1910,  1938,  3131,  1941,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,   572,-32768,  1944,-32768,  3131,  1948, 12931,
  1949,  1950,  3652,  3676,  1743,  3131,-32768,  2642,  2642,  3131,
  3700,   279,  1954,  1746,   -42,-32768,  3724,   290,   -39,  3748,
   327,   -22,  3772,  3796,  1750,  1779,  1261,-32768,-32768,  1778,
  1786,-32768,  1781,  1782,  1783,  5902,-32768,  1762,-32768,  1789,
-32768,-32768,-32768, 12954,-32768,  1785,-32768,-32768, 12977,  1791,
-32768, 13000,  1792, 13023, 13046, 13069,  5924,  5946,  5968,  5990,
  6012,  6034,  6056,  6078,  6100,  6122,  6144,  6166,  6188,  6210,
  6232,  6254,  6276,  6298,  6320,  6342,  6364, 13092,  6386,  1957,
-32768,  6408,  1793,  2423,-32768,-32768,  2423,  2423,-32768,  3820,
  2495,  1958,  3131,-32768,  2423,  1960,-32768,  1961,  3131,  1967,
  1995,  3131,  1999,  2002,  2003,  2423,  2423,-32768,  2004,    15,
   485,   485,   485,   485,  2005,  2006,  2007,   485,  2008,  2009,
  2010,  2012,-32768,-32768,-32768,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,-32768,  3131,-32768,  3131,
  2013,  2423,  2423,  2423,-32768,-32768,  1807,  3844,  1824,-32768,
-32768,  1825,  3868,-32768,-32768,  1826,  3892,-32768,-32768,-32768,
  1828,  1803,-32768,    15,  1829,  1830,  1812,  1836,-32768,-32768,
-32768,  1832,-32768,-32768,-32768,  1833,  1834,  1835,  1837,  6430,
  6452,  6474,  6496,  6518,  6540,  6562,  6584,  6606,  6628,  6650,
  6672,  6694,  6716,  6738,  6760,  6782,  6804,  6826,  6848,  6870,
  1838, 13115,  3916,  1840,  2033,  2042,  2045,   352,  2049,  2423,
   352,  2050,   352,  2051,  2423,  1845,    15,   485,   485,  2070,
  2076,   485,  2088,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,    74,-32768,  2086,
  2089,-32768,-32768,-32768,   -12,-32768,  1880,   575,   -11,-32768,
  1881,    -9,-32768,  1883,  1886,  1885,  1945,  1906,  1908,-32768,
-32768,  1914,  1915,   579,  1401,   580,  1401,   583,  1401,  6892,
  6914,  6936,  6958,  6980,  7002,  7024,  7046,  7068,  7090,  7112,
  7134,  7156,  7178,  7200,  7222,  7244,  7266,  7288,  7310,  7332,
   584,-32768,  1911,-32768,  1909,  2129,   352,  2423,  2131,  2135,
   352,  2138,   352,  2036,  3131,    15,   485,  2423,  2140,  2141,
  3131,  2152,  3131,  2153,  3131,  2155,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,    74,  2156,    74,
  2157,-32768,    -5,  1951,-32768,-32768,     2,-32768,    27,  1953,
  7354,    15,  1952,  1955,-32768,-32768,  1401,-32768,  1401,-32768,
  1401,-32768, 13138, 13161, 13184,  7376,  7398,  7420,  7442,  7464,
  7486,  7508,  7530,  7552,  7574,  7596,  7618,  7640,  7662,  7684,
  7706,  7728,  7750,-32768,-32768,   587,-32768,-32768,  2158,  2159,
  2164,  2165,  3131,  3131,    15,   485,  2423,-32768,-32768,-32768,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,    74,  2166,
-32768,-32768,-32768,-32768,  7772,  3940,  1992,  1975,  1976,  1977,
  1981,  1982,  7794,  7816,  7838,  7860,  7882,  7904,  7926,  7948,
  7970,  7992,  8014,  8036,  8058,  8080,  8102,  8124,  8146,  8168,
-32768,-32768,  3131,  2185,  2016,  2423,   485,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3964,-32768,
-32768,  1985,  1991,   588,  1401,   601,  1401,   606,  1401,  8190,
  8212,  8234,  8256,  8278,  8300,  8322,  8344,  8366,  8388,  8410,
  8432,  8454,  8476,  8498,  8520,  8542,  8564,  2195,  2423,  2196,
  3131,  2197,  3131,  2198,  3131,  2199,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,-32768,  1993,-32768,  1401,-32768,  1401,
-32768,  1401,-32768, 13207, 13230, 13253,  8586,  8608,  8630,  8652,
  8674,  8696,  8718,  8740,  8762,  8784,  8806,  8828,  8850,  8872,
  8894,  2423,-32768,-32768,-32768,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  1994,  1998,  2000,  2018,  8916,  8938,  8960,  8982,  9004,  9026,
  9048,  9070,  9092,  9114,  9136,  9158,  9180,  9202,  9224,  2423,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  2021,   610,
  1401,   611,  1401,   622,  1401,  9246,  9268,  9290,  9312,  9334,
  9356,  9378,  9400,  9422,  9444,  9466,  9488,  9510,  9532,  9554,
   485,  3131,  2200,  3131,  2203,  3131,  2211,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  2029,  1401,-32768,  1401,-32768,  1401,-32768, 13276,
 13299, 13322, 13345, 13368, 13391,  9576,  9598,  9620,  9642,  9664,
  9686,  9708,  9730,  9752,  2213,-32768,-32768,-32768,-32768,-32768,
-32768,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
-32768,  2024,  2025,  2026,  2027,  2028,  2030,  9774,  9796,  9818,
  9840,  9862,  9884,  9906,  9928,  9950,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,   623,  1401,   678,  1401,   696,  1401,   697,  1401,   702,
  1401,   724,  1401,  9972,  9994, 10016, 10038, 10060, 10082, 10104,
 10126, 10148,  3131,  2215,  3131,  2238,  3131,  2240,  3131,  2241,
  3131,  2242,  3131,  2243,  3131,  3131,  3131,  3131,  3131,  3131,
  3131,  3131,  3131,  1401,-32768,  1401,-32768,  1401,-32768,  1401,
-32768,  1401,-32768,  1401,-32768, 10170, 10192, 10214, 10236, 10258,
 10280, 13414, 13437, 13460,  3131,  3131,  3131,  3131,  3131,  3131,
-32768,-32768,-32768, 10302, 10324, 10346, 10368, 10390, 10412,  2035,
  2043,  2044,  3131,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  3131, 10434, 10456, 10478, 10500, 10522, 10544,   730,  1401,   731,
  1401,   734,  1401,  3131,  3131,  3131,  3131,  3131,  3131,  3131,
  2245,  3131,  2254,  3131,  2255, 10566, 10588, 10610, 13483, 13506,
 13529,  1401,-32768,  1401,-32768,  1401,-32768,  3131,  3131,  3131,
-32768,-32768,-32768, 10632, 10654, 10676,  2047,  2048,  2052,  3131,
  3131,  3131,  3131,  3131,  3131, 10698, 10720, 10742,   737,  1401,
   738,  1401,   741,  1401,  3131,  3131,  3131,  3131,  2258,  3131,
  2259,  3131,  2260, 10764, 10786, 10808,  1401,-32768,  1401,-32768,
  1401,-32768,  3131,  3131,  3131, 10830, 10852, 10874,  3131,  3131,
  3131, 10896, 10918, 10940,  3131,  3131,  3131, 13552, 13575, 13598,
-32768,-32768,-32768,  2053,  2054,  2064,  3131,  3131,  3131,   766,
  1401,   767,  1401,   775,  1401,  3131,  2274,  3131,  2275,  3131,
  2276,  1401,-32768,  1401,-32768,  1401,-32768,  2283,  2286,-32768
};

static const short yypgoto[] = {-32768,
  -133,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1627,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -319,   -17,-32768,  2285,     5,  -389,
  -184,     8,-32768,-32768,-32768,-32768,-32768,  2294,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1358, -1349,-32768,
-32768, -1114,   -23,-32768,   240,-32768,   -92,-32768, -1259, -1140,
  1444,  -182,  -347,  -772,  1187,-32768,   -69
};


#define	YYLAST		13807


static const short yytable[] = {   150,
   587,   521,   222,   224,   260,   149,   945,   194,    79,   557,
   396,    80,   197,   401,   210,   265,   778,   225,   220,   160,
   213,   154,  1293,  1294,   220,   398,  1473,   399,   208,  1473,
   162,  1474,  1397,  1479,  1474,  1482,   420,   102,   422,   160,
   321,  1111,    89,   936,  1373,   409,  1473,   127,   128,   129,
     5,  1474,   130,   127,   128,   129,  1473,  1473,   130,  1473,
  1112,  1474,  1474,  1473,  1474,  1312,  1114,   267,  1474,   268,
  1473,   507,   220,    90,  1321,  1474,   183,   184,   220,   387,
   388,  1328,   387,   388,   269,    96,   270,   185,   337,   338,
   339,   340,   341,   425,   186,  1473,  1374,   389,   342,   578,
  1474,   127,   128,   129,    91,  1113,   130,   127,   128,   129,
    92,  1115,   130,   387,   388,   314,   315,   316,    93,   201,
   317,   320,   202,   102,   325,  1557,   387,   388,    94,  1557,
   588,   345,  1557,   346,   347,   348,   517,   350,   220,   352,
   353,   378,   364,   410,   390,   387,   388,  1493,   379,   322,
   323,   380,   937,   938,   760,   542,   761,    97,   381,   161,
   543,   385,   386,   660,   387,   388,   831,   127,   128,   129,
  1105,   157,   130,  1556,   517,   653,  1560,   832,   830,   161,
   654,   985,   407,   408,    95,   411,   520,   413,   387,   388,
   416,   417,   209,  1563,   164,   784,   165,   387,   388,   772,
   271,   833,   272,  1776,  1780,  1148,  1782,  1149,   798,  1175,
  1869,   156,   226,   135,   136,   137,   138,  1871,   195,   167,
  1299,  1454,   162,   198,   214,   211,   266,   779,   221,   615,
   155,   400,   387,   388,   223,   387,   388,    98,   461,   508,
   509,   510,  1872,   465,   466,   467,   468,   469,   470,   471,
   472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
   482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
   492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
   502,   503,   504,   505,   506,   187,   189,   387,   388,    10,
   153,   622,  1099,  1494,   273,   516,   274,  1498,   168,   135,
   136,   137,   138,   522,   527,   528,   529,   530,   531,   532,
   533,   534,   535,   536,   537,   538,   539,   540,   541,  1725,
   142,   143,  1729,  1163,  1732,   548,   762,   550,   771,   157,
  1164,   763,   315,   516,  1244,   949,   158,   142,   143,   159,
   769,   561,   562,   563,   564,   885,   566,   567,   568,   569,
   570,   571,   572,  1095,   574,   575,   576,   577,   769,   275,
   517,   276,   135,   136,   137,   138,   387,   388,   589,   590,
   591,   592,  1398,   517,   163,  1557,   602,  1231,  1184,  1557,
   606,   607,  1557,   142,   143,   164,   611,   387,   388,   166,
   339,   340,   341,   583,   583,   619,   586,   586,   342,   328,
   329,   330,   331,   332,  1389,   333,   334,   335,   336,   337,
   338,   339,   340,   341,   169,   928,   971,   170,  1823,   342,
  1473,   382,  1827,   384,  1829,  1474,   387,   388,  1300,   391,
   180,   181,   387,   388,   174,    11,    12,    13,    14,    15,
    16,    17,    18,  1150,   659,  1151,   277,   959,   278,  1152,
   774,  1153,   142,   143,   599,   600,  1635,  1636,  1637,  1638,
   885,   387,   388,  1642,   387,   388,   179,   972,   135,   136,
   137,   138,  1011,  1557,   182,   387,   388,  1557,  1391,  1557,
   190,  1393,   993,   994,   995,   996,   387,   388,   767,   142,
   143,   315,  1553,   769,   327,   770,   175,   775,   196,   176,
   177,   773,   178,  1559,   463,   331,   332,   199,   333,   334,
   335,   336,   337,   338,   339,   340,   341,   526,   200,   516,
   785,   206,   342,   387,   388,   142,   143,   142,   143,   767,
   796,   262,   516,   263,   800,   801,     6,     7,   203,     8,
  1562,   807,   330,   331,   332,   204,   333,   334,   335,   336,
   337,   338,   339,   340,   341,   821,   822,   279,   191,   280,
   342,   192,   193,   205,   825,    45,    46,    47,    48,   281,
    50,   282,   207,  1738,  1739,   215,   834,  1742,    56,    57,
   517,   142,   143,   283,   217,   284,   934,   512,   887,   263,
   846,   216,   848,   849,  1138,  1139,  1456,   328,   329,   330,
   331,   332,   218,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   517,   219,  1122,  1098,  1100,   342,  1038,  1039,
  1040,  1041,  1042,   285,   258,   286,   581,   582,   333,   334,
   335,   336,   337,   338,   339,   340,   341,   142,   143,   287,
   886,   288,   342,   553,   289,   263,   290,   517,   517,   517,
   517,   328,   329,   330,   331,   332,   261,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   171,   172,   291,   173,
   292,   342,  1833,  1012,   309,   328,   329,   330,   331,   332,
   310,   333,   334,   335,   336,   337,   338,   339,   340,   341,
   293,   295,   294,   296,   929,   342,  1129,  1130,   328,   329,
   330,   331,   332,   311,   333,   334,   335,   336,   337,   338,
   339,   340,   341,   942,   142,   143,   918,   919,   342,   324,
   797,   297,   263,   298,   299,   301,   300,   302,   312,   344,
   920,   921,   922,   923,   924,   925,   926,   326,   343,   516,
   965,   303,   930,   304,   305,   933,   306,   307,   939,   308,
   349,   769,   769,   799,   963,   351,   366,  1276,   948,   365,
  1107,  1908,  1108,   769,   769,  1121,  1154,   769,   769,  1155,
  1156,   516,   769,   767,  1157,  1231,  1233,  1232,  1234,   517,
   769,   367,  1251,   997,  1231,  1231,  1399,  1540,  1778,   368,
  1779,  1051,  1791,  1793,  1792,  1794,  1795,  1818,  1796,  1819,
  1899,  1991,  1900,  1992,   370,   371,   516,   516,   516,   516,
  1104,   372,   999,  1000,  1993,   373,  1994,   820,  1005,  1995,
   374,  1996,  1963,  2122,  2124,  2123,  2125,   375,   376,  1016,
  1017,   377,   392,    99,   313,  2126,  2233,  2127,  2234,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   393,   394,  1055,  1056,  1057,  1058,  1059,
  1060,  1061,  1062,  1063,  1064,  1065,  1066,  1067,  1068,  1069,
  1070,  1071,  1072,  1073,  1074,  1075,  1076,  1077,  1078,  1079,
  1080,  2235,  1084,  2236,   328,   329,   330,   331,   332,   558,
   333,   334,   335,   336,   337,   338,   339,   340,   341,  2237,
  2239,  2238,  2240,   886,   342,  2241,   395,  2242,  1101,   404,
  1106,   328,   329,   330,   331,   332,  1110,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   405,  2243,   516,  2244,
  1123,   342,  1124,  2320,  2322,  2321,  2323,  2324,   406,  2325,
  2368,  2370,  2369,  2371,  2372,   412,  2373,   131,   132,   133,
   134,  1144,  1145,  1146,   328,   329,   330,   331,   332,   414,
   333,   334,   335,   336,   337,   338,   339,   340,   341,  2416,
  2418,  2417,  2419,   415,   342,  1167,  1168,  1169,  2420,   418,
  2421,   328,   329,   330,   331,   332,  1465,   333,   334,   335,
   336,   337,   338,   339,   340,   341,  2143,   419,   421,   423,
   424,   342,   458,   426,   427,   428,   429,   430,   431,   432,
   433,   434,   435,   436,   437,   951,   438,   139,   140,  1237,
   439,   440,   441,   141,  1203,   456,   442,  1303,   144,   443,
   444,   318,  1368,   147,   445,   319,   446,   447,   328,   329,
   330,   331,   332,   448,   333,   334,   335,   336,   337,   338,
   339,   340,   341,   449,  1378,   989,   990,   991,   342,  1267,
   450,   451,   452,   453,   454,  1274,  1238,  1275,   328,   329,
   330,   331,   332,   455,   333,   334,   335,   336,   337,   338,
   339,   340,   341,   459,  1018,  1379,   460,   462,   342,   511,
   342,   523,   514,  1027,  1256,  1257,  1258,   524,   525,  1334,
  1380,   554,   559,   565,   573,  1266,  1268,  1269,  1270,  1271,
   601,   610,   604,   605,   613,   616,   623,   624,   625,   626,
   627,   628,   629,   630,  1290,  1291,   631,   632,   633,   634,
   635,   636,   637,   638,   639,   640,  1302,   641,   642,  1305,
   643,   583,   644,   645,   586,   646,   647,   648,   649,  1315,
   650,   651,   652,   764,   655,   657,  1322,  1323,  1324,  1405,
   656,   765,   766,  1329,   776,   777,   781,  1333,   783,   815,
   786,  1335,  1336,  1337,  1338,  1339,  1340,  1341,  1342,  1343,
  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,
  1354,  1355,  1356,  1357,  1358,  1359,  1360,   787,   788,  1363,
   790,   792,   793,   802,   823,   824,   836,   840,   841,   837,
   842,  1372,   844,   328,   329,   330,   331,   332,  1376,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   845,   851,
   882,   852,   853,   342,   883,   328,   329,   330,   331,   332,
  1387,   333,   334,   335,   336,   337,   338,   339,   340,   341,
   854,   855,   856,   857,   858,   342,  1568,   859,   860,   861,
   862,  1491,   889,  1402,   890,  1403,   328,   329,   330,   331,
   332,   863,   333,   334,   335,   336,   337,   338,   339,   340,
   341,   328,   329,   330,   331,   332,   342,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   617,   891,   917,   927,
   864,   342,   865,    99,   313,   866,   867,   868,   892,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   869,   870,   932,   940,   941,  1015,   943,
   947,   980,  1246,  1460,  1247,   871,   954,   935,   872,   956,
  1463,  1464,   967,   873,   874,  1471,   968,  1477,   875,  1480,
   876,  1483,  1484,   944,   969,   877,   878,  1487,   893,   879,
   880,   881,   894,   884,   895,   896,  1496,  1277,   897,  1280,
   583,  1283,   898,   586,  1504,   899,   900,   901,   902,  1509,
   903,   904,  1512,   905,  1514,  1515,  1516,  1517,  1518,  1519,
  1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,
  1530,  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,
   782,   906,   907,   908,  1542,   909,  1634,   131,   132,   133,
   134,   910,  1550,   915,   314,   315,  1551,   328,   329,   330,
   331,   332,   911,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   328,   329,   330,   331,   332,   342,   333,   334,
   335,   336,   337,   338,   339,   340,   341,   912,   913,   914,
   916,   966,   342,   970,   513,   328,   329,   330,   331,   332,
   973,   333,   334,   335,   336,   337,   338,   339,   340,   341,
  1687,   974,   975,   976,   977,   342,   978,   139,   140,   979,
   981,   982,   983,   141,   984,   992,   998,  1001,   144,  1002,
  1019,   794,  1006,   147,   964,   795,  1008,  1013,  1014,  1618,
  1020,  1021,  1022,  1023,  1050,  1623,  1026,  1028,  1627,  1010,
  1029,  1032,  1033,  1034,  1035,  1036,  1045,  1094,  1102,  1046,
  1047,  1048,  1049,  1737,  1052,  1096,  1166,  1053,  1128,  1103,
  1109,  1117,  1650,  1651,  1652,  1653,  1654,  1655,  1656,  1657,
  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,
  1668,  1669,  1670,  1119,  1672,  1120,  1673,   328,   329,   330,
   331,   332,  1140,   333,   334,   335,   336,   337,   338,   339,
   340,   341,  1141,  1142,  1143,  1147,  1160,   342,   362,   328,
   329,   330,   331,   332,   369,   333,   334,   335,   336,   337,
   338,   339,   340,   341,  1161,  1170,  1171,  1172,  1472,   342,
  1478,  1176,  1481,  1177,  1178,  1179,  1181,  1180,  1204,   397,
  1186,  1239,  1182,  1183,   402,   403,  1185,  1187,  1772,  1188,
  1189,  1190,  1832,  1191,  1192,  1193,  1194,  1240,  1242,  1195,
  1196,  1200,  1197,  1198,  1248,  1199,  1249,  1201,  1202,  1235,
  1745,  1747,  1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,
  1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,
  1767,  1768,  1769,  1770,  1253,  1250,  1254,  1255,  1875,  1259,
  1260,  1261,  1262,   328,   329,   330,   331,   332,   384,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   328,   329,
   330,   331,   332,   342,   333,   334,   335,   336,   337,   338,
   339,   340,   341,  1263,  1264,  1265,  1278,  1281,   342,  1284,
  1286,  1907,  1287,  1288,  1289,  1295,  1292,  1304,  1864,  1307,
  1867,  1308,  1309,  1311,  1314,  1310,  1313,  1317,  1316,  1318,
  1320,  1831,  1319,  1327,  1326,  1330,  1331,  1837,  1362,  1839,
  1332,  1841,  1364,  1843,  1844,  1845,  1846,  1847,  1848,  1849,
  1850,  1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,
  1860,  1861,  1862,  1863,   328,   329,   330,   331,   332,  1365,
   333,   334,   335,   336,   337,   338,   339,   340,   341,  1366,
  1367,  1371,  1369,  1370,   342,   593,    28,    29,   594,   595,
    32,   596,    34,   803,    35,  1375,    37,    38,    39,  1931,
    41,    42,  1381,  1388,  1386,  1390,    44,  1392,  1394,  1400,
  1406,  1401,  1408,  1409,  1410,  1411,  1492,  1485,    55,  1905,
  1906,  1412,  1414,  1415,  1416,  1420,  1421,  1913,  1914,  1915,
  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,
  1926,  1927,  1928,  1929,  1930,  1422,  1424,  1425,  1427,  1455,
  1495,    59,    60,    61,   328,   329,   330,   331,   332,  1497,
   333,   334,   335,   336,   337,   338,   339,   340,   341,    71,
  1457,  1500,  1499,  1501,   342,  1502,  1503,  1505,  1507,  1959,
  1508,  1297,  1510,  1298,  1965,  1967,  1969,  1970,  1971,  1972,
  1973,  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,
  1983,  1984,  1985,  1986,  1987,   593,    28,    29,   594,   595,
    32,   596,    34,  1511,    35,  1513,    37,    38,    39,  1541,
    41,    42,  1543,  1736,  1545,  1546,    44,   768,  1549,  1554,
  1555,  1570,  1609,  1616,  1566,  1620,  1621,  2018,    55,  2020,
  1575,  2022,  1624,  2024,  2025,  2026,  2027,  2028,  2029,  2030,
  2031,  2032,  2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,
  2041,   597,  1567,  1569,  1571,  1572,  1573,  1576,  1578,  1580,
  1625,    59,    60,    61,  1628,  1582,  1611,  1629,  1630,  1633,
  1639,  1640,  1641,  1643,  1644,  1645,  1646,  1674,  1686,    71,
  1690,  1678,  2065,  2066,  2067,  2068,  2069,  2070,  2071,  2072,
  2073,  2074,  2075,  2076,  2077,  2078,  2079,  1680,  1722,  1681,
  1683,  1685,  1688,  1689,  1691,  1692,  1693,  1723,  1694,  1695,
  1724,  1696,  1718,  1721,  1726,  1730,  1733,  2101,  2103,  2105,
  2106,  2107,  2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,
  2116,  2117,  2118,  2119,  2120,  1740,   328,   329,   330,   331,
   332,  1741,   333,   334,   335,   336,   337,   338,   339,   340,
   341,  1774,  1743,  1775,  1777,  1781,   342,  1783,  2144,  1785,
  2146,  1784,  2148,   544,  2150,  2151,  2152,  2153,  2154,  2155,
  2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  1787,
  1786,  1788,  1789,  1790,  1821,  1820,   593,    28,    29,   594,
   595,    32,   596,    34,  1822,    35,  1825,    37,    38,    39,
  1826,    41,    42,  1828,  1830,  1835,  1836,    44,  2188,  2189,
  2190,  2191,  2192,  2193,  2194,  2195,  2196,  1838,  1840,    55,
  1842,  1865,  1868,  1901,  1902,  1876,  1870,  1873,  1877,  1903,
  1904,  1932,  1935,  2213,  2215,  2217,  2219,  2221,  2223,  2224,
  2225,  2226,  2227,  2228,  2229,  2230,  2231,  2232,  1936,  1937,
  1960,  1938,    59,    60,    61,  1939,  1940,  1961,  1989,  1990,
  2015,  2017,  2019,  2021,  2023,  2145,  2042,  2080,  2147,  2254,
    71,  2256,  2081,  2258,  2082,  2260,  2149,  2262,  2181,  2264,
  2255,  2266,  2267,  2268,  2269,  2270,  2271,  2272,  2273,  2274,
   952,   953,  2083,   955,  2121,   957,   958,  2165,  2197,  2198,
  2199,  2200,  2201,  2257,  2202,  2259,  2261,  2263,  2265,  2299,
  2333,  2284,  2285,  2286,  2287,  2288,  2289,  2300,  2301,  2335,
  2337,  2353,  2354,  2378,  2380,  2382,  2355,  2407,  2408,  2302,
  2303,  2304,  2305,  2306,  2307,  2309,  2311,  2313,  2409,  2423,
  2425,  2427,  2429,  1003,  1004,  2430,   888,  1007,    78,  1241,
  2326,  2327,  2328,  2329,  2330,  2331,  2332,    86,  2334,     0,
  2336,     0,   603,     0,  1024,  1025,     0,     0,     0,     0,
  1030,  1031,     0,     0,  2344,  2345,  2346,  1037,     0,  1044,
     0,     0,     0,     0,     0,     0,  2356,  2357,  2358,  2360,
  2362,  2364,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  2374,  2375,  2376,  2377,     0,  2379,     0,  2381,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  2386,
  2387,  2388,     0,     0,     0,  2392,  2393,  2394,     0,     0,
     0,  2398,  2399,  2400,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  2411,  2413,  2415,     0,     0,     0,     0,
     0,     0,  2422,     0,  2424,     0,  2426,  1116,     0,  1118,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1125,  1126,  1127,     0,     0,     0,  1131,  1132,  1133,  1134,
  1135,  1136,  1137,     0,     0,    99,   354,     0,     0,     0,
     0,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,     0,     0,
     0,     0,   355,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,    45,    46,    47,    48,    49,    50,
  1466,     0,  1467,     0,     0,     0,     0,    56,    57,     0,
     0,     0,    99,   313,     0,     0,     0,     0,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1236,     0,     0,     0,     0,     0,     0,     0,   131,
   132,   133,   134,    99,   555,     0,     0,     0,     0,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,     0,     0,  1296,
     0,     0,   808,     0,     0,     0,     0,  1306,     0,   139,
   356,     0,     0,     0,     0,   141,   131,   132,   133,   134,
   144,     0,     0,     0,     0,   147,  1325,   357,     0,     0,
     0,     0,     0,     0,    99,   313,     0,     0,     0,     0,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,  1361,     0,     0,   131,   132,   133,
   134,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   139,   140,     0,     0,
     0,   342,   141,   513,     0,     0,     0,   144,   579,     0,
   961,     0,   147,     0,   962,     0,   661,   662,   663,   664,
   665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
   675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
   685,   686,   687,   688,     0,     0,     0,   139,   140,     0,
     0,     0,     0,   141,     0,     0,     0,     0,   144,     0,
     0,     0,     0,   147,     0,   556,     0,     0,   131,   132,
   133,   134,    99,   100,   101,     0,   102,     0,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,     0,   127,   128,   129,     0,     0,   130,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,  1461,  1462,     0,     0,   342,
     0,     0,     0,     0,     0,     0,   579,     0,  1468,  1469,
     0,     0,     0,  1486,   141,     0,     0,  1490,     0,  1470,
     0,     0,     0,     0,   147,   689,   186,     0,     0,     0,
     0,     0,     0,  1506,   661,   662,   663,   664,   665,   666,
   667,   668,   669,   670,   671,   672,   673,   674,   675,   676,
   677,   678,   679,   680,   681,   682,   683,   684,   685,   686,
   687,   688,     0,     0,     0,     0,   131,   132,   133,   134,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    99,   313,   220,     0,     0,     0,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,     0,   127,   128,   129,     0,     0,   130,     0,     0,
     0,     0,   135,   136,   137,   138,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   139,   140,     0,     0,
     0,     0,   141,   142,   143,     0,     0,   144,     0,   145,
     0,   146,   147,     0,     0,     0,     0,  1612,     0,     0,
  1613,  1614,     0,     0,     0,     0,     0,     0,  1619,     0,
     0,     0,     0,  1054,     0,    99,   354,     0,     0,  1631,
  1632,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   131,   132,   133,   134,     0,
     0,     0,   355,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1675,  1676,  1677,     0,     0,
     0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     0,     0,     0,     0,     0,     0,     0,    56,    57,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,     0,     0,     0,     0,   139,   140,     0,   809,     0,
     0,   141,     0,     0,     0,     0,   144,     0,     0,     0,
     0,   147,     0,  1728,     0,     0,     0,     0,  1735,   131,
   132,   133,   134,    99,   313,     0,     0,     0,     0,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,    99,   555,     0,     0,     0,     0,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,     0,     0,     0,   228,     0,     0,   139,
   515,     0,     0,     0,     0,   141,     0,     0,     0,     0,
   144,     0,     0,     0,     0,   147,   328,   329,   330,   331,
   332,  1824,   333,   334,   335,   336,   337,   338,   339,   340,
   341,  1834,     0,     0,     0,     0,   342,     0,     0,     0,
     0,     0,     0,     0,     0,   817,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   131,   132,   133,
   134,     0,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   229,   230,   231,   131,   132,   133,
   134,   819,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,     0,     0,     0,     0,     0,     0,     0,     0,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
  1909,   252,   253,   254,   255,   256,   257,   139,   140,     0,
     0,     0,     0,   141,     0,     0,     0,     0,   144,     0,
     0,     0,     0,   147,    -7,     1,     0,   -12,   -55,     0,
     0,     0,     0,     0,     0,     0,     0,   139,   140,     0,
     0,     0,     0,   141,     0,     0,     0,     0,   144,     0,
     0,     0,     0,   147,     0,     0,     0,   -55,     0,  1962,
     0,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,     0,     0,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,     0,   -55,
   -55,     0,   593,    28,    29,   594,   595,    32,   596,    34,
     0,    35,  2016,    37,    38,    39,     0,    41,    42,     0,
     0,     0,     0,    44,     0,     0,     0,     0,     0,   -55,
   -55,   -55,   -55,     0,     0,    55,     0,   -55,     0,   -55,
     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   593,    28,    29,   594,   595,    32,   596,    34,     0,
    35,     0,    37,    38,    39,  2061,    41,    42,    59,    60,
    61,     0,    44,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
   -12,     0,     0,     0,    55,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    -7,    -7,
     0,    -7,     0,  2099,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    59,    60,    61,
     0,   593,    28,    29,   594,   595,    32,   596,    34,     0,
    35,     0,    37,    38,    39,    71,    41,    42,     0,     0,
     0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,    23,     0,   342,     0,     0,   620,     0,
     0,     0,     0,     0,   960,     0,     0,    59,    60,    61,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    24,     0,     0,    71,    25,    26,     0,    27,
    28,    29,    30,    31,    32,    33,    34,     0,    35,    36,
    37,    38,    39,    40,    41,    42,     0,   621,     0,    43,
    44,    45,    46,    47,    48,    49,    50,     0,    51,    52,
    53,    54,    55,     0,    56,    57,     0,     0,     0,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,     0,     0,     0,    58,    59,    60,    61,   988,     0,
     0,     0,    62,     0,    63,     0,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,     0,   847,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   328,   329,   330,   331,   332,  1272,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,     0,     0,   328,   329,   330,   331,
   332,  1382,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,     0,     0,
   328,   329,   330,   331,   332,  1383,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,     0,     0,   328,   329,   330,   331,   332,  1488,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,     0,     0,   328,   329,
   330,   331,   332,  1489,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   328,   329,   330,   331,   332,  1547,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,     0,     0,   328,   329,   330,   331,
   332,  1548,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,     0,     0,
   328,   329,   330,   331,   332,  1552,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,     0,     0,   328,   329,   330,   331,   332,  1558,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,     0,     0,   328,   329,
   330,   331,   332,  1561,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   328,   329,   330,   331,   332,  1564,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,     0,     0,   328,   329,   330,   331,
   332,  1565,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,     0,     0,
   328,   329,   330,   331,   332,  1615,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,     0,     0,   328,   329,   330,   331,   332,  1679,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,     0,     0,   328,   329,
   330,   331,   332,  1682,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   328,   329,   330,   331,   332,  1684,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,     0,     0,   328,   329,   330,   331,
   332,  1720,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,     0,     0,
   328,   329,   330,   331,   332,  1934,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,     0,     0,   328,   329,   330,   331,   332,  1988,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,   580,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,   614,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,   740,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,   741,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,   754,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,   755,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,   756,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,   757,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,   758,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,   759,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,   826,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,   827,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,   828,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,   950,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,   986,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,   987,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1009,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1158,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1159,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1173,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1174,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1205,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1206,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1207,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1208,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1209,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1210,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1211,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1212,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1213,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1214,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1215,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1216,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1217,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1218,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1219,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1220,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1221,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1222,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1223,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1224,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1225,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1226,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1227,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1228,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1229,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1230,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1245,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1252,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1377,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1384,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1385,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1395,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1396,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1404,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1407,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1418,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1423,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1426,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1428,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1429,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1430,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1431,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1432,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1433,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1434,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1435,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1436,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1437,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1438,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1439,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1440,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1441,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1442,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1443,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1444,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1445,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1446,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1447,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1448,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1449,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1450,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1451,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1452,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1453,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1458,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1459,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1574,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1586,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1587,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1588,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1589,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1590,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1591,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1592,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1593,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1594,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1595,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1596,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1597,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1598,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1599,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1600,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1601,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1602,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1603,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1604,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1605,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1606,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1608,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1610,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1697,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1698,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1699,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1700,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1701,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1702,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1703,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1704,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1705,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1706,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1707,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1708,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1709,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1710,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1711,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1712,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1713,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1714,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1715,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1716,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1717,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1797,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1798,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1799,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1800,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1801,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1802,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1803,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1804,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1805,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1806,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1807,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1808,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1809,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1810,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1811,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1812,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1813,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1814,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1815,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1816,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1817,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1874,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1881,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1882,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1883,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1884,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1885,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1886,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1887,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1888,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1889,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1890,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1891,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1892,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1893,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1894,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1895,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1896,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1897,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1898,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1933,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1941,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1942,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1943,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1944,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1945,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1946,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1947,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1948,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1949,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1950,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1951,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1952,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1953,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1954,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1955,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1956,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  1957,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  1958,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  1997,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  1998,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  1999,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2000,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2001,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2002,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2003,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2004,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2005,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2006,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2007,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2008,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2009,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2010,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2011,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2012,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2013,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2014,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2046,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2047,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2048,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2049,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2050,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2051,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2052,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2053,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2054,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2055,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2056,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2057,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2058,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2059,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2060,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2084,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2085,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2086,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2087,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2088,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2089,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2090,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2091,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2092,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2093,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2094,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2095,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2096,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2097,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2098,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2128,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2129,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2130,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2131,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2132,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2133,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2134,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2135,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2136,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2137,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2138,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2139,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2140,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2141,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2142,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2172,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2173,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2174,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2175,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2176,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2177,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2178,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2179,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2180,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2203,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2204,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2205,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2206,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2207,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2208,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2209,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2210,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2211,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2245,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2246,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2247,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2248,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2249,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2250,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2251,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2252,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2253,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2275,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2276,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2277,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2278,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2279,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2280,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2293,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2294,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2295,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2296,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2297,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2298,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2314,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2315,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2316,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2317,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2318,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2319,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2338,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2339,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2340,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2350,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2351,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2352,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2365,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2366,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2367,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2383,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2384,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2385,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2389,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   328,   329,   330,   331,   332,  2390,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   328,   329,   330,   331,   332,  2391,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   328,   329,   330,   331,   332,  2395,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   328,   329,   330,   331,
   332,  2396,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   328,   329,
   330,   331,   332,  2397,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   519,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   658,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   719,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   721,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   723,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   725,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   727,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   729,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   731,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   733,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   735,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   737,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   739,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   743,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   745,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   747,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   749,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   751,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   753,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   829,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   835,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   838,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,   839,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,   931,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,  1086,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,  1088,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,  1090,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,  1092,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
     0,     0,  1093,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,     0,     0,  1243,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   545,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,   546,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   547,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,   549,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   551,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,   552,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   560,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,   608,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   609,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,   612,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   618,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,   718,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   720,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,   722,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   724,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,   726,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   728,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,   730,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   732,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,   734,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   736,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,   738,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   742,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,   744,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   746,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,   748,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   750,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,   752,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   789,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,   791,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   804,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,   805,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,   806,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,   810,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,   811,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,   812,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,   813,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,   814,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,   816,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,   818,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
   843,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,   850,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,  1085,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,  1087,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,  1089,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,  1091,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,  1097,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,  1162,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,  1273,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,  1301,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
  1413,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,  1417,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,  1419,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,  1544,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,  1577,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,  1579,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,  1581,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,  1583,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,  1584,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,  1585,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
  1607,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,  1719,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,  1878,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,  1879,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,  1880,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,  2043,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,  2044,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,  2045,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,  2166,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,  2167,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
  2168,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,  2169,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,  2170,   328,   329,   330,
   331,   332,     0,   333,   334,   335,   336,   337,   338,   339,
   340,   341,     0,     0,     0,     0,     0,   342,     0,  2171,
   328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
   337,   338,   339,   340,   341,     0,     0,     0,     0,     0,
   342,     0,  2281,   328,   329,   330,   331,   332,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
     0,     0,     0,   342,     0,  2282,   328,   329,   330,   331,
   332,     0,   333,   334,   335,   336,   337,   338,   339,   340,
   341,     0,     0,     0,     0,     0,   342,     0,  2283,   328,
   329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
   338,   339,   340,   341,     0,     0,     0,     0,     0,   342,
     0,  2341,   328,   329,   330,   331,   332,     0,   333,   334,
   335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
     0,     0,   342,     0,  2342,   328,   329,   330,   331,   332,
     0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     0,     0,     0,     0,     0,   342,     0,  2343,   328,   329,
   330,   331,   332,     0,   333,   334,   335,   336,   337,   338,
   339,   340,   341,     0,     0,     0,     0,     0,   342,     0,
  2401,   328,   329,   330,   331,   332,     0,   333,   334,   335,
   336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     0,   342,     0,  2402,   328,   329,   330,   331,   332,     0,
   333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     0,     0,     0,     0,   342,     0,  2403
};

static const short yycheck[] = {    23,
   390,   321,    72,    73,    97,    23,   779,     4,     4,   357,
   195,     4,     4,   198,     4,     4,     4,     3,     5,    68,
     4,     6,  1163,  1164,     5,     4,    69,     6,    44,    69,
    68,    74,  1292,  1392,    74,  1394,   221,     7,   223,    68,
     4,     6,   178,     4,     6,   110,    69,    34,    35,    36,
     6,    74,    39,    34,    35,    36,    69,    69,    39,    69,
     6,    74,    74,    69,    74,  1180,     6,   208,    74,   210,
    69,     4,     5,     7,  1189,    74,   197,   198,     5,   197,
   198,  1196,   197,   198,   208,   208,   210,   208,   197,   198,
   199,   200,   201,   227,   215,    69,     6,   215,   207,   214,
    74,    34,    35,    36,     6,    51,    39,    34,    35,    36,
     6,    51,    39,   197,   198,   139,   140,   141,     6,    40,
   144,   145,    43,     7,   148,  1475,   197,   198,     6,  1479,
   214,   155,  1482,   157,   158,   159,   319,   161,     5,   163,
   164,   208,   166,   208,   215,   197,   198,  1407,   215,   113,
   114,   208,   113,   114,   210,   209,   212,   208,   215,   208,
   214,   185,   186,   215,   197,   198,   215,    34,    35,    36,
   943,   208,    39,   216,   357,   209,   216,   215,   215,   208,
   214,   214,   206,   207,     6,   209,     7,   211,   197,   198,
   214,   215,   208,   216,   208,   543,    48,   197,   198,   519,
   208,   215,   210,   216,   216,   214,   216,   216,   556,   209,
   216,     6,   198,   183,   184,   185,   186,   216,   215,    44,
     8,  1362,    68,   215,   208,   215,   215,   215,   215,   414,
   215,   210,   197,   198,   215,   197,   198,   208,   262,   309,
   310,   311,   216,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,    46,    47,   197,   198,     3,
   208,   425,     7,  1408,   208,   319,   210,  1412,    44,   183,
   184,   185,   186,   321,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   342,  1678,
   204,   205,  1681,   208,  1683,   349,   209,   351,   212,   208,
   215,   214,   356,   357,  1107,   209,   208,   204,   205,   208,
   214,   365,   366,   367,   368,   212,   370,   371,   372,   373,
   374,   375,   376,   209,   378,   379,   380,   381,   214,   208,
   543,   210,   183,   184,   185,   186,   197,   198,   392,   393,
   394,   395,   209,   556,   208,  1725,   400,   214,   209,  1729,
   404,   405,  1732,   204,   205,   208,   410,   197,   198,   208,
   199,   200,   201,   389,   390,   419,   389,   390,   207,   187,
   188,   189,   190,   191,   214,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    44,   763,     6,    44,  1777,   207,
    69,   182,  1781,   184,  1783,    74,   197,   198,   216,   190,
    43,    44,   197,   198,    46,   149,   150,   151,   152,   153,
   154,   155,   156,   214,   462,   216,   208,   795,   210,   214,
   520,   216,   204,   205,     6,     7,  1571,  1572,  1573,  1574,
   212,   197,   198,  1578,   197,   198,   208,    57,   183,   184,
   185,   186,     8,  1823,   215,   197,   198,  1827,   214,  1829,
   215,   214,   830,   831,   832,   833,   197,   198,   512,   204,
   205,   515,   214,   214,     6,   216,    40,   521,    44,    43,
    44,   519,    46,   214,   265,   190,   191,     6,   193,   194,
   195,   196,   197,   198,   199,   200,   201,     6,     6,   543,
   544,   208,   207,   197,   198,   204,   205,   204,   205,   553,
   554,   210,   556,   212,   558,   559,   174,   175,     4,   177,
   214,   565,   189,   190,   191,     4,   193,   194,   195,   196,
   197,   198,   199,   200,   201,   579,   580,   208,    40,   210,
   207,    43,    44,     4,   588,    62,    63,    64,    65,   208,
    67,   210,   208,  1688,  1689,   208,   600,  1692,    75,    76,
   763,   204,   205,   208,     4,   210,   769,   210,   658,   212,
   614,     6,   616,   617,     6,     7,  1369,   187,   188,   189,
   190,   191,     4,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   795,    44,   962,   935,   936,   207,   134,   135,
   136,   137,   138,   208,   208,   210,   387,   388,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   204,   205,   208,
   658,   210,   207,   210,   208,   212,   210,   830,   831,   832,
   833,   187,   188,   189,   190,   191,     5,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    43,    44,   208,    46,
   210,   207,  1787,   209,   208,   187,   188,   189,   190,   191,
   208,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   208,   208,   210,   210,   764,   207,    58,    59,   187,   188,
   189,   190,   191,   208,   193,   194,   195,   196,   197,   198,
   199,   200,   201,     6,   204,   205,   740,   741,   207,     4,
   210,   208,   212,   210,   208,   208,   210,   210,   208,     5,
   754,   755,   756,   757,   758,   759,   760,     6,     6,   763,
     6,   208,   766,   210,   208,   769,   210,   208,   772,   210,
   208,   214,   214,   216,   216,   208,   208,  1147,   782,   215,
   214,  1876,   216,   214,   214,   216,   216,   214,   214,   216,
   216,   795,   214,   797,   216,   214,   214,   216,   216,   962,
   214,   208,   216,     6,   214,   214,   216,   216,   214,   208,
   216,   884,   214,   214,   216,   216,   214,   214,   216,   216,
   214,   214,   216,   216,   215,   215,   830,   831,   832,   833,
     6,   208,   836,   837,   214,   208,   216,   578,   842,   214,
   208,   216,  1937,   214,   214,   216,   216,   208,   208,   853,
   854,     4,   215,     3,     4,   214,   214,   216,   216,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   215,   215,   889,   890,   891,   892,   893,
   894,   895,   896,   897,   898,   899,   900,   901,   902,   903,
   904,   905,   906,   907,   908,   909,   910,   911,   912,   913,
   914,   214,   916,   216,   187,   188,   189,   190,   191,     8,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   214,
   214,   216,   216,   931,   207,   214,   210,   216,   936,   210,
   944,   187,   188,   189,   190,   191,   950,   193,   194,   195,
   196,   197,   198,   199,   200,   201,   210,   214,   962,   216,
   964,   207,   966,   214,   214,   216,   216,   214,     6,   216,
   214,   214,   216,   216,   214,   212,   216,   127,   128,   129,
   130,   985,   986,   987,   187,   188,   189,   190,   191,   215,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   214,
   214,   216,   216,   116,   207,  1009,  1010,  1011,   214,     6,
   216,   187,   188,   189,   190,   191,  1386,   193,   194,   195,
   196,   197,   198,   199,   200,   201,  2121,   208,     6,     6,
     3,   207,   214,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   786,   208,   197,   198,  1099,
   208,   208,   208,   203,  1052,     5,   208,  1171,   208,   208,
   208,   211,     6,   213,   208,   215,   208,   208,   187,   188,
   189,   190,   191,   208,   193,   194,   195,   196,   197,   198,
   199,   200,   201,   208,     6,   826,   827,   828,   207,  1139,
   208,   208,   208,   208,   208,   214,  1100,   216,   187,   188,
   189,   190,   191,   208,   193,   194,   195,   196,   197,   198,
   199,   200,   201,   209,   855,     6,   214,     4,   207,     5,
   207,   212,     7,   864,  1128,  1129,  1130,     7,   210,  1202,
     6,   215,     7,     7,   209,  1139,  1140,  1141,  1142,  1143,
     6,   111,     7,     7,   113,   215,     5,     5,     5,     5,
     5,     5,     5,     5,  1158,  1159,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,  1170,     5,     5,  1173,
     5,  1147,     5,     5,  1147,   167,     5,     5,     5,  1183,
     5,     3,     5,   214,     5,     5,  1190,  1191,  1192,  1303,
     6,   209,   214,  1197,     6,     4,   211,  1201,     6,   212,
     7,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
  1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  1222,  1223,
  1224,  1225,  1226,  1227,  1228,  1229,  1230,     7,     7,  1233,
     7,     7,     7,     7,   216,   216,   215,     7,     7,   215,
   208,  1245,     7,   187,   188,   189,   190,   191,  1252,   193,
   194,   195,   196,   197,   198,   199,   200,   201,   212,   179,
     5,   214,   214,   207,   209,   187,   188,   189,   190,   191,
  1274,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   214,   214,   214,   214,   214,   207,     6,   214,   214,   214,
   214,  1405,   208,  1297,   208,  1299,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   187,   188,   189,   190,   191,   207,   193,   194,   195,
   196,   197,   198,   199,   200,   201,     8,   208,     6,     4,
   214,   207,   214,     3,     4,   214,   214,   214,   208,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   214,   214,     6,     6,     6,     3,     7,
     6,     4,  1113,  1377,  1115,   214,     7,   211,   214,     7,
  1384,  1385,     7,   214,   214,  1389,     7,  1391,   214,  1393,
   214,  1395,  1396,   210,     7,   214,   214,  1401,   208,   214,
   214,   214,   208,   214,   208,   208,  1410,  1148,   208,  1150,
  1386,  1152,   208,  1386,  1418,   208,   208,   208,   208,  1423,
   208,   208,  1426,   208,  1428,  1429,  1430,  1431,  1432,  1433,
  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,  1443,
  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,  1453,
     8,   208,   208,   208,  1458,   208,  1570,   127,   128,   129,
   130,   208,  1466,   215,  1468,  1469,  1470,   187,   188,   189,
   190,   191,   208,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   187,   188,   189,   190,   191,   207,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   208,   208,   208,
   215,   215,   207,     7,   209,   187,   188,   189,   190,   191,
     7,   193,   194,   195,   196,   197,   198,   199,   200,   201,
  1634,     7,     7,     7,     7,   207,     7,   197,   198,     7,
     7,     7,     7,   203,     7,     6,     6,     6,   208,     6,
     3,   211,     7,   213,     8,   215,     4,     7,   180,  1553,
     3,   199,     3,     3,     6,  1559,     3,     3,  1562,     8,
     3,     3,     3,     3,     3,     3,     3,   209,   212,     5,
     5,     3,     3,  1687,     4,   209,   112,     6,   208,     7,
     6,     6,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,
  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,
  1604,  1605,  1606,     6,  1608,     6,  1610,   187,   188,   189,
   190,   191,   215,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   215,   215,   215,   215,     6,   207,   165,   187,
   188,   189,   190,   191,   171,   193,   194,   195,   196,   197,
   198,   199,   200,   201,     6,   215,   176,   214,  1389,   207,
  1391,   214,  1393,   209,   214,   209,   209,   214,     6,   196,
   209,     6,   214,   214,   201,   202,   214,   209,  1718,   214,
   214,   214,  1786,   214,   214,   214,   209,     4,     6,   214,
   214,   209,   214,   214,     6,   214,     6,   214,   214,   212,
  1694,  1695,  1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,
  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
  1714,  1715,  1716,  1717,     6,   211,     6,     6,  1832,     6,
     6,     6,     6,   187,   188,   189,   190,   191,  1469,   193,
   194,   195,   196,   197,   198,   199,   200,   201,   187,   188,
   189,   190,   191,   207,   193,   194,   195,   196,   197,   198,
   199,   200,   201,     6,     6,     6,     6,     6,   207,     6,
     6,  1875,     6,     6,     6,   112,     7,     3,  1818,     6,
  1820,     3,     6,     6,     3,   199,     6,     3,     6,     6,
     3,  1785,     6,     3,     6,     3,     3,  1791,   215,  1793,
     6,  1795,     6,  1797,  1798,  1799,  1800,  1801,  1802,  1803,
  1804,  1805,  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,
  1814,  1815,  1816,  1817,   187,   188,   189,   190,   191,     4,
   193,   194,   195,   196,   197,   198,   199,   200,   201,     6,
     6,   212,     7,     6,   207,    40,    41,    42,    43,    44,
    45,    46,    47,   216,    49,   211,    51,    52,    53,  1899,
    55,    56,     6,   216,   215,   215,    61,   215,   215,   215,
   209,   109,   214,   214,   214,   209,     6,   112,    73,  1873,
  1874,   214,   214,   209,   209,   214,   209,  1881,  1882,  1883,
  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,   209,   214,   209,   214,   209,
     3,   106,   107,   108,   187,   188,   189,   190,   191,     6,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   124,
   114,     3,     6,     6,   207,     6,     6,     6,     6,  1933,
     6,   214,     3,   216,  1938,  1939,  1940,  1941,  1942,  1943,
  1944,  1945,  1946,  1947,  1948,  1949,  1950,  1951,  1952,  1953,
  1954,  1955,  1956,  1957,  1958,    40,    41,    42,    43,    44,
    45,    46,    47,     6,    49,     5,    51,    52,    53,     6,
    55,    56,     5,   109,     6,     6,    61,   514,   216,     6,
   215,   176,     6,     6,   215,     6,     6,  1991,    73,  1993,
   209,  1995,     6,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,
  2014,   216,   214,   216,   214,   214,   214,   209,   214,   209,
     6,   106,   107,   108,     6,   214,   214,     6,     6,     6,
     6,     6,     6,     6,     6,     6,     5,     5,   216,   124,
   209,   215,  2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,
  2054,  2055,  2056,  2057,  2058,  2059,  2060,   214,     6,   215,
   215,   214,   214,   214,   209,   214,   214,     6,   215,   215,
     6,   215,   215,   214,     6,     6,     6,  2081,  2082,  2083,
  2084,  2085,  2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
  2094,  2095,  2096,  2097,  2098,     6,   187,   188,   189,   190,
   191,     6,   193,   194,   195,   196,   197,   198,   199,   200,
   201,     6,     5,     5,   215,   215,   207,   215,  2122,   215,
  2124,   216,  2126,   214,  2128,  2129,  2130,  2131,  2132,  2133,
  2134,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,   214,
   176,   214,   209,   209,   216,   215,    40,    41,    42,    43,
    44,    45,    46,    47,     6,    49,     6,    51,    52,    53,
     6,    55,    56,     6,   109,     6,     6,    61,  2172,  2173,
  2174,  2175,  2176,  2177,  2178,  2179,  2180,     6,     6,    73,
     6,     6,     6,     6,     6,   214,   216,   215,   214,     6,
     6,     6,   181,  2197,  2198,  2199,  2200,  2201,  2202,  2203,
  2204,  2205,  2206,  2207,  2208,  2209,  2210,  2211,   214,   214,
     6,   215,   106,   107,   108,   215,   215,   182,   214,   209,
     6,     6,     6,     6,     6,     6,   214,   214,     6,  2233,
   124,  2235,   215,  2237,   215,  2239,     6,  2241,     6,  2243,
     6,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,
   787,   788,   215,   790,   214,   792,   793,   209,   215,   215,
   215,   215,   215,     6,   215,     6,     6,     6,     6,   215,
     6,  2275,  2276,  2277,  2278,  2279,  2280,   215,   215,     6,
     6,   215,   215,     6,     6,     6,   215,   215,   215,  2293,
  2294,  2295,  2296,  2297,  2298,  2299,  2300,  2301,   215,     6,
     6,     6,     0,   840,   841,     0,   660,   844,     4,  1103,
  2314,  2315,  2316,  2317,  2318,  2319,  2320,     4,  2322,    -1,
  2324,    -1,   216,    -1,   861,   862,    -1,    -1,    -1,    -1,
   867,   868,    -1,    -1,  2338,  2339,  2340,   874,    -1,   876,
    -1,    -1,    -1,    -1,    -1,    -1,  2350,  2351,  2352,  2353,
  2354,  2355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  2365,  2366,  2367,  2368,    -1,  2370,    -1,  2372,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2383,
  2384,  2385,    -1,    -1,    -1,  2389,  2390,  2391,    -1,    -1,
    -1,  2395,  2396,  2397,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  2407,  2408,  2409,    -1,    -1,    -1,    -1,
    -1,    -1,  2416,    -1,  2418,    -1,  2420,   954,    -1,   956,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   967,   968,   969,    -1,    -1,    -1,   973,   974,   975,   976,
   977,   978,   979,    -1,    -1,     3,     4,    -1,    -1,    -1,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    40,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    62,    63,    64,    65,    66,    67,
   214,    -1,   216,    -1,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1098,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,
   128,   129,   130,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,  1166,
    -1,    -1,   216,    -1,    -1,    -1,    -1,  1174,    -1,   197,
   198,    -1,    -1,    -1,    -1,   203,   127,   128,   129,   130,
   208,    -1,    -1,    -1,    -1,   213,  1193,   215,    -1,    -1,
    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,  1231,    -1,    -1,   127,   128,   129,
   130,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,   197,   198,    -1,    -1,
    -1,   207,   203,   209,    -1,    -1,    -1,   208,   214,    -1,
   211,    -1,   213,    -1,   215,    -1,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,    -1,    -1,   197,   198,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,    -1,
    -1,    -1,    -1,   213,    -1,   215,    -1,    -1,   127,   128,
   129,   130,     3,     4,     5,    -1,     7,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    34,    35,    36,    -1,    -1,    39,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,  1382,  1383,    -1,    -1,   207,
    -1,    -1,    -1,    -1,    -1,    -1,   214,    -1,   197,   198,
    -1,    -1,    -1,  1400,   203,    -1,    -1,  1404,    -1,   208,
    -1,    -1,    -1,    -1,   213,   216,   215,    -1,    -1,    -1,
    -1,    -1,    -1,  1420,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,    -1,    -1,    -1,   127,   128,   129,   130,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,    34,    35,    36,    -1,    -1,    39,    -1,    -1,
    -1,    -1,   183,   184,   185,   186,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   197,   198,    -1,    -1,
    -1,    -1,   203,   204,   205,    -1,    -1,   208,    -1,   210,
    -1,   212,   213,    -1,    -1,    -1,    -1,  1544,    -1,    -1,
  1547,  1548,    -1,    -1,    -1,    -1,    -1,    -1,  1555,    -1,
    -1,    -1,    -1,   216,    -1,     3,     4,    -1,    -1,  1566,
  1567,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   127,   128,   129,   130,    -1,
    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1612,  1613,  1614,    -1,    -1,
    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,    -1,    -1,    -1,    -1,   197,   198,    -1,   216,    -1,
    -1,   203,    -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,
    -1,   213,    -1,  1680,    -1,    -1,    -1,    -1,  1685,   127,
   128,   129,   130,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    -1,    -1,    43,    -1,    -1,   197,
   198,    -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,
   208,    -1,    -1,    -1,    -1,   213,   187,   188,   189,   190,
   191,  1778,   193,   194,   195,   196,   197,   198,   199,   200,
   201,  1788,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,   129,
   130,    -1,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   131,   132,   133,   127,   128,   129,
   130,   216,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
  1877,   168,   169,   170,   171,   172,   173,   197,   198,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,    -1,
    -1,    -1,    -1,   213,     0,     1,    -1,     3,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,   198,    -1,
    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,    -1,
    -1,    -1,    -1,   213,    -1,    -1,    -1,    33,    -1,  1936,
    -1,    37,    38,    -1,    40,    41,    42,    43,    44,    45,
    46,    47,    -1,    49,    50,    51,    52,    53,    54,    55,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
    76,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
    -1,    49,  1989,    51,    52,    53,    -1,    55,    56,    -1,
    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,   105,
   106,   107,   108,    -1,    -1,    73,    -1,   113,    -1,   115,
    -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
    49,    -1,    51,    52,    53,  2042,    55,    56,   106,   107,
   108,    -1,    61,   149,   150,   151,   152,   153,   154,   155,
   156,    -1,    -1,    -1,    73,    -1,   124,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,
    -1,   177,    -1,  2080,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
    -1,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
    49,    -1,    51,    52,    53,   124,    55,    56,    -1,    -1,
    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,     4,    -1,   207,    -1,    -1,   216,    -1,
    -1,    -1,    -1,    -1,   216,    -1,    -1,   106,   107,   108,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    33,    -1,    -1,   124,    37,    38,    -1,    40,
    41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
    51,    52,    53,    54,    55,    56,    -1,   216,    -1,    60,
    61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
    71,    72,    73,    -1,    75,    76,    -1,    -1,    -1,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,    -1,    -1,    -1,   105,   106,   107,   108,   216,    -1,
    -1,    -1,   113,    -1,   115,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,    -1,   216,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   187,   188,   189,   190,   191,   216,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,    -1,    -1,   187,   188,   189,   190,
   191,   216,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,
   187,   188,   189,   190,   191,   216,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   187,   188,   189,   190,   191,   216,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,   188,
   189,   190,   191,   216,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   187,   188,   189,   190,   191,   216,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,    -1,    -1,   187,   188,   189,   190,
   191,   216,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,
   187,   188,   189,   190,   191,   216,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   187,   188,   189,   190,   191,   216,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,   188,
   189,   190,   191,   216,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   187,   188,   189,   190,   191,   216,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,    -1,    -1,   187,   188,   189,   190,
   191,   216,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,
   187,   188,   189,   190,   191,   216,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   187,   188,   189,   190,   191,   216,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,   187,   188,
   189,   190,   191,   216,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   187,   188,   189,   190,   191,   216,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,    -1,    -1,   187,   188,   189,   190,
   191,   216,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,
   187,   188,   189,   190,   191,   216,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,    -1,    -1,   187,   188,   189,   190,   191,   216,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   187,   188,   189,   190,   191,   214,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   187,   188,   189,   190,   191,   214,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   187,   188,   189,   190,   191,   214,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   187,   188,   189,   190,
   191,   214,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   187,   188,
   189,   190,   191,   214,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
    -1,    -1,   211,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,    -1,    -1,   211,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,
   190,   191,    -1,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
   187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,
   207,    -1,   209,   187,   188,   189,   190,   191,    -1,   193,
   194,   195,   196,   197,   198,   199,   200,   201,    -1,    -1,
    -1,    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,
   191,    -1,   193,   194,   195,   196,   197,   198,   199,   200,
   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,
   188,   189,   190,   191,    -1,   193,   194,   195,   196,   197,
   198,   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,
    -1,   209,   187,   188,   189,   190,   191,    -1,   193,   194,
   195,   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,
    -1,    -1,   207,    -1,   209,   187,   188,   189,   190,   191,
    -1,   193,   194,   195,   196,   197,   198,   199,   200,   201,
    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,   187,   188,
   189,   190,   191,    -1,   193,   194,   195,   196,   197,   198,
   199,   200,   201,    -1,    -1,    -1,    -1,    -1,   207,    -1,
   209,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
   196,   197,   198,   199,   200,   201,    -1,    -1,    -1,    -1,
    -1,   207,    -1,   209,   187,   188,   189,   190,   191,    -1,
   193,   194,   195,   196,   197,   198,   199,   200,   201,    -1,
    -1,    -1,    -1,    -1,   207,    -1,   209
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 166 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 172 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 173 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 183 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STLStartSolid();
      return 1;
    ;
    break;}
case 10:
#line 196 "Gmsh.y"
{
      STLAddFacet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d,
		  yyvsp[-18].d, yyvsp[-17].d, yyvsp[-16].d);
      return 1;
    ;
    break;}
case 11:
#line 202 "Gmsh.y"
{
      STLEndSolid();
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 223 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 228 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 233 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 244 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 247 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 251 "Gmsh.y"
{
    ;
    break;}
case 25:
#line 257 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 263 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 270 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 276 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 280 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 284 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 291 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 295 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 300 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 304 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 312 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 316 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 320 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 324 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 328 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 340 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 344 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 348 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 352 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 356 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 375 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 397 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 398 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 402 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 411 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 72:
#line 416 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 434 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 74:
#line 441 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 75:
#line 451 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 104:
#line 489 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 105:
#line 491 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 106:
#line 496 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 107:
#line 501 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 108:
#line 508 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 109:
#line 510 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 110:
#line 515 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 111:
#line 521 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3) ViewErrorFlags[1]++;
      View->NbVP++;
    ;
    break;}
case 112:
#line 529 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 113:
#line 531 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 114:
#line 536 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 115:
#line 542 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9) ViewErrorFlags[2]++;
      View->NbTP++;
    ;
    break;}
case 116:
#line 550 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 117:
#line 552 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 118:
#line 558 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 119:
#line 565 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2) ViewErrorFlags[3]++;
      View->NbSL++;
    ;
    break;}
case 120:
#line 573 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 121:
#line 575 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 122:
#line 581 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 123:
#line 588 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6) ViewErrorFlags[4]++;
      View->NbVL++;
    ;
    break;}
case 124:
#line 596 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 125:
#line 598 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 126:
#line 604 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 127:
#line 611 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18) ViewErrorFlags[5]++;
      View->NbTL++;
    ;
    break;}
case 128:
#line 619 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 129:
#line 621 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 130:
#line 628 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 131:
#line 638 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3) ViewErrorFlags[6]++;
      View->NbST++;
    ;
    break;}
case 132:
#line 646 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 133:
#line 648 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 134:
#line 655 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 135:
#line 665 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9) ViewErrorFlags[7]++;
      View->NbVT++;
    ;
    break;}
case 136:
#line 673 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 137:
#line 675 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 138:
#line 682 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 139:
#line 692 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27) ViewErrorFlags[8]++;
      View->NbTT++;
    ;
    break;}
case 140:
#line 700 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 141:
#line 702 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 142:
#line 710 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 143:
#line 720 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4) ViewErrorFlags[9]++;
      View->NbSQ++;
    ;
    break;}
case 144:
#line 728 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 145:
#line 730 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 146:
#line 738 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 147:
#line 748 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12) ViewErrorFlags[10]++;
      View->NbVQ++;
    ;
    break;}
case 148:
#line 756 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 149:
#line 758 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 150:
#line 766 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 151:
#line 776 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36) ViewErrorFlags[11]++;
      View->NbTQ++;
    ;
    break;}
case 152:
#line 784 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 153:
#line 786 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 154:
#line 794 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 155:
#line 804 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4) ViewErrorFlags[12]++;
      View->NbSS++;
    ;
    break;}
case 156:
#line 812 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 157:
#line 814 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 158:
#line 822 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 159:
#line 832 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12) ViewErrorFlags[13]++;
      View->NbVS++;
    ;
    break;}
case 160:
#line 840 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 161:
#line 842 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 162:
#line 850 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 163:
#line 860 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36) ViewErrorFlags[14]++;
      View->NbTS++;
    ;
    break;}
case 164:
#line 868 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 165:
#line 870 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 166:
#line 882 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 167:
#line 898 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8) ViewErrorFlags[15]++;
      View->NbSH++;
    ;
    break;}
case 168:
#line 906 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 169:
#line 908 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 170:
#line 920 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 171:
#line 936 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24) ViewErrorFlags[16]++;
      View->NbVH++;
    ;
    break;}
case 172:
#line 944 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 173:
#line 946 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 174:
#line 958 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 175:
#line 974 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72) ViewErrorFlags[17]++;
      View->NbTH++;
    ;
    break;}
case 176:
#line 982 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 177:
#line 984 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 178:
#line 994 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 179:
#line 1007 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6) ViewErrorFlags[18]++;
      View->NbSI++;
    ;
    break;}
case 180:
#line 1015 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 181:
#line 1017 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 182:
#line 1027 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 183:
#line 1040 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18) ViewErrorFlags[19]++;
      View->NbVI++;
    ;
    break;}
case 184:
#line 1048 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 185:
#line 1050 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 186:
#line 1060 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 187:
#line 1073 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54) ViewErrorFlags[20]++;
      View->NbTI++;
    ;
    break;}
case 188:
#line 1081 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 189:
#line 1083 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 190:
#line 1092 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 191:
#line 1105 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5) ViewErrorFlags[21]++;
      View->NbSY++;
    ;
    break;}
case 192:
#line 1113 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 193:
#line 1115 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 194:
#line 1124 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 195:
#line 1137 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15) ViewErrorFlags[22]++;
      View->NbVY++;
    ;
    break;}
case 196:
#line 1145 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 197:
#line 1147 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 198:
#line 1156 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 199:
#line 1169 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45) ViewErrorFlags[23]++;
      View->NbTY++;
    ;
    break;}
case 200:
#line 1177 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1182 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 202:
#line 1190 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 203:
#line 1197 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 204:
#line 1204 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 205:
#line 1209 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 206:
#line 1217 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 207:
#line 1224 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 208:
#line 1232 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 209:
#line 1239 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 210:
#line 1241 "Gmsh.y"
{ List_Add(View->Time, &yyvsp[0].d); ;
    break;}
case 211:
#line 1246 "Gmsh.y"
{
    ;
    break;}
case 212:
#line 1253 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 213:
#line 1254 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 214:
#line 1255 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 215:
#line 1256 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 216:
#line 1257 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 217:
#line 1261 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 218:
#line 1262 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 219:
#line 1270 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 220:
#line 1301 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 221:
#line 1340 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 222:
#line 1394 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 223:
#line 1411 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 224:
#line 1422 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 225:
#line 1441 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 226:
#line 1455 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 227:
#line 1472 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 228:
#line 1498 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 229:
#line 1525 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 230:
#line 1539 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 231:
#line 1556 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 232:
#line 1570 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 233:
#line 1587 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 234:
#line 1607 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1630 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 236:
#line 1640 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 237:
#line 1659 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1675 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1691 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 240:
#line 1710 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 241:
#line 1729 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1747 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1765 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1783 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1809 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1827 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 247:
#line 1854 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1873 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 1897 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 1921 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 1947 "Gmsh.y"
{
      // define a new line
      int num = (int)yyvsp[-7].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_DISCRETE, 1, NULL, NULL, -1, -1, 0, 1);
	c->theSegmRep = new SEGM_rep((int)yyvsp[-3].d, yyvsp[-1].l);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 252:
#line 1964 "Gmsh.y"
{
      // add a poly rep to an existing line
      int num = (int)yyvsp[-7].d, type = 0;
      Curve *c = FindCurve(num, THEM);
      if(!c) {
	yymsg(GERROR, "Unknown curve %d", num);
	List_Delete(yyvsp[-1].l);
      }
      else{
	c->theSegmRep = new SEGM_rep((int)yyvsp[-3].d, yyvsp[-1].l);
	type = c->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 253:
#line 1980 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 1997 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 255:
#line 2015 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2034 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2053 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2092 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2118 "Gmsh.y"
{
      // define a new surface
      int num = (int)yyvsp[-10].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	s->Support = s;
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      yyval.s.Type = MSH_SURF_DISCRETE;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2138 "Gmsh.y"
{
      // add a poly rep to an existing surface
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 261:
#line 2157 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
	List_Delete(yyvsp[-2].l);
	List_Delete(yyvsp[-1].l);
      }
      else{
	s->thePolyRep = new POLY_rep((int)yyvsp[-6].d, (int)yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 262:
#line 2175 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 263:
#line 2194 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 264:
#line 2211 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 265:
#line 2227 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 266:
#line 2247 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 267:
#line 2264 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 268:
#line 2281 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 269:
#line 2302 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 270:
#line 2307 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 271:
#line 2312 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 272:
#line 2317 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 273:
#line 2324 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 274:
#line 2325 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 275:
#line 2326 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 276:
#line 2331 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 277:
#line 2335 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 278:
#line 2339 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 279:
#line 2355 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 280:
#line 2371 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 281:
#line 2387 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 282:
#line 2408 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 283:
#line 2422 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 284:
#line 2428 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 285:
#line 2434 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 286:
#line 2446 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 287:
#line 2455 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 288:
#line 2465 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 289:
#line 2475 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 290:
#line 2494 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 291:
#line 2508 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 292:
#line 2516 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 293:
#line 2522 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 294:
#line 2533 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 295:
#line 2547 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 296:
#line 2591 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 297:
#line 2606 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 298:
#line 2622 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 299:
#line 2632 "Gmsh.y"
{
      // for backward compatibility
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 300:
#line 2643 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 301:
#line 2647 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 302:
#line 2651 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 303:
#line 2655 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 304:
#line 2668 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 305:
#line 2683 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 306:
#line 2699 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 307:
#line 2725 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 308:
#line 2752 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 309:
#line 2784 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 310:
#line 2791 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 311:
#line 2796 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 312:
#line 2802 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 313:
#line 2806 "Gmsh.y"
{
    ;
    break;}
case 314:
#line 2817 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 315:
#line 2833 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 316:
#line 2849 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 317:
#line 2865 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 318:
#line 2870 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 319:
#line 2886 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 320:
#line 2891 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 321:
#line 2907 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 322:
#line 2912 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 323:
#line 2930 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 324:
#line 2953 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 325:
#line 2976 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 326:
#line 2999 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 327:
#line 3004 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 328:
#line 3027 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 329:
#line 3032 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 330:
#line 3055 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 331:
#line 3060 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 332:
#line 3086 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 333:
#line 3109 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 334:
#line 3132 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 335:
#line 3155 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 336:
#line 3160 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 337:
#line 3183 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 338:
#line 3189 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 339:
#line 3212 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 340:
#line 3218 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 341:
#line 3244 "Gmsh.y"
{
    ;
    break;}
case 342:
#line 3247 "Gmsh.y"
{
    ;
    break;}
case 343:
#line 3253 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 344:
#line 3279 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 345:
#line 3303 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 346:
#line 3312 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 347:
#line 3330 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 348:
#line 3348 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 349:
#line 3366 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 350:
#line 3393 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 351:
#line 3419 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 352:
#line 3445 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 353:
#line 3459 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 354:
#line 3478 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 355:
#line 3482 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 356:
#line 3491 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 357:
#line 3492 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 358:
#line 3493 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 359:
#line 3494 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 360:
#line 3495 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 361:
#line 3499 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 362:
#line 3500 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 363:
#line 3501 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 364:
#line 3502 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 365:
#line 3503 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 366:
#line 3504 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 367:
#line 3505 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 368:
#line 3506 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 369:
#line 3508 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 370:
#line 3514 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 371:
#line 3515 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 372:
#line 3516 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 373:
#line 3517 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 374:
#line 3518 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 375:
#line 3519 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 376:
#line 3520 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 377:
#line 3521 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 378:
#line 3522 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 379:
#line 3523 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 380:
#line 3524 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 381:
#line 3525 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 382:
#line 3526 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 383:
#line 3527 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 384:
#line 3528 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 385:
#line 3529 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 386:
#line 3530 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 387:
#line 3531 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 388:
#line 3532 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 389:
#line 3533 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 390:
#line 3534 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 391:
#line 3535 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 392:
#line 3536 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 393:
#line 3537 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 394:
#line 3538 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 395:
#line 3539 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 396:
#line 3540 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 397:
#line 3541 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 398:
#line 3542 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 399:
#line 3543 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 400:
#line 3544 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 401:
#line 3545 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 402:
#line 3547 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 403:
#line 3548 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 404:
#line 3549 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 405:
#line 3550 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 406:
#line 3551 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 407:
#line 3552 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 408:
#line 3553 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 409:
#line 3554 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 410:
#line 3555 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 411:
#line 3556 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 412:
#line 3557 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 413:
#line 3558 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 414:
#line 3559 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 415:
#line 3560 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 416:
#line 3561 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 417:
#line 3562 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 418:
#line 3563 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 419:
#line 3564 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 420:
#line 3565 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 421:
#line 3566 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 422:
#line 3567 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 423:
#line 3576 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 424:
#line 3577 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 425:
#line 3578 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 426:
#line 3579 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 427:
#line 3580 "Gmsh.y"
{ yyval.d = GMSH_MAJOR_VERSION; ;
    break;}
case 428:
#line 3581 "Gmsh.y"
{ yyval.d = GMSH_MINOR_VERSION; ;
    break;}
case 429:
#line 3582 "Gmsh.y"
{ yyval.d = GMSH_PATCH_VERSION; ;
    break;}
case 430:
#line 3587 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 431:
#line 3600 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 432:
#line 3620 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 433:
#line 3634 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 434:
#line 3647 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 435:
#line 3670 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 436:
#line 3688 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 437:
#line 3706 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 438:
#line 3724 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 439:
#line 3742 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 440:
#line 3750 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 441:
#line 3754 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 442:
#line 3758 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 443:
#line 3762 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 444:
#line 3766 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 445:
#line 3773 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 446:
#line 3777 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 447:
#line 3781 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 448:
#line 3785 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 449:
#line 3792 "Gmsh.y"
{
    ;
    break;}
case 450:
#line 3795 "Gmsh.y"
{
    ;
    break;}
case 451:
#line 3801 "Gmsh.y"
{
    ;
    break;}
case 452:
#line 3804 "Gmsh.y"
{
    ;
    break;}
case 453:
#line 3810 "Gmsh.y"
{
    ;
    break;}
case 454:
#line 3813 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 455:
#line 3817 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 456:
#line 3824 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 457:
#line 3829 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 458:
#line 3837 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 459:
#line 3842 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 460:
#line 3846 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 461:
#line 3850 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 462:
#line 3862 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 463:
#line 3868 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 464:
#line 3879 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 465:
#line 3899 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 466:
#line 3909 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 467:
#line 3919 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 468:
#line 3931 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 469:
#line 3948 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 470:
#line 3967 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 471:
#line 3991 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 472:
#line 4020 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 473:
#line 4025 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 474:
#line 4029 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 475:
#line 4033 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 476:
#line 4046 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 477:
#line 4050 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 478:
#line 4062 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 479:
#line 4069 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 480:
#line 4091 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 481:
#line 4095 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 482:
#line 4110 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 483:
#line 4115 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 484:
#line 4122 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 485:
#line 4126 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 486:
#line 4134 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 487:
#line 4142 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 488:
#line 4156 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 489:
#line 4160 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 490:
#line 4179 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 491:
#line 4195 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 4212 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
