
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tView	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tFor	339
#define	tIn	340
#define	tEndFor	341
#define	tExit	342
#define	tMerge	343
#define	tReturn	344
#define	tCall	345
#define	tFunction	346
#define	tB_SPLINE_SURFACE_WITH_KNOTS	347
#define	tB_SPLINE_CURVE_WITH_KNOTS	348
#define	tCARTESIAN_POINT	349
#define	tTRUE	350
#define	tFALSE	351
#define	tUNSPECIFIED	352
#define	tU	353
#define	tV	354
#define	tEDGE_CURVE	355
#define	tVERTEX_POINT	356
#define	tORIENTED_EDGE	357
#define	tPLANE	358
#define	tFACE_OUTER_BOUND	359
#define	tEDGE_LOOP	360
#define	tADVANCED_FACE	361
#define	tVECTOR	362
#define	tDIRECTION	363
#define	tAXIS2_PLACEMENT_3D	364
#define	tISO	365
#define	tENDISO	366
#define	tENDSEC	367
#define	tDATA	368
#define	tHEADER	369
#define	tFILE_DESCRIPTION	370
#define	tFILE_SCHEMA	371
#define	tFILE_NAME	372
#define	tMANIFOLD_SOLID_BREP	373
#define	tCLOSED_SHELL	374
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	375
#define	tFACE_BOUND	376
#define	tCYLINDRICAL_SURFACE	377
#define	tCONICAL_SURFACE	378
#define	tCIRCLE	379
#define	tTRIMMED_CURVE	380
#define	tGEOMETRIC_SET	381
#define	tCOMPOSITE_CURVE_SEGMENT	382
#define	tCONTINUOUS	383
#define	tCOMPOSITE_CURVE	384
#define	tTOROIDAL_SURFACE	385
#define	tPRODUCT_DEFINITION	386
#define	tPRODUCT_DEFINITION_SHAPE	387
#define	tSHAPE_DEFINITION_REPRESENTATION	388
#define	tELLIPSE	389
#define	tTrimmed	390
#define	tSolid	391
#define	tEndSolid	392
#define	tVertex	393
#define	tFacet	394
#define	tNormal	395
#define	tOuter	396
#define	tLoopSTL	397
#define	tEndLoop	398
#define	tEndFacet	399
#define	tAND	400
#define	tOR	401
#define	tNOTEQUAL	402
#define	tEQUAL	403
#define	tAPPROXEQUAL	404
#define	tAFFECTPLUS	405
#define	tAFFECTMINUS	406
#define	tAFFECTTIMES	407
#define	tAFFECTDIVIDE	408
#define	tLESSOREQUAL	409
#define	tGREATEROREQUAL	410
#define	tCROSSPRODUCT	411
#define	UNARYPREC	412
#define	tPLUSPLUS	413
#define	tMINUSMINUS	414

#line 1 "Gmsh.y"
 /* $Id: Gmsh.tab.cpp,v 1.38 2000-12-09 17:33:39 geuzaine Exp $ */

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "Main.h"
#include "FunctionManager.h"
#include "ColorTable.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int      Force_ViewNumber = 0 ;
List_T  *Symbol_L;

extern Mesh     *THEM;
extern Post_View *ActualView;
extern char      ThePathForIncludes[NAME_STR_L];

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d;
static ExtrudeParams  extr;
static List_T         *ListOfDouble_L,*ListOfDouble2_L;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;

static void           *pNumOpt, *pArrOpt;
static char          **pStrOpt, *pStrViewOpt;
static unsigned int   *pColOpt;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXArray   *pArrCat;
static StringXColor   *pColCat;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);


#line 63 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1521
#define	YYFLAG		-32768
#define	YYNTBASE	179

#define YYTRANSLATE(x) ((unsigned)(x) <= 414 ? yytranslate[x] : 257)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   167,     2,     2,     2,   164,     2,     2,   171,
   173,   162,   160,   172,   161,   176,   163,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   156,
     2,   157,   146,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   177,     2,   178,   168,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   174,     2,   175,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   158,   159,
   165,   166,   169,   170
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   523,   531,   538,   547,   548,
   551,   554,   557,   560,   563,   566,   569,   572,   575,   578,
   581,   584,   586,   590,   591,   605,   607,   611,   612,   626,
   628,   632,   633,   647,   649,   653,   654,   674,   676,   680,
   681,   701,   703,   707,   708,   728,   730,   734,   735,   761,
   763,   767,   768,   794,   796,   800,   801,   827,   829,   833,
   834,   866,   868,   872,   873,   905,   907,   911,   912,   944,
   949,   953,   957,   962,   967,   972,   977,   984,   996,  1003,
  1015,  1022,  1034,  1041,  1053,  1060,  1072,  1079,  1091,  1097,
  1109,  1115,  1127,  1134,  1146,  1153,  1165,  1172,  1184,  1193,
  1205,  1213,  1222,  1235,  1242,  1248,  1256,  1264,  1277,  1285,
  1295,  1313,  1321,  1330,  1339,  1347,  1359,  1365,  1374,  1384,
  1393,  1416,  1437,  1446,  1455,  1461,  1470,  1478,  1487,  1493,
  1505,  1511,  1521,  1523,  1525,  1527,  1528,  1531,  1536,  1541,
  1545,  1549,  1552,  1555,  1562,  1571,  1580,  1591,  1593,  1595,
  1599,  1602,  1611,  1624,  1633,  1646,  1655,  1668,  1680,  1696,
  1698,  1701,  1711,  1714,  1721,  1731,  1741,  1750,  1759,  1768,
  1775,  1780,  1783,  1785,  1787,  1789,  1791,  1793,  1795,  1799,
  1802,  1805,  1808,  1812,  1816,  1820,  1824,  1828,  1832,  1836,
  1840,  1844,  1848,  1852,  1856,  1860,  1864,  1870,  1875,  1880,
  1885,  1890,  1895,  1900,  1905,  1910,  1915,  1920,  1927,  1932,
  1937,  1942,  1947,  1952,  1957,  1964,  1971,  1978,  1983,  1985,
  1987,  1989,  1993,  2002,  2007,  2017,  2022,  2032,  2036,  2042,
  2044,  2047,  2050,  2054,  2058,  2070,  2080,  2088,  2096,  2100,
  2109,  2110,  2114,  2116,  2120,  2121,  2125,  2129,  2131,  2135,
  2136,  2138,  2142,  2144,  2146,  2150,  2154,  2164,  2172,  2178,
  2180,  2186,  2190,  2199,  2201,  2205,  2207
};

static const short yyrhs[] = {   181,
     0,   180,     0,   186,     0,   137,     0,   140,   141,   242,
   242,   242,   142,   143,   139,   242,   242,   242,   139,   242,
   242,   242,   139,   242,   242,   242,   144,   145,     0,   138,
     0,     0,   181,   182,     0,   183,     0,   185,     0,   184,
     0,     1,     6,     0,   111,     6,     0,   112,     6,     0,
   114,     6,     0,   113,     6,     0,   115,     6,     0,   116,
   171,   247,   172,     5,   173,     6,     0,   117,   171,   247,
   173,     6,     0,   118,   171,     5,   172,     5,   172,   247,
   172,   247,   172,     5,   172,     5,   172,     5,   173,     6,
     0,     3,     7,    95,   171,     5,   172,   245,   173,     6,
     0,     3,     7,    94,   171,     5,   172,   242,   172,   251,
   172,   241,   172,   241,   172,   241,   172,   251,   172,   251,
   172,   241,   173,     6,     0,     3,     7,    93,   171,     5,
   172,   242,   172,   242,   172,   249,   172,   241,   172,   241,
   172,   241,   172,   241,   172,   251,   172,   251,   172,   251,
   172,   251,   172,   241,   173,     6,     0,     3,     7,   101,
   171,     5,   172,     3,   172,     3,   172,     3,   172,   241,
   173,     6,     0,     3,     7,   105,   171,     5,   172,     3,
   172,   241,   173,     6,     0,     3,     7,   122,   171,     5,
   172,     3,   172,   241,   173,     6,     0,     3,     7,   103,
   171,     5,   172,   162,   172,   162,   172,   242,   172,   241,
   173,     6,     0,     3,     7,   106,   171,     5,   172,   251,
   173,     6,     0,     3,     7,   107,   171,     5,   172,   251,
   172,     3,   172,   241,   173,     6,     0,     3,     7,   102,
   171,     5,   172,     3,   173,     6,     0,     3,     7,   108,
   171,     5,   172,     3,   172,   242,   173,     6,     0,     3,
     7,   110,   171,     5,   172,     3,   172,     3,   172,     3,
   173,     6,     0,     3,     7,   109,   171,     5,   172,   245,
   173,     6,     0,     3,     7,   104,   171,     5,   172,     3,
   173,     6,     0,     3,     7,    37,   171,     5,   172,     3,
   172,     3,   173,     6,     0,     3,     7,   120,   171,     5,
   172,   251,   173,     6,     0,     3,     7,   121,   171,     5,
   172,   251,   172,     3,   173,     6,     0,     3,     7,   119,
   171,     5,   172,     3,   173,     6,     0,     3,     7,   123,
   171,     5,   172,     3,   172,   242,   173,     6,     0,     3,
     7,   124,   171,     5,   172,     3,   172,   242,   172,   242,
   173,     6,     0,     3,     7,   131,   171,     5,   172,     3,
   172,   242,   172,   242,   173,     6,     0,     3,     7,   125,
   171,     5,   172,     3,   172,   242,   173,     6,     0,     3,
     7,   135,   171,     5,   172,     3,   172,   242,   172,   242,
   173,     6,     0,     3,     7,   126,   171,     5,   172,     3,
   172,   251,   172,   251,   172,   241,   172,   241,   173,     6,
     0,     3,     7,   127,   171,     5,   172,   251,   173,     6,
     0,     3,     7,   128,   171,   129,   172,   241,   172,     3,
   173,     6,     0,     3,     7,   130,   171,     5,   172,   251,
   172,   241,   173,     6,     0,     3,     7,   132,   171,     5,
   172,     5,   172,     3,   172,     3,   173,     6,     0,     3,
     7,   133,   171,     5,   172,     5,   172,     3,   173,     6,
     0,     3,     7,   134,   171,     3,   172,     3,   173,     6,
     0,     0,   186,   187,     0,   189,     0,   188,     0,   227,
     0,   228,     0,   229,     0,   232,     0,   233,     0,   236,
     0,   239,     0,   240,     0,   235,     0,   234,     0,     1,
     6,     0,    31,   171,     5,   172,   242,   173,     6,     0,
    63,     5,   174,   190,   175,     6,     0,    63,     5,     4,
   245,   174,   190,   175,     6,     0,     0,   190,   192,     0,
   190,   195,     0,   190,   198,     0,   190,   201,     0,   190,
   204,     0,   190,   207,     0,   190,   210,     0,   190,   213,
     0,   190,   216,     0,   190,   219,     0,   190,   222,     0,
   190,   225,     0,   242,     0,   191,   172,   242,     0,     0,
    75,   171,   242,   172,   242,   172,   242,   173,   193,   174,
   191,   175,     6,     0,   242,     0,   194,   172,   242,     0,
     0,    76,   171,   242,   172,   242,   172,   242,   173,   196,
   174,   194,   175,     6,     0,   242,     0,   197,   172,   242,
     0,     0,    77,   171,   242,   172,   242,   172,   242,   173,
   199,   174,   197,   175,     6,     0,   242,     0,   200,   172,
   242,     0,     0,    72,   171,   242,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   242,   173,   202,   174,   200,
   175,     6,     0,   242,     0,   203,   172,   242,     0,     0,
    73,   171,   242,   172,   242,   172,   242,   172,   242,   172,
   242,   172,   242,   173,   205,   174,   203,   175,     6,     0,
   242,     0,   206,   172,   242,     0,     0,    74,   171,   242,
   172,   242,   172,   242,   172,   242,   172,   242,   172,   242,
   173,   208,   174,   206,   175,     6,     0,   242,     0,   209,
   172,   242,     0,     0,    69,   171,   242,   172,   242,   172,
   242,   172,   242,   172,   242,   172,   242,   172,   242,   172,
   242,   172,   242,   173,   211,   174,   209,   175,     6,     0,
   242,     0,   212,   172,   242,     0,     0,    70,   171,   242,
   172,   242,   172,   242,   172,   242,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   242,   173,   214,   174,   212,
   175,     6,     0,   242,     0,   215,   172,   242,     0,     0,
    71,   171,   242,   172,   242,   172,   242,   172,   242,   172,
   242,   172,   242,   172,   242,   172,   242,   172,   242,   173,
   217,   174,   215,   175,     6,     0,   242,     0,   218,   172,
   242,     0,     0,    66,   171,   242,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   242,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   242,   172,   242,   173,   220,
   174,   218,   175,     6,     0,   242,     0,   221,   172,   242,
     0,     0,    67,   171,   242,   172,   242,   172,   242,   172,
   242,   172,   242,   172,   242,   172,   242,   172,   242,   172,
   242,   172,   242,   172,   242,   172,   242,   173,   223,   174,
   221,   175,     6,     0,   242,     0,   224,   172,   242,     0,
     0,    68,   171,   242,   172,   242,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   242,   172,   242,   172,   242,
   172,   242,   172,   242,   172,   242,   173,   226,   174,   224,
   175,     6,     0,     4,     7,   242,     6,     0,     4,   169,
     6,     0,     4,   170,     6,     0,     4,   152,   242,     6,
     0,     4,   153,   242,     6,     0,     4,   154,   242,     6,
     0,     4,   155,   242,     6,     0,     4,   176,     4,     7,
     5,     6,     0,     4,   176,    63,   177,   242,   178,   176,
     4,     7,     5,     6,     0,     4,   176,     4,     7,   242,
     6,     0,     4,   176,    63,   177,   242,   178,   176,     4,
     7,   242,     6,     0,     4,   176,     4,   152,   242,     6,
     0,     4,   176,    63,   177,   242,   178,   176,     4,   152,
   242,     6,     0,     4,   176,     4,   153,   242,     6,     0,
     4,   176,    63,   177,   242,   178,   176,     4,   153,   242,
     6,     0,     4,   176,     4,   154,   242,     6,     0,     4,
   176,    63,   177,   242,   178,   176,     4,   154,   242,     6,
     0,     4,   176,     4,   155,   242,     6,     0,     4,   176,
    63,   177,   242,   178,   176,     4,   155,   242,     6,     0,
     4,   176,     4,   169,     6,     0,     4,   176,    63,   177,
   242,   178,   176,     4,   169,   242,     6,     0,     4,   176,
     4,   170,     6,     0,     4,   176,    63,   177,   242,   178,
   176,     4,   170,   242,     6,     0,     4,   176,     4,     7,
   245,     6,     0,     4,   176,    63,   177,   242,   178,   176,
     4,     7,   245,     6,     0,     4,   176,     4,   152,   245,
     6,     0,     4,   176,    63,   177,   242,   178,   176,     4,
   152,   245,     6,     0,     4,   176,     4,   153,   245,     6,
     0,     4,   176,    63,   177,   242,   178,   176,     4,   153,
   245,     6,     0,     4,   176,    84,   176,     4,     7,   253,
     6,     0,     4,   176,    63,   177,   242,   178,   176,    84,
     7,   254,     6,     0,    34,   171,   242,   173,     7,   245,
     6,     0,    49,    34,   171,   242,   173,     7,   251,     6,
     0,    64,    34,   251,     7,   174,   242,   172,   242,   172,
   242,   175,     6,     0,    41,    42,   251,     7,   242,     6,
     0,    34,   174,   242,   175,     6,     0,    37,   171,   242,
   173,     7,   251,     6,     0,    39,   171,   242,   173,     7,
   251,     6,     0,    64,    37,   251,     7,   174,   242,   172,
   242,   172,   242,   175,     6,     0,    35,   171,   242,   173,
     7,   251,     6,     0,    35,   171,   242,   173,     7,   251,
    45,   245,     6,     0,    43,   171,   242,   173,     7,   174,
   242,   172,   242,   172,     5,   172,     5,   172,     5,   175,
     6,     0,    36,   171,   242,   173,     7,   251,     6,     0,
    49,    37,   171,   242,   173,     7,   251,     6,     0,    37,
    59,   171,   242,   173,     7,   251,     6,     0,    78,   171,
   242,   173,     7,   251,     6,     0,    79,   171,   242,   173,
     7,   251,    83,   251,    80,   242,     6,     0,    37,   174,
   242,   175,     6,     0,    45,    38,   171,   242,   173,     7,
   251,     6,     0,   136,    38,   171,   242,   173,     7,   242,
   251,     6,     0,    46,    38,   171,   242,   173,     7,   251,
     6,     0,    79,    38,    81,    82,   171,   242,   173,     7,
   249,    83,   174,   251,   172,   251,   175,    80,   174,   242,
   172,   242,   175,     6,     0,    79,    38,   171,   242,   173,
     7,   249,    83,   174,   251,   172,   251,   175,    80,   174,
   242,   172,   242,   175,     6,     0,    49,    38,   171,   242,
   173,     7,   251,     6,     0,    38,    59,   171,   242,   173,
     7,   251,     6,     0,    38,   174,   242,   175,     6,     0,
    48,    40,   171,   242,   173,     7,   251,     6,     0,    40,
   171,   242,   173,     7,   251,     6,     0,    49,    40,   171,
   242,   173,     7,   251,     6,     0,    54,   245,   174,   230,
   175,     0,    53,   174,   245,   172,   245,   172,   242,   175,
   174,   230,   175,     0,    55,   245,   174,   230,   175,     0,
    56,   174,   245,   172,   242,   175,   174,   230,   175,     0,
   232,     0,   231,     0,   229,     0,     0,   231,   228,     0,
    58,   174,   231,   175,     0,    61,   174,   231,   175,     0,
     4,   256,     6,     0,     4,   242,     6,     0,    88,     6,
     0,    33,     6,     0,    85,   174,   242,     8,   242,   175,
     0,    85,   174,   242,     8,   242,     8,   242,   175,     0,
    85,     4,    86,   174,   242,     8,   242,   175,     0,    85,
     4,    86,   174,   242,     8,   242,     8,   242,   175,     0,
    87,     0,    90,     0,    91,     4,     6,     0,    92,     4,
     0,    57,    34,   174,   242,   172,   245,   175,     6,     0,
    57,    34,   174,   242,   172,   245,   172,   245,   172,   242,
   175,     6,     0,    57,    37,   174,   242,   172,   245,   175,
     6,     0,    57,    37,   174,   242,   172,   245,   172,   245,
   172,   242,   175,     6,     0,    57,    38,   174,   242,   172,
   245,   175,     6,     0,    57,    38,   174,   242,   172,   245,
   172,   245,   172,   242,   175,     6,     0,    57,    38,   174,
   242,   172,   245,   175,   174,   237,   175,     6,     0,    57,
    38,   174,   242,   172,   245,   172,   245,   172,   242,   175,
   174,   237,   175,     6,     0,   238,     0,   237,   238,     0,
    65,   174,   251,   172,   251,   172,   251,   175,     6,     0,
    60,     6,     0,    47,    37,   251,     7,   242,     6,     0,
    47,    37,   251,     7,   242,    50,    52,   242,     6,     0,
    47,    37,   251,     7,   242,    50,    51,   242,     6,     0,
    47,    38,   174,   242,   175,     7,   251,     6,     0,    44,
    38,   174,   242,   175,     7,   251,     6,     0,    47,    40,
   174,   242,   175,     7,   251,     6,     0,    60,    38,   251,
     7,   242,     6,     0,    60,    38,   251,     6,     0,    62,
     6,     0,    96,     0,    97,     0,    98,     0,    99,     0,
   100,     0,   243,     0,   171,   242,   173,     0,   161,   242,
     0,   160,   242,     0,   167,   242,     0,   242,   161,   242,
     0,   242,   160,   242,     0,   242,   162,   242,     0,   242,
   163,   242,     0,   242,   164,   242,     0,   242,   168,   242,
     0,   242,   156,   242,     0,   242,   157,   242,     0,   242,
   158,   242,     0,   242,   159,   242,     0,   242,   150,   242,
     0,   242,   149,   242,     0,   242,   147,   242,     0,   242,
   148,   242,     0,   242,   146,   242,     8,   242,     0,    10,
   171,   242,   173,     0,    11,   171,   242,   173,     0,    12,
   171,   242,   173,     0,    13,   171,   242,   173,     0,    14,
   171,   242,   173,     0,    15,   171,   242,   173,     0,    16,
   171,   242,   173,     0,    17,   171,   242,   173,     0,    18,
   171,   242,   173,     0,    20,   171,   242,   173,     0,    21,
   171,   242,   172,   242,   173,     0,    22,   171,   242,   173,
     0,    23,   171,   242,   173,     0,    24,   171,   242,   173,
     0,    25,   171,   242,   173,     0,    26,   171,   242,   173,
     0,    27,   171,   242,   173,     0,    28,   171,   242,   172,
   242,   173,     0,    29,   171,   242,   172,   242,   173,     0,
    30,   171,   242,   172,   242,   173,     0,    19,   171,   242,
   173,     0,     3,     0,     9,     0,     4,     0,     4,   176,
     4,     0,     4,   176,    63,   177,   242,   178,   176,     4,
     0,     4,   176,     4,   169,     0,     4,   176,    63,   177,
   242,   178,   176,     4,   169,     0,     4,   176,     4,   170,
     0,     4,   176,    63,   177,   242,   178,   176,     4,   170,
     0,   242,     8,   242,     0,   242,     8,   242,     8,   242,
     0,   246,     0,   161,   245,     0,   160,   245,     0,   245,
   161,   245,     0,   245,   160,   245,     0,   174,   242,   172,
   242,   172,   242,   172,   242,   172,   242,   175,     0,   174,
   242,   172,   242,   172,   242,   172,   242,   175,     0,   174,
   242,   172,   242,   172,   242,   175,     0,   171,   242,   172,
   242,   172,   242,   173,     0,     4,   176,     4,     0,     4,
   176,    63,   177,   242,   178,   176,     4,     0,     0,   171,
   248,   173,     0,     5,     0,   248,   172,     5,     0,     0,
   174,   250,   175,     0,   171,   250,   173,     0,   251,     0,
   250,   172,   251,     0,     0,   242,     0,   174,   252,   175,
     0,   242,     0,   244,     0,   252,   172,   242,     0,   252,
   172,   244,     0,   174,   242,   172,   242,   172,   242,   172,
   242,   175,     0,   174,   242,   172,   242,   172,   242,   175,
     0,   174,     4,   172,   242,   175,     0,     4,     0,     4,
   176,    84,   176,     4,     0,   174,   255,   175,     0,     4,
   176,    63,   177,   242,   178,   176,    84,     0,   253,     0,
   255,   172,   253,     0,     5,     0,    32,   171,     5,   172,
   242,   173,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   144,   146,   147,   154,   162,   176,   188,   190,   193,   195,
   196,   197,   200,   206,   211,   212,   213,   216,   220,   223,
   229,   234,   240,   248,   253,   257,   263,   268,   272,   277,
   281,   284,   289,   293,   297,   301,   306,   310,   313,   317,
   321,   325,   329,   333,   337,   340,   344,   347,   351,   354,
   363,   367,   373,   375,   376,   377,   378,   379,   380,   381,
   382,   383,   384,   386,   387,   390,   401,   406,   412,   417,
   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
   428,   431,   434,   438,   444,   450,   453,   457,   463,   469,
   472,   476,   482,   488,   491,   495,   503,   509,   512,   516,
   524,   530,   533,   537,   545,   551,   554,   558,   570,   576,
   579,   583,   595,   601,   604,   608,   620,   626,   629,   633,
   646,   652,   655,   659,   672,   678,   681,   685,   698,   710,
   720,   728,   736,   744,   752,   760,   771,   784,   802,   819,
   840,   857,   878,   895,   916,   933,   954,   971,   992,  1009,
  1030,  1047,  1070,  1095,  1124,  1149,  1178,  1203,  1234,  1247,
  1272,  1283,  1289,  1308,  1319,  1327,  1333,  1339,  1358,  1364,
  1380,  1387,  1393,  1399,  1405,  1411,  1430,  1442,  1448,  1467,
  1488,  1496,  1502,  1508,  1514,  1526,  1532,  1538,  1550,  1556,
  1561,  1566,  1573,  1575,  1576,  1579,  1584,  1595,  1613,  1628,
  1697,  1717,  1721,  1740,  1756,  1770,  1792,  1814,  1840,  1847,
  1854,  1871,  1877,  1883,  1887,  1891,  1895,  1899,  1904,  1911,
  1915,  1920,  1938,  1948,  1966,  1983,  2000,  2021,  2041,  2061,
  2078,  2102,  2115,  2117,  2118,  2119,  2120,  2123,  2125,  2126,
  2127,  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,  2136,
  2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2146,
  2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2156,
  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2167,  2169,
  2170,  2179,  2196,  2217,  2234,  2255,  2272,  2294,  2301,  2314,
  2319,  2323,  2327,  2331,  2336,  2341,  2345,  2349,  2353,  2379,
  2411,  2415,  2420,  2424,  2429,  2433,  2437,  2443,  2449,  2455,
  2459,  2465,  2472,  2478,  2487,  2491,  2501,  2506,  2510,  2515,
  2520,  2535,  2540,  2561,  2570,  2576,  2581
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tView","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tFor","tIn","tEndFor",
"tExit","tMerge","tReturn","tCall","tFunction","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'?'","tAND","tOR","tNOTEQUAL","tEQUAL","tAPPROXEQUAL",
"tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'<'","'>'","tLESSOREQUAL",
"tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT","UNARYPREC",
"'!'","'^'","tPLUSPLUS","tMINUSMINUS","'('","','","')'","'{'","'}'","'.'","'['",
"']'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Command","Loop","Extrude",
"ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr",
"FExpr_Single","FExpr_Range","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   179,   179,   179,   180,   180,   180,   181,   181,   182,   182,
   182,   182,   183,   183,   183,   183,   183,   184,   184,   184,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   186,   186,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   188,   189,   189,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   191,   191,   193,   192,   194,   194,   196,   195,   197,
   197,   199,   198,   200,   200,   202,   201,   203,   203,   205,
   204,   206,   206,   208,   207,   209,   209,   211,   210,   212,
   212,   214,   213,   215,   215,   217,   216,   218,   218,   220,
   219,   221,   221,   223,   222,   224,   224,   226,   225,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   229,   229,
   229,   229,   230,   230,   230,   231,   231,   232,   233,   234,
   234,   234,   234,   235,   235,   235,   235,   235,   235,   235,
   235,   236,   236,   236,   236,   236,   236,   236,   236,   237,
   237,   238,   238,   239,   239,   239,   239,   239,   239,   239,
   239,   240,   241,   241,   241,   241,   241,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   244,   244,   245,
   245,   245,   245,   245,   246,   246,   246,   246,   246,   246,
   247,   247,   248,   248,   249,   249,   249,   250,   250,   251,
   251,   251,   252,   252,   252,   252,   253,   253,   253,   253,
   253,   254,   254,   255,   255,   256,   256
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     4,
     3,     3,     4,     4,     4,     4,     6,    11,     6,    11,
     6,    11,     6,    11,     6,    11,     6,    11,     5,    11,
     5,    11,     6,    11,     6,    11,     6,    11,     8,    11,
     7,     8,    12,     6,     5,     7,     7,    12,     7,     9,
    17,     7,     8,     8,     7,    11,     5,     8,     9,     8,
    22,    20,     8,     8,     5,     8,     7,     8,     5,    11,
     5,     9,     1,     1,     1,     0,     2,     4,     4,     3,
     3,     2,     2,     6,     8,     8,    10,     1,     1,     3,
     2,     8,    12,     8,    12,     8,    12,    11,    15,     1,
     2,     9,     2,     6,     9,     9,     8,     8,     8,     6,
     4,     2,     1,     1,     1,     1,     1,     1,     3,     2,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     4,     4,     4,     6,     6,     6,     4,     1,     1,
     1,     3,     8,     4,     9,     4,     9,     3,     5,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     3,     8,
     0,     3,     1,     3,     0,     3,     3,     1,     3,     0,
     1,     3,     1,     1,     3,     3,     9,     7,     5,     1,
     5,     3,     8,     1,     3,     1,     6
};

static const short yydefact[] = {    51,
     4,     6,     0,     2,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   208,     0,   209,     0,     0,     0,
    52,    54,    53,    55,    56,    57,    58,    59,    64,    63,
    60,    61,    62,   279,   281,   280,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   238,    12,     0,    13,    14,    16,    15,    17,
   301,   301,     0,    65,   326,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   203,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   310,
     0,     0,     0,     0,   310,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
     0,     0,     0,     0,     0,   196,   310,   196,   232,     0,
   310,   310,     0,     0,     0,     0,     0,   202,     0,   211,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   241,   240,   242,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   131,   132,     0,     0,     0,   201,     0,
     0,   200,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   311,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   292,   291,     0,     0,     0,     0,   196,   196,     0,
     0,     0,     0,     0,     0,     0,     0,    69,     0,     0,
     0,     0,     0,     0,     0,     0,   210,     0,   282,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   239,     0,   255,   256,   254,   253,   249,   250,   251,
   252,   241,   240,   245,   246,   247,   248,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   303,     0,
     0,     0,     0,   130,     0,   133,   134,   135,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   244,   243,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   313,   314,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
     0,     0,     0,   294,   293,   195,     0,   194,   193,     0,
     0,     0,     0,     0,   198,   197,   231,     0,   199,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   284,   286,     0,   258,   259,   260,   261,   262,   263,   264,
   265,   266,   278,   267,     0,   269,   270,   271,   272,   273,
   274,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   302,     0,    19,
     0,     0,   281,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   149,   151,     0,     0,     0,
     0,   165,   310,   310,     0,   310,   177,     0,   185,   310,
   310,     0,     0,   312,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   189,   191,     0,     0,     0,     0,     0,    69,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,     0,     0,   310,     0,     0,   310,
     0,     0,     0,     0,     0,     0,     0,     0,   257,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   310,
   310,     0,     0,     0,     0,   310,   310,     0,     0,     0,
     0,     0,   310,     0,   310,     0,     0,     0,     0,     0,
   304,     0,   301,     0,     0,   137,     0,   139,   153,   141,
   155,   143,   157,   145,   147,     0,     0,     0,     0,     0,
     0,   310,     0,   310,     0,     0,   288,   315,   316,   164,
     0,   310,   310,   310,   224,     0,   310,   310,   310,   310,
   310,   310,   310,     0,     0,     0,     0,     0,     0,     0,
     0,   230,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    67,     0,     0,     0,     0,
   305,     0,     0,     0,   204,     0,     0,   268,   275,   276,
   277,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
     0,     0,     0,     0,     0,     0,     0,    18,     0,   327,
   282,     0,     0,   320,     0,     0,    66,   161,   169,     0,
   172,     0,   166,     0,   167,   187,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   196,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   175,     0,   310,   310,
     0,   310,     0,     0,   310,     0,     0,     0,     0,   310,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   310,     0,
     0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
     0,     0,   281,     0,   159,     0,   174,   184,   289,     0,
   228,   178,   180,     0,     0,   227,   229,   186,   162,   173,
   183,   188,     0,     0,   298,     0,   297,     0,     0,   212,
     0,   214,     0,   216,     0,    68,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   305,     0,   308,     0,     0,     0,     0,   206,   205,     0,
   283,     0,     0,     0,     0,    21,     0,    30,     0,    34,
     0,    28,     0,     0,    33,     0,    38,    36,     0,     0,
     0,     0,     0,     0,    45,     0,     0,     0,     0,     0,
    50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   170,     0,   226,   225,   196,
   300,     0,   192,     0,     0,     0,     0,     0,     0,   220,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   310,   307,   306,   310,     0,
     0,   179,   285,   287,     0,     0,   305,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   310,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   296,     0,
     0,     0,   223,   310,     0,   221,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   309,     0,     0,   207,     0,    35,     0,     0,     0,
     0,    25,     0,    31,     0,    37,    26,    39,     0,    42,
     0,    46,    47,     0,     0,    49,     0,     0,     0,   138,
   140,   154,   142,   156,   144,   158,   146,   148,   150,   152,
     0,   324,     0,   160,   321,   319,     0,     0,   190,     0,
     0,     0,     0,     0,   218,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   310,
   310,   176,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   283,     0,     0,   322,     0,
     0,   295,   213,   215,   217,     0,   310,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    84,    88,    92,   163,
   168,     0,     0,     0,     0,     0,     0,     0,    29,    32,
    40,     0,    41,    48,    43,     0,     0,   325,     0,   318,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   310,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   310,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    24,    27,     0,     0,
     0,   317,     0,   219,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    82,     0,    86,     0,    90,
     0,     0,     0,     0,   310,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    44,    20,   323,   171,   222,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    83,    85,    87,    89,    91,    93,
     0,     0,     0,     0,   310,     0,     0,     0,     0,     0,
     0,    96,   100,   104,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     5,   310,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   182,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    94,     0,    98,     0,   102,     0,   310,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   181,     0,    22,     0,     0,     0,     0,
     0,     0,    95,    97,    99,   101,   103,   105,   310,     0,
     0,     0,   108,   112,   116,     0,     0,     0,     0,     0,
     0,     0,   310,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   106,     0,   110,     0,   114,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   107,   109,   111,   113,   115,   117,     0,
   120,   124,   128,    23,     0,     0,     0,     0,     0,     0,
     0,   118,     0,   122,     0,   126,     0,     0,     0,     0,
     0,     0,   119,   121,   123,   125,   127,   129,     0,     0,
     0
};

static const short yydefgoto[] = {  1519,
     4,     5,    18,    19,    20,    21,     6,    61,    62,    63,
   471,  1295,   613,  1243,  1297,   614,  1244,  1299,   615,  1245,
  1403,   616,  1376,  1405,   617,  1377,  1407,   618,  1378,  1464,
   619,  1450,  1466,   620,  1451,  1468,   621,  1452,  1501,   622,
  1495,  1503,   623,  1496,  1505,   624,  1497,    64,   466,   456,
   457,   458,   459,    68,    69,    70,    71,  1009,  1010,    72,
    73,   781,   286,   103,   434,   302,   160,   255,   400,   851,
   942,   943,   435,   796,  1072,  1143,   126
};

static const short yypact[] = {   441,
-32768,-32768,  -118,-32768,   308,  2282,  1158,   102,   131,   134,
   139,   143,   148,   163,    29,   110,   114,-32768,-32768,-32768,
-32768,   226,   737,   124,   307,   -91,   156,   196,   -38,   -37,
   206,   225,   313,   228,   351,   389,   390,   127,   398,    41,
   269,     0,     0,   277,   281,   278,   419,   284,   453,   455,
   283,   302,   -32,     1,-32768,   471,-32768,   479,   483,   456,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   330,-32768,   334,   336,   337,   343,
   344,   345,   346,   357,   358,   359,   361,   362,   366,   371,
   372,   373,   374,   375,   376,   378,   379,  1158,  1158,  1158,
  1158,  1512,-32768,-32768,  2320,-32768,-32768,-32768,-32768,-32768,
   392,   392,   529,-32768,-32768,  1158,   393,  1158,  1158,  1158,
  1158,   554,   555,    14,   635,   561,   563,-32768,  1158,  1158,
  1158,  1158,   400,  1158,  1158,   401,  1158,  1158,  1158,   940,
  1158,   395,   402,   403,   940,   406,   409,   404,   405,   413,
   422,   423,     0,   420,     0,     0,  1158,  1158,  -113,-32768,
  -106,     0,   421,   433,   434,-32768,   940,-32768,-32768,    23,
   940,   940,  1158,   -70,  1158,   491,  1158,-32768,   591,-32768,
   438,     8,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
  1158,  1158,  1158,   443,   443,   443,  2141,  1158,  1158,  1158,
  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
  1158,  1158,  1512,   444,   445,   449,   466,   467,   468,   469,
   487,   510,   511,   512,   513,   514,   521,   524,   534,   535,
   541,   542,   543,   545,   558,   559,   562,   564,   567,   572,
   597,   599,   600,   607,   470,   440,   539,   685,   609,   904,
   995,  1067,  1451,-32768,-32768,     3,   557,   596,-32768,  1158,
  1158,-32768,   560,  3063,  2515,  3091,  3119,  1158,  3147,  2538,
  1158,  2561,  3175,  3203,  1158,  7735,   766,  3231,  1158,  1158,
  1158,   767,  1158,  1158,  1158,  1158,  1158,  1158,  1158,   -19,
     9,-32768,-32768,  4827,  4854,     0,     0,   377,   377,   -13,
  1158,  1158,  1158,  1322,    50,  2232,     0,-32768,   768,   769,
  3259,   696,  1158,  3287,   605,  1993,-32768,  1158,    54,   603,
  3315,  3343,  3371,  3399,  3427,  3455,  3483,  3511,  3539,  3567,
  3595,  4881,  3623,  3651,  3679,  3707,  3735,  3763,  4908,  4935,
  4962,-32768,  2019,   306,   306,   488,   488,   190,   190,   190,
   190,  -108,   -86,   443,   443,   443,   443,  4989,   781,   782,
   784,   796,   797,   799,   802,   803,   804,   807,   808,   809,
   810,   814,   817,   818,   820,   821,   822,   823,   824,   825,
   831,   708,   835,   846,   849,   850,   853,   852,-32768,   121,
   854,   857,   856,-32768,   686,-32768,-32768,-32768,-32768,   319,
  1109,  1109,  1158,  1158,   858,   859,  1158,   862,   285,   285,
  1158,   860,   866,   861,   867,  3791,   868,   871,  3819,   872,
   874,   876,  2043,-32768,   184,  1158,   877,  2584,  3847,  3875,
  1158,  2607,  2630,  3903,  3931,  3959,  3987,  4015,     0,-32768,
   683,  1158,  1158,-32768,-32768,-32768,   698,  2341,-32768,   704,
  1158,  5012,  5039,  5066,-32768,-32768,-32768,  1158,-32768,   -74,
   -31,   711,   712,   880,   717,  4043,   887,  1158,  1158,  4071,
-32768,-32768,  1158,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1158,-32768,-32768,-32768,-32768,-32768,
-32768,  1158,  1158,  1158,  1158,   752,   724,   727,   728,   729,
   730,   731,   733,   739,   740,   742,   743,   744,   745,   746,
   747,   760,   761,   762,   763,   764,   765,   770,   774,   775,
   776,   800,   801,   813,   819,   830,   933,-32768,   798,-32768,
   832,  1158,   816,   935,  1109,  1109,  1158,  1474,     2,  1538,
    59,  1596,    61,  1619,  1642,-32768,-32768,  2310,   932,  4099,
     0,-32768,   940,   940,   967,   940,-32768,   979,-32768,   940,
   940,  1158,  1158,-32768,  1671,   815,   983,   986,   987,   363,
   989,   996,   998,   999,  1000,  1001,  1002,   107,  1158,  5093,
  5120,-32768,-32768,  2653,     0,     0,     0,  1697,-32768,   839,
   840,   841,   842,   843,   844,   847,   848,   863,   864,   865,
   869,  1014,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1158,  1158,   940,  1158,  1017,   940,
  2066,   442,  1018,  2333,  4127,  4155,  4183,  4211,  7735,   882,
  1025,  1158,  1158,     0,  1026,  1027,   870,  1028,  1034,   940,
   940,  1035,     0,  1036,  1039,   940,   940,  1040,  1041,  1042,
  1044,  1045,   940,    20,   940,  1052,  1051,  1053,  1054,  1056,
-32768,  1063,   392,  4239,    11,-32768,  3035,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   894,    24,  1068,    70,    18,
  1069,   940,  1070,   940,  1071,  1072,  2092,  2043,-32768,-32768,
  1158,   940,   940,   940,-32768,   274,   940,   940,   940,   940,
   940,   940,   940,  1158,  2356,  1158,  1158,   905,  -102,   -76,
   105,-32768,   556,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
  1158,  1158,  1158,  1158,  1158,-32768,  5147,  5174,  1086,  4267,
   186,  1010,  1158,  1158,-32768,  1158,   918,-32768,-32768,-32768,
-32768,  1158,   923,  5201,  5228,  -109,   924,   925,   930,   931,
   934,   936,   938,   943,   -71,   944,   973,   974,   945,   976,
   977,   978,   988,   992,  1016,-32768,-32768,-32768,-32768,-32768,
   993,  1029,  1030,  1031,  1032,  1033,  1037,-32768,  1038,-32768,
    54,   920,    13,   927,  1566,  1099,-32768,-32768,-32768,     0,
-32768,  1102,-32768,  1184,-32768,-32768,  1158,  5255,  1194,  1199,
  1202,  1158,  1158,  1205,  1206,  1212,  1213,  1215,  1226,  1227,
  2676,  1058,  4295,  2425,   377,     0,  1230,     0,  1231,     0,
    43,  1232,  5282,  5309,  5336,  5363,  5390,  5417,  5444,  5471,
  5498,  5525,  5552,  5579,  1158,  1158,-32768,  1233,   940,   940,
  1156,   940,   540,  2699,   224,  1237,  1512,  1239,  1158,   940,
  1238,  1240,  1241,  1083,  1242,    20,  1243,  1247,  1158,  1245,
  1249,  1259,  1260,  1265,    20,  1158,  1158,  1158,   940,  1266,
  1268,    20,  1158,  1270,  1271,  1269,  1158,   392,  1158,   103,
  1272,  1162,  -142,  5606,-32768,    99,-32768,-32768,  7735,  1158,
-32768,-32768,-32768,  1729,  1764,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1103,  1274,-32768,  1158,-32768,  1106,   138,-32768,
   140,-32768,   142,-32768,   -34,-32768,  1158,  1158,  1158,  1158,
  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  5633,  5660,
   186,   193,-32768,   203,  1108,  1204,  1158,-32768,-32768,  1279,
   247,  1512,  1113,  5687,  1115,-32768,  1116,-32768,  1117,-32768,
  1118,-32768,  1120,  4323,-32768,  1121,-32768,-32768,  1124,  1125,
  4351,  5714,  4379,  1122,-32768,  1126,  1127,  5741,  1129,  1130,
-32768,  5768,  1142,  2379,   650,  1109,  1109,  1158,  1158,  1158,
  1158,    25,  1114,  1158,  1158,-32768,  5795,-32768,-32768,   377,
-32768,  2455,-32768,  1158,  1158,  1158,  1296,  1146,   -46,-32768,
  5822,  5849,  5876,  5903,  5930,  5957,  5984,  6011,  6038,  6065,
  6092,  6119,  1158,  1158,  1244,   940,-32768,-32768,   940,  1158,
  2722,-32768,-32768,-32768,  2752,  1310,   186,    20,  1319,  1158,
  1317,    20,  1318,  1323,  1324,  1325,  1326,  1158,  1327,   940,
  1328,  1329,  1158,  1333,  1331,  1158,  1334,  1152,  1332,  1787,
   101,  1810,   109,  1834,   115,  1860,  1897,  1923,  1947,  1164,
    24,  1335,  1338,  2775,  6146,  1341,  1168,  1158,-32768,  2798,
  2821,  2844,-32768,   940,  1342,-32768,  1158,  1158,  1158,  1158,
  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  2867,  2890,
  1173,-32768,  1183,  1970,-32768,  1158,-32768,  1192,  1197,  1201,
  6173,-32768,  1193,-32768,  1203,-32768,-32768,-32768,  4407,-32768,
  1216,-32768,-32768,  4435,  1214,-32768,  4463,  1217,  1370,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1312,-32768,   204,-32768,-32768,-32768,  1158,  1218,-32768,  2913,
  1385,  1386,    44,  1221,-32768,  6200,  6227,  6254,  6281,  6308,
  6335,  6362,  6389,  6416,  4491,  4519,  4547,  1388,  1389,   940,
   940,-32768,  1512,    20,    20,    20,    20,  1390,  1391,  1392,
    20,  1393,  1396,  1397,  1399,   247,  1235,    24,-32768,  2485,
  1409,-32768,-32768,-32768,-32768,   -34,   940,  1158,  1158,  1158,
  1158,  1158,  1158,  1158,  1158,  1158,-32768,-32768,-32768,-32768,
-32768,  1248,  1252,  1512,  1250,  1251,  1255,  1256,-32768,-32768,
-32768,  1258,-32768,-32768,-32768,  1264,  1158,-32768,  1158,-32768,
  1267,   -40,  1273,  6443,  6470,  6497,  6524,  6551,  6578,  6605,
  6632,  6659,  1257,  1263,  1280,   940,  1336,  2943,    20,    20,
  1411,  1418,    20,  1427,  2402,  2966,  1433,  1434,   940,  1158,
  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
  1158,  1278,  1281,  1158,  1284,  1287,-32768,-32768,  1288,  1289,
  1292,-32768,  1285,-32768,  1295,  6686,  6713,  6740,  6767,  6794,
  6821,  6848,  6875,  6902,   218,  7735,   222,  7735,   236,  7735,
  1361,  1158,  1512,    20,   940,  1436,  1437,  1360,  1440,  1457,
  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
  1466,  1158,  1467,  1158,  1468,  1301,  6929,  1512,  1304,  1305,
-32768,-32768,-32768,-32768,-32768,  6956,  6983,  7010,  7037,  7064,
  7091,  4575,  4603,  4631,  7735,-32768,  7735,-32768,  7735,-32768,
  1158,  1158,  7712,    20,   940,  1158,  1158,  1158,  1158,  1158,
  1158,-32768,-32768,-32768,  7118,  2989,  1339,  1306,  1307,  7145,
  7172,  7199,  7226,  7253,  7280,  1309,  1313,  1314,  1158,  1475,
-32768,   940,    20,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
  1158,  1158,  3012,-32768,  1337,  1316,  7307,  7334,  7361,  7388,
  7415,  7442,   237,  7735,   243,  7735,   303,  7735,  1480,   940,
  1484,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1488,  1158,
  1489,  1158,  1490,-32768,  1345,-32768,  7469,  7496,  7523,  4659,
  4687,  4715,  7735,-32768,  7735,-32768,  7735,-32768,   940,  1158,
  1158,  1158,-32768,-32768,-32768,  1347,  7550,  7577,  7604,  1340,
  1369,  1371,   940,  1158,  1158,  1158,  1158,  1158,  1158,  1374,
  7631,  7658,  7685,   309,  7735,   310,  7735,   317,  7735,    20,
  1158,  1158,  1158,  1158,  1492,  1158,  1493,  1158,  1495,  1330,
  4743,  4771,  4799,  7735,-32768,  7735,-32768,  7735,-32768,  1501,
-32768,-32768,-32768,-32768,  1376,  1377,  1378,  1158,  1158,  1158,
   327,  7735,   328,  7735,   329,  7735,  1158,  1502,  1158,  1504,
  1158,  1507,  7735,-32768,  7735,-32768,  7735,-32768,  1548,  1553,
-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   955,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1549,  1550,
  -307,   -62,  1554,-32768,-32768,-32768,-32768,   365, -1006,-32768,
-32768,  -813,    -7,-32768,  1043,   -10,-32768,  -111,-32768,  -934,
   721,   855,-32768, -1062,-32768,-32768,-32768
};


#define	YYLAST		7903


static const short yytable[] = {   102,
   256,   460,  1086,   154,   176,   174,  1025,   679,  1142,   410,
   322,   329,   450,  1007,   791,   125,   890,   266,  1008,  1007,
   133,   136,     7,   799,  1008,  1007,   317,   794,  1070,   994,
  1008,   159,   161,   182,   600,   601,   602,   603,   604,   605,
   606,   607,   608,   609,   610,   611,   306,   307,   924,  1195,
   306,   307,   961,   306,   307,   467,   468,   306,   307,   222,
   308,   970,   800,   861,   681,  -244,   683,   309,   977,   826,
   330,   451,   827,   792,   149,   798,   267,   150,   151,   129,
   152,   222,   130,   306,   307,   306,   307,  -243,   306,   307,
   204,   205,   206,   207,   223,   828,   891,   268,   829,   599,
   323,   870,  1108,   314,   996,   316,  1132,   104,   258,   985,
   260,   261,   262,   263,  1134,   776,   777,   778,   779,   780,
  1136,   274,   275,   276,   277,  1228,   279,   280,  1085,   282,
   283,   284,   134,   288,  1258,   135,   137,   105,   175,   106,
   306,   307,   300,   612,   107,   303,   306,   307,   108,   304,
   305,   310,   449,   109,   411,   412,   413,   414,   461,   155,
   156,   306,   307,   145,   146,   321,   147,   324,   110,   326,
   157,   415,   416,   158,   177,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   318,   795,  1071,   111,
   353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
   363,   364,   365,   366,   367,   368,   925,  1196,   306,   307,
   306,   307,   481,   482,  1109,  1086,    74,    75,  1113,   306,
   307,   114,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,   986,   987,   988,   989,   306,   307,
   306,   307,   419,   420,   306,   307,   306,   307,   306,   307,
   426,   990,   991,   429,   306,   307,   830,   433,   714,   831,
   112,   438,   439,   440,   113,   442,   443,   444,   445,   446,
   447,   448,   537,   538,   127,   454,   455,   306,   307,   306,
   307,   306,   307,   462,   463,   464,   470,    -1,     8,  1004,
     9,  1005,   128,  1006,   163,   476,   171,   164,   165,   172,
   480,    74,   543,   544,   812,   813,   131,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,   270,
   271,   219,   220,   221,   140,   573,   849,   222,   574,   850,
  1215,  1216,  1217,  1218,  1026,  1027,   132,  1222,   705,   208,
   209,   210,   211,   212,  1026,  1188,   138,  1028,  1189,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   142,  1320,
   100,   222,  1321,  1322,   101,   139,  1323,   285,   141,   549,
   551,   553,   548,   550,   552,   554,   555,  1324,  1418,   558,
  1325,  1419,   706,   560,  1420,  1033,  1034,  1421,    10,    11,
    12,    13,    14,    15,    16,    17,   143,   144,   575,    41,
    42,    43,    44,   580,    46,  1275,  1276,   148,   588,  1279,
    -7,    -7,   153,    -7,   590,   591,   219,   220,   221,   744,
   162,   166,   222,   594,   211,   212,   167,   168,   169,   170,
   598,   213,   214,   215,   216,   270,   271,   219,   220,   221,
   631,   632,   173,   222,  1422,   634,   178,  1423,   545,   546,
  1474,  1476,   179,  1475,  1477,   100,   180,   635,  1478,   547,
  1329,  1479,   158,   181,   636,   637,   638,   639,  1507,  1509,
  1511,  1508,  1510,  1512,   183,   182,   184,   185,   208,   209,
   210,   211,   212,   186,   187,   188,   189,   918,   213,   214,
   215,   216,   270,   271,   219,   220,   221,   190,   191,   192,
   222,   193,   194,   257,   674,   303,   195,   204,   205,   677,
  1368,   196,   197,   198,   199,   200,   201,   947,   202,   203,
   689,    -7,    -7,    -7,    -7,    -7,    -7,    -7,    -7,   264,
   265,   789,   254,   259,   697,   698,   272,   273,   289,  1396,
   278,   281,   290,   291,   295,   296,   325,     1,     2,   293,
     3,   715,   294,   297,   719,   720,   721,   208,   209,   210,
   211,   212,   298,   299,   311,   301,   327,   213,   214,   215,
   216,   270,   271,   219,   220,   221,   312,   313,   328,   222,
   222,   399,   402,   405,   369,   370,   745,   737,   738,   371,
   740,   600,   601,   602,   603,   604,   605,   606,   607,   608,
   609,   610,   611,   756,   754,   755,   372,   373,   374,   375,
   269,   401,   765,   213,   214,   215,   216,   270,   271,   219,
   220,   221,    74,   543,  1059,   222,  1480,   376,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
   377,   378,   379,   380,   381,   208,   209,   210,   211,   212,
   404,   382,  1077,   808,   383,   213,   214,   215,   216,   270,
   271,   219,   220,   221,   384,   385,   821,   222,   823,   824,
   403,   386,   387,   388,   948,   389,   833,   834,   835,   836,
   837,   838,   839,   840,   841,   842,   843,   844,   390,   391,
   832,   421,   392,   417,   393,   853,   854,   394,   855,    74,
    75,   115,   395,   116,   857,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,   396,   117,   397,
   398,   418,   436,   441,   472,   473,   983,   475,   478,   483,
   208,   209,   210,   211,   212,   507,   508,   894,   509,   896,
   213,   214,   215,   216,   270,   271,   219,   220,   221,   899,
   510,   511,   222,   512,   904,   905,   513,   514,   515,   545,
   546,   516,   517,   518,   519,   919,   100,   921,   520,   923,
   547,   521,   522,   158,   523,   524,   525,   526,   527,   528,
   208,   209,   210,   211,   212,   529,   530,   939,   940,   531,
   213,   214,   215,   216,   270,   271,   219,   220,   221,   952,
   532,   954,   222,   533,   534,   535,   536,   542,   539,   589,
   541,   964,   540,   556,   557,   559,   561,   563,   971,   972,
   973,   562,   592,   564,   566,   978,   567,   569,   593,   982,
   570,   984,   571,   576,   625,   626,   627,   628,   118,   119,
   120,   121,   997,   630,   640,   641,    98,    99,   642,   643,
   644,   645,   646,   100,   647,   122,   123,   101,  1002,   406,
   648,   649,   124,   650,   651,   652,   653,   654,   655,  1011,
  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,  1020,  1021,
  1022,   656,   657,   658,   659,   660,   661,   671,   687,  1031,
   676,   662,    74,    75,  1035,   663,   664,   665,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
   672,   666,   667,   692,  1061,  1063,  1065,  1060,  1062,  1064,
  1066,  1067,  1068,  1069,   668,   694,  1074,  1075,   701,   702,
   669,   675,   703,   704,   287,   707,  1080,  1081,  1082,   292,
   407,   670,   708,   673,   709,   710,   711,   712,   713,   724,
   725,   726,   727,   728,   729,  1099,  1100,   730,   731,   736,
   752,   315,  1104,   741,   746,   319,   320,   753,   757,   758,
   760,   759,  1111,   732,   733,   734,   761,   764,   766,   735,
  1119,   767,   770,   771,   772,  1124,   773,   774,  1127,   208,
   209,   210,   211,   212,   783,   784,   786,   785,   787,   213,
   214,   215,   216,   270,   271,   219,   220,   221,   788,   793,
  1150,   222,   408,   797,   801,   803,   805,   806,   825,  1156,
  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,  1166,
  1167,   847,   852,   856,   858,   862,   889,   863,  1173,    98,
    99,   864,   892,   865,   895,   866,   100,   897,   867,   868,
   101,    74,   543,   285,   869,   871,   874,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,  1190,
   208,   209,   210,   211,   212,   872,   873,   875,   876,   877,
   213,   214,   215,   216,   270,   271,   219,   220,   221,   878,
    74,    75,   222,   879,   881,  1214,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,   880,   898,
  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,   901,
   882,   883,   884,   885,   902,   886,  1248,   903,   887,   888,
   906,   907,   208,   209,   210,   211,   212,   908,   909,  1255,
   910,  1256,   213,   214,   215,   216,   270,   271,   219,   220,
   221,   911,   912,   914,   222,   920,   922,   926,   945,   941,
   951,   953,   957,   956,   959,   993,   958,   960,   962,   963,
   965,   966,  1286,  1287,  1288,  1289,  1290,  1291,  1292,  1293,
  1294,  1296,  1298,  1300,   967,   968,  1303,   969,   545,   546,
   976,   975,   979,   980,   981,   100,  1000,  1001,   992,   547,
  1003,  1029,   158,  1030,  1032,  1036,  1038,  1039,  1040,  1073,
  1041,  1042,  1044,  1050,  1327,  1328,  1045,  1046,  1051,  1052,
  1054,  1083,  1055,  1336,  1337,  1338,  1339,  1340,  1341,  1342,
  1343,  1344,  1345,  1057,  1347,  1107,  1349,    98,    99,  1084,
  1353,  1110,  1112,  1114,   100,  1115,  1101,  1129,   101,  1116,
  1117,  1118,  1120,  1122,  1123,  1125,  1126,  1130,  1128,  1141,
  1144,  1145,  1149,  1365,  1366,  1148,  1170,  1155,  1370,  1371,
  1372,  1373,  1374,  1375,  1171,    26,    27,    28,    29,    30,
    31,    32,    33,  1174,    34,  1178,    36,    37,  1175,    39,
    40,  1393,  1176,  1186,  1187,  1179,  1397,  1398,  1399,  1400,
  1401,  1402,  1404,  1406,  1408,    51,  1183,  1181,  1185,  1191,
  1193,  1194,  1197,  1210,  1211,  1219,  1220,  1221,  1223,    52,
    53,  1224,  1225,  1226,  1427,  1428,  1429,  1430,  1431,  1432,
  1433,  1227,  1435,  1231,  1437,  1273,  1277,   690,   691,  1246,
   693,  1249,  1250,  1278,   695,   696,  1247,  1251,  1252,  1253,
  1269,  1280,  1447,  1448,  1449,  1254,  1270,  1283,  1257,  1284,
  1326,  1331,  1332,  1333,  1259,  1334,  1461,  1462,  1463,  1465,
  1467,  1469,  1301,  1271,  1302,  1304,   409,    60,  1305,  1309,
  1306,  1307,  1335,  1481,  1482,  1483,  1484,  1308,  1486,  1310,
  1488,  1346,  1348,  1350,  1351,  1354,  1355,  1382,  1383,   678,
  1394,   739,  1390,  1381,   742,  1424,  1391,  1392,  1411,  1426,
  1502,  1504,  1506,  1434,  1436,  1438,   465,  1485,  1487,  1513,
  1489,  1515,  1490,  1517,   762,   763,  1494,  1514,  1410,  1516,
   768,   769,  1518,  1457,    74,    75,  1439,   775,  1453,   782,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,  1458,   680,  1459,  1470,   802,  1520,   804,  1498,
  1499,  1500,  1521,   723,    65,    66,   809,   810,   811,    67,
  1232,   814,   815,   816,   817,   818,   819,   820,    74,   893,
   944,     0,     0,     0,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,   208,   209,   210,   211,
   212,   682,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,   699,     0,     0,   222,   208,
   209,   210,   211,   212,   684,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,     0,     0,   685,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   700,     0,   100,   222,
     0,     0,   101,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,   722,     0,     0,   222,   946,     0,     0,   950,
     0,     0,     0,     0,   955,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    98,    99,     0,     0,     0,
     0,     0,   100,   974,   998,     0,   101,     0,     0,     0,
     0,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,   208,   209,   210,   211,   212,   999,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,   208,   209,   210,
   211,   212,  1131,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,     0,     0,  1133,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,  1135,
     0,     0,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,  1137,     0,     0,     0,     0,
     0,     0,     0,     0,   208,   209,   210,   211,   212,     0,
  1102,     0,     0,  1103,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,     0,  1138,     0,  1121,     0,     0,     0,     0,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,  1139,     0,
     0,   222,   208,   209,   210,   211,   212,     0,  1154,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,  1140,     0,   222,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,  1172,     0,   222,     0,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
   479,   222,     0,     0,     0,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,  1212,  1213,   505,   222,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   208,   209,   210,   211,   212,     0,     0,     0,
   572,  1233,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,   208,   209,
   210,   211,   212,   743,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,   208,   209,   210,   211,   212,     0,     0,   807,
  1272,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,  1285,   222,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,  1330,
   222,     0,     0,     0,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,  1369,
   222,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,  1395,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,     0,  1425,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,     0,    36,    37,     0,    39,
    40,    -3,    22,     0,     0,    23,   208,   209,   210,   211,
   212,     0,     0,  1446,     0,    51,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,  1460,   222,    52,
    53,     0,    24,   352,    25,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
    40,     0,     0,     0,    41,    42,    43,    44,    45,    46,
     0,    47,    48,    49,    50,    51,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   224,     0,     0,    52,
    53,     0,     0,     0,     0,     0,    54,    60,    55,    56,
     0,    57,    58,    59,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,     0,    39,    40,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    51,     0,   469,     0,     0,     0,
     0,     0,   225,   226,   227,     0,     0,    60,    52,    53,
   228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     0,     0,     0,     0,     0,     0,     0,     0,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
   249,   250,   251,   252,   253,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,    60,   222,   208,   209,
   210,   211,   212,     0,     0,     0,     0,   686,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,   208,   209,   210,   211,   212,     0,     0,     0,     0,
   747,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,   208,   209,   210,   211,   212,     0,
     0,     0,     0,   822,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,   208,   209,   210,
   211,   212,     0,     0,     0,     0,  1058,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
   208,   209,   210,   211,   212,     0,     0,     0,     0,  1281,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,   916,     0,     0,   917,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1078,     0,     0,  1079,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1229,     0,     0,  1230,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,   208,   209,   210,   211,   212,     0,   423,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,   208,   209,   210,   211,
   212,     0,   428,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,   208,
   209,   210,   211,   212,     0,   430,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,   208,   209,   210,   211,   212,     0,   577,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,   208,   209,   210,   211,   212,
     0,   581,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,   208,   209,
   210,   211,   212,     0,   582,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,   208,   209,   210,   211,   212,     0,   718,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,   208,   209,   210,   211,   212,     0,
   913,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,   208,   209,   210,
   211,   212,     0,   949,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
  1106,     0,     0,     0,     0,     0,  1105,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,   208,   209,   210,   211,   212,     0,  1146,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,   208,   209,   210,   211,
   212,     0,  1151,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,   208,
   209,   210,   211,   212,     0,  1152,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,   208,   209,   210,   211,   212,     0,  1153,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,   208,   209,   210,   211,   212,
     0,  1168,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,   208,   209,
   210,   211,   212,     0,  1169,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,  1274,     0,     0,     0,     0,     0,  1192,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,   208,   209,   210,   211,   212,     0,
  1282,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,   208,   209,   210,
   211,   212,     0,  1380,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
   208,   209,   210,   211,   212,     0,  1409,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,   452,   352,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   422,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   424,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   425,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   427,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   431,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   432,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   437,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   474,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   477,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   484,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   485,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   486,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   487,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   488,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   489,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   490,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   491,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   492,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   493,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   494,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   496,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   497,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   498,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   499,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   500,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   501,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   565,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   568,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   578,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   579,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   583,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   584,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   585,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   586,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   587,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   629,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   633,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   688,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   748,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   749,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,   750,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,   751,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,   790,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,   848,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,   915,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,  1043,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,  1047,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,  1049,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,  1180,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,  1182,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,  1184,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,  1207,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,  1208,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,  1209,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,  1362,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,  1363,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,  1364,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,  1443,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,     0,  1444,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,     0,  1445,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,     0,  1491,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,     0,  1492,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
     0,  1493,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,   452,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,   453,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,   495,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,   502,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,   503,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
   506,     0,     0,   504,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,   595,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
   596,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,   597,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,   716,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,   717,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,   845,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,   846,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,   859,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,   860,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,   900,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,   927,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
   928,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,   929,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,   930,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,   931,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,   932,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,   933,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,   934,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,   935,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,   936,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,   937,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
   938,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,   995,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1023,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1024,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1037,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1048,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1053,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1056,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1076,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,  1087,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
  1088,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,  1089,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1090,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1091,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1092,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1093,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1094,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1095,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1096,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,  1097,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
  1098,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,  1147,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1177,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1198,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1199,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1200,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1201,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1202,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1203,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,  1204,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
  1205,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,  1206,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1260,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1261,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1262,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1263,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1264,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1265,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1266,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,  1267,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
  1268,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,  1311,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1312,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1313,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1314,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1315,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1316,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1317,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1318,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,  1319,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
  1352,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,  1356,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1357,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1358,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1359,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1360,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1361,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1379,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1384,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,  1385,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
  1386,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,  1387,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1388,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1389,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1412,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1413,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1414,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1415,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,     0,  1416,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
     0,     0,     0,  1417,   208,   209,   210,   211,   212,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   270,   271,
   219,   220,   221,     0,     0,     0,   222,     0,     0,     0,
  1440,   208,   209,   210,   211,   212,     0,     0,     0,     0,
     0,   213,   214,   215,   216,   270,   271,   219,   220,   221,
     0,     0,     0,   222,     0,     0,     0,  1441,   208,   209,
   210,   211,   212,     0,     0,     0,     0,     0,   213,   214,
   215,   216,   270,   271,   219,   220,   221,     0,     0,     0,
   222,     0,     0,     0,  1442,   208,   209,   210,   211,   212,
     0,     0,     0,     0,     0,   213,   214,   215,   216,   270,
   271,   219,   220,   221,     0,     0,     0,   222,     0,     0,
     0,  1454,   208,   209,   210,   211,   212,     0,     0,     0,
     0,     0,   213,   214,   215,   216,   270,   271,   219,   220,
   221,     0,     0,     0,   222,     0,     0,     0,  1455,   208,
   209,   210,   211,   212,     0,     0,     0,     0,     0,   213,
   214,   215,   216,   270,   271,   219,   220,   221,     0,     0,
     0,   222,     0,     0,     0,  1456,   208,   209,   210,   211,
   212,     0,     0,     0,     0,     0,   213,   214,   215,   216,
   270,   271,   219,   220,   221,     0,     0,     0,   222,     0,
     0,     0,  1471,   208,   209,   210,   211,   212,     0,     0,
     0,     0,     0,   213,   214,   215,   216,   270,   271,   219,
   220,   221,     0,     0,     0,   222,     0,     0,     0,  1472,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222,     0,     0,  1367,  1473,   208,   209,   210,
   211,   212,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   270,   271,   219,   220,   221,     0,     0,     0,   222,
   208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
   213,   214,   215,   216,   270,   271,   219,   220,   221,     0,
     0,     0,   222
};

static const short yycheck[] = {     7,
   112,   309,  1009,     4,     4,    38,   941,     6,  1071,     7,
    81,     4,     4,    60,     4,    23,     4,     4,    65,    60,
    59,    59,   141,     6,    65,    60,     4,     4,     4,   172,
    65,    42,    43,   176,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,   160,   161,     6,     6,
   160,   161,   866,   160,   161,     6,     7,   160,   161,   168,
   174,   875,    45,   173,     6,   174,     6,   174,   882,   172,
    63,    63,   175,    63,    34,     6,    63,    37,    38,   171,
    40,   168,   174,   160,   161,   160,   161,   174,   160,   161,
    98,    99,   100,   101,   102,   172,    84,    84,   175,   174,
   171,   173,  1037,   166,     6,   168,     6,     6,   116,     7,
   118,   119,   120,   121,     6,    96,    97,    98,    99,   100,
     6,   129,   130,   131,   132,  1188,   134,   135,   175,   137,
   138,   139,   171,   141,   175,   174,   174,     7,   171,     6,
   160,   161,   153,   175,     6,   156,   160,   161,     6,   157,
   158,   162,   172,     6,   152,   153,   154,   155,   172,   160,
   161,   160,   161,    37,    38,   173,    40,   175,     6,   177,
   171,   169,   170,   174,   174,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   174,   174,   174,   171,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   174,   174,   160,   161,
   160,   161,   169,   170,  1038,  1232,     3,     4,  1042,   160,
   161,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,   152,   153,   154,   155,   160,   161,
   160,   161,   270,   271,   160,   161,   160,   161,   160,   161,
   278,   169,   170,   281,   160,   161,   172,   285,   172,   175,
   171,   289,   290,   291,   171,   293,   294,   295,   296,   297,
   298,   299,   172,   173,   171,   306,   307,   160,   161,   160,
   161,   160,   161,   311,   312,   313,   317,     0,     1,   172,
     3,   172,     6,   172,    34,   323,    34,    37,    38,    37,
   328,     3,     4,     5,    51,    52,   171,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   160,
   161,   162,   163,   164,    42,   172,   171,   168,   175,   174,
  1174,  1175,  1176,  1177,   172,   173,   171,  1181,     6,   146,
   147,   148,   149,   150,   172,   172,   171,   175,   175,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    38,   172,
   167,   168,   175,   172,   171,   171,   175,   174,   171,   410,
   411,   412,   410,   411,   412,   413,   414,   172,   172,   417,
   175,   175,    50,   421,   172,   169,   170,   175,   111,   112,
   113,   114,   115,   116,   117,   118,    38,    38,   436,    53,
    54,    55,    56,   441,    58,  1249,  1250,    40,   449,  1253,
     0,     1,   174,     3,   452,   453,   162,   163,   164,     8,
   174,   174,   168,   461,   149,   150,    38,   174,     6,     5,
   468,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   478,   479,   171,   168,   172,   483,     6,   175,   160,   161,
   172,   172,     4,   175,   175,   167,     4,   495,   172,   171,
  1304,   175,   174,    38,   502,   503,   504,   505,   172,   172,
   172,   175,   175,   175,   171,   176,   171,   171,   146,   147,
   148,   149,   150,   171,   171,   171,   171,   825,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   171,   171,   171,
   168,   171,   171,     5,   542,   546,   171,   545,   546,   547,
  1354,   171,   171,   171,   171,   171,   171,     8,   171,   171,
   561,   111,   112,   113,   114,   115,   116,   117,   118,     6,
     6,   673,   171,   171,   572,   573,     6,     5,   174,  1383,
   171,   171,   171,   171,   171,   171,    86,   137,   138,   174,
   140,   589,   174,   171,   595,   596,   597,   146,   147,   148,
   149,   150,   171,   171,   174,   176,     6,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   174,   174,   171,   168,
   168,     5,   173,     5,   171,   171,   175,   625,   626,   171,
   628,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,   644,   642,   643,   171,   171,   171,   171,
     6,   172,   653,   156,   157,   158,   159,   160,   161,   162,
   163,   164,     3,     4,     5,   168,  1470,   171,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
   171,   171,   171,   171,   171,   146,   147,   148,   149,   150,
     6,   171,  1000,   701,   171,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   171,   171,   714,   168,   716,   717,
   172,   171,   171,   171,   175,   171,   724,   725,   726,   727,
   728,   729,   730,   731,   732,   733,   734,   735,   171,   171,
   175,   172,   171,   177,   171,   743,   744,   171,   746,     3,
     4,     5,   171,     7,   752,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,   171,    32,   171,
   171,   176,     7,     7,     7,     7,   888,    82,   174,   177,
   146,   147,   148,   149,   150,     5,     5,   795,     5,   800,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   807,
     5,     5,   168,     5,   812,   813,     5,     5,     5,   160,
   161,     5,     5,     5,     5,   826,   167,   828,     5,   830,
   171,     5,     5,   174,     5,     5,     5,     5,     5,     5,
   146,   147,   148,   149,   150,     5,   129,   845,   846,     5,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   857,
     5,   859,   168,     5,     5,     3,     5,   172,     5,   177,
     5,   869,     6,     6,     6,     4,     7,     7,   876,   877,
   878,     6,   175,     7,     7,   883,     6,     6,   175,   887,
     7,   889,     7,     7,   174,   174,     7,   171,   152,   153,
   154,   155,   900,     7,   143,   172,   160,   161,   172,   172,
   172,   172,   172,   167,   172,   169,   170,   171,   916,     6,
   172,   172,   176,   172,   172,   172,   172,   172,   172,   927,
   928,   929,   930,   931,   932,   933,   934,   935,   936,   937,
   938,   172,   172,   172,   172,   172,   172,     5,     7,   947,
     6,   172,     3,     4,   952,   172,   172,   172,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
   173,   172,   172,     7,   985,   986,   987,   985,   986,   987,
   988,   989,   990,   991,   172,     7,   994,   995,   174,     7,
   172,   176,     7,     7,   140,     7,  1004,  1005,  1006,   145,
     6,   172,     7,   172,     7,     7,     7,     7,     7,   171,
   171,   171,   171,   171,   171,  1023,  1024,   171,   171,     6,
   139,   167,  1030,     7,     7,   171,   172,     3,     3,     3,
     3,   162,  1040,   171,   171,   171,     3,     3,     3,   171,
  1048,     3,     3,     3,     3,  1053,     3,     3,  1056,   146,
   147,   148,   149,   150,     3,     5,     3,     5,     3,   156,
   157,   158,   159,   160,   161,   162,   163,   164,     6,   176,
  1078,   168,     6,     6,     6,     6,     6,     6,   174,  1087,
  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,  1097,
  1098,     6,    83,   176,   172,   172,   177,   173,  1106,   160,
   161,   172,   176,   173,     6,   172,   167,     6,   173,   172,
   171,     3,     4,   174,   172,   172,   172,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,  1147,
   146,   147,   148,   149,   150,   173,   173,   172,   172,   172,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   172,
     3,     4,   168,   172,   172,  1173,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,   173,     6,
  1198,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,     6,
   172,   172,   172,   172,     6,   173,  1214,     6,   172,   172,
     6,     6,   146,   147,   148,   149,   150,     6,     6,  1227,
     6,  1229,   156,   157,   158,   159,   160,   161,   162,   163,
   164,     6,     6,   176,   168,     6,     6,     6,    83,     7,
     4,     3,     3,     6,   162,    84,     6,     6,     6,     3,
     6,     3,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,
  1268,  1269,  1270,  1271,     6,     6,  1274,     3,   160,   161,
     3,     6,     3,     3,     6,   167,   174,     4,     7,   171,
   175,   174,   174,    80,     6,   173,   172,   172,   172,   176,
   173,   172,   172,   172,  1302,  1303,   173,   173,   173,   173,
   172,     6,   173,  1311,  1312,  1313,  1314,  1315,  1316,  1317,
  1318,  1319,  1320,   172,  1322,     6,  1324,   160,   161,   174,
  1328,     3,     6,     6,   167,     3,    83,   176,   171,     6,
     6,     6,     6,     6,     6,     3,     6,     6,     5,   176,
     6,     4,   175,  1351,  1352,     5,   174,     6,  1356,  1357,
  1358,  1359,  1360,  1361,   172,    34,    35,    36,    37,    38,
    39,    40,    41,   172,    43,   173,    45,    46,   172,    48,
    49,  1379,   172,     4,    63,   173,  1384,  1385,  1386,  1387,
  1388,  1389,  1390,  1391,  1392,    64,   173,   172,   172,   172,
     6,     6,   172,     6,     6,     6,     6,     6,     6,    78,
    79,     6,     6,     5,  1412,  1413,  1414,  1415,  1416,  1417,
  1418,   177,  1420,     5,  1422,    80,     6,   563,   564,   172,
   566,   172,   172,     6,   570,   571,   175,   173,   173,   172,
   174,     5,  1440,  1441,  1442,   172,   174,     5,   172,     6,
    80,     6,     6,    84,   172,     6,  1454,  1455,  1456,  1457,
  1458,  1459,   175,   174,   174,   172,     6,   136,   172,   175,
   173,   173,     6,  1471,  1472,  1473,  1474,   176,  1476,   175,
  1478,     6,     6,     6,   174,   172,   172,   172,   172,     6,
     6,   627,   174,   145,   630,     6,   174,   174,   173,     6,
  1498,  1499,  1500,     6,     6,     6,   175,     6,     6,  1507,
     6,  1509,   173,  1511,   650,   651,     6,     6,   172,     6,
   656,   657,     6,   174,     3,     4,   172,   663,   172,   665,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,   174,     6,   174,   172,   692,     0,   694,   174,
   174,   174,     0,   599,     6,     6,   702,   703,   704,     6,
  1196,   707,   708,   709,   710,   711,   712,   713,     3,     4,
   850,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,   146,   147,   148,   149,
   150,     6,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   573,    -1,    -1,   168,   146,
   147,   148,   149,   150,     6,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,     6,    -1,   167,   168,
    -1,    -1,   171,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,     6,    -1,    -1,   168,   852,    -1,    -1,   855,
    -1,    -1,    -1,    -1,   860,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   160,   161,    -1,    -1,    -1,
    -1,    -1,   167,   879,     6,    -1,   171,    -1,    -1,    -1,
    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,     6,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,     6,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,    -1,    -1,     6,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,     6,
    -1,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   146,   147,   148,   149,   150,    -1,
  1026,    -1,    -1,  1029,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,    -1,     6,    -1,  1050,    -1,    -1,    -1,    -1,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,     6,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,  1084,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,     6,    -1,   168,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,     6,    -1,   168,    -1,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
     8,   168,    -1,    -1,    -1,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,  1170,  1171,     8,   168,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
     8,  1197,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   146,   147,
   148,   149,   150,     8,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,   146,   147,   148,   149,   150,    -1,    -1,     8,
  1246,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,  1259,   168,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,  1305,
   168,    -1,    -1,    -1,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,  1355,
   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,  1382,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,    -1,  1410,    34,    35,    36,    37,    38,
    39,    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,
    49,     0,     1,    -1,    -1,     4,   146,   147,   148,   149,
   150,    -1,    -1,  1439,    -1,    64,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,  1453,   168,    78,
    79,    -1,    31,   173,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
    49,    -1,    -1,    -1,    53,    54,    55,    56,    57,    58,
    -1,    60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    78,
    79,    -1,    -1,    -1,    -1,    -1,    85,   136,    87,    88,
    -1,    90,    91,    92,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    64,    -1,   175,    -1,    -1,    -1,
    -1,    -1,    93,    94,    95,    -1,    -1,   136,    78,    79,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,    -1,   130,
   131,   132,   133,   134,   135,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,   136,   168,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,   178,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
   178,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,   178,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,   178,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   178,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,    -1,   175,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,    -1,   175,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,    -1,   175,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   175,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   175,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   139,    -1,    -1,    -1,    -1,    -1,   175,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,   175,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,
   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,
   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,   146,   147,   148,   149,   150,    -1,   175,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,
    -1,   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,
   148,   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   139,    -1,    -1,    -1,    -1,    -1,   175,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,   146,   147,   148,   149,   150,    -1,
   175,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,   175,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,   175,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,    -1,   173,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,    -1,   173,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
    -1,   173,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   142,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,
    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,
   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,
   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,   156,   157,   158,   159,   160,   161,   162,   163,   164,
    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,   147,
   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,
   158,   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,
   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,   160,
   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,    -1,
    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,   156,   157,   158,   159,   160,   161,   162,   163,
   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,   161,   162,   163,   164,    -1,    -1,
    -1,   168,    -1,    -1,    -1,   172,   146,   147,   148,   149,
   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,    -1,
    -1,    -1,   172,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,   156,   157,   158,   159,   160,   161,   162,
   163,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168,    -1,    -1,   144,   172,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
   156,   157,   158,   159,   160,   161,   162,   163,   164,    -1,
    -1,    -1,   168
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 156 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 170 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 177 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 194 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 195 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 196 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 197 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 202 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 207 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 218 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 221 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 225 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 231 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 237 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 244 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 250 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 254 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 258 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 265 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 269 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 274 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 278 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 282 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 286 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 290 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 294 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 298 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 302 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 311 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 314 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 318 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 322 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 326 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 330 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 338 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 342 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 345 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 352 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 355 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 365 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 368 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 374 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 375 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 376 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 377 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 378 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 384 "Gmsh.y"
{return 1;;
    break;}
case 64:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 387 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 66:
#line 392 "Gmsh.y"
{
      Msg(PARSER_INFO, yyvsp[-4].c, yyvsp[-2].d); 
    ;
    break;}
case 67:
#line 403 "Gmsh.y"
{ 
      EndView(1, Force_ViewNumber,yyname,yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 68:
#line 407 "Gmsh.y"
{
      EndView(1, Force_ViewNumber,yyname,yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 69:
#line 414 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 82:
#line 433 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 435 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 440 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 445 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 452 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 454 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 459 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 464 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 471 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 473 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 478 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 483 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 490 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 492 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 498 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 504 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 511 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 513 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 519 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 525 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 532 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 534 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 540 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 546 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 553 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 555 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 562 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 571 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 578 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 580 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 587 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 596 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 603 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 605 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 612 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 621 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 628 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 630 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 638 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 647 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 654 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 656 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 664 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 673 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 680 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 682 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 690 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 699 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 715 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 131:
#line 721 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val += 1. ;
    ;
    break;}
case 132:
#line 729 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      else
	pSymbol->val -= 1. ;
    ;
    break;}
case 133:
#line 737 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val += yyvsp[-1].d ;
    ;
    break;}
case 134:
#line 745 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val -= yyvsp[-1].d ;
    ;
    break;}
case 135:
#line 753 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val *= yyvsp[-1].d ;
    ;
    break;}
case 136:
#line 761 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      else
	pSymbol->val /= yyvsp[-1].d ;
    ;
    break;}
case 137:
#line 772 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  *pStrOpt = yyvsp[-1].c ;
	}
      }
    ;
    break;}
case 138:
#line 785 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pStrViewOpt = Get_StringViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown String Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  strcpy(pStrViewOpt, yyvsp[-1].c) ;
	}
      }
    ;
    break;}
case 139:
#line 803 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 140:
#line 820 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt = yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt = (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt = (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt = (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 141:
#line 841 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 142:
#line 858 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt += (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 143:
#line 879 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 144:
#line 896 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 145:
#line 917 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 146:
#line 934 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt *= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt *= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt *= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt *= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 147:
#line 955 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-3].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 148:
#line 972 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt /= yyvsp[-1].d ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt /= (float)yyvsp[-1].d ; break ;
	  case GMSH_LONG : *(long*)pNumOpt /= (long)yyvsp[-1].d ; break ;
	  case GMSH_INT : *(int*)pNumOpt /= (int)yyvsp[-1].d ; break ;
	  }
	}
      }
    ;
    break;}
case 149:
#line 993 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 150:
#line 1010 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt += 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt += 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt += 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt += 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1031 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-2].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1048 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : *(double*)pNumOpt -= 1. ; break ;
	  case GMSH_FLOAT : *(float*)pNumOpt -= 1. ; break ;
	  case GMSH_LONG : *(long*)pNumOpt -= 1 ; break ;
	  case GMSH_INT : *(int*)pNumOpt -= 1 ; break ;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1071 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 154:
#line 1096 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] = yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] = (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] = (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] = (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 155:
#line 1125 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 156:
#line 1150 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] += yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] += (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] += (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] += (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 157:
#line 1179 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[-3].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<4; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 158:
#line 1204 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-6].d, yyvsp[-3].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-10].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3; j++) ((double*)pArrOpt)[j] -= yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3; j++) ((float*)pArrOpt)[j] -= (float)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_LONG :
	    for(j=0 ; j<3; j++) ((long*)pArrOpt)[j] -= (long)yyvsp[-1].v[j] ;
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3; j++) ((int*)pArrOpt)[j] -= (int)yyvsp[-1].v[j] ;
	    break ;
	  }
	}
      }
    ;
    break;}
case 159:
#line 1235 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else{
	  *pColOpt = yyvsp[-1].u ;
	}
      }
    ;
    break;}
case 160:
#line 1248 "Gmsh.y"
{
      if(strcmp(yyvsp[-10].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-10].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-6].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-6].d);
	else{
	  ct->size = List_Nbr(yyvsp[-1].l);
	  if(ct->size > COLORTABLE_NBMAX_COLOR)
	    vyyerror("Too Many (%d>%d) Colors in Post.View[%d].Color", 
		     ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	  else
	    for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	}
      }
    ;
    break;}
case 161:
#line 1277 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1284 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1290 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 164:
#line 1309 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 165:
#line 1320 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 166:
#line 1328 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1334 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1340 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 169:
#line 1359 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1365 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 171:
#line 1382 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 172:
#line 1388 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1394 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 174:
#line 1400 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1406 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1412 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 177:
#line 1431 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 178:
#line 1443 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1449 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 180:
#line 1468 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 181:
#line 1491 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 182:
#line 1499 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 183:
#line 1503 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1509 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1515 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 186:
#line 1527 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 187:
#line 1533 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 188:
#line 1539 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 189:
#line 1552 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 190:
#line 1557 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 191:
#line 1562 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1567 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 193:
#line 1574 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 194:
#line 1575 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 195:
#line 1576 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 196:
#line 1581 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 197:
#line 1585 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 198:
#line 1597 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 199:
#line 1615 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 200:
#line 1630 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;
	strcpy(tmpstring, ThePathForIncludes);
	if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,yyvsp[-1].c);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", yyvsp[-1].c) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){

	if(!CTX.interactive){ // we're in interactive mode
	  char ext[6];
	  strcpy(ext,yyvsp[-1].c+(strlen(yyvsp[-1].c)-4));
	  Replot();
	  extern void CreateImage (char *name, FILE *fp);
	  FILE *fp = 0;
	  if(!strcmp(ext,".gif")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type = PRINT_GL2GIF;
	  }
	  else if(!strcmp(ext,".eps")){
	    fp = fopen(yyvsp[-1].c,"w");
	    CTX.print.type =  PRINT_GL2PS_RECURSIVE;
	  } 
	  else if(!strcmp(ext,".xpm")){
	    fp = fopen(yyvsp[-1].c,"wb");
	    CTX.print.type =  PRINT_XDUMP;
	    CTX.print.format = FORMAT_XPM;
	  } 
	  if(fp){
	    CreateImage(yyvsp[-1].c,fp);
	    fclose(fp);
	  }
	}
	
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Save")){

	Print_Mesh(THEM, yyvsp[-1].c, CTX.mesh.format);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 201:
#line 1698 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	extern long Get_AnimTime();
	long sleep_time = Get_AnimTime();
	while(1){
	  if(Get_AnimTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	Maillage_Dimension_0(THEM);
	mai3d(THEM,(int)yyvsp[-1].d);
  
      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 202:
#line 1718 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 203:
#line 1722 "Gmsh.y"
{
      if(!CTX.interactive){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	}
	else{
	  Init();
	  Draw();
	}
      }
    ;
    break;}
case 204:
#line 1743 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
    LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 205:
#line 1757 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
    LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 206:
#line 1771 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
    LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;

    TheSymbol.Name = yyvsp[-6].c;
    TheSymbol.val  = yyvsp[-3].d;
    if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
      List_Add(Symbol_L,&TheSymbol);
    else
      pSymbol->val = yyvsp[-3].d;

    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 207:
#line 1793 "Gmsh.y"
{
    FILE* ff;
    if(RecursionLevel)
      ff = yyinTab[RecursionLevel-1];
    else
      ff = yyin;
    // here, we seek remember the position in yyin
    LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
    LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
    LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
    LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

    TheSymbol.Name = yyvsp[-8].c;
    TheSymbol.val  = yyvsp[-5].d;
    if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
      List_Add(Symbol_L,&TheSymbol);
    else
      pSymbol->val = yyvsp[-5].d;

    fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
  ;
    break;}
case 208:
#line 1815 "Gmsh.y"
{
    if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
       LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;

        LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];

	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  pSymbol->val += LoopControlVariablesTab[ImbricatedLoop-1][2];
	}

        fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
    else
      {
	ImbricatedLoop--;
      }
  ;
    break;}
case 209:
#line 1841 "Gmsh.y"
{
    if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
      {
	vyyerror("Error while exiting function");
      }
  ;
    break;}
case 210:
#line 1848 "Gmsh.y"
{
    if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
      {
	vyyerror("Unknown Function %s",yyvsp[-1].c);
      }
  ;
    break;}
case 211:
#line 1855 "Gmsh.y"
{
    // skip everything until return is found
    if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
      {
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      }
    void skip_until(char *until);
    skip_until("Return");
  ;
    break;}
case 212:
#line 1873 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 213:
#line 1878 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 214:
#line 1884 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 215:
#line 1888 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 216:
#line 1892 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 217:
#line 1896 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 218:
#line 1900 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 219:
#line 1905 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 220:
#line 1913 "Gmsh.y"
{
    ;
    break;}
case 221:
#line 1916 "Gmsh.y"
{
    ;
    break;}
case 222:
#line 1922 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 223:
#line 1939 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 224:
#line 1950 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 225:
#line 1967 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 226:
#line 1984 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 227:
#line 2001 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 228:
#line 2022 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 229:
#line 2042 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 230:
#line 2062 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 231:
#line 2079 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 232:
#line 2104 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 233:
#line 2116 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 234:
#line 2117 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 235:
#line 2118 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 236:
#line 2119 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 2120 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 238:
#line 2124 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 239:
#line 2125 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 240:
#line 2126 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 241:
#line 2127 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 242:
#line 2128 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 243:
#line 2129 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 244:
#line 2130 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 245:
#line 2131 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 246:
#line 2132 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d ;     ;
    break;}
case 247:
#line 2133 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 248:
#line 2134 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 249:
#line 2135 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 250:
#line 2136 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 251:
#line 2137 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 252:
#line 2138 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 253:
#line 2139 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 254:
#line 2140 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 255:
#line 2141 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 256:
#line 2142 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 257:
#line 2143 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 258:
#line 2144 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 259:
#line 2145 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2146 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 261:
#line 2147 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 262:
#line 2148 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2149 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 264:
#line 2150 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 265:
#line 2151 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2152 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 267:
#line 2153 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2154 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 269:
#line 2155 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2156 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2157 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2158 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2159 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 274:
#line 2160 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2161 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 276:
#line 2162 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 277:
#line 2163 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 278:
#line 2164 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 279:
#line 2168 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 280:
#line 2169 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 281:
#line 2171 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 282:
#line 2180 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[0].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 283:
#line 2197 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = *(double*)pNumOpt ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt) ; break ;
	  }
	}
      }
    ;
    break;}
case 284:
#line 2218 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 285:
#line 2235 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt += 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt += 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt += 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt += 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 286:
#line 2256 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
      else{
	if(!(pNumOpt = Get_NumberOption(yyvsp[-1].c, pNumCat, &i)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 287:
#line 2273 "Gmsh.y"
{
      if(strcmp(yyvsp[-8].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt = Get_NumberViewOption((int)yyvsp[-4].d, yyvsp[-1].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-4].d);
	  else	    vyyerror("Unknown Numeric Option '%s.View[%d].%s'", 
			     yyvsp[-8].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE : yyval.d = (*(double*)pNumOpt -= 1.) ; break ;
	  case GMSH_FLOAT : yyval.d = (double)(*(float*)pNumOpt -= 1.) ; break ;
	  case GMSH_LONG : yyval.d = (double)(*(long*)pNumOpt -= 1) ; break ;
	  case GMSH_INT : yyval.d = (double)(*(int*)pNumOpt -= 1) ; break ;
	  }
	}
      }
    ;
    break;}
case 288:
#line 2296 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 289:
#line 2302 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-4].d)) ;
      }
      else 
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 290:
#line 2316 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 291:
#line 2320 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 292:
#line 2324 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 293:
#line 2328 "Gmsh.y"
{ 
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2332 "Gmsh.y"
{
      for(i=0 ; i<6 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 295:
#line 2338 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 296:
#line 2342 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2346 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 298:
#line 2350 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 299:
#line 2354 "Gmsh.y"
{
      if(!(pArrCat = Get_ArrayOptionCategory(yyvsp[-2].c)))
	vyyerror("Unknown Array Option Class '%s'", yyvsp[-2].c);
      else{
	if(!(pArrOpt = Get_ArrayOption(yyvsp[0].c, pArrCat, &i)))
	  vyyerror("Unknown Array Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<4 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 300:
#line 2380 "Gmsh.y"
{
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pArrOpt = Get_ArrayViewOption((int)yyvsp[-3].d, yyvsp[0].c, &i))){
	  if(i < 0) vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	  else	    vyyerror("Unknown Array Option '%s.View[%d].%s'", 
			     yyvsp[-7].c, (int)yyvsp[-3].d, yyvsp[0].c);
	}
	else{
	  switch(i){
	  case GMSH_DOUBLE :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = ((double*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_FLOAT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((float*)pArrOpt)[j] ;
	    break ;
	  case GMSH_LONG : 
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  case GMSH_INT :
	    for(j=0 ; j<3 ; j++) yyval.v[j] = (double)((int*)pArrOpt)[j] ; 
	    break ;
	  }
	  yyval.v[3] = 0. ;
	  yyval.v[4] = 1. ;
	}
      }
    ;
    break;}
case 301:
#line 2413 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2416 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2422 "Gmsh.y"
{
    ;
    break;}
case 304:
#line 2425 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2431 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2434 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 307:
#line 2438 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 308:
#line 2445 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 309:
#line 2450 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 310:
#line 2457 "Gmsh.y"
{
    ;
    break;}
case 311:
#line 2460 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 312:
#line 2466 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 313:
#line 2474 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 314:
#line 2479 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 315:
#line 2488 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 316:
#line 2492 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 317:
#line 2503 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 318:
#line 2507 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 319:
#line 2511 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 320:
#line 2516 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 321:
#line 2521 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pColOpt = Get_ColorOption(yyvsp[0].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.%s'", yyvsp[-4].c, yyvsp[0].c);
	else{
	  yyval.u = *pColOpt ;
	}
      }
    ;
    break;}
case 322:
#line 2537 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 323:
#line 2541 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      if(strcmp(yyvsp[-7].c, "PostProcessing"))
	vyyerror("Unknown View Option Class '%s'", yyvsp[-7].c);
      else{
	ColorTable *ct = Get_ColorTableViewOption((int)yyvsp[-3].d);
	if(!ct)
	  vyyerror("PostProcessing View %d does not Exist", (int)yyvsp[-3].d);
	else{
	  for(i=0 ; i<ct->size ; i++) 
	    List_Add(ListOfColor_L, &ct->table[i]);
	}
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 324:
#line 2563 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 325:
#line 2571 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 326:
#line 2578 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 327:
#line 2582 "Gmsh.y"
{
      sprintf(tmpstring, yyvsp[-3].c, yyvsp[-1].d);
      yyval.c = (char*)Malloc(strlen(tmpstring));
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2589 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

