
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipsis	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTransfinite	305
#define	tComplex	306
#define	tPhysical	307
#define	tUsing	308
#define	tBump	309
#define	tProgression	310
#define	tPlugin	311
#define	tRotate	312
#define	tTranslate	313
#define	tSymmetry	314
#define	tDilate	315
#define	tExtrude	316
#define	tDuplicata	317
#define	tLoop	318
#define	tRecombine	319
#define	tDelete	320
#define	tCoherence	321
#define	tIntersect	322
#define	tAttractor	323
#define	tLayers	324
#define	tScalarTetrahedron	325
#define	tVectorTetrahedron	326
#define	tTensorTetrahedron	327
#define	tScalarTriangle	328
#define	tVectorTriangle	329
#define	tTensorTriangle	330
#define	tScalarLine	331
#define	tVectorLine	332
#define	tTensorLine	333
#define	tScalarPoint	334
#define	tVectorPoint	335
#define	tTensorPoint	336
#define	tBSpline	337
#define	tNurbs	338
#define	tOrder	339
#define	tWith	340
#define	tBounds	341
#define	tKnots	342
#define	tColor	343
#define	tColorTable	344
#define	tFor	345
#define	tIn	346
#define	tEndFor	347
#define	tIf	348
#define	tEndIf	349
#define	tExit	350
#define	tReturn	351
#define	tCall	352
#define	tFunction	353
#define	tMesh	354
#define	tB_SPLINE_SURFACE_WITH_KNOTS	355
#define	tB_SPLINE_CURVE_WITH_KNOTS	356
#define	tCARTESIAN_POINT	357
#define	tTRUE	358
#define	tFALSE	359
#define	tUNSPECIFIED	360
#define	tU	361
#define	tV	362
#define	tEDGE_CURVE	363
#define	tVERTEX_POINT	364
#define	tORIENTED_EDGE	365
#define	tPLANE	366
#define	tFACE_OUTER_BOUND	367
#define	tEDGE_LOOP	368
#define	tADVANCED_FACE	369
#define	tVECTOR	370
#define	tDIRECTION	371
#define	tAXIS2_PLACEMENT_3D	372
#define	tISO	373
#define	tENDISO	374
#define	tENDSEC	375
#define	tDATA	376
#define	tHEADER	377
#define	tFILE_DESCRIPTION	378
#define	tFILE_SCHEMA	379
#define	tFILE_NAME	380
#define	tMANIFOLD_SOLID_BREP	381
#define	tCLOSED_SHELL	382
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	383
#define	tFACE_BOUND	384
#define	tCYLINDRICAL_SURFACE	385
#define	tCONICAL_SURFACE	386
#define	tCIRCLE	387
#define	tTRIMMED_CURVE	388
#define	tGEOMETRIC_SET	389
#define	tCOMPOSITE_CURVE_SEGMENT	390
#define	tCONTINUOUS	391
#define	tCOMPOSITE_CURVE	392
#define	tTOROIDAL_SURFACE	393
#define	tPRODUCT_DEFINITION	394
#define	tPRODUCT_DEFINITION_SHAPE	395
#define	tSHAPE_DEFINITION_REPRESENTATION	396
#define	tELLIPSE	397
#define	tTrimmed	398
#define	tSolid	399
#define	tEndSolid	400
#define	tVertex	401
#define	tFacet	402
#define	tNormal	403
#define	tOuter	404
#define	tLoopSTL	405
#define	tEndLoop	406
#define	tEndFacet	407
#define	tAFFECTPLUS	408
#define	tAFFECTMINUS	409
#define	tAFFECTTIMES	410
#define	tAFFECTDIVIDE	411
#define	tOR	412
#define	tAND	413
#define	tEQUAL	414
#define	tNOTEQUAL	415
#define	tAPPROXEQUAL	416
#define	tLESSOREQUAL	417
#define	tGREATEROREQUAL	418
#define	tCROSSPRODUCT	419
#define	tPLUSPLUS	420
#define	tMINUSMINUS	421
#define	UNARYPREC	422

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.108 2001-08-13 18:38:55 geuzaine Exp $

  //
  // Generaliser sprintf avec des chaines de caracteres
  // 

#include <stdarg.h>
#ifndef _NOPLUGIN
#include "PluginManager.h"
#endif
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][256];
static char           tmpstring[256];
static char           tmpstring2[256], tmpstring3[256];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);
static Post_View      *View;

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 74 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1542
#define	YYFLAG		-32768
#define	YYNTBASE	187

#define YYTRANSLATE(x) ((unsigned)(x) <= 422 ? yytranslate[x] : 270)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   174,     2,     2,     2,   172,     2,     2,   179,
   180,   170,   168,   184,   169,   183,   171,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   164,
     2,   166,   158,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   181,     2,   182,   178,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   185,     2,   186,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   159,   160,   161,   162,   163,   165,   167,   173,   175,
   176,   177
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   531,   539,   546,
   555,   556,   559,   562,   565,   568,   571,   574,   577,   580,
   583,   586,   589,   592,   594,   598,   599,   613,   615,   619,
   620,   634,   636,   640,   641,   655,   657,   661,   662,   682,
   684,   688,   689,   709,   711,   715,   716,   736,   738,   742,
   743,   769,   771,   775,   776,   802,   804,   808,   809,   835,
   837,   841,   842,   874,   876,   880,   881,   913,   915,   919,
   920,   952,   954,   956,   958,   960,   962,   964,   966,   971,
   979,   989,   996,  1000,  1007,  1014,  1024,  1031,  1041,  1047,
  1056,  1065,  1077,  1084,  1094,  1104,  1114,  1122,  1131,  1144,
  1151,  1157,  1165,  1173,  1186,  1194,  1202,  1212,  1230,  1239,
  1248,  1256,  1268,  1274,  1283,  1296,  1305,  1328,  1349,  1358,
  1367,  1373,  1382,  1390,  1399,  1405,  1417,  1423,  1433,  1435,
  1437,  1439,  1440,  1443,  1448,  1453,  1460,  1464,  1468,  1472,
  1480,  1483,  1486,  1493,  1502,  1511,  1522,  1524,  1527,  1529,
  1533,  1538,  1540,  1549,  1562,  1571,  1584,  1593,  1606,  1607,
  1620,  1621,  1638,  1640,  1643,  1653,  1656,  1663,  1673,  1683,
  1692,  1701,  1710,  1717,  1722,  1725,  1728,  1730,  1732,  1734,
  1736,  1738,  1740,  1744,  1747,  1750,  1753,  1757,  1761,  1765,
  1769,  1773,  1777,  1781,  1785,  1789,  1793,  1797,  1801,  1805,
  1809,  1815,  1820,  1825,  1830,  1835,  1840,  1845,  1850,  1855,
  1860,  1865,  1872,  1877,  1882,  1887,  1892,  1897,  1902,  1909,
  1916,  1923,  1928,  1930,  1932,  1934,  1936,  1938,  1943,  1946,
  1952,  1956,  1963,  1968,  1976,  1978,  1981,  1984,  1988,  1992,
  2004,  2014,  2022,  2030,  2031,  2035,  2037,  2041,  2042,  2046,
  2050,  2052,  2056,  2058,  2060,  2064,  2069,  2073,  2079,  2083,
  2088,  2095,  2103,  2105,  2107,  2111,  2115,  2125,  2133,  2135,
  2141,  2145,  2152,  2154,  2158,  2160,  2167,  2172,  2177,  2184,
  2191
};

static const short yyrhs[] = {   190,
     0,   189,     0,   195,     0,     1,     6,     0,     3,     0,
   169,     3,     0,   145,     0,   148,   149,   188,   188,   188,
   150,   151,   147,   188,   188,   188,   147,   188,   188,   188,
   147,   188,   188,   188,   152,   153,     0,   146,     0,     0,
   190,   191,     0,   192,     0,   194,     0,   193,     0,   119,
     6,     0,   120,     6,     0,   122,     6,     0,   121,     6,
     0,   123,     6,     0,   124,   179,   259,   184,     5,   180,
     6,     0,   125,   179,   259,   180,     6,     0,   126,   179,
     5,   184,     5,   184,   259,   184,   259,   184,     5,   184,
     5,   184,     5,   180,     6,     0,     3,     7,   103,   179,
     5,   184,   257,   180,     6,     0,     3,     7,   102,   179,
     5,   184,   255,   184,   263,   184,   254,   184,   254,   184,
   254,   184,   263,   184,   263,   184,   254,   180,     6,     0,
     3,     7,   101,   179,     5,   184,   255,   184,   255,   184,
   261,   184,   254,   184,   254,   184,   254,   184,   254,   184,
   263,   184,   263,   184,   263,   184,   263,   184,   254,   180,
     6,     0,     3,     7,   109,   179,     5,   184,     3,   184,
     3,   184,     3,   184,   254,   180,     6,     0,     3,     7,
   113,   179,     5,   184,     3,   184,   254,   180,     6,     0,
     3,     7,   130,   179,     5,   184,     3,   184,   254,   180,
     6,     0,     3,     7,   111,   179,     5,   184,   170,   184,
   170,   184,   255,   184,   254,   180,     6,     0,     3,     7,
   114,   179,     5,   184,   263,   180,     6,     0,     3,     7,
   115,   179,     5,   184,   263,   184,     3,   184,   254,   180,
     6,     0,     3,     7,   110,   179,     5,   184,     3,   180,
     6,     0,     3,     7,   116,   179,     5,   184,     3,   184,
   255,   180,     6,     0,     3,     7,   118,   179,     5,   184,
     3,   184,     3,   184,     3,   180,     6,     0,     3,     7,
   117,   179,     5,   184,   257,   180,     6,     0,     3,     7,
   112,   179,     5,   184,     3,   180,     6,     0,     3,     7,
    41,   179,     5,   184,     3,   184,     3,   180,     6,     0,
     3,     7,   128,   179,     5,   184,   263,   180,     6,     0,
     3,     7,   129,   179,     5,   184,   263,   184,     3,   180,
     6,     0,     3,     7,   127,   179,     5,   184,     3,   180,
     6,     0,     3,     7,   131,   179,     5,   184,     3,   184,
   255,   180,     6,     0,     3,     7,   132,   179,     5,   184,
     3,   184,   255,   184,   255,   180,     6,     0,     3,     7,
   139,   179,     5,   184,     3,   184,   255,   184,   255,   180,
     6,     0,     3,     7,   133,   179,     5,   184,     3,   184,
   255,   180,     6,     0,     3,     7,   143,   179,     5,   184,
     3,   184,   255,   184,   255,   180,     6,     0,     3,     7,
   134,   179,     5,   184,     3,   184,   263,   184,   263,   184,
   254,   184,   254,   180,     6,     0,     3,     7,   135,   179,
     5,   184,   263,   180,     6,     0,     3,     7,   136,   179,
   137,   184,   254,   184,     3,   180,     6,     0,     3,     7,
   138,   179,     5,   184,   263,   184,   254,   180,     6,     0,
     3,     7,   140,   179,     5,   184,     5,   184,     3,   184,
     3,   180,     6,     0,     3,     7,   141,   179,     5,   184,
     5,   184,     3,   180,     6,     0,     3,     7,   142,   179,
     3,   184,     3,   180,     6,     0,     0,   195,   196,     0,
   198,     0,   197,     0,   238,     0,   239,     0,   240,     0,
   243,     0,   244,     0,   247,     0,   252,     0,   253,     0,
   246,     0,   245,     0,    33,   179,     5,   180,     6,     0,
    33,   179,     5,   184,   265,   180,     6,     0,     4,     5,
   185,   199,   186,     6,     0,     4,     5,     4,   257,   185,
   199,   186,     6,     0,     0,   199,   201,     0,   199,   204,
     0,   199,   207,     0,   199,   210,     0,   199,   213,     0,
   199,   216,     0,   199,   219,     0,   199,   222,     0,   199,
   225,     0,   199,   228,     0,   199,   231,     0,   199,   234,
     0,   255,     0,   200,   184,   255,     0,     0,    80,   179,
   255,   184,   255,   184,   255,   180,   202,   185,   200,   186,
     6,     0,   255,     0,   203,   184,   255,     0,     0,    81,
   179,   255,   184,   255,   184,   255,   180,   205,   185,   203,
   186,     6,     0,   255,     0,   206,   184,   255,     0,     0,
    82,   179,   255,   184,   255,   184,   255,   180,   208,   185,
   206,   186,     6,     0,   255,     0,   209,   184,   255,     0,
     0,    77,   179,   255,   184,   255,   184,   255,   184,   255,
   184,   255,   184,   255,   180,   211,   185,   209,   186,     6,
     0,   255,     0,   212,   184,   255,     0,     0,    78,   179,
   255,   184,   255,   184,   255,   184,   255,   184,   255,   184,
   255,   180,   214,   185,   212,   186,     6,     0,   255,     0,
   215,   184,   255,     0,     0,    79,   179,   255,   184,   255,
   184,   255,   184,   255,   184,   255,   184,   255,   180,   217,
   185,   215,   186,     6,     0,   255,     0,   218,   184,   255,
     0,     0,    74,   179,   255,   184,   255,   184,   255,   184,
   255,   184,   255,   184,   255,   184,   255,   184,   255,   184,
   255,   180,   220,   185,   218,   186,     6,     0,   255,     0,
   221,   184,   255,     0,     0,    75,   179,   255,   184,   255,
   184,   255,   184,   255,   184,   255,   184,   255,   184,   255,
   184,   255,   184,   255,   180,   223,   185,   221,   186,     6,
     0,   255,     0,   224,   184,   255,     0,     0,    76,   179,
   255,   184,   255,   184,   255,   184,   255,   184,   255,   184,
   255,   184,   255,   184,   255,   184,   255,   180,   226,   185,
   224,   186,     6,     0,   255,     0,   227,   184,   255,     0,
     0,    71,   179,   255,   184,   255,   184,   255,   184,   255,
   184,   255,   184,   255,   184,   255,   184,   255,   184,   255,
   184,   255,   184,   255,   184,   255,   180,   229,   185,   227,
   186,     6,     0,   255,     0,   230,   184,   255,     0,     0,
    72,   179,   255,   184,   255,   184,   255,   184,   255,   184,
   255,   184,   255,   184,   255,   184,   255,   184,   255,   184,
   255,   184,   255,   184,   255,   180,   232,   185,   230,   186,
     6,     0,   255,     0,   233,   184,   255,     0,     0,    73,
   179,   255,   184,   255,   184,   255,   184,   255,   184,   255,
   184,   255,   184,   255,   184,   255,   184,   255,   184,   255,
   184,   255,   184,   255,   180,   235,   185,   233,   186,     6,
     0,     7,     0,   154,     0,   155,     0,   156,     0,   157,
     0,   175,     0,   176,     0,     4,   236,   255,     6,     0,
     4,   181,   255,   182,   236,   255,     6,     0,     4,   181,
   185,   265,   186,   182,   236,   263,     6,     0,     4,   181,
   182,     7,   263,     6,     0,     4,   237,     6,     0,     4,
   181,   255,   182,   237,     6,     0,     4,   183,     4,     7,
   269,     6,     0,     4,   181,   255,   182,   183,     4,     7,
   269,     6,     0,     4,   183,     4,   236,   255,     6,     0,
     4,   181,   255,   182,   183,     4,   236,   255,     6,     0,
     4,   183,     4,   237,     6,     0,     4,   181,   255,   182,
   183,     4,   237,     6,     0,     4,   183,    89,   183,     4,
     7,   266,     6,     0,     4,   181,   255,   182,   183,    89,
   183,     4,     7,   266,     6,     0,     4,   183,    90,     7,
   267,     6,     0,     4,   181,   255,   182,   183,    90,     7,
   267,     6,     0,    57,   179,     4,   180,   183,     4,     7,
   255,     6,     0,    57,   179,     4,   180,   183,     4,     7,
   269,     6,     0,    38,   179,   255,   180,     7,   257,     6,
     0,    53,    38,   179,   255,   180,     7,   263,     6,     0,
    69,    38,   263,     7,   185,   255,   184,   255,   184,   255,
   186,     6,     0,    45,    46,   263,     7,   255,     6,     0,
    38,   185,   255,   186,     6,     0,    41,   179,   255,   180,
     7,   263,     6,     0,    43,   179,   255,   180,     7,   263,
     6,     0,    69,    41,   263,     7,   185,   255,   184,   255,
   184,   255,   186,     6,     0,    39,   179,   255,   180,     7,
   263,     6,     0,    40,   179,   255,   180,     7,   263,     6,
     0,    39,   179,   255,   180,     7,   263,    49,   257,     6,
     0,    47,   179,   255,   180,     7,   185,   255,   184,   255,
   184,     5,   184,     5,   184,     5,   186,     6,     0,    53,
    41,   179,   255,   180,     7,   263,     6,     0,    41,    64,
   179,   255,   180,     7,   263,     6,     0,    83,   179,   255,
   180,     7,   263,     6,     0,    84,   179,   255,   180,     7,
   263,    88,   263,    85,   255,     6,     0,    41,   185,   255,
   186,     6,     0,    49,    42,   179,   255,   180,     7,   263,
     6,     0,   144,    42,   179,   255,   180,     7,   185,   255,
   184,   263,   186,     6,     0,    50,    42,   179,   255,   180,
     7,   263,     6,     0,    84,    42,    86,    87,   179,   255,
   180,     7,   261,    88,   185,   263,   184,   263,   186,    85,
   185,   255,   184,   255,   186,     6,     0,    84,    42,   179,
   255,   180,     7,   261,    88,   185,   263,   184,   263,   186,
    85,   185,   255,   184,   255,   186,     6,     0,    53,    42,
   179,   255,   180,     7,   263,     6,     0,    42,    64,   179,
   255,   180,     7,   263,     6,     0,    42,   185,   255,   186,
     6,     0,    52,    44,   179,   255,   180,     7,   263,     6,
     0,    44,   179,   255,   180,     7,   263,     6,     0,    53,
    44,   179,   255,   180,     7,   263,     6,     0,    59,   257,
   185,   241,   186,     0,    58,   185,   257,   184,   257,   184,
   255,   186,   185,   241,   186,     0,    60,   257,   185,   241,
   186,     0,    61,   185,   257,   184,   255,   186,   185,   241,
   186,     0,   243,     0,   242,     0,   240,     0,     0,   242,
   239,     0,    63,   185,   242,   186,     0,    66,   185,   242,
   186,     0,    66,     4,   181,   255,   182,     6,     0,    66,
   100,     6,     0,     4,   269,     6,     0,     4,   255,     6,
     0,    57,   179,     4,   180,   183,     4,     6,     0,    96,
     6,     0,    37,     6,     0,    91,   179,   255,     8,   255,
   180,     0,    91,   179,   255,     8,   255,     8,   255,   180,
     0,    91,     4,    92,   185,   255,     8,   255,   186,     0,
    91,     4,    92,   185,   255,     8,   255,     8,   255,   186,
     0,    93,     0,    99,     4,     0,    97,     0,    98,     4,
     6,     0,    94,   179,   255,   180,     0,    95,     0,    62,
    38,   185,   255,   184,   257,   186,     6,     0,    62,    38,
   185,   255,   184,   257,   184,   257,   184,   255,   186,     6,
     0,    62,    41,   185,   255,   184,   257,   186,     6,     0,
    62,    41,   185,   255,   184,   257,   184,   257,   184,   255,
   186,     6,     0,    62,    42,   185,   255,   184,   257,   186,
     6,     0,    62,    42,   185,   255,   184,   257,   184,   257,
   184,   255,   186,     6,     0,     0,    62,    42,   185,   255,
   184,   257,   186,   248,   185,   250,   186,     6,     0,     0,
    62,    42,   185,   255,   184,   257,   184,   257,   184,   255,
   186,   249,   185,   250,   186,     6,     0,   251,     0,   250,
   251,     0,    70,   185,   263,   184,   263,   184,   263,   186,
     6,     0,    65,     6,     0,    51,    41,   263,     7,   255,
     6,     0,    51,    41,   263,     7,   255,    54,    56,   255,
     6,     0,    51,    41,   263,     7,   255,    54,    55,   255,
     6,     0,    51,    42,   185,   255,   186,     7,   263,     6,
     0,    48,    42,   185,   255,   186,     7,   263,     6,     0,
    51,    44,   185,   255,   186,     7,   263,     6,     0,    65,
    42,   263,     7,   255,     6,     0,    65,    42,   263,     6,
     0,    67,     6,     0,    68,     6,     0,   104,     0,   105,
     0,   106,     0,   107,     0,   108,     0,   256,     0,   179,
   255,   180,     0,   169,   255,     0,   168,   255,     0,   174,
   255,     0,   255,   169,   255,     0,   255,   168,   255,     0,
   255,   170,   255,     0,   255,   171,   255,     0,   255,   172,
   255,     0,   255,   178,   255,     0,   255,   164,   255,     0,
   255,   166,   255,     0,   255,   165,   255,     0,   255,   167,
   255,     0,   255,   161,   255,     0,   255,   162,   255,     0,
   255,   160,   255,     0,   255,   159,   255,     0,   255,   158,
   255,     8,   255,     0,    12,   179,   255,   180,     0,    13,
   179,   255,   180,     0,    14,   179,   255,   180,     0,    15,
   179,   255,   180,     0,    16,   179,   255,   180,     0,    17,
   179,   255,   180,     0,    18,   179,   255,   180,     0,    19,
   179,   255,   180,     0,    20,   179,   255,   180,     0,    22,
   179,   255,   180,     0,    23,   179,   255,   184,   255,   180,
     0,    24,   179,   255,   180,     0,    25,   179,   255,   180,
     0,    26,   179,   255,   180,     0,    27,   179,   255,   180,
     0,    28,   179,   255,   180,     0,    29,   179,   255,   180,
     0,    30,   179,   255,   184,   255,   180,     0,    31,   179,
   255,   184,   255,   180,     0,    32,   179,   255,   184,   255,
   180,     0,    21,   179,   255,   180,     0,     3,     0,     9,
     0,    10,     0,    11,     0,     4,     0,     4,   181,   255,
   182,     0,     4,   237,     0,     4,   181,   255,   182,   237,
     0,     4,   183,     4,     0,     4,   181,   255,   182,   183,
     4,     0,     4,   183,     4,   237,     0,     4,   181,   255,
   182,   183,     4,   237,     0,   258,     0,   169,   257,     0,
   168,   257,     0,   257,   169,   257,     0,   257,   168,   257,
     0,   185,   255,   184,   255,   184,   255,   184,   255,   184,
   255,   186,     0,   185,   255,   184,   255,   184,   255,   184,
   255,   186,     0,   185,   255,   184,   255,   184,   255,   186,
     0,   179,   255,   184,   255,   184,   255,   180,     0,     0,
   179,   260,   180,     0,     5,     0,   260,   184,     5,     0,
     0,   185,   262,   186,     0,   179,   262,   180,     0,   263,
     0,   262,   184,   263,     0,   255,     0,   264,     0,   185,
   265,   186,     0,   169,   185,   265,   186,     0,   255,     8,
   255,     0,   255,     8,   255,     8,   255,     0,     4,   181,
   182,     0,   169,     4,   181,   182,     0,     4,   181,   185,
   265,   186,   182,     0,   169,     4,   181,   185,   265,   186,
   182,     0,   255,     0,   264,     0,   265,   184,   255,     0,
   265,   184,   264,     0,   185,   255,   184,   255,   184,   255,
   184,   255,   186,     0,   185,   255,   184,   255,   184,   255,
   186,     0,     4,     0,     4,   183,    89,   183,     4,     0,
   185,   268,   186,     0,     4,   181,   255,   182,   183,    90,
     0,   266,     0,   268,   184,   266,     0,     5,     0,    35,
   179,   269,   184,   269,   180,     0,    36,   179,   269,   180,
     0,    34,   179,   269,   180,     0,    34,   179,   269,   184,
   265,   180,     0,    34,   179,     4,   183,     4,   180,     0,
    34,   179,     4,   181,   255,   182,   183,     4,   180,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   156,   158,   159,   160,   167,   169,   172,   180,   194,   206,
   208,   211,   213,   214,   217,   223,   228,   229,   230,   233,
   237,   240,   246,   251,   257,   265,   270,   274,   280,   285,
   289,   294,   298,   301,   306,   310,   314,   318,   323,   327,
   330,   334,   338,   342,   346,   350,   354,   357,   361,   364,
   368,   371,   380,   384,   390,   392,   393,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   405,   410,   439,   444,
   450,   455,   456,   457,   458,   459,   460,   461,   462,   463,
   464,   465,   466,   469,   472,   476,   482,   488,   491,   495,
   501,   507,   510,   514,   520,   526,   529,   533,   541,   547,
   550,   554,   562,   568,   571,   575,   583,   589,   592,   596,
   608,   614,   617,   621,   633,   639,   642,   646,   658,   664,
   667,   671,   684,   690,   693,   697,   710,   716,   719,   723,
   736,   748,   750,   751,   752,   753,   755,   757,   759,   790,
   824,   871,   886,   895,   910,   922,   936,   959,   983,   995,
  1009,  1021,  1035,  1051,  1067,  1080,  1100,  1111,  1117,  1136,
  1147,  1155,  1161,  1167,  1186,  1192,  1198,  1214,  1221,  1227,
  1233,  1244,  1263,  1275,  1281,  1300,  1321,  1329,  1335,  1341,
  1347,  1359,  1365,  1371,  1383,  1389,  1394,  1399,  1406,  1408,
  1409,  1412,  1417,  1428,  1446,  1454,  1459,  1470,  1538,  1558,
  1564,  1568,  1588,  1604,  1618,  1643,  1668,  1694,  1700,  1705,
  1710,  1714,  1724,  1730,  1736,  1740,  1744,  1748,  1752,  1757,
  1762,  1768,  1775,  1779,  1784,  1805,  1815,  1834,  1852,  1870,
  1892,  1913,  1934,  1948,  1969,  1974,  1985,  1987,  1988,  1989,
  1990,  1993,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,
  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,
  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,  2028,
  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,  2038,
  2039,  2040,  2045,  2050,  2051,  2052,  2056,  2067,  2084,  2095,
  2114,  2130,  2146,  2162,  2179,  2184,  2188,  2192,  2196,  2201,
  2206,  2210,  2214,  2220,  2224,  2229,  2233,  2238,  2242,  2246,
  2252,  2258,  2265,  2271,  2275,  2279,  2289,  2296,  2307,  2321,
  2337,  2357,  2381,  2387,  2391,  2395,  2406,  2411,  2422,  2427,
  2445,  2450,  2463,  2469,  2475,  2480,  2488,  2501,  2505,  2530,
  2544
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipsis","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical",
"tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry",
"tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence",
"tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable","tFor","tIn",
"tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","SignedDouble","STLFormatItem","StepFormatItems","StepFormatItem",
"StepSpecial","StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat",
"Printf","View","Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues",
"VectorPoint","@2","TensorPointValues","TensorPoint","@3","ScalarLineValues",
"ScalarLine","@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine",
"@6","ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Command","Loop","Extrude","@13","@14","ExtrudeParameters","ExtrudeParameter",
"Transfini","Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single",
"ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   187,   187,   187,   187,   188,   188,   189,   189,   189,   190,
   190,   191,   191,   191,   192,   192,   192,   192,   192,   193,
   193,   193,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   195,   195,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   197,   197,   198,   198,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   200,   200,   202,   201,   203,   203,   205,
   204,   206,   206,   208,   207,   209,   209,   211,   210,   212,
   212,   214,   213,   215,   215,   217,   216,   218,   218,   220,
   219,   221,   221,   223,   222,   224,   224,   226,   225,   227,
   227,   229,   228,   230,   230,   232,   231,   233,   233,   235,
   234,   236,   236,   236,   236,   236,   237,   237,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   240,   240,   240,   240,   241,   241,
   241,   242,   242,   243,   244,   244,   244,   245,   245,   245,
   245,   245,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   247,   247,   247,   247,   247,   247,   248,   247,
   249,   247,   250,   250,   251,   251,   252,   252,   252,   252,
   252,   252,   252,   252,   253,   253,   254,   254,   254,   254,
   254,   255,   255,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   256,   256,   256,   256,   256,   256,   256,   256,
   256,   256,   256,   256,   257,   257,   257,   257,   257,   258,
   258,   258,   258,   259,   259,   260,   260,   261,   261,   261,
   262,   262,   263,   263,   263,   263,   264,   264,   264,   264,
   264,   264,   265,   265,   265,   265,   266,   266,   266,   266,
   267,   267,   268,   268,   269,   269,   269,   269,   269,   269,
   269
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     7,     6,     8,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     9,     9,     7,     8,    12,     6,
     5,     7,     7,    12,     7,     7,     9,    17,     8,     8,
     7,    11,     5,     8,    12,     8,    22,    20,     8,     8,
     5,     8,     7,     8,     5,    11,     5,     9,     1,     1,
     1,     0,     2,     4,     4,     6,     3,     3,     3,     7,
     2,     2,     6,     8,     8,    10,     1,     2,     1,     3,
     4,     1,     8,    12,     8,    12,     8,    12,     0,    12,
     0,    16,     1,     2,     9,     2,     6,     9,     9,     8,
     8,     8,     6,     4,     2,     2,     1,     1,     1,     1,
     1,     1,     3,     2,     2,     2,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     5,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     4,     4,     4,     6,     6,
     6,     4,     1,     1,     1,     1,     1,     4,     2,     5,
     3,     6,     4,     7,     1,     2,     2,     3,     3,    11,
     9,     7,     7,     0,     3,     1,     3,     0,     3,     3,
     1,     3,     1,     1,     3,     4,     3,     5,     3,     4,
     6,     7,     1,     1,     3,     3,     9,     7,     1,     5,
     3,     6,     1,     3,     1,     6,     4,     4,     6,     6,
     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   207,     0,   212,     0,   209,
     0,     0,     0,    54,    56,    55,    57,    58,    59,    60,
    61,    66,    65,    62,    63,    64,     5,     0,     0,     0,
    15,    16,    18,    17,    19,   304,   304,     0,   283,   287,
   335,   132,   284,   285,   286,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   133,
   134,   135,   136,     0,     0,     0,   137,   138,     0,     0,
     0,     0,     0,     0,   242,     0,     0,   202,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
     0,     0,     0,     0,     0,   192,     0,     0,     0,   192,
   235,   236,     0,     0,     0,     0,     0,     0,     0,     0,
   201,     0,   208,     0,     6,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   289,     0,    71,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   245,
   244,   246,     0,     0,     0,     0,     0,     0,     0,     0,
   143,   199,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   198,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   287,     0,     0,   313,     0,   314,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   297,   296,     0,     0,     0,     0,   192,   192,     0,     0,
     0,     0,     0,     0,     0,   197,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   210,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   306,
     0,     0,     0,     0,     0,   291,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   335,     0,     0,     0,   243,     0,     0,   323,   324,     0,
     0,   132,     0,     0,     0,     0,   139,     0,   260,   259,
   257,   258,   253,   255,   254,   256,   248,   247,   249,   250,
   251,   252,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   299,   298,   191,
     0,   190,   189,     0,     0,     0,     0,     0,   194,   193,
   234,     0,     0,   195,     0,     0,     0,     0,     0,     0,
     0,     0,   211,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   305,     0,     0,    21,     0,
   288,   293,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   282,   271,     0,
   273,   274,   275,   276,   277,   278,     0,     0,     0,     0,
     0,   338,     0,     0,   337,     0,     0,     0,     0,     0,
     0,     0,     0,   149,     0,     0,     0,     0,     0,    67,
     0,     0,   161,     0,     0,     0,     0,   173,     0,   181,
     0,     0,   319,     0,     0,     0,   315,   317,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   185,   187,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   307,     0,   304,     0,   290,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    69,     0,     0,     0,     0,     0,     0,     0,     0,
   142,   325,   326,     0,     0,     0,     0,     0,   144,   145,
   147,     0,     0,   329,     0,   333,     0,   153,   261,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
     0,   316,     0,   160,     0,     0,     0,     0,   227,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   233,   196,     0,     0,     0,
     0,   308,     0,     0,     0,   203,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     0,     0,     0,    20,     0,   292,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
   279,   280,   281,     0,   340,   339,   336,     0,   132,     0,
     0,     0,     0,   140,     0,     0,     0,     0,     0,   331,
    68,   157,   165,     0,   166,     0,   162,     0,   163,   183,
     0,     0,   318,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   200,     0,     0,     0,
     0,   192,     0,     0,     0,     0,     0,   219,     0,     0,
   171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   304,   294,    70,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     0,     0,   151,     0,     0,     0,   334,     0,   170,   180,
   321,     0,     0,   231,   174,   176,     0,     0,   230,   232,
   182,   158,   169,   179,   184,     0,     0,     0,   303,     0,
   302,     0,     0,   213,     0,   215,     0,   217,     0,     0,
     0,   308,     0,   311,     0,     0,     0,     0,   205,   204,
     0,     0,     0,     0,     0,    23,     0,    32,     0,    36,
     0,    30,     0,     0,    35,     0,    40,    38,     0,     0,
     0,     0,     0,     0,    47,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   141,   146,   148,     0,
   154,     0,     0,     0,   167,   322,     0,   229,   228,   155,
   156,   192,     0,   188,     0,     0,     0,     0,     0,     0,
     0,   310,     0,   309,     0,     0,     0,     0,     0,     0,
   308,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   341,     0,   332,   330,     0,     0,     0,
     0,   301,     0,     0,     0,     0,     0,     0,   223,     0,
     0,     0,   312,     0,     0,   206,     0,     0,    37,     0,
     0,     0,     0,    27,     0,    33,     0,    39,    28,    41,
     0,    44,     0,    48,    49,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   152,     0,     0,   186,     0,     0,     0,   221,
   226,     0,     0,   224,     0,     0,     0,     0,   172,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    86,    90,    94,     0,   328,     0,   300,   214,
   216,   218,     0,     0,   220,   159,   164,     0,     0,   175,
     0,     0,     0,     0,     0,    31,    34,    42,     0,    43,
    50,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   327,     0,     0,     0,     0,     0,     0,     0,     0,    26,
    29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    84,     0,    88,     0,    92,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   222,     0,     0,     0,     0,     0,
     0,    46,    22,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    85,    87,    89,    91,    93,    95,   168,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    98,   102,   106,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     8,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   178,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    96,     0,   100,     0,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   177,     0,    24,     0,     0,     0,
     0,     0,     0,    97,    99,   101,   103,   105,   107,     0,
     0,     0,     0,   110,   114,   118,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   108,     0,   112,     0,   116,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,   111,   113,   115,   117,   119,
     0,   122,   126,   130,    25,     0,     0,     0,     0,     0,
     0,     0,   120,     0,   124,     0,   128,     0,     0,     0,
     0,     0,     0,   121,   123,   125,   127,   129,   131,     0,
     0,     0
};

static const short yydefgoto[] = {  1540,
    79,     5,     6,    19,    20,    21,    22,     7,    64,    65,
    66,   388,  1313,   557,  1263,  1315,   558,  1264,  1317,   559,
  1265,  1424,   560,  1397,  1426,   561,  1398,  1428,   562,  1399,
  1485,   563,  1471,  1487,   564,  1472,  1489,   565,  1473,  1522,
   566,  1516,  1524,   567,  1517,  1526,   568,  1518,   132,   233,
    67,   490,   480,   481,   482,   483,    71,    72,    73,    74,
   999,  1233,  1138,  1139,    75,    76,   817,   304,   135,   169,
   170,   228,   381,   905,  1003,  1004,   306,   420,   736,   608,
   737,   136
};

static const short yypact[] = {  1927,
   108,-32768,-32768,   -10,-32768,    27,  2128,-32768,    11,   176,
   136,   196,   228,   233,   269,   102,   119,   126,-32768,-32768,
-32768,-32768,  1572,   162,   338,   -75,   180,   190,   -45,   -44,
   212,   219,   283,   238,   339,   378,   384,   168,   386,   346,
   262,   274,   207,   207,   278,   202,   282,   428,    13,   475,
   476,    92,   334,   -21,     8,-32768,   335,-32768,   496,-32768,
   514,   551,   520,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   553,    11,  1978,
-32768,-32768,-32768,-32768,-32768,   389,   389,   567,-32768,   264,
     7,-32768,-32768,-32768,-32768,   405,   419,   439,   440,   444,
   445,   446,   447,   448,   449,   450,   451,   454,   456,   457,
   458,   461,   462,   467,   469,   495,   497,   513,   515,-32768,
-32768,-32768,-32768,    67,    67,    67,-32768,-32768,    67,   522,
    70,    67,   569,   811,-32768,   593,   604,-32768,    67,    67,
    67,    67,   516,    67,    67,   518,    67,    67,    67,   984,
    67,   464,   519,   521,   984,   490,   508,   523,   526,   527,
   529,   530,   695,   207,   207,   207,    67,    67,    97,-32768,
   135,   207,   528,   544,   546,-32768,   984,   533,   705,-32768,
-32768,-32768,   984,   984,    67,   -14,    67,   644,    67,    67,
-32768,   744,-32768,   574,-32768,    11,   575,   576,   577,   578,
   579,   580,   581,   584,   585,   586,   587,   588,   589,   592,
   594,   595,   620,   621,   622,   623,   624,   626,   627,   628,
   629,   632,   633,   634,   635,   637,   747,   638,   639,   640,
    67,   768,-32768,   207,-32768,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,   279,   242,   242,   643,
   643,   643,  4939,   818,  1606,  4814,    15,   646,   821,   952,
-32768,-32768,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,-32768,  -111,  4962,
  1976,  4985,  5008,    67,  5031,  2176,    67,  2199,  5054,  5077,
   285,  1507,  1606,   978,   823,-32768,  5100,    67,    67,    67,
   825,    67,    67,    67,    67,    67,    67,    67,   653,   104,
-32768,-32768,  2567,  2588,   207,   207,   500,   500,   209,    67,
    67,    67,   313,   150,    67,-32768,  2016,   827,   829,  5123,
   731,    67,  5146,   659,  1674,  5169,-32768,    67,   688,   849,
   853,   855,   857,   858,   864,   865,   866,   867,   868,   869,
   870,   873,   874,   875,   876,   877,   878,   879,   880,   895,
   896,   897,   772,   898,   900,   905,   906,   909,   911,-32768,
     4,   913,   908,   914,  4839,   160,   204,   330,  5192,  5215,
  5238,  5261,  5284,  5307,  5330,  5353,  5376,  5399,  5422,  2609,
  5445,  5468,  5491,  5514,  5537,  5560,  2630,  2651,  2672,  -152,
-32768,    23,   736,   753,-32768,   984,  1778,   978,-32768,   132,
    21,   242,    67,   930,   933,     9,-32768,  1701,   573,   726,
   425,   425,   280,   280,   280,   280,   302,   302,   643,   643,
   643,   643,   932,  1606,   934,   936,   937,   939,  5583,   940,
   943,  5606,   946,   947,   948,   641,   329,  1606,   258,    67,
    67,   949,  2222,  5629,  5652,    67,  2245,  2268,  5675,  5698,
  5721,  5744,  5767,   770,   207,    67,    67,-32768,-32768,-32768,
   773,  1323,-32768,   774,    67,  2693,  2714,  2735,-32768,-32768,
-32768,    67,  4864,-32768,   776,   778,   957,   786,  5790,   959,
    67,    67,-32768,  5813,   817,   790,   808,   833,   840,   850,
   851,   852,   854,   856,   859,   860,   862,   863,   881,   882,
   883,   884,   885,   886,   888,   889,   890,   893,   894,   899,
   901,   902,   904,   917,   918,-32768,  1032,   871,-32768,   919,
   164,-32768,-32768,   903,   925,   927,   928,   950,   953,   954,
   955,   956,   962,   972,   975,  1035,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    67,
-32768,-32768,-32768,-32768,-32768,-32768,    67,    67,    67,    67,
  1038,-32768,  1606,   242,-32768,  1039,  1606,   944,   159,    67,
  1042,  1043,  1012,-32768,  1051,   974,    14,  1044,    67,-32768,
   147,   207,-32768,   984,   984,  1052,   984,-32768,  1053,-32768,
   984,   984,-32768,  1606,   766,   314,-32768,  1716,  1049,   924,
  1054,  1055,  1057,   861,  1073,  1074,  1108,  1120,  1124,  1150,
  1152,  1156,   211,  2756,  2777,-32768,-32768,  2291,   207,   207,
   207,  1070,  1155,    67,    67,   984,    67,  1157,   984,  1748,
   681,  1158,  1015,  1163,    67,    67,   207,  1164,  1182,  1016,
  1184,  1185,   984,   984,  1186,   207,  1197,  1198,   984,   984,
  1199,  1201,  1202,  1203,  1209,   984,   416,   984,  1219,  1220,
  1221,  1230,  1240,-32768,  1238,   389,  1241,-32768,   645,    67,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,-32768,  5836,  5859,  5882,  5905,  4889,  1066,   166,  1067,
-32768,   978,-32768,   113,   167,  1069,  1242,  1119,-32768,-32768,
-32768,    14,    67,  1071,    67,-32768,   322,-32768,  6411,  1244,
    17,    59,  1247,   984,  1249,   984,  1262,  1263,   323,-32768,
  1606,-32768,    67,-32768,    67,   984,   984,   984,-32768,   400,
   984,   984,   984,   984,   984,   984,   984,   470,    67,    67,
    67,  1085,   -57,   142,   199,-32768,-32768,  2798,  2819,  1265,
  5928,   -47,  1187,    67,    67,-32768,  1087,    11,  1089,  2840,
  2861,   169,  1090,  1102,  1109,  1112,  1110,  1115,  1114,  1117,
   256,  1118,  1116,  1123,  1121,  1132,  1134,  1136,  1137,  1138,
  1143,-32768,-32768,-32768,-32768,-32768,  1140,  1141,  1142,  1148,
  1159,  1162,  1160,-32768,  1161,   160,  1293,  2882,  2903,  2924,
  2945,  2966,  2987,  3008,  3029,  3050,  3071,  3092,  3113,-32768,
-32768,-32768,-32768,  1167,-32768,-32768,-32768,   984,   242,    67,
  1298,  1342,     9,-32768,  1345,  4914,  1270,  3134,    14,-32768,
-32768,-32768,-32768,   207,-32768,  1346,-32768,  1354,-32768,-32768,
  1189,   331,  6411,  3155,  1363,  1368,  1372,    67,    67,  1373,
  1374,  1375,  1385,  1387,  1388,  1389,-32768,    32,  2314,  5951,
  2075,   500,   207,  1390,   207,  1391,   207,  1392,    67,    67,
-32768,  1393,   984,   984,  1311,   984,   325,  5974,    67,    11,
  1398,    67,   984,  1396,  1400,  1399,  1234,  1402,   416,  1403,
  1414,    67,  1413,  1420,  1419,  1421,  1423,   416,    67,    67,
    67,   984,  1424,  1428,   416,    67,  1429,  1430,  1431,    67,
   389,-32768,-32768,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,  1432,  1435,  1436,  1169,-32768,
  1427,  1437,-32768,  1252,  1261,    67,-32768,    69,-32768,-32768,
-32768,  1264,    67,-32768,-32768,-32768,  1482,  1536,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1599,  1439,  1266,-32768,    67,
-32768,  1272,   245,-32768,   247,-32768,   250,-32768,  1274,  3176,
  3197,   -47,   243,-32768,   343,  1275,  1362,    67,-32768,-32768,
  3218,    11,  1268,  3239,  1277,-32768,  1278,-32768,  1280,-32768,
  1269,-32768,  1281,  5997,-32768,  1284,-32768,-32768,  1295,  1297,
  6020,  3260,  6043,  1289,-32768,  1299,  1302,  3281,  1294,  1303,
-32768,  3302,  1300,  3323,  3344,  3365,  3386,  3407,  3428,  3449,
  3470,  3491,  3512,  3533,  3554,  1305,-32768,-32768,-32768,    14,
-32768,  1360,  1485,  3575,-32768,-32768,  3596,-32768,-32768,-32768,
-32768,   500,  2118,-32768,    67,    67,    67,    35,    67,    67,
  1404,-32768,   984,-32768,   984,    67,  2337,   984,  1343,  1488,
   -47,   416,  1496,    67,  1494,   416,  1495,  1499,  1497,  1498,
  1500,    67,  1502,   984,  1506,  1508,    67,  1510,  1509,    67,
  1486,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,-32768,  1534,-32768,-32768,    67,  1538,  1355,
    67,-32768,  2360,  2383,  2406,  1539,  1359,   -32,-32768,  2429,
  2452,  1361,-32768,  1364,  1653,-32768,  1366,    11,-32768,  1365,
  1370,  1371,  3617,-32768,  1367,-32768,  1376,-32768,-32768,-32768,
  6066,-32768,  1377,-32768,-32768,  6089,  1378,-32768,  6112,  1382,
  3638,  3659,  3680,  3701,  3722,  3743,  3764,  3785,  3806,  6135,
  6158,  6181,-32768,  2147,  1383,-32768,  2475,  1544,  1551,  1553,
-32768,   984,  1554,-32768,  1556,  1574,   984,   984,-32768,  1605,
    11,   416,   416,   416,   416,  1607,  1608,  1633,   416,  1639,
  1650,  1651,  1573,    67,    67,    67,    67,    67,    67,    67,
    67,    67,-32768,-32768,-32768,    67,-32768,  1656,-32768,-32768,
-32768,-32768,  1473,  1478,-32768,-32768,-32768,  1479,  1426,-32768,
    11,  1480,  1481,  1487,  1489,-32768,-32768,-32768,  1484,-32768,
-32768,-32768,  1490,  3827,  3848,  3869,  3890,  3911,  3932,  3953,
  3974,  3995,  1492,  1493,  1503,  2498,  1501,    35,   984,   984,
  1581,  1523,   416,   416,  1665,  1666,   416,  1668,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
-32768,  1675,   -31,  1505,  1504,  1514,    11,  1526,  1527,-32768,
-32768,  1511,  1513,  4016,  4037,  4058,  4079,  4100,  4121,  4142,
  4163,  4184,   344,  6411,   387,  6411,   392,  6411,  1529,  1673,
   984,  1598,    67,    11,   416,   984,  1678,  1681,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,  1706,    67,
  1710,    67,  1711,  1712,-32768,  1533,  1537,  4205,    11,  1541,
  1546,-32768,-32768,  4226,  4247,  4268,  4289,  4310,  4331,  6204,
  6227,  6250,  6411,-32768,  6411,-32768,  6411,-32768,-32768,  1715,
    67,    67,  1571,   416,   984,    67,    67,    67,    67,    67,
    67,-32768,-32768,-32768,-32768,  4352,  2521,  1578,  1548,  1549,
  4373,  4394,  4415,  4436,  4457,  4478,  1550,  1552,  1557,    67,
  1728,-32768,   984,   416,    67,    67,    67,    67,    67,    67,
    67,    67,    67,  2544,-32768,  1559,  1558,  4499,  4520,  4541,
  4562,  4583,  4604,   395,  6411,   396,  6411,   401,  6411,  1730,
   984,  1738,    67,    67,    67,    67,    67,    67,    67,  1739,
    67,  1743,    67,  1744,-32768,  1568,-32768,  4625,  4646,  4667,
  6273,  6296,  6319,  6411,-32768,  6411,-32768,  6411,-32768,   984,
    67,    67,    67,-32768,-32768,-32768,  1570,  4688,  4709,  4730,
  1577,  1587,  1588,   984,    67,    67,    67,    67,    67,    67,
  1592,  4751,  4772,  4793,   420,  6411,   421,  6411,   424,  6411,
   416,    67,    67,    67,    67,  1772,    67,  1773,    67,  1777,
  1604,  6342,  6365,  6388,  6411,-32768,  6411,-32768,  6411,-32768,
  1780,-32768,-32768,-32768,-32768,  1631,  1641,  1642,    67,    67,
    67,   427,  6411,   430,  6411,   431,  6411,    67,  1822,    67,
  1823,    67,  1824,  6411,-32768,  6411,-32768,  6411,-32768,  1837,
  1847,-32768
};

static const short yypgoto[] = {-32768,
   -73,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1306,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -260,   -22,
-32768,  1841,  1843,  -323,   252,  1844,-32768,-32768,-32768,-32768,
-32768,-32768,   590, -1114,-32768,-32768,  -903,   -23,-32768,   -29,
-32768,   -84,-32768,  -976,   951,   807,  -263,  -276,  -728,  1000,
-32768,  -249
};


#define	YYLAST		6589


static const short yytable[] = {   134,
   133,   419,   229,   855,   484,   196,   423,   412,   413,   414,
   234,   188,   606,    77,   171,  1021,   178,   734,   143,   146,
   186,   422,   862,  1194,  1030,  1081,   459,    92,   590,    10,
   591,  1037,  1136,  1136,    89,    90,   411,  1137,  1137,   419,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   863,   117,   118,   119,   443,    89,
    90,   341,   444,   267,  1065,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,  1136,
   260,   261,   262,   139,  1137,   263,   266,   864,   270,   140,
   325,   326,   179,     8,  1150,   290,   291,   292,   293,    92,
   295,   296,   349,   298,   299,   300,   893,   307,   894,   183,
   967,   903,   184,   144,   320,   321,   322,   904,     9,   145,
   147,    81,   329,   323,   324,    11,    12,    13,    14,    15,
    16,    17,    18,  1193,  1320,   491,   492,   187,   268,   269,
   600,   340,   725,   343,   342,   345,   346,   611,   120,   121,
   122,   123,   602,   849,   120,   121,   122,   123,  1194,    78,
   419,   626,    80,   536,   325,   326,   189,   537,  1151,   127,
   128,   235,  1155,   607,   419,   127,   128,   180,   735,   124,
   125,    82,   592,   599,   387,   126,   593,   385,   155,   156,
   129,   157,   389,   390,   391,   392,   393,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
   407,   408,   409,    83,   124,   125,   325,   326,    84,   173,
   126,   418,   174,   175,   424,   129,   411,   726,   727,   428,
   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
   439,   440,   441,   442,   325,   326,   120,   121,   122,   123,
   449,   325,   326,   452,    85,   117,   118,   119,   261,   418,
    86,   327,   410,   411,   463,   464,   465,   475,   467,   468,
   469,   470,   471,   472,   473,   478,   479,    87,  1242,  1243,
  1244,  1245,   325,   326,    88,  1249,   486,   487,   488,   325,
   326,   493,   117,   118,   119,   597,   719,   598,   499,   328,
   120,   121,   122,   123,   504,   895,   740,   896,   150,   419,
   597,  1125,  1008,   723,   127,   128,   325,   326,   127,   128,
   137,   127,   128,   138,   720,   846,   697,   749,   914,   597,
    26,    27,    28,    29,    30,    31,    32,    33,   141,    34,
   419,    36,    37,   542,    39,    40,   325,   326,   142,  1298,
  1299,   325,   326,  1302,   165,   166,   325,   326,   325,   326,
   152,    52,   897,   159,   898,   167,   160,   161,   543,   162,
   148,   168,   485,   261,   769,    53,    54,   149,   601,   603,
   544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
   554,   555,   325,   326,   325,   326,   151,   325,   326,   153,
   418,  1350,  1082,   325,   326,   154,  1083,   333,  1075,   158,
  1076,   337,   385,  1077,   418,   923,   628,   629,   127,   128,
   163,   597,   634,   627,   231,   643,   232,   282,   283,   284,
   285,   286,   644,   645,   878,   879,    63,   287,   164,   127,
   128,   648,   172,   848,   850,   456,   176,   232,   652,   177,
  1389,   284,   285,   286,   872,   887,   888,   660,   661,   287,
   181,   182,   273,   274,   275,   276,   277,   419,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   597,   489,   752,
  1417,   191,   287,   127,   128,   859,   597,   860,   871,   625,
  1009,   232,   185,   190,   597,   556,   972,   192,   698,   812,
   813,   814,   815,   816,    89,    90,  1083,  1338,  1084,  1339,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   193,   195,   713,    42,    43,    44,
    45,   194,    47,   714,   715,   716,   717,   227,   992,   418,
  1340,   230,  1341,   722,   271,  1342,   728,  1343,  1439,  1441,
  1440,  1442,   741,   236,  1443,   739,  1444,  1501,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   237,   288,   958,
   418,   385,   287,  1495,  1497,  1496,  1498,  1499,   289,  1500,
  1528,   825,  1529,  1530,  1532,  1531,  1533,   238,   239,   773,
   774,   775,   240,   241,   242,   243,   244,   245,   246,   247,
   778,   779,   248,   781,   249,   250,   251,   792,   987,   252,
   253,   790,   791,    89,    90,   254,   801,   255,   308,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   256,   312,   257,   828,   829,   830,   831,
   832,   833,   834,   835,   836,   837,   838,   839,   785,   124,
   125,   258,   313,   259,   294,   126,   297,   309,   319,   310,
   129,   314,   851,   264,   315,   316,   265,   317,   318,   856,
   336,   858,   330,   335,   910,   544,   545,   546,   547,   548,
   549,   550,   551,   552,   553,   554,   555,   418,   331,   873,
   332,   874,   275,   276,   277,   344,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   889,   890,   891,  1130,   347,
   287,   380,   348,   350,   351,   352,   353,   354,   355,   356,
   907,   908,   357,   358,   359,   360,   361,   362,    89,    90,
   363,   386,   364,   365,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   366,   367,
   368,   369,   370,   942,   371,   372,   373,   374,   124,   125,
   375,   376,   377,   378,   126,   379,   272,   498,   383,   129,
   287,   382,   623,   384,   416,   624,   959,   426,   425,   461,
   827,   466,   474,   495,   968,   496,  1012,   505,   273,   274,
   275,   276,   277,   501,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   506,   977,   978,  1043,   507,   287,   508,
   786,   509,   510,   993,   986,   995,   759,   997,   511,   512,
   513,   514,   515,   516,   517,  1000,  1001,   518,   519,   520,
   521,   522,   523,   524,   525,  1011,   276,   277,  1014,   278,
   279,   280,   281,   282,   283,   284,   285,   286,  1024,   526,
   527,   528,   530,   287,   531,  1031,  1032,  1033,   529,   532,
   533,   534,  1038,   539,   760,   535,  1042,   538,   540,   594,
  1044,  1045,  1046,  1047,  1048,  1049,  1050,  1051,  1052,  1053,
  1054,  1055,   595,   124,   125,   604,   605,   610,  1089,   126,
   612,   613,  1064,   614,   129,   615,   617,   750,   618,  1067,
   751,   620,   642,   621,   622,   630,   305,   427,   646,   647,
   654,   311,   655,   656,   657,   659,  1073,   663,   273,   274,
   275,   276,   277,   664,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   334,  1087,   460,    89,   301,   287,   338,
   339,   665,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   666,   731,   273,   274,
   275,   276,   277,   667,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   668,   669,   670,   694,   671,   287,   672,
   712,   718,   673,   674,   721,   675,   676,   729,   730,   738,
   695,  1133,  1134,  1135,   754,  1140,  1141,   732,   744,   746,
   756,   757,  1145,   758,   677,   678,   679,   680,   681,   682,
  1153,   683,   684,   685,  1201,   776,   686,   687,  1161,   761,
   762,   700,   688,  1166,   689,   690,  1169,   691,  1171,  1172,
  1173,  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,
   692,   693,   696,   701,  1184,   702,   703,  1187,   755,   273,
   274,   275,   276,   277,   763,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   854,   724,   764,  1241,   704,   287,
   765,   705,   706,   707,   708,   273,   274,   275,   276,   277,
   709,   278,   279,   280,   281,   282,   283,   284,   285,   286,
   710,   124,   302,   711,   733,   287,   766,   126,   767,   768,
   777,   788,   129,   782,   787,   789,   793,  1272,   303,   273,
   274,   275,   276,   277,  1059,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   794,   795,   796,   797,   800,   287,
  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,   802,
   803,   806,  1266,   807,   808,   809,   273,   274,   275,   276,
   277,   810,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   819,   596,  1324,   820,   821,   287,   273,   274,   275,
   276,   277,   822,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   823,   824,   826,   845,   847,   287,   853,   861,
  1349,   852,   865,   857,   867,  1304,  1305,  1306,  1307,  1308,
  1309,  1310,  1311,  1312,  1314,  1316,  1318,   869,   870,   892,
   901,   909,   911,   915,   906,  1373,   273,   274,   275,   276,
   277,   916,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   918,   917,   919,   920,   925,   287,   921,   943,  1348,
   922,   924,   926,   960,   927,  1354,  1355,  1356,  1357,  1358,
  1359,  1360,  1361,  1362,  1363,   928,  1365,   929,  1367,   930,
   931,   932,   933,   934,   935,   936,   273,   274,   275,   276,
   277,   937,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   939,   938,   940,   941,   961,   287,  1386,  1387,   956,
   963,   969,  1391,  1392,  1393,  1394,  1395,  1396,   965,   970,
    26,    27,    28,    29,    30,    31,    32,    33,   974,    34,
   971,    36,    37,   975,    39,    40,  1414,   976,   979,   980,
   981,  1418,  1419,  1420,  1421,  1422,  1423,  1425,  1427,  1429,
   982,    52,   983,   984,   985,   994,   996,   998,  1006,  1002,
  1013,  1016,  1017,  1019,  1018,    53,    54,  1020,  1022,  1448,
  1449,  1450,  1451,  1452,  1453,  1454,  1023,  1456,  1025,  1458,
   742,   743,  1026,   745,  1027,  1029,  1028,   747,   748,  1035,
  1036,  1039,  1040,  1060,  1062,  1056,  1041,  1468,  1469,  1470,
  1057,  1058,  1061,  1063,  1071,  1066,  1086,  1090,  1095,  1126,
  1072,  1482,  1483,  1484,  1486,  1488,  1490,  1074,  1078,  1085,
  1092,  1093,   780,  1094,  1096,   783,    63,  1098,  1502,  1503,
  1504,  1505,  1104,  1507,  1099,  1509,  1100,  1108,  1105,   798,
   799,  1106,  1109,  1111,  1124,   804,   805,  1068,  1127,  1148,
  1170,  1142,   811,  1149,   818,  1523,  1525,  1527,  1152,  1154,
  1156,  1157,  1158,  1159,  1534,  1160,  1536,  1162,  1538,    89,
   457,  1164,  1167,  1165,  1168,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,  1183,
  1186,  1069,  1185,  1192,  1191,  1197,  1206,  1198,  1202,  1230,
   866,  1200,   868,  1203,  1204,  1207,  1231,  1211,  1232,  1235,
  1209,  1236,   875,   876,   877,  1213,  1228,   880,   881,   882,
   883,   884,   885,   886,    89,    90,    91,  1253,    92,  1237,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,  1070,   117,   118,   119,    89,   301,
  1240,  1271,  1246,  1247,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,  1248,   273,
   274,   275,   276,   277,  1250,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   957,  1251,  1252,  1268,  1199,   287,
  1267,  1269,  1270,  1273,  1274,  1296,  1275,  1277,  1276,  1297,
  1300,  1301,  1303,  1278,   124,   125,  1288,  1289,  1345,  1319,
   126,   502,  1347,  1352,  1292,   129,  1353,  1290,  1321,  1322,
  1327,   458,  1328,   273,   274,   275,   276,   277,  1323,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   609,  1325,
  1326,  1364,  1007,   287,  1344,  1366,  1368,  1369,  1370,  1015,
  1385,  1371,  1388,   753,  1374,   120,   121,   122,   123,  1375,
  1402,  1403,  1404,  1415,  1411,  1445,  1412,  1432,  1034,   124,
   125,  1413,  1431,  1447,  1455,   126,   127,   128,  1457,  1459,
   129,  1460,   130,  1474,   131,   784,   273,   274,   275,   276,
   277,  1478,   278,   279,   280,   281,   282,   283,   284,   285,
   286,  1479,  1480,   124,   417,  1491,   287,  1506,  1508,   126,
    89,   457,  1510,  1511,   129,  1515,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   273,   274,   275,   276,   277,  1519,   278,   279,   280,   281,
   282,   283,   284,   285,   286,  1520,  1521,  1535,  1537,  1539,
   287,   273,   274,   275,   276,   277,  1541,   278,   279,   280,
   281,   282,   283,   284,   285,   286,  1542,    68,   699,    69,
    70,   287,   962,     0,  1005,     0,     0,  1293,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   273,   274,   275,   276,   277,   287,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,  1143,
     0,  1144,     0,   287,  1147,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   273,   274,   275,   276,   277,
  1163,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   -10,     1,     0,   -10,
   -53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   124,   125,     0,     0,     0,
     0,   126,     0,     0,     0,     0,   129,     0,     0,   -53,
     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
     0,   -53,   -53,   -53,   -53,   -53,     0,     0,  1234,     0,
     0,     0,     0,  1238,  1239,     0,     0,     0,     0,   -53,
   -53,     0,     0,     0,     0,     0,     0,   -53,   197,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   -10,   -10,   -10,   -10,   -10,
   -10,   -10,   -10,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,     0,    36,    37,     0,    39,    40,     0,
   -53,     2,     3,     0,     4,  1294,  1295,     0,   198,   199,
   200,     0,     0,     0,    52,     0,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,     0,     0,    53,    54,
     0,     0,     0,     0,   211,   212,   213,   214,   215,   216,
   217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
   226,     0,     0,     0,     0,     0,     0,  1346,     0,     0,
     0,    23,  1351,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,     0,     0,     0,     0,    63,
    24,   446,     0,     0,    25,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
    40,  1390,     0,     0,    41,    42,    43,    44,    45,    46,
    47,     0,    48,    49,    50,    51,    52,     0,     0,     0,
     0,   494,     0,     0,     0,     0,     0,     0,     0,  1416,
    53,    54,     0,     0,     0,     0,     0,     0,    55,     0,
    56,    57,    58,    59,    60,    61,    62,     0,     0,     0,
     0,     0,   273,   274,   275,   276,   277,  1446,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,   990,     0,
   991,     0,     0,     0,     0,     0,  1467,     0,     0,     0,
     0,    63,     0,     0,     0,   273,   274,   275,   276,   277,
  1481,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,     0,     0,     0,
     0,  1131,     0,  1132,   273,   274,   275,   276,   277,     0,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
  1226,     0,  1227,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,     0,   273,   274,   275,   276,
   277,   451,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,     0,   273,
   274,   275,   276,   277,   453,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,     0,   273,   274,   275,   276,   277,   631,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,     0,   273,   274,   275,   276,   277,
   635,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,     0,   273,   274,
   275,   276,   277,   636,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
     0,   273,   274,   275,   276,   277,   772,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,     0,   273,   274,   275,   276,   277,   988,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,     0,   273,   274,   275,
   276,   277,  1146,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,     0,     0,
   273,   274,   275,   276,   277,  1188,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,     0,     0,   273,   274,   275,   276,   277,  1189,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,     0,   273,   274,   275,   276,
   277,  1190,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,     0,   273,
   274,   275,   276,   277,  1195,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,     0,   273,   274,   275,   276,   277,  1196,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,     0,   273,   274,   275,   276,   277,
  1229,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,     0,   273,   274,
   275,   276,   277,  1291,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
     0,   273,   274,   275,   276,   277,  1401,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,     0,   273,   274,   275,   276,   277,  1430,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
   476,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,   477,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,   580,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,   587,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,   588,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,   589,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,   649,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,   650,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,   651,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,   770,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
   771,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,   899,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,   900,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,   912,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,   913,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,   944,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,   945,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,   946,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,   947,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,   948,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
   949,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,   950,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,   951,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,   952,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,   953,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,   954,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,   955,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,   966,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,   973,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1079,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1080,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1088,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1091,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1102,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1107,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1110,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1112,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,  1113,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,  1114,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1115,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1116,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1117,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1118,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1119,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1120,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1121,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1122,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,  1123,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,  1128,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1129,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1205,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1214,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1215,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1216,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1217,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1218,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1219,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,  1220,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,  1221,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1222,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1279,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1280,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1281,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1282,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1283,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1284,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1285,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,  1286,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,  1287,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1329,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1330,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1331,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1332,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1333,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1334,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1335,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1336,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,  1337,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,  1372,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1376,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1377,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1378,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1379,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1380,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1381,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1400,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1405,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,  1406,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,  1407,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1408,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1409,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1410,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1433,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1434,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1435,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1436,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1437,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,   273,   274,   275,   276,   277,  1438,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,   273,   274,   275,   276,   277,  1461,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,   273,   274,   275,   276,   277,  1462,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,   273,   274,   275,   276,   277,
  1463,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,   273,   274,   275,   276,
   277,  1475,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,   273,   274,   275,
   276,   277,  1476,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,   273,   274,
   275,   276,   277,  1477,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,   273,
   274,   275,   276,   277,  1492,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
   273,   274,   275,   276,   277,  1493,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,   273,   274,   275,   276,   277,  1494,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,     0,     0,   421,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,     0,     0,
   541,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,     0,     0,   653,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,     0,     0,
   844,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,     0,     0,   964,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,   415,   273,
   274,   275,   276,   277,     0,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,   445,   273,   274,   275,   276,   277,     0,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,   447,   273,   274,   275,   276,   277,
     0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,   448,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
   450,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,   454,   273,   274,   275,   276,   277,     0,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,   455,   273,   274,   275,
   276,   277,     0,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,     0,   462,
   273,   274,   275,   276,   277,     0,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,     0,   497,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,   500,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,   503,   273,
   274,   275,   276,   277,     0,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,   569,   273,   274,   275,   276,   277,     0,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,   570,   273,   274,   275,   276,   277,
     0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,   571,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
   572,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,   573,   273,   274,   275,   276,   277,     0,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,   574,   273,   274,   275,
   276,   277,     0,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,     0,   575,
   273,   274,   275,   276,   277,     0,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,     0,   576,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,   577,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,   578,   273,
   274,   275,   276,   277,     0,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,   579,   273,   274,   275,   276,   277,     0,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,   581,   273,   274,   275,   276,   277,
     0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,   582,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
   583,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,   584,   273,   274,   275,   276,   277,     0,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,   585,   273,   274,   275,
   276,   277,     0,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,     0,   586,
   273,   274,   275,   276,   277,     0,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,     0,   616,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,   619,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,   632,   273,
   274,   275,   276,   277,     0,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,   633,   273,   274,   275,   276,   277,     0,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,   637,   273,   274,   275,   276,   277,
     0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,   638,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
   639,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,   640,   273,   274,   275,   276,   277,     0,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,   641,   273,   274,   275,
   276,   277,     0,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,     0,   658,
   273,   274,   275,   276,   277,     0,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,     0,   662,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,   840,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,   841,   273,
   274,   275,   276,   277,     0,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,   842,   273,   274,   275,   276,   277,     0,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,   843,   273,   274,   275,   276,   277,
     0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,   902,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
   989,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,  1010,   273,   274,   275,   276,   277,     0,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,  1097,   273,   274,   275,
   276,   277,     0,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,     0,  1101,
   273,   274,   275,   276,   277,     0,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,     0,  1103,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,  1208,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,  1210,   273,
   274,   275,   276,   277,     0,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,  1212,   273,   274,   275,   276,   277,     0,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,  1223,   273,   274,   275,   276,   277,
     0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,  1224,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287,     0,
  1225,   273,   274,   275,   276,   277,     0,   278,   279,   280,
   281,   282,   283,   284,   285,   286,     0,     0,     0,     0,
     0,   287,     0,  1382,   273,   274,   275,   276,   277,     0,
   278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     0,     0,     0,     0,   287,     0,  1383,   273,   274,   275,
   276,   277,     0,   278,   279,   280,   281,   282,   283,   284,
   285,   286,     0,     0,     0,     0,     0,   287,     0,  1384,
   273,   274,   275,   276,   277,     0,   278,   279,   280,   281,
   282,   283,   284,   285,   286,     0,     0,     0,     0,     0,
   287,     0,  1464,   273,   274,   275,   276,   277,     0,   278,
   279,   280,   281,   282,   283,   284,   285,   286,     0,     0,
     0,     0,     0,   287,     0,  1465,   273,   274,   275,   276,
   277,     0,   278,   279,   280,   281,   282,   283,   284,   285,
   286,     0,     0,     0,     0,     0,   287,     0,  1466,   273,
   274,   275,   276,   277,     0,   278,   279,   280,   281,   282,
   283,   284,   285,   286,     0,     0,     0,     0,     0,   287,
     0,  1512,   273,   274,   275,   276,   277,     0,   278,   279,
   280,   281,   282,   283,   284,   285,   286,     0,     0,     0,
     0,     0,   287,     0,  1513,   273,   274,   275,   276,   277,
     0,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     0,     0,     0,     0,     0,   287,     0,  1514,   273,   274,
   275,   276,   277,     0,   278,   279,   280,   281,   282,   283,
   284,   285,   286,     0,     0,     0,     0,     0,   287
};

static const short yycheck[] = {    23,
    23,   265,    87,   732,   328,    79,   267,   257,   258,   259,
     4,     4,     4,     3,    44,   919,     4,     4,    64,    64,
    42,     7,     6,  1138,   928,  1002,   303,     7,   181,     3,
   183,   935,    65,    65,     3,     4,     5,    70,    70,   303,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     6,    34,    35,    36,   180,     3,
     4,    86,   184,     4,     6,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    65,
   124,   125,   126,   179,    70,   129,   130,    49,   132,   185,
   168,   169,   100,     6,  1091,   139,   140,   141,   142,     7,
   144,   145,   196,   147,   148,   149,   184,   151,   186,    38,
   859,   179,    41,   179,   164,   165,   166,   185,   149,   185,
   185,     6,   172,   167,   168,   119,   120,   121,   122,   123,
   124,   125,   126,   186,   186,     6,     7,   179,    89,    90,
   421,   185,     4,   187,   179,   189,   190,   444,   154,   155,
   156,   157,   422,     7,   154,   155,   156,   157,  1293,   169,
   444,   458,     7,   180,   168,   169,   179,   184,  1092,   175,
   176,   185,  1096,   185,   458,   175,   176,   185,   185,   168,
   169,     6,   180,   183,   234,   174,   184,   231,    41,    42,
   179,    44,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,     6,   168,   169,   168,   169,     6,    38,
   174,   265,    41,    42,   267,   179,     5,    89,    90,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   168,   169,   154,   155,   156,   157,
   294,   168,   169,   297,     6,    34,    35,    36,   302,   303,
   179,   185,     4,     5,   308,   309,   310,   184,   312,   313,
   314,   315,   316,   317,   318,   325,   326,   179,  1202,  1203,
  1204,  1205,   168,   169,   179,  1209,   330,   331,   332,   168,
   169,   335,    34,    35,    36,   184,   593,   186,   342,   185,
   154,   155,   156,   157,   348,   184,   180,   186,    46,   593,
   184,  1060,     8,   597,   175,   176,   168,   169,   175,   176,
   179,   175,   176,     6,   594,   180,   183,   624,   180,   184,
    38,    39,    40,    41,    42,    43,    44,    45,   179,    47,
   624,    49,    50,   386,    52,    53,   168,   169,   179,  1273,
  1274,   168,   169,  1277,   168,   169,   168,   169,   168,   169,
    42,    69,   184,    38,   186,   179,    41,    42,   185,    44,
   179,   185,   184,   417,   184,    83,    84,   179,   421,   423,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,   168,   169,   168,   169,   179,   168,   169,    42,
   444,  1325,   180,   168,   169,    42,   184,   176,   184,    44,
   184,   180,   456,   184,   458,   180,   460,   461,   175,   176,
   179,   184,   466,   186,   181,   475,   183,   168,   169,   170,
   171,   172,   476,   477,    55,    56,   144,   178,   185,   175,
   176,   485,   185,   724,   725,   181,   185,   183,   492,    42,
  1374,   170,   171,   172,   751,     6,     7,   501,   502,   178,
     6,     6,   158,   159,   160,   161,   162,   751,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   184,   186,   186,
  1404,     6,   178,   175,   176,   184,   184,   186,   186,   181,
   186,   183,   179,   179,   184,   186,   186,     4,   541,   104,
   105,   106,   107,   108,     3,     4,   184,   184,   186,   186,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     4,     3,   580,    58,    59,    60,
    61,    42,    63,   587,   588,   589,   590,   179,   892,   593,
   184,     5,   186,   597,     6,   184,   600,   186,   184,   184,
   186,   186,   612,   179,   184,   609,   186,  1491,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   179,     6,   849,
   624,   625,   178,   184,   184,   186,   186,   184,     5,   186,
   184,   696,   186,   184,   184,   186,   186,   179,   179,   649,
   650,   651,   179,   179,   179,   179,   179,   179,   179,   179,
   654,   655,   179,   657,   179,   179,   179,   667,   888,   179,
   179,   665,   666,     3,     4,   179,   676,   179,   185,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   179,   185,   179,   700,   701,   702,   703,
   704,   705,   706,   707,   708,   709,   710,   711,     8,   168,
   169,   179,   185,   179,   179,   174,   179,   179,     4,   179,
   179,   179,   725,   182,   179,   179,   185,   179,   179,   733,
     6,   735,   185,   181,   788,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,   751,   185,   753,
   185,   755,   160,   161,   162,    92,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   769,   770,   771,  1072,     6,
   178,     5,   179,   179,   179,   179,   179,   179,   179,   179,
   784,   785,   179,   179,   179,   179,   179,   179,     3,     4,
   179,     4,   179,   179,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,   179,   179,
   179,   179,   179,   826,   179,   179,   179,   179,   168,   169,
   179,   179,   179,   179,   174,   179,     6,    87,   180,   179,
   178,   184,   182,   184,     7,   185,   850,     7,   183,     7,
   186,     7,   180,     7,   864,     7,   910,   150,   158,   159,
   160,   161,   162,   185,   164,   165,   166,   167,   168,   169,
   170,   171,   172,     5,   878,   879,   941,     5,   178,     5,
   180,     5,     5,   893,   888,   895,     6,   897,     5,     5,
     5,     5,     5,     5,     5,   899,   900,     5,     5,     5,
     5,     5,     5,     5,     5,   909,   161,   162,   912,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   922,     5,
     5,     5,     5,   178,     5,   929,   930,   931,   137,     5,
     5,     3,   936,     6,    54,     5,   940,     5,     5,   184,
   944,   945,   946,   947,   948,   949,   950,   951,   952,   953,
   954,   955,   180,   168,   169,     6,     4,     6,  1012,   174,
     7,     6,   966,     7,   179,     7,     7,   182,     6,   973,
   185,     6,   183,     7,     7,     7,   150,     6,   186,   186,
   185,   155,   185,     7,   179,     7,   990,   151,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   177,  1008,     8,     3,     4,   178,   183,
   184,   184,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   184,     6,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   184,   184,   184,     5,   184,   178,   184,
     6,     4,   184,   184,     6,   184,   184,     6,     6,     6,
   180,  1075,  1076,  1077,     6,  1079,  1080,     7,     7,     7,
     7,     7,  1086,     7,   184,   184,   184,   184,   184,   184,
  1094,   184,   184,   184,  1148,     6,   184,   184,  1102,     7,
     7,   179,   184,  1107,   184,   184,  1110,   184,  1112,  1113,
  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,
   184,   184,   184,   179,  1128,   179,   179,  1131,   185,   158,
   159,   160,   161,   162,     7,   164,   165,   166,   167,   168,
   169,   170,   171,   172,     6,   182,     7,  1201,   179,   178,
     7,   179,   179,   179,   179,   158,   159,   160,   161,   162,
   179,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   179,   168,   169,   179,   181,   178,     7,   174,     7,     4,
     6,   147,   179,     7,     7,     3,     3,  1241,   185,   158,
   159,   160,   161,   162,     6,   164,   165,   166,   167,   168,
   169,   170,   171,   172,     3,   170,     3,     3,     3,   178,
  1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  1222,     3,
     3,     3,  1226,     3,     3,     3,   158,   159,   160,   161,
   162,     3,   164,   165,   166,   167,   168,   169,   170,   171,
   172,     3,   416,  1297,     5,     5,   178,   158,   159,   160,
   161,   162,     3,   164,   165,   166,   167,   168,   169,   170,
   171,   172,     3,     6,     4,   180,   180,   178,     7,     6,
  1324,   183,     6,   183,     6,  1279,  1280,  1281,  1282,  1283,
  1284,  1285,  1286,  1287,  1288,  1289,  1290,     6,     6,   185,
     6,   185,   184,   184,    88,  1349,   158,   159,   160,   161,
   162,   180,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   180,   184,   184,   180,   180,   178,   184,     6,  1323,
   184,   184,   180,     6,   184,  1329,  1330,  1331,  1332,  1333,
  1334,  1335,  1336,  1337,  1338,   184,  1340,   184,  1342,   184,
   184,   184,   180,   184,   184,   184,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   180,   184,   184,   184,     4,   178,  1371,  1372,   183,
     6,     6,  1376,  1377,  1378,  1379,  1380,  1381,    89,     6,
    38,    39,    40,    41,    42,    43,    44,    45,     6,    47,
   182,    49,    50,     6,    52,    53,  1400,     6,     6,     6,
     6,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
     6,    69,     6,     6,     6,     6,     6,     6,    88,     7,
     3,     6,     3,   170,     6,    83,    84,     6,     6,  1433,
  1434,  1435,  1436,  1437,  1438,  1439,     3,  1441,     6,  1443,
   614,   615,     3,   617,     6,     3,     6,   621,   622,     6,
     3,     3,     3,     7,   183,     4,     6,  1461,  1462,  1463,
     6,     6,     6,   183,     6,   182,    85,   180,   180,    90,
   185,  1475,  1476,  1477,  1478,  1479,  1480,   186,   185,   185,
   184,   184,   656,   184,   184,   659,   144,   184,  1492,  1493,
  1494,  1495,   184,  1497,   180,  1499,   180,   184,   180,   673,
   674,   180,   180,   184,   180,   679,   680,     6,     4,   147,
     5,    88,   686,     6,   688,  1519,  1520,  1521,     3,     6,
     6,     3,     6,     6,  1528,     6,  1530,     6,  1532,     3,
     4,     6,     3,     6,     6,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     6,
   186,     6,     5,   185,     6,   185,   180,   184,   184,     6,
   744,   186,   746,   184,   184,   180,     6,   180,     6,     6,
   184,     6,   756,   757,   758,   184,   184,   761,   762,   763,
   764,   765,   766,   767,     3,     4,     5,     5,     7,     6,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     6,    34,    35,    36,     3,     4,
     6,   186,     6,     6,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     6,   158,
   159,   160,   161,   162,     6,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   848,     6,     6,   185,     6,   178,
     5,   184,   184,   184,   184,    85,   180,   184,   180,   147,
     6,     6,     5,   184,   168,   169,   185,   185,     6,     5,
   174,     8,    85,     6,   184,   179,     6,   185,   184,   186,
   180,   185,   180,   158,   159,   160,   161,   162,   185,   164,
   165,   166,   167,   168,   169,   170,   171,   172,     8,   184,
   184,     6,   906,   178,   186,     6,     6,     6,   186,   913,
     6,   185,   152,     8,   184,   154,   155,   156,   157,   184,
   153,   184,   184,     6,   185,     6,   185,   180,   932,   168,
   169,   185,   184,     6,     6,   174,   175,   176,     6,     6,
   179,   184,   181,   184,   183,     8,   158,   159,   160,   161,
   162,   185,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   185,   185,   168,   169,   184,   178,     6,     6,   174,
     3,     4,     6,   180,   179,     6,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   158,   159,   160,   161,   162,   185,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   185,   185,     6,     6,     6,
   178,   158,   159,   160,   161,   162,     0,   164,   165,   166,
   167,   168,   169,   170,   171,   172,     0,     7,   543,     7,
     7,   178,   853,    -1,   904,    -1,    -1,  1268,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   158,   159,   160,   161,   162,   178,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,  1083,
    -1,  1085,    -1,   178,  1088,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,
  1104,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,     0,     1,    -1,     3,
     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   168,   169,    -1,    -1,    -1,
    -1,   174,    -1,    -1,    -1,    -1,   179,    -1,    -1,    33,
    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    47,    48,    49,    50,    51,    52,    53,
    -1,    -1,    -1,    57,    58,    59,    60,    61,    62,    63,
    -1,    65,    66,    67,    68,    69,    -1,    -1,  1192,    -1,
    -1,    -1,    -1,  1197,  1198,    -1,    -1,    -1,    -1,    83,
    84,    -1,    -1,    -1,    -1,    -1,    -1,    91,    41,    93,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,
   124,   125,   126,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    47,    -1,    49,    50,    -1,    52,    53,    -1,
   144,   145,   146,    -1,   148,  1269,  1270,    -1,   101,   102,
   103,    -1,    -1,    -1,    69,    -1,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,    -1,    -1,    83,    84,
    -1,    -1,    -1,    -1,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
   143,    -1,    -1,    -1,    -1,    -1,    -1,  1321,    -1,    -1,
    -1,     4,  1326,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,   144,
    33,   186,    -1,    -1,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
    53,  1375,    -1,    -1,    57,    58,    59,    60,    61,    62,
    63,    -1,    65,    66,    67,    68,    69,    -1,    -1,    -1,
    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1403,
    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    93,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,   158,   159,   160,   161,   162,  1431,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,   184,    -1,
   186,    -1,    -1,    -1,    -1,    -1,  1460,    -1,    -1,    -1,
    -1,   144,    -1,    -1,    -1,   158,   159,   160,   161,   162,
  1474,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,    -1,
    -1,   184,    -1,   186,   158,   159,   160,   161,   162,    -1,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,
   184,    -1,   186,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,    -1,   158,   159,   160,   161,
   162,   186,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,   158,
   159,   160,   161,   162,   186,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,    -1,   158,   159,   160,   161,   162,   186,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,    -1,   158,   159,   160,   161,   162,
   186,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,   158,   159,
   160,   161,   162,   186,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
    -1,   158,   159,   160,   161,   162,   186,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,    -1,   158,   159,   160,   161,   162,   186,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,    -1,   158,   159,   160,
   161,   162,   186,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,
   158,   159,   160,   161,   162,   186,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,    -1,   158,   159,   160,   161,   162,   186,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,    -1,   158,   159,   160,   161,
   162,   186,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,   158,
   159,   160,   161,   162,   186,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,    -1,   158,   159,   160,   161,   162,   186,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,    -1,   158,   159,   160,   161,   162,
   186,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,   158,   159,
   160,   161,   162,   186,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
    -1,   158,   159,   160,   161,   162,   186,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,    -1,   158,   159,   160,   161,   162,   186,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,   158,   159,   160,   161,   162,   184,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,   158,   159,   160,   161,   162,   184,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,   184,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,   162,
   184,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,   161,
   162,   184,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,   160,
   161,   162,   184,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,   159,
   160,   161,   162,   184,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,   158,
   159,   160,   161,   162,   184,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
   158,   159,   160,   161,   162,   184,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,   158,   159,   160,   161,   162,   184,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,    -1,    -1,   182,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,
   182,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,    -1,    -1,   182,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,
   182,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,    -1,    -1,   182,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,
   159,   160,   161,   162,    -1,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,   180,   158,   159,   160,   161,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,   162,
    -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
   180,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,   180,   158,   159,   160,   161,   162,    -1,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,
   161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,
   158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,   180,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,
   159,   160,   161,   162,    -1,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,   180,   158,   159,   160,   161,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,   162,
    -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
   180,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,   180,   158,   159,   160,   161,   162,    -1,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,
   161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,
   158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,   180,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,
   159,   160,   161,   162,    -1,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,   180,   158,   159,   160,   161,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,   162,
    -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
   180,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,   180,   158,   159,   160,   161,   162,    -1,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,
   161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,
   158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,   180,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,
   159,   160,   161,   162,    -1,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,   180,   158,   159,   160,   161,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,   162,
    -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
   180,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,   180,   158,   159,   160,   161,   162,    -1,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,
   161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,
   158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,   180,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,
   159,   160,   161,   162,    -1,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,   180,   158,   159,   160,   161,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,   162,
    -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
   180,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,   180,   158,   159,   160,   161,   162,    -1,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,
   161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,
   158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,   180,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,
   159,   160,   161,   162,    -1,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,   180,   158,   159,   160,   161,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,   162,
    -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,
   180,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,
    -1,   178,    -1,   180,   158,   159,   160,   161,   162,    -1,
   164,   165,   166,   167,   168,   169,   170,   171,   172,    -1,
    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,
   161,   162,    -1,   164,   165,   166,   167,   168,   169,   170,
   171,   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,
   158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
   168,   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
   178,    -1,   180,   158,   159,   160,   161,   162,    -1,   164,
   165,   166,   167,   168,   169,   170,   171,   172,    -1,    -1,
    -1,    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,
   162,    -1,   164,   165,   166,   167,   168,   169,   170,   171,
   172,    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,
   159,   160,   161,   162,    -1,   164,   165,   166,   167,   168,
   169,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178,
    -1,   180,   158,   159,   160,   161,   162,    -1,   164,   165,
   166,   167,   168,   169,   170,   171,   172,    -1,    -1,    -1,
    -1,    -1,   178,    -1,   180,   158,   159,   160,   161,   162,
    -1,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    -1,    -1,    -1,    -1,    -1,   178,    -1,   180,   158,   159,
   160,   161,   162,    -1,   164,   165,   166,   167,   168,   169,
   170,   171,   172,    -1,    -1,    -1,    -1,    -1,   178
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 160 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 168 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 169 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 174 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 188 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 195 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 212 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 213 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 214 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 219 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 224 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 235 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 238 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 242 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 248 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 254 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 261 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 267 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 271 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 275 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 282 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 286 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 291 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 295 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 299 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 303 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 307 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 311 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 315 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 319 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 325 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 328 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 331 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 335 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 339 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 343 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 347 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 352 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 355 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 372 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 382 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 385 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh file format read");
    ;
    break;}
case 55:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 407 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 68:
#line 411 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Printf format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 69:
#line 441 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 70:
#line 445 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 71:
#line 452 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 84:
#line 471 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 473 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 478 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 87:
#line 483 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 88:
#line 490 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 492 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 497 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 91:
#line 502 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 92:
#line 509 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 511 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 516 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 521 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 96:
#line 528 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 530 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 536 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 542 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 100:
#line 549 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 551 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 557 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 563 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 104:
#line 570 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 572 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 578 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 584 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 108:
#line 591 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 593 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 600 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 609 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 112:
#line 616 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 618 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 625 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 634 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 116:
#line 641 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 643 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 650 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 659 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 120:
#line 666 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 668 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 676 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 685 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 124:
#line 692 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 694 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 702 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 711 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 128:
#line 718 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 720 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 728 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 737 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 132:
#line 749 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 133:
#line 750 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 134:
#line 751 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 135:
#line 752 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 136:
#line 753 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 137:
#line 756 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 138:
#line 757 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 139:
#line 764 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 140:
#line 791 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 141:
#line 825 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	    }
	    List_Add(Symbol_L, &TheSymbol);
	  }
	  else
	    vyyerror("Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 142:
#line 872 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 143:
#line 887 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 144:
#line 896 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 145:
#line 911 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 146:
#line 923 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 147:
#line 937 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 148:
#line 960 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 149:
#line 984 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 150:
#line 996 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 151:
#line 1010 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 152:
#line 1022 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 153:
#line 1036 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 154:
#line 1052 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 1068 "Gmsh.y"
{
#ifndef _NOPLUGIN
    try 
      {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].d); 
      }
    catch (...)
      {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
#endif
  ;
    break;}
case 156:
#line 1081 "Gmsh.y"
{
#ifndef _NOPLUGIN
    try 
      {
	GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].c); 
      }
    catch (...)
      {
	Msg(WARNING,"Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
      }
#endif
  ;
    break;}
case 157:
#line 1105 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 1112 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 159:
#line 1118 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 160:
#line 1137 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 161:
#line 1148 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 162:
#line 1156 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 163:
#line 1162 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1168 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 165:
#line 1187 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 166:
#line 1193 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1199 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 168:
#line 1216 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 169:
#line 1222 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1228 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 171:
#line 1234 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	vyyerror("Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
		 List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 172:
#line 1245 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 173:
#line 1264 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 174:
#line 1276 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1282 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 176:
#line 1301 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 177:
#line 1324 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 178:
#line 1332 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 179:
#line 1336 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1342 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 181:
#line 1348 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 182:
#line 1360 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 183:
#line 1366 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 184:
#line 1372 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 185:
#line 1385 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 186:
#line 1390 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 187:
#line 1395 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 188:
#line 1400 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 189:
#line 1407 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 190:
#line 1408 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 191:
#line 1409 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 192:
#line 1414 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 193:
#line 1418 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 194:
#line 1430 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 195:
#line 1448 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 196:
#line 1455 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 197:
#line 1460 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 198:
#line 1472 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  //
	  //Est-ce grave de laisser le stream ouvert? Si on fait le
	  //fclose, on ne peut pas faire appel a une fonction
	  //(Function) definie en dehors de son fichier de
	  //definition...
	  //
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing system call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 199:
#line 1539 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 200:
#line 1559 "Gmsh.y"
{
#ifndef _NOPLUGIN
    GMSH_PluginManager::Instance()->Action(yyvsp[-4].c,yyvsp[-1].c,0); 
#endif
   ;
    break;}
case 201:
#line 1565 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 202:
#line 1569 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 203:
#line 1591 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 204:
#line 1605 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 205:
#line 1619 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 206:
#line 1644 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 207:
#line 1669 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 208:
#line 1695 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 209:
#line 1701 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 210:
#line 1706 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 211:
#line 1711 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 212:
#line 1715 "Gmsh.y"
{
    ;
    break;}
case 213:
#line 1726 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 214:
#line 1731 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 215:
#line 1737 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 216:
#line 1741 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 217:
#line 1745 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 218:
#line 1749 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 219:
#line 1753 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 220:
#line 1758 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(1,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],0.,0.,0.,0.,vol,&extr);
    ;
    break;}
case 221:
#line 1763 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 222:
#line 1769 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(0,(int)yyvsp[-12].d,yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 223:
#line 1777 "Gmsh.y"
{
    ;
    break;}
case 224:
#line 1780 "Gmsh.y"
{
    ;
    break;}
case 225:
#line 1786 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 226:
#line 1806 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 227:
#line 1817 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 228:
#line 1835 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 229:
#line 1853 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  Msg(WARNING, "Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 230:
#line 1871 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong definition of Transfinite Surface %d: "
		   "%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 231:
#line 1893 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	Msg(WARNING, "Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong definition of Elliptic Surface %d: "
		   "%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 232:
#line 1914 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	Msg(WARNING, "Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong definition of Transfinite Volume %d: "
		   "%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 233:
#line 1935 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 234:
#line 1949 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 235:
#line 1971 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 236:
#line 1975 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 237:
#line 1986 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 238:
#line 1987 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 239:
#line 1988 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 240:
#line 1989 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 241:
#line 1990 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 242:
#line 1994 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 243:
#line 1995 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 244:
#line 1996 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 245:
#line 1997 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 246:
#line 1998 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 247:
#line 1999 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 248:
#line 2000 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 249:
#line 2001 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 250:
#line 2003 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 251:
#line 2009 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 252:
#line 2010 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 253:
#line 2011 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 254:
#line 2012 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 255:
#line 2013 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 256:
#line 2014 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 257:
#line 2015 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 258:
#line 2016 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 259:
#line 2017 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 260:
#line 2018 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 261:
#line 2019 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 262:
#line 2020 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 263:
#line 2021 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 264:
#line 2022 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 265:
#line 2023 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 266:
#line 2024 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 267:
#line 2025 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2026 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 269:
#line 2027 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2028 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 271:
#line 2029 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2030 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 273:
#line 2031 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 274:
#line 2032 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2033 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 276:
#line 2034 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 277:
#line 2035 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 278:
#line 2036 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2037 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 280:
#line 2038 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 281:
#line 2039 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 282:
#line 2040 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 283:
#line 2049 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 284:
#line 2050 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 285:
#line 2051 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 286:
#line 2052 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 287:
#line 2057 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 288:
#line 2068 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 289:
#line 2085 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 290:
#line 2096 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 291:
#line 2115 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 292:
#line 2131 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 293:
#line 2147 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 294:
#line 2163 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 295:
#line 2181 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 296:
#line 2185 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 297:
#line 2189 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 298:
#line 2193 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 299:
#line 2197 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 300:
#line 2203 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 301:
#line 2207 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 302:
#line 2211 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 303:
#line 2215 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 304:
#line 2222 "Gmsh.y"
{
    ;
    break;}
case 305:
#line 2225 "Gmsh.y"
{
    ;
    break;}
case 306:
#line 2231 "Gmsh.y"
{
    ;
    break;}
case 307:
#line 2234 "Gmsh.y"
{
    ;
    break;}
case 308:
#line 2240 "Gmsh.y"
{
    ;
    break;}
case 309:
#line 2243 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 310:
#line 2247 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 311:
#line 2254 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 312:
#line 2259 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 313:
#line 2267 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 314:
#line 2272 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 315:
#line 2276 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 316:
#line 2280 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 317:
#line 2291 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 318:
#line 2297 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 319:
#line 2308 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 320:
#line 2322 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 321:
#line 2338 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 322:
#line 2358 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 323:
#line 2383 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 324:
#line 2388 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 325:
#line 2392 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 326:
#line 2396 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 327:
#line 2408 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 328:
#line 2412 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 329:
#line 2423 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 330:
#line 2428 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 331:
#line 2447 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 332:
#line 2451 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 333:
#line 2465 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 334:
#line 2470 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 335:
#line 2477 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 336:
#line 2481 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 337:
#line 2489 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 338:
#line 2502 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 339:
#line 2506 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Sprintf format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
      strcpy(yyval.c, tmpstring);
      List_Delete(yyvsp[-1].l);
      Free(yyvsp[-3].c);
    ;
    break;}
case 340:
#line 2531 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 341:
#line 2545 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2560 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


