
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tStrcat	287
#define	tStrdup	288
#define	tStrprefix	289
#define	tDraw	290
#define	tPoint	291
#define	tCircle	292
#define	tEllipsis	293
#define	tLine	294
#define	tSurface	295
#define	tSpline	296
#define	tVolume	297
#define	tCharacteristic	298
#define	tLength	299
#define	tParametric	300
#define	tElliptic	301
#define	tPlane	302
#define	tRuled	303
#define	tTransfinite	304
#define	tComplex	305
#define	tPhysical	306
#define	tUsing	307
#define	tBump	308
#define	tProgression	309
#define	tRotate	310
#define	tTranslate	311
#define	tSymmetry	312
#define	tDilate	313
#define	tExtrude	314
#define	tDuplicata	315
#define	tLoop	316
#define	tRecombine	317
#define	tDelete	318
#define	tCoherence	319
#define	tIntersect	320
#define	tAttractor	321
#define	tLayers	322
#define	tScalarTetrahedron	323
#define	tVectorTetrahedron	324
#define	tTensorTetrahedron	325
#define	tScalarTriangle	326
#define	tVectorTriangle	327
#define	tTensorTriangle	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarPoint	332
#define	tVectorPoint	333
#define	tTensorPoint	334
#define	tBSpline	335
#define	tNurbs	336
#define	tOrder	337
#define	tWith	338
#define	tBounds	339
#define	tKnots	340
#define	tColor	341
#define	tColorTable	342
#define	tFor	343
#define	tIn	344
#define	tEndFor	345
#define	tIf	346
#define	tEndIf	347
#define	tExit	348
#define	tReturn	349
#define	tCall	350
#define	tFunction	351
#define	tMesh	352
#define	tB_SPLINE_SURFACE_WITH_KNOTS	353
#define	tB_SPLINE_CURVE_WITH_KNOTS	354
#define	tCARTESIAN_POINT	355
#define	tTRUE	356
#define	tFALSE	357
#define	tUNSPECIFIED	358
#define	tU	359
#define	tV	360
#define	tEDGE_CURVE	361
#define	tVERTEX_POINT	362
#define	tORIENTED_EDGE	363
#define	tPLANE	364
#define	tFACE_OUTER_BOUND	365
#define	tEDGE_LOOP	366
#define	tADVANCED_FACE	367
#define	tVECTOR	368
#define	tDIRECTION	369
#define	tAXIS2_PLACEMENT_3D	370
#define	tISO	371
#define	tENDISO	372
#define	tENDSEC	373
#define	tDATA	374
#define	tHEADER	375
#define	tFILE_DESCRIPTION	376
#define	tFILE_SCHEMA	377
#define	tFILE_NAME	378
#define	tMANIFOLD_SOLID_BREP	379
#define	tCLOSED_SHELL	380
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	381
#define	tFACE_BOUND	382
#define	tCYLINDRICAL_SURFACE	383
#define	tCONICAL_SURFACE	384
#define	tCIRCLE	385
#define	tTRIMMED_CURVE	386
#define	tGEOMETRIC_SET	387
#define	tCOMPOSITE_CURVE_SEGMENT	388
#define	tCONTINUOUS	389
#define	tCOMPOSITE_CURVE	390
#define	tTOROIDAL_SURFACE	391
#define	tPRODUCT_DEFINITION	392
#define	tPRODUCT_DEFINITION_SHAPE	393
#define	tSHAPE_DEFINITION_REPRESENTATION	394
#define	tELLIPSE	395
#define	tTrimmed	396
#define	tSolid	397
#define	tEndSolid	398
#define	tVertex	399
#define	tFacet	400
#define	tNormal	401
#define	tOuter	402
#define	tLoopSTL	403
#define	tEndLoop	404
#define	tEndFacet	405
#define	tAFFECTPLUS	406
#define	tAFFECTMINUS	407
#define	tAFFECTTIMES	408
#define	tAFFECTDIVIDE	409
#define	tOR	410
#define	tAND	411
#define	tEQUAL	412
#define	tNOTEQUAL	413
#define	tAPPROXEQUAL	414
#define	tLESSOREQUAL	415
#define	tGREATEROREQUAL	416
#define	tCROSSPRODUCT	417
#define	tPLUSPLUS	418
#define	tMINUSMINUS	419
#define	UNARYPREC	420

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.91 2001-07-24 11:33:47 geuzaine Exp $

  //
  // Generaliser sprintf avec des chaines de caracteres
  // 

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 71 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1530
#define	YYFLAG		-32768
#define	YYNTBASE	185

#define YYTRANSLATE(x) ((unsigned)(x) <= 420 ? yytranslate[x] : 266)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   172,     2,     2,     2,   170,     2,     2,   177,
   178,   168,   166,   182,   167,   181,   169,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   162,
     2,   164,   156,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   179,     2,   180,   176,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   183,     2,   184,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   157,
   158,   159,   160,   161,   163,   165,   171,   173,   174,   175
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   531,   539,   546,
   555,   556,   559,   562,   565,   568,   571,   574,   577,   580,
   583,   586,   589,   592,   594,   598,   599,   613,   615,   619,
   620,   634,   636,   640,   641,   655,   657,   661,   662,   682,
   684,   688,   689,   709,   711,   715,   716,   736,   738,   742,
   743,   769,   771,   775,   776,   802,   804,   808,   809,   835,
   837,   841,   842,   874,   876,   880,   881,   913,   915,   919,
   920,   952,   954,   956,   958,   960,   962,   964,   966,   971,
   979,   989,   996,  1000,  1007,  1014,  1024,  1031,  1041,  1047,
  1056,  1065,  1077,  1084,  1094,  1102,  1111,  1124,  1131,  1137,
  1145,  1153,  1166,  1174,  1184,  1202,  1210,  1219,  1228,  1236,
  1248,  1254,  1263,  1276,  1285,  1308,  1329,  1338,  1347,  1353,
  1362,  1370,  1379,  1385,  1397,  1403,  1413,  1415,  1417,  1419,
  1420,  1423,  1428,  1433,  1440,  1444,  1448,  1452,  1455,  1458,
  1465,  1474,  1483,  1494,  1496,  1499,  1501,  1505,  1510,  1512,
  1521,  1534,  1543,  1556,  1565,  1578,  1590,  1606,  1608,  1611,
  1621,  1624,  1631,  1641,  1651,  1660,  1669,  1678,  1685,  1690,
  1693,  1696,  1698,  1700,  1702,  1704,  1706,  1708,  1712,  1715,
  1718,  1721,  1725,  1729,  1733,  1737,  1741,  1745,  1749,  1753,
  1757,  1761,  1765,  1769,  1773,  1777,  1783,  1788,  1793,  1798,
  1803,  1808,  1813,  1818,  1823,  1828,  1833,  1840,  1845,  1850,
  1855,  1860,  1865,  1870,  1877,  1884,  1891,  1896,  1898,  1900,
  1902,  1907,  1910,  1916,  1920,  1927,  1932,  1940,  1942,  1945,
  1948,  1952,  1956,  1968,  1978,  1986,  1994,  1995,  1999,  2001,
  2005,  2006,  2010,  2014,  2016,  2020,  2022,  2024,  2028,  2033,
  2037,  2043,  2047,  2052,  2059,  2067,  2069,  2071,  2075,  2079,
  2089,  2097,  2099,  2105,  2109,  2116,  2118,  2122,  2124,  2131,
  2136,  2141,  2148,  2153,  2160
};

static const short yyrhs[] = {   188,
     0,   187,     0,   193,     0,     1,     6,     0,     3,     0,
   167,     3,     0,   143,     0,   146,   147,   186,   186,   186,
   148,   149,   145,   186,   186,   186,   145,   186,   186,   186,
   145,   186,   186,   186,   150,   151,     0,   144,     0,     0,
   188,   189,     0,   190,     0,   192,     0,   191,     0,   117,
     6,     0,   118,     6,     0,   120,     6,     0,   119,     6,
     0,   121,     6,     0,   122,   177,   255,   182,     5,   178,
     6,     0,   123,   177,   255,   178,     6,     0,   124,   177,
     5,   182,     5,   182,   255,   182,   255,   182,     5,   182,
     5,   182,     5,   178,     6,     0,     3,     7,   101,   177,
     5,   182,   253,   178,     6,     0,     3,     7,   100,   177,
     5,   182,   251,   182,   259,   182,   250,   182,   250,   182,
   250,   182,   259,   182,   259,   182,   250,   178,     6,     0,
     3,     7,    99,   177,     5,   182,   251,   182,   251,   182,
   257,   182,   250,   182,   250,   182,   250,   182,   250,   182,
   259,   182,   259,   182,   259,   182,   259,   182,   250,   178,
     6,     0,     3,     7,   107,   177,     5,   182,     3,   182,
     3,   182,     3,   182,   250,   178,     6,     0,     3,     7,
   111,   177,     5,   182,     3,   182,   250,   178,     6,     0,
     3,     7,   128,   177,     5,   182,     3,   182,   250,   178,
     6,     0,     3,     7,   109,   177,     5,   182,   168,   182,
   168,   182,   251,   182,   250,   178,     6,     0,     3,     7,
   112,   177,     5,   182,   259,   178,     6,     0,     3,     7,
   113,   177,     5,   182,   259,   182,     3,   182,   250,   178,
     6,     0,     3,     7,   108,   177,     5,   182,     3,   178,
     6,     0,     3,     7,   114,   177,     5,   182,     3,   182,
   251,   178,     6,     0,     3,     7,   116,   177,     5,   182,
     3,   182,     3,   182,     3,   178,     6,     0,     3,     7,
   115,   177,     5,   182,   253,   178,     6,     0,     3,     7,
   110,   177,     5,   182,     3,   178,     6,     0,     3,     7,
    40,   177,     5,   182,     3,   182,     3,   178,     6,     0,
     3,     7,   126,   177,     5,   182,   259,   178,     6,     0,
     3,     7,   127,   177,     5,   182,   259,   182,     3,   178,
     6,     0,     3,     7,   125,   177,     5,   182,     3,   178,
     6,     0,     3,     7,   129,   177,     5,   182,     3,   182,
   251,   178,     6,     0,     3,     7,   130,   177,     5,   182,
     3,   182,   251,   182,   251,   178,     6,     0,     3,     7,
   137,   177,     5,   182,     3,   182,   251,   182,   251,   178,
     6,     0,     3,     7,   131,   177,     5,   182,     3,   182,
   251,   178,     6,     0,     3,     7,   141,   177,     5,   182,
     3,   182,   251,   182,   251,   178,     6,     0,     3,     7,
   132,   177,     5,   182,     3,   182,   259,   182,   259,   182,
   250,   182,   250,   178,     6,     0,     3,     7,   133,   177,
     5,   182,   259,   178,     6,     0,     3,     7,   134,   177,
   135,   182,   250,   182,     3,   178,     6,     0,     3,     7,
   136,   177,     5,   182,   259,   182,   250,   178,     6,     0,
     3,     7,   138,   177,     5,   182,     5,   182,     3,   182,
     3,   178,     6,     0,     3,     7,   139,   177,     5,   182,
     5,   182,     3,   178,     6,     0,     3,     7,   140,   177,
     3,   182,     3,   178,     6,     0,     0,   193,   194,     0,
   196,     0,   195,     0,   236,     0,   237,     0,   238,     0,
   241,     0,   242,     0,   245,     0,   248,     0,   249,     0,
   244,     0,   243,     0,    31,   177,     5,   178,     6,     0,
    31,   177,     5,   182,   261,   178,     6,     0,     4,     5,
   183,   197,   184,     6,     0,     4,     5,     4,   253,   183,
   197,   184,     6,     0,     0,   197,   199,     0,   197,   202,
     0,   197,   205,     0,   197,   208,     0,   197,   211,     0,
   197,   214,     0,   197,   217,     0,   197,   220,     0,   197,
   223,     0,   197,   226,     0,   197,   229,     0,   197,   232,
     0,   251,     0,   198,   182,   251,     0,     0,    78,   177,
   251,   182,   251,   182,   251,   178,   200,   183,   198,   184,
     6,     0,   251,     0,   201,   182,   251,     0,     0,    79,
   177,   251,   182,   251,   182,   251,   178,   203,   183,   201,
   184,     6,     0,   251,     0,   204,   182,   251,     0,     0,
    80,   177,   251,   182,   251,   182,   251,   178,   206,   183,
   204,   184,     6,     0,   251,     0,   207,   182,   251,     0,
     0,    75,   177,   251,   182,   251,   182,   251,   182,   251,
   182,   251,   182,   251,   178,   209,   183,   207,   184,     6,
     0,   251,     0,   210,   182,   251,     0,     0,    76,   177,
   251,   182,   251,   182,   251,   182,   251,   182,   251,   182,
   251,   178,   212,   183,   210,   184,     6,     0,   251,     0,
   213,   182,   251,     0,     0,    77,   177,   251,   182,   251,
   182,   251,   182,   251,   182,   251,   182,   251,   178,   215,
   183,   213,   184,     6,     0,   251,     0,   216,   182,   251,
     0,     0,    72,   177,   251,   182,   251,   182,   251,   182,
   251,   182,   251,   182,   251,   182,   251,   182,   251,   182,
   251,   178,   218,   183,   216,   184,     6,     0,   251,     0,
   219,   182,   251,     0,     0,    73,   177,   251,   182,   251,
   182,   251,   182,   251,   182,   251,   182,   251,   182,   251,
   182,   251,   182,   251,   178,   221,   183,   219,   184,     6,
     0,   251,     0,   222,   182,   251,     0,     0,    74,   177,
   251,   182,   251,   182,   251,   182,   251,   182,   251,   182,
   251,   182,   251,   182,   251,   182,   251,   178,   224,   183,
   222,   184,     6,     0,   251,     0,   225,   182,   251,     0,
     0,    69,   177,   251,   182,   251,   182,   251,   182,   251,
   182,   251,   182,   251,   182,   251,   182,   251,   182,   251,
   182,   251,   182,   251,   182,   251,   178,   227,   183,   225,
   184,     6,     0,   251,     0,   228,   182,   251,     0,     0,
    70,   177,   251,   182,   251,   182,   251,   182,   251,   182,
   251,   182,   251,   182,   251,   182,   251,   182,   251,   182,
   251,   182,   251,   182,   251,   178,   230,   183,   228,   184,
     6,     0,   251,     0,   231,   182,   251,     0,     0,    71,
   177,   251,   182,   251,   182,   251,   182,   251,   182,   251,
   182,   251,   182,   251,   182,   251,   182,   251,   182,   251,
   182,   251,   182,   251,   178,   233,   183,   231,   184,     6,
     0,     7,     0,   152,     0,   153,     0,   154,     0,   155,
     0,   173,     0,   174,     0,     4,   234,   251,     6,     0,
     4,   179,   251,   180,   234,   251,     6,     0,     4,   179,
   183,   261,   184,   180,   234,   259,     6,     0,     4,   179,
   180,     7,   259,     6,     0,     4,   235,     6,     0,     4,
   179,   251,   180,   235,     6,     0,     4,   181,     4,     7,
   265,     6,     0,     4,   179,   251,   180,   181,     4,     7,
   265,     6,     0,     4,   181,     4,   234,   251,     6,     0,
     4,   179,   251,   180,   181,     4,   234,   251,     6,     0,
     4,   181,     4,   235,     6,     0,     4,   179,   251,   180,
   181,     4,   235,     6,     0,     4,   181,    87,   181,     4,
     7,   262,     6,     0,     4,   179,   251,   180,   181,    87,
   181,     4,     7,   262,     6,     0,     4,   181,    88,     7,
   263,     6,     0,     4,   179,   251,   180,   181,    88,     7,
   263,     6,     0,    37,   177,   251,   178,     7,   253,     6,
     0,    52,    37,   177,   251,   178,     7,   259,     6,     0,
    67,    37,   259,     7,   183,   251,   182,   251,   182,   251,
   184,     6,     0,    44,    45,   259,     7,   251,     6,     0,
    37,   183,   251,   184,     6,     0,    40,   177,   251,   178,
     7,   259,     6,     0,    42,   177,   251,   178,     7,   259,
     6,     0,    67,    40,   259,     7,   183,   251,   182,   251,
   182,   251,   184,     6,     0,    38,   177,   251,   178,     7,
   259,     6,     0,    38,   177,   251,   178,     7,   259,    48,
   253,     6,     0,    46,   177,   251,   178,     7,   183,   251,
   182,   251,   182,     5,   182,     5,   182,     5,   184,     6,
     0,    39,   177,   251,   178,     7,   259,     6,     0,    52,
    40,   177,   251,   178,     7,   259,     6,     0,    40,    62,
   177,   251,   178,     7,   259,     6,     0,    81,   177,   251,
   178,     7,   259,     6,     0,    82,   177,   251,   178,     7,
   259,    86,   259,    83,   251,     6,     0,    40,   183,   251,
   184,     6,     0,    48,    41,   177,   251,   178,     7,   259,
     6,     0,   142,    41,   177,   251,   178,     7,   183,   251,
   182,   259,   184,     6,     0,    49,    41,   177,   251,   178,
     7,   259,     6,     0,    82,    41,    84,    85,   177,   251,
   178,     7,   257,    86,   183,   259,   182,   259,   184,    83,
   183,   251,   182,   251,   184,     6,     0,    82,    41,   177,
   251,   178,     7,   257,    86,   183,   259,   182,   259,   184,
    83,   183,   251,   182,   251,   184,     6,     0,    52,    41,
   177,   251,   178,     7,   259,     6,     0,    41,    62,   177,
   251,   178,     7,   259,     6,     0,    41,   183,   251,   184,
     6,     0,    51,    43,   177,   251,   178,     7,   259,     6,
     0,    43,   177,   251,   178,     7,   259,     6,     0,    52,
    43,   177,   251,   178,     7,   259,     6,     0,    57,   253,
   183,   239,   184,     0,    56,   183,   253,   182,   253,   182,
   251,   184,   183,   239,   184,     0,    58,   253,   183,   239,
   184,     0,    59,   183,   253,   182,   251,   184,   183,   239,
   184,     0,   241,     0,   240,     0,   238,     0,     0,   240,
   237,     0,    61,   183,   240,   184,     0,    64,   183,   240,
   184,     0,    64,     4,   179,   251,   180,     6,     0,    64,
    98,     6,     0,     4,   265,     6,     0,     4,   251,     6,
     0,    94,     6,     0,    36,     6,     0,    89,   177,   251,
     8,   251,   178,     0,    89,   177,   251,     8,   251,     8,
   251,   178,     0,    89,     4,    90,   183,   251,     8,   251,
   184,     0,    89,     4,    90,   183,   251,     8,   251,     8,
   251,   184,     0,    91,     0,    97,     4,     0,    95,     0,
    96,     4,     6,     0,    92,   177,   251,   178,     0,    93,
     0,    60,    37,   183,   251,   182,   253,   184,     6,     0,
    60,    37,   183,   251,   182,   253,   182,   253,   182,   251,
   184,     6,     0,    60,    40,   183,   251,   182,   253,   184,
     6,     0,    60,    40,   183,   251,   182,   253,   182,   253,
   182,   251,   184,     6,     0,    60,    41,   183,   251,   182,
   253,   184,     6,     0,    60,    41,   183,   251,   182,   253,
   182,   253,   182,   251,   184,     6,     0,    60,    41,   183,
   251,   182,   253,   184,   183,   246,   184,     6,     0,    60,
    41,   183,   251,   182,   253,   182,   253,   182,   251,   184,
   183,   246,   184,     6,     0,   247,     0,   246,   247,     0,
    68,   183,   259,   182,   259,   182,   259,   184,     6,     0,
    63,     6,     0,    50,    40,   259,     7,   251,     6,     0,
    50,    40,   259,     7,   251,    53,    55,   251,     6,     0,
    50,    40,   259,     7,   251,    53,    54,   251,     6,     0,
    50,    41,   183,   251,   184,     7,   259,     6,     0,    47,
    41,   183,   251,   184,     7,   259,     6,     0,    50,    43,
   183,   251,   184,     7,   259,     6,     0,    63,    41,   259,
     7,   251,     6,     0,    63,    41,   259,     6,     0,    65,
     6,     0,    66,     6,     0,   102,     0,   103,     0,   104,
     0,   105,     0,   106,     0,   252,     0,   177,   251,   178,
     0,   167,   251,     0,   166,   251,     0,   172,   251,     0,
   251,   167,   251,     0,   251,   166,   251,     0,   251,   168,
   251,     0,   251,   169,   251,     0,   251,   170,   251,     0,
   251,   176,   251,     0,   251,   162,   251,     0,   251,   164,
   251,     0,   251,   163,   251,     0,   251,   165,   251,     0,
   251,   159,   251,     0,   251,   160,   251,     0,   251,   158,
   251,     0,   251,   157,   251,     0,   251,   156,   251,     8,
   251,     0,    10,   177,   251,   178,     0,    11,   177,   251,
   178,     0,    12,   177,   251,   178,     0,    13,   177,   251,
   178,     0,    14,   177,   251,   178,     0,    15,   177,   251,
   178,     0,    16,   177,   251,   178,     0,    17,   177,   251,
   178,     0,    18,   177,   251,   178,     0,    20,   177,   251,
   178,     0,    21,   177,   251,   182,   251,   178,     0,    22,
   177,   251,   178,     0,    23,   177,   251,   178,     0,    24,
   177,   251,   178,     0,    25,   177,   251,   178,     0,    26,
   177,   251,   178,     0,    27,   177,   251,   178,     0,    28,
   177,   251,   182,   251,   178,     0,    29,   177,   251,   182,
   251,   178,     0,    30,   177,   251,   182,   251,   178,     0,
    19,   177,   251,   178,     0,     3,     0,     9,     0,     4,
     0,     4,   179,   251,   180,     0,     4,   235,     0,     4,
   179,   251,   180,   235,     0,     4,   181,     4,     0,     4,
   179,   251,   180,   181,     4,     0,     4,   181,     4,   235,
     0,     4,   179,   251,   180,   181,     4,   235,     0,   254,
     0,   167,   253,     0,   166,   253,     0,   253,   167,   253,
     0,   253,   166,   253,     0,   183,   251,   182,   251,   182,
   251,   182,   251,   182,   251,   184,     0,   183,   251,   182,
   251,   182,   251,   182,   251,   184,     0,   183,   251,   182,
   251,   182,   251,   184,     0,   177,   251,   182,   251,   182,
   251,   178,     0,     0,   177,   256,   178,     0,     5,     0,
   256,   182,     5,     0,     0,   183,   258,   184,     0,   177,
   258,   178,     0,   259,     0,   258,   182,   259,     0,   251,
     0,   260,     0,   183,   261,   184,     0,   167,   183,   261,
   184,     0,   251,     8,   251,     0,   251,     8,   251,     8,
   251,     0,     4,   179,   180,     0,   167,     4,   179,   180,
     0,     4,   179,   183,   261,   184,   180,     0,   167,     4,
   179,   183,   261,   184,   180,     0,   251,     0,   260,     0,
   261,   182,   251,     0,   261,   182,   260,     0,   183,   251,
   182,   251,   182,   251,   182,   251,   184,     0,   183,   251,
   182,   251,   182,   251,   184,     0,     4,     0,     4,   181,
    87,   181,     4,     0,   183,   264,   184,     0,     4,   179,
   251,   180,   181,    88,     0,   262,     0,   264,   182,   262,
     0,     5,     0,    33,   177,   265,   182,   265,   178,     0,
    35,   177,   265,   178,     0,    32,   177,   265,   178,     0,
    32,   177,   265,   182,   261,   178,     0,    34,   177,   265,
   178,     0,    34,   177,     4,   181,     4,   178,     0,    34,
   177,     4,   179,   251,   180,   181,     4,   178,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   153,   155,   156,   157,   164,   166,   169,   177,   191,   203,
   205,   208,   210,   211,   214,   220,   225,   226,   227,   230,
   234,   237,   243,   248,   254,   262,   267,   271,   277,   282,
   286,   291,   295,   298,   303,   307,   311,   315,   320,   324,
   327,   331,   335,   339,   343,   347,   351,   354,   358,   361,
   365,   368,   377,   381,   387,   389,   390,   391,   392,   393,
   394,   395,   396,   397,   398,   399,   402,   407,   436,   442,
   449,   454,   455,   456,   457,   458,   459,   460,   461,   462,
   463,   464,   465,   468,   471,   475,   481,   487,   490,   494,
   500,   506,   509,   513,   519,   525,   528,   532,   540,   546,
   549,   553,   561,   567,   570,   574,   582,   588,   591,   595,
   607,   613,   616,   620,   632,   638,   641,   645,   657,   663,
   666,   670,   683,   689,   692,   696,   709,   715,   718,   722,
   735,   747,   749,   750,   751,   752,   754,   756,   758,   789,
   823,   870,   885,   894,   909,   921,   935,   958,   982,   994,
  1008,  1020,  1034,  1050,  1072,  1083,  1089,  1108,  1119,  1127,
  1133,  1139,  1158,  1164,  1180,  1187,  1193,  1199,  1205,  1211,
  1230,  1242,  1248,  1267,  1288,  1296,  1302,  1308,  1314,  1326,
  1332,  1338,  1350,  1356,  1361,  1366,  1373,  1375,  1376,  1379,
  1384,  1395,  1413,  1421,  1426,  1437,  1505,  1525,  1529,  1549,
  1565,  1579,  1604,  1629,  1655,  1661,  1666,  1671,  1675,  1685,
  1691,  1697,  1701,  1705,  1709,  1713,  1718,  1725,  1729,  1734,
  1755,  1765,  1784,  1802,  1820,  1842,  1863,  1884,  1898,  1919,
  1924,  1935,  1937,  1938,  1939,  1940,  1943,  1945,  1946,  1947,
  1948,  1949,  1950,  1951,  1952,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1995,  2000,  2004,
  2015,  2032,  2043,  2062,  2078,  2094,  2110,  2127,  2132,  2136,
  2140,  2144,  2149,  2154,  2158,  2162,  2168,  2172,  2177,  2181,
  2186,  2190,  2194,  2200,  2206,  2213,  2219,  2223,  2227,  2237,
  2244,  2255,  2269,  2285,  2305,  2329,  2335,  2339,  2343,  2354,
  2359,  2370,  2375,  2393,  2398,  2411,  2417,  2423,  2428,  2436,
  2449,  2453,  2478,  2482,  2496
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tStrcat","tStrdup","tStrprefix","tDraw","tPoint","tCircle","tEllipsis","tLine",
"tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric","tElliptic",
"tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers","tScalarTetrahedron",
"tVectorTetrahedron","tTensorTetrahedron","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarLine","tVectorLine","tTensorLine","tScalarPoint","tVectorPoint",
"tTensorPoint","tBSpline","tNurbs","tOrder","tWith","tBounds","tKnots","tColor",
"tColorTable","tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall",
"tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tTrimmed","tSolid","tEndSolid",
"tVertex","tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarTetrahedronValues","ScalarTetrahedron","@10","VectorTetrahedronValues",
"VectorTetrahedron","@11","TensorTetrahedronValues","TensorTetrahedron","@12",
"NumericAffectation","NumericIncrement","Affectation","Shape","Transform","MultipleShape",
"ListOfShapes","Duplicata","Delete","Command","Loop","Extrude","ExtrudeParameters",
"ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   185,   185,   185,   185,   186,   186,   187,   187,   187,   188,
   188,   189,   189,   189,   190,   190,   190,   190,   190,   191,
   191,   191,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   193,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   195,   195,   196,   196,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   198,   198,   200,   199,   201,   201,   203,
   202,   204,   204,   206,   205,   207,   207,   209,   208,   210,
   210,   212,   211,   213,   213,   215,   214,   216,   216,   218,
   217,   219,   219,   221,   220,   222,   222,   224,   223,   225,
   225,   227,   226,   228,   228,   230,   229,   231,   231,   233,
   232,   234,   234,   234,   234,   234,   235,   235,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   238,   238,   238,   238,   239,   239,   239,   240,
   240,   241,   242,   242,   242,   243,   243,   243,   243,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   245,
   245,   245,   245,   245,   245,   245,   245,   246,   246,   247,
   247,   248,   248,   248,   248,   248,   248,   248,   248,   249,
   249,   250,   250,   250,   250,   250,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   252,   252,   252,
   252,   252,   252,   252,   252,   252,   252,   253,   253,   253,
   253,   253,   254,   254,   254,   254,   255,   255,   256,   256,
   257,   257,   257,   258,   258,   259,   259,   259,   259,   260,
   260,   260,   260,   260,   260,   261,   261,   261,   261,   262,
   262,   262,   262,   263,   263,   264,   264,   265,   265,   265,
   265,   265,   265,   265,   265
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     5,     7,     6,     8,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     0,    13,     1,     3,     0,
    13,     1,     3,     0,    13,     1,     3,     0,    19,     1,
     3,     0,    19,     1,     3,     0,    19,     1,     3,     0,
    25,     1,     3,     0,    25,     1,     3,     0,    25,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     1,     1,     1,     1,     1,     1,     4,     7,
     9,     6,     3,     6,     6,     9,     6,     9,     5,     8,
     8,    11,     6,     9,     7,     8,    12,     6,     5,     7,
     7,    12,     7,     9,    17,     7,     8,     8,     7,    11,
     5,     8,    12,     8,    22,    20,     8,     8,     5,     8,
     7,     8,     5,    11,     5,     9,     1,     1,     1,     0,
     2,     4,     4,     6,     3,     3,     3,     2,     2,     6,
     8,     8,    10,     1,     2,     1,     3,     4,     1,     8,
    12,     8,    12,     8,    12,    11,    15,     1,     2,     9,
     2,     6,     9,     9,     8,     8,     8,     6,     4,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     2,     2,
     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     5,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     4,     2,     5,     3,     6,     4,     7,     1,     2,     2,
     3,     3,    11,     9,     7,     7,     0,     3,     1,     3,
     0,     3,     3,     1,     3,     1,     1,     3,     4,     3,
     5,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     6,     4,
     4,     6,     4,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   204,     0,   209,     0,   206,     0,
     0,     0,    54,    56,    55,    57,    58,    59,    60,    61,
    66,    65,    62,    63,    64,     5,     0,     0,     0,    15,
    16,    18,    17,    19,   297,   297,     0,   278,   280,   328,
   132,   279,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   133,   134,   135,
   136,     0,     0,     0,   137,   138,     0,     0,     0,     0,
     0,     0,   237,     0,     0,   199,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   288,     0,     0,     0,
     0,     0,   190,     0,     0,     0,   190,   230,   231,     0,
     0,     0,     0,     0,     0,     0,     0,   198,     0,   205,
     0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     0,    71,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   240,   239,   241,
     0,     0,     0,     0,     0,     0,     0,     0,   143,   197,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   196,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   280,     0,
     0,   306,     0,   307,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   290,   289,     0,
     0,     0,     0,   190,   190,     0,     0,     0,     0,     0,
     0,     0,   195,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   207,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,   284,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   328,     0,     0,     0,
     0,     0,   238,     0,     0,   316,   317,     0,     0,   132,
     0,     0,     0,     0,   139,     0,   255,   254,   252,   253,
   248,   250,   249,   251,   243,   242,   244,   245,   246,   247,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   280,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   292,   291,   189,     0,   188,   187,
     0,     0,     0,     0,     0,   192,   191,   229,     0,     0,
   193,     0,     0,     0,     0,     0,     0,     0,     0,   208,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   298,     0,     0,    21,     0,   281,   286,    71,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,   257,   258,   259,   260,   261,
   262,   263,   264,   265,   277,   266,     0,   268,   269,   270,
   271,   272,   273,     0,     0,     0,   331,     0,     0,     0,
     0,   333,   330,     0,     0,     0,     0,     0,     0,     0,
     0,   149,     0,     0,     0,     0,     0,    67,     0,     0,
   159,     0,     0,     0,     0,   171,     0,   179,     0,     0,
   312,     0,     0,     0,   308,   310,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   183,   185,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   300,     0,   297,     0,   283,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    69,     0,
     0,     0,     0,     0,     0,     0,     0,   142,   318,   319,
     0,     0,     0,     0,     0,   144,   145,   147,     0,     0,
   322,     0,   326,     0,   153,   256,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   313,     0,   309,     0,
   158,     0,     0,     0,     0,   222,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   228,   194,     0,     0,     0,     0,   301,     0,     0,
     0,   200,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   232,   233,   234,
   235,   236,     0,     0,     0,     0,     0,     0,     0,    20,
     0,   285,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   267,   274,   275,   276,   332,
   329,     0,   334,     0,   132,     0,     0,     0,     0,   140,
     0,     0,     0,     0,     0,   324,    68,   155,   163,     0,
   166,     0,   160,     0,   161,   181,     0,     0,   311,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   190,     0,     0,     0,     0,
     0,     0,     0,     0,   169,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   297,   287,    70,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   150,     0,     0,   151,     0,     0,     0,
   327,     0,   168,   178,   314,     0,     0,   226,   172,   174,
     0,     0,   225,   227,   180,   156,   167,   177,   182,     0,
   296,     0,   295,     0,     0,   210,     0,   212,     0,   214,
     0,     0,     0,   301,     0,   304,     0,     0,     0,     0,
   202,   201,     0,     0,     0,     0,     0,    23,     0,    32,
     0,    36,     0,    30,     0,     0,    35,     0,    40,    38,
     0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
     0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   141,   146,
   148,     0,   154,     0,     0,     0,   164,   315,     0,   224,
   223,   190,     0,   186,     0,     0,     0,     0,     0,     0,
   218,     0,     0,     0,   303,     0,   302,     0,     0,     0,
     0,     0,     0,   301,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   335,     0,   325,   323,
     0,     0,     0,     0,   294,     0,     0,     0,   221,     0,
     0,   219,     0,     0,     0,   305,     0,     0,   203,     0,
     0,    37,     0,     0,     0,     0,    27,     0,    33,     0,
    39,    28,    41,     0,    44,     0,    48,    49,     0,     0,
    51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   152,     0,     0,   184,     0,
     0,     0,     0,     0,   216,     0,     0,     0,     0,   170,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,    90,    94,     0,   321,     0,   293,
   211,   213,   215,     0,     0,   157,   162,     0,     0,   173,
     0,     0,     0,     0,     0,    31,    34,    42,     0,    43,
    50,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   320,     0,     0,     0,     0,     0,     0,     0,     0,    26,
    29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    84,     0,    88,     0,    92,     0,   217,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    46,    22,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    85,    87,    89,    91,    93,    95,   165,   220,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    98,   102,   106,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   176,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    96,     0,   100,     0,   104,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   175,     0,    24,     0,     0,     0,     0,     0,
     0,    97,    99,   101,   103,   105,   107,     0,     0,     0,
     0,   110,   114,   118,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   108,     0,   112,     0,   116,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   109,   111,   113,   115,   117,   119,     0,   122,
   126,   130,    25,     0,     0,     0,     0,     0,     0,     0,
   120,     0,   124,     0,   128,     0,     0,     0,     0,     0,
     0,   121,   123,   125,   127,   129,   131,     0,     0,     0
};

static const short yydefgoto[] = {  1528,
    78,     5,     6,    19,    20,    21,    22,     7,    63,    64,
    65,   385,  1303,   554,  1253,  1305,   555,  1254,  1307,   556,
  1255,  1412,   557,  1385,  1414,   558,  1386,  1416,   559,  1387,
  1473,   560,  1459,  1475,   561,  1460,  1477,   562,  1461,  1510,
   563,  1504,  1512,   564,  1505,  1514,   565,  1506,   130,   230,
    66,   487,   477,   478,   479,   480,    70,    71,    72,    73,
  1070,  1071,    74,    75,   813,   302,   133,   166,   167,   225,
   378,   899,   995,   996,   304,   418,   733,   606,   734,   134
};

static const short yypact[] = {  2003,
    35,-32768,-32768,  -116,-32768,    31,  2127,-32768,    18,    91,
   124,   161,   164,   171,   264,    99,   109,   142,-32768,-32768,
-32768,-32768,  1560,   149,   327,   -75,   162,   170,   -38,   -37,
   183,   224,   138,   243,   345,   384,   388,   195,   406,   417,
   273,   163,   163,   278,   234,   294,   428,     5,   480,   515,
    26,   314,   -21,    25,-32768,   375,-32768,   516,-32768,   556,
   570,   537,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   578,    18,  2165,-32768,
-32768,-32768,-32768,-32768,   405,   405,   583,-32768,    60,    13,
-32768,-32768,   421,   425,   429,   430,   432,   438,   448,   449,
   450,   455,   456,   457,   458,   459,   460,   464,   465,   466,
   467,   468,   469,   471,   472,   473,   476,-32768,-32768,-32768,
-32768,    65,    65,    65,-32768,-32768,    65,   485,    22,    65,
   577,   870,-32768,   598,   600,-32768,    65,    65,    65,    65,
   477,    65,    65,   478,    65,    65,    65,  1112,    65,   475,
   479,   482,  1112,   481,   483,   484,   486,   490,   492,   493,
   163,   163,   163,    65,    65,   -70,-32768,    80,   163,   488,
   489,   505,-32768,  1112,   494,   654,-32768,-32768,-32768,  1112,
  1112,    65,   -52,    65,   599,    65,    65,-32768,   684,-32768,
   514,-32768,    18,   518,   519,   521,   522,   524,   527,   529,
   531,   533,   534,   536,   538,   539,   540,   541,   542,   543,
   544,   545,   546,   547,   549,   551,   555,   569,   572,   576,
   579,   582,   584,   688,   566,   585,   573,    65,   750,-32768,
   163,-32768,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    38,    38,   320,    38,   586,   586,   586,
   671,   753,  1593,   616,   158,   588,   757,   988,-32768,-32768,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,-32768,     0,  4999,  2238,  5022,
  5045,    65,  5068,  2261,    65,  2284,  5091,  5114,   216,  1495,
  1593,  1668,   758,-32768,  5137,    65,    65,    65,   759,    65,
    65,    65,    65,    65,    65,    65,   -55,-32768,-32768,  2652,
  2673,   163,   163,   423,   423,   141,    65,    65,    65,   336,
   237,    65,-32768,  1931,   760,   763,  5160,   686,    65,  5183,
   604,  1689,  5206,-32768,    65,   640,   784,   785,   786,   788,
   789,   790,   807,   808,   809,   810,   811,   813,   814,   815,
   816,   817,   819,   820,   821,   837,   838,   839,   840,   711,
   843,   853,   863,   864,   869,   872,-32768,    86,   873,   868,
   874,  4899,   300,   175,   -18,  5229,  5252,  5275,  5298,  5321,
  5344,  5367,  5390,  5413,  5436,  5459,  2694,  5482,  5505,  5528,
  5551,  5574,  5597,  2715,  2736,  2757,-32768,   120,   699,   -41,
   704,   716,-32768,  1112,  1763,  1668,-32768,     7,    20,    38,
    65,   889,   892,    14,-32768,  1734,   427,   571,   722,   722,
   276,   276,   276,   276,   -33,   -33,   586,   586,   586,   586,
   891,  1593,   896,   893,   897,   898,  5620,   899,   902,  5643,
   903,   905,   906,   520,   274,  1593,   199,    65,    65,   907,
  2307,  5666,  5689,    65,  2330,  2353,  5712,  5735,  5758,  5781,
  5804,   163,    65,    65,-32768,-32768,-32768,   726,  2189,-32768,
   743,    65,  2778,  2799,  2820,-32768,-32768,-32768,    65,  4924,
-32768,   745,   746,   923,   754,  5827,   926,    65,    65,-32768,
  5850,   787,   752,   756,   761,   765,   766,   767,   768,   770,
   771,   772,   773,   774,   775,   776,   778,   779,   780,   781,
   783,   791,   792,   793,   794,   799,   800,   801,   802,   803,
   804,   805,-32768,   930,   762,-32768,   806,     6,-32768,-32768,
   764,   812,   822,   823,   824,   825,   848,   854,   871,   875,
   876,   877,   933,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    65,-32768,-32768,-32768,
-32768,-32768,-32768,    65,    65,    65,-32768,  1593,    38,    65,
   938,-32768,-32768,   939,  1593,   861,    41,    65,   960,   961,
  1041,-32768,   962,   866,    15,   964,    65,-32768,   136,   163,
-32768,  1112,  1112,   973,  1112,-32768,   983,-32768,  1112,  1112,
-32768,  1593,   994,   209,-32768,  1749,  1062,   878,   985,   989,
  1044,   641,  1048,  1050,  1051,  1052,  1053,  1055,  1056,   177,
  2841,  2862,-32768,-32768,  2376,   163,   163,   163,  1105,   965,
    65,    65,  1112,    65,  1058,  1112,  1791,   697,  1059,   922,
  1067,    65,    65,   163,  1068,  1070,   908,  1071,  1072,  1112,
  1112,  1075,   163,  1076,  1078,  1112,  1112,  1091,  1092,  1093,
  1094,  1096,  1112,   453,  1112,  1097,   963,  1098,  1099,  1101,
-32768,  1100,   405,  1103,-32768,   335,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,-32768,  5873,
  5896,  5919,  5942,   184,   927,  4949,   931,-32768,  1668,-32768,
   127,   196,   929,  1106,  1156,-32768,-32768,-32768,    15,    65,
   936,    65,-32768,   212,-32768,  1192,  1102,    40,    58,  1108,
  1112,  1113,  1112,  1137,  1143,   218,-32768,  1593,-32768,    65,
-32768,    65,  1112,  1112,  1112,-32768,   462,  1112,  1112,  1112,
  1112,  1112,  1112,  1112,    65,    65,    65,   935,  -117,   133,
   154,-32768,-32768,  2883,  2904,  1157,  5965,   -15,  1026,    65,
    65,-32768,   982,    18,   986,  2925,  2946,  -131,   987,   992,
   990,   995,   993,   998,   996,   997,   -34,   999,  1002,  1013,
  1010,  1011,  1014,  1020,  1031,  1032,  1017,-32768,-32768,-32768,
-32768,-32768,  1034,  1054,  1057,  1061,  1063,  1045,  1077,-32768,
  1095,   300,  1161,  2967,  2988,  3009,  3030,  3051,  3072,  3093,
  3114,  3135,  3156,  3177,  3198,-32768,-32768,-32768,-32768,-32768,
-32768,  1060,-32768,  1112,    38,    65,  1227,  1230,    14,-32768,
  1229,  4974,  1150,  3219,    15,-32768,-32768,-32768,-32768,   163,
-32768,  1234,-32768,  1238,-32768,-32768,  1080,   246,  1192,  3240,
  1252,  1270,  1274,    65,    65,  1276,  1277,  1279,  1280,  1281,
  1282,  1285,  2399,  5988,  2151,   423,   163,  1286,   163,  1287,
   163,     1,    65,    65,-32768,  1299,  1112,  1112,  1208,  1112,
   454,  6011,    65,    18,  1305,    65,  1112,  1304,  1308,  1311,
  1159,  1322,   453,  1323,  1327,    65,  1325,  1330,  1328,  1329,
  1333,   453,    65,    65,    65,  1112,  1334,  1336,   453,    65,
  1338,  1350,  1357,    65,   405,-32768,-32768,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,  1360,
  1361,  1363,  1470,-32768,  1359,  1373,-32768,  1199,  1200,    65,
-32768,    42,-32768,-32768,-32768,  1202,    65,-32768,-32768,-32768,
  1523,  1638,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1201,
-32768,    65,-32768,  1203,   190,-32768,   255,-32768,   257,-32768,
   -30,  3261,  3282,   -15,   189,-32768,   250,  1205,  1300,    65,
-32768,-32768,  3303,    18,  1207,  3324,  1204,-32768,  1209,-32768,
  1210,-32768,  1211,-32768,  1212,  6034,-32768,  1213,-32768,-32768,
  1215,  1218,  6057,  3345,  6080,  1223,-32768,  1219,  1231,  3366,
  1225,  1236,-32768,  3387,  1233,  3408,  3429,  3450,  3471,  3492,
  3513,  3534,  3555,  3576,  3597,  3618,  3639,  1241,-32768,-32768,
-32768,    15,-32768,  1302,  1408,  3660,-32768,-32768,  3681,-32768,
-32768,   423,  2180,-32768,    65,    65,    65,  1410,  1237,   -26,
-32768,    65,    65,  1335,-32768,  1112,-32768,  1112,    65,  2422,
  1112,  1278,  1416,   -15,   453,  1421,    65,  1419,   453,  1423,
  1427,  1425,  1426,  1428,    65,  1429,  1112,  1430,  1431,    65,
  1435,  1433,    65,  1441,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,-32768,  1442,-32768,-32768,
    65,  1444,  1249,    65,-32768,  2445,  2468,  2491,-32768,  1112,
  1446,-32768,  2514,  2537,  1264,-32768,  1268,  1653,-32768,  1269,
    18,-32768,  1273,  1283,  1284,  3702,-32768,  1289,-32768,  1292,
-32768,-32768,-32768,  6103,-32768,  1290,-32768,-32768,  6126,  1293,
-32768,  6149,  1291,  3723,  3744,  3765,  3786,  3807,  3828,  3849,
  3870,  3891,  6172,  6195,  6218,-32768,  2209,  1295,-32768,  2560,
  1450,  1455,    16,  1296,-32768,  1457,  1473,  1112,  1112,-32768,
  1474,    18,   453,   453,   453,   453,  1476,  1481,  1482,   453,
  1483,  1484,  1485,  1487,    65,    65,    65,    65,    65,    65,
    65,    65,    65,-32768,-32768,-32768,    65,-32768,  1489,-32768,
-32768,-32768,-32768,   -30,  1112,-32768,-32768,  1314,  1316,-32768,
    18,  1319,  1320,  1348,  1349,-32768,-32768,-32768,  1321,-32768,
-32768,-32768,  1346,  3912,  3933,  3954,  3975,  3996,  4017,  4038,
  4059,  4080,  1347,  1351,  1352,  2583,  1354,   -24,  1355,  1112,
  1448,  1387,   453,   453,  1527,  1532,   453,  1535,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
-32768,  1537,  1538,  1112,  1362,  1364,    18,  1366,  1367,-32768,
-32768,  1365,  1372,  4101,  4122,  4143,  4164,  4185,  4206,  4227,
  4248,  4269,   256,  1192,   283,  1192,   286,  1192,  1370,-32768,
  1371,  1462,    65,    18,   453,  1112,  1562,  1585,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,  1592,    65,
  1594,    65,  1595,  1618,  1619,  1383,  4290,    18,  1417,  1449,
-32768,-32768,  4311,  4332,  4353,  4374,  4395,  4416,  6241,  6264,
  6287,  1192,-32768,  1192,-32768,  1192,-32768,-32768,-32768,    65,
    65,  1491,   453,  1112,    65,    65,    65,    65,    65,    65,
-32768,-32768,-32768,  4437,  2606,  1492,  1463,  1465,  4458,  4479,
  4500,  4521,  4542,  4563,  1466,  1467,  1468,    65,  1642,-32768,
  1112,   453,    65,    65,    65,    65,    65,    65,    65,    65,
    65,  2629,-32768,  1471,  1477,  4584,  4605,  4626,  4647,  4668,
  4689,   301,  1192,   308,  1192,   343,  1192,  1646,  1112,  1648,
    65,    65,    65,    65,    65,    65,    65,  1650,    65,  1651,
    65,  1652,-32768,  1478,-32768,  4710,  4731,  4752,  6310,  6333,
  6356,  1192,-32768,  1192,-32768,  1192,-32768,  1112,    65,    65,
    65,-32768,-32768,-32768,  1486,  4773,  4794,  4815,  1480,  1488,
  1490,  1112,    65,    65,    65,    65,    65,    65,  1493,  4836,
  4857,  4878,   344,  1192,   369,  1192,   382,  1192,   453,    65,
    65,    65,    65,  1658,    65,  1659,    65,  1660,  1496,  6379,
  6402,  6425,  1192,-32768,  1192,-32768,  1192,-32768,  1663,-32768,
-32768,-32768,-32768,  1494,  1501,  1511,    65,    65,    65,   386,
  1192,   389,  1192,   395,  1192,    65,  1664,    65,  1690,    65,
  1694,  1192,-32768,  1192,-32768,  1192,-32768,  1695,  1701,-32768
};

static const short yypgoto[] = {-32768,
   -72,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1162,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -250,   -20,
-32768,  1696,  1697,  -317,    27,  1699,-32768,-32768,-32768,-32768,
   487, -1066,-32768,-32768,  -899,   -23,-32768,   104,-32768,   -85,
-32768,  -966,   818,   798,  -261,  -285,  -724,   858,-32768,  -244
};


#define	YYLAST		6603


static const short yytable[] = {   132,
   226,   417,   131,  1132,   851,   193,   990,   481,   175,   408,
   409,   411,   412,  1013,   421,   457,   231,   604,   731,   183,
    76,  1223,  1022,   141,   144,   265,    91,  1074,   185,  1029,
     9,   338,  1068,    10,   322,   323,  1068,  1069,  1068,   417,
     8,  1069,   407,  1069,   722,   858,   908,  1057,   322,   323,
   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
   551,   552,   180,   859,   887,   181,   888,    88,    89,   114,
   115,   116,   117,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   322,   323,    79,   258,   259,
   260,   137,   176,   261,   264,   860,   268,   138,   266,   267,
   322,   323,   324,   288,   289,   290,   291,  1143,   293,   294,
   346,   296,   297,   298,   339,   305,   472,   723,   724,    80,
   961,   322,   323,    91,   282,   283,   284,   590,   142,   591,
   320,   321,   285,   917,   143,   145,   168,    11,    12,    13,
    14,    15,    16,    17,    18,   184,   609,  1131,   337,  1283,
   340,   897,   342,   343,   420,   553,    81,   898,   598,    82,
   624,   118,   119,   120,   121,   600,    83,   441,   125,   126,
   417,   442,   148,   991,    77,  1144,   694,   177,   595,  1148,
   596,  1132,   125,   126,   417,   232,   605,   732,  1224,   330,
   597,   186,   845,   334,   382,   322,   323,   322,   323,   386,
   387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
   397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
   122,   123,   125,   126,   153,   154,   124,   155,   228,   416,
   229,   127,   488,   489,   422,   322,   323,   426,   427,   428,
   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
   439,   440,   325,   533,   317,   318,   319,   534,   447,    84,
   170,   450,   326,   171,   172,    85,   259,   416,   118,   119,
   120,   121,   461,   462,   463,    86,   465,   466,   467,   468,
   469,   470,   471,  1232,  1233,  1234,  1235,   587,   322,   323,
  1239,   588,   714,   483,   484,   485,   322,   323,   490,   118,
   119,   120,   121,   737,   889,   496,   890,   595,    87,   322,
   323,   501,   482,   410,   407,   135,   417,  1118,   162,   163,
   125,   126,   136,   720,   384,   891,   746,   892,   139,   164,
   322,   323,   322,   323,   715,   165,   140,   118,   119,   120,
   121,   114,   115,   116,   117,   322,   323,   540,   765,   146,
   417,   840,   539,  1288,  1289,   595,  1075,  1292,   125,   126,
  1076,  1065,    26,    27,    28,    29,    30,    31,    32,    33,
   595,    34,   625,    36,    37,   150,    39,    40,   125,   126,
   595,   259,   749,   855,   454,   856,   229,   601,   599,   595,
   147,   867,    51,   541,   542,   543,   544,   545,   546,   547,
   548,   549,   550,   551,   552,  1339,    52,    53,   416,   149,
   322,   323,   322,   323,   151,   475,   476,   595,   152,   966,
   382,  1076,   416,  1077,   626,   627,  1066,  1328,  1067,  1329,
   632,   280,   281,   282,   283,   284,   125,   126,   156,   641,
   642,   285,   623,   157,   229,   161,   158,   159,   645,   160,
   169,  1000,   868,  1377,  1330,   649,  1331,  1332,   174,  1333,
   844,   846,   125,   126,   657,   658,   173,    62,    41,    42,
    43,    44,  1427,    46,  1428,   178,   417,    88,    89,  1429,
   182,  1430,  1405,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   874,   875,   695,   823,   486,
   179,   188,    88,    89,  1431,  1483,  1432,  1484,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
  1485,   187,  1486,   710,   808,   809,   810,   811,   812,   189,
   711,   712,   713,  1487,   416,  1488,   716,  1516,   984,  1517,
  1518,   719,  1519,   190,   725,   640,  1520,   191,  1521,  1489,
   192,   224,   269,   736,   273,   274,   275,   227,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   233,   416,   382,
   952,   234,   285,   286,   287,   235,   236,   821,   237,   271,
   272,   273,   274,   275,   238,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   239,   240,   241,   774,   775,   285,
   777,   242,   243,   244,   245,   246,   247,  1001,   786,   787,
   248,   249,   250,   251,   252,   253,   756,   254,   255,   256,
   122,   123,   257,   292,   295,   307,   124,   306,   308,   333,
   312,   127,   313,   310,   262,   311,   314,   263,   315,   316,
   327,   328,   332,   824,   825,   826,   827,   828,   829,   830,
   831,   832,   833,   834,   835,   122,   123,   329,   341,   344,
   345,   124,   377,   757,   347,   348,   127,   349,   350,   621,
   351,   847,   622,   352,   781,   353,   852,   354,   854,   355,
   356,   904,   357,   738,   358,   359,   360,   361,   362,   363,
   364,   365,   366,   367,   416,   368,   869,   369,   870,   274,
   275,   370,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   883,   884,   885,  1123,   371,   285,   379,   372,   769,
   770,   771,   373,   383,   381,   374,   901,   902,   375,   414,
   376,   285,   380,   424,   459,   464,   492,   788,   423,   493,
   495,   271,   272,   273,   274,   275,   797,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   498,   502,   503,   504,
   505,   285,   506,   507,   508,   419,   271,   272,   273,   274,
   275,   936,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   509,   510,   511,   512,   513,   285,   514,   515,   516,
   517,   518,   953,   519,   520,   521,   271,   272,   273,   274,
   275,  1004,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   522,   523,   524,   525,   526,   285,   527,   413,  1035,
   971,   972,   271,   272,   273,   274,   275,   528,   276,   277,
   278,   279,   280,   281,   282,   283,   284,   529,   530,   992,
   993,   531,   285,   536,   782,   270,   532,   535,   537,  1003,
   589,   592,  1006,   276,   277,   278,   279,   280,   281,   282,
   283,   284,  1016,   593,   602,   603,   608,   285,   611,  1023,
  1024,  1025,   610,   612,   613,   615,  1030,   616,   618,   643,
  1034,   619,   620,   628,  1036,  1037,  1038,  1039,  1040,  1041,
  1042,  1043,  1044,  1045,  1046,  1047,   644,   651,   652,   653,
   654,  1082,   656,   661,   691,   660,  1056,   662,   709,   692,
   697,   717,   663,  1059,   718,   303,   664,   665,   666,   667,
   309,   668,   669,   670,   671,   672,   673,   674,  1063,   675,
   676,   677,   678,   962,   679,   726,   727,   816,   729,   735,
   773,   331,   680,   681,   682,   683,  1080,   335,   336,   741,
   684,   685,   686,   687,   688,   689,   690,   693,   698,   743,
   985,   753,   987,   425,   989,   754,    88,    89,   699,   700,
   701,   702,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   703,   271,   272,   273,   274,   275,
   704,   276,   277,   278,   279,   280,   281,   282,   283,   284,
   721,  1126,  1127,  1128,   730,   285,   728,   705,  1133,  1134,
   755,   706,   707,   708,   758,  1138,   759,   760,   761,   762,
   752,   763,   764,  1146,   778,   783,   784,   751,  1192,   785,
   789,  1154,   790,   792,   793,   791,  1159,   796,   798,  1162,
   799,  1164,  1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,
  1173,  1174,  1175,   802,   803,   804,   805,  1177,   806,   815,
  1180,   818,   817,   819,   841,   820,   822,   857,   843,   848,
   772,   900,   849,   861,    88,   299,   853,   886,   863,  1231,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   865,   271,   272,   273,   274,   275,   866,   276,
   277,   278,   279,   280,   281,   282,   283,   284,  1262,   122,
   123,   850,   895,   285,   903,   124,   937,   905,   909,   910,
   127,   911,   912,   747,   913,   914,   748,   915,   916,   919,
   918,  1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,
   920,   921,   922,  1256,   927,   923,   271,   272,   273,   274,
   275,   924,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   594,   925,   926,  1314,   928,   285,   271,   272,   273,
   274,   275,   933,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   954,   955,   957,   929,   959,   285,   930,   963,
   950,  1338,   931,   964,   932,  1294,  1295,  1296,  1297,  1298,
  1299,  1300,  1301,  1302,  1304,  1306,  1308,   968,   934,   965,
   271,   272,   273,   274,   275,  1362,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   969,   935,   122,   300,   970,
   285,   973,   974,   124,   975,   976,   977,   978,   127,  1337,
   979,   986,   988,   998,   301,  1343,  1344,  1345,  1346,  1347,
  1348,  1349,  1350,  1351,  1352,   994,  1354,  1005,  1356,  1008,
  1009,   271,   272,   273,   274,   275,  1010,   276,   277,   278,
   279,   280,   281,   282,   283,   284,  1011,  1012,  1014,  1015,
  1017,   285,  1018,  1019,  1020,  1021,  1374,  1375,  1028,  1027,
  1031,  1379,  1380,  1381,  1382,  1383,  1384,   271,   272,   273,
   274,   275,  1032,   276,   277,   278,   279,   280,   281,   282,
   283,   284,  1033,  1048,  1402,  1052,  1049,   285,  1050,  1406,
  1407,  1408,  1409,  1410,  1411,  1413,  1415,  1417,  1053,  1054,
  1055,  1058,  1079,  1062,  1083,  1085,  1064,  1078,  1088,  1119,
  1086,  1087,  1092,  1089,  1091,  1093,  1098,  1436,  1437,  1438,
  1439,  1440,  1441,  1442,  1097,  1444,  1101,  1446,  1099,   739,
   740,  1120,   742,  1102,  1104,  1129,   744,   745,  1117,  1130,
  1135,  1142,  1141,  1145,  1147,  1456,  1457,  1458,  1149,  1150,
  1151,  1152,  1179,  1153,  1155,  1157,  1158,  1160,  1161,  1470,
  1471,  1472,  1474,  1476,  1478,  1163,  1188,  1176,  1178,  1189,
   776,  1185,  1191,   779,  1193,  1221,  1490,  1491,  1492,  1493,
  1222,  1495,  1226,  1497,  1194,  1195,  1197,   794,   795,  1198,
  1202,  1200,  1204,   800,   801,  1051,  1219,  1225,  1227,  1230,
   807,  1236,   814,  1511,  1513,  1515,  1237,  1238,  1240,  1241,
  1242,  1243,  1522,  1257,  1524,  1260,  1526,    88,   455,  1261,
  1263,  1264,  1267,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,  1265,  1266,  1268,  1060,  1278,
  1286,  1287,  1290,  1279,  1280,  1282,  1284,  1291,   862,  1293,
   864,  1309,  1317,  1310,  1336,  1312,  1313,  1315,  1316,  1318,
   871,   872,   873,  1334,  1335,   876,   877,   878,   879,   880,
   881,   882,    88,    89,    90,  1360,    91,  1341,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
  1342,   114,   115,   116,   117,    88,   299,  1353,  1363,  1355,
  1357,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,  1358,  1359,   271,   272,   273,   274,   275,
  1364,   276,   277,   278,   279,   280,   281,   282,   283,   284,
  1376,   951,  1390,  1061,  1391,   285,  1392,  1403,  1399,  1400,
  1401,  1433,  1419,  1435,  1420,  1443,  1445,  1447,  1190,  1448,
   122,   123,  1466,  1494,  1496,  1498,   124,  1462,  1503,  1523,
  1467,   127,  1468,  1499,  1479,   458,  1507,   456,   271,   272,
   273,   274,   275,  1508,   276,   277,   278,   279,   280,   281,
   282,   283,   284,  1509,  1529,  1525,   499,   999,   285,  1527,
  1530,   696,    67,    68,  1007,    69,   956,     0,     0,     0,
  1258,   118,   119,   120,   121,   997,     0,     0,     0,     0,
     0,     0,     0,  1026,     0,   122,   123,     0,     0,     0,
     0,   124,   125,   126,     0,     0,   127,     0,   128,     0,
   129,   607,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   750,     0,   122,   415,
     0,     0,     0,     0,   124,    88,   455,     0,     0,   127,
     0,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   271,   272,   273,   274,   275,   780,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   271,   272,
   273,   274,   275,   285,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   271,   272,   273,   274,   275,   285,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
     0,     0,     0,  1136,     0,  1137,     0,     0,  1140,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   271,
   272,   273,   274,   275,  1156,   276,   277,   278,   279,   280,
   281,   282,   283,   284,   271,   272,   273,   274,   275,   285,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,  1184,   122,   123,
     0,     0,     0,     0,   124,     0,     0,     0,     0,   127,
     0,     0,     0,     0,     0,     0,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,    26,    27,    28,
    29,    30,    31,    32,    33,     0,    34,     0,    36,    37,
     0,    39,    40,     0,     0,  1228,  1229,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
     0,     0,   -10,     1,     0,   -10,   -53,     0,     0,     0,
     0,    52,    53,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1259,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   -53,     0,     0,     0,     0,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,     0,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,     0,     0,  1285,   -53,   -53,
   -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,
     0,     0,    62,     0,     0,     0,     0,     0,     0,     0,
     0,  1311,     0,   -53,   -53,     0,     0,     0,     0,     0,
     0,   -53,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1340,   491,     0,     0,     0,     0,   -10,
   -10,   -10,   -10,   -10,   -10,   -10,   -10,     0,     0,     0,
    23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   -53,     2,     3,     0,     4,     0,
     0,     0,     0,     0,     0,     0,     0,    24,     0,     0,
     0,  1378,    25,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
     0,     0,    41,    42,    43,    44,    45,    46,  1404,    47,
    48,    49,    50,    51,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   194,     0,     0,    52,    53,     0,
     0,     0,     0,     0,     0,    54,  1434,    55,    56,    57,
    58,    59,    60,    61,     0,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,     0,    36,    37,     0,    39,
    40,     0,     0,     0,     0,  1455,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    51,     0,     0,     0,  1469,
     0,     0,     0,   195,   196,   197,     0,     0,    62,    52,
    53,   198,   199,   200,   201,   202,   203,   204,   205,   206,
   207,     0,     0,     0,     0,     0,     0,     0,     0,   208,
   209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
   218,   219,   220,   221,   222,   223,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,     0,     0,
    62,     0,   982,     0,   983,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,     0,     0,     0,
     0,  1124,     0,  1125,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,     0,     0,
  1217,     0,  1218,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,     0,   271,   272,   273,   274,
   275,   444,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,     0,   271,
   272,   273,   274,   275,   449,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,   271,   272,   273,   274,   275,   451,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,     0,   271,   272,   273,   274,   275,
   629,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,     0,   271,   272,
   273,   274,   275,   633,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
     0,   271,   272,   273,   274,   275,   634,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,     0,   271,   272,   273,   274,   275,   768,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,   271,   272,   273,
   274,   275,   980,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,     0,
   271,   272,   273,   274,   275,  1139,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,     0,   271,   272,   273,   274,   275,  1181,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,     0,   271,   272,   273,   274,
   275,  1182,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,     0,   271,
   272,   273,   274,   275,  1183,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,   271,   272,   273,   274,   275,  1186,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,     0,   271,   272,   273,   274,   275,
  1187,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,     0,   271,   272,
   273,   274,   275,  1220,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
     0,   271,   272,   273,   274,   275,  1281,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,     0,   271,   272,   273,   274,   275,  1389,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,   271,   272,   273,
   274,   275,  1418,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   473,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,   474,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,   577,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,   584,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,   585,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,   586,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,   646,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
   647,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,   648,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,   766,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   767,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,   893,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,   894,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,   906,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,   907,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,   938,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,   939,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
   940,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,   941,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,   942,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,   943,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,   944,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,   945,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,   946,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,   947,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,   948,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,   949,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
   960,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,   967,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1072,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1073,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1081,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1084,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1095,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1100,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1103,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1105,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1106,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1107,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1108,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1109,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1110,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1111,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1112,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1113,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1114,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1115,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1116,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1121,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1122,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1196,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1205,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1206,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1207,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1208,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1209,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1210,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1211,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1212,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1213,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1269,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1270,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1271,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1272,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1273,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1274,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1276,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1277,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1319,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1320,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1321,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1322,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1323,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1324,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1325,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1326,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1327,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1361,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1365,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1366,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1367,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1368,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1369,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1370,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1388,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1393,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1394,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1395,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1396,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1397,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1398,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1421,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1422,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1423,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1424,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1425,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,   271,   272,   273,   274,   275,
  1426,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,   271,   272,   273,   274,
   275,  1449,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,   271,   272,   273,
   274,   275,  1450,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,   271,   272,
   273,   274,   275,  1451,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,   271,
   272,   273,   274,   275,  1463,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
   271,   272,   273,   274,   275,  1464,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,   271,   272,   273,   274,   275,  1465,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,   271,   272,   273,   274,   275,  1480,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,   271,   272,   273,   274,   275,  1481,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,   271,   272,   273,   274,   275,  1482,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,   538,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,     0,   650,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,     0,     0,   842,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,     0,     0,   958,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   443,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   445,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   446,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   448,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   452,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   453,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   460,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   494,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   497,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   500,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   566,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   567,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   568,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   569,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   570,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   571,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   572,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   573,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   574,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   575,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   576,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   578,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   579,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   580,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   581,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   582,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   583,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   614,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   617,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   630,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   631,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   635,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   636,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   637,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,   638,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,   639,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,   655,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,   659,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
   836,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,   837,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,   838,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,   839,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,   896,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,   981,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,  1002,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,  1090,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,  1094,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,  1096,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
  1199,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,  1201,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,  1203,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,  1214,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,  1215,   271,   272,   273,   274,   275,     0,   276,
   277,   278,   279,   280,   281,   282,   283,   284,     0,     0,
     0,     0,     0,   285,     0,  1216,   271,   272,   273,   274,
   275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     0,     0,     0,     0,     0,   285,     0,  1371,   271,
   272,   273,   274,   275,     0,   276,   277,   278,   279,   280,
   281,   282,   283,   284,     0,     0,     0,     0,     0,   285,
     0,  1372,   271,   272,   273,   274,   275,     0,   276,   277,
   278,   279,   280,   281,   282,   283,   284,     0,     0,     0,
     0,     0,   285,     0,  1373,   271,   272,   273,   274,   275,
     0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     0,     0,     0,     0,     0,   285,     0,  1452,   271,   272,
   273,   274,   275,     0,   276,   277,   278,   279,   280,   281,
   282,   283,   284,     0,     0,     0,     0,     0,   285,     0,
  1453,   271,   272,   273,   274,   275,     0,   276,   277,   278,
   279,   280,   281,   282,   283,   284,     0,     0,     0,     0,
     0,   285,     0,  1454,   271,   272,   273,   274,   275,     0,
   276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     0,     0,     0,     0,   285,     0,  1500,   271,   272,   273,
   274,   275,     0,   276,   277,   278,   279,   280,   281,   282,
   283,   284,     0,     0,     0,     0,     0,   285,     0,  1501,
   271,   272,   273,   274,   275,     0,   276,   277,   278,   279,
   280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
   285,     0,  1502
};

static const short yycheck[] = {    23,
    86,   263,    23,  1070,   729,    78,     6,   325,     4,   254,
   255,   256,   257,   913,   265,   301,     4,     4,     4,    41,
     3,     6,   922,    62,    62,     4,     7,   994,     4,   929,
   147,    84,    63,     3,   166,   167,    63,    68,    63,   301,
     6,    68,     5,    68,     4,     6,   178,     6,   166,   167,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    37,     6,   182,    40,   184,     3,     4,    32,
    33,    34,    35,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   166,   167,     7,   122,   123,
   124,   177,    98,   127,   128,    48,   130,   183,    87,    88,
   166,   167,   183,   137,   138,   139,   140,  1084,   142,   143,
   193,   145,   146,   147,   177,   149,   182,    87,    88,     6,
   855,   166,   167,     7,   168,   169,   170,   179,   177,   181,
   164,   165,   176,   178,   183,   183,    43,   117,   118,   119,
   120,   121,   122,   123,   124,   177,   442,   184,   182,   184,
   184,   177,   186,   187,     7,   184,     6,   183,   419,     6,
   456,   152,   153,   154,   155,   420,     6,   178,   173,   174,
   442,   182,    45,   183,   167,  1085,   181,   183,   182,  1089,
   184,  1258,   173,   174,   456,   183,   183,   183,   183,   173,
   181,   177,     7,   177,   228,   166,   167,   166,   167,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   166,   167,   173,   174,    40,    41,   172,    43,   179,   263,
   181,   177,     6,     7,   265,   166,   167,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   183,   178,   161,   162,   163,   182,   292,     6,
    37,   295,   169,    40,    41,   177,   300,   301,   152,   153,
   154,   155,   306,   307,   308,   177,   310,   311,   312,   313,
   314,   315,   316,  1193,  1194,  1195,  1196,   178,   166,   167,
  1200,   182,   588,   327,   328,   329,   166,   167,   332,   152,
   153,   154,   155,   178,   182,   339,   184,   182,   177,   166,
   167,   345,   182,     4,     5,   177,   588,  1052,   166,   167,
   173,   174,     6,   595,   231,   182,   622,   184,   177,   177,
   166,   167,   166,   167,   589,   183,   177,   152,   153,   154,
   155,    32,    33,    34,    35,   166,   167,   183,   182,   177,
   622,   178,   383,  1263,  1264,   182,   178,  1267,   173,   174,
   182,   182,    37,    38,    39,    40,    41,    42,    43,    44,
   182,    46,   184,    48,    49,    41,    51,    52,   173,   174,
   182,   415,   184,   182,   179,   184,   181,   421,   419,   182,
   177,   184,    67,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,  1315,    81,    82,   442,   177,
   166,   167,   166,   167,    41,   322,   323,   182,    41,   184,
   454,   182,   456,   184,   458,   459,   182,   182,   182,   184,
   464,   166,   167,   168,   169,   170,   173,   174,    43,   473,
   474,   176,   179,    37,   181,   183,    40,    41,   482,    43,
   183,     8,   748,  1363,   182,   489,   184,   182,    41,   184,
   721,   722,   173,   174,   498,   499,   183,   142,    56,    57,
    58,    59,   182,    61,   184,     6,   748,     3,     4,   182,
   177,   184,  1392,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    54,    55,   538,   184,   184,
     6,     6,     3,     4,   182,   182,   184,   184,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
   182,   177,   184,   577,   102,   103,   104,   105,   106,     4,
   584,   585,   586,   182,   588,   184,   590,   182,   886,   184,
   182,   595,   184,     4,   598,   472,   182,    41,   184,  1479,
     3,   177,     6,   607,   158,   159,   160,     5,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   177,   622,   623,
   845,   177,   176,     6,     5,   177,   177,   693,   177,   156,
   157,   158,   159,   160,   177,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   177,   177,   177,   651,   652,   176,
   654,   177,   177,   177,   177,   177,   177,   184,   662,   663,
   177,   177,   177,   177,   177,   177,     6,   177,   177,   177,
   166,   167,   177,   177,   177,   177,   172,   183,   177,     6,
   177,   177,   177,   183,   180,   183,   177,   183,   177,   177,
   183,   183,   179,   697,   698,   699,   700,   701,   702,   703,
   704,   705,   706,   707,   708,   166,   167,   183,    90,     6,
   177,   172,     5,    53,   177,   177,   177,   177,   177,   180,
   177,   722,   183,   177,     8,   177,   730,   177,   732,   177,
   177,   784,   177,   610,   177,   177,   177,   177,   177,   177,
   177,   177,   177,   177,   748,   177,   750,   177,   752,   159,
   160,   177,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   765,   766,   767,  1062,   177,   176,   182,   177,   646,
   647,   648,   177,     4,   182,   177,   780,   781,   177,     7,
   177,   176,   178,     7,     7,     7,     7,   664,   181,     7,
    85,   156,   157,   158,   159,   160,   673,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   183,   148,     5,     5,
     5,   176,     5,     5,     5,   180,   156,   157,   158,   159,
   160,   822,   162,   163,   164,   165,   166,   167,   168,   169,
   170,     5,     5,     5,     5,     5,   176,     5,     5,     5,
     5,     5,   846,     5,     5,     5,   156,   157,   158,   159,
   160,   904,   162,   163,   164,   165,   166,   167,   168,   169,
   170,     5,     5,     5,     5,   135,   176,     5,   178,   935,
   874,   875,   156,   157,   158,   159,   160,     5,   162,   163,
   164,   165,   166,   167,   168,   169,   170,     5,     5,   893,
   894,     3,   176,     6,   178,     6,     5,     5,     5,   903,
   182,   178,   906,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   916,   178,     6,     4,     6,   176,     6,   923,
   924,   925,     7,     7,     7,     7,   930,     6,     6,   184,
   934,     7,     7,     7,   938,   939,   940,   941,   942,   943,
   944,   945,   946,   947,   948,   949,   184,   183,   183,     7,
   177,  1004,     7,   182,     5,   149,   960,   182,     6,   178,
   177,     4,   182,   967,     6,   148,   182,   182,   182,   182,
   153,   182,   182,   182,   182,   182,   182,   182,   982,   182,
   182,   182,   182,   860,   182,     6,     6,     5,     7,     6,
     6,   174,   182,   182,   182,   182,  1000,   180,   181,     7,
   182,   182,   182,   182,   182,   182,   182,   182,   177,     7,
   887,     7,   889,     6,   891,     7,     3,     4,   177,   177,
   177,   177,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,   177,   156,   157,   158,   159,   160,
   177,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   180,  1065,  1066,  1067,   179,   176,     6,   177,  1072,  1073,
     7,   177,   177,   177,     7,  1079,     7,     7,     7,     7,
   183,     7,     7,  1087,     7,     7,   145,     6,  1141,     3,
     3,  1095,     3,     3,     3,   168,  1100,     3,     3,  1103,
     3,  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1112,  1113,
  1114,  1115,  1116,     3,     3,     3,     3,  1121,     3,     3,
  1124,     3,     5,     3,   178,     6,     4,     6,   178,   181,
     6,    86,     7,     6,     3,     4,   181,   183,     6,  1192,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,     6,   156,   157,   158,   159,   160,     6,   162,
   163,   164,   165,   166,   167,   168,   169,   170,  1231,   166,
   167,     6,     6,   176,   183,   172,     6,   182,   182,   178,
   177,   182,   178,   180,   182,   178,   183,   182,   182,   178,
   182,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
   178,   182,   182,  1217,   178,   182,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   414,   182,   182,  1287,   182,   176,   156,   157,   158,
   159,   160,   178,   162,   163,   164,   165,   166,   167,   168,
   169,   170,     6,     4,     6,   182,    87,   176,   182,     6,
   181,  1314,   182,     6,   182,  1269,  1270,  1271,  1272,  1273,
  1274,  1275,  1276,  1277,  1278,  1279,  1280,     6,   182,   180,
   156,   157,   158,   159,   160,  1338,   162,   163,   164,   165,
   166,   167,   168,   169,   170,     6,   182,   166,   167,     6,
   176,     6,     6,   172,     6,     6,     6,     6,   177,  1313,
     6,     6,     6,    86,   183,  1319,  1320,  1321,  1322,  1323,
  1324,  1325,  1326,  1327,  1328,     7,  1330,     3,  1332,     6,
     3,   156,   157,   158,   159,   160,     6,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   168,     6,     6,     3,
     6,   176,     3,     6,     6,     3,  1360,  1361,     3,     6,
     3,  1365,  1366,  1367,  1368,  1369,  1370,   156,   157,   158,
   159,   160,     3,   162,   163,   164,   165,   166,   167,   168,
   169,   170,     6,     4,  1388,     7,     6,   176,     6,  1393,
  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,     6,   181,
   181,   180,    83,   183,   178,   182,   184,   183,   178,    88,
   182,   182,   178,   182,   182,   178,   178,  1421,  1422,  1423,
  1424,  1425,  1426,  1427,   182,  1429,   182,  1431,   178,   612,
   613,     4,   615,   178,   182,     6,   619,   620,   178,   183,
    86,     6,   145,     3,     6,  1449,  1450,  1451,     6,     3,
     6,     6,   184,     6,     6,     6,     6,     3,     6,  1463,
  1464,  1465,  1466,  1467,  1468,     5,   183,     6,     5,   182,
   653,     6,   184,   656,   182,     6,  1480,  1481,  1482,  1483,
     6,  1485,     6,  1487,   182,   182,   178,   670,   671,   178,
   178,   182,   182,   676,   677,     6,   182,   182,     6,     6,
   683,     6,   685,  1507,  1508,  1509,     6,     6,     6,     6,
     6,     5,  1516,     5,  1518,   182,  1520,     3,     4,   184,
   182,   182,   182,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   178,   178,   182,     6,   183,
    83,   145,     6,   183,   183,   182,   182,     6,   741,     5,
   743,     5,   178,     6,    83,   184,   183,   182,   182,   178,
   753,   754,   755,   184,   184,   758,   759,   760,   761,   762,
   763,   764,     3,     4,     5,   183,     7,     6,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     6,    32,    33,    34,    35,     3,     4,     6,   182,     6,
     6,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     6,     6,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   150,   844,   151,     6,   182,   176,   182,     6,   183,   183,
   183,     6,   182,     6,   178,     6,     6,     6,     6,   182,
   166,   167,   183,     6,     6,     6,   172,   182,     6,     6,
   183,   177,   183,   178,   182,     8,   183,   183,   156,   157,
   158,   159,   160,   183,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   183,     0,     6,     8,   900,   176,     6,
     0,   540,     7,     7,   907,     7,   849,    -1,    -1,    -1,
  1224,   152,   153,   154,   155,   898,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   926,    -1,   166,   167,    -1,    -1,    -1,
    -1,   172,   173,   174,    -1,    -1,   177,    -1,   179,    -1,
   181,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,   166,   167,
    -1,    -1,    -1,    -1,   172,     3,     4,    -1,    -1,   177,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   156,   157,   158,   159,   160,     8,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   156,   157,
   158,   159,   160,   176,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   156,   157,   158,   159,   160,   176,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1076,    -1,  1078,    -1,    -1,  1081,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,
   157,   158,   159,   160,  1097,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   156,   157,   158,   159,   160,   176,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,  1130,   166,   167,
    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   177,
    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    37,    38,    39,
    40,    41,    42,    43,    44,    -1,    46,    -1,    48,    49,
    -1,    51,    52,    -1,    -1,  1188,  1189,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    -1,    -1,     0,     1,    -1,     3,     4,    -1,    -1,    -1,
    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    -1,    46,    47,
    48,    49,    50,    51,    52,    -1,    -1,  1260,    56,    57,
    58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
    -1,    -1,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1284,    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1316,   184,    -1,    -1,    -1,    -1,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,    -1,    -1,
     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   142,   143,   144,    -1,   146,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
    -1,  1364,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
    -1,    -1,    56,    57,    58,    59,    60,    61,  1391,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    40,    -1,    -1,    81,    82,    -1,
    -1,    -1,    -1,    -1,    -1,    89,  1419,    91,    92,    93,
    94,    95,    96,    97,    -1,    37,    38,    39,    40,    41,
    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    51,
    52,    -1,    -1,    -1,    -1,  1448,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,  1462,
    -1,    -1,    -1,    99,   100,   101,    -1,    -1,   142,    81,
    82,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,    -1,
   136,   137,   138,   139,   140,   141,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
   142,    -1,   182,    -1,   184,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
    -1,   182,    -1,   184,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
   182,    -1,   184,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,
   160,   184,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,
   157,   158,   159,   160,   184,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,   156,   157,   158,   159,   160,   184,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,
   184,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,
   158,   159,   160,   184,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
    -1,   156,   157,   158,   159,   160,   184,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,   184,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,
   159,   160,   184,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
   156,   157,   158,   159,   160,   184,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,    -1,   156,   157,   158,   159,   160,   184,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,
   160,   184,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,
   157,   158,   159,   160,   184,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,   156,   157,   158,   159,   160,   184,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,
   184,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,
   158,   159,   160,   184,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
    -1,   156,   157,   158,   159,   160,   184,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,    -1,   156,   157,   158,   159,   160,   184,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,   156,   157,   158,
   159,   160,   184,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,
   182,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,   159,
   160,   182,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,   158,
   159,   160,   182,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,   157,
   158,   159,   160,   182,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,   156,
   157,   158,   159,   160,   182,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
   156,   157,   158,   159,   160,   182,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,   156,   157,   158,   159,   160,   182,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,   156,   157,   158,   159,   160,   182,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,   156,   157,   158,   159,   160,   182,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,   156,   157,   158,   159,   160,   182,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,   180,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,    -1,   180,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,   180,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,    -1,    -1,   180,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178,   156,   157,   158,   159,   160,    -1,   162,
   163,   164,   165,   166,   167,   168,   169,   170,    -1,    -1,
    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,
   160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,
   157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,
    -1,   178,   156,   157,   158,   159,   160,    -1,   162,   163,
   164,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
    -1,    -1,   176,    -1,   178,   156,   157,   158,   159,   160,
    -1,   162,   163,   164,   165,   166,   167,   168,   169,   170,
    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,
   158,   159,   160,    -1,   162,   163,   164,   165,   166,   167,
   168,   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   178,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
    -1,   176,    -1,   178,   156,   157,   158,   159,   160,    -1,
   162,   163,   164,   165,   166,   167,   168,   169,   170,    -1,
    -1,    -1,    -1,    -1,   176,    -1,   178,   156,   157,   158,
   159,   160,    -1,   162,   163,   164,   165,   166,   167,   168,
   169,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,   178,
   156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
   166,   167,   168,   169,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,   178
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 157 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 165 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 166 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 171 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 185 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 192 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 209 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 210 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 211 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 216 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 221 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 232 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 235 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 239 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 245 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 251 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 258 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 264 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 268 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 272 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 279 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 283 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 288 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 292 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 296 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 300 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 304 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 308 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 312 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 316 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 322 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 325 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 328 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 332 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 336 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 340 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 344 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 349 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 352 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 356 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 363 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 379 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 382 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh file format read");
    ;
    break;}
case 55:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 391 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 392 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 393 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 394 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 395 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 404 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 68:
#line 408 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Printf format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 69:
#line 438 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View"))
	EndView(1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 70:
#line 443 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View"))
	EndView(1, yyname, yyvsp[-6].c);
    ;
    break;}
case 71:
#line 451 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 84:
#line 470 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 85:
#line 472 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 86:
#line 477 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 87:
#line 482 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 88:
#line 489 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 89:
#line 491 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 90:
#line 496 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 91:
#line 501 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 92:
#line 508 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 93:
#line 510 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 94:
#line 515 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 95:
#line 520 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 96:
#line 527 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 97:
#line 529 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 98:
#line 535 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 99:
#line 541 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 100:
#line 548 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 550 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 102:
#line 556 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 103:
#line 562 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 104:
#line 569 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 571 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 106:
#line 577 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 107:
#line 583 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 108:
#line 590 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 592 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 110:
#line 599 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 111:
#line 608 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 112:
#line 615 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 617 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 114:
#line 624 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 115:
#line 633 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 116:
#line 640 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 642 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 118:
#line 649 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 119:
#line 658 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 120:
#line 665 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 667 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 122:
#line 675 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 123:
#line 684 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 124:
#line 691 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 693 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 126:
#line 701 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 127:
#line 710 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 128:
#line 717 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 719 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 130:
#line 727 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 131:
#line 736 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 132:
#line 748 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 133:
#line 749 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 134:
#line 750 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 135:
#line 751 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 136:
#line 752 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 137:
#line 755 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 138:
#line 756 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 139:
#line 763 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 140:
#line 790 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 141:
#line 824 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	vyyerror("Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	      List_Add(Symbol_L, &TheSymbol);
	    }
	  }
	  else
	    vyyerror("Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else vyyerror("Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 142:
#line 871 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 143:
#line 886 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 144:
#line 895 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 145:
#line 910 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 146:
#line 922 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 147:
#line 936 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 148:
#line 959 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 149:
#line 983 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 150:
#line 995 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 151:
#line 1009 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 152:
#line 1021 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 153:
#line 1035 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 154:
#line 1051 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 155:
#line 1077 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 156:
#line 1084 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 157:
#line 1090 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 158:
#line 1109 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 159:
#line 1120 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 160:
#line 1128 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 161:
#line 1134 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 162:
#line 1140 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 163:
#line 1159 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1165 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 165:
#line 1182 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 166:
#line 1188 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1194 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 168:
#line 1200 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 169:
#line 1206 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1212 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 171:
#line 1231 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 172:
#line 1243 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 173:
#line 1249 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 174:
#line 1268 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 175:
#line 1291 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 176:
#line 1299 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 177:
#line 1303 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 178:
#line 1309 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1315 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 180:
#line 1327 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 181:
#line 1333 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 182:
#line 1339 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 183:
#line 1352 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 184:
#line 1357 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 185:
#line 1362 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 186:
#line 1367 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 187:
#line 1374 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 188:
#line 1375 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 189:
#line 1376 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 190:
#line 1381 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 191:
#line 1385 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 192:
#line 1397 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 193:
#line 1415 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 194:
#line 1422 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 195:
#line 1427 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 196:
#line 1439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  //
	  //Est-ce grave de laisser le stream ouvert? Si on fait le
	  //fclose, on ne peut pas faire appel a une fonction
	  //(Function) definie en dehors de son fichier de
	  //definition...
	  //
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing system call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 197:
#line 1506 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 198:
#line 1526 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 199:
#line 1530 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 200:
#line 1552 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 201:
#line 1566 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 202:
#line 1580 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 203:
#line 1605 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 204:
#line 1630 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 205:
#line 1656 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 206:
#line 1662 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 207:
#line 1667 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 208:
#line 1672 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 209:
#line 1676 "Gmsh.y"
{
    ;
    break;}
case 210:
#line 1687 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 211:
#line 1692 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 212:
#line 1698 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 213:
#line 1702 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 214:
#line 1706 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 215:
#line 1710 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 216:
#line 1714 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 217:
#line 1719 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 218:
#line 1727 "Gmsh.y"
{
    ;
    break;}
case 219:
#line 1730 "Gmsh.y"
{
    ;
    break;}
case 220:
#line 1736 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 221:
#line 1756 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 222:
#line 1767 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 223:
#line 1785 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 224:
#line 1803 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 225:
#line 1821 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong definition of Transfinite Surface %d: "
		   "%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1843 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong definition of Elliptic Surface %d: "
		   "%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 227:
#line 1864 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong definition of Transfinite Volume %d: "
		   "%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 1885 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 229:
#line 1899 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 230:
#line 1921 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 231:
#line 1925 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 232:
#line 1936 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 233:
#line 1937 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 234:
#line 1938 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 1939 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 236:
#line 1940 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 237:
#line 1944 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 238:
#line 1945 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 239:
#line 1946 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 240:
#line 1947 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 241:
#line 1948 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 242:
#line 1949 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 243:
#line 1950 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 244:
#line 1951 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 245:
#line 1953 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 246:
#line 1959 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 247:
#line 1960 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 248:
#line 1961 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 249:
#line 1962 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 250:
#line 1963 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 251:
#line 1964 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 252:
#line 1965 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 253:
#line 1966 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 254:
#line 1967 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 255:
#line 1968 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 256:
#line 1969 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 257:
#line 1970 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 258:
#line 1971 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 259:
#line 1972 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 260:
#line 1973 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 261:
#line 1974 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 262:
#line 1975 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 263:
#line 1976 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 264:
#line 1977 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 265:
#line 1978 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 266:
#line 1979 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 267:
#line 1980 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 268:
#line 1981 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 1982 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 1983 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 271:
#line 1984 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 272:
#line 1985 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 273:
#line 1986 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 274:
#line 1987 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 275:
#line 1988 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 276:
#line 1989 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 277:
#line 1990 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 278:
#line 1999 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 279:
#line 2000 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 280:
#line 2005 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 281:
#line 2016 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 282:
#line 2033 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 283:
#line 2044 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 284:
#line 2063 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 285:
#line 2079 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 286:
#line 2095 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 287:
#line 2111 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 288:
#line 2129 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 289:
#line 2133 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 290:
#line 2137 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 291:
#line 2141 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 292:
#line 2145 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 293:
#line 2151 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 294:
#line 2155 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 295:
#line 2159 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 296:
#line 2163 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2170 "Gmsh.y"
{
    ;
    break;}
case 298:
#line 2173 "Gmsh.y"
{
    ;
    break;}
case 299:
#line 2179 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2182 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2188 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2191 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 303:
#line 2195 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 304:
#line 2202 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 305:
#line 2207 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 306:
#line 2215 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 307:
#line 2220 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 308:
#line 2224 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 309:
#line 2228 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 310:
#line 2239 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 311:
#line 2245 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 312:
#line 2256 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 313:
#line 2270 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 314:
#line 2286 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 315:
#line 2306 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    vyyerror("Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 316:
#line 2331 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 317:
#line 2336 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 318:
#line 2340 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 319:
#line 2344 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 320:
#line 2356 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 321:
#line 2360 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 322:
#line 2371 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 323:
#line 2376 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 324:
#line 2395 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 325:
#line 2399 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 326:
#line 2413 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 327:
#line 2418 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 328:
#line 2425 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 329:
#line 2429 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 330:
#line 2437 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 331:
#line 2450 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 332:
#line 2454 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d parameter(s) in Sprintf format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
      strcpy(yyval.c, tmpstring);
      List_Delete(yyvsp[-1].l);
      Free(yyvsp[-3].c);
    ;
    break;}
case 333:
#line 2479 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 334:
#line 2483 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 335:
#line 2497 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	vyyerror("Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  vyyerror("Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2512 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


