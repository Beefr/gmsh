
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tDraw	291
#define	tPoint	292
#define	tCircle	293
#define	tEllipse	294
#define	tLine	295
#define	tSurface	296
#define	tSpline	297
#define	tVolume	298
#define	tCharacteristic	299
#define	tLength	300
#define	tParametric	301
#define	tElliptic	302
#define	tPlane	303
#define	tRuled	304
#define	tTriangulation	305
#define	tTransfinite	306
#define	tComplex	307
#define	tPhysical	308
#define	tUsing	309
#define	tBump	310
#define	tProgression	311
#define	tPlugin	312
#define	tRotate	313
#define	tTranslate	314
#define	tSymmetry	315
#define	tDilate	316
#define	tExtrude	317
#define	tDuplicata	318
#define	tLoop	319
#define	tRecombine	320
#define	tDelete	321
#define	tCoherence	322
#define	tIntersect	323
#define	tAttractor	324
#define	tLayers	325
#define	tScalarPoint	326
#define	tVectorPoint	327
#define	tTensorPoint	328
#define	tScalarLine	329
#define	tVectorLine	330
#define	tTensorLine	331
#define	tScalarTriangle	332
#define	tVectorTriangle	333
#define	tTensorTriangle	334
#define	tScalarQuadrangle	335
#define	tVectorQuadrangle	336
#define	tTensorQuadrangle	337
#define	tScalarTetrahedron	338
#define	tVectorTetrahedron	339
#define	tTensorTetrahedron	340
#define	tScalarHexahedron	341
#define	tVectorHexahedron	342
#define	tTensorHexahedron	343
#define	tScalarPrism	344
#define	tVectorPrism	345
#define	tTensorPrism	346
#define	tScalarPyramid	347
#define	tVectorPyramid	348
#define	tTensorPyramid	349
#define	tText2D	350
#define	tText3D	351
#define	tBSpline	352
#define	tBezier	353
#define	tNurbs	354
#define	tOrder	355
#define	tWith	356
#define	tBounds	357
#define	tKnots	358
#define	tColor	359
#define	tColorTable	360
#define	tFor	361
#define	tIn	362
#define	tEndFor	363
#define	tIf	364
#define	tEndIf	365
#define	tExit	366
#define	tReturn	367
#define	tCall	368
#define	tFunction	369
#define	tMesh	370
#define	tTrimmed	371
#define	tB_SPLINE_SURFACE_WITH_KNOTS	372
#define	tB_SPLINE_CURVE_WITH_KNOTS	373
#define	tCARTESIAN_POINT	374
#define	tTRUE	375
#define	tFALSE	376
#define	tUNSPECIFIED	377
#define	tU	378
#define	tV	379
#define	tEDGE_CURVE	380
#define	tVERTEX_POINT	381
#define	tORIENTED_EDGE	382
#define	tPLANE	383
#define	tFACE_OUTER_BOUND	384
#define	tEDGE_LOOP	385
#define	tADVANCED_FACE	386
#define	tVECTOR	387
#define	tDIRECTION	388
#define	tAXIS2_PLACEMENT_3D	389
#define	tISO	390
#define	tENDISO	391
#define	tENDSEC	392
#define	tDATA	393
#define	tHEADER	394
#define	tFILE_DESCRIPTION	395
#define	tFILE_SCHEMA	396
#define	tFILE_NAME	397
#define	tMANIFOLD_SOLID_BREP	398
#define	tCLOSED_SHELL	399
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	400
#define	tFACE_BOUND	401
#define	tCYLINDRICAL_SURFACE	402
#define	tCONICAL_SURFACE	403
#define	tCIRCLE	404
#define	tTRIMMED_CURVE	405
#define	tGEOMETRIC_SET	406
#define	tCOMPOSITE_CURVE_SEGMENT	407
#define	tCONTINUOUS	408
#define	tCOMPOSITE_CURVE	409
#define	tTOROIDAL_SURFACE	410
#define	tPRODUCT_DEFINITION	411
#define	tPRODUCT_DEFINITION_SHAPE	412
#define	tSHAPE_DEFINITION_REPRESENTATION	413
#define	tELLIPSE	414
#define	tSolid	415
#define	tEndSolid	416
#define	tVertex	417
#define	tFacet	418
#define	tNormal	419
#define	tOuter	420
#define	tLoopSTL	421
#define	tEndLoop	422
#define	tEndFacet	423
#define	tAFFECTPLUS	424
#define	tAFFECTMINUS	425
#define	tAFFECTTIMES	426
#define	tAFFECTDIVIDE	427
#define	tOR	428
#define	tAND	429
#define	tEQUAL	430
#define	tNOTEQUAL	431
#define	tAPPROXEQUAL	432
#define	tLESSOREQUAL	433
#define	tGREATEROREQUAL	434
#define	tCROSSPRODUCT	435
#define	tPLUSPLUS	436
#define	tMINUSMINUS	437
#define	UNARYPREC	438

#line 1 "Gmsh.y"
 
// $Id: Gmsh.tab.cpp,v 1.169 2003-11-27 02:33:31 geuzaine Exp $
//
// Copyright (C) 1997-2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static fpos_t yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char *LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char tmpstring[1024];
static Symbol TheSymbol, *pSymbol;
static Surface *STL_Surf;
static Shape TheShape;
static int i, j, k, flag, RecursionLevel = 0, ImbricatedLoop = 0;
static int Last_NumberOfPoints = 0;
static double d, *pd;
static ExtrudeParams extr;
static char *str;
static StringXString *pStrCat;
static StringXNumber *pNumCat;
static StringXColor *pColCat;
static double (*pNumOpt)(int num, int action, double value);
static char* (*pStrOpt)(int num, int action, char *value);
static unsigned int (*pColOpt)(int num, int action, unsigned int value);
static Post_View *View;

char *strsave (char *ptr);
void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);
 void FixRelativePath(char *in, char *out);

#line 82 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2299
#define	YYFLAG		-32768
#define	YYNTBASE	203

#define YYTRANSLATE(x) ((unsigned)(x) <= 438 ? yytranslate[x] : 336)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   190,     2,     2,     2,   188,     2,     2,   195,
   196,   186,   184,   200,   185,   199,   187,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   180,
     2,   182,   174,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   197,     2,   198,   194,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   201,     2,   202,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   175,   176,   177,
   178,   179,   181,   183,   189,   191,   192,   193
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    16,    38,    40,
    41,    44,    46,    48,    50,    53,    56,    59,    62,    65,
    73,    79,    97,   107,   131,   163,   179,   191,   203,   219,
   229,   243,   253,   265,   279,   289,   299,   311,   321,   333,
   343,   355,   369,   383,   395,   409,   427,   437,   449,   461,
   475,   487,   497,   498,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   533,   541,
   548,   557,   558,   561,   564,   567,   570,   573,   576,   579,
   582,   585,   588,   591,   594,   597,   600,   603,   606,   609,
   612,   615,   618,   621,   624,   627,   630,   633,   636,   638,
   642,   643,   657,   659,   663,   664,   678,   680,   684,   685,
   699,   701,   705,   706,   726,   728,   732,   733,   753,   755,
   759,   760,   780,   782,   786,   787,   813,   815,   819,   820,
   846,   848,   852,   853,   879,   881,   885,   886,   918,   920,
   924,   925,   957,   959,   963,   964,   996,   998,  1002,  1003,
  1035,  1037,  1041,  1042,  1074,  1076,  1080,  1081,  1113,  1115,
  1119,  1120,  1176,  1178,  1182,  1183,  1239,  1241,  1245,  1246,
  1302,  1304,  1308,  1309,  1353,  1355,  1359,  1360,  1404,  1406,
  1410,  1411,  1455,  1457,  1461,  1462,  1500,  1502,  1506,  1507,
  1545,  1547,  1551,  1552,  1590,  1592,  1596,  1597,  1611,  1613,
  1617,  1618,  1634,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
  1653,  1661,  1671,  1678,  1682,  1689,  1696,  1706,  1713,  1723,
  1729,  1738,  1747,  1759,  1766,  1776,  1786,  1796,  1804,  1813,
  1826,  1833,  1841,  1849,  1862,  1870,  1878,  1888,  1906,  1915,
  1924,  1932,  1940,  1952,  1961,  1974,  1983,  1998,  2021,  2042,
  2051,  2060,  2069,  2077,  2086,  2092,  2104,  2110,  2120,  2122,
  2124,  2126,  2127,  2130,  2137,  2144,  2151,  2156,  2163,  2168,
  2175,  2179,  2185,  2189,  2197,  2201,  2209,  2212,  2215,  2222,
  2231,  2240,  2251,  2253,  2256,  2258,  2262,  2267,  2269,  2278,
  2291,  2306,  2307,  2320,  2321,  2338,  2339,  2358,  2367,  2380,
  2395,  2396,  2409,  2410,  2427,  2428,  2447,  2456,  2469,  2484,
  2485,  2498,  2499,  2516,  2517,  2536,  2538,  2541,  2551,  2559,
  2562,  2569,  2579,  2589,  2598,  2607,  2616,  2623,  2628,  2631,
  2634,  2636,  2638,  2640,  2642,  2644,  2646,  2650,  2653,  2656,
  2659,  2663,  2667,  2671,  2675,  2679,  2683,  2687,  2691,  2695,
  2699,  2703,  2707,  2711,  2715,  2721,  2726,  2731,  2736,  2741,
  2746,  2751,  2756,  2761,  2766,  2771,  2778,  2783,  2788,  2793,
  2798,  2803,  2808,  2815,  2822,  2829,  2834,  2839,  2844,  2849,
  2854,  2859,  2864,  2869,  2874,  2879,  2884,  2891,  2896,  2901,
  2906,  2911,  2916,  2921,  2928,  2935,  2942,  2947,  2949,  2951,
  2953,  2955,  2957,  2962,  2965,  2971,  2975,  2982,  2987,  2995,
  2997,  3000,  3003,  3007,  3011,  3023,  3033,  3041,  3049,  3050,
  3054,  3056,  3060,  3061,  3065,  3069,  3071,  3075,  3077,  3079,
  3083,  3088,  3092,  3098,  3103,  3105,  3107,  3109,  3113,  3118,
  3125,  3133,  3135,  3137,  3141,  3145,  3155,  3163,  3165,  3171,
  3175,  3182,  3184,  3188,  3190,  3197,  3202,  3207,  3214,  3221
};

static const short yyrhs[] = {   206,
     0,   205,     0,   211,     0,     1,     6,     0,     3,     0,
   185,     3,     0,   161,     0,   164,   165,   204,   204,   204,
   166,   167,   163,   204,   204,   204,   163,   204,   204,   204,
   163,   204,   204,   204,   168,   169,     0,   162,     0,     0,
   206,   207,     0,   208,     0,   210,     0,   209,     0,   136,
     6,     0,   137,     6,     0,   139,     6,     0,   138,     6,
     0,   140,     6,     0,   141,   195,   325,   200,     5,   196,
     6,     0,   142,   195,   325,   196,     6,     0,   143,   195,
     5,   200,     5,   200,   325,   200,   325,   200,     5,   200,
     5,   200,     5,   196,     6,     0,     3,     7,   120,   195,
     5,   200,   323,   196,     6,     0,     3,     7,   119,   195,
     5,   200,   321,   200,   329,   200,   320,   200,   320,   200,
   320,   200,   329,   200,   329,   200,   320,   196,     6,     0,
     3,     7,   118,   195,     5,   200,   321,   200,   321,   200,
   327,   200,   320,   200,   320,   200,   320,   200,   320,   200,
   329,   200,   329,   200,   329,   200,   329,   200,   320,   196,
     6,     0,     3,     7,   126,   195,     5,   200,     3,   200,
     3,   200,     3,   200,   320,   196,     6,     0,     3,     7,
   130,   195,     5,   200,     3,   200,   320,   196,     6,     0,
     3,     7,   147,   195,     5,   200,     3,   200,   320,   196,
     6,     0,     3,     7,   128,   195,     5,   200,   186,   200,
   186,   200,   321,   200,   320,   196,     6,     0,     3,     7,
   131,   195,     5,   200,   329,   196,     6,     0,     3,     7,
   132,   195,     5,   200,   329,   200,     3,   200,   320,   196,
     6,     0,     3,     7,   127,   195,     5,   200,     3,   196,
     6,     0,     3,     7,   133,   195,     5,   200,     3,   200,
   321,   196,     6,     0,     3,     7,   135,   195,     5,   200,
     3,   200,     3,   200,     3,   196,     6,     0,     3,     7,
   134,   195,     5,   200,   323,   196,     6,     0,     3,     7,
   129,   195,     5,   200,     3,   196,     6,     0,     3,     7,
    41,   195,     5,   200,     3,   200,     3,   196,     6,     0,
     3,     7,   145,   195,     5,   200,   329,   196,     6,     0,
     3,     7,   146,   195,     5,   200,   329,   200,     3,   196,
     6,     0,     3,     7,   144,   195,     5,   200,     3,   196,
     6,     0,     3,     7,   148,   195,     5,   200,     3,   200,
   321,   196,     6,     0,     3,     7,   149,   195,     5,   200,
     3,   200,   321,   200,   321,   196,     6,     0,     3,     7,
   156,   195,     5,   200,     3,   200,   321,   200,   321,   196,
     6,     0,     3,     7,   150,   195,     5,   200,     3,   200,
   321,   196,     6,     0,     3,     7,   160,   195,     5,   200,
     3,   200,   321,   200,   321,   196,     6,     0,     3,     7,
   151,   195,     5,   200,     3,   200,   329,   200,   329,   200,
   320,   200,   320,   196,     6,     0,     3,     7,   152,   195,
     5,   200,   329,   196,     6,     0,     3,     7,   153,   195,
   154,   200,   320,   200,     3,   196,     6,     0,     3,     7,
   155,   195,     5,   200,   329,   200,   320,   196,     6,     0,
     3,     7,   157,   195,     5,   200,     5,   200,     3,   200,
     3,   196,     6,     0,     3,     7,   158,   195,     5,   200,
     5,   200,     3,   196,     6,     0,     3,     7,   159,   195,
     3,   200,     3,   196,     6,     0,     0,   211,   212,     0,
   214,     0,   213,     0,   296,     0,   297,     0,   298,     0,
   301,     0,   302,     0,   303,     0,   306,     0,   318,     0,
   319,     0,   305,     0,   304,     0,    33,   195,     5,   196,
     6,     0,    33,   195,     5,   200,   331,   196,     6,     0,
     4,     5,   201,   215,   202,     6,     0,     4,     5,     4,
   323,   201,   215,   202,     6,     0,     0,   215,   217,     0,
   215,   220,     0,   215,   223,     0,   215,   226,     0,   215,
   229,     0,   215,   232,     0,   215,   235,     0,   215,   238,
     0,   215,   241,     0,   215,   244,     0,   215,   247,     0,
   215,   250,     0,   215,   253,     0,   215,   256,     0,   215,
   259,     0,   215,   262,     0,   215,   265,     0,   215,   268,
     0,   215,   271,     0,   215,   274,     0,   215,   277,     0,
   215,   280,     0,   215,   283,     0,   215,   286,     0,   215,
   289,     0,   215,   292,     0,   321,     0,   216,   200,   321,
     0,     0,    72,   195,   321,   200,   321,   200,   321,   196,
   218,   201,   216,   202,     6,     0,   321,     0,   219,   200,
   321,     0,     0,    73,   195,   321,   200,   321,   200,   321,
   196,   221,   201,   219,   202,     6,     0,   321,     0,   222,
   200,   321,     0,     0,    74,   195,   321,   200,   321,   200,
   321,   196,   224,   201,   222,   202,     6,     0,   321,     0,
   225,   200,   321,     0,     0,    75,   195,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   227,
   201,   225,   202,     6,     0,   321,     0,   228,   200,   321,
     0,     0,    76,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   230,   201,   228,   202,
     6,     0,   321,     0,   231,   200,   321,     0,     0,    77,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   196,   233,   201,   231,   202,     6,     0,   321,
     0,   234,   200,   321,     0,     0,    78,   195,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   236,   201,   234,   202,
     6,     0,   321,     0,   237,   200,   321,     0,     0,    79,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   239,
   201,   237,   202,     6,     0,   321,     0,   240,   200,   321,
     0,     0,    80,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   196,   242,   201,   240,   202,     6,     0,   321,     0,
   243,   200,   321,     0,     0,    81,   195,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   196,   245,   201,   243,   202,     6,     0,   321,     0,   246,
   200,   321,     0,     0,    82,   195,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   196,
   248,   201,   246,   202,     6,     0,   321,     0,   249,   200,
   321,     0,     0,    83,   195,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   251,
   201,   249,   202,     6,     0,   321,     0,   252,   200,   321,
     0,     0,    84,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   196,   254,   201,
   252,   202,     6,     0,   321,     0,   255,   200,   321,     0,
     0,    85,   195,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   196,   257,   201,   255,
   202,     6,     0,   321,     0,   258,   200,   321,     0,     0,
    86,   195,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   260,   201,   258,   202,
     6,     0,   321,     0,   261,   200,   321,     0,     0,    87,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   196,   263,
   201,   261,   202,     6,     0,   321,     0,   264,   200,   321,
     0,     0,    88,   195,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   196,   266,   201,   264,   202,     6,     0,   321,     0,
   267,   200,   321,     0,     0,    89,   195,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   196,   269,   201,   267,   202,     6,
     0,   321,     0,   270,   200,   321,     0,     0,    90,   195,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   196,   272,   201,   270,   202,
     6,     0,   321,     0,   273,   200,   321,     0,     0,    91,
   195,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   196,   275,   201,   273,
   202,     6,     0,   321,     0,   276,   200,   321,     0,     0,
    92,   195,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   196,   278,   201,
   276,   202,     6,     0,   321,     0,   279,   200,   321,     0,
     0,    93,   195,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   196,   281,   201,   279,   202,     6,     0,   321,
     0,   282,   200,   321,     0,     0,    94,   195,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   200,   321,   200,
   321,   200,   321,   200,   321,   200,   321,   196,   284,   201,
   282,   202,     6,     0,   321,     0,   285,   200,   321,     0,
     0,    95,   195,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   200,   321,   196,   287,   201,   285,   202,     6,     0,   335,
     0,   288,   200,   335,     0,     0,    96,   195,   321,   200,
   321,   200,   321,   196,   290,   201,   288,   202,     6,     0,
   335,     0,   291,   200,   335,     0,     0,    97,   195,   321,
   200,   321,   200,   321,   200,   321,   196,   293,   201,   291,
   202,     6,     0,     7,     0,   170,     0,   171,     0,   172,
     0,   173,     0,   191,     0,   192,     0,     4,   294,   321,
     6,     0,     4,   197,   321,   198,   294,   321,     6,     0,
     4,   197,   201,   331,   202,   198,   294,   329,     6,     0,
     4,   197,   198,     7,   329,     6,     0,     4,   295,     6,
     0,     4,   197,   321,   198,   295,     6,     0,     4,   199,
     4,     7,   335,     6,     0,     4,   197,   321,   198,   199,
     4,     7,   335,     6,     0,     4,   199,     4,   294,   321,
     6,     0,     4,   197,   321,   198,   199,     4,   294,   321,
     6,     0,     4,   199,     4,   295,     6,     0,     4,   197,
   321,   198,   199,     4,   295,     6,     0,     4,   199,   105,
   199,     4,     7,   332,     6,     0,     4,   197,   321,   198,
   199,   105,   199,     4,     7,   332,     6,     0,     4,   199,
   106,     7,   333,     6,     0,     4,   197,   321,   198,   199,
   106,     7,   333,     6,     0,    58,   195,     4,   196,   199,
     4,     7,   321,     6,     0,    58,   195,     4,   196,   199,
     4,     7,   335,     6,     0,    38,   195,   321,   196,     7,
   323,     6,     0,    54,    38,   195,   321,   196,     7,   329,
     6,     0,    70,    38,   329,     7,   201,   321,   200,   321,
   200,   321,   202,     6,     0,    45,    46,   329,     7,   321,
     6,     0,    41,   195,   321,   196,     7,   329,     6,     0,
    43,   195,   321,   196,     7,   329,     6,     0,    70,    41,
   329,     7,   201,   321,   200,   321,   200,   321,   202,     6,
     0,    39,   195,   321,   196,     7,   329,     6,     0,    40,
   195,   321,   196,     7,   329,     6,     0,    39,   195,   321,
   196,     7,   329,    49,   323,     6,     0,    47,   195,   321,
   196,     7,   201,   321,   200,   321,   200,     5,   200,     5,
   200,     5,   202,     6,     0,    54,    41,   195,   321,   196,
     7,   329,     6,     0,    41,    65,   195,   321,   196,     7,
   329,     6,     0,    98,   195,   321,   196,     7,   329,     6,
     0,    99,   195,   321,   196,     7,   329,     6,     0,   100,
   195,   321,   196,     7,   329,   104,   329,   101,   321,     6,
     0,    49,    42,   195,   321,   196,     7,   329,     6,     0,
   117,    42,   195,   321,   196,     7,   201,   321,   200,   329,
   202,     6,     0,    50,    42,   195,   321,   196,     7,   329,
     6,     0,    51,    42,   195,   321,   196,     7,   195,   321,
   200,   321,   196,   329,   329,     6,     0,   100,    42,   102,
   103,   195,   321,   196,     7,   327,   104,   201,   329,   200,
   329,   202,   101,   201,   321,   200,   321,   202,     6,     0,
   100,    42,   195,   321,   196,     7,   327,   104,   201,   329,
   200,   329,   202,   101,   201,   321,   200,   321,   202,     6,
     0,    54,    42,   195,   321,   196,     7,   329,     6,     0,
    42,    65,   195,   321,   196,     7,   329,     6,     0,    53,
    44,   195,   321,   196,     7,   329,     6,     0,    44,   195,
   321,   196,     7,   329,     6,     0,    54,    44,   195,   321,
   196,     7,   329,     6,     0,    60,   323,   201,   299,   202,
     0,    59,   201,   323,   200,   323,   200,   321,   202,   201,
   299,   202,     0,    61,   323,   201,   299,   202,     0,    62,
   201,   323,   200,   321,   202,   201,   299,   202,     0,   301,
     0,   300,     0,   298,     0,     0,   300,   297,     0,   300,
    38,   201,   331,   202,     6,     0,   300,    41,   201,   331,
   202,     6,     0,   300,    42,   201,   331,   202,     6,     0,
    64,   201,   300,   202,     0,    64,     4,   197,   321,   198,
     6,     0,    67,   201,   300,   202,     0,    67,     4,   197,
   321,   198,     6,     0,    67,   116,     6,     0,   105,   332,
   201,   300,   202,     0,     4,   335,     6,     0,     4,     4,
   197,   321,   198,   335,     6,     0,     4,   321,     6,     0,
    58,   195,     4,   196,   199,     4,     6,     0,   112,     6,
     0,    37,     6,     0,   107,   195,   321,     8,   321,   196,
     0,   107,   195,   321,     8,   321,     8,   321,   196,     0,
   107,     4,   108,   201,   321,     8,   321,   202,     0,   107,
     4,   108,   201,   321,     8,   321,     8,   321,   202,     0,
   109,     0,   115,     4,     0,   113,     0,   114,     4,     6,
     0,   110,   195,   321,   196,     0,   111,     0,    63,    38,
   201,   321,   200,   323,   202,     6,     0,    63,    38,   201,
   321,   200,   323,   200,   323,   200,   321,   202,     6,     0,
    63,    38,   201,   321,   200,   323,   200,   323,   200,   323,
   200,   321,   202,     6,     0,     0,    63,    38,   201,   321,
   200,   323,   202,   307,   201,   316,   202,     6,     0,     0,
    63,    38,   201,   321,   200,   323,   200,   323,   200,   321,
   202,   308,   201,   316,   202,     6,     0,     0,    63,    38,
   201,   321,   200,   323,   200,   323,   200,   323,   200,   321,
   202,   309,   201,   316,   202,     6,     0,    63,    41,   201,
   321,   200,   323,   202,     6,     0,    63,    41,   201,   321,
   200,   323,   200,   323,   200,   321,   202,     6,     0,    63,
    41,   201,   321,   200,   323,   200,   323,   200,   323,   200,
   321,   202,     6,     0,     0,    63,    41,   201,   321,   200,
   323,   202,   310,   201,   316,   202,     6,     0,     0,    63,
    41,   201,   321,   200,   323,   200,   323,   200,   321,   202,
   311,   201,   316,   202,     6,     0,     0,    63,    41,   201,
   321,   200,   323,   200,   323,   200,   323,   200,   321,   202,
   312,   201,   316,   202,     6,     0,    63,    42,   201,   321,
   200,   323,   202,     6,     0,    63,    42,   201,   321,   200,
   323,   200,   323,   200,   321,   202,     6,     0,    63,    42,
   201,   321,   200,   323,   200,   323,   200,   323,   200,   321,
   202,     6,     0,     0,    63,    42,   201,   321,   200,   323,
   202,   313,   201,   316,   202,     6,     0,     0,    63,    42,
   201,   321,   200,   323,   200,   323,   200,   321,   202,   314,
   201,   316,   202,     6,     0,     0,    63,    42,   201,   321,
   200,   323,   200,   323,   200,   323,   200,   321,   202,   315,
   201,   316,   202,     6,     0,   317,     0,   316,   317,     0,
    71,   201,   329,   200,   329,   200,   329,   202,     6,     0,
    71,   201,   329,   200,   329,   202,     6,     0,    66,     6,
     0,    52,    41,   329,     7,   321,     6,     0,    52,    41,
   329,     7,   321,    55,    57,   321,     6,     0,    52,    41,
   329,     7,   321,    55,    56,   321,     6,     0,    52,    42,
   201,   321,   202,     7,   329,     6,     0,    48,    42,   201,
   321,   202,     7,   329,     6,     0,    52,    44,   201,   321,
   202,     7,   329,     6,     0,    66,    42,   329,     7,   321,
     6,     0,    66,    42,   329,     6,     0,    68,     6,     0,
    69,     6,     0,   121,     0,   122,     0,   123,     0,   124,
     0,   125,     0,   322,     0,   195,   321,   196,     0,   185,
   321,     0,   184,   321,     0,   190,   321,     0,   321,   185,
   321,     0,   321,   184,   321,     0,   321,   186,   321,     0,
   321,   187,   321,     0,   321,   188,   321,     0,   321,   194,
   321,     0,   321,   180,   321,     0,   321,   182,   321,     0,
   321,   181,   321,     0,   321,   183,   321,     0,   321,   177,
   321,     0,   321,   178,   321,     0,   321,   176,   321,     0,
   321,   175,   321,     0,   321,   174,   321,     8,   321,     0,
    12,   195,   321,   196,     0,    13,   195,   321,   196,     0,
    14,   195,   321,   196,     0,    15,   195,   321,   196,     0,
    16,   195,   321,   196,     0,    17,   195,   321,   196,     0,
    18,   195,   321,   196,     0,    19,   195,   321,   196,     0,
    20,   195,   321,   196,     0,    22,   195,   321,   196,     0,
    23,   195,   321,   200,   321,   196,     0,    24,   195,   321,
   196,     0,    25,   195,   321,   196,     0,    26,   195,   321,
   196,     0,    27,   195,   321,   196,     0,    28,   195,   321,
   196,     0,    29,   195,   321,   196,     0,    30,   195,   321,
   200,   321,   196,     0,    31,   195,   321,   200,   321,   196,
     0,    32,   195,   321,   200,   321,   196,     0,    21,   195,
   321,   196,     0,    12,   197,   321,   198,     0,    13,   197,
   321,   198,     0,    14,   197,   321,   198,     0,    15,   197,
   321,   198,     0,    16,   197,   321,   198,     0,    17,   197,
   321,   198,     0,    18,   197,   321,   198,     0,    19,   197,
   321,   198,     0,    20,   197,   321,   198,     0,    22,   197,
   321,   198,     0,    23,   197,   321,   200,   321,   198,     0,
    24,   197,   321,   198,     0,    25,   197,   321,   198,     0,
    26,   197,   321,   198,     0,    27,   197,   321,   198,     0,
    28,   197,   321,   198,     0,    29,   197,   321,   198,     0,
    30,   197,   321,   200,   321,   198,     0,    31,   197,   321,
   200,   321,   198,     0,    32,   197,   321,   200,   321,   198,
     0,    21,   197,   321,   198,     0,     3,     0,     9,     0,
    10,     0,    11,     0,     4,     0,     4,   197,   321,   198,
     0,     4,   295,     0,     4,   197,   321,   198,   295,     0,
     4,   199,     4,     0,     4,   197,   321,   198,   199,     4,
     0,     4,   199,     4,   295,     0,     4,   197,   321,   198,
   199,     4,   295,     0,   324,     0,   185,   323,     0,   184,
   323,     0,   323,   185,   323,     0,   323,   184,   323,     0,
   201,   321,   200,   321,   200,   321,   200,   321,   200,   321,
   202,     0,   201,   321,   200,   321,   200,   321,   200,   321,
   202,     0,   201,   321,   200,   321,   200,   321,   202,     0,
   195,   321,   200,   321,   200,   321,   196,     0,     0,   195,
   326,   196,     0,     5,     0,   326,   200,     5,     0,     0,
   201,   328,   202,     0,   195,   328,   196,     0,   329,     0,
   328,   200,   329,     0,   321,     0,   330,     0,   201,   331,
   202,     0,   185,   201,   331,   202,     0,   321,     8,   321,
     0,   321,     8,   321,     8,   321,     0,    38,   201,   321,
   202,     0,   298,     0,   301,     0,   306,     0,     4,   197,
   198,     0,   185,     4,   197,   198,     0,     4,   197,   201,
   331,   202,   198,     0,   185,     4,   197,   201,   331,   202,
   198,     0,   321,     0,   330,     0,   331,   200,   321,     0,
   331,   200,   330,     0,   201,   321,   200,   321,   200,   321,
   200,   321,   202,     0,   201,   321,   200,   321,   200,   321,
   202,     0,     4,     0,     4,   199,   105,   199,     4,     0,
   201,   334,   202,     0,     4,   197,   321,   198,   199,   106,
     0,   332,     0,   334,   200,   332,     0,     5,     0,    35,
   195,   335,   200,   335,   196,     0,    36,   195,   335,   196,
     0,    34,   195,   335,   196,     0,    34,   195,   335,   200,
   331,   196,     0,    34,   195,     4,   199,     4,   196,     0,
    34,   195,     4,   197,   321,   198,   199,     4,   196,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   167,   169,   170,   171,   176,   178,   181,   189,   203,   213,
   215,   218,   220,   221,   224,   230,   235,   236,   237,   240,
   244,   247,   253,   258,   264,   272,   277,   281,   287,   292,
   296,   301,   305,   308,   313,   317,   321,   325,   330,   334,
   337,   341,   345,   349,   353,   357,   361,   364,   368,   371,
   375,   378,   385,   389,   395,   397,   398,   399,   400,   401,
   402,   403,   404,   405,   406,   407,   408,   411,   416,   431,
   436,   442,   447,   448,   449,   450,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   468,   469,   470,   471,   472,   475,   478,
   482,   488,   494,   497,   501,   507,   513,   516,   520,   526,
   532,   535,   539,   547,   553,   556,   560,   568,   574,   577,
   581,   589,   595,   598,   602,   614,   620,   623,   627,   639,
   645,   648,   652,   664,   670,   673,   677,   690,   696,   699,
   703,   716,   722,   725,   729,   742,   748,   751,   755,   768,
   774,   777,   781,   794,   800,   803,   807,   820,   826,   829,
   833,   856,   862,   865,   869,   892,   898,   901,   905,   928,
   934,   937,   941,   959,   965,   968,   972,   990,   996,   999,
  1003,  1021,  1027,  1030,  1034,  1051,  1057,  1060,  1064,  1081,
  1087,  1090,  1094,  1111,  1117,  1123,  1130,  1138,  1144,  1150,
  1157,  1165,  1174,  1176,  1177,  1178,  1179,  1182,  1184,  1187,
  1218,  1252,  1299,  1314,  1323,  1338,  1350,  1364,  1387,  1411,
  1423,  1437,  1449,  1463,  1483,  1505,  1517,  1533,  1544,  1550,
  1569,  1583,  1589,  1595,  1614,  1620,  1626,  1642,  1649,  1655,
  1661,  1672,  1683,  1708,  1714,  1733,  1755,  1761,  1769,  1775,
  1781,  1790,  1796,  1802,  1812,  1818,  1823,  1828,  1835,  1837,
  1838,  1841,  1846,  1850,  1864,  1878,  1896,  1907,  1917,  1925,
  1929,  1937,  1949,  1989,  2002,  2019,  2024,  2028,  2048,  2060,
  2070,  2091,  2112,  2133,  2139,  2144,  2149,  2153,  2161,  2174,
  2184,  2194,  2199,  2209,  2214,  2224,  2229,  2241,  2258,  2275,
  2292,  2297,  2314,  2319,  2336,  2341,  2361,  2377,  2393,  2409,
  2414,  2431,  2437,  2454,  2460,  2479,  2483,  2488,  2515,  2539,
  2547,  2566,  2584,  2602,  2624,  2645,  2666,  2680,  2699,  2704,
  2713,  2715,  2716,  2717,  2718,  2721,  2723,  2724,  2725,  2726,
  2727,  2728,  2729,  2730,  2737,  2738,  2739,  2740,  2741,  2742,
  2743,  2744,  2745,  2746,  2747,  2748,  2749,  2750,  2751,  2752,
  2753,  2754,  2755,  2756,  2757,  2758,  2759,  2760,  2761,  2762,
  2763,  2764,  2765,  2766,  2767,  2768,  2770,  2771,  2772,  2773,
  2774,  2775,  2776,  2777,  2778,  2779,  2780,  2781,  2782,  2783,
  2784,  2785,  2786,  2787,  2788,  2789,  2790,  2795,  2800,  2801,
  2802,  2806,  2817,  2834,  2845,  2864,  2880,  2896,  2912,  2929,
  2934,  2938,  2942,  2946,  2952,  2957,  2961,  2965,  2971,  2975,
  2980,  2984,  2989,  2993,  2997,  3003,  3009,  3016,  3022,  3026,
  3030,  3040,  3047,  3058,  3078,  3087,  3096,  3107,  3121,  3137,
  3157,  3181,  3187,  3191,  3195,  3206,  3211,  3222,  3227,  3245,
  3250,  3263,  3269,  3275,  3280,  3288,  3301,  3305,  3323,  3337
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tDraw","tPoint","tCircle",
"tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength",
"tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tBSpline",
"tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tMesh","tTrimmed","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","','","'{'","'}'","All","SignedDouble","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","Printf","View","Views","ScalarPointValues","ScalarPoint",
"@1","VectorPointValues","VectorPoint","@2","TensorPointValues","TensorPoint",
"@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine","@5",
"TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Command","Loop",
"Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35","ExtrudeParameters",
"ExtrudeParameter","Transfini","Coherence","BoolExpr","FExpr","FExpr_Single",
"VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   203,   203,   203,   203,   204,   204,   205,   205,   205,   206,
   206,   207,   207,   207,   208,   208,   208,   208,   208,   209,
   209,   209,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   211,   211,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   213,   213,   214,
   214,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   216,   216,
   218,   217,   219,   219,   221,   220,   222,   222,   224,   223,
   225,   225,   227,   226,   228,   228,   230,   229,   231,   231,
   233,   232,   234,   234,   236,   235,   237,   237,   239,   238,
   240,   240,   242,   241,   243,   243,   245,   244,   246,   246,
   248,   247,   249,   249,   251,   250,   252,   252,   254,   253,
   255,   255,   257,   256,   258,   258,   260,   259,   261,   261,
   263,   262,   264,   264,   266,   265,   267,   267,   269,   268,
   270,   270,   272,   271,   273,   273,   275,   274,   276,   276,
   278,   277,   279,   279,   281,   280,   282,   282,   284,   283,
   285,   285,   287,   286,   288,   288,   290,   289,   291,   291,
   293,   292,   294,   294,   294,   294,   294,   295,   295,   296,
   296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
   296,   296,   296,   296,   296,   296,   296,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   298,   298,   298,   298,   299,   299,
   299,   300,   300,   300,   300,   300,   301,   301,   302,   302,
   302,   303,   304,   304,   304,   304,   304,   304,   305,   305,
   305,   305,   305,   305,   305,   305,   305,   305,   306,   306,
   306,   307,   306,   308,   306,   309,   306,   306,   306,   306,
   310,   306,   311,   306,   312,   306,   306,   306,   306,   313,
   306,   314,   306,   315,   306,   316,   316,   317,   317,   317,
   318,   318,   318,   318,   318,   318,   318,   318,   319,   319,
   320,   320,   320,   320,   320,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   321,   321,   321,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   323,
   323,   323,   323,   323,   324,   324,   324,   324,   325,   325,
   326,   326,   327,   327,   327,   328,   328,   329,   329,   329,
   329,   330,   330,   330,   330,   330,   330,   330,   330,   330,
   330,   331,   331,   331,   331,   332,   332,   332,   332,   333,
   333,   334,   334,   335,   335,   335,   335,   335,   335,   335
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     1,    21,     1,     0,
     2,     1,     1,     1,     2,     2,     2,     2,     2,     7,
     5,    17,     9,    23,    31,    15,    11,    11,    15,     9,
    13,     9,    11,    13,     9,     9,    11,     9,    11,     9,
    11,    13,    13,    11,    13,    17,     9,    11,    11,    13,
    11,     9,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     7,     6,
     8,     0,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     3,
     0,    13,     1,     3,     0,    13,     1,     3,     0,    13,
     1,     3,     0,    19,     1,     3,     0,    19,     1,     3,
     0,    19,     1,     3,     0,    25,     1,     3,     0,    25,
     1,     3,     0,    25,     1,     3,     0,    31,     1,     3,
     0,    31,     1,     3,     0,    31,     1,     3,     0,    31,
     1,     3,     0,    31,     1,     3,     0,    31,     1,     3,
     0,    55,     1,     3,     0,    55,     1,     3,     0,    55,
     1,     3,     0,    43,     1,     3,     0,    43,     1,     3,
     0,    43,     1,     3,     0,    37,     1,     3,     0,    37,
     1,     3,     0,    37,     1,     3,     0,    13,     1,     3,
     0,    15,     1,     1,     1,     1,     1,     1,     1,     4,
     7,     9,     6,     3,     6,     6,     9,     6,     9,     5,
     8,     8,    11,     6,     9,     9,     9,     7,     8,    12,
     6,     7,     7,    12,     7,     7,     9,    17,     8,     8,
     7,     7,    11,     8,    12,     8,    14,    22,    20,     8,
     8,     8,     7,     8,     5,    11,     5,     9,     1,     1,
     1,     0,     2,     6,     6,     6,     4,     6,     4,     6,
     3,     5,     3,     7,     3,     7,     2,     2,     6,     8,
     8,    10,     1,     2,     1,     3,     4,     1,     8,    12,
    14,     0,    12,     0,    16,     0,    18,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     1,     2,     9,     7,     2,
     6,     9,     9,     8,     8,     8,     6,     4,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     5,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     1,     1,     4,     2,     5,     3,     6,     4,     7,     1,
     2,     2,     3,     3,    11,     9,     7,     7,     0,     3,
     1,     3,     0,     3,     3,     1,     3,     1,     1,     3,
     4,     3,     5,     4,     1,     1,     1,     3,     4,     6,
     7,     1,     1,     3,     3,     9,     7,     1,     5,     3,
     6,     1,     3,     1,     6,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     7,     9,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    14,    13,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
   288,     0,   285,     0,     0,     0,    54,    56,    55,    57,
    58,    59,    60,    61,    62,    67,    66,    63,    64,    65,
     5,     0,     0,     0,    15,    16,    18,    17,    19,   419,
   419,     0,   398,   402,   454,   203,   399,   400,   401,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   204,   205,   206,   207,     0,     0,     0,
   208,   209,     0,     0,     0,     0,     0,     0,   336,     0,
     0,   278,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   410,     0,     0,     0,     0,     0,     0,   262,     0,
     0,     0,   262,   329,   330,     0,     0,     0,     0,     0,
     0,   448,     0,     0,     0,     0,     0,   277,     0,   284,
     0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   404,
     0,    72,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   402,   339,   338,
   340,     0,     0,     0,     0,     0,     0,     0,     0,   214,
   275,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   273,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   402,     0,     0,     0,
   435,   436,   437,   428,     0,   429,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   412,   411,     0,     0,     0,     0,   262,   262,     0,
     0,     0,     0,     0,     0,     0,     0,   271,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
     0,     0,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   421,     0,     0,     0,     0,
     0,   406,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   454,     0,     0,
     0,     0,   337,     0,     0,   442,   443,     0,     0,   203,
     0,     0,     0,     0,   210,     0,   354,   353,   351,   352,
   347,   349,   348,   350,   342,   341,   343,   344,   345,   346,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   402,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   414,   413,   261,     0,   260,   259,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   267,
   263,   328,     0,     0,   269,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   287,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   420,     0,     0,    21,     0,   403,   408,    72,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,   356,   377,   357,   378,   358,   379,   359,   380,   360,
   381,   361,   382,   362,   383,   363,   384,   364,   385,   376,
   397,   365,   386,     0,     0,   367,   388,   368,   389,   369,
   390,   370,   391,   371,   392,   372,   393,     0,     0,     0,
     0,     0,     0,     0,     0,   457,     0,     0,   456,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   220,     0,
     0,     0,     0,     0,    68,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   438,     0,     0,     0,     0,   430,
   432,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   255,
   257,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   272,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   422,     0,   419,     0,   405,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   403,   213,   444,   445,     0,     0,     0,     0,     0,
   215,   216,   218,     0,     0,   452,     0,   224,   355,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   434,
   439,     0,   431,     0,   231,     0,     0,     0,     0,     0,
   321,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   268,     0,     0,
     0,   327,   270,     0,     0,     0,     0,     0,   423,     0,
   449,     0,     0,     0,   279,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   331,   332,   333,   334,   335,     0,     0,     0,     0,     0,
     0,     0,    20,     0,   407,   274,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   366,   387,   373,   394,   374,   395,   375,
   396,     0,   459,   458,   455,     0,   203,     0,     0,     0,
     0,   211,     0,     0,     0,   450,    69,   228,   235,     0,
   236,     0,   232,     0,   233,   253,     0,     0,   433,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   276,     0,     0,     0,     0,   262,     0,
   292,     0,   301,     0,   310,     0,     0,     0,     0,     0,
   241,   242,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   419,   409,    71,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   221,     0,     0,   222,     0,
   453,     0,   240,   251,   440,     0,     0,   325,   244,   246,
     0,     0,     0,   324,   326,   252,   229,   239,   250,   254,
     0,     0,     0,   418,     0,   417,     0,     0,   289,     0,
     0,   298,     0,     0,   307,     0,   264,   265,   266,     0,
     0,   423,     0,   426,     0,     0,     0,     0,   447,     0,
   281,   280,     0,     0,     0,     0,     0,    23,     0,    32,
     0,    36,     0,    30,     0,     0,    35,     0,    40,    38,
     0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
     0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   212,   217,   219,     0,   225,     0,   237,   441,
     0,     0,   323,   322,   226,   227,   262,     0,   258,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   425,     0,
   424,     0,     0,     0,     0,     0,     0,     0,   423,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   460,     0,   451,     0,     0,
     0,     0,   416,     0,     0,     0,     0,     0,     0,     0,
     0,   316,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   427,     0,     0,   446,   282,     0,     0,    37,     0,
     0,     0,     0,    27,     0,    33,     0,    39,    28,    41,
     0,    44,     0,    48,    49,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   223,     0,     0,   256,
     0,     0,   294,     0,   320,     0,     0,   317,   303,     0,
     0,   312,     0,     0,     0,     0,     0,     0,   243,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   101,   105,   109,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   197,     0,     0,
     0,   415,   290,     0,     0,     0,   293,   299,     0,     0,
   302,   308,     0,     0,   311,   230,   234,     0,     0,   245,
     0,     0,     0,     0,     0,    31,    34,    42,     0,    43,
    50,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   296,     0,     0,   305,     0,   314,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   201,     0,   247,     0,   291,     0,     0,     0,
   300,     0,     0,   309,     0,     0,     0,     0,     0,     0,
    26,    29,     0,     0,     0,    99,     0,   103,     0,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   195,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   295,     0,     0,   319,   304,     0,   313,     0,     0,
     0,     0,     0,     0,    46,    22,   100,   102,   104,   106,
   108,   110,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   196,   198,     0,   199,   238,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   113,   117,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   297,   318,   306,   315,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   200,   202,     0,     0,     8,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
     0,     0,     0,   111,     0,   115,     0,   119,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   248,     0,    24,   112,   114,   116,   118,
   120,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   125,   129,   133,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     0,   127,     0,   131,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   124,   126,   128,   130,   132,   134,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,   141,   145,   149,   153,   157,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   135,     0,   139,     0,   143,     0,   147,     0,   151,
     0,   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,   138,   140,   142,   144,   146,   148,   150,
   152,   154,   156,   158,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   185,
   189,   193,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   183,     0,   187,
     0,   191,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   184,   186,   188,   190,   192,   194,     0,     0,     0,   173,
   177,   181,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
   175,     0,   179,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   172,   174,   176,   178,   180,
   182,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   161,
   165,   169,     0,     0,     0,     0,     0,     0,     0,   159,
     0,   163,     0,   167,     0,     0,     0,     0,     0,     0,
   160,   162,   164,   166,   168,   170,     0,     0,     0
};

static const short yydefgoto[] = {  2297,
    83,     5,     6,    19,    20,    21,    22,     7,    67,    68,
    69,   424,  1615,   636,  1524,  1617,   637,  1525,  1619,   638,
  1526,  1833,   639,  1780,  1835,   640,  1781,  1837,   641,  1782,
  1969,   642,  1931,  1971,   643,  1932,  1973,   644,  1933,  2081,
   645,  2051,  2083,   646,  2052,  2085,   647,  2053,  2087,   648,
  2054,  2089,   649,  2055,  2091,   650,  2056,  2279,   651,  2273,
  2281,   652,  2274,  2283,   653,  2275,  2228,   654,  2216,  2230,
   655,  2217,  2232,   656,  2218,  2177,   657,  2159,  2179,   658,
  2160,  2181,   659,  2161,  1642,   660,  1548,  1736,   661,  1644,
   136,   240,    70,   551,   331,   538,   539,   332,    74,    75,
    76,    77,   333,  1180,  1494,  1598,  1183,  1499,  1602,  1186,
  1503,  1605,  1361,  1362,    79,    80,   966,   334,   139,   352,
   172,   235,   417,  1076,  1193,  1194,   336,   478,   194,   723,
   877,   140
};

static const short yypact[] = {  2657,
    47,-32768,-32768,  -107,-32768,   265,  3018,-32768,     9,    61,
    57,    65,    70,    75,    89,   -91,   -28,   -15,-32768,-32768,
-32768,-32768,  2357,    72,   122,    77,   115,   135,   -45,   128,
   141,   156,   313,   195,   159,   353,   357,   391,    52,   399,
   409,   259,   281,   -98,   -98,   298,   100,     6,   444,     7,
   502,   515,   154,   330,   331,   -18,    10,    18,-32768,   334,
-32768,   536,-32768,   501,   550,   503,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   568,     9,  2886,-32768,-32768,-32768,-32768,-32768,   380,
   380,   573,-32768,   310,    13,-32768,-32768,-32768,-32768,   140,
   217,   230,   286,   295,   309,   327,   373,   377,   386,   468,
   473,   474,   477,   488,   493,   496,   499,   500,   505,   509,
   398,   411,   417,-32768,-32768,-32768,-32768,  2558,  2558,  2558,
-32768,-32768,  2558,  1170,    25,  2558,   580,   449,-32768,   601,
   615,-32768,  2558,  2558,  2558,   433,  2558,   450,  2558,  2558,
   947,  2558,   443,   456,   469,   478,   947,   466,   481,   492,
   504,   522,   533,   553,   699,   -98,   -98,   -98,  2558,  2558,
  -139,-32768,   -76,   -98,   546,   561,   562,   535,-32768,   947,
   554,   752,-32768,-32768,-32768,   947,   947,  2558,  2558,   -62,
  2558,   571,  2558,   570,   659,  2558,  2558,-32768,   772,-32768,
   604,-32768,     9,   643,   648,   655,   664,   677,   685,   688,
   690,   691,   692,   696,   697,   698,   700,   701,   702,   703,
   704,   705,   706,   707,   708,   709,   711,   712,   713,   717,
   718,   719,   720,   825,   694,   721,   716,  2558,   914,-32768,
   -98,-32768,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,    56,    43,    43,   321,   725,   725,
   725,  2220,   913,  2408, 10051,    26,   722,   915,   599,-32768,
-32768,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,-32768,   -81, 10751, 10774,
 10797,  2558, 10820,  2558, 10843, 10866,   388,   728,  2265,  2408,
-32768,-32768,-32768,   472,   932,-32768, 10889,  2558,  2558,  2558,
  2558,   933,  2558,  2558,  2558,  2558,  2558,  2558,  2558,   745,
  -111,-32768,-32768,  3499,  3520,   -98,   -98,   557,   557,   -36,
  2558,  2558,  2558,  2558,  2020,   155,  2558,-32768,  2763,   935,
   936, 10912, 10935,   842,  2558, 10958,   841,  3541,-32768,   746,
  1633, 10981,-32768,  2558,   782,   944,   949,   975,   976,   977,
   978,   979,   981,   984,   985,   986,   987,   988,   989,   991,
   992,   993,   994,   995,   997,   998,   999,  1000,   798,  1007,
  1008,  1009,  1010,  1013,  1012,-32768,    98,  1014,  1018,  1015,
 10076,   174,   -67,  2557, 11004, 10101, 11027, 10126, 11050, 10151,
 11073, 10176, 11096, 10201, 11119, 10226, 11142, 10251, 11165, 10276,
 11188, 10301, 11211, 10326, 11234, 10351,  3562,  3583, 11257, 10376,
 11280, 10401, 11303, 10426, 11326, 10451, 11349, 10476, 11372, 10501,
  3604,  3625,  3646,  3667,  3688,  3709,   192,-32768,   109,   787,
   822,  2558,-32768,   947,  2596,   472,-32768,   285,    11,    43,
  2558,  1020,  1023,    15,-32768,  1688,   194,   379,   352,   352,
   275,   275,   275,   275,   361,   361,   725,   725,   725,   725,
  1022,  2408,  1027,  1029,  1030, 11395,  1031, 11418,  1032,  1033,
  1200,  2558,   412,  2408,   507,  2558,  2558,  1034,  1300, 11441,
 11464, 11487,  2558,  3026,  3049, 11510, 11533, 11556, 11579, 11602,
   830,   -98,  2558,  2558,-32768,-32768,-32768,   828,  3099,-32768,
   840,  2558,  3730,  3751,  3772, 10526,  -152,   -44,   -42,-32768,
-32768,-32768,  2558, 10551,-32768,   843,   844,  1036,  1041,   854,
 11625,  1044,   853,  2558,  2800,  2558,  2558,-32768, 11648,   886,
   855,   857,   859,   860,   862,   863,   864,   865,   867,   868,
   869,   870,   872,   873,   874,   875,   876,   877,   881,   882,
   883,   884,   887,   888,   890,   891,   892,   919,   920,   921,
-32768,  1081,   926,-32768,   923,   151,-32768,-32768,   929,   930,
   931,   934,   938,   940,   941,   943,   945,   946,   948,   950,
   951,   952,   954,   955,   956,   958,   959,   960,   966,   983,
  1011,  1038,  1055,  1057,  1121,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2558,  2558,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  1124,-32768,  2408,    43,-32768, 10576,
  1133,  2408,   973,    30,  2558,  1138,  1199,   680,-32768,  1123,
  1042,    10,  1201,  2558,-32768,   112,   -98,   947,   947,  1249,
   947,  1251,   947,   947,-32768,  2408,  3082,  1497,   508,-32768,
  1771,   750,  1059,  1255,  1258,  1259,  1260,   290,  1261,  1262,
  1264,  1266,  1268,  1269,  1270,  1204,   -31,  3793,  3814,-32768,
-32768,  3111,   -98,   -98,   -98,  1272,  2408,  2408,  2408,   982,
  1274,  2558,  2558,   947,   947,  2558,  1275,   947,  1277,  3835,
-32768,  1815,   414,  1276,  1122,  1281,  2558,  2558,   -98,  1283,
  1285,  1103,  1287,  1288,   947,   947,  1290,   -98,  1291,  1293,
   947,   947,  1320,  1321,  1322,  1324,  1325,   947,   517,   947,
  1327,  1329,  1330,  1333,  1334,-32768,  1332,   380,  1335,-32768,
  1336,  2894,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,-32768, 11671,
 10601, 11694, 10626, 11717, 10651, 11740, 10676, 10701,  1144,   168,
  1145,   224,-32768,   472,-32768,   105,   325,  1146,  1337,  1060,
-32768,-32768,-32768,    10,  2558,-32768,   512,-32768, 12591,  1341,
    20,    31,  1342,   947,  1343,   947,  1344,  1345,   516,-32768,
-32768,  2408,-32768,  2558,-32768,  2558,   947,   947,   947,  1148,
-32768,   458,   947,   947,   947,   947,   947,   947,   947,   544,
  2558,  2558,  2558,  1151,  -118,   -86,   129,-32768,   519,   520,
   523,-32768,-32768,  3856,  3877,  1347,  1350, 11763,   -43,  1253,
-32768,  2558,  2558,  2558,-32768,  1157,     9,  1159,  3898,  3919,
   -41,  1161,  1166,  1163,  1168,  1167,  1173,  1172,  1174,   201,
  1175,  1177,  1180,  1178,  1179,  1181,  1182,  1183,  1186,  1184,
-32768,-32768,-32768,-32768,-32768,  1187,  1188,  1189,  1191,  1192,
  1197,  1194,-32768,  1196,   174,-32768,  1360,  3940,  3961,  3982,
  4003,  4024,  4045,  4066,  4087,  4108,  4129,  4150,  4171,  4192,
  4213,  4234,  4255,  4276,  4297,  4318,  4339,  4360,  4381,  4402,
  4423,  4444,  4465,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1171,-32768,-32768,-32768,   947,    43,  2558,  1371,  1393,
    15,-32768,  1394, 10726,    10,-32768,-32768,-32768,-32768,   -98,
-32768,  1396,-32768,  1397,-32768,-32768,  1206,   524, 12591,  4486,
  1399,  1400,  1402,  2558,  2558,  2558,  1403,  1404,  1406,  1407,
  1408,  1409,  1410,-32768,  2488,  3134, 11786,  2728,   557,   -98,
  1412,   -98,  1415,   -98,  1416,  1417,  1418,  1419,  2558,  2558,
-32768,-32768,  1392,   947,   947,  1323,   947,  2761,   254, 11809,
  2558,     9,  1423,  2558,   947,  1422,  1426,  1424,  1245,  1428,
   517,  1429,  1433,  2558,  1431,  1435,  1434,  1436,  1438,   517,
  2558,  2558,  2558,   947,  1437,  1462,   517,  2558,  1464,  1465,
  1463,  2558,   380,-32768,-32768,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  1466,  1467,  1483,  1427,-32768,  1425,  1484,-32768,  1240,
-32768,    79,-32768,-32768,-32768,  1273,  2558,-32768,-32768,-32768,
  4507,  1491,  1525,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1572,  1485,  1271,-32768,  2558,-32768,  1294,   119,-32768,  1292,
   149,-32768,  1297,   162,-32768,  1298,-32768,-32768,-32768,  4528,
  4549,   -43,   187,-32768,   527,  1303,  1391,  2558,-32768,  2558,
-32768,-32768,  4570,     9,  1299,  4591,  1338,-32768,  1339,-32768,
  1340,-32768,  1346,-32768,  1369, 11832,-32768,  1370,-32768,-32768,
  1348,  1375, 11855,  4612, 11878,  1372,-32768,  1377,  1378,  4633,
  1379,  1381,-32768,  4654,  1380,  4675,  4696,  4717,  4738,  4759,
  4780,  4801,  4822,  4843,  4864,  4885,  4906,  4927,  4948,  4969,
  4990,  5011,  5032,  5053,  5074,  5095,  5116,  5137,  5158,  5179,
  5200,  1385,-32768,-32768,-32768,    10,-32768,  1430,-32768,-32768,
  5221,  2558,-32768,-32768,-32768,-32768,   557,  2980,-32768,  2295,
   -16,  2295,   -16,  2295,   -16,  2558,  2558,  1439,-32768,   947,
-32768,   947,  2558,  3157,  3187,   947,  1367,  1526,   -43,   517,
  1530,  2558,  1528,   517,  1529,  1534,  1535,  1569,  1576,  2558,
  1577,   947,  1579,  1580,  2558,  1584,  1582,  2558,  1585,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,-32768,  1583,-32768,  1586, 11901,
  1390,  2558,-32768,  2295,  2295,  2558,  3219,   173,  1588,  1395,
   -39,-32768,  3242,   209,   -30,  3265,   226,   -27,  3288,  3311,
  1398,-32768,  1420,  1587,-32768,-32768,  1414,     9,-32768,  1443,
  1480,  1486,  5242,-32768,  1401,-32768,  1421,-32768,-32768,-32768,
 11924,-32768,  1488,-32768,-32768, 11947,  1432,-32768, 11970,  1489,
 11993, 12016, 12039,  5263,  5284,  5305,  5326,  5347,  5368,  5389,
  5410,  5431,  5452,  5473,  5494,  5515,  5536,  5557,  5578,  5599,
  5620,  5641,  5662,  5683, 12062,  5704,-32768,  1490,   947,-32768,
  3334,  3472,  1589,  2558,-32768,   947,  1592,-32768,  1612,  2558,
  1613,  1616,  2558,  1617,  1619,  1620,   947,   947,-32768,  1621,
     9,   517,   517,   517,   517,  1624,  1625,  1627,   517,  1628,
  1631,  1677,  1634,-32768,-32768,-32768,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,-32768,  2558,  1679,
   947,-32768,-32768,  1492,  3357,  1494,-32768,-32768,  1496,  3380,
-32768,-32768,  1503,  3403,-32768,-32768,-32768,  1514,  1513,-32768,
     9,  1516,  1517,  1495,  1522,-32768,-32768,-32768,  1523,-32768,
-32768,-32768,  1524,  1521,  1550,  1575,  5725,  5746,  5767,  5788,
  5809,  5830,  5851,  5872,  5893,  5914,  5935,  5956,  5977,  5998,
  6019,  6040,  6061,  6082,  6103,  6124,  6145,  1581, 12085,  1527,
  1719,   -16,  1720,   947,   -16,  1772,   -16,  1777,   947,  1676,
  1643,   517,   517,  1778,  1806,   517,  1817,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,    43,-32768,  1819,-32768,   -24,-32768,  1629,   531,   -14,
-32768,  1630,   -12,-32768,  1632,  1623,  1635,     9,  1626,  1638,
-32768,-32768,  1636,  1639,   537, 12591,   540, 12591,   541, 12591,
  6166,  6187,  6208,  6229,  6250,  6271,  6292,  6313,  6334,  6355,
  6376,  6397,  6418,  6439,  6460,  6481,  6502,  6523,  6544,  6565,
  6586,   552,-32768,  1641,  1659,  1822,   -16,   947,  1823,  1828,
   -16,  1834,   -16,  1766,  2558,     9,   517,   947,  1871,  1872,
  2558,  1873,  2558,  1874,  2558,  1875,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,    43,  1877,    43,
  1878,-32768,    -2,  1683,-32768,-32768,     4,-32768,    17,  1685,
  6607,     9,  1687,  1689,-32768,-32768, 12591,-32768, 12591,-32768,
 12591,-32768, 12108, 12131, 12154,  6628,  6649,  6670,  6691,  6712,
  6733,  6754,  6775,  6796,  6817,  6838,  6859,  6880,  6901,  6922,
  6943,  6964,  6985,-32768,-32768,   555,-32768,-32768,  1882,  1884,
  1885,  1901,  2558,  2558,  1740,   517,   947,-32768,-32768,-32768,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,    43,  1903,
-32768,-32768,-32768,-32768,  7006,  3426,  1741,  1711,  1712,  1713,
  1714,  1715,  7027,  7048,  7069,  7090,  7111,  7132,  7153,  7174,
  7195,  7216,  7237,  7258,  7279,  7300,  7321,  7342,  7363,  7384,
-32768,-32768,  2558,  1907,-32768,   947,   517,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  3449,-32768,
  1717,  1722,   559, 12591,   566, 12591,   588, 12591,  7405,  7426,
  7447,  7468,  7489,  7510,  7531,  7552,  7573,  7594,  7615,  7636,
  7657,  7678,  7699,  7720,  7741,  7762,  1913,   947,  1914,  2558,
  1915,  2558,  1916,  2558,  1918,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,-32768,  1725,-32768, 12591,-32768, 12591,-32768,
 12591,-32768, 12177, 12200, 12223,  7783,  7804,  7825,  7846,  7867,
  7888,  7909,  7930,  7951,  7972,  7993,  8014,  8035,  8056,  8077,
   947,-32768,-32768,-32768,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  1726,
  1749,  1759,  1760,  8098,  8119,  8140,  8161,  8182,  8203,  8224,
  8245,  8266,  8287,  8308,  8329,  8350,  8371,  8392,   947,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  1762,   589, 12591,
   592, 12591,   595, 12591,  8413,  8434,  8455,  8476,  8497,  8518,
  8539,  8560,  8581,  8602,  8623,  8644,  8665,  8686,  8707,   517,
  2558,  1957,  2558,  1958,  2558,  1960,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  1773, 12591,-32768, 12591,-32768, 12591,-32768, 12246, 12269,
 12292, 12315, 12338, 12361,  8728,  8749,  8770,  8791,  8812,  8833,
  8854,  8875,  8896,  1961,-32768,-32768,-32768,-32768,-32768,-32768,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,-32768,
  1770,  1793,  1803,  1804,  1805,  1807,  8917,  8938,  8959,  8980,
  9001,  9022,  9043,  9064,  9085,  2558,  2558,  2558,  2558,  2558,
  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
   596, 12591,   626, 12591,   627, 12591,   631, 12591,   634, 12591,
   635, 12591,  9106,  9127,  9148,  9169,  9190,  9211,  9232,  9253,
  9274,  2558,  1967,  2558,  2001,  2558,  2004,  2558,  2005,  2558,
  2006,  2558,  2007,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  2558,  2558, 12591,-32768, 12591,-32768, 12591,-32768, 12591,-32768,
 12591,-32768, 12591,-32768,  9295,  9316,  9337,  9358,  9379,  9400,
 12384, 12407, 12430,  2558,  2558,  2558,  2558,  2558,  2558,-32768,
-32768,-32768,  9421,  9442,  9463,  9484,  9505,  9526,  1813,  1814,
  1816,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2558,
  9547,  9568,  9589,  9610,  9631,  9652,   639, 12591,   642, 12591,
   646, 12591,  2558,  2558,  2558,  2558,  2558,  2558,  2558,  2010,
  2558,  2021,  2558,  2022,  9673,  9694,  9715, 12453, 12476, 12499,
 12591,-32768, 12591,-32768, 12591,-32768,  2558,  2558,  2558,-32768,
-32768,-32768,  9736,  9757,  9778,  1829,  1830,  1831,  2558,  2558,
  2558,  2558,  2558,  2558,  9799,  9820,  9841,   647, 12591,   651,
 12591,   675, 12591,  2558,  2558,  2558,  2558,  2023,  2558,  2027,
  2558,  2028,  9862,  9883,  9904, 12591,-32768, 12591,-32768, 12591,
-32768,  2558,  2558,  2558,  9925,  9946,  9967,  2558,  2558,  2558,
  9988, 10009, 10030,  2558,  2558,  2558, 12522, 12545, 12568,-32768,
-32768,-32768,  1835,  1836,  1837,  2558,  2558,  2558,   676, 12591,
   679, 12591,   682, 12591,  2558,  2029,  2558,  2033,  2558,  2034,
 12591,-32768, 12591,-32768, 12591,-32768,  2041,  2042,-32768
};

static const short yypgoto[] = {-32768,
   -32,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1458,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -290,   -22,-32768,  2061,    -5,  -354,  -170,    -3,-32768,-32768,
-32768,-32768,  2065,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768, -1255, -1330,-32768,-32768, -1035,   -23,-32768,   -29,
-32768,   -88,-32768, -1167,  1001,  1449,  -154,  -323,  -714,  1054,
-32768,  -185
};


#define	YYLAST		12785


static const short yytable[] = {   138,
   137,    72,   236,    73,   541,   481,   515,   876,   365,   178,
   181,    81,   369,   192,   171,   173,   241,    96,   721,   146,
   146,   195,   148,   190,  1288,  1028,  1359,  1365,   296,  1368,
  1438,  1360,   480,   867,  1438,  1359,  1029,  1438,  1359,   374,
  1360,  1359,   143,  1360,   356,   357,  1360,   468,   767,  1359,
   203,  1359,     8,  1359,  1360,  1213,  1360,     9,  1360,   467,
   468,   358,    85,  1359,  1222,   356,   357,    84,  1360,  1359,
    86,  1229,   356,   357,  1360,    87,   121,   122,   123,  1030,
    88,  1060,  1359,  1061,  1269,   167,   168,  1360,   532,   121,
   122,   123,   157,   158,    89,   159,   169,   356,   357,   469,
   470,   471,   170,    90,   289,   290,   291,   356,   357,   292,
   295,    96,   299,  1062,   501,  1063,   356,   357,   502,   319,
   320,   321,   182,   323,   359,   325,   326,   142,   337,   297,
   298,  1380,   375,   608,   868,   869,   351,   175,   353,   477,
   176,   177,   356,   357,   360,   354,   355,   356,   357,   147,
   147,  1074,   356,   357,  1086,   468,   768,  1075,   769,  1023,
   552,   553,  1437,   542,   372,   373,    91,   376,   911,   378,
   385,  1441,   381,   382,  1444,   477,   191,  1646,   726,    92,
   124,   125,   126,   127,   121,   122,   123,  1650,   715,  1652,
   739,   186,   148,    82,   187,   124,   125,   126,   127,  1739,
   153,   131,   132,   356,   357,  1741,   179,   183,   565,   714,
   193,   423,   196,   242,   421,   722,   131,   132,  1742,   425,
   426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
   436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
   446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
   456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
   466,  1200,   356,   357,  1381,  1438,   141,    10,  1385,  1438,
   476,   143,  1438,   482,   124,   125,   126,   127,   486,   487,
   488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
   498,   499,   500,   601,   717,   901,  1596,   602,   506,  1600,
   508,  1603,   356,   357,   706,   290,   476,   880,   707,   144,
  1151,   712,   356,   357,   519,   520,   521,   522,  1280,   524,
   525,   526,   527,   528,   529,   530,   535,   536,  1064,   145,
  1065,  1017,   356,   357,   243,   149,   244,   543,   544,   545,
   546,   131,   132,   554,   902,   356,   357,   477,  1282,   819,
   150,   561,   537,   537,   540,   540,   356,   357,   151,   477,
   569,  1284,  1438,  1014,   131,   132,  1438,   712,  1438,   304,
   305,   306,  1434,   307,   308,   309,   310,   311,   312,   313,
   314,   315,  1289,   860,   356,   357,  1290,   316,   704,   152,
   705,  1693,   356,   357,   154,  1697,  1095,  1699,   155,   607,
    11,    12,    13,    14,    15,    16,    17,    18,  1440,   356,
   357,   245,   889,   246,   131,   132,  1512,  1513,  1514,  1515,
   821,   934,   819,  1519,   247,  1443,   248,   302,   303,   304,
   305,   306,   156,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   160,   919,   920,   921,   161,   316,   710,   162,
   163,   290,   164,   165,   301,  1201,   716,   718,   311,   312,
   313,   314,   315,   302,   303,   304,   305,   306,   316,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   476,   516,
   249,   166,   250,   316,   712,   180,   713,   710,   737,   251,
   476,   252,   741,   742,   124,   125,   126,   127,   174,   748,
   131,   132,   757,   253,   199,   254,   238,   184,   239,   758,
   759,   131,   132,  1045,  1046,   131,   132,   472,   762,   239,
   185,   255,   861,   256,   188,   189,  1609,  1610,   197,   770,
  1613,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   780,   198,   782,   783,   201,   316,   313,   314,   315,  1054,
  1055,  1347,   477,   200,   316,   305,   306,   865,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   257,  1038,   258,
   202,   259,   316,   260,   234,  1016,  1018,   237,   131,   132,
   261,   477,   262,   820,   511,   300,   239,   302,   303,   304,
   305,   306,   285,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   131,   132,   485,   286,   317,   316,   738,   935,
   239,   287,   477,   477,   477,    43,    44,    45,    46,   318,
    48,  1703,   302,   303,   304,   305,   306,   322,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   961,   962,   963,
   964,   965,   316,   338,   324,   302,   303,   304,   305,   306,
   339,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   850,   851,   263,   340,   264,   316,   343,   265,   267,   266,
   268,   269,   341,   270,   852,   853,   854,   855,   856,   857,
   858,   344,   271,   476,   272,   873,   345,   273,   864,   274,
   275,   870,   276,   277,   279,   278,   280,   881,   346,   281,
   879,   282,   350,   283,  1177,   284,   712,   712,   740,   893,
  1778,  1025,   476,  1026,   710,   712,   347,  1037,   712,   712,
  1066,  1067,   712,   712,  1068,  1156,  1290,   348,  1291,   974,
  1648,   364,  1649,   915,   916,   917,  1661,   477,  1662,  1663,
  1665,  1664,  1666,   476,   476,   476,   361,   349,   924,   925,
   367,  1688,   928,  1689,  1769,   895,  1770,   368,  1860,   941,
  1861,   362,   363,   939,   940,  1862,   380,  1863,   950,   377,
   379,  1832,   302,   303,   304,   305,   306,   383,   307,   308,
   309,   310,   311,   312,   313,   314,   315,  1864,  1991,  1865,
  1992,  1993,   316,  1994,  1995,  2102,  1996,  2103,   384,   978,
   979,   980,   981,   982,   983,   984,   985,   986,   987,   988,
   989,   990,   991,   992,   993,   994,   995,   996,   997,   998,
   999,  1000,  1001,  1002,  1003,  2104,  2106,  2105,  2107,   416,
  2108,  1144,  2109,  2110,  2112,  2111,  2113,   386,  2189,   820,
  2190,  2191,   387,  2192,  1019,  2193,  2237,  2194,  2238,   388,
  2239,  1024,  2240,   302,   303,   304,   305,   306,   389,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   476,  1172,
  1039,   390,  1040,   316,  2241,  2285,  2242,  2286,  2287,   391,
  2288,  2289,   392,  2290,   393,   394,   395,  1056,  1057,  1058,
   396,   397,   398,   418,   399,   400,   401,   402,   403,   404,
   405,   406,   407,   408,  1082,   409,   410,   411,  1078,  1079,
  1080,   412,   413,   414,   415,   420,   419,   422,   316,   474,
   483,   484,  1351,   302,   303,   304,   305,   306,   512,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   517,   523,
   531,   556,   557,   316,   560,   563,   566,   570,   571,    93,
   327,   594,  1114,   572,  2012,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   573,
   574,   575,   576,   577,   328,   578,   708,   922,   579,   580,
   581,   582,   583,   584,  1145,   585,   586,   587,   588,   589,
  1152,   590,   591,   592,   593,    43,    44,    45,    46,    47,
    48,   595,   596,   597,   598,   599,   600,   709,   603,   605,
  1161,  1162,  1163,   604,  1235,   719,   720,   725,   756,   760,
  1178,  1171,  1181,   727,  1184,   728,   729,   731,   733,   734,
   743,   761,   774,   772,   773,  1190,  1191,   775,   776,  1204,
   778,   779,   785,   537,   786,   540,   787,  1203,   788,   789,
  1206,   790,   791,   792,   793,  1022,   794,   795,   796,   797,
  1216,   798,   799,   800,   801,   802,   803,  1223,  1224,  1225,
   804,   805,   806,   807,  1230,   816,   808,   809,  1234,   810,
   811,   812,  1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,
  1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
  1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,   813,   814,
   815,   817,   818,   823,   824,   825,   849,   859,   826,   874,
   128,   329,   827,  1271,   828,   829,   130,   830,   863,   831,
   832,   133,   833,   871,   834,   835,   836,   330,   837,   838,
   839,  1278,   840,   841,   842,   302,   303,   304,   305,   306,
   843,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   866,  1297,    93,   288,  1294,   316,  1295,   844,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    93,   288,   872,   845,   878,   910,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   846,   302,   303,   304,   305,   306,   875,   307,
   308,   309,   310,   311,   312,   313,   314,   315,  1350,   847,
  1358,   848,  1364,   316,  1367,   884,  1357,   886,  1363,   896,
  1366,   897,  1369,  1370,   898,   899,   900,   903,   904,  1374,
   905,   537,   906,   540,   907,   908,   909,   918,  1383,   923,
   931,   929,   936,   938,   937,   942,  1391,   943,   944,   945,
   946,  1396,   949,   951,  1399,   952,  1401,  1402,  1403,  1404,
  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,
  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,  1424,
  1425,  1426,   955,   956,   957,   353,   958,   959,  1431,   968,
   289,   290,  1432,   969,   970,   971,   972,   973,   975,  1013,
  1015,   976,  1044,  1021,  1020,  1451,  1027,  1031,  1033,  1035,
  1036,  1059,  1071,   128,   129,  1072,  1077,  1081,  1083,   130,
  1087,  1088,  1089,  1090,   133,  1115,  1091,   293,  1092,  1142,
   294,  1093,  1097,  1094,  1096,  1098,  1146,  1099,  1100,  1105,
  1101,  1102,  1103,   128,   129,  1104,  1106,  1107,  1108,   130,
  1109,  1110,  1111,  1112,   133,  1113,  1147,   735,  1192,  1149,
   736,  1153,  1154,  1155,  1158,  1159,  1643,  1160,  1164,  1165,
  1495,  1166,  1167,  1168,  1169,  1170,  1500,  1179,  1511,  1504,
  1182,  1185,  1187,  1188,  1189,  1205,  1196,  1208,  1209,  1210,
  1211,  1266,  1265,  1212,  1214,  1215,  1217,  1218,  1268,  1219,
  1221,  1220,  1227,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,
  1544,  1545,  1546,  1547,  1228,  1549,  1231,  1232,  1233,  1262,
  1270,  1277,  1263,   302,   303,   304,   305,   306,  1561,   307,
   308,   309,   310,   311,   312,   313,   314,   315,  1264,  1267,
  1276,  1293,  1281,   316,  1298,  1279,  1273,  1283,  1285,    93,
   288,   744,  1734,  1292,  1737,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,  1378,
  1274,  1379,  1382,  1384,  1386,  1348,  1387,  1300,  1301,  1302,
  1388,  1303,  1371,  1307,  1616,  1618,  1620,  1621,  1622,  1623,
  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,
  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1304,  1306,
  1308,  1312,  1313,  1314,  1389,  1656,  1317,  1275,  1316,  1319,
  1346,  1390,  1392,  1801,  1394,  1395,  1397,  1398,  1427,  1400,
  1428,  1430,  1449,  1435,  1493,  1436,  1456,  1497,  1447,   335,
   302,   303,   304,   305,   306,   342,   307,   308,   309,   310,
   311,   312,   313,   314,   315,  1450,  1457,  1498,  1501,  1448,
   316,  1502,  1505,  1702,  1506,  1507,  1510,  1461,   366,  1516,
  1517,  1701,  1518,  1520,   370,   371,  1521,  1707,  1523,  1709,
   567,  1711,  1452,  1713,  1714,  1715,  1716,  1717,  1718,  1719,
  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,
  1730,  1731,  1732,  1733,   302,   303,   304,   305,   306,  1745,
   307,   308,   309,   310,   311,   312,   313,   314,   315,  1453,
   128,   129,  1522,  1550,   316,  1454,   130,  1459,  1463,  1490,
  1564,   133,  1552,  1554,   891,   724,  1555,   892,   302,   303,
   304,   305,   306,  1557,   307,   308,   309,   310,   311,   312,
   313,   314,   315,  1559,  1560,  1562,  1563,  1565,   316,  1775,
  1776,  1568,  1566,  1567,  1595,  1597,  1594,  1783,  1784,  1785,
  1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,
  1796,  1797,  1798,  1799,  1800,   302,   303,   304,   305,   306,
  1569,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   302,   303,   304,   305,   306,   316,   307,   308,   309,   310,
   311,   312,   313,   314,   315,  1570,  1607,  1601,   894,  1829,
   316,  1592,  1604,  1611,  1834,  1836,  1838,  1839,  1840,  1841,
  1842,  1843,  1844,  1845,  1846,  1847,  1848,  1849,  1850,  1851,
  1852,  1853,  1854,  1855,  1856,  1608,   302,   303,   304,   305,
   306,  1612,   307,   308,   309,   310,   311,   312,   313,   314,
   315,  1614,   933,  1645,  1654,  1657,   316,  1692,  1695,  1647,
  1651,  1659,  1653,  1696,  1660,  1655,  1887,  1658,  1889,  1698,
  1891,  1690,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,
  1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,
  1691,   302,   303,   304,   305,   306,  1700,   307,   308,   309,
   310,   311,   312,   313,   314,   315,  1705,  1706,  1708,  1710,
  1712,   316,  1735,  1738,  1740,  1743,  1746,  1771,  1747,  1772,
  1773,  1934,  1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,
  1943,  1944,  1945,  1946,  1947,  1948,  1774,  1777,  1802,  1805,
  1806,  1807,  1830,  1808,  1809,  1810,  1858,  1859,  1884,  1886,
  1888,  1890,   711,  1892,  1911,  1949,  1970,  1972,  1974,  1975,
  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,
  1986,  1987,  1988,  1989,   302,   303,   304,   305,   306,  1950,
   307,   308,   309,   310,   311,   312,   313,   314,   315,  1951,
  1952,  1990,  2014,  2016,   316,  2018,  2050,  2013,  2034,  2015,
  2066,  2017,  2124,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,   302,   303,
   304,   305,   306,  2067,   307,   308,   309,   310,   311,   312,
   313,   314,   315,  2068,  2069,  2070,  2126,  2071,   316,  2128,
  2130,  2132,  2134,  2168,  2169,  2202,  2170,  2057,  2058,  2059,
  2060,  2061,  2062,  2063,  2064,  2065,  2204,  2206,  2247,  2222,
  2223,  2224,  2249,  2251,  2292,  2276,  2277,  2278,  2294,  2296,
  2298,  2299,  2082,  2084,  2086,  2088,  2090,  2092,  2093,  2094,
  2095,  2096,  2097,  2098,  2099,  2100,  2101,   547,    27,    28,
   548,   549,    31,    32,    33,   822,    34,    71,    36,    37,
    38,    78,    40,    41,  1148,  1195,     0,     0,  2123,     0,
  2125,     0,  2127,     0,  2129,     0,  2131,     0,  2133,    53,
  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2143,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
  2153,  2154,  2155,  2156,  2157,  2158,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    66,     0,  2171,  2172,
  2173,  2174,  2175,  2176,  2178,  2180,  2182,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  2195,
  2196,  2197,  2198,  2199,  2200,  2201,     0,  2203,     0,  2205,
     0,     0,     0,     0,     0,     0,   882,   883,     0,   885,
     0,   887,   888,  2213,  2214,  2215,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  2225,  2226,  2227,  2229,  2231,
  2233,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  2243,  2244,  2245,  2246,     0,  2248,     0,  2250,     0,     0,
     0,   550,   926,   927,     0,     0,   930,     0,  2255,  2256,
  2257,     0,     0,     0,  2261,  2262,  2263,     0,     0,     0,
  2267,  2268,  2269,   947,   948,     0,     0,     0,     0,   953,
   954,     0,  2280,  2282,  2284,     0,   960,     0,   967,     0,
     0,  2291,     0,  2293,     0,  2295,     0,    93,   513,     0,
     0,     0,     0,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    93,   288,     0,
     0,     0,     0,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,     0,     0,     0,
     0,     0,  1032,     0,  1034,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1041,  1042,  1043,     0,     0,
     0,  1047,  1048,  1049,  1050,  1051,  1052,  1053,     0,    93,
    94,    95,     0,    96,     0,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,     0,
   121,   122,   123,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
    93,   327,     0,   316,     0,   473,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     0,     0,     0,     0,     0,   328,     0,     0,   128,   129,
     0,     0,     0,     0,   130,     0,     0,     0,     0,   133,
     0,     0,     0,     0,  1143,   514,    43,    44,    45,    46,
    47,    48,     0,     0,     0,     0,     0,     0,  1354,  1355,
     0,     0,     0,     0,   130,     0,     0,     0,     0,  1356,
    93,   288,   468,     0,     0,   170,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     0,   121,   122,   123,     0,  1197,   124,   125,   126,   127,
     0,     0,     0,  1207,     0,     0,     0,     0,     0,     0,
   128,   129,     0,     0,     0,     0,   130,   131,   132,     0,
     0,   133,  1226,   134,     0,   135,     0,     0,     0,     0,
    93,   288,     0,     0,     0,     0,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     0,   128,   475,     0,     0,     0,     0,   130,    93,   513,
     0,     0,   133,     0,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   609,   610,
   611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
   621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
   631,   632,   633,   634,     0,     0,   -10,     1,     0,   -10,
   -53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,   129,     0,     0,     0,     0,   130,     0,     0,
     0,     0,   133,     0,     0,     0,     0,     0,     0,   -53,
     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,     0,     0,     0,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,     0,   -53,   -53,   -53,   -53,   -53,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1372,     0,
  1373,   128,   129,     0,  1377,     0,     0,   130,     0,     0,
     0,     0,   133,     0,   -53,   -53,   -53,     0,   635,     0,
  1393,   -53,     0,   -53,     0,   -53,   -53,   -53,   -53,   -53,
   -53,   -53,     0,   -53,     0,     0,     0,     0,     0,   128,
   129,     0,     0,     0,     0,   130,     0,     0,     0,     0,
   133,     0,   -10,   -10,   -10,   -10,   -10,   -10,   -10,   -10,
   547,    27,    28,   548,   549,    31,    32,    33,     0,    34,
     0,    36,    37,    38,     0,    40,    41,     2,     3,     0,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    53,     0,     0,     0,     0,   547,    27,    28,
   548,   549,    31,    32,    33,     0,    34,     0,    36,    37,
    38,     0,    40,    41,     0,     0,     0,     0,     0,     0,
    54,    55,    56,     0,     0,     0,     0,     0,     0,    53,
     0,     0,     0,     0,     0,     0,     0,  1491,     0,    66,
     0,     0,     0,     0,  1496,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1508,  1509,    54,    55,    56,
     0,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,    66,     0,     0,     0,
     0,   316,     0,     0,     0,     0,   204,  1175,     0,  1176,
     0,     0,     0,     0,   302,   303,   304,   305,   306,  1551,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,     0,     0,
  1198,     0,  1199,     0,   555,   609,   610,   611,   612,   613,
   614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
   624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
   634,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   781,  1599,   205,   206,   207,     0,  1606,     0,     0,
     0,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,    23,     0,     0,     0,     0,     0,     0,     0,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,     0,
   228,   229,   230,   231,   232,   233,     0,     0,     0,     0,
    24,     0,     0,     0,    25,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,    35,    36,    37,    38,    39,
    40,    41,     0,     0,     0,    42,    43,    44,    45,    46,
    47,    48,     0,    49,    50,    51,    52,    53,     0,     0,
     0,     0,     0,     0,     0,   977,  1694,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1704,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,    56,     0,     0,
     0,     0,    57,     0,    58,     0,    59,    60,    61,    62,
    63,    64,    65,     0,    66,     0,   547,    27,    28,   548,
   549,    31,    32,    33,     0,    34,     0,    36,    37,    38,
     0,    40,    41,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,    53,     0,
     0,     0,     0,   316,     0,     0,     0,     0,     0,  1352,
     0,  1353,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1779,    54,    55,    56,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,    66,     0,     0,     0,   316,
     0,     0,   302,   303,   304,   305,   306,   749,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,     0,     0,     0,     0,     0,     0,
   750,     0,     0,     0,  1831,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,     0,     0,     0,
     0,     0,     0,   890,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,  1885,   302,   303,   304,
   305,   306,   914,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,     0,
   302,   303,   304,   305,   306,  1173,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,     0,     0,     0,     0,     0,     0,  1375,  1930,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,     0,     0,     0,     0,     0,     0,  1376,     0,
     0,     0,   302,   303,   304,   305,   306,  1968,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,     0,   302,   303,   304,   305,   306,
  1433,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,     0,   302,   303,
   304,   305,   306,  1439,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
     0,   302,   303,   304,   305,   306,  1442,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,     0,   302,   303,   304,   305,   306,  1445,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,   302,   303,   304,
   305,   306,  1446,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,     0,
   302,   303,   304,   305,   306,  1492,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,     0,   302,   303,   304,   305,   306,  1553,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,     0,   302,   303,   304,   305,
   306,  1556,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,     0,   302,
   303,   304,   305,   306,  1558,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,   302,   303,   304,   305,   306,  1804,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,     0,   302,   303,   304,   305,   306,
  1857,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,   473,     0,     0,
     0,   533,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,   533,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,   534,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
   564,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,   684,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,   685,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,   698,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,   699,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,   700,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,   701,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,   702,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,   703,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,   763,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
   764,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,   765,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,   912,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,   913,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,   932,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1069,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1070,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1084,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1085,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1116,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1117,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1118,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1119,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1120,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1121,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1122,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1123,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1124,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1125,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1126,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1127,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1128,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1129,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1130,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1131,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1132,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1133,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1134,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1135,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1136,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1137,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1138,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1139,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1140,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1141,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1157,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1272,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1286,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1287,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1296,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1299,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1310,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1315,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1318,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1320,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1321,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1322,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1323,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1324,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1325,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1326,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1327,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1328,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1329,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1330,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1331,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1332,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1333,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1334,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1335,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1336,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1337,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1338,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1339,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1340,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1341,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1342,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1343,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1344,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1345,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1349,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1455,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1467,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1468,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1469,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1470,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1471,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1472,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1473,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1474,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1475,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1476,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1477,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1478,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1479,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1480,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1481,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1482,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1483,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1484,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1485,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1486,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1487,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1489,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1571,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1572,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1573,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1574,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1575,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1576,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1577,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1578,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1579,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1580,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1581,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1582,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1583,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1584,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1585,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1586,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1587,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1588,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1589,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1590,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1591,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1667,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1668,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1669,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1670,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1671,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1672,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1673,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1674,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1675,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1676,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1677,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1678,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1679,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1680,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1681,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1682,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1683,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1684,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1685,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1686,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1687,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1744,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1751,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1752,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1753,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1754,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1755,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1756,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1757,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1758,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1759,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1760,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1761,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1762,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1763,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1764,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1765,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1766,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1767,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1768,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1803,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1811,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1812,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1813,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1814,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1815,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1816,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1817,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1818,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1819,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1820,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1821,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1822,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1823,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1824,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1825,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1826,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1827,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1828,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1866,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1867,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1868,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1869,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1870,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1871,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1872,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1873,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1874,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1875,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1876,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1877,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1878,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1879,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1880,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1881,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1882,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1883,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1915,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1916,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1917,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1918,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1919,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1920,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1921,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1922,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1923,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1924,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1925,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1926,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1927,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1928,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1929,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1953,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1954,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1955,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1956,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1957,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1958,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1959,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1960,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  1961,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  1962,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  1963,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  1964,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  1965,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  1966,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  1967,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  1997,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  1998,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  1999,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2000,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2001,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2002,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2003,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2004,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  2005,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  2006,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  2007,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  2008,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  2009,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2010,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2011,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2041,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2042,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2043,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  2044,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  2045,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  2046,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  2047,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  2048,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2049,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2072,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2073,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2074,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2075,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  2076,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  2077,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  2078,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  2079,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  2080,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2114,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2115,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2116,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2117,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2118,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  2119,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  2120,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  2121,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  2122,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  2144,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2145,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2146,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2147,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2148,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2149,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  2162,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  2163,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  2164,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  2165,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  2166,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2167,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2183,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2184,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2185,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2186,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  2187,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  2188,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  2207,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  2208,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  2209,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2219,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2220,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2221,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2234,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2235,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,   302,   303,   304,   305,   306,
  2236,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,   302,   303,   304,   305,
   306,  2252,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,   302,   303,   304,
   305,   306,  2253,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,   302,   303,
   304,   305,   306,  2254,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,   302,
   303,   304,   305,   306,  2258,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
   302,   303,   304,   305,   306,  2259,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,   302,   303,   304,   305,   306,  2260,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,   302,   303,   304,   305,   306,  2264,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,   302,   303,   304,   305,   306,  2265,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,   302,   303,   304,   305,   306,  2266,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   479,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   606,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   663,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   665,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   667,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   669,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   671,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   673,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   675,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   677,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   679,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   681,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   683,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   687,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   689,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   691,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   693,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   695,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   697,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   766,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,   771,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,   862,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,  1005,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,  1007,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,  1009,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,  1011,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,     0,     0,  1012,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,     0,     0,  1150,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,   503,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,   504,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,   505,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,   507,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,   509,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,   510,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,   518,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,   558,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
   559,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,   562,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,   568,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,   662,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,   664,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,   666,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,   668,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,   670,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,   672,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,   674,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
   676,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,   678,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,   680,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,   682,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,   686,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,   688,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,   690,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,   692,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,   694,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,   696,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
   730,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,   732,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,   745,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,   746,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,   747,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,   751,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,   752,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,   753,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,   754,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,   755,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
   777,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,   784,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,  1004,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,  1006,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,  1008,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,  1010,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,  1073,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,  1174,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,  1202,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,  1305,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
  1309,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,  1311,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,  1429,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,  1458,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,  1460,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,  1462,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,  1464,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,  1465,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,  1466,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,  1488,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
  1593,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,  1748,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,  1749,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,  1750,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,  1912,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,  1913,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,  1914,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,  2035,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,  2036,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,  2037,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
  2038,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,  2039,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316,     0,  2040,   302,   303,   304,
   305,   306,     0,   307,   308,   309,   310,   311,   312,   313,
   314,   315,     0,     0,     0,     0,     0,   316,     0,  2150,
   302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
   311,   312,   313,   314,   315,     0,     0,     0,     0,     0,
   316,     0,  2151,   302,   303,   304,   305,   306,     0,   307,
   308,   309,   310,   311,   312,   313,   314,   315,     0,     0,
     0,     0,     0,   316,     0,  2152,   302,   303,   304,   305,
   306,     0,   307,   308,   309,   310,   311,   312,   313,   314,
   315,     0,     0,     0,     0,     0,   316,     0,  2210,   302,
   303,   304,   305,   306,     0,   307,   308,   309,   310,   311,
   312,   313,   314,   315,     0,     0,     0,     0,     0,   316,
     0,  2211,   302,   303,   304,   305,   306,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,     0,     0,     0,
     0,     0,   316,     0,  2212,   302,   303,   304,   305,   306,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     0,     0,     0,     0,     0,   316,     0,  2270,   302,   303,
   304,   305,   306,     0,   307,   308,   309,   310,   311,   312,
   313,   314,   315,     0,     0,     0,     0,     0,   316,     0,
  2271,   302,   303,   304,   305,   306,     0,   307,   308,   309,
   310,   311,   312,   313,   314,   315,     0,     0,     0,     0,
     0,   316,     0,  2272,   302,   303,   304,   305,   306,     0,
   307,   308,   309,   310,   311,   312,   313,   314,   315,     0,
     0,     0,     0,     0,   316
};

static const short yycheck[] = {    23,
    23,     7,    91,     7,   359,   296,   330,   722,   179,     4,
     4,     3,   183,     4,    44,    45,     4,     7,     4,    65,
    65,     4,    65,    42,  1192,     6,    66,  1283,     4,  1285,
  1361,    71,     7,     4,  1365,    66,     6,  1368,    66,   102,
    71,    66,   195,    71,   184,   185,    71,     5,   201,    66,
    83,    66,     6,    66,    71,  1091,    71,   165,    71,     4,
     5,   201,     6,    66,  1100,   184,   185,     7,    71,    66,
     6,  1107,   184,   185,    71,     6,    34,    35,    36,    49,
     6,   200,    66,   202,     6,   184,   185,    71,   200,    34,
    35,    36,    41,    42,     6,    44,   195,   184,   185,   285,
   286,   287,   201,   195,   128,   129,   130,   184,   185,   133,
   134,     7,   136,   200,   196,   202,   184,   185,   200,   143,
   144,   145,   116,   147,   201,   149,   150,     6,   152,   105,
   106,  1299,   195,   201,   105,   106,   166,    38,   168,   294,
    41,    42,   184,   185,   174,   169,   170,   184,   185,   195,
   195,   195,   184,   185,   196,     5,   201,   201,   201,   874,
     6,     7,   202,   200,   188,   189,   195,   191,   200,   193,
   203,   202,   196,   197,   202,   330,   195,   202,   502,   195,
   170,   171,   172,   173,    34,    35,    36,   202,   479,   202,
   514,    38,    65,   185,    41,   170,   171,   172,   173,   202,
    42,   191,   192,   184,   185,   202,   201,   201,   379,   199,
   201,   241,   195,   201,   238,   201,   191,   192,   202,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,     8,   184,   185,  1300,  1596,   195,     3,  1304,  1600,
   294,   195,  1603,   296,   170,   171,   172,   173,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   196,   480,     6,  1552,   200,   322,  1555,
   324,  1557,   184,   185,   196,   329,   330,   196,   200,   195,
  1025,   200,   184,   185,   338,   339,   340,   341,   200,   343,
   344,   345,   346,   347,   348,   349,   356,   357,   200,   195,
   202,     7,   184,   185,   195,   195,   197,   361,   362,   363,
   364,   191,   192,   367,    55,   184,   185,   502,   200,   199,
   195,   375,   358,   359,   358,   359,   184,   185,    46,   514,
   384,   200,  1693,   196,   191,   192,  1697,   200,  1699,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   196,   707,   184,   185,   200,   194,   197,   195,
   199,  1647,   184,   185,    42,  1651,   196,  1653,    42,   422,
   136,   137,   138,   139,   140,   141,   142,   143,   200,   184,
   185,   195,   736,   197,   191,   192,  1452,  1453,  1454,  1455,
   606,     8,   199,  1459,   195,   200,   197,   174,   175,   176,
   177,   178,    42,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    44,   767,   768,   769,    38,   194,   472,    41,
    42,   475,    44,   195,     6,   202,   479,   481,   184,   185,
   186,   187,   188,   174,   175,   176,   177,   178,   194,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   502,     8,
   195,   201,   197,   194,   200,    42,   202,   511,   512,   195,
   514,   197,   516,   517,   170,   171,   172,   173,   201,   523,
   191,   192,   532,   195,     4,   197,   197,     6,   199,   533,
   534,   191,   192,    56,    57,   191,   192,   197,   542,   199,
     6,   195,   708,   197,   195,   195,  1562,  1563,   195,   553,
  1566,   180,   181,   182,   183,   184,   185,   186,   187,   188,
   564,     6,   566,   567,    42,   194,   186,   187,   188,     6,
     7,  1266,   707,     4,   194,   177,   178,   712,   180,   181,
   182,   183,   184,   185,   186,   187,   188,   195,   892,   197,
     3,   195,   194,   197,   195,   866,   867,     5,   191,   192,
   195,   736,   197,   606,   197,     6,   199,   174,   175,   176,
   177,   178,   195,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   191,   192,     6,   195,     6,   194,   197,   196,
   199,   195,   767,   768,   769,    59,    60,    61,    62,     5,
    64,  1657,   174,   175,   176,   177,   178,   195,   180,   181,
   182,   183,   184,   185,   186,   187,   188,   121,   122,   123,
   124,   125,   194,   201,   195,   174,   175,   176,   177,   178,
   195,   180,   181,   182,   183,   184,   185,   186,   187,   188,
   684,   685,   195,   195,   197,   194,   201,   195,   195,   197,
   197,   195,   195,   197,   698,   699,   700,   701,   702,   703,
   704,   201,   195,   707,   197,     6,   195,   195,   712,   197,
   195,   715,   197,   195,   195,   197,   197,   727,   195,   195,
   724,   197,     4,   195,  1059,   197,   200,   200,   202,   202,
  1746,   200,   736,   202,   738,   200,   195,   202,   200,   200,
   202,   202,   200,   200,   202,   202,   200,   195,   202,   818,
   200,   197,   202,   763,   764,   765,   200,   892,   202,   200,
   200,   202,   202,   767,   768,   769,   201,   195,   772,   773,
   197,   200,   776,   202,   200,     6,   202,     6,   200,   789,
   202,   201,   201,   787,   788,   200,   108,   202,   798,   199,
   201,  1807,   174,   175,   176,   177,   178,     6,   180,   181,
   182,   183,   184,   185,   186,   187,   188,   200,   200,   202,
   202,   200,   194,   202,   200,   200,   202,   202,   195,   823,
   824,   825,   826,   827,   828,   829,   830,   831,   832,   833,
   834,   835,   836,   837,   838,   839,   840,   841,   842,   843,
   844,   845,   846,   847,   848,   200,   200,   202,   202,     5,
   200,  1017,   202,   200,   200,   202,   202,   195,   200,   862,
   202,   200,   195,   202,   867,   200,   200,   202,   202,   195,
   200,   875,   202,   174,   175,   176,   177,   178,   195,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   892,  1055,
   894,   195,   896,   194,   200,   200,   202,   202,   200,   195,
   202,   200,   195,   202,   195,   195,   195,   911,   912,   913,
   195,   195,   195,   200,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   937,   195,   195,   195,   932,   933,
   934,   195,   195,   195,   195,   200,   196,     4,   194,     7,
   199,     7,  1277,   174,   175,   176,   177,   178,   201,   180,
   181,   182,   183,   184,   185,   186,   187,   188,     7,     7,
   196,     7,     7,   194,   103,   105,   201,   166,     5,     3,
     4,   154,   975,     5,  1990,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     5,
     5,     5,     5,     5,    38,     5,   200,     6,     5,     5,
     5,     5,     5,     5,  1018,     5,     5,     5,     5,     5,
  1030,     5,     5,     5,     5,    59,    60,    61,    62,    63,
    64,     5,     5,     5,     5,     3,     5,   196,     5,     5,
  1044,  1045,  1046,     6,  1113,     6,     4,     6,   199,   202,
  1060,  1055,  1062,     7,  1064,     7,     7,     7,     7,     7,
     7,   202,     7,   201,   201,  1069,  1070,     7,   195,  1082,
     7,   199,   167,  1059,   200,  1059,   200,  1081,   200,   200,
  1084,   200,   200,   200,   200,     6,   200,   200,   200,   200,
  1094,   200,   200,   200,   200,   200,   200,  1101,  1102,  1103,
   200,   200,   200,   200,  1108,     5,   200,   200,  1112,   200,
   200,   200,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,
  1124,  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,
  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,   200,   200,
   200,   196,   200,   195,   195,   195,     6,     4,   195,     7,
   184,   185,   195,  1157,   195,   195,   190,   195,     6,   195,
   195,   195,   195,     6,   195,   195,   195,   201,   195,   195,
   195,  1175,   195,   195,   195,   174,   175,   176,   177,   178,
   195,   180,   181,   182,   183,   184,   185,   186,   187,   188,
   198,  1204,     3,     4,  1198,   194,  1200,   195,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,     6,   195,     6,     4,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,   195,   174,   175,   176,   177,   178,   197,   180,
   181,   182,   183,   184,   185,   186,   187,   188,  1272,   195,
  1280,   195,  1282,   194,  1284,     7,  1280,     7,  1282,   201,
  1284,     7,  1286,  1287,     7,     7,     7,     7,     7,  1293,
     7,  1277,     7,  1277,     7,     7,     7,     6,  1302,     6,
     4,     7,     7,     3,   163,     3,  1310,     3,   186,     3,
     3,  1315,     3,     3,  1318,     3,  1320,  1321,  1322,  1323,
  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,  1342,  1343,
  1344,  1345,     3,     3,     3,  1355,     3,     3,  1352,     3,
  1354,  1355,  1356,     5,     5,     3,     3,     6,     4,   196,
   196,     6,   195,     7,   199,  1378,     6,     6,     6,     6,
     6,   201,     6,   184,   185,     6,   104,   201,   200,   190,
   200,   196,   200,   196,   195,     6,   200,   198,   196,   199,
   201,   200,   196,   200,   200,   196,     6,   200,   200,   196,
   200,   200,   200,   184,   185,   200,   200,   200,   200,   190,
   200,   200,   196,   200,   195,   200,     4,   198,     7,     6,
   201,     6,     6,   198,     6,     6,  1592,     6,     6,     6,
  1434,     6,     6,     6,     6,     6,  1440,     6,  1451,  1443,
     6,     6,     6,     6,     6,     3,   104,     6,     3,     6,
   186,     7,     6,     6,     6,     3,     6,     3,   199,     6,
     3,     6,     6,  1467,  1468,  1469,  1470,  1471,  1472,  1473,
  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,
  1484,  1485,  1486,  1487,     3,  1489,     3,     3,     6,     4,
   198,   201,     6,   174,   175,   176,   177,   178,  1511,   180,
   181,   182,   183,   184,   185,   186,   187,   188,     6,     6,
     6,   101,   201,   194,   196,   202,     6,   201,   201,     3,
     4,   202,  1688,   201,  1690,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   163,
     6,     6,     3,     6,     6,   106,     3,   200,   200,   200,
     6,   196,   104,   196,  1568,  1569,  1570,  1571,  1572,  1573,
  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,
  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,   200,   200,
   196,   200,   196,   196,     6,  1608,   196,     6,   200,   200,
   196,     6,     6,  1769,     6,     6,     3,     6,     6,     5,
     5,   202,     6,     6,     6,   201,   196,     6,   201,   151,
   174,   175,   176,   177,   178,   157,   180,   181,   182,   183,
   184,   185,   186,   187,   188,   202,   196,     6,     6,   200,
   194,     6,     6,  1656,     6,     6,     6,   196,   180,     6,
     6,  1655,     6,     6,   186,   187,     6,  1661,     5,  1663,
     8,  1665,   200,  1667,  1668,  1669,  1670,  1671,  1672,  1673,
  1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
  1684,  1685,  1686,  1687,   174,   175,   176,   177,   178,  1702,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   200,
   184,   185,     6,     5,   194,   200,   190,   200,   200,   200,
   196,   195,   201,   200,   198,     8,   201,   201,   174,   175,
   176,   177,   178,   201,   180,   181,   182,   183,   184,   185,
   186,   187,   188,   200,   202,   200,   200,   196,   194,  1743,
  1744,   201,   200,   200,     6,     6,   200,  1751,  1752,  1753,
  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,
  1764,  1765,  1766,  1767,  1768,   174,   175,   176,   177,   178,
   201,   180,   181,   182,   183,   184,   185,   186,   187,   188,
   174,   175,   176,   177,   178,   194,   180,   181,   182,   183,
   184,   185,   186,   187,   188,   201,   101,     6,     8,  1803,
   194,   201,     6,     6,  1808,  1809,  1810,  1811,  1812,  1813,
  1814,  1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,
  1824,  1825,  1826,  1827,  1828,   163,   174,   175,   176,   177,
   178,     6,   180,   181,   182,   183,   184,   185,   186,   187,
   188,     5,     8,     5,   202,   200,   194,     6,     6,   201,
   201,   196,   201,     6,   196,   201,  1860,   200,  1862,     6,
  1864,   201,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
   202,   174,   175,   176,   177,   178,   101,   180,   181,   182,
   183,   184,   185,   186,   187,   188,     6,     6,     6,     6,
     6,   194,     6,     6,   202,   201,   200,     6,   200,     6,
     6,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
  1924,  1925,  1926,  1927,  1928,  1929,     6,   168,     6,   169,
   200,   200,     6,   201,   201,   201,   200,   196,     6,     6,
     6,     6,   474,     6,   200,   200,  1950,  1951,  1952,  1953,
  1954,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,
  1964,  1965,  1966,  1967,   174,   175,   176,   177,   178,   201,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   201,
   201,   200,     6,     6,   194,     6,     6,  1991,   196,  1993,
   201,  1995,     6,  1997,  1998,  1999,  2000,  2001,  2002,  2003,
  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,   174,   175,
   176,   177,   178,   201,   180,   181,   182,   183,   184,   185,
   186,   187,   188,   201,   201,   201,     6,   201,   194,     6,
     6,     6,     6,   201,   201,     6,   201,  2041,  2042,  2043,
  2044,  2045,  2046,  2047,  2048,  2049,     6,     6,     6,   201,
   201,   201,     6,     6,     6,   201,   201,   201,     6,     6,
     0,     0,  2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,
  2074,  2075,  2076,  2077,  2078,  2079,  2080,    38,    39,    40,
    41,    42,    43,    44,    45,   608,    47,     7,    49,    50,
    51,     7,    53,    54,  1021,  1075,    -1,    -1,  2102,    -1,
  2104,    -1,  2106,    -1,  2108,    -1,  2110,    -1,  2112,    70,
  2114,  2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,   100,
  2144,  2145,  2146,  2147,  2148,  2149,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,  2162,  2163,
  2164,  2165,  2166,  2167,  2168,  2169,  2170,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2183,
  2184,  2185,  2186,  2187,  2188,  2189,    -1,  2191,    -1,  2193,
    -1,    -1,    -1,    -1,    -1,    -1,   728,   729,    -1,   731,
    -1,   733,   734,  2207,  2208,  2209,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  2219,  2220,  2221,  2222,  2223,
  2224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  2234,  2235,  2236,  2237,    -1,  2239,    -1,  2241,    -1,    -1,
    -1,   202,   774,   775,    -1,    -1,   778,    -1,  2252,  2253,
  2254,    -1,    -1,    -1,  2258,  2259,  2260,    -1,    -1,    -1,
  2264,  2265,  2266,   795,   796,    -1,    -1,    -1,    -1,   801,
   802,    -1,  2276,  2277,  2278,    -1,   808,    -1,   810,    -1,
    -1,  2285,    -1,  2287,    -1,  2289,    -1,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
    -1,    -1,   884,    -1,   886,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   897,   898,   899,    -1,    -1,
    -1,   903,   904,   905,   906,   907,   908,   909,    -1,     3,
     4,     5,    -1,     7,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    34,    35,    36,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
     3,     4,    -1,   194,    -1,   196,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,   184,   185,
    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,
    -1,    -1,    -1,    -1,  1016,   201,    59,    60,    61,    62,
    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,
     3,     4,     5,    -1,    -1,   201,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    34,    35,    36,    -1,  1077,   170,   171,   172,   173,
    -1,    -1,    -1,  1085,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,    -1,    -1,    -1,    -1,   190,   191,   192,    -1,
    -1,   195,  1104,   197,    -1,   199,    -1,    -1,    -1,    -1,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,   184,   185,    -1,    -1,    -1,    -1,   190,     3,     4,
    -1,    -1,   195,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    -1,    -1,     0,     1,    -1,     3,
     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   184,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,
    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    33,
    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    47,    48,    49,    50,    51,    52,    53,
    54,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63,
    64,    -1,    66,    67,    68,    69,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1290,    -1,
  1292,   184,   185,    -1,  1296,    -1,    -1,   190,    -1,    -1,
    -1,    -1,   195,    -1,    98,    99,   100,    -1,   202,    -1,
  1312,   105,    -1,   107,    -1,   109,   110,   111,   112,   113,
   114,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,   184,
   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,
   195,    -1,   136,   137,   138,   139,   140,   141,   142,   143,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    47,
    -1,    49,    50,    51,    -1,    53,    54,   161,   162,    -1,
   164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    -1,    -1,    -1,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    47,    -1,    49,    50,
    51,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1429,    -1,   117,
    -1,    -1,    -1,    -1,  1436,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1447,  1448,    98,    99,   100,
    -1,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,   117,    -1,    -1,    -1,
    -1,   194,    -1,    -1,    -1,    -1,    41,   200,    -1,   202,
    -1,    -1,    -1,    -1,   174,   175,   176,   177,   178,  1491,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
   200,    -1,   202,    -1,   202,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   202,  1554,   118,   119,   120,    -1,  1559,    -1,    -1,
    -1,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,    -1,
   155,   156,   157,   158,   159,   160,    -1,    -1,    -1,    -1,
    33,    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
    53,    54,    -1,    -1,    -1,    58,    59,    60,    61,    62,
    63,    64,    -1,    66,    67,    68,    69,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   202,  1648,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1658,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    98,    99,   100,    -1,    -1,
    -1,    -1,   105,    -1,   107,    -1,   109,   110,   111,   112,
   113,   114,   115,    -1,   117,    -1,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    47,    -1,    49,    50,    51,
    -1,    53,    54,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    70,    -1,
    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,   200,
    -1,   202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1747,    98,    99,   100,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,   117,    -1,    -1,    -1,   194,
    -1,    -1,   174,   175,   176,   177,   178,   202,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   202,    -1,    -1,    -1,  1806,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   202,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,  1858,   174,   175,   176,
   177,   178,   202,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
   174,   175,   176,   177,   178,   202,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   202,  1911,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,
    -1,    -1,   174,   175,   176,   177,   178,  1949,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,    -1,   174,   175,   176,   177,   178,
   202,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   174,   175,
   176,   177,   178,   202,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
    -1,   174,   175,   176,   177,   178,   202,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,    -1,   174,   175,   176,   177,   178,   202,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,   174,   175,   176,
   177,   178,   202,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
   174,   175,   176,   177,   178,   202,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,    -1,   174,   175,   176,   177,   178,   202,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,    -1,   174,   175,   176,   177,
   178,   202,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   174,
   175,   176,   177,   178,   202,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,   174,   175,   176,   177,   178,   202,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,    -1,   174,   175,   176,   177,   178,
   202,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,    -1,    -1,
    -1,   200,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,
   200,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,   177,
   178,   200,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,   176,
   177,   178,   200,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,   175,
   176,   177,   178,   200,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,   174,
   175,   176,   177,   178,   200,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
   174,   175,   176,   177,   178,   200,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,   174,   175,   176,   177,   178,   200,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,   174,   175,   176,   177,   178,   200,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,   174,   175,   176,   177,   178,   200,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,   174,   175,   176,   177,   178,   200,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   198,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,    -1,    -1,   198,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,
   177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,
   174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
   194,    -1,   196,   174,   175,   176,   177,   178,    -1,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    -1,    -1,
    -1,    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,
   178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,
   175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,
    -1,   196,   174,   175,   176,   177,   178,    -1,   180,   181,
   182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,   194,    -1,   196,   174,   175,   176,   177,   178,
    -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    -1,    -1,    -1,    -1,    -1,   194,    -1,   196,   174,   175,
   176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    -1,    -1,    -1,    -1,    -1,   194,    -1,
   196,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,   194,    -1,   196,   174,   175,   176,   177,   178,    -1,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
    -1,    -1,    -1,    -1,   194
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 171 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 177 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 178 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 183 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1, MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 197 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 204 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 219 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 220 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 226 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 231 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 242 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 245 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 249 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 255 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 261 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 268 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 274 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 278 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 28:
#line 282 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 29:
#line 289 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 30:
#line 293 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 31:
#line 298 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 302 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 306 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 310 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 314 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 318 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 322 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 326 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 332 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 335 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 338 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 342 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 346 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 350 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 354 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 359 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 362 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 366 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 369 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 373 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 376 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 387 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 390 "Gmsh.y"
{
    yymsg(INFO, "Gmsh file format read");
  ;
    break;}
case 55:
#line 396 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 413 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 69:
#line 417 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 70:
#line 433 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 71:
#line 437 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 72:
#line 444 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 99:
#line 477 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 484 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 489 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 103:
#line 496 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 503 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 106:
#line 508 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 107:
#line 515 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 522 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 527 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 111:
#line 534 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 542 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 548 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 115:
#line 555 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 563 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 569 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 119:
#line 576 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 584 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 590 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 123:
#line 597 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 606 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 615 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 127:
#line 622 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 631 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 640 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 131:
#line 647 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 132:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 656 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 134:
#line 665 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 135:
#line 672 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 136:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 682 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 138:
#line 691 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 139:
#line 698 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 140:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 708 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 142:
#line 717 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 143:
#line 724 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 144:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 734 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 146:
#line 743 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 147:
#line 750 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 148:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 760 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 150:
#line 769 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 151:
#line 776 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 152:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 786 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 154:
#line 795 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 155:
#line 802 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 156:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 812 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 158:
#line 821 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 159:
#line 828 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 160:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 842 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 162:
#line 857 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 163:
#line 864 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 164:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 878 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 166:
#line 893 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 167:
#line 900 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 168:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 914 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 170:
#line 929 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 171:
#line 936 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 172:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 948 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 174:
#line 960 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 175:
#line 967 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 176:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 979 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 178:
#line 991 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 179:
#line 998 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 180:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1010 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 182:
#line 1022 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 183:
#line 1029 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 184:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1040 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 186:
#line 1052 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 187:
#line 1059 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 188:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1070 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 190:
#line 1082 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 191:
#line 1089 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 192:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1100 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 194:
#line 1112 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 195:
#line 1119 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 196:
#line 1124 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1132 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 198:
#line 1139 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 199:
#line 1146 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1151 "Gmsh.y"
{ 
      for(i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1159 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 202:
#line 1166 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 203:
#line 1175 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 204:
#line 1176 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 205:
#line 1177 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 206:
#line 1178 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 207:
#line 1179 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 208:
#line 1183 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 209:
#line 1184 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 210:
#line 1192 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 211:
#line 1219 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 212:
#line 1253 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l, i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 213:
#line 1300 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1315 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 215:
#line 1324 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 216:
#line 1339 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 217:
#line 1351 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1365 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 219:
#line 1388 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 220:
#line 1412 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 221:
#line 1424 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1438 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 223:
#line 1450 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1464 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 1484 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1506 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
	}
      }
    ;
    break;}
case 227:
#line 1518 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
	}
      }
    ;
    break;}
case 228:
#line 1538 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d, yyvsp[-1].v[0], yyvsp[-1].v[1], yyvsp[-1].v[2], yyvsp[-1].v[3], yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 229:
#line 1545 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_POINT, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1551 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        v = FindPoint(ip, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 231:
#line 1570 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 232:
#line 1584 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_LINE, 1, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 233:
#line 1590 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_SPLN, 3, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1596 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
      	List_Read(yyvsp[-9].l, i, &p);
        ip = (int)p;
        c = FindCurve(ip, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
    ;
    break;}
case 235:
#line 1615 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_CIRC, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 236:
#line 1621 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_ELLI, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1627 "Gmsh.y"
{
      List_T *temp;
      int i, j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l), 1, sizeof(int));
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
      	List_Read(yyvsp[-3].l, i, &d);
        j = (int)d;
        List_Add(temp, &j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 238:
#line 1644 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d, MSH_SEGM_PARAMETRIC, 2, NULL, NULL, -1, -1, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].c, yyvsp[-4].c, yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 239:
#line 1650 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_LINE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 240:
#line 1656 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1662 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BSPLN, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 242:
#line 1673 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d, MSH_SEGM_BEZIER, 2, yyvsp[-1].l, NULL, -1, -1, 0., 1., NULL, NULL, NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1684 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l), 1, sizeof(int));
	for(i = 0; i < List_Nbr(yyvsp[-5].l); i++) {
	  List_Read(yyvsp[-5].l, i, &d);
	  j = (int)d;
	  List_Add(Temp, &j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d, MSH_SEGM_NURBS, (int)yyvsp[-1].d, Temp, yyvsp[-3].l, -1, -1, 0., 1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 244:
#line 1709 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 245:
#line 1715 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d, MSH_SURF_PLAN, 0, 0, 0, 0, 0, NULL, yyvsp[-2].l, NULL);
	s = FindSurface((int)yyvsp[-8].d, THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 246:
#line 1734 "Gmsh.y"
{
      List_Read(yyvsp[-1].l, 0, &d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i, THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d, yyval.s.Type, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 247:
#line 1756 "Gmsh.y"
{
    AddTriangulationToSurface ((int) yyvsp[-10].d, (int) yyvsp[-6].d, (int) yyvsp[-4].d, yyvsp[-2].l, yyvsp[-1].l);
    yyval.s.Num = (int)yyvsp[-10].d;
  ;
    break;}
case 248:
#line 1764 "Gmsh.y"
{
      CreateNurbsSurface ((int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 249:
#line 1772 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 250:
#line 1776 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_SURFACE, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 251:
#line 1782 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_SURF_LOOP, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 252:
#line 1791 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 253:
#line 1797 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 254:
#line 1803 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d, MSH_PHYSICAL_VOLUME, 0, 0, 0, 0, 0, NULL, yyvsp[-1].l, NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 255:
#line 1814 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 256:
#line 1819 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1824 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1829 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 259:
#line 1836 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 260:
#line 1837 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1838 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 262:
#line 1843 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 263:
#line 1847 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 264:
#line 1851 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 265:
#line 1865 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 266:
#line 1879 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 267:
#line 1898 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 268:
#line 1908 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 269:
#line 1919 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
    ;
    break;}
case 270:
#line 1926 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 271:
#line 1930 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 272:
#line 1939 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read (yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
    ;
    break;}
case 273:
#line 1951 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	ParseFile(tmpstring, 0, 0);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblemWithBoundingBox(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Open")){
	FixRelativePath(yyvsp[-1].c, tmpstring);
	OpenProblem(tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 274:
#line 1990 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(0, v, tmpstring);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 275:
#line 2003 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	//Maillage_Dimension_0(THEM);
	//mai3d(THEM, (int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 276:
#line 2020 "Gmsh.y"
{
    if(CTX.default_plugins)
      GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0); 
   ;
    break;}
case 277:
#line 2025 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 278:
#line 2029 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 279:
#line 2051 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 280:
#line 2061 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 281:
#line 2071 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 282:
#line 2092 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 283:
#line 2113 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 284:
#line 2134 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 285:
#line 2140 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 286:
#line 2145 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 287:
#line 2150 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 288:
#line 2154 "Gmsh.y"
{
    ;
    break;}
case 289:
#line 2165 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 290:
#line 2175 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 291:
#line 2185 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 292:
#line 2195 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 293:
#line 2200 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 294:
#line 2210 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 295:
#line 2215 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 296:
#line 2225 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 297:
#line 2230 "Gmsh.y"
{
      Curve *pc, *prc;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 298:
#line 2242 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 299:
#line 2259 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 300:
#line 2276 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 301:
#line 2293 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 302:
#line 2298 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 303:
#line 2315 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 304:
#line 2320 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 305:
#line 2337 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 306:
#line 2342 "Gmsh.y"
{
      Surface *ps;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 307:
#line 2362 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 308:
#line 2378 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 309:
#line 2394 "Gmsh.y"
{
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 310:
#line 2410 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 311:
#line 2415 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 312:
#line 2432 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 313:
#line 2438 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 314:
#line 2455 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 315:
#line 2461 "Gmsh.y"
{
      int vol = NEWREG();
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    vol, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 316:
#line 2481 "Gmsh.y"
{
    ;
    break;}
case 317:
#line 2484 "Gmsh.y"
{
    ;
    break;}
case 318:
#line 2490 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 319:
#line 2516 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 320:
#line 2540 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 321:
#line 2549 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 322:
#line 2567 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 323:
#line 2585 "Gmsh.y"
{
      Curve *c;
      for(i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	List_Read(yyvsp[-6].l, i, &d);
	j = (int)fabs(d);
        c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 324:
#line 2603 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 325:
#line 2625 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 326:
#line 2646 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i = 0; i < k; i++){
	    List_Read(yyvsp[-1].l, i, &d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 327:
#line 2667 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	List_Read(yyvsp[-3].l, i, &d);
	j = (int)d;
	s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 328:
#line 2681 "Gmsh.y"
{
      Surface *s;
      for(i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	List_Read(yyvsp[-1].l, i, &d);
	j = (int)d;
        s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 329:
#line 2701 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 330:
#line 2705 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 331:
#line 2714 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 332:
#line 2715 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 333:
#line 2716 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 334:
#line 2717 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 335:
#line 2718 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 336:
#line 2722 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 337:
#line 2723 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 338:
#line 2724 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 339:
#line 2725 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 340:
#line 2726 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 341:
#line 2727 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 342:
#line 2728 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 343:
#line 2729 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 344:
#line 2731 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 345:
#line 2737 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 346:
#line 2738 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d) ;  ;
    break;}
case 347:
#line 2739 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 348:
#line 2740 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 349:
#line 2741 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 350:
#line 2742 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 351:
#line 2743 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 352:
#line 2744 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 353:
#line 2745 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 354:
#line 2746 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 355:
#line 2747 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 356:
#line 2748 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 357:
#line 2749 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 358:
#line 2750 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 359:
#line 2751 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 360:
#line 2752 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 361:
#line 2753 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 362:
#line 2754 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 363:
#line 2755 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 364:
#line 2756 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 365:
#line 2757 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 366:
#line 2758 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 367:
#line 2759 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 368:
#line 2760 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 369:
#line 2761 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 370:
#line 2762 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 371:
#line 2763 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 372:
#line 2764 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 373:
#line 2765 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 374:
#line 2766 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 375:
#line 2767 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 376:
#line 2768 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 377:
#line 2770 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 378:
#line 2771 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 379:
#line 2772 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 380:
#line 2773 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 381:
#line 2774 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 382:
#line 2775 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 383:
#line 2776 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 384:
#line 2777 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 385:
#line 2778 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 386:
#line 2779 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 387:
#line 2780 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 388:
#line 2781 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 389:
#line 2782 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 390:
#line 2783 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 391:
#line 2784 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 392:
#line 2785 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 393:
#line 2786 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 394:
#line 2787 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 395:
#line 2788 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d);  ;
    break;}
case 396:
#line 2789 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 397:
#line 2790 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 398:
#line 2799 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 399:
#line 2800 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 400:
#line 2801 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 401:
#line 2802 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 402:
#line 2807 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 403:
#line 2818 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 404:
#line 2835 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 405:
#line 2846 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 406:
#line 2865 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 407:
#line 2881 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 408:
#line 2897 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 409:
#line 2913 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 410:
#line 2931 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 411:
#line 2935 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 412:
#line 2939 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 413:
#line 2943 "Gmsh.y"
{ 
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 414:
#line 2947 "Gmsh.y"
{
      for(i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 415:
#line 2954 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 416:
#line 2958 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 417:
#line 2962 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 418:
#line 2966 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 419:
#line 2973 "Gmsh.y"
{
    ;
    break;}
case 420:
#line 2976 "Gmsh.y"
{
    ;
    break;}
case 421:
#line 2982 "Gmsh.y"
{
    ;
    break;}
case 422:
#line 2985 "Gmsh.y"
{
    ;
    break;}
case 423:
#line 2991 "Gmsh.y"
{
    ;
    break;}
case 424:
#line 2994 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 425:
#line 2998 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 426:
#line 3005 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 427:
#line 3010 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 428:
#line 3018 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 429:
#line 3023 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 430:
#line 3027 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 431:
#line 3031 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 432:
#line 3042 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      for(d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 433:
#line 3048 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 434:
#line 3059 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double)) ;      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d) ;
	double d = 0.0 ;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X) ;
	List_Add(yyval.l, &v->Pos.Y) ;
	List_Add(yyval.l, &v->Pos.Z) ;
      }
    ;
    break;}
case 435:
#line 3079 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 436:
#line 3088 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 437:
#line 3097 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double)) ;
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
    ;
    break;}
case 438:
#line 3108 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 439:
#line 3122 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(pSymbol->val); i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 440:
#line 3138 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 441:
#line 3158 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 442:
#line 3183 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 443:
#line 3188 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 444:
#line 3192 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 445:
#line 3196 "Gmsh.y"
{
      for(i = 0; i < List_Nbr(yyvsp[0].l); i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 446:
#line 3208 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 447:
#line 3212 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 448:
#line 3223 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 449:
#line 3228 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0) ;
	}
      }
    ;
    break;}
case 450:
#line 3247 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 451:
#line 3251 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 452:
#line 3265 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 453:
#line 3270 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 454:
#line 3277 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 455:
#line 3281 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 456:
#line 3289 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 457:
#line 3302 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 458:
#line 3306 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 459:
#line 3324 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 460:
#line 3338 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3353 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(j < (int)strlen(format) && format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j] != '%' && j < (int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void FixRelativePath(char *in, char *out){
  if(in[0] == '/' || in[0] == '\\' || (strlen(in)>2 && in[1] == ':')){
    // do nothing: 'in' is an absolute path
    strcpy(out, in);
  }
  else{
    // append 'in' to the path of the parent file
    strcpy(out, yyname);
    int i = strlen(out)-1 ;
    while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
    out[i+1] = '\0';
    strcat(out, in);
  }
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


