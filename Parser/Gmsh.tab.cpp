
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tStrRelative	291
#define	tBoundingBox	292
#define	tDraw	293
#define	tToday	294
#define	tPoint	295
#define	tCircle	296
#define	tEllipse	297
#define	tLine	298
#define	tSurface	299
#define	tSpline	300
#define	tVolume	301
#define	tCharacteristic	302
#define	tLength	303
#define	tParametric	304
#define	tElliptic	305
#define	tPlane	306
#define	tRuled	307
#define	tTransfinite	308
#define	tComplex	309
#define	tPhysical	310
#define	tUsing	311
#define	tBump	312
#define	tProgression	313
#define	tPlugin	314
#define	tRotate	315
#define	tTranslate	316
#define	tSymmetry	317
#define	tDilate	318
#define	tExtrude	319
#define	tDuplicata	320
#define	tLoop	321
#define	tRecombine	322
#define	tDelete	323
#define	tCoherence	324
#define	tIntersect	325
#define	tAttractor	326
#define	tLayers	327
#define	tAlias	328
#define	tAliasWithOptions	329
#define	tText2D	330
#define	tText3D	331
#define	tInterpolationScheme	332
#define	tTime	333
#define	tCombine	334
#define	tBSpline	335
#define	tBezier	336
#define	tNurbs	337
#define	tOrder	338
#define	tWith	339
#define	tBounds	340
#define	tKnots	341
#define	tColor	342
#define	tColorTable	343
#define	tFor	344
#define	tIn	345
#define	tEndFor	346
#define	tIf	347
#define	tEndIf	348
#define	tExit	349
#define	tReturn	350
#define	tCall	351
#define	tFunction	352
#define	tTrimmed	353
#define	tShow	354
#define	tHide	355
#define	tGetValue	356
#define	tGMSH_MAJOR_VERSION	357
#define	tGMSH_MINOR_VERSION	358
#define	tGMSH_PATCH_VERSION	359
#define	tB_SPLINE_SURFACE_WITH_KNOTS	360
#define	tB_SPLINE_CURVE_WITH_KNOTS	361
#define	tCARTESIAN_POINT	362
#define	tTRUE	363
#define	tFALSE	364
#define	tUNSPECIFIED	365
#define	tU	366
#define	tV	367
#define	tEDGE_CURVE	368
#define	tVERTEX_POINT	369
#define	tORIENTED_EDGE	370
#define	tPLANE	371
#define	tFACE_OUTER_BOUND	372
#define	tEDGE_LOOP	373
#define	tADVANCED_FACE	374
#define	tVECTOR	375
#define	tDIRECTION	376
#define	tAXIS2_PLACEMENT_3D	377
#define	tISO	378
#define	tENDISO	379
#define	tENDSEC	380
#define	tDATA	381
#define	tHEADER	382
#define	tFILE_DESCRIPTION	383
#define	tFILE_SCHEMA	384
#define	tFILE_NAME	385
#define	tMANIFOLD_SOLID_BREP	386
#define	tCLOSED_SHELL	387
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	388
#define	tFACE_BOUND	389
#define	tCYLINDRICAL_SURFACE	390
#define	tCONICAL_SURFACE	391
#define	tCIRCLE	392
#define	tTRIMMED_CURVE	393
#define	tGEOMETRIC_SET	394
#define	tCOMPOSITE_CURVE_SEGMENT	395
#define	tCONTINUOUS	396
#define	tCOMPOSITE_CURVE	397
#define	tTOROIDAL_SURFACE	398
#define	tPRODUCT_DEFINITION	399
#define	tPRODUCT_DEFINITION_SHAPE	400
#define	tSHAPE_DEFINITION_REPRESENTATION	401
#define	tELLIPSE	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.239 2005-06-13 04:17:55 geuzaine Exp $
//
// Copyright (C) 1997-2005 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "Visibility.h"
#include "GmshVersion.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static ExtrudeParams extr;

static Post_View *View;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewNumNodes, ViewNumComp, ViewNumListTmp;
static int ViewCoordIdx, ViewElementIdx;
static int ViewErrorFlags[VIEW_NB_ELEMENT_TYPES];

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);
int CheckViewErrorFlags(Post_View *v);

#line 79 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1504
#define	YYFLAG		-32768
#define	YYNTBASE	183

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 251)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,   179,     2,   167,     2,     2,   174,
   175,   165,   163,   180,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   181,     2,   182,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    11,    13,    15,    17,    20,
    23,    26,    29,    32,    40,    46,    64,    74,    98,   130,
   146,   158,   170,   186,   196,   210,   220,   232,   246,   256,
   266,   278,   288,   300,   310,   322,   336,   350,   362,   376,
   394,   404,   416,   428,   442,   454,   464,   465,   468,   470,
   472,   474,   476,   478,   480,   482,   484,   486,   488,   490,
   492,   494,   496,   502,   510,   517,   526,   527,   530,   533,
   536,   539,   542,   544,   548,   550,   554,   555,   556,   567,
   569,   573,   574,   588,   590,   594,   595,   611,   620,   621,
   628,   630,   632,   634,   636,   638,   640,   642,   647,   655,
   665,   672,   676,   683,   690,   700,   707,   717,   723,   732,
   741,   753,   760,   770,   780,   790,   798,   807,   820,   827,
   835,   843,   851,   861,   869,   879,   897,   905,   913,   925,
   934,   947,   956,   965,   974,   987,  1010,  1031,  1040,  1049,
  1058,  1066,  1075,  1081,  1093,  1099,  1109,  1111,  1113,  1115,
  1116,  1119,  1126,  1133,  1140,  1147,  1152,  1159,  1166,  1173,
  1178,  1185,  1189,  1194,  1200,  1204,  1208,  1213,  1218,  1222,
  1230,  1234,  1242,  1246,  1249,  1252,  1268,  1271,  1278,  1287,
  1296,  1307,  1309,  1312,  1314,  1318,  1323,  1325,  1334,  1347,
  1362,  1363,  1376,  1377,  1394,  1395,  1414,  1423,  1436,  1451,
  1452,  1465,  1466,  1483,  1484,  1503,  1512,  1525,  1540,  1541,
  1554,  1555,  1572,  1573,  1592,  1594,  1597,  1607,  1615,  1618,
  1625,  1635,  1645,  1654,  1663,  1672,  1679,  1684,  1687,  1690,
  1692,  1694,  1696,  1698,  1700,  1702,  1706,  1709,  1712,  1715,
  1719,  1723,  1727,  1731,  1735,  1739,  1743,  1747,  1751,  1755,
  1759,  1763,  1767,  1771,  1777,  1782,  1787,  1792,  1797,  1802,
  1807,  1812,  1817,  1822,  1827,  1834,  1839,  1844,  1849,  1854,
  1859,  1864,  1871,  1878,  1885,  1890,  1895,  1900,  1905,  1910,
  1915,  1920,  1925,  1930,  1935,  1940,  1947,  1952,  1957,  1962,
  1967,  1972,  1977,  1984,  1991,  1998,  2003,  2005,  2007,  2009,
  2011,  2013,  2015,  2017,  2019,  2024,  2029,  2032,  2038,  2042,
  2049,  2054,  2062,  2069,  2071,  2074,  2077,  2081,  2085,  2097,
  2107,  2115,  2123,  2124,  2128,  2130,  2134,  2135,  2139,  2143,
  2145,  2149,  2151,  2153,  2157,  2162,  2166,  2172,  2177,  2179,
  2181,  2183,  2187,  2192,  2199,  2207,  2209,  2211,  2215,  2219,
  2229,  2237,  2239,  2245,  2249,  2256,  2258,  2262,  2264,  2266,
  2273,  2278,  2283,  2288,  2295,  2302
};

static const short yyrhs[] = {   184,
     0,   189,     0,     1,     6,     0,     0,   184,   185,     0,
   186,     0,   188,     0,   187,     0,   124,     6,     0,   125,
     6,     0,   127,     6,     0,   126,     6,     0,   128,     6,
     0,   129,   174,   240,   180,     5,   175,     6,     0,   130,
   174,   240,   175,     6,     0,   131,   174,     5,   180,     5,
   180,   240,   180,   240,   180,     5,   180,     5,   180,     5,
   175,     6,     0,     3,     7,   108,   174,     5,   180,   238,
   175,     6,     0,     3,     7,   107,   174,     5,   180,   236,
   180,   244,   180,   235,   180,   235,   180,   235,   180,   244,
   180,   244,   180,   235,   175,     6,     0,     3,     7,   106,
   174,     5,   180,   236,   180,   236,   180,   242,   180,   235,
   180,   235,   180,   235,   180,   235,   180,   244,   180,   244,
   180,   244,   180,   244,   180,   235,   175,     6,     0,     3,
     7,   114,   174,     5,   180,     3,   180,     3,   180,     3,
   180,   235,   175,     6,     0,     3,     7,   118,   174,     5,
   180,     3,   180,   235,   175,     6,     0,     3,     7,   135,
   174,     5,   180,     3,   180,   235,   175,     6,     0,     3,
     7,   116,   174,     5,   180,   165,   180,   165,   180,   236,
   180,   235,   175,     6,     0,     3,     7,   119,   174,     5,
   180,   244,   175,     6,     0,     3,     7,   120,   174,     5,
   180,   244,   180,     3,   180,   235,   175,     6,     0,     3,
     7,   115,   174,     5,   180,     3,   175,     6,     0,     3,
     7,   121,   174,     5,   180,     3,   180,   236,   175,     6,
     0,     3,     7,   123,   174,     5,   180,     3,   180,     3,
   180,     3,   175,     6,     0,     3,     7,   122,   174,     5,
   180,   238,   175,     6,     0,     3,     7,   117,   174,     5,
   180,     3,   175,     6,     0,     3,     7,    44,   174,     5,
   180,     3,   180,     3,   175,     6,     0,     3,     7,   133,
   174,     5,   180,   244,   175,     6,     0,     3,     7,   134,
   174,     5,   180,   244,   180,     3,   175,     6,     0,     3,
     7,   132,   174,     5,   180,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   180,     3,   180,   236,   175,     6,
     0,     3,     7,   137,   174,     5,   180,     3,   180,   236,
   180,   236,   175,     6,     0,     3,     7,   144,   174,     5,
   180,     3,   180,   236,   180,   236,   175,     6,     0,     3,
     7,   138,   174,     5,   180,     3,   180,   236,   175,     6,
     0,     3,     7,   148,   174,     5,   180,     3,   180,   236,
   180,   236,   175,     6,     0,     3,     7,   139,   174,     5,
   180,     3,   180,   244,   180,   244,   180,   235,   180,   235,
   175,     6,     0,     3,     7,   140,   174,     5,   180,   244,
   175,     6,     0,     3,     7,   141,   174,   142,   180,   235,
   180,     3,   175,     6,     0,     3,     7,   143,   174,     5,
   180,   244,   180,   235,   175,     6,     0,     3,     7,   145,
   174,     5,   180,     5,   180,     3,   180,     3,   175,     6,
     0,     3,     7,   146,   174,     5,   180,     5,   180,     3,
   175,     6,     0,     3,     7,   147,   174,     3,   180,     3,
   175,     6,     0,     0,   189,   190,     0,   192,     0,   191,
     0,   210,     0,   211,     0,   212,     0,   215,     0,   216,
     0,   217,     0,   218,     0,   221,     0,   233,     0,   234,
     0,   220,     0,   219,     0,    33,   174,     5,   175,     6,
     0,    33,   174,     5,   180,   246,   175,     6,     0,     4,
     5,   181,   193,   182,     6,     0,     4,     5,     4,   238,
   181,   193,   182,     6,     0,     0,   193,   196,     0,   193,
   200,     0,   193,   203,     0,   193,   205,     0,   193,   206,
     0,   236,     0,   194,   180,   236,     0,   236,     0,   195,
   180,   236,     0,     0,     0,     4,   197,   174,   194,   175,
   198,   181,   195,   182,     6,     0,   250,     0,   199,   180,
   250,     0,     0,    76,   174,   236,   180,   236,   180,   236,
   175,   201,   181,   199,   182,     6,     0,   250,     0,   202,
   180,   250,     0,     0,    77,   174,   236,   180,   236,   180,
   236,   180,   236,   175,   204,   181,   202,   182,     6,     0,
    78,   181,   243,   182,   181,   243,   182,     6,     0,     0,
    79,   207,   181,   195,   182,     6,     0,     7,     0,   149,
     0,   150,     0,   151,     0,   152,     0,   170,     0,   171,
     0,     4,   208,   236,     6,     0,     4,   176,   236,   177,
   208,   236,     6,     0,     4,   176,   181,   246,   182,   177,
   208,   244,     6,     0,     4,   176,   177,     7,   244,     6,
     0,     4,   209,     6,     0,     4,   176,   236,   177,   209,
     6,     0,     4,   178,     4,     7,   250,     6,     0,     4,
   176,   236,   177,   178,     4,     7,   250,     6,     0,     4,
   178,     4,   208,   236,     6,     0,     4,   176,   236,   177,
   178,     4,   208,   236,     6,     0,     4,   178,     4,   209,
     6,     0,     4,   176,   236,   177,   178,     4,   209,     6,
     0,     4,   178,    88,   178,     4,     7,   247,     6,     0,
     4,   176,   236,   177,   178,    88,   178,     4,     7,   247,
     6,     0,     4,   178,    89,     7,   248,     6,     0,     4,
   176,   236,   177,   178,    89,     7,   248,     6,     0,    60,
   174,     4,   175,   178,     4,     7,   236,     6,     0,    60,
   174,     4,   175,   178,     4,     7,   250,     6,     0,    41,
   174,   236,   175,     7,   238,     6,     0,    56,    41,   174,
   236,   175,     7,   244,     6,     0,    72,    41,   244,     7,
   181,   236,   180,   236,   180,   236,   182,     6,     0,    48,
    49,   244,     7,   236,     6,     0,    44,   174,   236,   175,
     7,   244,     6,     0,    46,   174,   236,   175,     7,   244,
     6,     0,    42,   174,   236,   175,     7,   244,     6,     0,
    42,   174,   236,   175,     7,   244,    52,   238,     6,     0,
    43,   174,   236,   175,     7,   244,     6,     0,    43,   174,
   236,   175,     7,   244,    52,   238,     6,     0,    50,   174,
   236,   175,     7,   181,   236,   180,   236,   180,     5,   180,
     5,   180,     5,   182,     6,     0,    81,   174,   236,   175,
     7,   244,     6,     0,    82,   174,   236,   175,     7,   244,
     6,     0,    83,   174,   236,   175,     7,   244,    87,   244,
    84,   236,     6,     0,    44,    67,   174,   236,   175,     7,
   244,     6,     0,    72,    44,   244,     7,   181,   236,   180,
   236,   180,   236,   182,     6,     0,    56,    44,   174,   236,
   175,     7,   244,     6,     0,    52,    45,   174,   236,   175,
     7,   244,     6,     0,    53,    45,   174,   236,   175,     7,
   244,     6,     0,    99,    45,   174,   236,   175,     7,   181,
   236,   180,   244,   182,     6,     0,    83,    45,    85,    86,
   174,   236,   175,     7,   242,    87,   181,   244,   180,   244,
   182,    84,   181,   236,   180,   236,   182,     6,     0,    83,
    45,   174,   236,   175,     7,   242,    87,   181,   244,   180,
   244,   182,    84,   181,   236,   180,   236,   182,     6,     0,
    45,    67,   174,   236,   175,     7,   244,     6,     0,    56,
    45,   174,   236,   175,     7,   244,     6,     0,    55,    47,
   174,   236,   175,     7,   244,     6,     0,    47,   174,   236,
   175,     7,   244,     6,     0,    56,    47,   174,   236,   175,
     7,   244,     6,     0,    62,   238,   181,   213,   182,     0,
    61,   181,   238,   180,   238,   180,   236,   182,   181,   213,
   182,     0,    63,   238,   181,   213,   182,     0,    64,   181,
   238,   180,   236,   182,   181,   213,   182,     0,   215,     0,
   214,     0,   212,     0,     0,   214,   211,     0,   214,    41,
   181,   246,   182,     6,     0,   214,    44,   181,   246,   182,
     6,     0,   214,    45,   181,   246,   182,     6,     0,   214,
    47,   181,   246,   182,     6,     0,    66,   181,   214,   182,
     0,    66,     4,   176,   236,   177,     6,     0,    74,     4,
   176,   236,   177,     6,     0,    75,     4,   176,   236,   177,
     6,     0,    69,   181,   214,   182,     0,    69,     4,   176,
   236,   177,     6,     0,    69,     4,     6,     0,    69,     4,
     4,     6,     0,    88,   247,   181,   214,   182,     0,   100,
   250,     6,     0,   101,   250,     6,     0,   100,   181,   214,
   182,     0,   101,   181,   214,   182,     0,     4,   250,     6,
     0,     4,     4,   176,   236,   177,   250,     6,     0,     4,
   236,     6,     0,    60,   174,     4,   175,   178,     4,     6,
     0,    80,     4,     6,     0,    95,     6,     0,    38,     6,
     0,    38,   181,   236,   180,   236,   180,   236,   180,   236,
   180,   236,   180,   236,   182,     6,     0,    39,     6,     0,
    90,   174,   236,     8,   236,   175,     0,    90,   174,   236,
     8,   236,     8,   236,   175,     0,    90,     4,    91,   181,
   236,     8,   236,   182,     0,    90,     4,    91,   181,   236,
     8,   236,     8,   236,   182,     0,    92,     0,    98,     4,
     0,    96,     0,    97,     4,     6,     0,    93,   174,   236,
   175,     0,    94,     0,    65,    41,   181,   236,   180,   238,
   182,     6,     0,    65,    41,   181,   236,   180,   238,   180,
   238,   180,   236,   182,     6,     0,    65,    41,   181,   236,
   180,   238,   180,   238,   180,   238,   180,   236,   182,     6,
     0,     0,    65,    41,   181,   236,   180,   238,   182,   222,
   181,   231,   182,     6,     0,     0,    65,    41,   181,   236,
   180,   238,   180,   238,   180,   236,   182,   223,   181,   231,
   182,     6,     0,     0,    65,    41,   181,   236,   180,   238,
   180,   238,   180,   238,   180,   236,   182,   224,   181,   231,
   182,     6,     0,    65,    44,   181,   236,   180,   238,   182,
     6,     0,    65,    44,   181,   236,   180,   238,   180,   238,
   180,   236,   182,     6,     0,    65,    44,   181,   236,   180,
   238,   180,   238,   180,   238,   180,   236,   182,     6,     0,
     0,    65,    44,   181,   236,   180,   238,   182,   225,   181,
   231,   182,     6,     0,     0,    65,    44,   181,   236,   180,
   238,   180,   238,   180,   236,   182,   226,   181,   231,   182,
     6,     0,     0,    65,    44,   181,   236,   180,   238,   180,
   238,   180,   238,   180,   236,   182,   227,   181,   231,   182,
     6,     0,    65,    45,   181,   236,   180,   238,   182,     6,
     0,    65,    45,   181,   236,   180,   238,   180,   238,   180,
   236,   182,     6,     0,    65,    45,   181,   236,   180,   238,
   180,   238,   180,   238,   180,   236,   182,     6,     0,     0,
    65,    45,   181,   236,   180,   238,   182,   228,   181,   231,
   182,     6,     0,     0,    65,    45,   181,   236,   180,   238,
   180,   238,   180,   236,   182,   229,   181,   231,   182,     6,
     0,     0,    65,    45,   181,   236,   180,   238,   180,   238,
   180,   238,   180,   236,   182,   230,   181,   231,   182,     6,
     0,   232,     0,   231,   232,     0,    73,   181,   244,   180,
   244,   180,   244,   182,     6,     0,    73,   181,   244,   180,
   244,   182,     6,     0,    68,     6,     0,    54,    44,   244,
     7,   236,     6,     0,    54,    44,   244,     7,   236,    57,
    59,   236,     6,     0,    54,    44,   244,     7,   236,    57,
    58,   236,     6,     0,    54,    45,   181,   236,   182,     7,
   244,     6,     0,    51,    45,   181,   236,   182,     7,   244,
     6,     0,    54,    47,   181,   236,   182,     7,   244,     6,
     0,    68,    45,   244,     7,   236,     6,     0,    68,    45,
   244,     6,     0,    70,     6,     0,    71,     6,     0,   109,
     0,   110,     0,   111,     0,   112,     0,   113,     0,   237,
     0,   174,   236,   175,     0,   164,   236,     0,   163,   236,
     0,   169,   236,     0,   236,   164,   236,     0,   236,   163,
   236,     0,   236,   165,   236,     0,   236,   166,   236,     0,
   236,   167,   236,     0,   236,   173,   236,     0,   236,   159,
   236,     0,   236,   161,   236,     0,   236,   160,   236,     0,
   236,   162,   236,     0,   236,   156,   236,     0,   236,   157,
   236,     0,   236,   155,   236,     0,   236,   154,   236,     0,
   236,   153,   236,     8,   236,     0,    12,   174,   236,   175,
     0,    13,   174,   236,   175,     0,    14,   174,   236,   175,
     0,    15,   174,   236,   175,     0,    16,   174,   236,   175,
     0,    17,   174,   236,   175,     0,    18,   174,   236,   175,
     0,    19,   174,   236,   175,     0,    20,   174,   236,   175,
     0,    22,   174,   236,   175,     0,    23,   174,   236,   180,
   236,   175,     0,    24,   174,   236,   175,     0,    25,   174,
   236,   175,     0,    26,   174,   236,   175,     0,    27,   174,
   236,   175,     0,    28,   174,   236,   175,     0,    29,   174,
   236,   175,     0,    30,   174,   236,   180,   236,   175,     0,
    31,   174,   236,   180,   236,   175,     0,    32,   174,   236,
   180,   236,   175,     0,    21,   174,   236,   175,     0,    12,
   176,   236,   177,     0,    13,   176,   236,   177,     0,    14,
   176,   236,   177,     0,    15,   176,   236,   177,     0,    16,
   176,   236,   177,     0,    17,   176,   236,   177,     0,    18,
   176,   236,   177,     0,    19,   176,   236,   177,     0,    20,
   176,   236,   177,     0,    22,   176,   236,   177,     0,    23,
   176,   236,   180,   236,   177,     0,    24,   176,   236,   177,
     0,    25,   176,   236,   177,     0,    26,   176,   236,   177,
     0,    27,   176,   236,   177,     0,    28,   176,   236,   177,
     0,    29,   176,   236,   177,     0,    30,   176,   236,   180,
   236,   177,     0,    31,   176,   236,   180,   236,   177,     0,
    32,   176,   236,   180,   236,   177,     0,    21,   176,   236,
   177,     0,     3,     0,     9,     0,    10,     0,    11,     0,
   103,     0,   104,     0,   105,     0,     4,     0,     4,   176,
   236,   177,     0,   179,     4,   176,   177,     0,     4,   209,
     0,     4,   176,   236,   177,   209,     0,     4,   178,     4,
     0,     4,   176,   236,   177,   178,     4,     0,     4,   178,
     4,   209,     0,     4,   176,   236,   177,   178,     4,   209,
     0,   102,   174,     5,   180,   236,   175,     0,   239,     0,
   164,   238,     0,   163,   238,     0,   238,   164,   238,     0,
   238,   163,   238,     0,   181,   236,   180,   236,   180,   236,
   180,   236,   180,   236,   182,     0,   181,   236,   180,   236,
   180,   236,   180,   236,   182,     0,   181,   236,   180,   236,
   180,   236,   182,     0,   174,   236,   180,   236,   180,   236,
   175,     0,     0,   174,   241,   175,     0,     5,     0,   241,
   180,     5,     0,     0,   181,   243,   182,     0,   174,   243,
   175,     0,   244,     0,   243,   180,   244,     0,   236,     0,
   245,     0,   181,   246,   182,     0,   164,   181,   246,   182,
     0,   236,     8,   236,     0,   236,     8,   236,     8,   236,
     0,    41,   181,   236,   182,     0,   212,     0,   215,     0,
   221,     0,     4,   176,   177,     0,   164,     4,   176,   177,
     0,     4,   176,   181,   246,   182,   177,     0,   164,     4,
   176,   181,   246,   182,   177,     0,   236,     0,   245,     0,
   246,   180,   236,     0,   246,   180,   245,     0,   181,   236,
   180,   236,   180,   236,   180,   236,   182,     0,   181,   236,
   180,   236,   180,   236,   182,     0,     4,     0,     4,   178,
    88,   178,     4,     0,   181,   249,   182,     0,     4,   176,
   236,   177,   178,    89,     0,   247,     0,   249,   180,   247,
     0,     5,     0,    40,     0,    35,   174,   250,   180,   250,
   175,     0,    36,   174,   250,   175,     0,    37,   174,   250,
   175,     0,    34,   174,   250,   175,     0,    34,   174,   250,
   180,   246,   175,     0,    34,   174,     4,   178,     4,   175,
     0,    34,   174,     4,   176,   236,   177,   178,     4,   175,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   157,   159,   160,   170,   172,   175,   177,   178,   181,   187,
   192,   193,   194,   197,   201,   204,   210,   215,   221,   229,
   234,   238,   244,   249,   253,   258,   262,   265,   270,   274,
   278,   282,   287,   291,   294,   298,   302,   306,   310,   314,
   318,   321,   325,   328,   332,   335,   342,   344,   347,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   364,   370,   387,   395,   404,   412,   413,   414,
   415,   416,   419,   422,   426,   429,   433,   624,   642,   652,
   658,   665,   673,   679,   685,   692,   700,   706,   714,   719,
   726,   728,   729,   730,   731,   734,   736,   739,   774,   813,
   867,   884,   895,   914,   928,   945,   971,   998,  1012,  1029,
  1043,  1060,  1080,  1103,  1113,  1128,  1148,  1164,  1183,  1202,
  1220,  1238,  1256,  1282,  1300,  1326,  1346,  1370,  1394,  1420,
  1437,  1455,  1474,  1493,  1532,  1557,  1576,  1595,  1611,  1631,
  1648,  1665,  1685,  1691,  1696,  1701,  1708,  1710,  1711,  1714,
  1719,  1723,  1739,  1755,  1771,  1791,  1806,  1812,  1818,  1829,
  1839,  1849,  1863,  1881,  1895,  1904,  1910,  1921,  1934,  1979,
  1994,  2010,  2020,  2042,  2046,  2050,  2054,  2065,  2082,  2098,
  2124,  2151,  2183,  2190,  2195,  2201,  2205,  2213,  2232,  2248,
  2264,  2269,  2285,  2290,  2306,  2311,  2329,  2352,  2375,  2398,
  2403,  2426,  2431,  2454,  2459,  2485,  2508,  2531,  2554,  2559,
  2582,  2588,  2611,  2617,  2642,  2646,  2651,  2678,  2702,  2710,
  2729,  2747,  2765,  2793,  2820,  2847,  2861,  2879,  2884,  2893,
  2895,  2896,  2897,  2898,  2901,  2903,  2904,  2905,  2906,  2907,
  2908,  2909,  2910,  2917,  2918,  2919,  2920,  2921,  2922,  2923,
  2924,  2925,  2926,  2927,  2928,  2929,  2930,  2931,  2932,  2933,
  2934,  2935,  2936,  2937,  2938,  2939,  2940,  2941,  2942,  2943,
  2944,  2945,  2946,  2947,  2948,  2950,  2951,  2952,  2953,  2954,
  2955,  2956,  2957,  2958,  2959,  2960,  2961,  2962,  2963,  2964,
  2965,  2966,  2967,  2968,  2969,  2970,  2975,  2980,  2981,  2982,
  2983,  2984,  2985,  2989,  3002,  3022,  3036,  3049,  3072,  3090,
  3108,  3126,  3144,  3151,  3156,  3160,  3164,  3168,  3174,  3179,
  3183,  3187,  3193,  3197,  3202,  3206,  3211,  3215,  3219,  3225,
  3231,  3238,  3244,  3248,  3252,  3263,  3270,  3281,  3301,  3311,
  3321,  3333,  3350,  3369,  3393,  3421,  3427,  3431,  3435,  3447,
  3452,  3464,  3471,  3492,  3497,  3511,  3517,  3523,  3528,  3536,
  3544,  3558,  3572,  3576,  3595,  3617
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative","tBoundingBox",
"tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSurface","tSpline",
"tVolume","tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled",
"tTransfinite","tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin",
"tRotate","tTranslate","tSymmetry","tDilate","tExtrude","tDuplicata","tLoop",
"tRecombine","tDelete","tCoherence","tIntersect","tAttractor","tLayers","tAlias",
"tAliasWithOptions","tText2D","tText3D","tInterpolationScheme","tTime","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION",
"tGMSH_PATCH_VERSION","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"'#'","','","'{'","'}'","All","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View",
"Views","ElementCoords","ElementValues","Element","@1","@2","Text2DValues","Text2D",
"@3","Text3DValues","Text3D","@4","InterpolationMatrix","Time","@5","NumericAffectation",
"NumericIncrement","Affectation","Shape","Transform","MultipleShape","ListOfShapes",
"Duplicata","Delete","Colorify","Visibility","Command","Loop","Extrude","@6",
"@7","@8","@9","@10","@11","@12","@13","@14","ExtrudeParameters","ExtrudeParameter",
"Transfinite","Coherence","BoolExpr","FExpr","FExpr_Single","VExpr","VExpr_Single",
"ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble","RecursiveListOfListOfDouble",
"ListOfDouble","FExpr_Multi","RecursiveListOfDouble","ColorExpr","ListOfColor",
"RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   183,   183,   183,   184,   184,   185,   185,   185,   186,   186,
   186,   186,   186,   187,   187,   187,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   189,   189,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   191,   191,   192,   192,   193,   193,   193,   193,
   193,   193,   194,   194,   195,   195,   197,   198,   196,   199,
   199,   201,   200,   202,   202,   204,   203,   205,   207,   206,
   208,   208,   208,   208,   208,   209,   209,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   212,   212,   212,   212,   213,   213,   213,   214,
   214,   214,   214,   214,   214,   215,   215,   215,   215,   216,
   216,   216,   216,   217,   218,   218,   218,   218,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   221,   221,   221,
   222,   221,   223,   221,   224,   221,   221,   221,   221,   225,
   221,   226,   221,   227,   221,   221,   221,   221,   228,   221,
   229,   221,   230,   221,   231,   231,   232,   232,   232,   233,
   233,   233,   233,   233,   233,   233,   233,   234,   234,   235,
   235,   235,   235,   235,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   238,   238,   238,   238,   238,   239,   239,
   239,   239,   240,   240,   241,   241,   242,   242,   242,   243,
   243,   244,   244,   244,   244,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   246,   246,   246,   246,   247,
   247,   247,   247,   248,   248,   249,   249,   250,   250,   250,
   250,   250,   250,   250,   250,   250
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     2,     1,     1,     1,     2,     2,
     2,     2,     2,     7,     5,    17,     9,    23,    31,    15,
    11,    11,    15,     9,    13,     9,    11,    13,     9,     9,
    11,     9,    11,     9,    11,    13,    13,    11,    13,    17,
     9,    11,    11,    13,    11,     9,     0,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     5,     7,     6,     8,     0,     2,     2,     2,
     2,     2,     1,     3,     1,     3,     0,     0,    10,     1,
     3,     0,    13,     1,     3,     0,    15,     8,     0,     6,
     1,     1,     1,     1,     1,     1,     1,     4,     7,     9,
     6,     3,     6,     6,     9,     6,     9,     5,     8,     8,
    11,     6,     9,     9,     9,     7,     8,    12,     6,     7,
     7,     7,     9,     7,     9,    17,     7,     7,    11,     8,
    12,     8,     8,     8,    12,    22,    20,     8,     8,     8,
     7,     8,     5,    11,     5,     9,     1,     1,     1,     0,
     2,     6,     6,     6,     6,     4,     6,     6,     6,     4,
     6,     3,     4,     5,     3,     3,     4,     4,     3,     7,
     3,     7,     3,     2,     2,    15,     2,     6,     8,     8,
    10,     1,     2,     1,     3,     4,     1,     8,    12,    14,
     0,    12,     0,    16,     0,    18,     8,    12,    14,     0,
    12,     0,    16,     0,    18,     8,    12,    14,     0,    12,
     0,    16,     0,    18,     1,     2,     9,     7,     2,     6,
     9,     9,     8,     8,     8,     6,     4,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     4,     4,     2,     5,     3,     6,
     4,     7,     6,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     0,     3,     1,     3,     0,     3,     3,     1,
     3,     1,     1,     3,     4,     3,     5,     4,     1,     1,
     1,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     1,     6,
     4,     4,     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     3,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     5,     6,     8,     7,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   187,     0,
   184,     0,     0,     0,     0,     0,    48,    50,    49,    51,
    52,    53,    54,    55,    56,    57,    62,    61,    58,    59,
    60,     0,     9,    10,    12,    11,    13,   323,   323,     0,
   297,   304,   358,    91,   298,   299,   300,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   359,     0,   301,   302,   303,    92,    93,    94,
    95,     0,     0,     0,    96,    97,     0,     0,     0,     0,
     0,     0,     0,   235,     0,     0,   175,     0,   177,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   314,     0,     0,
     0,     0,     0,     0,   150,     0,     0,   150,   228,   229,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   352,
     0,     0,     0,     0,     0,   174,     0,   183,     0,   358,
   150,     0,   150,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,    67,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   304,   238,   237,   239,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   102,   171,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   169,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   304,     0,     0,     0,   339,   340,   341,   332,     0,
   333,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   316,   315,     0,     0,     0,
     0,   150,   150,     0,     0,     0,     0,     0,     0,     0,
     0,   162,     0,     0,     0,     0,     0,     0,   173,     0,
     0,     0,     0,     0,     0,     0,   150,     0,     0,     0,
   185,     0,     0,   165,     0,   166,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   325,     0,     0,     0,
     0,     0,   309,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   236,     0,     0,   346,   347,     0,
     0,    91,     0,     0,     0,     0,     0,    98,     0,   253,
   252,   250,   251,   246,   248,   247,   249,   241,   240,   242,
   243,   244,   245,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   304,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   318,   317,   149,
     0,   148,   147,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   156,   151,   227,     0,   163,     0,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   186,     0,   167,   168,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   324,     0,
     0,    15,     0,   305,   311,    67,    77,     0,     0,     0,
    89,     0,    68,    69,    70,    71,    72,   255,   276,   256,
   277,   257,   278,   258,   279,   259,   280,   260,   281,   261,
   282,   262,   283,   263,   284,   275,   296,   264,   285,     0,
     0,   266,   287,   267,   288,   268,   289,   269,   290,   270,
   291,   271,   292,     0,     0,     0,     0,     0,     0,     0,
     0,   363,     0,     0,   361,   362,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   108,     0,     0,     0,
     0,   306,     0,    63,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   342,     0,     0,     0,     0,   334,
   336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   143,   145,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   164,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   326,     0,   323,     0,
   308,     0,     0,     0,     0,     0,     0,     0,    65,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   305,   101,   348,   349,     0,     0,     0,     0,
     0,   103,   104,   106,     0,     0,   356,     0,   112,   254,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   338,   343,     0,   335,     0,   119,     0,     0,     0,
     0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   157,     0,
     0,     0,     0,   226,   161,     0,     0,   158,   159,     0,
     0,     0,   327,     0,   353,     0,     0,     0,   178,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   230,   231,   232,   233,   234,     0,     0,
     0,     0,     0,     0,     0,    14,     0,   310,   170,     0,
     0,     0,     0,     0,   330,     0,   265,   286,   272,   293,
   273,   294,   274,   295,     0,   365,   364,   360,   313,     0,
    91,     0,     0,     0,     0,    99,     0,     0,     0,   354,
    64,     0,   116,   122,     0,   124,     0,     0,   120,     0,
   121,   141,     0,     0,   337,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   172,     0,
     0,     0,     0,   150,     0,   191,     0,   200,     0,   209,
     0,     0,     0,     0,     0,     0,   127,   128,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   323,   312,    66,
     0,    73,     0,     0,     0,     0,     0,    75,     0,     0,
     0,     0,   109,     0,     0,   110,     0,   357,     0,     0,
     0,   130,   138,   344,     0,     0,   224,   133,   134,     0,
     0,   223,   225,   140,   117,   132,   139,   142,     0,     0,
     0,   322,     0,   321,     0,     0,   188,     0,     0,   197,
     0,     0,   206,     0,   152,   153,   154,   155,     0,     0,
   327,     0,     0,     0,     0,     0,   351,     0,   180,   179,
     0,     0,     0,     0,    17,     0,    26,     0,    30,     0,
    24,     0,     0,    29,     0,    34,    32,     0,     0,     0,
     0,     0,     0,    41,     0,     0,     0,     0,     0,    46,
     0,     0,    78,     0,     0,     0,   331,     0,     0,     0,
     0,   100,   105,   107,     0,   113,     0,     0,   123,   125,
   345,     0,   222,   221,   114,   115,   150,     0,   146,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   329,   328,
     0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    74,     0,
     0,     0,    76,    90,   366,     0,   355,     0,     0,     0,
     0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
   215,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   350,   181,     0,    31,     0,     0,     0,     0,
    21,     0,    27,     0,    33,    22,    35,     0,    38,     0,
    42,    43,     0,     0,    45,     0,     0,     0,     0,     0,
     0,   111,     0,     0,   144,     0,     0,   193,     0,   219,
     0,     0,   216,   202,     0,     0,   211,     0,     0,     0,
     0,     0,     0,   129,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
    88,     0,     0,   319,   189,     0,     0,     0,   192,   198,
     0,     0,   201,   207,     0,     0,   210,   118,   131,     0,
     0,   135,     0,     0,     0,     0,    25,    28,    36,     0,
    37,    44,    39,     0,     0,     0,     0,     0,     0,     0,
   195,     0,     0,   204,     0,   213,     0,     0,     0,     0,
     0,     0,     0,     0,    79,     0,    86,     0,     0,     0,
   190,     0,     0,     0,   199,     0,     0,   208,     0,     0,
     0,     0,     0,    20,    23,     0,     0,     0,    80,     0,
   176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   194,     0,     0,   218,   203,     0,   212,     0,     0,     0,
     0,     0,    40,    16,    81,    83,     0,    84,   126,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   196,
   217,   205,   214,     0,     0,     0,     0,    85,    87,     0,
     0,     0,     0,     0,   137,     0,     0,     0,     0,     0,
   136,     0,    18,     0,     0,     0,     0,     0,     0,     0,
    19,     0,     0,     0
};

static const short yydefgoto[] = {  1502,
     2,    14,    15,    16,    17,     3,    67,    68,    69,   445,
  1071,  1077,   643,   814,  1238,  1418,   644,  1376,  1457,   645,
  1420,   646,   647,   818,   141,   251,    70,   575,   346,   561,
   562,   347,    74,    75,    76,    77,    78,   348,  1118,  1346,
  1402,  1121,  1351,  1406,  1124,  1355,  1409,  1260,  1261,    80,
    81,   939,   349,   144,   366,   178,   246,   438,  1032,   954,
   955,   351,   500,   202,   711,   848,   145
};

static const short yypact[] = {  2486,
    36,    25,  2635,-32768,    38,    65,    91,   104,   134,   142,
   -92,    -7,    29,-32768,-32768,-32768,-32768,  1901,    54,    15,
   206,   118,   144,   150,   -31,   151,   154,   164,   318,   212,
   347,   364,   372,   124,   353,   392,   256,   262,   -46,   -46,
   294,   492,    10,   433,    11,   482,   510,   242,   502,   526,
   540,   386,   389,   -28,    14,    30,-32768,   394,-32768,   565,
-32768,   580,   596,   561,     3,    19,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2515,-32768,-32768,-32768,-32768,-32768,   443,   443,   620,
-32768,   274,    16,-32768,-32768,-32768,-32768,   175,   179,   192,
   232,   310,   345,   355,   374,   398,   420,   421,   444,   475,
   486,   500,   522,   523,   528,   529,   533,   539,   459,   463,
   468,   472,-32768,   476,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2146,  2146,  2146,-32768,-32768,  2146,   900,    76,   657,
  2146,   658,   610,-32768,   659,   668,-32768,  2146,-32768,  2146,
  2146,  2146,   506,  2146,   507,  2146,  2146,  1454,  2146,   496,
   544,   562,  1454,   545,   554,   568,   569,   585,   588,   594,
   680,   -46,   -46,   -46,  2146,  2146,  -100,-32768,   -94,   -46,
   601,   603,   604,   525,-32768,  1454,    23,-32768,-32768,-32768,
  1454,  1454,   611,   612,   780,  2146,  2146,   -53,  2146,   613,
  2146,   608,   699,  2146,  2146,-32768,   786,-32768,   619,-32768,
-32768,   788,-32768,   789,   625,   626,   632,   642,   643,   644,
   646,   649,   650,   651,   652,   655,   656,   661,   662,   664,
   665,   666,   667,   669,   670,   671,   673,   675,   677,   678,
   679,   681,   682,   683,   791,   653,   647,   674,  2146,   827,
-32768,   -46,-32768,  2146,  2146,  2146,  2146,  2146,  2146,  2146,
  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,
  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,
  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,
  2146,  2146,  2146,  2146,  2146,   367,   376,   376,   376,   853,
   456,   686,   686,   686,  4901,   825,  2078,  4151,   375,   684,
   854,   687,   648,-32768,-32768,  2146,  2146,  2146,  2146,  2146,
  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,  2146,
-32768,  -108,  3205,  4924,  4947,  4970,  2146,  4993,  2146,  5016,
  5039,   465,   691,  1665,  2078,-32768,-32768,-32768,  1618,   875,
-32768,  5062,  2146,  2146,  2146,   876,  2146,  2146,  2146,  2146,
  2146,  2146,  2146,   685,   -86,-32768,-32768,  3227,  3249,   -46,
   -46,   503,   503,   -38,  2146,  2146,  2146,  2146,  2247,   370,
   878,-32768,  2146,  2320,   879,   884,  2146,  2146,-32768,  5085,
  5108,   799,  2146,  5131,   804,  3271,-32768,   712,  1726,  5154,
-32768,  2146,  2341,-32768,  2389,-32768,   889,   890,   891,   892,
   893,   895,   896,   897,   901,   903,   932,   934,   935,   936,
   939,   940,   942,   943,   944,   945,   946,   948,   950,   763,
   951,   952,   953,   954,   957,   956,-32768,   -77,   958,   959,
   980,  4176,   283,   133,     7,  5177,  4201,  5200,  4226,  5223,
  4251,  5246,  4276,  5269,  4301,  5292,  4326,  5315,  4351,  5338,
  4376,  5361,  4401,  5384,  4426,  5407,  4451,  3293,  3315,  5430,
  4476,  5453,  4501,  5476,  4526,  5499,  4551,  5522,  4576,  5545,
  4601,  3337,  3359,  3381,  3403,  3425,  3447,   373,   145,   762,
   812,   814,   784,  2146,-32768,  1454,  2181,  1618,-32768,     8,
   271,   376,  2146,   982,   986,    21,   816,-32768,  1864,  1337,
  1014,   527,   527,   336,   336,   336,   336,   292,   292,   686,
   686,   686,   686,   985,  2078,  2146,   987,   988,   989,  5568,
   990,  5591,   991,   992,  1242,  2146,   469,  2078,   442,  2146,
  2146,   993,  2697,  5614,  5637,  2146,  2721,  2745,  5660,  5683,
  5706,  5729,  5752,   823,   -46,  2146,  2146,-32768,-32768,-32768,
   824,  2696,-32768,   828,  2146,  3469,  3491,  3513,  4626,  -116,
   -37,   -19,   -73,-32768,-32768,-32768,  2146,-32768,  4651,-32768,
   830,   831,  4676,  4701,  1002,  1006,   840,  5775,  1010,   844,
  2146,  2410,  2146,  2146,-32768,  5798,-32768,-32768,   838,   843,
   845,   846,   847,   848,   849,   850,   852,   855,   856,   857,
   861,   862,   863,   864,   866,   867,   868,   870,   871,   872,
   873,   874,   877,   880,   881,   882,   885,   886,-32768,  1019,
   858,-32768,   887,    39,-32768,-32768,-32768,   860,   894,   899,
-32768,  1052,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2146,
  2146,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2146,  2146,  2146,  2146,  2146,  2146,  2146,
  1055,-32768,  2078,   376,-32768,-32768,  2146,  4726,  1064,  2078,
   898,   141,  2146,  1066,  1067,   714,-32768,  1069,   906,    14,
  1077,-32768,  2146,-32768,   210,  3535,   -46,  1454,  1454,  1078,
  1454,  1079,  1454,  1454,-32768,  2078,  2769,  1634,   534,-32768,
  2061,   813,   907,  1080,  1082,  1098,   426,  1099,  1100,  1101,
  1102,  1104,  1105,  1106,  1110,   153,  3557,  3579,-32768,-32768,
  2793,   -46,   -46,   -46,  1109,  2078,  2078,  2078,  2078,   937,
  1111,  2146,  2146,  1113,  1115,  1454,  1454,  2146,  1116,  1454,
  1112,  3601,-32768,  2105,   448,  1117,  1081,  2146,  2146,   -46,
  1119,  1122,   961,  1124,  1130,  1454,  1454,  1140,   -46,  1141,
  1142,  1454,  1454,  1143,  1144,  1146,  1147,  1148,  1454,   546,
  1454,  1149,  1150,  1152,  1151,  1155,-32768,  1153,   443,  1156,
-32768,  1157,    12,   979,  2146,  2146,  1454,   981,-32768,  5821,
  4751,  5844,  4776,  5867,  4801,  5890,  4826,  4851,   997,   302,
  1008,  5913,   326,-32768,  1618,-32768,    24,   391,  1007,  1158,
   975,-32768,-32768,-32768,    14,  2146,-32768,   537,-32768,  1592,
  1160,  2146,    51,    43,    44,  1454,  1162,  1454,  1184,  1185,
   541,-32768,-32768,  2078,-32768,  2146,-32768,  2146,  1454,  1454,
  1454,-32768,   498,  1454,  1454,  1454,  1454,  1454,  1454,  1454,
   622,  2146,  2146,  2146,   983,   -71,   -58,   -51,-32768,   542,
   547,   548,   551,-32768,-32768,  3623,  3645,-32768,-32768,  1186,
  1187,  5936,   114,  1108,-32768,  2146,  2146,  2146,-32768,  1015,
  1020,  3667,  3689,   159,  1025,  1031,  1027,  1033,  1029,  1036,
  1032,  1034,   265,  1037,  1038,  1041,  1039,  1040,  1044,  1045,
  1046,  1047,  1053,-32768,-32768,-32768,-32768,-32768,  1049,  1051,
  1054,  1060,  1062,  1057,  1068,-32768,  1070,   283,-32768,  1215,
  2146,  3711,  3733,   552,-32768,  2146,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1071,-32768,-32768,-32768,-32768,  1454,
   376,  2146,  1241,  1271,    21,-32768,  1270,  4876,    14,-32768,
-32768,  3755,-32768,-32768,   -46,-32768,   -46,  1272,-32768,  1273,
-32768,-32768,  1118,   566,  1592,  3777,  1275,  1276,  1277,  2146,
  2146,  1279,  1282,  1283,  1286,  1287,  1288,  1290,-32768,  1954,
  2817,  5959,  2600,   503,   -46,  1292,   -46,  1293,   -46,  1295,
  1296,  1297,  1298,  1299,  2146,  2146,-32768,-32768,  1301,  1454,
  1454,  1190,  1454,  2637,   307,  5982,  2146,  1306,  2146,  1454,
  1304,  1308,  1309,  1161,  1310,   546,  1311,  1315,  2146,  1314,
  1320,  1319,  1321,  1325,   546,  2146,  2146,  2146,  1454,  1323,
  1327,   546,  2146,  1328,  1330,  1329,  2146,   443,-32768,-32768,
   315,  1592,  2146,  2146,  1454,  1133,   567,  1592,  1332,  1331,
  1333,  1198,-32768,  1334,  1336,-32768,  1165,-32768,  2146,    60,
    62,-32768,-32768,-32768,  1163,  2146,-32768,-32768,-32768,  1278,
  1377,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1409,  1342,
  1168,-32768,  2146,-32768,  1174,   166,-32768,  1169,   168,-32768,
  1188,   200,-32768,  1189,-32768,-32768,-32768,-32768,  3799,  3821,
   114,   335,   571,  1191,  1250,  2146,-32768,  2146,-32768,-32768,
  3843,  1192,  3865,  1194,-32768,  1197,-32768,  1199,-32768,  1193,
-32768,  1200,  6005,-32768,  1201,-32768,-32768,  1210,  1212,  6028,
  3887,  6051,  1208,-32768,  1217,  1218,  3909,  1221,  1227,-32768,
  3931,  1223,-32768,  2146,  3953,  3975,-32768,  1454,  2146,  1360,
  1232,-32768,-32768,-32768,    14,-32768,  1249,  3997,-32768,-32768,
-32768,  4019,-32768,-32768,-32768,-32768,   503,  2667,-32768,  1697,
   378,  1697,   378,  1697,   378,  2146,  2146,  1322,-32768,-32768,
  1454,  2146,  2841,  2865,  1454,  1402,   114,   546,  1407,  2146,
  1406,   546,  1411,  1410,  1412,  1414,  1416,  2146,  1418,  1454,
  1419,  1420,  2146,  1424,  1422,  2146,  1425,  1248,  1592,  2146,
  2146,   572,  1592,-32768,-32768,  1442,-32768,  2146,  1445,  1274,
  2146,-32768,  1697,  1697,  2146,  2889,   225,  1446,  1280,   -22,
-32768,  2913,   251,   -21,  2937,   255,    31,  2961,  2985,  1307,
  1326,  1443,-32768,-32768,  1305,-32768,  1341,  1343,  1344,  4041,
-32768,  1284,-32768,  1285,-32768,-32768,-32768,  6074,-32768,  1345,
-32768,-32768,  6097,  1316,-32768,  6120,  1346,  2146,  6143,  4063,
  1447,-32768,  4085,  1347,-32768,  3009,  3177,  1448,  2146,-32768,
  1454,  1449,-32768,  1483,  2146,  1499,  1501,  2146,  1502,  1503,
  1505,  1454,  1454,-32768,  1506,   546,   546,   546,   546,  1507,
  1508,  1516,   546,  1529,  1539,  1540,  1542,   575,-32768,  2146,
-32768,  2146,  1543,-32768,-32768,  1368,  3033,  1371,-32768,-32768,
  1373,  3057,-32768,-32768,  1374,  3081,-32768,-32768,-32768,  1372,
  1379,-32768,  1387,  1397,  1403,  1405,-32768,-32768,-32768,  1401,
-32768,-32768,-32768,  1404,  1577,  1408,  6166,  3105,  1413,   378,
  1579,  1454,   378,  1580,   378,  1581,  1454,  1504,   546,   546,
  1584,  1585,   546,  1587,-32768,   376,-32768,  1588,  1596,    34,
-32768,  1430,   576,   109,-32768,  1431,   112,-32768,  1432,  1433,
  1438,  1434,  1440,-32768,-32768,  1450,  1452,   598,-32768,  1441,
-32768,  1439,  1623,   378,  1454,  1624,  1625,   378,  1626,   378,
  1550,  2146,   546,  1454,  1630,  1633,   376,  1635,   376,  1636,
-32768,   211,  1458,-32768,-32768,   214,-32768,   217,  1486,  4107,
  1444,  1490,-32768,-32768,-32768,-32768,   599,-32768,-32768,  1666,
  1667,  1692,  1693,  2146,  2146,   546,  1454,   376,  1696,-32768,
-32768,-32768,-32768,  4129,  3129,  1491,  1523,-32768,-32768,  2146,
  1698,  1454,   546,  3153,-32768,  1525,  1555,  1727,  1454,  1734,
-32768,  1552,-32768,  1454,  1561,  1454,  1562,   546,  1568,  1738,
-32768,  1760,  1761,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1126,
-32768,   466,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -303,     4,-32768,  1763,     1,  -370,
  -178,     6,-32768,-32768,-32768,-32768,-32768,  1773,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768, -1033, -1241,-32768,
-32768,  -835,   -18,-32768,   182,-32768,   -84,-32768, -1090,  -970,
   520,  -245,  -332,  -698,   811,-32768,   -64
};


#define	YYLAST		6341


static const short yytable[] = {   143,
   212,   214,   564,    72,   247,   503,   379,   210,    73,   384,
   637,   847,   539,   184,   187,   637,   198,   200,  1313,   252,
   147,   142,  1313,   210,   709,  1313,   381,     5,   382,   153,
    94,   392,   403,   203,   405,   153,   119,   120,   121,   122,
  1208,     4,   123,   210,    82,  1258,  1258,   155,   984,   986,
  1259,  1259,   119,   120,   121,   122,   983,   150,   123,  1132,
  1133,   499,   370,   371,   756,  1189,   524,  1190,   370,   371,
    83,   525,   119,   120,   121,   122,   370,   371,   123,   309,
   372,    88,   638,   639,   640,   641,   373,   638,   639,   640,
   641,   370,   371,   555,   985,   987,    84,   629,  1258,   499,
   157,  1258,   630,  1259,   370,   371,  1259,   759,  1015,    85,
  1016,   370,   371,   302,   303,   304,   173,   174,   305,   308,
   393,  1017,   313,  1018,   370,   371,  1277,   175,  1019,   333,
  1020,   334,   335,   336,   176,   338,   154,   340,   341,    86,
   352,   565,   154,   757,   838,   199,   977,    87,     6,     7,
     8,     9,    10,    11,    12,    13,   368,   369,  1313,  1312,
  1316,   758,  1313,   310,   311,  1313,    89,   163,   164,  1264,
   165,  1267,   128,   129,   130,   131,  1258,   390,   391,  1258,
   394,  1259,   396,   211,  1259,   399,   400,   700,   642,   701,
   185,   188,   715,   950,   201,   148,   253,   703,   383,   213,
  1313,   710,    90,   204,  1313,   729,  1313,  1242,   135,   136,
  1150,   149,  1319,   370,   371,  1423,   810,   155,   592,  1159,
   177,   179,   370,   371,   370,   371,  1166,   146,   839,   840,
   442,   489,   490,   491,   492,   446,   447,   448,   449,   450,
   451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
   461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
   471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
   481,   482,   483,   484,   485,   486,   487,    94,  1258,   499,
  1088,  1258,   191,  1259,  1258,   192,  1259,  1030,   498,  1259,
  1427,   150,   499,  1429,  1031,   370,   371,   509,   510,   511,
   512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
   522,   523,   504,   636,  1138,   370,   371,   151,   530,   692,
   532,   370,   371,   152,   693,   303,   498,   156,   370,   371,
   370,   371,   882,  1041,   543,   544,   545,   157,   547,   548,
   549,   550,   551,   552,   553,  1200,  1400,  1202,   254,  1404,
   255,  1407,   256,   365,   257,   367,   566,   567,   568,   569,
   830,   374,   370,   371,   579,   258,   158,   259,   583,   584,
   488,   210,   560,   560,   588,   576,   577,   563,   563,  1204,
   210,   502,  1278,   596,   851,   159,  1282,   370,   371,   700,
  1442,   160,  1460,   861,  1446,  1462,  1448,   971,  1463,   166,
   119,   120,   121,   122,  1309,   260,   123,   261,   161,   119,
   120,   121,   122,   370,   371,   123,   162,   370,   371,   128,
   129,   130,   131,   890,   891,   892,   893,   370,   371,   171,
  1315,   872,   167,   444,  1318,   168,   169,   705,   170,  1050,
   135,   136,   172,   135,   136,  1258,   635,   499,   702,   249,
  1259,   250,   135,   136,   836,   908,   327,   328,   329,   316,
   317,   318,   319,   320,   330,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   180,   698,   967,   186,   303,   330,
   499,   700,   873,   262,   706,   263,  1246,   189,  1139,  1173,
  1363,  1364,  1365,  1366,  1174,   135,   136,  1370,   325,   326,
   327,   328,   329,   810,   704,   193,   498,   716,   330,  1209,
   499,   499,   499,   499,  1075,   190,   698,   727,   264,   498,
   265,   731,   732,   128,   129,   130,   131,   737,   266,   194,
   267,   994,   181,   970,   972,   182,   183,   747,   748,   128,
   129,   130,   131,   195,   135,   136,   751,   268,   690,   269,
   691,   558,   559,  1412,  1413,  1000,  1001,  1416,   760,   196,
   135,   136,   197,    38,    39,    40,    41,   205,    43,   812,
   206,   270,   772,   271,   774,   775,    49,    50,   316,   317,
   318,   319,   320,   207,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   272,   274,   273,   275,  1451,   330,   208,
   316,   317,   318,   319,   320,   209,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   315,   245,   276,   499,   277,
   330,   700,   909,   730,   248,   135,   136,  1009,  1010,   831,
  1476,   494,   296,   250,   135,   136,   297,   811,   135,   136,
   535,   298,   250,  1115,   728,   299,   250,  1487,   278,   300,
   279,   820,   821,   508,   934,   935,   936,   937,   938,   280,
   312,   281,  1499,   314,   331,   822,   823,   824,   825,   826,
   827,   828,   332,   282,   498,   283,   353,   350,   832,   337,
   339,   835,   356,   364,   841,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   850,   284,   286,   285,   287,   330,
   378,   288,   290,   289,   291,   380,   292,   498,   293,   698,
   385,   386,   294,   700,   295,   865,   979,   354,   980,   844,
   700,   700,   993,  1021,   947,   357,   700,   700,  1022,  1023,
   700,  1075,  1024,  1076,   358,   355,   746,   498,   498,   498,
   498,   359,   360,   896,   897,   700,  1179,  1095,  1180,   902,
  1075,  1075,  1210,  1301,  1179,  1425,  1375,  1426,   361,   912,
   913,   362,   316,   317,   318,   319,   320,   363,   321,   322,
   323,   324,   325,   326,   327,   328,   329,  1437,  1468,  1438,
  1469,   375,   330,   376,   377,   389,   387,   388,   397,   398,
   395,   401,   402,   404,   406,   437,   952,   953,   407,   408,
   316,   317,   318,   319,   320,   409,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   410,   411,   412,   867,   413,
   330,   440,   414,   415,   416,   417,  1250,   978,   418,   419,
   443,   496,   439,   982,   420,   421,   811,   422,   423,   424,
   425,   973,   426,   427,   428,   498,   429,   995,   430,   996,
   431,   432,   433,   441,   434,   435,   436,   493,   330,   554,
   506,   505,   507,  1011,  1012,  1013,   316,   317,   318,   319,
   320,   536,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   541,   546,   578,   587,   581,   330,  1034,  1035,  1036,
   582,   590,   593,   599,   600,   601,   602,   603,   853,   604,
   605,   606,    91,   301,   622,   607,  1081,   608,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,  1072,   886,   887,   888,   609,  1078,   610,   611,
   612,   694,   894,   613,   614,  1110,   615,   616,   617,   618,
   619,  1069,   620,  1082,   621,   623,   624,   625,   626,   627,
   628,   914,   631,   697,   632,   316,   317,   318,   319,   320,
   923,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   976,  1100,  1101,  1172,   633,   330,   695,   707,   696,   708,
   714,  1109,   712,   717,   718,   719,   721,   723,   724,   733,
   745,   124,   125,   126,   127,   749,  1129,  1130,   766,   750,
   762,   763,   767,   768,   560,   699,   770,   777,  1141,   563,
  1143,   771,   778,   807,   779,   780,   781,   782,   783,   784,
  1153,   785,   808,   815,   786,   787,   788,  1160,  1161,  1162,
   789,   790,   791,   792,  1167,   793,   794,   795,  1171,   796,
   797,   798,   799,   800,  1175,  1176,   801,   819,   829,   802,
   803,   804,   132,   133,   805,   806,   809,   816,   134,   834,
  1188,   842,   843,   137,   837,   845,   306,  1192,   140,   817,
   307,   846,   849,   911,   856,   858,   869,   868,   870,   316,
   317,   318,   319,   320,  1198,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   871,   874,   875,   876,   877,   330,
   878,   879,   880,   881,   889,   905,   895,  1213,   898,  1214,
   899,   915,   903,   910,   916,   917,   918,   316,   317,   318,
   319,   320,   919,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   922,   924,   925,   928,   929,   330,   930,   931,
   932,   941,   951,   944,   942,  1239,   943,   945,   946,   948,
  1243,   956,   949,  1014,   975,   981,  1090,   989,  1091,   319,
   320,   966,   321,   322,   323,   324,   325,   326,   327,   328,
   329,  1256,   968,  1262,   974,  1265,   330,  1268,  1269,   991,
   992,  1027,  1028,  1272,  1033,  1037,  1116,   560,  1119,  1038,
  1122,  1280,   563,  1184,  1042,  1043,  1044,  1045,  1046,  1288,
  1047,  1048,  1052,  1049,  1293,  1053,  1051,  1296,  1054,  1055,
  1070,  1299,  1300,  1056,  1057,  1058,  1059,  1060,  1061,  1303,
  1062,  1066,  1306,  1063,   302,   303,  1307,   854,   855,  1064,
   857,  1065,   859,   860,    91,   301,  1083,  1067,  1079,  1068,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,  1084,  1086,  1134,  1092,  1093,  1078,
  1097,  1098,  1099,  1193,  1102,   900,   901,  1103,  1104,   904,
  1347,  1105,  1106,  1107,  1094,  1108,  1352,  1117,  1120,  1356,
  1123,  1125,  1126,  1127,  1128,   920,   921,  1131,  1142,  1145,
  1146,   926,   927,  1178,  1147,  1149,  1151,  1152,   933,  1154,
   940,  1377,  1155,  1378,  1156,  1148,  1157,  1158,  1164,  1165,
  1168,  1419,  1169,  1212,  1170,  1181,  1182,  1247,  1183,  1191,
  1185,  1186,  1187,   124,   125,   126,   127,  1196,  1197,  1201,
   316,   317,   318,   319,   320,  1199,   321,   322,   323,   324,
   325,   326,   327,   328,   329,  1244,  1216,  1221,  1203,  1205,
   330,  1211,  1455,  1218,  1458,   988,  1219,   990,  1220,  1222,
  1224,  1257,  1194,  1263,  1225,  1266,  1226,  1230,   997,   998,
   999,  1231,  1232,  1002,  1003,  1004,  1005,  1006,  1007,  1008,
  1234,  1235,  1237,  1478,   132,   133,  1245,  1276,  1270,  1279,
   134,  1281,  1284,  1450,  1195,   137,  1283,  1285,   725,  1286,
   140,  1287,   726,  1289,  1291,  1292,  1294,  1295,  1298,  1297,
   316,   317,   318,   319,   320,   367,   321,   322,   323,   324,
   325,   326,   327,   328,   329,  1474,  1475,  1302,  1324,  1304,
   330,  1310,  1341,  1345,  1349,  1305,    91,   342,  1330,  1331,
  1311,  1484,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,  1325,  1322,  1350,  1080,
  1335,   318,   319,   320,   343,   321,   322,   323,   324,   325,
   326,   327,   328,   329,  1353,  1323,  1354,  1357,  1358,   330,
  1359,  1362,  1367,  1368,    38,    39,    40,    41,    42,    43,
  1326,  1369,  1327,  1328,  1333,  1337,  1343,    49,    50,   316,
   317,   318,   319,   320,  1371,   321,   322,   323,   324,   325,
   326,   327,   328,   329,  1372,  1373,  1374,  1379,  1380,   330,
  1382,  1387,  1135,  1383,  1385,   124,   125,   126,   127,  1144,
  1388,   316,   317,   318,   319,   320,  1389,   321,   322,   323,
   324,   325,   326,   327,   328,   329,  1390,  1391,  1163,  1392,
  1393,   330,  1395,  1394,  1401,  1405,  1408,  1411,  1396,  1414,
  1415,  1417,  1399,  1421,  1177,   316,   317,   318,   319,   320,
  1422,   321,   322,   323,   324,   325,   326,   327,   328,   329,
  1424,  1428,  1430,  1433,  1431,   330,   132,   344,  1432,  1434,
  1440,  1439,   134,  1466,  1435,   540,  1436,   137,  1441,  1444,
  1445,  1447,   140,  1449,   345,  1453,    91,   301,  1454,  1461,
  1456,  1459,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,  1464,    91,   537,  1467,
  1482,  1470,  1471,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,  1472,  1473,    91,
   301,  1479,  1483,  1485,  1489,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,  1490,
  1271,  1494,  1491,   594,  1275,   124,   125,   126,   127,  1493,
  1496,  1498,  1500,  1501,   316,   317,   318,   319,   320,  1290,
   321,   322,   323,   324,   325,   326,   327,   328,   329,  1503,
  1504,   813,     0,  1338,   330,    71,   124,   125,   126,   127,
   316,   317,   318,   319,   320,    79,   321,   322,   323,   324,
   325,   326,   327,   328,   329,  1085,     0,     0,     0,     0,
   330,     0,     0,     0,     0,     0,   132,   133,   124,   125,
   126,   127,   134,     0,     0,     0,     0,   137,     0,     0,
   863,     0,   140,     0,   864,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   132,   133,     0,
  1348,     0,     0,   134,     0,     0,     0,     0,   137,     0,
     0,  1360,  1361,   140,     0,   538,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1253,
  1254,     0,     0,     0,     0,   134,     0,     0,     0,     0,
  1255,   713,     0,     0,     0,   140,     0,   176,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,  1403,     0,    91,    92,    93,  1410,    94,     0,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,     0,   119,   120,   121,   122,     0,     0,
   123,     0,     0,     0,  1443,     0,     0,     0,     0,     0,
     0,     0,     0,  1452,     0,     0,    91,   301,   210,     0,
     0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,  1477,   119,   120,   121,
   122,     0,     0,   123,     0,     0,     0,     0,     0,     0,
     0,  1486,   124,   125,   126,   127,     0,     0,  1492,     0,
     0,     0,     0,  1495,     0,  1497,   316,   317,   318,   319,
   320,     0,   321,   322,   323,   324,   325,   326,   327,   328,
   329,     0,     0,     0,     0,     0,   330,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
   129,   130,   131,     0,     0,   124,   125,   126,   127,     0,
     0,     0,     0,   132,   133,     0,     0,     0,   866,   134,
   135,   136,     0,     0,   137,     0,   138,     0,   139,   140,
    91,   342,     0,     0,     0,     0,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     0,     0,   907,     0,     0,     0,   132,   133,   343,     0,
     0,     0,   134,     0,     0,     0,     0,   137,     0,     0,
     0,     0,   140,     0,     0,     0,     0,     0,    38,    39,
    40,    41,    42,    43,     0,     0,     0,     0,    91,   301,
     0,    49,    50,     0,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,     0,   124,
   125,   126,   127,    91,   537,     0,     0,     0,     0,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,     0,     0,     0,
   132,   497,     0,     0,     0,     0,   134,   124,   125,   126,
   127,   137,     0,     0,     0,     0,   140,   316,   317,   318,
   319,   320,     0,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,     0,
     0,     0,   124,   125,   126,   127,     0,   570,    23,    24,
   571,   572,    27,   573,    29,     0,    30,     0,    32,    33,
     0,    35,    36,     0,     0,     0,     0,     0,   132,   133,
     0,     0,     0,     0,   134,     0,     0,     0,    48,   137,
     0,     0,     0,     0,   140,     0,     0,    52,    53,    54,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   132,   133,    64,     0,     0,     0,   134,
     0,     0,     0,     0,   137,     0,     0,     0,     0,   140,
   570,    23,    24,   571,   572,    27,   573,    29,     0,    30,
     0,    32,    33,     0,    35,    36,     0,     0,     0,     0,
     0,   570,    23,    24,   571,   572,    27,   573,    29,     0,
    30,    48,    32,    33,     0,    35,    36,     0,     0,     0,
    52,    53,    54,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    48,     0,     0,     0,     0,     0,    64,     0,
     0,    52,    53,    54,     0,     0,     0,     0,   574,   570,
    23,    24,   571,   572,    27,   573,    29,     0,    30,    64,
    32,    33,     0,    35,    36,     0,     0,     0,     0,     0,
   570,    23,    24,   571,   572,    27,   573,    29,     0,    30,
    48,    32,    33,     0,    35,    36,     0,     0,     0,    52,
    53,    54,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,     0,     0,     0,    -4,     1,    64,    -4,   -47,
    52,    53,    54,     0,     0,     0,     0,     0,     0,     0,
     0,   580,     0,     0,     0,     0,     0,     0,    64,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -47,     0,
     0,     0,   597,   -47,   -47,     0,   -47,   -47,   -47,   -47,
   -47,   -47,   -47,   -47,     0,   -47,   -47,   -47,   -47,   -47,
   -47,   -47,     0,     0,     0,   -47,   -47,   -47,   -47,   -47,
   -47,   -47,     0,   -47,   -47,   -47,   -47,   -47,   215,   -47,
   -47,     0,     0,     0,     0,   -47,   -47,   -47,   -47,     0,
   598,     0,     0,   -47,     0,   -47,     0,   -47,   -47,   -47,
   -47,   -47,   -47,   -47,   -47,   -47,   -47,     0,     0,     0,
     0,   773,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    -4,
    -4,    -4,    -4,    -4,    -4,    -4,    -4,     0,     0,     0,
   216,   217,   218,     0,     0,     0,     0,     0,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,    18,     0,
     0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,     0,   239,   240,   241,
   242,   243,   244,     0,     0,     0,     0,    19,     0,     0,
     0,     0,    20,    21,     0,    22,    23,    24,    25,    26,
    27,    28,    29,     0,    30,    31,    32,    33,    34,    35,
    36,     0,     0,     0,    37,    38,    39,    40,    41,    42,
    43,     0,    44,    45,    46,    47,    48,     0,    49,    50,
     0,     0,     0,     0,    51,    52,    53,    54,     0,     0,
     0,     0,    55,     0,    56,     0,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,   570,    23,    24,   571,
   572,    27,   573,    29,     0,    30,     0,    32,    33,     0,
    35,    36,   316,   317,   318,   319,   320,     0,   321,   322,
   323,   324,   325,   326,   327,   328,   329,    48,     0,     0,
     0,     0,   330,     0,     0,     0,    52,    53,    54,  1113,
     0,  1114,     0,     0,     0,     0,     0,     0,     0,   316,
   317,   318,   319,   320,    64,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,     0,     0,     0,     0,     0,  1136,     0,  1137,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,     0,     0,     0,     0,     0,  1251,     0,  1252,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,     0,     0,   316,   317,   318,   319,   320,   734,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   316,   317,   318,
   319,   320,   738,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,     0,
     0,   316,   317,   318,   319,   320,   739,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,     0,     0,   316,   317,   318,   319,   320,
   862,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,     0,     0,   316,
   317,   318,   319,   320,   885,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,     0,     0,   316,   317,   318,   319,   320,  1111,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   316,   317,   318,
   319,   320,  1273,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,     0,
     0,   316,   317,   318,   319,   320,  1274,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,     0,     0,   316,   317,   318,   319,   320,
  1308,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,     0,     0,   316,
   317,   318,   319,   320,  1314,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,     0,     0,   316,   317,   318,   319,   320,  1317,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   316,   317,   318,
   319,   320,  1320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,     0,
     0,   316,   317,   318,   319,   320,  1321,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,     0,     0,   316,   317,   318,   319,   320,
  1344,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,     0,     0,   316,
   317,   318,   319,   320,  1381,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,     0,     0,   316,   317,   318,   319,   320,  1384,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   316,   317,   318,
   319,   320,  1386,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,     0,
     0,   316,   317,   318,   319,   320,  1398,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,     0,     0,   316,   317,   318,   319,   320,
  1481,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,     0,     0,   316,
   317,   318,   319,   320,  1488,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   495,     0,     0,     0,     0,   556,   316,   317,   318,
   319,   320,     0,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,   526,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,   556,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,   557,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
   591,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,   670,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,   671,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,   684,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,   685,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
   686,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,   687,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,   688,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,   689,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,   752,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
   753,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,   754,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,   852,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,   883,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,   884,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
   906,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,  1025,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,  1026,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,  1039,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,  1040,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
  1073,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,  1074,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,  1089,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,  1096,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,  1206,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
  1207,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,  1215,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,  1217,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,  1228,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,  1233,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
  1236,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,  1240,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,  1241,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,  1248,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,  1249,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   316,   317,   318,   319,   320,
  1329,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   316,   317,   318,
   319,   320,  1340,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   316,
   317,   318,   319,   320,  1342,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   316,   317,   318,   319,   320,  1465,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   316,   317,   318,   319,   320,  1480,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   501,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   634,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   649,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   651,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   653,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   655,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   657,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   659,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   661,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   663,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   665,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   667,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   669,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   673,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   675,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   677,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   679,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   681,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   683,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   755,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   761,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   764,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   765,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   833,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   958,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   960,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   962,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,   964,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,     0,     0,   965,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
     0,     0,  1087,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   495,   316,   317,   318,   319,
   320,     0,   321,   322,   323,   324,   325,   326,   327,   328,
   329,     0,     0,     0,     0,     0,   330,     0,   527,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   528,   316,   317,   318,   319,   320,     0,   321,   322,
   323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
     0,     0,   330,     0,   529,   316,   317,   318,   319,   320,
     0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   531,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
   533,   316,   317,   318,   319,   320,     0,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   534,   316,   317,   318,   319,   320,     0,
   321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     0,     0,     0,     0,   330,     0,   542,   316,   317,   318,
   319,   320,     0,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   585,
   316,   317,   318,   319,   320,     0,   321,   322,   323,   324,
   325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
   330,     0,   586,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   589,   316,   317,   318,   319,
   320,     0,   321,   322,   323,   324,   325,   326,   327,   328,
   329,     0,     0,     0,     0,     0,   330,     0,   595,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   648,   316,   317,   318,   319,   320,     0,   321,   322,
   323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
     0,     0,   330,     0,   650,   316,   317,   318,   319,   320,
     0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   652,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
   654,   316,   317,   318,   319,   320,     0,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   656,   316,   317,   318,   319,   320,     0,
   321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     0,     0,     0,     0,   330,     0,   658,   316,   317,   318,
   319,   320,     0,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   660,
   316,   317,   318,   319,   320,     0,   321,   322,   323,   324,
   325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
   330,     0,   662,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   664,   316,   317,   318,   319,
   320,     0,   321,   322,   323,   324,   325,   326,   327,   328,
   329,     0,     0,     0,     0,     0,   330,     0,   666,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   668,   316,   317,   318,   319,   320,     0,   321,   322,
   323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
     0,     0,   330,     0,   672,   316,   317,   318,   319,   320,
     0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   674,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
   676,   316,   317,   318,   319,   320,     0,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   678,   316,   317,   318,   319,   320,     0,
   321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     0,     0,     0,     0,   330,     0,   680,   316,   317,   318,
   319,   320,     0,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   682,
   316,   317,   318,   319,   320,     0,   321,   322,   323,   324,
   325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
   330,     0,   720,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   722,   316,   317,   318,   319,
   320,     0,   321,   322,   323,   324,   325,   326,   327,   328,
   329,     0,     0,     0,     0,     0,   330,     0,   735,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   736,   316,   317,   318,   319,   320,     0,   321,   322,
   323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
     0,     0,   330,     0,   740,   316,   317,   318,   319,   320,
     0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   741,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
   742,   316,   317,   318,   319,   320,     0,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,   743,   316,   317,   318,   319,   320,     0,
   321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     0,     0,     0,     0,   330,     0,   744,   316,   317,   318,
   319,   320,     0,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,   769,
   316,   317,   318,   319,   320,     0,   321,   322,   323,   324,
   325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
   330,     0,   776,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,   957,   316,   317,   318,   319,
   320,     0,   321,   322,   323,   324,   325,   326,   327,   328,
   329,     0,     0,     0,     0,     0,   330,     0,   959,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,   961,   316,   317,   318,   319,   320,     0,   321,   322,
   323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
     0,     0,   330,     0,   963,   316,   317,   318,   319,   320,
     0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,   969,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
  1029,   316,   317,   318,   319,   320,     0,   321,   322,   323,
   324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
     0,   330,     0,  1112,   316,   317,   318,   319,   320,     0,
   321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     0,     0,     0,     0,   330,     0,  1140,   316,   317,   318,
   319,   320,     0,   321,   322,   323,   324,   325,   326,   327,
   328,   329,     0,     0,     0,     0,     0,   330,     0,  1223,
   316,   317,   318,   319,   320,     0,   321,   322,   323,   324,
   325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
   330,     0,  1227,   316,   317,   318,   319,   320,     0,   321,
   322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     0,     0,     0,   330,     0,  1229,   316,   317,   318,   319,
   320,     0,   321,   322,   323,   324,   325,   326,   327,   328,
   329,     0,     0,     0,     0,     0,   330,     0,  1332,   316,
   317,   318,   319,   320,     0,   321,   322,   323,   324,   325,
   326,   327,   328,   329,     0,     0,     0,     0,     0,   330,
     0,  1334,   316,   317,   318,   319,   320,     0,   321,   322,
   323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
     0,     0,   330,     0,  1336,   316,   317,   318,   319,   320,
     0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     0,     0,     0,     0,     0,   330,     0,  1339,   316,   317,
   318,   319,   320,     0,   321,   322,   323,   324,   325,   326,
   327,   328,   329,     0,     0,     0,     0,     0,   330,     0,
  1397
};

static const short yycheck[] = {    18,
    65,    66,   373,     3,    89,   309,   185,     5,     3,   188,
     4,   710,   345,     4,     4,     4,    45,     4,  1260,     4,
     6,    18,  1264,     5,     4,  1267,     4,     3,     6,    67,
     7,    85,   211,     4,   213,    67,    34,    35,    36,    37,
  1131,     6,    40,     5,     7,    68,    68,    67,     6,     6,
    73,    73,    34,    35,    36,    37,     6,   174,    40,  1030,
  1031,   307,   163,   164,   181,     6,   175,     6,   163,   164,
     6,   180,    34,    35,    36,    37,   163,   164,    40,     4,
   181,   174,    76,    77,    78,    79,   181,    76,    77,    78,
    79,   163,   164,   180,    52,    52,     6,   175,    68,   345,
   174,    68,   180,    73,   163,   164,    73,   181,   180,     6,
   182,   163,   164,   132,   133,   134,   163,   164,   137,   138,
   174,   180,   141,   182,   163,   164,  1217,   174,   180,   148,
   182,   150,   151,   152,   181,   154,   174,   156,   157,     6,
   159,   180,   174,   181,     4,   174,   845,     6,   124,   125,
   126,   127,   128,   129,   130,   131,   175,   176,  1400,   182,
   182,   181,  1404,    88,    89,  1407,   174,    44,    45,  1203,
    47,  1205,   149,   150,   151,   152,    68,   196,   197,    68,
   199,    73,   201,   181,    73,   204,   205,   180,   182,   182,
   181,   181,   525,   182,   181,   181,   181,   501,   176,   181,
  1442,   181,   174,   174,  1446,   538,  1448,  1178,   170,   171,
  1046,     6,   182,   163,   164,   182,   178,    67,   397,  1055,
    39,    40,   163,   164,   163,   164,  1062,   174,    88,    89,
   249,   296,   297,   298,   299,   254,   255,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,     7,    68,   525,
   979,    68,    41,    73,    68,    44,    73,   174,   307,    73,
   182,   174,   538,   182,   181,   163,   164,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   309,   181,     8,   163,   164,   174,   337,   175,
   339,   163,   164,   174,   180,   344,   345,   174,   163,   164,
   163,   164,   180,   175,   353,   354,   355,   174,   357,   358,
   359,   360,   361,   362,   363,   180,  1380,   180,   174,  1383,
   176,  1385,   174,   172,   176,   174,   375,   376,   377,   378,
   693,   180,   163,   164,   383,   174,    49,   176,   387,   388,
     4,     5,   372,   373,   393,     6,     7,   372,   373,   180,
     5,     7,  1218,   402,   175,   174,  1222,   163,   164,   180,
  1424,    45,   182,   726,  1428,   182,  1430,     7,   182,    47,
    34,    35,    36,    37,   180,   174,    40,   176,    45,    34,
    35,    36,    37,   163,   164,    40,    45,   163,   164,   149,
   150,   151,   152,   756,   757,   758,   759,   163,   164,   174,
   180,     6,    41,   252,   180,    44,    45,   502,    47,   175,
   170,   171,   181,   170,   171,    68,   443,   693,   178,   176,
    73,   178,   170,   171,   700,     8,   165,   166,   167,   153,
   154,   155,   156,   157,   173,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   181,   494,   175,    45,   497,   173,
   726,   180,    57,   174,   503,   176,  1185,     6,   182,   175,
  1326,  1327,  1328,  1329,   180,   170,   171,  1333,   163,   164,
   165,   166,   167,   178,   501,     4,   525,   526,   173,   175,
   756,   757,   758,   759,   180,     6,   535,   536,   174,   538,
   176,   540,   541,   149,   150,   151,   152,   546,   174,     4,
   176,   864,    41,   837,   838,    44,    45,   556,   557,   149,
   150,   151,   152,     4,   170,   171,   565,   174,   176,   176,
   178,   370,   371,  1389,  1390,    58,    59,  1393,   577,   174,
   170,   171,   174,    61,    62,    63,    64,   174,    66,   634,
     6,   174,   591,   176,   593,   594,    74,    75,   153,   154,
   155,   156,   157,     4,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   174,   174,   176,   176,  1433,   173,     4,
   153,   154,   155,   156,   157,    45,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     6,   174,   174,   864,   176,
   173,   180,   175,   182,     5,   170,   171,     6,     7,   694,
  1466,   176,   174,   178,   170,   171,   174,   634,   170,   171,
   176,   174,   178,  1014,   176,   174,   178,  1483,   174,   174,
   176,   670,   671,     6,   109,   110,   111,   112,   113,   174,
     4,   176,  1498,     6,     6,   684,   685,   686,   687,   688,
   689,   690,     5,   174,   693,   176,   181,   158,   697,   174,
   174,   700,   163,     4,   703,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   713,   174,   174,   176,   176,   173,
   176,   174,   174,   176,   176,   186,   174,   726,   176,   728,
   191,   192,   174,   180,   176,   182,   180,   174,   182,     6,
   180,   180,   182,   182,   809,   181,   180,   180,   182,   182,
   180,   180,   182,   182,   181,   174,   555,   756,   757,   758,
   759,   174,   174,   762,   763,   180,   180,   182,   182,   768,
   180,   180,   182,   182,   180,   180,   182,   182,   174,   778,
   779,   174,   153,   154,   155,   156,   157,   174,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   180,   180,   182,
   182,   181,   173,   181,   181,     6,   176,   176,   181,    91,
   178,     6,   174,     6,     6,     5,   815,   816,   174,   174,
   153,   154,   155,   156,   157,   174,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   174,   174,   174,     6,   174,
   173,   175,   174,   174,   174,   174,  1197,   846,   174,   174,
     4,     7,   180,   852,   174,   174,   833,   174,   174,   174,
   174,   838,   174,   174,   174,   864,   174,   866,   174,   868,
   174,   174,   174,   180,   174,   174,   174,     5,   173,   175,
     7,   178,   176,   882,   883,   884,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,     7,     7,     6,    86,     7,   173,   906,   907,   908,
     7,    88,   181,     5,     5,     5,     5,     5,   717,     5,
     5,     5,     3,     4,   142,     5,   971,     5,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,   951,   752,   753,   754,     5,   956,     5,     5,
     5,   180,     6,     5,     5,  1010,     5,     5,     5,     5,
     5,   948,     5,   972,     5,     5,     5,     5,     5,     3,
     5,   780,     5,   180,     6,   153,   154,   155,   156,   157,
   789,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     6,  1000,  1001,  1068,     5,   173,   175,     6,   175,     4,
     6,  1010,   177,     7,     7,     7,     7,     7,     7,     7,
   178,   102,   103,   104,   105,   182,  1025,  1026,     7,   182,
   181,   181,     7,   174,  1014,   496,     7,   180,  1037,  1014,
  1039,   178,   180,     5,   180,   180,   180,   180,   180,   180,
  1049,   180,   175,   174,   180,   180,   180,  1056,  1057,  1058,
   180,   180,   180,   180,  1063,   180,   180,   180,  1067,   180,
   180,   180,   180,   180,  1073,  1074,   180,     6,     4,   180,
   180,   180,   163,   164,   180,   180,   180,   174,   169,     6,
  1089,     6,     6,   174,   177,     7,   177,  1096,   179,   181,
   181,   176,     6,     3,     7,     7,     7,   181,     7,   153,
   154,   155,   156,   157,  1113,   159,   160,   161,   162,   163,
   164,   165,   166,   167,     7,     7,     7,     7,     7,   173,
     7,     7,     7,     4,     6,     4,     6,  1136,     6,  1138,
     6,     3,     7,     7,     3,   165,     3,   153,   154,   155,
   156,   157,     3,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     3,     3,     3,     3,     3,   173,     3,     3,
     3,     3,   174,     3,     5,  1174,     5,     3,     6,     4,
  1179,   181,     6,   181,     7,     6,   985,     6,   987,   156,
   157,   175,   159,   160,   161,   162,   163,   164,   165,   166,
   167,  1200,   175,  1202,   178,  1204,   173,  1206,  1207,     6,
     6,     6,     6,  1212,    87,   181,  1015,  1197,  1017,   180,
  1019,  1220,  1197,     6,   180,   175,   180,   175,   180,  1228,
   175,   180,   175,   180,  1233,   175,   180,  1236,   180,   180,
     6,  1240,  1241,   180,   180,   180,   180,   175,   180,  1248,
   180,   175,  1251,   180,  1253,  1254,  1255,   718,   719,   180,
   721,   180,   723,   724,     3,     4,     6,   180,   178,   180,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     4,     6,    87,     6,     6,  1298,
     6,     6,     6,     6,     6,   766,   767,     6,     6,   770,
  1309,     6,     6,     6,   177,     6,  1315,     6,     6,  1318,
     6,     6,     6,     6,     6,   786,   787,     7,     3,     6,
     3,   792,   793,   181,     6,     6,     6,     3,   799,     6,
   801,  1340,     3,  1342,     6,   165,     6,     3,     6,     3,
     3,  1396,     3,    84,     6,     4,     6,    89,     6,   177,
     7,     6,   178,   102,   103,   104,   105,     6,   181,   181,
   153,   154,   155,   156,   157,   182,   159,   160,   161,   162,
   163,   164,   165,   166,   167,     6,   175,   175,   181,   181,
   173,   181,  1437,   180,  1439,   856,   180,   858,   180,   180,
   180,  1200,     6,  1202,   175,  1204,   175,   180,   869,   870,
   871,   175,   175,   874,   875,   876,   877,   878,   879,   880,
   180,   175,   180,  1468,   163,   164,   175,     6,    87,     3,
   169,     6,     3,  1432,     6,   174,     6,     6,   177,     6,
   179,     6,   181,     6,     6,     6,     3,     6,   181,     5,
   153,   154,   155,   156,   157,  1254,   159,   160,   161,   162,
   163,   164,   165,   166,   167,  1464,  1465,     6,     6,     5,
   173,     6,     6,     6,     6,   182,     3,     4,   175,   175,
   181,  1480,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   182,   181,     6,   970,
   175,   155,   156,   157,    41,   159,   160,   161,   162,   163,
   164,   165,   166,   167,     6,   180,     6,     6,     6,   173,
     6,     6,     6,     6,    61,    62,    63,    64,    65,    66,
   180,     6,   180,   180,   180,   180,   180,    74,    75,   153,
   154,   155,   156,   157,     6,   159,   160,   161,   162,   163,
   164,   165,   166,   167,     6,     6,     5,     5,   181,   173,
   180,   180,  1033,   181,   181,   102,   103,   104,   105,  1040,
   182,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   180,   175,  1059,   175,
   180,   173,     6,   180,     6,     6,     6,    84,   181,     6,
     6,     5,   180,     6,  1075,   153,   154,   155,   156,   157,
     5,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   181,   181,   181,   180,   182,   173,   163,   164,   181,   180,
   182,   181,   169,   180,   175,     8,   175,   174,     6,     6,
     6,     6,   179,    84,   181,     6,     3,     4,     6,   182,
     6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   181,     3,     4,   180,
   180,     6,     6,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     6,     6,     3,
     4,     6,   180,     6,   180,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,   175,
  1211,   180,     6,     8,  1215,   102,   103,   104,   105,     6,
   180,   180,   175,     6,   153,   154,   155,   156,   157,  1230,
   159,   160,   161,   162,   163,   164,   165,   166,   167,     0,
     0,   636,    -1,  1298,   173,     3,   102,   103,   104,   105,
   153,   154,   155,   156,   157,     3,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   975,    -1,    -1,    -1,    -1,
   173,    -1,    -1,    -1,    -1,    -1,   163,   164,   102,   103,
   104,   105,   169,    -1,    -1,    -1,    -1,   174,    -1,    -1,
   177,    -1,   179,    -1,   181,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,
  1311,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,    -1,
    -1,  1322,  1323,   179,    -1,   181,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,
   164,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,
   174,     8,    -1,    -1,    -1,   179,    -1,   181,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,  1382,    -1,     3,     4,     5,  1387,     7,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    34,    35,    36,    37,    -1,    -1,
    40,    -1,    -1,    -1,  1425,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1434,    -1,    -1,     3,     4,     5,    -1,
    -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,  1467,    34,    35,    36,
    37,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1482,   102,   103,   104,   105,    -1,    -1,  1489,    -1,
    -1,    -1,    -1,  1494,    -1,  1496,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,
   150,   151,   152,    -1,    -1,   102,   103,   104,   105,    -1,
    -1,    -1,    -1,   163,   164,    -1,    -1,    -1,     8,   169,
   170,   171,    -1,    -1,   174,    -1,   176,    -1,   178,   179,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    -1,     8,    -1,    -1,    -1,   163,   164,    41,    -1,
    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,    -1,    -1,
    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    61,    62,
    63,    64,    65,    66,    -1,    -1,    -1,    -1,     3,     4,
    -1,    74,    75,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,   102,
   103,   104,   105,     3,     4,    -1,    -1,    -1,    -1,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
   163,   164,    -1,    -1,    -1,    -1,   169,   102,   103,   104,
   105,   174,    -1,    -1,    -1,    -1,   179,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,    -1,   102,   103,   104,   105,    -1,    41,    42,    43,
    44,    45,    46,    47,    48,    -1,    50,    -1,    52,    53,
    -1,    55,    56,    -1,    -1,    -1,    -1,    -1,   163,   164,
    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    72,   174,
    -1,    -1,    -1,    -1,   179,    -1,    -1,    81,    82,    83,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   163,   164,    99,    -1,    -1,    -1,   169,
    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,   179,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    -1,    52,    53,    -1,    55,    56,    -1,    -1,    -1,    -1,
    -1,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
    50,    72,    52,    53,    -1,    55,    56,    -1,    -1,    -1,
    81,    82,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    99,    -1,
    -1,    81,    82,    83,    -1,    -1,    -1,    -1,   182,    41,
    42,    43,    44,    45,    46,    47,    48,    -1,    50,    99,
    52,    53,    -1,    55,    56,    -1,    -1,    -1,    -1,    -1,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
    72,    52,    53,    -1,    55,    56,    -1,    -1,    -1,    81,
    82,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    -1,    -1,    -1,     0,     1,    99,     3,     4,
    81,    82,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   182,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
    -1,    -1,   182,    38,    39,    -1,    41,    42,    43,    44,
    45,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
    55,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
    65,    66,    -1,    68,    69,    70,    71,    72,    44,    74,
    75,    -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,
   182,    -1,    -1,    88,    -1,    90,    -1,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
    -1,   182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
   125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
   106,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,     4,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,    -1,   143,   144,   145,
   146,   147,   148,    -1,    -1,    -1,    -1,    33,    -1,    -1,
    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
    46,    47,    48,    -1,    50,    51,    52,    53,    54,    55,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    -1,    68,    69,    70,    71,    72,    -1,    74,    75,
    -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
    -1,    -1,    88,    -1,    90,    -1,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,    41,    42,    43,    44,
    45,    46,    47,    48,    -1,    50,    -1,    52,    53,    -1,
    55,    56,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    72,    -1,    -1,
    -1,    -1,   173,    -1,    -1,    -1,    81,    82,    83,   180,
    -1,   182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,
   154,   155,   156,   157,    99,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,   182,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,   182,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   182,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   182,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   182,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   182,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   182,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   182,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   182,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   182,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   182,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   182,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   182,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   182,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   153,   154,   155,   156,   157,   182,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,   154,   155,
   156,   157,   182,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
    -1,   153,   154,   155,   156,   157,   182,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,    -1,   153,   154,   155,   156,   157,
   182,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   153,
   154,   155,   156,   157,   182,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,    -1,    -1,    -1,    -1,   180,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,   154,   155,
   156,   157,   180,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   153,
   154,   155,   156,   157,   180,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   153,   154,   155,   156,   157,   180,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   153,   154,   155,   156,   157,   180,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 160 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 6:
#line 176 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 177 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 178 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 183 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 10:
#line 188 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 14:
#line 199 "Gmsh.y"
{
    ;
    break;}
case 15:
#line 202 "Gmsh.y"
{
    ;
    break;}
case 16:
#line 206 "Gmsh.y"
{
    ;
    break;}
case 17:
#line 212 "Gmsh.y"
{
      Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 18:
#line 218 "Gmsh.y"
{
      Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 19:
#line 225 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 20:
#line 231 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 21:
#line 235 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 22:
#line 239 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 23:
#line 246 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 24:
#line 250 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 25:
#line 255 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 26:
#line 259 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 27:
#line 263 "Gmsh.y"
{
    ;
    break;}
case 28:
#line 267 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 29:
#line 271 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 30:
#line 275 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 279 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 32:
#line 283 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 33:
#line 289 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 292 "Gmsh.y"
{
    ;
    break;}
case 35:
#line 295 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 36:
#line 299 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 37:
#line 303 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 38:
#line 307 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 39:
#line 311 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 316 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 319 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 323 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 326 "Gmsh.y"
{
    ;
    break;}
case 44:
#line 330 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 333 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 336 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 348 "Gmsh.y"
{ return 1; ;
    break;}
case 50:
#line 349 "Gmsh.y"
{ return 1; ;
    break;}
case 51:
#line 350 "Gmsh.y"
{ return 1; ;
    break;}
case 52:
#line 351 "Gmsh.y"
{ return 1; ;
    break;}
case 53:
#line 352 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 54:
#line 353 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 55:
#line 354 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 355 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 356 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 357 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 59:
#line 358 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 359 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 360 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 361 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 366 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 64:
#line 371 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 65:
#line 389 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-4].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 66:
#line 396 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View") && !CheckViewErrorFlags(View)){
	EndView(View, 0, yyname, yyvsp[-6].c);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-6].c); Free(yyvsp[-5].c);
    ;
    break;}
case 67:
#line 406 "Gmsh.y"
{
      View = BeginView(1); 
      for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++){
	ViewErrorFlags[i] = 0;
      }
    ;
    break;}
case 73:
#line 421 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 74:
#line 423 "Gmsh.y"
{ ViewCoord[ViewCoordIdx] = yyvsp[0].d; ViewCoordIdx++; ;
    break;}
case 75:
#line 428 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 76:
#line 430 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 77:
#line 435 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewElementIdx = 0; ViewNumNodes = 1; ViewNumComp = 1;
	ViewValueList = View->SP; ViewNumList = &View->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewElementIdx = 1; ViewNumNodes = 1; ViewNumComp = 3;
	ViewValueList = View->VP; ViewNumList = &View->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewElementIdx = 2; ViewNumNodes = 1; ViewNumComp = 9;
	ViewValueList = View->TP; ViewNumList = &View->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewElementIdx = 3; ViewNumNodes = 2; ViewNumComp = 1;
	ViewValueList = View->SL; ViewNumList = &View->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewElementIdx = 4; ViewNumNodes = 2; ViewNumComp = 3;
	ViewValueList = View->VL; ViewNumList = &View->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewElementIdx = 5; ViewNumNodes = 2; ViewNumComp = 9;
	ViewValueList = View->TL; ViewNumList = &View->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewElementIdx = 6; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->ST; ViewNumList = &View->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewElementIdx = 7; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VT; ViewNumList = &View->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewElementIdx = 8; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TT; ViewNumList = &View->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewElementIdx = 9; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SQ; ViewNumList = &View->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewElementIdx = 10; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VQ; ViewNumList = &View->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewElementIdx = 11; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TQ; ViewNumList = &View->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewElementIdx = 12; ViewNumNodes = 4; ViewNumComp = 1;
	ViewValueList = View->SS; ViewNumList = &View->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewElementIdx = 13; ViewNumNodes = 4; ViewNumComp = 3;
	ViewValueList = View->VS; ViewNumList = &View->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewElementIdx = 14; ViewNumNodes = 4; ViewNumComp = 9;
	ViewValueList = View->TS; ViewNumList = &View->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewElementIdx = 15; ViewNumNodes = 8; ViewNumComp = 1;
	ViewValueList = View->SH; ViewNumList = &View->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewElementIdx = 16; ViewNumNodes = 8; ViewNumComp = 3;
	ViewValueList = View->VH; ViewNumList = &View->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewElementIdx = 17; ViewNumNodes = 8; ViewNumComp = 9;
	ViewValueList = View->TH; ViewNumList = &View->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewElementIdx = 18; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->SI; ViewNumList = &View->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewElementIdx = 19; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VI; ViewNumList = &View->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewElementIdx = 20; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TI; ViewNumList = &View->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewElementIdx = 21; ViewNumNodes = 5; ViewNumComp = 1;
	ViewValueList = View->SY; ViewNumList = &View->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewElementIdx = 22; ViewNumNodes = 5; ViewNumComp = 3;
	ViewValueList = View->VY; ViewNumList = &View->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewElementIdx = 23; ViewNumNodes = 5; ViewNumComp = 9;
	ViewValueList = View->TY; ViewNumList = &View->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewElementIdx = 3; ViewNumNodes = 3; ViewNumComp = 1;
	ViewValueList = View->SL2; ViewNumList = &View->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewElementIdx = 4; ViewNumNodes = 3; ViewNumComp = 3;
	ViewValueList = View->VL2; ViewNumList = &View->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewElementIdx = 5; ViewNumNodes = 3; ViewNumComp = 9;
	ViewValueList = View->TL2; ViewNumList = &View->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewElementIdx = 6; ViewNumNodes = 6; ViewNumComp = 1;
	ViewValueList = View->ST2; ViewNumList = &View->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewElementIdx = 7; ViewNumNodes = 6; ViewNumComp = 3;
	ViewValueList = View->VT2; ViewNumList = &View->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewElementIdx = 8; ViewNumNodes = 6; ViewNumComp = 9;
	ViewValueList = View->TT2; ViewNumList = &View->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewElementIdx = 9; ViewNumNodes = 9; ViewNumComp = 1;
	ViewValueList = View->SQ2; ViewNumList = &View->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewElementIdx = 10; ViewNumNodes = 9; ViewNumComp = 3;
	ViewValueList = View->VQ2; ViewNumList = &View->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewElementIdx = 11; ViewNumNodes = 9; ViewNumComp = 9;
	ViewValueList = View->TQ2; ViewNumList = &View->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewElementIdx = 12; ViewNumNodes = 10; ViewNumComp = 1;
	ViewValueList = View->SS2; ViewNumList = &View->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewElementIdx = 13; ViewNumNodes = 10; ViewNumComp = 3;
	ViewValueList = View->VS2; ViewNumList = &View->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewElementIdx = 14; ViewNumNodes = 10; ViewNumComp = 9;
	ViewValueList = View->TS2; ViewNumList = &View->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewElementIdx = 15; ViewNumNodes = 27; ViewNumComp = 1;
	ViewValueList = View->SH2; ViewNumList = &View->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewElementIdx = 16; ViewNumNodes = 27; ViewNumComp = 3;
	ViewValueList = View->VH2; ViewNumList = &View->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewElementIdx = 17; ViewNumNodes = 27; ViewNumComp = 9;
	ViewValueList = View->TH2; ViewNumList = &View->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewElementIdx = 18; ViewNumNodes = 18; ViewNumComp = 1;
	ViewValueList = View->SI2; ViewNumList = &View->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewElementIdx = 19; ViewNumNodes = 18; ViewNumComp = 3;
	ViewValueList = View->VI2; ViewNumList = &View->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewElementIdx = 20; ViewNumNodes = 18; ViewNumComp = 9;
	ViewValueList = View->TI2; ViewNumList = &View->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewElementIdx = 21; ViewNumNodes = 14; ViewNumComp = 1;
	ViewValueList = View->SY2; ViewNumList = &View->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewElementIdx = 22; ViewNumNodes = 14; ViewNumComp = 3;
	ViewValueList = View->VY2; ViewNumList = &View->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewElementIdx = 23; ViewNumNodes = 14; ViewNumComp = 9;
	ViewValueList = View->TY2; ViewNumList = &View->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewElementIdx = -1; ViewNumNodes = 0; ViewNumComp = 0;
	ViewValueList = NULL; ViewNumList = NULL;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 78:
#line 625 "Gmsh.y"
{
      if(ViewValueList){
	if(ViewCoordIdx != 3 * ViewNumNodes){
	  yymsg(GERROR, "Wrong number of node coordinates (%d != %d)", 
		ViewCoordIdx, 3 * ViewNumNodes);
	  double d = 0;
	  for(int i = 0; i < 3 * ViewNumNodes; i++)
	    List_Add(ViewValueList, &d);
	}
	else{
	  for(int i = 0; i < 3; i++)
	    for(int j = 0; j < ViewNumNodes; j++)
	      List_Add(ViewValueList, &ViewCoord[3*j+i]);
	}
	ViewNumListTmp = List_Nbr(ViewValueList);
      }
    ;
    break;}
case 79:
#line 643 "Gmsh.y"
{
      if(ViewValueList){  
	if((List_Nbr(ViewValueList) - ViewNumListTmp) % (ViewNumComp * ViewNumNodes)) 
	  ViewErrorFlags[ViewElementIdx]++;
	(*ViewNumList)++;
      }
    ;
    break;}
case 80:
#line 654 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 81:
#line 659 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 82:
#line 667 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 83:
#line 674 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 84:
#line 681 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 85:
#line 686 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 86:
#line 694 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 87:
#line 701 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 88:
#line 709 "Gmsh.y"
{
      View->adaptive = new Adaptive_Post_View(View, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 89:
#line 716 "Gmsh.y"
{
      ViewValueList = View->Time;
    ;
    break;}
case 90:
#line 720 "Gmsh.y"
{
    ;
    break;}
case 91:
#line 727 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 92:
#line 728 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 93:
#line 729 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 94:
#line 730 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 95:
#line 731 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 96:
#line 735 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 97:
#line 736 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 98:
#line 744 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 99:
#line 775 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 100:
#line 814 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 101:
#line 868 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 102:
#line 885 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 103:
#line 896 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 104:
#line 915 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 105:
#line 929 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 106:
#line 946 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 107:
#line 972 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 108:
#line 999 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 109:
#line 1013 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 110:
#line 1030 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 111:
#line 1044 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 112:
#line 1061 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 113:
#line 1081 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 114:
#line 1104 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 115:
#line 1114 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 116:
#line 1133 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 117:
#line 1149 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 118:
#line 1165 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 119:
#line 1184 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 120:
#line 1203 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 121:
#line 1221 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 122:
#line 1239 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 123:
#line 1257 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 124:
#line 1283 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 125:
#line 1301 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 126:
#line 1328 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 127:
#line 1347 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 128:
#line 1371 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 129:
#line 1395 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 130:
#line 1421 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 131:
#line 1438 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 132:
#line 1456 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 133:
#line 1475 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 134:
#line 1494 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d), THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 135:
#line 1533 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 136:
#line 1560 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 137:
#line 1579 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 138:
#line 1596 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 139:
#line 1612 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 140:
#line 1632 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 141:
#line 1649 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 142:
#line 1666 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 143:
#line 1687 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 144:
#line 1692 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 145:
#line 1697 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 146:
#line 1702 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 147:
#line 1709 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 148:
#line 1710 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 149:
#line 1711 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 150:
#line 1716 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 151:
#line 1720 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 152:
#line 1724 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 153:
#line 1740 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 154:
#line 1756 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 155:
#line 1772 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 156:
#line 1793 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 157:
#line 1807 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 158:
#line 1813 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 0);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 159:
#line 1819 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) AliasView((int)yyvsp[-2].d, 1);
      Free(yyvsp[-4].c);
      yyval.l = NULL;
    ;
    break;}
case 160:
#line 1831 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 161:
#line 1840 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	RemoveViewByIndex((int)yyvsp[-2].d);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 162:
#line 1850 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	Init_Mesh(THEM);
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(THEM->PhysicalGroups, Free_PhysicalGroup);
	List_Reset(THEM->PhysicalGroups);
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      }
      Free(yyvsp[-1].c);
    ;
    break;}
case 163:
#line 1864 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = List_Nbr(CTX.post.list) - 1; i >= 0; i--){
	  Post_View *v = *(Post_View **) List_Pointer(CTX.post.list, i);
	  if(v->empty())
	    RemoveViewByIndex(i);
	}
      }
      else{
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 164:
#line 1883 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 165:
#line 1897 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
      Free(yyvsp[-1].c);
    ;
    break;}
case 166:
#line 1905 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 167:
#line 1911 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 168:
#line 1922 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 169:
#line 1936 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 170:
#line 1980 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View **vv = (Post_View **)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(vv){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(*vv, tmpstring, CTX.post.file_format, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 171:
#line 1995 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 172:
#line 2011 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 173:
#line 2021 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	CombineViews(0, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	CombineViews(0, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	CombineViews(1, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	CombineViews(1, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(0, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews(1, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 174:
#line 2043 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 175:
#line 2047 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 176:
#line 2051 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 177:
#line 2055 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 178:
#line 2068 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 179:
#line 2083 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 180:
#line 2099 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 181:
#line 2125 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 182:
#line 2152 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else{
	  ImbricatedLoop--;
	}
      }
    ;
    break;}
case 183:
#line 2184 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 184:
#line 2191 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 185:
#line 2196 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 186:
#line 2202 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 187:
#line 2206 "Gmsh.y"
{
    ;
    break;}
case 188:
#line 2217 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 189:
#line 2233 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 190:
#line 2249 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 191:
#line 2265 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 192:
#line 2270 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 193:
#line 2286 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 194:
#line 2291 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 195:
#line 2307 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 196:
#line 2312 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pc){
	TheShape.Num = pc->Num;
	TheShape.Type = pc->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 197:
#line 2330 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 198:
#line 2353 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 199:
#line 2376 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 200:
#line 2399 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 201:
#line 2404 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 202:
#line 2427 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 203:
#line 2432 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 204:
#line 2455 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 205:
#line 2460 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(ps){
	TheShape.Num = ps->Num;
	TheShape.Type = ps->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 206:
#line 2486 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 207:
#line 2509 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 208:
#line 2532 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    &pv, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 209:
#line 2555 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 210:
#line 2560 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 211:
#line 2583 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 212:
#line 2589 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 213:
#line 2612 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 214:
#line 2618 "Gmsh.y"
{
      Volume *pv;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    &pv, &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(2, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
      if(pv){
	TheShape.Num = pv->Num;
	TheShape.Type = pv->Typ;
	List_Add(yyval.l, &TheShape);
      }
    ;
    break;}
case 215:
#line 2644 "Gmsh.y"
{
    ;
    break;}
case 216:
#line 2647 "Gmsh.y"
{
    ;
    break;}
case 217:
#line 2653 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 218:
#line 2679 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 219:
#line 2703 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 220:
#line 2712 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 221:
#line 2730 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 222:
#line 2748 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 223:
#line 2766 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 224:
#line 2794 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , (int)yyvsp[-4].d, k);
        else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 2821 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 2848 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 227:
#line 2862 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 2881 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 229:
#line 2885 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 230:
#line 2894 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 231:
#line 2895 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 232:
#line 2896 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 233:
#line 2897 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 234:
#line 2898 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 2902 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 236:
#line 2903 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 237:
#line 2904 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 238:
#line 2905 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 239:
#line 2906 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 240:
#line 2907 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 241:
#line 2908 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 242:
#line 2909 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 243:
#line 2911 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 244:
#line 2917 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 245:
#line 2918 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 246:
#line 2919 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 247:
#line 2920 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 248:
#line 2921 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 249:
#line 2922 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 250:
#line 2923 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 251:
#line 2924 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 252:
#line 2925 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 253:
#line 2926 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 254:
#line 2927 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 255:
#line 2928 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 256:
#line 2929 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 257:
#line 2930 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 258:
#line 2931 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2932 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 260:
#line 2933 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2934 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 262:
#line 2935 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 263:
#line 2936 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 264:
#line 2937 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 265:
#line 2938 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 266:
#line 2939 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 267:
#line 2940 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 268:
#line 2941 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2942 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 270:
#line 2943 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 271:
#line 2944 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 272:
#line 2945 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 273:
#line 2946 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 274:
#line 2947 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 275:
#line 2948 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 276:
#line 2950 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 277:
#line 2951 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 278:
#line 2952 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 279:
#line 2953 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2954 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 281:
#line 2955 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2956 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 283:
#line 2957 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 284:
#line 2958 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 285:
#line 2959 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 286:
#line 2960 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 287:
#line 2961 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 288:
#line 2962 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 289:
#line 2963 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 290:
#line 2964 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 291:
#line 2965 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 292:
#line 2966 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 293:
#line 2967 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 294:
#line 2968 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 295:
#line 2969 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 296:
#line 2970 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 297:
#line 2979 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 298:
#line 2980 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 299:
#line 2981 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 300:
#line 2982 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 301:
#line 2983 "Gmsh.y"
{ yyval.d = GMSH_MAJOR_VERSION; ;
    break;}
case 302:
#line 2984 "Gmsh.y"
{ yyval.d = GMSH_MINOR_VERSION; ;
    break;}
case 303:
#line 2985 "Gmsh.y"
{ yyval.d = GMSH_PATCH_VERSION; ;
    break;}
case 304:
#line 2990 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 305:
#line 3003 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 306:
#line 3023 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 307:
#line 3037 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 308:
#line 3050 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 309:
#line 3073 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 310:
#line 3091 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 311:
#line 3109 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 312:
#line 3127 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 313:
#line 3145 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 314:
#line 3153 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 315:
#line 3157 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 316:
#line 3161 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 317:
#line 3165 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 318:
#line 3169 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 319:
#line 3176 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 320:
#line 3180 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 321:
#line 3184 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 322:
#line 3188 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 323:
#line 3195 "Gmsh.y"
{
    ;
    break;}
case 324:
#line 3198 "Gmsh.y"
{
    ;
    break;}
case 325:
#line 3204 "Gmsh.y"
{
    ;
    break;}
case 326:
#line 3207 "Gmsh.y"
{
    ;
    break;}
case 327:
#line 3213 "Gmsh.y"
{
    ;
    break;}
case 328:
#line 3216 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 329:
#line 3220 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 330:
#line 3227 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 331:
#line 3232 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 332:
#line 3240 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 333:
#line 3245 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 334:
#line 3249 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 335:
#line 3253 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 336:
#line 3265 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 337:
#line 3271 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 338:
#line 3282 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 339:
#line 3302 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 340:
#line 3312 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 341:
#line 3322 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 342:
#line 3334 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 343:
#line 3351 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 344:
#line 3370 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 345:
#line 3394 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 346:
#line 3423 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 347:
#line 3428 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 348:
#line 3432 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 349:
#line 3436 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 350:
#line 3449 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 351:
#line 3453 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 352:
#line 3465 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 353:
#line 3472 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 354:
#line 3494 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 355:
#line 3498 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 356:
#line 3513 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 357:
#line 3518 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 358:
#line 3525 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 359:
#line 3529 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 360:
#line 3537 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 361:
#line 3545 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 362:
#line 3559 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 363:
#line 3573 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 364:
#line 3577 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 365:
#line 3596 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 366:
#line 3618 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3641 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

int CheckViewErrorFlags(Post_View *v){
  if(View->adaptive) return 0; // hope for the best :-)

  char *name[8] = { "point", "line", "triangle", "quadrangle", 
		    "tetrahedron", "hexahedron", "prism", "pyramid" };
  char *type[3] = { "scalar", "vector", "tensor" };

  if(8 * 3 != VIEW_NB_ELEMENT_TYPES){
    Msg(GERROR, "Please upgrade CheckViewErrorFlags!");
    return 0;
  }
  
  for(int i = 0; i < VIEW_NB_ELEMENT_TYPES; i++)
    if(ViewErrorFlags[i])
      Msg(GERROR, "%d %s %s%s in View[%d] contain%s a wrong number of values",
	  ViewErrorFlags[i], type[i%3], name[i/3], (ViewErrorFlags[i] > 1) ? "s" : "",
	  v->Index, (ViewErrorFlags[i] > 1) ? "" : "s");
  
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
