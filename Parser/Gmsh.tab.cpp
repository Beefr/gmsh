
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tExp	266
#define	tLog	267
#define	tLog10	268
#define	tSqrt	269
#define	tSin	270
#define	tAsin	271
#define	tCos	272
#define	tAcos	273
#define	tTan	274
#define	tRand	275
#define	tAtan	276
#define	tAtan2	277
#define	tSinh	278
#define	tCosh	279
#define	tTanh	280
#define	tFabs	281
#define	tFloor	282
#define	tCeil	283
#define	tFmod	284
#define	tModulo	285
#define	tHypot	286
#define	tPrintf	287
#define	tSprintf	288
#define	tStrCat	289
#define	tStrPrefix	290
#define	tBoundingBox	291
#define	tDraw	292
#define	tPoint	293
#define	tCircle	294
#define	tEllipse	295
#define	tLine	296
#define	tSurface	297
#define	tSpline	298
#define	tVolume	299
#define	tCharacteristic	300
#define	tLength	301
#define	tParametric	302
#define	tElliptic	303
#define	tPlane	304
#define	tRuled	305
#define	tTriangulation	306
#define	tTransfinite	307
#define	tComplex	308
#define	tPhysical	309
#define	tUsing	310
#define	tBump	311
#define	tProgression	312
#define	tPlugin	313
#define	tRotate	314
#define	tTranslate	315
#define	tSymmetry	316
#define	tDilate	317
#define	tExtrude	318
#define	tDuplicata	319
#define	tLoop	320
#define	tRecombine	321
#define	tDelete	322
#define	tCoherence	323
#define	tIntersect	324
#define	tAttractor	325
#define	tLayers	326
#define	tScalarPoint	327
#define	tVectorPoint	328
#define	tTensorPoint	329
#define	tScalarLine	330
#define	tVectorLine	331
#define	tTensorLine	332
#define	tScalarTriangle	333
#define	tVectorTriangle	334
#define	tTensorTriangle	335
#define	tScalarQuadrangle	336
#define	tVectorQuadrangle	337
#define	tTensorQuadrangle	338
#define	tScalarTetrahedron	339
#define	tVectorTetrahedron	340
#define	tTensorTetrahedron	341
#define	tScalarHexahedron	342
#define	tVectorHexahedron	343
#define	tTensorHexahedron	344
#define	tScalarPrism	345
#define	tVectorPrism	346
#define	tTensorPrism	347
#define	tScalarPyramid	348
#define	tVectorPyramid	349
#define	tTensorPyramid	350
#define	tText2D	351
#define	tText3D	352
#define	tCombine	353
#define	tBSpline	354
#define	tBezier	355
#define	tNurbs	356
#define	tOrder	357
#define	tWith	358
#define	tBounds	359
#define	tKnots	360
#define	tColor	361
#define	tColorTable	362
#define	tFor	363
#define	tIn	364
#define	tEndFor	365
#define	tIf	366
#define	tEndIf	367
#define	tExit	368
#define	tReturn	369
#define	tCall	370
#define	tFunction	371
#define	tTrimmed	372
#define	tShow	373
#define	tHide	374
#define	tB_SPLINE_SURFACE_WITH_KNOTS	375
#define	tB_SPLINE_CURVE_WITH_KNOTS	376
#define	tCARTESIAN_POINT	377
#define	tTRUE	378
#define	tFALSE	379
#define	tUNSPECIFIED	380
#define	tU	381
#define	tV	382
#define	tEDGE_CURVE	383
#define	tVERTEX_POINT	384
#define	tORIENTED_EDGE	385
#define	tPLANE	386
#define	tFACE_OUTER_BOUND	387
#define	tEDGE_LOOP	388
#define	tADVANCED_FACE	389
#define	tVECTOR	390
#define	tDIRECTION	391
#define	tAXIS2_PLACEMENT_3D	392
#define	tISO	393
#define	tENDISO	394
#define	tENDSEC	395
#define	tDATA	396
#define	tHEADER	397
#define	tFILE_DESCRIPTION	398
#define	tFILE_SCHEMA	399
#define	tFILE_NAME	400
#define	tMANIFOLD_SOLID_BREP	401
#define	tCLOSED_SHELL	402
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	403
#define	tFACE_BOUND	404
#define	tCYLINDRICAL_SURFACE	405
#define	tCONICAL_SURFACE	406
#define	tCIRCLE	407
#define	tTRIMMED_CURVE	408
#define	tGEOMETRIC_SET	409
#define	tCOMPOSITE_CURVE_SEGMENT	410
#define	tCONTINUOUS	411
#define	tCOMPOSITE_CURVE	412
#define	tTOROIDAL_SURFACE	413
#define	tPRODUCT_DEFINITION	414
#define	tPRODUCT_DEFINITION_SHAPE	415
#define	tSHAPE_DEFINITION_REPRESENTATION	416
#define	tELLIPSE	417
#define	tSolid	418
#define	tEndSolid	419
#define	tVertex	420
#define	tFacet	421
#define	tNormal	422
#define	tOuter	423
#define	tLoopSTL	424
#define	tEndLoop	425
#define	tEndFacet	426
#define	tAFFECTPLUS	427
#define	tAFFECTMINUS	428
#define	tAFFECTTIMES	429
#define	tAFFECTDIVIDE	430
#define	tOR	431
#define	tAND	432
#define	tEQUAL	433
#define	tNOTEQUAL	434
#define	tAPPROXEQUAL	435
#define	tLESSOREQUAL	436
#define	tGREATEROREQUAL	437
#define	tCROSSPRODUCT	438
#define	tPLUSPLUS	439
#define	tMINUSMINUS	440
#define	UNARYPREC	441

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.197 2004-07-01 19:40:59 geuzaine Exp $
//
// Copyright (C) 1997-2004 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "GeoUtils.h"
#include "Nurbs.h"
#include "CAD.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"
#include "Visibility.h"

// FIXME: most tSTRING and tBIGSTRING are leaked: Free() them!

Tree_T *Symbol_T = NULL;

extern Context_T CTX;
extern Mesh *THEM;

static Surface *STL_Surf;
static ExtrudeParams extr;
static Post_View *View;
static int ntmp;

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror (char *s);
void yymsg (int type, char *fmt, ...);
void skip_until (char *skip, char *until);
int PrintListOfDouble (char *format, List_T *list, char *buffer);

#line 75 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		2355
#define	YYFLAG		-32768
#define	YYNTBASE	207

#define YYTRANSLATE(x) ((unsigned)(x) <= 441 ? yytranslate[x] : 342)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   193,     2,   203,     2,   191,     2,     2,   198,
   199,   189,   187,   204,   188,   202,   190,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   183,
     2,   185,   177,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   200,     2,   201,   197,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   205,     2,   206,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   178,   179,   180,   181,   182,   184,   186,   192,   194,   195,
   196
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    14,    15,    18,    20,
    42,    44,    45,    48,    50,    52,    54,    57,    60,    63,
    66,    69,    77,    83,   101,   111,   135,   167,   183,   195,
   207,   223,   233,   247,   257,   269,   283,   293,   303,   315,
   325,   337,   347,   359,   373,   387,   399,   413,   431,   441,
   453,   465,   479,   491,   501,   502,   505,   507,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   531,
   533,   539,   547,   554,   563,   564,   567,   570,   573,   576,
   579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
   609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
   639,   642,   644,   648,   649,   663,   665,   669,   670,   684,
   686,   690,   691,   705,   707,   711,   712,   732,   734,   738,
   739,   759,   761,   765,   766,   786,   788,   792,   793,   819,
   821,   825,   826,   852,   854,   858,   859,   885,   887,   891,
   892,   924,   926,   930,   931,   963,   965,   969,   970,  1002,
  1004,  1008,  1009,  1041,  1043,  1047,  1048,  1080,  1082,  1086,
  1087,  1119,  1121,  1125,  1126,  1182,  1184,  1188,  1189,  1245,
  1247,  1251,  1252,  1308,  1310,  1314,  1315,  1359,  1361,  1365,
  1366,  1410,  1412,  1416,  1417,  1461,  1463,  1467,  1468,  1506,
  1508,  1512,  1513,  1551,  1553,  1557,  1558,  1596,  1598,  1602,
  1603,  1617,  1619,  1623,  1624,  1640,  1642,  1644,  1646,  1648,
  1650,  1652,  1654,  1659,  1667,  1677,  1684,  1688,  1695,  1702,
  1712,  1719,  1729,  1735,  1744,  1753,  1765,  1772,  1782,  1792,
  1802,  1810,  1819,  1832,  1839,  1847,  1855,  1863,  1873,  1881,
  1891,  1909,  1917,  1925,  1937,  1946,  1959,  1968,  1977,  1986,
  1999,  2014,  2029,  2052,  2073,  2082,  2091,  2100,  2108,  2117,
  2123,  2135,  2141,  2151,  2153,  2155,  2157,  2158,  2161,  2168,
  2175,  2182,  2189,  2194,  2201,  2206,  2213,  2217,  2223,  2227,
  2231,  2236,  2241,  2245,  2253,  2257,  2265,  2269,  2272,  2275,
  2291,  2294,  2301,  2310,  2319,  2330,  2332,  2335,  2337,  2341,
  2346,  2348,  2357,  2370,  2385,  2386,  2399,  2400,  2417,  2418,
  2437,  2446,  2459,  2474,  2475,  2488,  2489,  2506,  2507,  2526,
  2535,  2548,  2563,  2564,  2577,  2578,  2595,  2596,  2615,  2617,
  2620,  2630,  2638,  2641,  2648,  2658,  2668,  2677,  2686,  2695,
  2702,  2707,  2710,  2713,  2715,  2717,  2719,  2721,  2723,  2725,
  2729,  2732,  2735,  2738,  2742,  2746,  2750,  2754,  2758,  2762,
  2766,  2770,  2774,  2778,  2782,  2786,  2790,  2794,  2800,  2805,
  2810,  2815,  2820,  2825,  2830,  2835,  2840,  2845,  2850,  2857,
  2862,  2867,  2872,  2877,  2882,  2887,  2894,  2901,  2908,  2913,
  2918,  2923,  2928,  2933,  2938,  2943,  2948,  2953,  2958,  2963,
  2970,  2975,  2980,  2985,  2990,  2995,  3000,  3007,  3014,  3021,
  3026,  3028,  3030,  3032,  3034,  3036,  3041,  3046,  3049,  3055,
  3059,  3066,  3071,  3079,  3081,  3084,  3087,  3091,  3095,  3107,
  3117,  3125,  3133,  3134,  3138,  3140,  3144,  3145,  3149,  3153,
  3155,  3159,  3161,  3163,  3167,  3172,  3176,  3182,  3187,  3189,
  3191,  3193,  3197,  3202,  3209,  3217,  3219,  3221,  3225,  3229,
  3239,  3247,  3249,  3255,  3259,  3266,  3268,  3272,  3274,  3281,
  3286,  3291,  3298,  3305
};

static const short yyrhs[] = {   211,
     0,   209,     0,   216,     0,     1,     6,     0,     3,     0,
   188,     3,     0,     0,   209,   210,     0,   164,     0,   167,
   168,   208,   208,   208,   169,   170,   166,   208,   208,   208,
   166,   208,   208,   208,   166,   208,   208,   208,   171,   172,
     0,   165,     0,     0,   211,   212,     0,   213,     0,   215,
     0,   214,     0,   139,     6,     0,   140,     6,     0,   142,
     6,     0,   141,     6,     0,   143,     6,     0,   144,   198,
   331,   204,     5,   199,     6,     0,   145,   198,   331,   199,
     6,     0,   146,   198,     5,   204,     5,   204,   331,   204,
   331,   204,     5,   204,     5,   204,     5,   199,     6,     0,
     3,     7,   123,   198,     5,   204,   329,   199,     6,     0,
     3,     7,   122,   198,     5,   204,   327,   204,   335,   204,
   326,   204,   326,   204,   326,   204,   335,   204,   335,   204,
   326,   199,     6,     0,     3,     7,   121,   198,     5,   204,
   327,   204,   327,   204,   333,   204,   326,   204,   326,   204,
   326,   204,   326,   204,   335,   204,   335,   204,   335,   204,
   335,   204,   326,   199,     6,     0,     3,     7,   129,   198,
     5,   204,     3,   204,     3,   204,     3,   204,   326,   199,
     6,     0,     3,     7,   133,   198,     5,   204,     3,   204,
   326,   199,     6,     0,     3,     7,   150,   198,     5,   204,
     3,   204,   326,   199,     6,     0,     3,     7,   131,   198,
     5,   204,   189,   204,   189,   204,   327,   204,   326,   199,
     6,     0,     3,     7,   134,   198,     5,   204,   335,   199,
     6,     0,     3,     7,   135,   198,     5,   204,   335,   204,
     3,   204,   326,   199,     6,     0,     3,     7,   130,   198,
     5,   204,     3,   199,     6,     0,     3,     7,   136,   198,
     5,   204,     3,   204,   327,   199,     6,     0,     3,     7,
   138,   198,     5,   204,     3,   204,     3,   204,     3,   199,
     6,     0,     3,     7,   137,   198,     5,   204,   329,   199,
     6,     0,     3,     7,   132,   198,     5,   204,     3,   199,
     6,     0,     3,     7,    42,   198,     5,   204,     3,   204,
     3,   199,     6,     0,     3,     7,   148,   198,     5,   204,
   335,   199,     6,     0,     3,     7,   149,   198,     5,   204,
   335,   204,     3,   199,     6,     0,     3,     7,   147,   198,
     5,   204,     3,   199,     6,     0,     3,     7,   151,   198,
     5,   204,     3,   204,   327,   199,     6,     0,     3,     7,
   152,   198,     5,   204,     3,   204,   327,   204,   327,   199,
     6,     0,     3,     7,   159,   198,     5,   204,     3,   204,
   327,   204,   327,   199,     6,     0,     3,     7,   153,   198,
     5,   204,     3,   204,   327,   199,     6,     0,     3,     7,
   163,   198,     5,   204,     3,   204,   327,   204,   327,   199,
     6,     0,     3,     7,   154,   198,     5,   204,     3,   204,
   335,   204,   335,   204,   326,   204,   326,   199,     6,     0,
     3,     7,   155,   198,     5,   204,   335,   199,     6,     0,
     3,     7,   156,   198,   157,   204,   326,   204,     3,   199,
     6,     0,     3,     7,   158,   198,     5,   204,   335,   204,
   326,   199,     6,     0,     3,     7,   160,   198,     5,   204,
     5,   204,     3,   204,     3,   199,     6,     0,     3,     7,
   161,   198,     5,   204,     5,   204,     3,   199,     6,     0,
     3,     7,   162,   198,     3,   204,     3,   199,     6,     0,
     0,   216,   217,     0,   219,     0,   218,     0,   301,     0,
   302,     0,   303,     0,   306,     0,   307,     0,   308,     0,
   309,     0,   312,     0,   324,     0,   325,     0,   311,     0,
   310,     0,    33,   198,     5,   199,     6,     0,    33,   198,
     5,   204,   337,   199,     6,     0,     4,     5,   205,   220,
   206,     6,     0,     4,     5,     4,   329,   205,   220,   206,
     6,     0,     0,   220,   222,     0,   220,   225,     0,   220,
   228,     0,   220,   231,     0,   220,   234,     0,   220,   237,
     0,   220,   240,     0,   220,   243,     0,   220,   246,     0,
   220,   249,     0,   220,   252,     0,   220,   255,     0,   220,
   258,     0,   220,   261,     0,   220,   264,     0,   220,   267,
     0,   220,   270,     0,   220,   273,     0,   220,   276,     0,
   220,   279,     0,   220,   282,     0,   220,   285,     0,   220,
   288,     0,   220,   291,     0,   220,   294,     0,   220,   297,
     0,   327,     0,   221,   204,   327,     0,     0,    73,   198,
   327,   204,   327,   204,   327,   199,   223,   205,   221,   206,
     6,     0,   327,     0,   224,   204,   327,     0,     0,    74,
   198,   327,   204,   327,   204,   327,   199,   226,   205,   224,
   206,     6,     0,   327,     0,   227,   204,   327,     0,     0,
    75,   198,   327,   204,   327,   204,   327,   199,   229,   205,
   227,   206,     6,     0,   327,     0,   230,   204,   327,     0,
     0,    76,   198,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   199,   232,   205,   230,   206,     6,
     0,   327,     0,   233,   204,   327,     0,     0,    77,   198,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   199,   235,   205,   233,   206,     6,     0,   327,     0,
   236,   204,   327,     0,     0,    78,   198,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   199,   238,
   205,   236,   206,     6,     0,   327,     0,   239,   204,   327,
     0,     0,    79,   198,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   199,   241,   205,   239,   206,     6,     0,   327,     0,
   242,   204,   327,     0,     0,    80,   198,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   199,   244,   205,   242,   206,     6,
     0,   327,     0,   245,   204,   327,     0,     0,    81,   198,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   199,   247,   205,
   245,   206,     6,     0,   327,     0,   248,   204,   327,     0,
     0,    82,   198,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   199,   250,   205,   248,
   206,     6,     0,   327,     0,   251,   204,   327,     0,     0,
    83,   198,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   199,   253,   205,   251,   206,
     6,     0,   327,     0,   254,   204,   327,     0,     0,    84,
   198,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   199,   256,   205,   254,   206,     6,
     0,   327,     0,   257,   204,   327,     0,     0,    85,   198,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   199,   259,   205,   257,   206,     6,     0,
   327,     0,   260,   204,   327,     0,     0,    86,   198,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   199,   262,   205,   260,   206,     6,     0,   327,
     0,   263,   204,   327,     0,     0,    87,   198,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   199,   265,   205,   263,   206,     6,     0,   327,     0,
   266,   204,   327,     0,     0,    88,   198,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   199,   268,   205,   266,   206,     6,
     0,   327,     0,   269,   204,   327,     0,     0,    89,   198,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   199,   271,   205,
   269,   206,     6,     0,   327,     0,   272,   204,   327,     0,
     0,    90,   198,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   199,   274,   205,   272,   206,     6,     0,   327,     0,   275,
   204,   327,     0,     0,    91,   198,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   199,   277,   205,   275,   206,     6,     0,   327,     0,
   278,   204,   327,     0,     0,    92,   198,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   199,   280,   205,   278,   206,     6,     0,   327,
     0,   281,   204,   327,     0,     0,    93,   198,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   199,   283,   205,   281,   206,     6,     0,
   327,     0,   284,   204,   327,     0,     0,    94,   198,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   199,   286,
   205,   284,   206,     6,     0,   327,     0,   287,   204,   327,
     0,     0,    95,   198,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   204,   327,   204,
   327,   204,   327,   199,   289,   205,   287,   206,     6,     0,
   327,     0,   290,   204,   327,     0,     0,    96,   198,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   204,   327,   204,   327,   199,   292,
   205,   290,   206,     6,     0,   341,     0,   293,   204,   341,
     0,     0,    97,   198,   327,   204,   327,   204,   327,   199,
   295,   205,   293,   206,     6,     0,   341,     0,   296,   204,
   341,     0,     0,    98,   198,   327,   204,   327,   204,   327,
   204,   327,   199,   298,   205,   296,   206,     6,     0,     7,
     0,   173,     0,   174,     0,   175,     0,   176,     0,   194,
     0,   195,     0,     4,   299,   327,     6,     0,     4,   200,
   327,   201,   299,   327,     6,     0,     4,   200,   205,   337,
   206,   201,   299,   335,     6,     0,     4,   200,   201,     7,
   335,     6,     0,     4,   300,     6,     0,     4,   200,   327,
   201,   300,     6,     0,     4,   202,     4,     7,   341,     6,
     0,     4,   200,   327,   201,   202,     4,     7,   341,     6,
     0,     4,   202,     4,   299,   327,     6,     0,     4,   200,
   327,   201,   202,     4,   299,   327,     6,     0,     4,   202,
     4,   300,     6,     0,     4,   200,   327,   201,   202,     4,
   300,     6,     0,     4,   202,   107,   202,     4,     7,   338,
     6,     0,     4,   200,   327,   201,   202,   107,   202,     4,
     7,   338,     6,     0,     4,   202,   108,     7,   339,     6,
     0,     4,   200,   327,   201,   202,   108,     7,   339,     6,
     0,    59,   198,     4,   199,   202,     4,     7,   327,     6,
     0,    59,   198,     4,   199,   202,     4,     7,   341,     6,
     0,    39,   198,   327,   199,     7,   329,     6,     0,    55,
    39,   198,   327,   199,     7,   335,     6,     0,    71,    39,
   335,     7,   205,   327,   204,   327,   204,   327,   206,     6,
     0,    46,    47,   335,     7,   327,     6,     0,    42,   198,
   327,   199,     7,   335,     6,     0,    44,   198,   327,   199,
     7,   335,     6,     0,    40,   198,   327,   199,     7,   335,
     6,     0,    40,   198,   327,   199,     7,   335,    50,   329,
     6,     0,    41,   198,   327,   199,     7,   335,     6,     0,
    41,   198,   327,   199,     7,   335,    50,   329,     6,     0,
    48,   198,   327,   199,     7,   205,   327,   204,   327,   204,
     5,   204,     5,   204,     5,   206,     6,     0,   100,   198,
   327,   199,     7,   335,     6,     0,   101,   198,   327,   199,
     7,   335,     6,     0,   102,   198,   327,   199,     7,   335,
   106,   335,   103,   327,     6,     0,    42,    66,   198,   327,
   199,     7,   335,     6,     0,    71,    42,   335,     7,   205,
   327,   204,   327,   204,   327,   206,     6,     0,    55,    42,
   198,   327,   199,     7,   335,     6,     0,    50,    43,   198,
   327,   199,     7,   335,     6,     0,    51,    43,   198,   327,
   199,     7,   335,     6,     0,   118,    43,   198,   327,   199,
     7,   205,   327,   204,   335,   206,     6,     0,    52,    43,
   205,   327,   206,     7,   198,   327,   204,   327,   199,   335,
   335,     6,     0,    52,    43,   198,   327,   199,     7,   198,
   327,   204,   327,   199,   335,   335,     6,     0,   102,    43,
   104,   105,   198,   327,   199,     7,   333,   106,   205,   335,
   204,   335,   206,   103,   205,   327,   204,   327,   206,     6,
     0,   102,    43,   198,   327,   199,     7,   333,   106,   205,
   335,   204,   335,   206,   103,   205,   327,   204,   327,   206,
     6,     0,    43,    66,   198,   327,   199,     7,   335,     6,
     0,    55,    43,   198,   327,   199,     7,   335,     6,     0,
    54,    45,   198,   327,   199,     7,   335,     6,     0,    45,
   198,   327,   199,     7,   335,     6,     0,    55,    45,   198,
   327,   199,     7,   335,     6,     0,    61,   329,   205,   304,
   206,     0,    60,   205,   329,   204,   329,   204,   327,   206,
   205,   304,   206,     0,    62,   329,   205,   304,   206,     0,
    63,   205,   329,   204,   327,   206,   205,   304,   206,     0,
   306,     0,   305,     0,   303,     0,     0,   305,   302,     0,
   305,    39,   205,   337,   206,     6,     0,   305,    42,   205,
   337,   206,     6,     0,   305,    43,   205,   337,   206,     6,
     0,   305,    45,   205,   337,   206,     6,     0,    65,   205,
   305,   206,     0,    65,     4,   200,   327,   201,     6,     0,
    68,   205,   305,   206,     0,    68,     4,   200,   327,   201,
     6,     0,    68,     4,     6,     0,   107,   338,   205,   305,
   206,     0,   119,   341,     6,     0,   120,   341,     6,     0,
   119,   205,   305,   206,     0,   120,   205,   305,   206,     0,
     4,   341,     6,     0,     4,     4,   200,   327,   201,   341,
     6,     0,     4,   327,     6,     0,    59,   198,     4,   199,
   202,     4,     6,     0,    99,     4,     6,     0,   114,     6,
     0,    37,     6,     0,    37,   205,   327,   204,   327,   204,
   327,   204,   327,   204,   327,   204,   327,   206,     6,     0,
    38,     6,     0,   109,   198,   327,     8,   327,   199,     0,
   109,   198,   327,     8,   327,     8,   327,   199,     0,   109,
     4,   110,   205,   327,     8,   327,   206,     0,   109,     4,
   110,   205,   327,     8,   327,     8,   327,   206,     0,   111,
     0,   117,     4,     0,   115,     0,   116,     4,     6,     0,
   112,   198,   327,   199,     0,   113,     0,    64,    39,   205,
   327,   204,   329,   206,     6,     0,    64,    39,   205,   327,
   204,   329,   204,   329,   204,   327,   206,     6,     0,    64,
    39,   205,   327,   204,   329,   204,   329,   204,   329,   204,
   327,   206,     6,     0,     0,    64,    39,   205,   327,   204,
   329,   206,   313,   205,   322,   206,     6,     0,     0,    64,
    39,   205,   327,   204,   329,   204,   329,   204,   327,   206,
   314,   205,   322,   206,     6,     0,     0,    64,    39,   205,
   327,   204,   329,   204,   329,   204,   329,   204,   327,   206,
   315,   205,   322,   206,     6,     0,    64,    42,   205,   327,
   204,   329,   206,     6,     0,    64,    42,   205,   327,   204,
   329,   204,   329,   204,   327,   206,     6,     0,    64,    42,
   205,   327,   204,   329,   204,   329,   204,   329,   204,   327,
   206,     6,     0,     0,    64,    42,   205,   327,   204,   329,
   206,   316,   205,   322,   206,     6,     0,     0,    64,    42,
   205,   327,   204,   329,   204,   329,   204,   327,   206,   317,
   205,   322,   206,     6,     0,     0,    64,    42,   205,   327,
   204,   329,   204,   329,   204,   329,   204,   327,   206,   318,
   205,   322,   206,     6,     0,    64,    43,   205,   327,   204,
   329,   206,     6,     0,    64,    43,   205,   327,   204,   329,
   204,   329,   204,   327,   206,     6,     0,    64,    43,   205,
   327,   204,   329,   204,   329,   204,   329,   204,   327,   206,
     6,     0,     0,    64,    43,   205,   327,   204,   329,   206,
   319,   205,   322,   206,     6,     0,     0,    64,    43,   205,
   327,   204,   329,   204,   329,   204,   327,   206,   320,   205,
   322,   206,     6,     0,     0,    64,    43,   205,   327,   204,
   329,   204,   329,   204,   329,   204,   327,   206,   321,   205,
   322,   206,     6,     0,   323,     0,   322,   323,     0,    72,
   205,   335,   204,   335,   204,   335,   206,     6,     0,    72,
   205,   335,   204,   335,   206,     6,     0,    67,     6,     0,
    53,    42,   335,     7,   327,     6,     0,    53,    42,   335,
     7,   327,    56,    58,   327,     6,     0,    53,    42,   335,
     7,   327,    56,    57,   327,     6,     0,    53,    43,   205,
   327,   206,     7,   335,     6,     0,    49,    43,   205,   327,
   206,     7,   335,     6,     0,    53,    45,   205,   327,   206,
     7,   335,     6,     0,    67,    43,   335,     7,   327,     6,
     0,    67,    43,   335,     6,     0,    69,     6,     0,    70,
     6,     0,   124,     0,   125,     0,   126,     0,   127,     0,
   128,     0,   328,     0,   198,   327,   199,     0,   188,   327,
     0,   187,   327,     0,   193,   327,     0,   327,   188,   327,
     0,   327,   187,   327,     0,   327,   189,   327,     0,   327,
   190,   327,     0,   327,   191,   327,     0,   327,   197,   327,
     0,   327,   183,   327,     0,   327,   185,   327,     0,   327,
   184,   327,     0,   327,   186,   327,     0,   327,   180,   327,
     0,   327,   181,   327,     0,   327,   179,   327,     0,   327,
   178,   327,     0,   327,   177,   327,     8,   327,     0,    12,
   198,   327,   199,     0,    13,   198,   327,   199,     0,    14,
   198,   327,   199,     0,    15,   198,   327,   199,     0,    16,
   198,   327,   199,     0,    17,   198,   327,   199,     0,    18,
   198,   327,   199,     0,    19,   198,   327,   199,     0,    20,
   198,   327,   199,     0,    22,   198,   327,   199,     0,    23,
   198,   327,   204,   327,   199,     0,    24,   198,   327,   199,
     0,    25,   198,   327,   199,     0,    26,   198,   327,   199,
     0,    27,   198,   327,   199,     0,    28,   198,   327,   199,
     0,    29,   198,   327,   199,     0,    30,   198,   327,   204,
   327,   199,     0,    31,   198,   327,   204,   327,   199,     0,
    32,   198,   327,   204,   327,   199,     0,    21,   198,   327,
   199,     0,    12,   200,   327,   201,     0,    13,   200,   327,
   201,     0,    14,   200,   327,   201,     0,    15,   200,   327,
   201,     0,    16,   200,   327,   201,     0,    17,   200,   327,
   201,     0,    18,   200,   327,   201,     0,    19,   200,   327,
   201,     0,    20,   200,   327,   201,     0,    22,   200,   327,
   201,     0,    23,   200,   327,   204,   327,   201,     0,    24,
   200,   327,   201,     0,    25,   200,   327,   201,     0,    26,
   200,   327,   201,     0,    27,   200,   327,   201,     0,    28,
   200,   327,   201,     0,    29,   200,   327,   201,     0,    30,
   200,   327,   204,   327,   201,     0,    31,   200,   327,   204,
   327,   201,     0,    32,   200,   327,   204,   327,   201,     0,
    21,   200,   327,   201,     0,     3,     0,     9,     0,    10,
     0,    11,     0,     4,     0,     4,   200,   327,   201,     0,
   203,     4,   200,   201,     0,     4,   300,     0,     4,   200,
   327,   201,   300,     0,     4,   202,     4,     0,     4,   200,
   327,   201,   202,     4,     0,     4,   202,     4,   300,     0,
     4,   200,   327,   201,   202,     4,   300,     0,   330,     0,
   188,   329,     0,   187,   329,     0,   329,   188,   329,     0,
   329,   187,   329,     0,   205,   327,   204,   327,   204,   327,
   204,   327,   204,   327,   206,     0,   205,   327,   204,   327,
   204,   327,   204,   327,   206,     0,   205,   327,   204,   327,
   204,   327,   206,     0,   198,   327,   204,   327,   204,   327,
   199,     0,     0,   198,   332,   199,     0,     5,     0,   332,
   204,     5,     0,     0,   205,   334,   206,     0,   198,   334,
   199,     0,   335,     0,   334,   204,   335,     0,   327,     0,
   336,     0,   205,   337,   206,     0,   188,   205,   337,   206,
     0,   327,     8,   327,     0,   327,     8,   327,     8,   327,
     0,    39,   205,   327,   206,     0,   303,     0,   306,     0,
   312,     0,     4,   200,   201,     0,   188,     4,   200,   201,
     0,     4,   200,   205,   337,   206,   201,     0,   188,     4,
   200,   205,   337,   206,   201,     0,   327,     0,   336,     0,
   337,   204,   327,     0,   337,   204,   336,     0,   205,   327,
   204,   327,   204,   327,   204,   327,   206,     0,   205,   327,
   204,   327,   204,   327,   206,     0,     4,     0,     4,   202,
   107,   202,     4,     0,   205,   340,   206,     0,     4,   200,
   327,   201,   202,   108,     0,   338,     0,   340,   204,   338,
     0,     5,     0,    35,   198,   341,   204,   341,   199,     0,
    36,   198,   341,   199,     0,    34,   198,   341,   199,     0,
    34,   198,   341,   204,   337,   199,     0,    34,   198,     4,
   202,     4,   199,     0,    34,   198,     4,   200,   327,   201,
   202,     4,   199,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   161,   163,   164,   165,   170,   172,   175,   177,   180,   188,
   202,   219,   221,   224,   226,   227,   230,   236,   241,   242,
   243,   246,   250,   253,   259,   264,   270,   278,   283,   287,
   293,   298,   302,   307,   311,   314,   319,   323,   327,   331,
   336,   340,   343,   347,   351,   355,   359,   363,   367,   370,
   374,   377,   381,   384,   391,   393,   396,   398,   399,   400,
   401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
   413,   418,   434,   439,   445,   450,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
   475,   478,   481,   485,   491,   497,   500,   504,   511,   520,
   523,   527,   534,   543,   546,   550,   559,   568,   571,   575,
   584,   593,   596,   600,   609,   618,   621,   625,   638,   647,
   650,   654,   667,   676,   679,   683,   696,   705,   708,   712,
   726,   735,   738,   742,   756,   765,   768,   772,   786,   795,
   798,   802,   816,   825,   828,   832,   846,   855,   858,   862,
   876,   885,   888,   892,   916,   925,   928,   932,   956,   965,
   968,   972,   996,  1005,  1008,  1012,  1031,  1040,  1043,  1047,
  1066,  1075,  1078,  1082,  1101,  1110,  1113,  1117,  1135,  1144,
  1147,  1151,  1169,  1178,  1181,  1185,  1203,  1212,  1218,  1225,
  1233,  1239,  1245,  1252,  1260,  1269,  1271,  1272,  1273,  1274,
  1277,  1279,  1282,  1314,  1350,  1399,  1415,  1425,  1443,  1456,
  1472,  1497,  1523,  1536,  1552,  1565,  1581,  1600,  1622,  1631,
  1645,  1665,  1681,  1700,  1719,  1737,  1755,  1773,  1799,  1817,
  1843,  1862,  1886,  1910,  1936,  1953,  1971,  1990,  2009,  2048,
  2073,  2095,  2111,  2130,  2149,  2165,  2184,  2201,  2218,  2238,
  2244,  2249,  2254,  2261,  2263,  2264,  2267,  2272,  2276,  2292,
  2308,  2324,  2344,  2358,  2368,  2378,  2382,  2391,  2405,  2413,
  2418,  2429,  2442,  2483,  2497,  2512,  2521,  2530,  2534,  2538,
  2542,  2553,  2569,  2583,  2608,  2633,  2660,  2666,  2671,  2676,
  2680,  2688,  2702,  2713,  2724,  2729,  2740,  2745,  2756,  2761,
  2774,  2792,  2810,  2828,  2833,  2851,  2856,  2874,  2879,  2900,
  2917,  2934,  2951,  2956,  2973,  2979,  2996,  3002,  3021,  3025,
  3030,  3057,  3081,  3089,  3108,  3126,  3144,  3171,  3197,  3223,
  3237,  3255,  3260,  3269,  3271,  3272,  3273,  3274,  3277,  3279,
  3280,  3281,  3282,  3283,  3284,  3285,  3286,  3293,  3294,  3295,
  3296,  3297,  3298,  3299,  3300,  3301,  3302,  3303,  3304,  3305,
  3306,  3307,  3308,  3309,  3310,  3311,  3312,  3313,  3314,  3315,
  3316,  3317,  3318,  3319,  3320,  3321,  3322,  3323,  3324,  3326,
  3327,  3328,  3329,  3330,  3331,  3332,  3333,  3334,  3335,  3336,
  3337,  3338,  3339,  3340,  3341,  3342,  3343,  3344,  3345,  3346,
  3351,  3356,  3357,  3358,  3362,  3374,  3393,  3406,  3418,  3440,
  3457,  3474,  3491,  3510,  3515,  3519,  3523,  3527,  3533,  3538,
  3542,  3546,  3552,  3556,  3561,  3565,  3570,  3574,  3578,  3584,
  3590,  3597,  3603,  3607,  3611,  3622,  3629,  3640,  3660,  3670,
  3680,  3692,  3708,  3726,  3749,  3776,  3782,  3786,  3790,  3802,
  3807,  3819,  3825,  3845,  3850,  3863,  3869,  3875,  3880,  3888,
  3902,  3906,  3925,  3941
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tExp",
"tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan",
"tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil","tFmod","tModulo",
"tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tBoundingBox","tDraw",
"tPoint","tCircle","tEllipse","tLine","tSurface","tSpline","tVolume","tCharacteristic",
"tLength","tParametric","tElliptic","tPlane","tRuled","tTriangulation","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tPlugin","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarPoint","tVectorPoint",
"tTensorPoint","tScalarLine","tVectorLine","tTensorLine","tScalarTriangle","tVectorTriangle",
"tTensorTriangle","tScalarQuadrangle","tVectorQuadrangle","tTensorQuadrangle",
"tScalarTetrahedron","tVectorTetrahedron","tTensorTetrahedron","tScalarHexahedron",
"tVectorHexahedron","tTensorHexahedron","tScalarPrism","tVectorPrism","tTensorPrism",
"tScalarPyramid","tVectorPyramid","tTensorPyramid","tText2D","tText3D","tCombine",
"tBSpline","tBezier","tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable",
"tFor","tIn","tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction",
"tTrimmed","tShow","tHide","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS",
"tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT",
"tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE",
"tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA",
"tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP",
"tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION","tFACE_BOUND","tCYLINDRICAL_SURFACE",
"tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE","tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT",
"tCONTINUOUS","tCOMPOSITE_CURVE","tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE",
"tSHAPE_DEFINITION_REPRESENTATION","tELLIPSE","tSolid","tEndSolid","tVertex",
"tFacet","tNormal","tOuter","tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS",
"tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL",
"tAPPROXEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'",
"'/'","'%'","tCROSSPRODUCT","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","All","SignedDouble","StlFormatItems",
"StlFormatItem","StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem",
"StepDataItem","GeoFormatItems","GeoFormatItem","Printf","View","Views","ScalarPointValues",
"ScalarPoint","@1","VectorPointValues","VectorPoint","@2","TensorPointValues",
"TensorPoint","@3","ScalarLineValues","ScalarLine","@4","VectorLineValues","VectorLine",
"@5","TensorLineValues","TensorLine","@6","ScalarTriangleValues","ScalarTriangle",
"@7","VectorTriangleValues","VectorTriangle","@8","TensorTriangleValues","TensorTriangle",
"@9","ScalarQuadrangleValues","ScalarQuadrangle","@10","VectorQuadrangleValues",
"VectorQuadrangle","@11","TensorQuadrangleValues","TensorQuadrangle","@12","ScalarTetrahedronValues",
"ScalarTetrahedron","@13","VectorTetrahedronValues","VectorTetrahedron","@14",
"TensorTetrahedronValues","TensorTetrahedron","@15","ScalarHexahedronValues",
"ScalarHexahedron","@16","VectorHexahedronValues","VectorHexahedron","@17","TensorHexahedronValues",
"TensorHexahedron","@18","ScalarPrismValues","ScalarPrism","@19","VectorPrismValues",
"VectorPrism","@20","TensorPrismValues","TensorPrism","@21","ScalarPyramidValues",
"ScalarPyramid","@22","VectorPyramidValues","VectorPyramid","@23","TensorPyramidValues",
"TensorPyramid","@24","Text2DValues","Text2D","@25","Text3DValues","Text3D",
"@26","NumericAffectation","NumericIncrement","Affectation","Shape","Transform",
"MultipleShape","ListOfShapes","Duplicata","Delete","Colorify","Visibility",
"Command","Loop","Extrude","@27","@28","@29","@30","@31","@32","@33","@34","@35",
"ExtrudeParameters","ExtrudeParameter","Transfinite","Coherence","BoolExpr",
"FExpr","FExpr_Single","VExpr","VExpr_Single","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi",
"RecursiveListOfDouble","ColorExpr","ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   207,   207,   207,   207,   208,   208,   209,   209,   210,   210,
   210,   211,   211,   212,   212,   212,   213,   213,   213,   213,
   213,   214,   214,   214,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   216,   216,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   218,   218,   219,   219,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
   220,   221,   221,   223,   222,   224,   224,   226,   225,   227,
   227,   229,   228,   230,   230,   232,   231,   233,   233,   235,
   234,   236,   236,   238,   237,   239,   239,   241,   240,   242,
   242,   244,   243,   245,   245,   247,   246,   248,   248,   250,
   249,   251,   251,   253,   252,   254,   254,   256,   255,   257,
   257,   259,   258,   260,   260,   262,   261,   263,   263,   265,
   264,   266,   266,   268,   267,   269,   269,   271,   270,   272,
   272,   274,   273,   275,   275,   277,   276,   278,   278,   280,
   279,   281,   281,   283,   282,   284,   284,   286,   285,   287,
   287,   289,   288,   290,   290,   292,   291,   293,   293,   295,
   294,   296,   296,   298,   297,   299,   299,   299,   299,   299,
   300,   300,   301,   301,   301,   301,   301,   301,   301,   301,
   301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
   302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
   302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
   302,   302,   302,   302,   302,   302,   302,   302,   302,   303,
   303,   303,   303,   304,   304,   304,   305,   305,   305,   305,
   305,   305,   306,   306,   307,   307,   307,   308,   309,   309,
   309,   309,   310,   310,   310,   310,   310,   310,   310,   310,
   310,   311,   311,   311,   311,   311,   311,   311,   311,   311,
   311,   312,   312,   312,   313,   312,   314,   312,   315,   312,
   312,   312,   312,   316,   312,   317,   312,   318,   312,   312,
   312,   312,   319,   312,   320,   312,   321,   312,   322,   322,
   323,   323,   323,   324,   324,   324,   324,   324,   324,   324,
   324,   325,   325,   326,   326,   326,   326,   326,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   328,   328,   328,   328,   328,   328,   328,   328,   328,   328,
   328,   328,   328,   329,   329,   329,   329,   329,   330,   330,
   330,   330,   331,   331,   332,   332,   333,   333,   333,   334,
   334,   335,   335,   335,   335,   336,   336,   336,   336,   336,
   336,   336,   336,   336,   336,   337,   337,   337,   337,   338,
   338,   338,   338,   339,   339,   340,   340,   341,   341,   341,
   341,   341,   341,   341
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,     2,     0,     2,     1,    21,
     1,     0,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     7,     5,    17,     9,    23,    31,    15,    11,    11,
    15,     9,    13,     9,    11,    13,     9,     9,    11,     9,
    11,     9,    11,    13,    13,    11,    13,    17,     9,    11,
    11,    13,    11,     9,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     5,     7,     6,     8,     0,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
    31,     1,     3,     0,    55,     1,     3,     0,    55,     1,
     3,     0,    55,     1,     3,     0,    43,     1,     3,     0,
    43,     1,     3,     0,    43,     1,     3,     0,    37,     1,
     3,     0,    37,     1,     3,     0,    37,     1,     3,     0,
    13,     1,     3,     0,    15,     1,     1,     1,     1,     1,
     1,     1,     4,     7,     9,     6,     3,     6,     6,     9,
     6,     9,     5,     8,     8,    11,     6,     9,     9,     9,
     7,     8,    12,     6,     7,     7,     7,     9,     7,     9,
    17,     7,     7,    11,     8,    12,     8,     8,     8,    12,
    14,    14,    22,    20,     8,     8,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     6,     6,
     6,     6,     4,     6,     4,     6,     3,     5,     3,     3,
     4,     4,     3,     7,     3,     7,     3,     2,     2,    15,
     2,     6,     8,     8,    10,     1,     2,     1,     3,     4,
     1,     8,    12,    14,     0,    12,     0,    16,     0,    18,
     8,    12,    14,     0,    12,     0,    16,     0,    18,     8,
    12,    14,     0,    12,     0,    16,     0,    18,     1,     2,
     9,     7,     2,     6,     9,     9,     8,     8,     8,     6,
     4,     2,     2,     1,     1,     1,     1,     1,     1,     3,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     4,     4,     4,     6,     6,     6,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     4,     4,     4,     6,     6,     6,     4,
     1,     1,     1,     1,     1,     4,     4,     2,     5,     3,
     6,     4,     7,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     0,     3,     1,     3,     0,     3,     3,     1,
     3,     1,     1,     3,     4,     3,     5,     4,     1,     1,
     1,     3,     4,     6,     7,     1,     1,     3,     3,     9,
     7,     1,     5,     3,     6,     1,     3,     1,     6,     4,
     4,     6,     6,     9
};

static const short yydefact[] = {     0,
     0,     2,     1,     3,     4,     9,    11,     0,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    16,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   296,     0,   301,     0,   298,     0,     0,     0,     0,     0,
    56,    58,    57,    59,    60,    61,    62,    63,    64,    65,
    70,    69,    66,    67,    68,     0,     0,    17,    18,    20,
    19,    21,   433,   433,     0,   411,   415,   468,   206,   412,
   413,   414,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   207,   208,   209,   210,
     0,     0,     0,   211,   212,     0,     0,     0,     0,     0,
     0,     0,   349,     0,     0,   289,     0,   291,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   424,     0,     0,
     0,     0,     0,     0,   267,     0,     0,   267,   342,   343,
     0,     0,     0,     0,     0,     0,     0,   462,     0,     0,
     0,     0,     0,   288,     0,   297,     0,   468,   267,     0,
   267,     0,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   418,     0,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
   352,   351,   353,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   217,   285,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   415,     0,     0,     0,   449,   450,   451,   442,     0,   443,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   426,   425,     0,     0,
     0,     0,   267,   267,     0,     0,     0,     0,     0,     0,
     0,   277,     0,     0,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,   267,     0,     0,     0,   299,     0,
     0,   279,     0,   280,     6,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   435,     0,     0,     0,
     0,     0,   420,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   350,     0,     0,   456,   457,     0,     0,   206,
     0,     0,     0,     0,     0,   213,     0,   367,   366,   364,
   365,   360,   362,   361,   363,   355,   354,   356,   357,   358,
   359,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   415,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   428,   427,   266,
     0,   265,   264,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   273,   268,   341,     0,     0,   275,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   300,     0,   281,   282,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   434,     0,     0,    23,
     0,   416,   422,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   369,   390,   370,
   391,   371,   392,   372,   393,   373,   394,   374,   395,   375,
   396,   376,   397,   377,   398,   389,   410,   378,   399,     0,
     0,   380,   401,   381,   402,   382,   403,   383,   404,   384,
   405,   385,   406,     0,     0,     0,     0,     0,     0,     0,
     0,   471,     0,     0,   470,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   223,     0,     0,     0,     0,   417,
     0,    71,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   452,     0,     0,     0,     0,   444,   446,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   260,   262,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   278,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   436,     0,   433,     0,   419,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   416,   216,   458,   459,     0,     0,     0,     0,     0,
   218,   219,   221,     0,     0,   466,     0,   227,   368,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   448,   453,     0,   445,     0,   234,     0,     0,     0,     0,
     0,     0,   334,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
     0,     0,     0,     0,   340,   276,     0,     0,     0,     0,
     0,   437,     0,   463,     0,     0,     0,   292,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   344,   345,   346,   347,   348,     0,     0,
     0,     0,     0,     0,     0,    22,     0,   421,   284,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   379,   400,   386,   407,
   387,   408,   388,   409,     0,   473,   472,   469,     0,   206,
     0,     0,     0,     0,   214,     0,     0,     0,   464,    72,
     0,   231,   237,     0,   239,     0,     0,   235,     0,   236,
   258,     0,     0,   447,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   286,
     0,     0,     0,     0,   267,     0,   305,     0,   314,     0,
   323,     0,     0,     0,     0,     0,     0,   242,   243,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   433,
   423,    74,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   224,     0,     0,   225,     0,   467,     0,     0,
     0,   245,   255,   454,     0,     0,   338,   248,   249,     0,
     0,     0,     0,   337,   339,   257,   232,   247,   256,   259,
     0,     0,     0,   432,     0,   431,     0,     0,   302,     0,
     0,   311,     0,     0,   320,     0,   269,   270,   271,   272,
     0,     0,   437,     0,   440,     0,     0,     0,     0,   461,
     0,   294,   293,     0,     0,     0,     0,     0,    25,     0,
    34,     0,    38,     0,    32,     0,     0,    37,     0,    42,
    40,     0,     0,     0,     0,     0,     0,    49,     0,     0,
     0,     0,     0,    54,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   215,   220,   222,     0,   228,     0,     0,
   238,   240,   455,     0,     0,     0,   336,   335,   229,   230,
   267,     0,   263,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   439,     0,   438,     0,     0,     0,     0,     0,
     0,     0,   437,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   474,
     0,   465,     0,     0,     0,     0,     0,     0,   430,     0,
     0,     0,     0,     0,     0,     0,     0,   329,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   441,     0,     0,
   460,   295,     0,     0,    39,     0,     0,     0,     0,    29,
     0,    35,     0,    41,    30,    43,     0,    46,     0,    50,
    51,     0,     0,    53,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   226,     0,     0,     0,     0,   261,     0,     0,
   307,     0,   333,     0,     0,   330,   316,     0,     0,   325,
     0,     0,     0,     0,     0,     0,   244,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   104,   108,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   200,     0,     0,     0,     0,
     0,   429,   303,     0,     0,     0,   306,   312,     0,     0,
   315,   321,     0,     0,   324,   233,   246,     0,     0,   250,
     0,     0,     0,     0,     0,    33,    36,    44,     0,    45,
    52,    47,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   309,     0,     0,   318,     0,   327,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   204,     0,     0,   252,   251,     0,
   304,     0,     0,     0,   313,     0,     0,   322,     0,     0,
     0,     0,     0,     0,    28,    31,     0,     0,     0,   102,
     0,   106,     0,   110,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   198,     0,   290,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   308,     0,     0,   332,
   317,     0,   326,     0,     0,     0,     0,     0,     0,    48,
    24,   103,   105,   107,   109,   111,   113,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   199,   201,
     0,   202,   241,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   116,   120,   124,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   310,   331,   319,   328,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   203,   205,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   254,    10,     0,     0,     0,   114,
     0,   118,     0,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
     0,    26,   115,   117,   119,   121,   123,   125,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   128,   132,   136,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   126,     0,   130,     0,   134,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   127,   129,
   131,   133,   135,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   140,   144,   148,   152,   156,   160,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,     0,   142,
     0,   146,     0,   150,     0,   154,     0,   158,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   139,   141,
   143,   145,   147,   149,   151,   153,   155,   157,   159,   161,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   188,   192,   196,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   186,     0,   190,     0,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   187,   189,   191,   193,
   195,   197,     0,     0,     0,   176,   180,   184,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   174,     0,   178,     0,   182,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   175,   177,   179,   181,   183,   185,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   164,   168,   172,     0,     0,
     0,     0,     0,     0,     0,   162,     0,   166,     0,   170,
     0,     0,     0,     0,     0,     0,   163,   165,   167,   169,
   171,   173,     0,     0,     0
};

static const short yydefgoto[] = {  2353,
   215,     2,     9,     3,    19,    20,    21,    22,     4,    71,
    72,    73,   445,  1669,   662,  1574,  1671,   663,  1575,  1673,
   664,  1576,  1889,   665,  1835,  1891,   666,  1836,  1893,   667,
  1837,  2025,   668,  1987,  2027,   669,  1988,  2029,   670,  1989,
  2137,   671,  2107,  2139,   672,  2108,  2141,   673,  2109,  2143,
   674,  2110,  2145,   675,  2111,  2147,   676,  2112,  2335,   677,
  2329,  2337,   678,  2330,  2339,   679,  2331,  2284,   680,  2272,
  2286,   681,  2273,  2288,   682,  2274,  2233,   683,  2215,  2235,
   684,  2216,  2237,   685,  2217,  1696,   686,  1598,  1791,   687,
  1698,   140,   252,    74,   575,   345,   561,   562,   346,    78,
    79,    80,    81,    82,   347,  1220,  1544,  1652,  1223,  1549,
  1656,  1226,  1553,  1659,  1407,  1408,    84,    85,   999,   348,
   143,   367,   178,   247,   438,  1113,  1234,  1235,   350,   498,
   200,   749,   907,   144
};

static const short yypact[] = {  2727,
    53,    59,   348,  3264,-32768,-32768,-32768,  -121,-32768,    72,
    77,   109,   134,   138,   149,   -33,   -25,   -13,-32768,-32768,
-32768,-32768,  2417,    -2,    11,   195,    88,    91,   113,   -38,
   139,   163,   166,   260,   186,   165,   233,   347,   350,   397,
   289,   367,   203,   175,  -131,  -131,   211,   460,     4,   386,
     7,   445,   455,   144,   467,   282,   297,   -20,     9,    20,
-32768,   308,-32768,   503,-32768,   513,   532,   496,    14,    17,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    18,  3097,-32768,-32768,-32768,
-32768,-32768,   342,   342,   542,-32768,   279,    10,-32768,-32768,
-32768,-32768,  -130,  -101,   314,   337,   343,   346,   353,   390,
   393,   416,   425,   436,   486,   499,   500,   519,   522,   523,
   526,   527,   531,   352,   357,   365,-32768,-32768,-32768,-32768,
  2619,  2619,  2619,-32768,-32768,  2619,  1235,    31,   562,  2619,
   563,   421,-32768,   564,   572,-32768,  2619,-32768,  2619,  2619,
  2619,   399,  2619,   405,  2619,  2619,   983,  2619,   408,   419,
   426,  -102,   983,   430,   434,   476,   510,   511,   518,   544,
   654,  -131,  -131,  -131,  2619,  2619,   -93,-32768,   -83,  -131,
   458,   463,   485,   540,-32768,   983,    21,-32768,-32768,-32768,
   983,   983,   738,  2619,  2619,   -64,  2619,   555,  2619,   567,
   671,  2619,  2619,-32768,   772,-32768,   588,-32768,-32768,   787,
-32768,   796,-32768,   821,    18,   663,   691,   700,   712,   725,
   729,   755,   756,   759,   760,   780,   786,   791,   818,   819,
   820,   822,   823,   826,   827,   828,   829,   831,   832,   833,
   834,   835,   836,   837,   838,   873,   735,   733,   781,  2619,
  1015,-32768,  -131,-32768,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,    50,    41,    41,   438,
   840,   840,   840,  1640,  1031,  2466,  1266,   310,   839,  1032,
   842,   464,-32768,-32768,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,-32768,
  -112,  1339,  2885, 11384, 11407,  2619, 11430,  2619, 11453, 11476,
   462,   844,  2320,  2466,-32768,-32768,-32768,  1545,  1033,-32768,
 11499,  2619,  2619,  2619,  2619,  2619,  1043,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,   852,   -86,-32768,-32768,  1825,  3782,
  -131,  -131,   497,   497,   -46,  2619,  2619,  2619,  2619,  2835,
   321,-32768,  2619,  2872,  1045,  1046,-32768, 11522, 11545,   949,
  2619, 11568,   948,  3804,-32768,   856,  1560, 11591,-32768,  2619,
  2937,-32768,  2959,-32768,-32768,    18,  1057,  1058,  1059,  1060,
  1061,  1064,  1065,  1066,  1067,  1068,  1069,  1070,  1071,  1072,
  1073,  1074,  1075,  1076,  1077,  1080,  1081,  1082,  1083,   932,
  1085,  1086,  1087,  1088,  1096,  1095,-32768,   -88,  1097,  1098,
  1100,  1937,   250,   -39,  2624, 11614, 10734, 11637, 10759, 11660,
 10784, 11683, 10809, 11706, 10834, 11729, 10859, 11752, 10884, 11775,
 10909, 11798, 10934, 11821, 10959, 11844, 10984,  3826,  3848, 11867,
 11009, 11890, 11034, 11913, 11059, 11936, 11084, 11959, 11109, 11982,
 11134,  3870,  3892,  3914,  3936,  3958,  3980,   536,   172,   897,
   904,  2619,-32768,   983,  2662,  1545,-32768,   533,   150,    41,
  2619,  1101,  1102,    12,   908,-32768,  1581,   580,   234,   565,
   565,   440,   440,   440,   440,   205,   205,   840,   840,   840,
   840,  1104,  2466,  2619,  1105,  1106,  1107, 12005,  1111, 12028,
  1112,  1113,  1377,  2619,   465,  2466,   541,  2619,  2619,  1114,
  3243, 12051, 12074, 12097,  3267,  2619,  3298,  3322, 12120, 12143,
 12166, 12189, 12212,   909,  -131,  2619,  2619,-32768,-32768,-32768,
   917,  3240,-32768,   918,  2619,  4002,  4024,  4046, 11159,   -44,
   -36,   -35,   -21,-32768,-32768,-32768,  2619, 11184,-32768,   920,
   922,  1121,  1122,   958, 12235,  1150,   956,  2619,  3048,  2619,
  2619,-32768, 12258,-32768,-32768,   990,   957,   960,   961,   963,
   964,   965,   968,   970,   971,   973,   974,   975,   976,   978,
   979,   980,   981,   985,   986,   987,   989,   991,   992,   993,
   994,   995,   997,   999,  1000,  1001,-32768,  1155,   988,-32768,
  1002,    85,-32768,-32768,   996,  1009,  1010,  1011,  1012,  1013,
  1014,  1016,  1017,  1019,  1021,  1022,  1023,  1024,  1025,  1026,
  1027,  1028,  1029,  1030,  1035,  1037,  1039,  1042,  1044,  1089,
  1156,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2619,
  2619,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  1209,-32768,  2466,    41,-32768, 11209,  1223,  2466,  1040,    39,
  2619,  1224,  1225,   492,-32768,  1236,  1084,     9,  1267,-32768,
  2619,-32768,   201,  4068,  -131,   983,   983,  1276,   983,  1278,
   983,   983,-32768,  2466,  3346,  1858,   578,-32768,  1625,   620,
  1090,  1279,  1282,  1283,  1284,  1287,   341,  1289,  1290,  1293,
  1295,  1297,  1299,  1302,  1306,     0,  4090,  4112,-32768,-32768,
  3370,  -131,  -131,  -131,  1305,  2466,  2466,  2466,  2466,   679,
  1307,  2619,  2619,   983,   983,  2619,  1308,   983,  1312,  4134,
-32768,  1744,   395,  1310,  1129,  1309,  2619,  2619,  -131,  1315,
  1316,  1135,  1322,  1323,   983,   983,  1324,  -131,  1325,  1326,
   983,   983,  1327,  1329,  1330,  1331,  1332,   983,   568,   983,
  1334,  1333,  1335,  1365,  1366,-32768,  1367,   342,  1368,-32768,
  1370,  3116,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,-32768, 12281,
 11234, 12304, 11259, 12327, 11284, 12350, 11309, 11334,  1172,   229,
  1175,   148,-32768,  1545,-32768,    19,   538,  1180,  1378,   728,
-32768,-32768,-32768,     9,  2619,-32768,   581,-32768,  2277,  1404,
  2619,    23,    30,    38,   983,  1405,   983,  1406,  1407,   585,
-32768,-32768,  2466,-32768,  2619,-32768,  2619,   983,   983,   983,
  1186,  1216,-32768,   410,   983,   983,   983,   983,   983,   983,
   983,   470,  2619,  2619,  2619,  1210,  -115,  -106,   -81,-32768,
   586,   608,   609,   612,-32768,-32768,  4156,  4178,  1410,  1411,
 12373,    15,  1313,-32768,  2619,  2619,  2619,-32768,  1213,  1254,
  1217,  4200,  4222,   -24,  1220,  1226,  1222,  1228,  1227,  1230,
  1233,  1237,   179,  1238,  1231,  1240,  1244,  1257,  1262,  1280,
  1281,  1286,  1259,-32768,-32768,-32768,-32768,-32768,  1317,  1328,
  1350,  1351,  1352,  1288,  1353,-32768,  1355,   250,-32768,  1426,
  4244,  4266,  4288,  4310,  4332,  4354,  4376,  4398,  4420,  4442,
  4464,  4486,  4508,  4530,  4552,  4574,  4596,  4618,  4640,  4662,
  4684,  4706,  4728,  4750,  4772,  4794,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1232,-32768,-32768,-32768,   983,    41,
  2619,  1480,  1484,    12,-32768,  1485, 11359,     9,-32768,-32768,
  4816,-32768,-32768,  -131,-32768,  -131,  1507,-32768,  1525,-32768,
-32768,  1359,   615,  2277,  4838,  1528,  1529,  1555,  2619,  2619,
  2619,  2619,  1556,  1557,  1561,  1563,  1565,  1566,  1567,-32768,
  2547,  3394, 12396,  1979,   497,  -131,  1568,  -131,  1571,  -131,
  1575,  1577,  1578,  1579,  1580,  2619,  2619,-32768,-32768,  1559,
   983,   983,  1481,   983,  2927,   269, 12419,  2619,    18,  1585,
  2619,   983,  1584,  1588,  1586,  1432,  1587,   568,  1589,  1591,
  2619,  1590,  1620,  1618,  1619,  1623,   568,  2619,  2619,  2619,
   983,  1621,  1626,   568,  2619,  1627,  1628,  1622,  2619,   342,
-32768,-32768,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  1630,  1629,
  1631,   782,-32768,  1632,  1634,-32768,  1434,-32768,  2619,    87,
   131,-32768,-32768,-32768,  1440,  2619,-32768,-32768,-32768,  4860,
  4882,  1091,  1292,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1361,  1636,  1438,-32768,  2619,-32768,  1444,     3,-32768,  1439,
   161,-32768,  1455,   182,-32768,  1457,-32768,-32768,-32768,-32768,
  4904,  4926,    15,   239,-32768,   616,  1458,  1569,  2619,-32768,
  2619,-32768,-32768,  4948,    18,  1465,  4970,  1464,-32768,  1466,
-32768,  1467,-32768,  1470,-32768,  1469, 12442,-32768,  1472,-32768,
-32768,  1479,  1482, 12465,  4992, 12488,  1476,-32768,  1483,  1486,
  5014,  1487,  1489,-32768,  5036,  1488,  5058,  5080,  5102,  5124,
  5146,  5168,  5190,  5212,  5234,  5256,  5278,  5300,  5322,  5344,
  5366,  5388,  5410,  5432,  5454,  5476,  5498,  5520,  5542,  5564,
  5586,  5608,  1490,-32768,-32768,-32768,     9,-32768,  1576,  5630,
-32768,-32768,-32768,  5652,  2619,  2619,-32768,-32768,-32768,-32768,
   497,  3213,-32768,  2350,    64,  2350,    64,  2350,    64,  2619,
  2619,  1573,-32768,   983,-32768,   983,  2619,  3418,  3442,   983,
    18,  1668,    15,   568,  1680,  2619,  1684,   568,  1688,  1683,
  1690,  1692,  1714,  2619,  1715,   983,  1721,  1747,  2619,  1751,
  1749,  2619,  1758,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,-32768,
  1767,-32768,  2619,  1769, 12511, 12534,  1574,  2619,-32768,  2350,
  2350,  2619,  3466,   194,  1771,  1596,   -47,-32768,  3490,   200,
    -9,  3514,   204,    -7,  3538,  3562,  1602,-32768,  1659,  1468,
-32768,-32768,  1658,  1613,-32768,  1661,  1662,  1687,  5674,-32768,
  1582,-32768,  1583,-32768,-32768,-32768, 12557,-32768,  1694,-32768,
-32768, 12580,  1633,-32768, 12603,  1713, 12626, 12649, 12672,  5696,
  5718,  5740,  5762,  5784,  5806,  5828,  5850,  5872,  5894,  5916,
  5938,  5960,  5982,  6004,  6026,  6048,  6070,  6092,  6114,  6136,
 12695,  6158,-32768,  6180,  1716,   983,   983,-32768,  3586,  3754,
  1827,  2619,-32768,   983,  1828,-32768,  1830,  2619,  1832,  1886,
  2619,  1888,  1890,  1912,   983,   983,-32768,  1913,    18,   568,
   568,   568,   568,  1920,  1930,  1931,   568,  1932,  1933,  1934,
  1938,-32768,-32768,-32768,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,-32768,  2619,  2619,  1939,   983,
   983,-32768,-32768,  1737,  3610,  1741,-32768,-32768,  1742,  3634,
-32768,-32768,  1759,  3658,-32768,-32768,-32768,  1761,  1740,-32768,
    18,  1762,  1763,  1764,  1772,-32768,-32768,-32768,  1766,-32768,
-32768,-32768,  1768,  1770,  1773,  1774,  6202,  6224,  6246,  6268,
  6290,  6312,  6334,  6356,  6378,  6400,  6422,  6444,  6466,  6488,
  6510,  6532,  6554,  6576,  6598,  6620,  6642,  1775, 12718,  3682,
  1777,  1962,  1967,    64,  1968,   983,    64,  1970,    64,  1971,
   983,  1879,    18,   568,   568,  1995,  2001,   568,  2012,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,    41,-32768,  2013,  2015,-32768,-32768,    -6,
-32768,  1813,   619,    -3,-32768,  1816,    78,-32768,  1818,  1819,
  1822,  1881,  1844,  1845,-32768,-32768,  1851,  1853,   622,  2277,
   623,  2277,   667,  2277,  6664,  6686,  6708,  6730,  6752,  6774,
  6796,  6818,  6840,  6862,  6884,  6906,  6928,  6950,  6972,  6994,
  7016,  7038,  7060,  7082,  7104,   668,-32768,  1848,-32768,  1849,
  2048,    64,   983,  2051,  2052,    64,  2054,    64,  1959,  2619,
    18,   568,   983,  2058,  2059,  2619,  2060,  2619,  2061,  2619,
  2062,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,    41,  2063,    41,  2064,-32768,    84,  1865,-32768,
-32768,   290,-32768,   291,  1867,  7126,    18,  1869,  1880,-32768,
-32768,  2277,-32768,  2277,-32768,  2277,-32768, 12741, 12764, 12787,
  7148,  7170,  7192,  7214,  7236,  7258,  7280,  7302,  7324,  7346,
  7368,  7390,  7412,  7434,  7456,  7478,  7500,  7522,-32768,-32768,
   673,-32768,-32768,  2077,  2079,  2080,  2081,  2619,  2619,    18,
   568,   983,-32768,-32768,-32768,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,    41,  2082,-32768,-32768,-32768,-32768,  7544,
  3706,  1918,  1887,  1889,  1885,  1891,  1892,  7566,  7588,  7610,
  7632,  7654,  7676,  7698,  7720,  7742,  7764,  7786,  7808,  7830,
  7852,  7874,  7896,  7918,  7940,-32768,-32768,  2619,  2086,  1922,
   983,   568,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  3730,-32768,-32768,  1894,  1896,   677,  2277,
   680,  2277,   681,  2277,  7962,  7984,  8006,  8028,  8050,  8072,
  8094,  8116,  8138,  8160,  8182,  8204,  8226,  8248,  8270,  8292,
  8314,  8336,  2113,   983,  2123,  2619,  2124,  2619,  2125,  2619,
  2126,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,-32768,
  1929,-32768,  2277,-32768,  2277,-32768,  2277,-32768, 12810, 12833,
 12856,  8358,  8380,  8402,  8424,  8446,  8468,  8490,  8512,  8534,
  8556,  8578,  8600,  8622,  8644,  8666,   983,-32768,-32768,-32768,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  1936,  1941,  1956,  1966,  8688,
  8710,  8732,  8754,  8776,  8798,  8820,  8842,  8864,  8886,  8908,
  8930,  8952,  8974,  8996,   983,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  1940,   686,  2277,   689,  2277,   690,  2277,
  9018,  9040,  9062,  9084,  9106,  9128,  9150,  9172,  9194,  9216,
  9238,  9260,  9282,  9304,  9326,   568,  2619,  2130,  2619,  2136,
  2619,  2166,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  1974,  2277,-32768,
  2277,-32768,  2277,-32768, 12879, 12902, 12925, 12948, 12971, 12994,
  9348,  9370,  9392,  9414,  9436,  9458,  9480,  9502,  9524,  2168,
-32768,-32768,-32768,-32768,-32768,-32768,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,-32768,  1981,  1982,  1983,  1984,
  1985,  1986,  9546,  9568,  9590,  9612,  9634,  9656,  9678,  9700,
  9722,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,   693,  2277,   697,  2277,
   720,  2277,   727,  2277,   730,  2277,   731,  2277,  9744,  9766,
  9788,  9810,  9832,  9854,  9876,  9898,  9920,  2619,  2169,  2619,
  2178,  2619,  2186,  2619,  2187,  2619,  2188,  2619,  2198,  2619,
  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2619,  2277,-32768,
  2277,-32768,  2277,-32768,  2277,-32768,  2277,-32768,  2277,-32768,
  9942,  9964,  9986, 10008, 10030, 10052, 13017, 13040, 13063,  2619,
  2619,  2619,  2619,  2619,  2619,-32768,-32768,-32768, 10074, 10096,
 10118, 10140, 10162, 10184,  2000,  2002,  2003,  2619,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2619, 10206, 10228, 10250, 10272,
 10294, 10316,   734,  2277,   741,  2277,   742,  2277,  2619,  2619,
  2619,  2619,  2619,  2619,  2619,  2200,  2619,  2203,  2619,  2204,
 10338, 10360, 10382, 13086, 13109, 13132,  2277,-32768,  2277,-32768,
  2277,-32768,  2619,  2619,  2619,-32768,-32768,-32768, 10404, 10426,
 10448,  2006,  2007,  2008,  2619,  2619,  2619,  2619,  2619,  2619,
 10470, 10492, 10514,   745,  2277,   746,  2277,   770,  2277,  2619,
  2619,  2619,  2619,  2208,  2619,  2209,  2619,  2217, 10536, 10558,
 10580,  2277,-32768,  2277,-32768,  2277,-32768,  2619,  2619,  2619,
 10602, 10624, 10646,  2619,  2619,  2619, 10668, 10690, 10712,  2619,
  2619,  2619, 13155, 13178, 13201,-32768,-32768,-32768,  2020,  2022,
  2023,  2619,  2619,  2619,   771,  2277,   777,  2277,   784,  2277,
  2619,  2223,  2619,  2224,  2619,  2227,  2277,-32768,  2277,-32768,
  2277,-32768,  2235,  2238,-32768
};

static const short yypgoto[] = {-32768,
  -178,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1605,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -301,   -17,-32768,  2239,    -1,  -365,  -170,     1,-32768,
-32768,-32768,-32768,-32768,  2240,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, -1295, -1369,-32768,-32768, -1066,   -23,
-32768,   136,-32768,   -90,-32768, -1200,  1133,  1475,  -177,  -334,
  -736,  1192,-32768,   -68
};


#define	YYLAST		13400


static const short yytable[] = {   142,
   210,   212,    76,   248,    77,   141,   501,   184,   564,   537,
   187,   906,   198,   253,   380,   747,   146,   384,   208,  1405,
   213,   208,   196,   201,  1406,    99,   382,   152,  1062,   152,
   154,  1411,  1332,  1414,   308,  1063,   406,  1486,   401,   390,
   403,  1486,   897,  1065,  1486,   208,    86,   124,   125,   126,
   124,   125,   126,   488,   208,   173,   174,  1405,     5,  1405,
  1405,  1254,  1406,  1405,  1406,  1406,   175,   255,  1406,   256,
  1263,   371,   372,   176,   124,   125,   126,  1270,    87,  1064,
   371,   372,    88,   124,   125,   126,   522,  1066,  1096,   208,
  1097,   523,  1311,   371,   372,   355,   257,  1098,   258,  1099,
   371,   372,   356,   371,   372,   371,   372,   301,   302,   303,
   627,   373,   304,   307,    89,   628,   312,   555,   124,   125,
   126,   374,  1100,   332,  1101,   333,   334,   335,   497,   337,
  1405,   339,   340,   391,   351,  1406,  1312,   309,   310,    90,
   371,   372,  1426,    91,  1405,   898,   899,   371,   372,  1406,
  1405,   369,   370,   149,    92,  1406,    99,   565,  1485,   153,
   796,   153,   371,   372,    93,   634,   497,  1056,   797,   798,
   388,   389,    94,   392,  1123,   394,   156,   197,   397,   398,
   177,   179,   191,   799,    95,   192,   371,   372,   753,   371,
   372,   127,   128,   129,   130,   145,  1489,   741,  1492,  1701,
   148,   767,  1705,   943,   154,   214,  1324,   159,   185,   371,
   372,   188,  1111,   199,   254,   147,   748,   202,   209,  1112,
   383,   211,     6,     7,   589,     8,   442,   596,   489,   490,
   491,   446,   447,   448,   449,   450,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
   475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
   485,   486,   487,   371,   372,   160,  1241,  1427,   134,   135,
  1486,  1431,   496,  1707,  1486,   149,   849,  1486,   150,  1794,
   502,   507,   508,   509,   510,   511,   512,   513,   514,   515,
   516,   517,   518,   519,   520,   521,   157,   366,  1650,   368,
   151,  1654,   528,  1657,   530,   375,   500,   371,   372,   302,
   496,  1188,   127,   128,   129,   130,   576,   577,   541,   542,
   543,   544,   545,   166,   547,   548,   549,   550,   551,   552,
   553,   134,   135,   134,   135,   497,   933,   371,   372,   849,
    10,   740,   566,   567,   568,   569,  1405,  1405,   497,   578,
   155,  1406,  1406,   156,  1326,   371,   372,   585,   371,   372,
   732,   560,   560,   563,   563,   733,   593,  1132,  1486,   172,
   371,   372,  1486,   158,  1486,  1328,   371,   372,   444,   161,
   371,   372,   162,   326,   327,   328,   934,  1482,   890,   910,
   171,   329,   967,  1488,   738,   167,  1748,  1491,   168,   169,
  1752,   170,  1754,   318,   319,   180,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   633,   314,  1047,   186,   920,
   329,   743,   738,  1562,  1563,  1564,  1565,  1333,   163,   164,
  1569,   165,  1334,   134,   135,   315,   316,   317,   318,   319,
   189,   320,   321,   322,   323,   324,   325,   326,   327,   328,
   190,   951,   952,   953,   954,   329,  1081,  1082,   736,   506,
   193,   302,   134,   135,  1242,  1090,  1091,   744,   250,   194,
   251,   742,   127,   128,   129,   130,    11,    12,    13,    14,
    15,    16,    17,    18,   195,  1796,  1797,   903,   181,   496,
   754,   182,   183,   134,   135,   203,   558,   559,   204,   736,
   765,   259,   496,   260,   769,   770,   205,   315,   316,   317,
   318,   319,   777,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   787,   788,   261,   206,   262,   329,   207,   246,
   263,   791,   264,   265,  1050,   266,   249,  1663,  1664,   297,
   267,  1667,   268,   800,   298,   497,    44,    45,    46,    47,
   895,    49,   299,   851,   810,   311,   812,   813,   313,   330,
  1391,   315,   316,   317,   318,   319,   331,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   497,   269,  1073,   270,
   271,   329,   272,   968,  1049,  1051,   336,   315,   316,   317,
   318,   319,   338,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   352,   273,   850,   274,   353,   329,   497,   497,
   497,   497,   275,   354,   276,   926,   324,   325,   326,   327,
   328,   134,   135,   277,   358,   278,   329,   492,   359,   251,
   315,   316,   317,   318,   319,  1758,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   134,   135,   365,   134,   135,
   329,   533,   376,   251,   766,   891,   251,   377,   315,   316,
   317,   318,   319,   360,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   279,   955,   280,   880,   881,   329,   378,
   786,   994,   995,   996,   997,   998,   281,   283,   282,   284,
   882,   883,   884,   885,   886,   887,   888,   361,   362,   496,
   127,   128,   129,   130,   894,   363,   285,   900,   286,   287,
   289,   288,   290,   291,   293,   292,   294,   909,   295,  1217,
   296,   134,   135,  1055,  1833,   730,   738,   731,   739,   379,
   496,   364,   736,   387,   738,   497,   768,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   393,  1007,   317,   318,
   319,   329,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   395,   496,   496,   496,   496,   329,   399,   957,   958,
   396,   738,   961,   924,  1058,   400,  1059,  1306,   738,   738,
  1072,  1102,   402,   972,   973,  1888,   315,   316,   317,   318,
   319,   404,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   738,   738,  1103,  1104,   738,   329,  1105,   738,  1334,
  1195,  1335,  1703,   405,  1704,  1716,  1718,  1717,  1719,  1011,
  1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,  1020,  1021,
  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,  1030,  1031,
  1032,  1033,  1034,  1035,  1036,   315,   316,   317,   318,   319,
   407,   320,   321,   322,   323,   324,   325,   326,   327,   328,
  1720,  1743,  1721,  1744,   850,   329,  1824,   437,  1825,  1052,
  1916,  1057,  1917,  1918,  1920,  1919,  1921,  1061,   408,  2047,
   912,  2048,  2049,  2051,  2050,  2052,  2158,   409,  2159,   496,
  2160,  1074,  2161,  1075,   315,   316,   317,   318,   319,   410,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1092,
  1093,  1094,   411,  2162,   329,  2163,   412,   947,   948,   949,
  2164,   440,  2165,  2166,  2168,  2167,  2169,  2245,   439,  2246,
  1245,  1115,  1116,  1117,  2247,  2249,  2248,  2250,  2293,  2295,
  2294,  2296,   413,   414,   974,  1397,   415,   416,   315,   316,
   317,   318,   319,   983,   320,   321,   322,   323,   324,   325,
   326,   327,   328,  2297,  2341,  2298,  2342,   417,   329,  2068,
  2343,  1181,  2344,   418,   441,    96,   341,  2345,   419,  2346,
  1151,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   420,   421,   422,   443,   423,
   424,   342,  1212,   425,   426,   427,   428,  1182,   429,   430,
   431,   432,   433,   434,   435,   436,   329,   494,   504,   539,
   503,   505,    44,    45,    46,    47,    48,    49,   534,   546,
   554,   580,   581,   584,   587,  1200,  1201,  1202,  1203,  1276,
   590,   597,   598,   599,   600,   601,  1341,  1211,   602,   603,
   604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
   614,   615,  1231,  1232,   616,   617,   618,   619,   620,   621,
   622,   623,   624,   560,  1244,   563,  1317,  1247,   625,   626,
   734,   629,   735,   630,   631,   746,   745,  1257,   750,   752,
   785,   755,   756,   757,  1264,  1265,  1266,   759,   761,   762,
   771,  1271,   789,   790,   802,  1275,   803,   804,   805,  1277,
  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  1286,  1287,
  1288,  1289,  1290,  1291,  1292,  1293,  1294,  1295,  1296,  1297,
  1298,  1299,  1300,  1301,  1302,   806,   808,   809,   815,   846,
   816,   879,  1424,   817,   818,  1310,   819,   820,   821,   131,
   343,   822,  1314,   823,   824,   133,   825,   826,   827,   828,
   136,   829,   830,   831,   832,   139,   847,   344,   833,   834,
   835,  1322,   836,   853,   837,   838,   839,   840,   841,  1190,
   842,  1191,   843,   844,   845,   848,   854,   855,   856,   857,
   858,   859,   889,   860,   861,  1338,   862,  1339,   863,   864,
   865,   866,   867,   868,   869,   870,   871,   872,   893,   901,
   902,  1218,   873,  1221,   874,  1224,   875,    96,   300,   876,
   896,   877,   904,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   315,   316,   317,
   318,   319,   908,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   915,   905,   917,   928,   878,   329,   929,   930,
   931,  1395,  1396,   932,   927,   935,   936,  1318,   970,   937,
  1403,   938,  1409,   939,  1412,   940,  1415,  1416,   941,   942,
   950,   971,   956,  1420,   962,   964,   969,   975,   976,   560,
  1561,   563,  1429,   977,   978,   979,   982,   984,   985,   988,
  1437,   989,   990,   991,   992,  1442,  1001,  1002,  1445,  1003,
  1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1455,  1456,
  1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,
  1467,  1468,  1469,  1470,  1471,  1472,  1319,  1004,  1005,  1474,
  1046,  1008,  1006,  1048,  1479,  1009,   301,   302,  1480,    96,
   300,  1053,  1613,  1079,  1054,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,  1060,
  1068,  1070,  1071,  1080,  1095,  1108,  1109,  1118,  1114,  1119,
  1120,   131,   132,  1124,  1125,  1126,  1127,   133,  1129,  1134,
  1128,  1152,   136,  1179,  1662,   305,  1130,   139,  1135,   306,
  1131,  1133,   315,   316,   317,   318,   319,  1136,   320,   321,
   322,   323,   324,   325,   326,   327,   328,  1142,  1545,  1404,
  1137,  1410,   329,  1413,  1550,  1138,   499,  1554,   315,   316,
   317,   318,   319,  1497,   320,   321,   322,   323,   324,   325,
   326,   327,   328,  1139,  1140,  1183,  1148,  1184,   329,  1141,
  1186,  1577,  1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,
  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,  1594,  1595,
  1596,  1597,  1192,  1599,  1600,   315,   316,   317,   318,   319,
  1143,   320,   321,   322,   323,   324,   325,   326,   327,   328,
  1193,  1144,  1757,  1197,  1198,   329,   368,   315,   316,   317,
   318,   319,   524,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   538,  1145,  1146,  1147,  1149,   329,  1150,  1194,
  1199,  1204,  1205,   131,   132,  1233,  1206,   591,  1207,   133,
  1208,  1209,  1210,  1219,   136,  1697,  1222,   763,  1800,   139,
  1225,   764,  1227,  1228,  1229,  1230,  1237,  1246,   751,  1249,
  1250,  1251,  1253,  1256,  1255,  1258,  1670,  1672,  1674,  1675,
  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,
  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,  1694,  1695,
  1252,  1832,  1259,  1260,  1261,  1262,  1268,  1274,  1269,  1272,
  1273,   349,   925,  1303,  1304,  1309,  1305,   357,  1307,  1308,
  1313,  1320,  1321,  1325,   315,   316,   317,   318,   319,  1323,
   320,   321,   322,   323,   324,   325,   326,   327,   328,  1327,
   381,  1329,  1336,  1342,   329,   385,   386,  1344,  1347,  1345,
  1346,  1337,  1348,  1425,  1789,  1350,  1792,  1351,  1417,  1356,
  1352,  1357,  1428,  1392,  1358,  1433,  1756,  1361,  1390,  1430,
  1360,  1363,  1762,  1432,  1764,  1434,  1766,  1435,  1768,  1769,
  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,
  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1436,
  1438,   315,   316,   317,   318,   319,  1440,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   315,   316,   317,   318,
   319,   329,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   966,  1441,  1443,  1444,  1856,   329,   315,   316,   317,
   318,   319,  1446,   320,   321,   322,   323,   324,   325,   326,
   327,   328,  1473,  1475,  1830,  1831,  1483,   329,  1499,  1478,
  1504,  1505,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,
  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,
  1484,   315,   316,   317,   318,   319,  1495,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   315,   316,   317,   318,
   319,   329,   320,   321,   322,   323,   324,   325,   326,   327,
   328,  1509,  1543,  1547,  1884,  1548,   329,  1551,   493,  1890,
  1892,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,
  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,
    96,   300,  1496,  1498,  1500,  1501,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
  1502,  1552,  1943,  1555,  1945,  1556,  1947,  1507,  1949,  1950,
  1951,  1952,  1953,  1954,  1955,  1956,  1957,  1958,  1959,  1960,
  1961,  1962,  1963,  1964,  1965,  1966,  1511,  1557,  1560,  1539,
   315,   316,   317,   318,   319,  1566,   320,   321,   322,   323,
   324,   325,   326,   327,   328,  1567,  1568,  1570,  1571,  1572,
   329,  1604,  1573,  1601,  1606,  1612,  1607,  1990,  1991,  1992,
  1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,
  2003,  2004,  1616,  1609,  1611,  1614,  1615,  1648,   737,  1618,
  1617,  1619,  1649,  1651,  1620,  1655,  1658,  1621,  1622,  1644,
  1647,  1661,  2026,  2028,  2030,  2031,  2032,  2033,  2034,  2035,
  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
  1665,   315,   316,   317,   318,   319,  1666,   320,   321,   322,
   323,   324,   325,   326,   327,   328,  1668,  1702,  1699,  1700,
  1706,   329,  1708,  2069,  1709,  2071,  1710,  2073,   556,  2075,
  2076,  2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,
  2086,  2087,  2088,  2089,   131,   132,  1711,  1712,  1713,  1714,
   133,  1715,  1745,  1747,  1746,   136,  1750,  1751,   922,  1753,
   139,  1755,   923,  1760,  1761,  1763,  1765,  1767,  1790,  1793,
  1795,  1798,  1801,  2113,  2114,  2115,  2116,  2117,  2118,  2119,
  2120,  2121,  1826,  1802,  1827,  1828,  1829,  1857,  1860,  1863,
  1861,  1885,  1862,  1886,  1915,  1864,  1865,  1914,  2138,  2140,
  2142,  2144,  2146,  2148,  2149,  2150,  2151,  2152,  2153,  2154,
  2155,  2156,  2157,   315,   316,   317,   318,   319,  1940,   320,
   321,   322,   323,   324,   325,   326,   327,   328,  1942,  1944,
  1946,  1948,  1967,   329,  2179,  2070,  2181,   632,  2183,  2005,
  2185,  2072,  2187,  2046,  2189,  2006,  2191,  2192,  2193,  2194,
  2195,  2196,  2197,  2198,  2199,   315,   316,   317,   318,   319,
  2007,   320,   321,   322,   323,   324,   325,   326,   327,   328,
  2008,  2074,  2090,  2106,  2180,   329,  2209,  2210,  2211,  2212,
  2213,  2214,  1215,  2182,  1216,  2122,  2123,  2124,  2125,  2126,
  2127,  2184,  2186,  2188,  2227,  2228,  2229,  2230,  2231,  2232,
  2234,  2236,  2238,  2190,  2224,  2258,  2225,  2226,  2260,  2262,
  2278,  2279,  2280,  2303,  2305,  2251,  2252,  2253,  2254,  2255,
  2256,  2257,  2307,  2259,  2332,  2261,  2333,  2334,  2348,  2350,
   913,   914,  2352,   916,  2354,   918,   919,  2355,   852,  2269,
  2270,  2271,    75,    83,  1236,  1185,     0,     0,     0,     0,
     0,  2281,  2282,  2283,  2285,  2287,  2289,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  2299,  2300,  2301,  2302,
     0,  2304,     0,  2306,     0,     0,     0,     0,   959,   960,
     0,     0,   963,     0,  2311,  2312,  2313,     0,     0,     0,
  2317,  2318,  2319,     0,     0,     0,  2323,  2324,  2325,   980,
   981,     0,     0,     0,     0,   986,   987,     0,  2336,  2338,
  2340,     0,   993,     0,  1000,     0,     0,  2347,     0,  2349,
     0,  2351,    96,   535,     0,     0,     0,     0,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    96,   300,     0,     0,     0,     0,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,     0,     0,     0,     0,     0,     0,     0,  1067,
     0,  1069,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1076,  1077,  1078,     0,     0,     0,     0,  1083,
  1084,  1085,  1086,  1087,  1088,  1089,     0,     0,     0,    96,
    97,    98,     0,    99,     0,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,     0,
   124,   125,   126,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,    96,   341,
     0,     0,     0,   329,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,     0,     0,
     0,     0,     0,     0,   342,     0,   131,   132,     0,     0,
     0,     0,   133,     0,     0,     0,     0,   136,     0,     0,
     0,     0,   139,  1180,   536,    44,    45,    46,    47,    48,
    49,     0,     0,     0,     0,     0,  1400,  1401,     0,     0,
     0,     0,   133,     0,     0,     0,     0,  1402,     0,    96,
   300,   208,   139,     0,   176,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,     0,
   124,   125,   126,     0,     0,     0,     0,     0,  1238,   127,
   128,   129,   130,     0,     0,     0,  1248,     0,     0,     0,
     0,     0,     0,   131,   132,     0,     0,     0,     0,   133,
   134,   135,     0,     0,   136,  1267,   137,     0,   138,   139,
     0,    96,   300,     0,     0,     0,     0,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,     0,   131,   495,     0,     0,     0,     0,   133,     0,
     0,     0,     0,   136,    96,   535,     0,     0,   139,     0,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,     0,     0,   635,   636,   637,   638,
   639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
   649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
   659,   660,     0,     0,     0,     0,    -7,     1,     0,   -12,
   -55,     0,     0,   131,   132,     0,     0,     0,     0,   133,
     0,     0,     0,     0,   136,     0,     0,     0,     0,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   -55,
     0,     0,     0,   -55,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,     0,     0,   -55,   -55,   -55,   -55,   -55,
   -55,   -55,     0,   -55,   -55,   -55,   -55,   -55,     0,     0,
     0,     0,     0,     0,     0,   131,   132,     0,  1418,     0,
  1419,   133,     0,     0,  1423,     0,   136,     0,     0,     0,
     0,   139,     0,     0,     0,   -55,   -55,   -55,   -55,   661,
  1439,     0,     0,   -55,     0,   -55,     0,   -55,   -55,   -55,
   -55,   -55,   -55,   -55,   -55,   -55,   -55,     0,   131,   132,
     0,     0,     0,     0,   133,     0,     0,     0,     0,   136,
     0,     0,     0,     0,   139,   -12,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,   570,    28,    29,   571,   572,    32,   573,
    34,     0,    35,     0,    37,    38,    39,     0,    41,    42,
    -7,    -7,     0,    -7,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
   570,    28,    29,   571,   572,    32,   573,    34,     0,    35,
     0,    37,    38,    39,     0,    41,    42,     0,     0,     0,
     0,     0,     0,     0,    56,    57,    58,     0,     0,     0,
     0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
  1540,  1541,    68,     0,     0,     0,     0,     0,  1546,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1558,
  1559,    56,    57,    58,     0,   570,    28,    29,   571,   572,
    32,   573,    34,     0,    35,     0,    37,    38,    39,    68,
    41,    42,     0,     0,     0,     0,     0,   570,    28,    29,
   571,   572,    32,   573,    34,     0,    35,    54,    37,    38,
    39,     0,    41,    42,  1602,  1603,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
     0,     0,     0,     0,     0,     0,    56,    57,    58,     0,
   574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    68,     0,     0,     0,    56,    57,
    58,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,    68,   579,     0,     0,
  1653,   329,     0,   525,     0,  1660,   570,    28,    29,   571,
   572,    32,   573,    34,     0,    35,     0,    37,    38,    39,
     0,    41,    42,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,    54,     0,
     0,     0,     0,   329,     0,     0,     0,     0,     0,     0,
  1239,     0,  1240,     0,     0,     0,     0,     0,   216,     0,
     0,     0,   594,     0,     0,     0,     0,    56,    57,    58,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   595,    68,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1749,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1759,   635,   636,
   637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
   647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
   657,   658,   659,   660,     0,     0,     0,   217,   218,   219,
     0,     0,     0,     0,     0,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,     0,     0,     0,     0,     0,
     0,     0,     0,   230,   231,   232,   233,   234,   235,   236,
   237,   238,   239,   811,   240,   241,   242,   243,   244,   245,
     0,     0,     0,     0,     0,     0,     0,    23,     0,     0,
     0,     0,     0,     0,     0,     0,  1834,     0,   570,    28,
    29,   571,   572,    32,   573,    34,     0,    35,     0,    37,
    38,    39,     0,    41,    42,     0,    24,     0,     0,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    54,    35,    36,    37,    38,    39,    40,    41,    42,     0,
     0,  1010,    43,    44,    45,    46,    47,    48,    49,     0,
    50,    51,    52,    53,    54,  1887,     0,     0,     0,    56,
    57,    58,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    68,     0,     0,
     0,     0,    55,    56,    57,    58,     0,     0,     0,     0,
    59,     0,    60,     0,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,     0,     0,     0,     0,  1941,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,     0,     0,     0,     0,     0,  1398,     0,  1399,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1986,     0,   315,   316,   317,   318,   319,   772,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,     0,     0,     0,     0,     0,
     0,     0,   776,     0,   315,   316,   317,   318,   319,  2024,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,   778,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,   779,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,   921,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,   946,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   315,   316,   317,   318,   319,  1213,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,  1421,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,  1422,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,  1481,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,  1487,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   315,   316,   317,   318,   319,  1490,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,  1493,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,  1494,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,  1542,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,  1605,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   315,   316,   317,   318,   319,  1608,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,     0,     0,   315,   316,
   317,   318,   319,  1610,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
     0,     0,   315,   316,   317,   318,   319,  1646,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,     0,     0,   315,   316,   317,   318,
   319,  1859,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,     0,     0,
   315,   316,   317,   318,   319,  1913,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   493,     0,     0,     0,     0,   556,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   557,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,   588,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,   710,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,   711,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,   724,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   725,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,   726,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,   727,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,   728,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,   729,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   792,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,   793,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,   794,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,   911,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,   944,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,   945,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,   965,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1106,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1107,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1121,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1122,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1153,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1154,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1155,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1156,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1157,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1158,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1159,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1160,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1161,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1162,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1163,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1164,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1165,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1166,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1167,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1168,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1169,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1170,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1171,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1172,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1173,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1174,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1175,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1176,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1177,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1178,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1189,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1196,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1315,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1316,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1330,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1331,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1340,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1343,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1354,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1359,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1362,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1364,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1365,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1366,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1367,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1368,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1369,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1370,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1371,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1372,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1373,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1374,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1375,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1376,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1377,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1378,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1379,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1380,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1381,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1382,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1383,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1384,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1385,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1386,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1387,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1388,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1389,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1393,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1394,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1503,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1515,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1516,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1517,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1518,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1519,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1520,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1521,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1522,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1523,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1524,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1525,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1526,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1527,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1528,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1529,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1530,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1531,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1532,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1533,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1534,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1535,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1537,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1538,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1623,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1624,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1625,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1626,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1627,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1628,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1629,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1630,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1631,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1632,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1633,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1634,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1635,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1636,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1637,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1638,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1639,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1640,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1641,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1642,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1643,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1722,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1723,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1724,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1725,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1726,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1727,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1728,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1729,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1730,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1731,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1732,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1733,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1734,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1735,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1736,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1737,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1738,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1739,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1740,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1741,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1742,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1799,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1806,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1807,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1808,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1809,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1810,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1811,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1812,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1813,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1814,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1815,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1816,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1817,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1818,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1819,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1820,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1821,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1822,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1823,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1858,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1866,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1867,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1868,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1869,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1870,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1871,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1872,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1873,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1874,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1875,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1876,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1877,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1878,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1879,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1880,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1881,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1882,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1883,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1922,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1923,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1924,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1925,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1926,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1927,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1928,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1929,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1930,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1931,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1932,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1933,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1934,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1935,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1936,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1937,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1938,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1939,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1971,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1972,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1973,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1974,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1975,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1976,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1977,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1978,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1979,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1980,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  1981,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  1982,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  1983,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  1984,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  1985,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2009,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2010,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2011,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2012,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2013,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2014,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2015,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2016,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2017,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2018,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2019,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2020,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2021,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2022,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2023,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2053,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2054,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2055,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2056,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2057,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2058,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2059,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2060,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2061,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2062,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2063,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2064,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2065,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2066,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2067,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2097,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2098,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2099,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2100,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2101,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2102,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2103,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2104,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2105,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2128,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2129,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2130,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2131,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2132,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2133,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2134,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2135,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2136,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2170,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2171,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2172,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2173,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2174,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2175,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2176,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2177,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2178,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2200,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2201,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2202,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2203,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2204,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2205,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2218,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2219,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2220,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2221,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2222,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2223,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2239,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2240,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2241,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2242,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2243,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2244,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2263,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2264,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2265,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2275,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2276,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2277,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2290,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2291,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2292,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2308,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2309,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2310,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2314,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   315,   316,   317,   318,   319,  2315,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   315,   316,   317,   318,   319,  2316,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   315,   316,   317,   318,
   319,  2320,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   315,   316,
   317,   318,   319,  2321,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   315,   316,   317,   318,   319,  2322,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   689,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   691,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   693,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   695,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   697,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   699,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   701,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   703,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   705,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   707,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   709,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   713,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   715,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   717,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   719,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   721,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   723,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   795,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,   801,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,   892,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,  1038,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,  1040,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,  1042,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,  1044,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,     0,     0,  1045,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,     0,     0,  1187,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   526,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   527,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   529,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   531,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   532,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   540,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   582,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   583,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   586,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   592,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   688,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   690,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   692,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   694,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   696,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   698,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   700,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   702,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   704,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   706,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   708,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   712,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   714,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   716,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   718,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   720,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   722,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   758,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   760,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,   773,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,   774,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,   775,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,   780,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,   781,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,   782,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,   783,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
   784,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,   807,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,   814,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1037,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1039,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1041,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  1043,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1110,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  1214,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  1243,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1349,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1353,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1355,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1476,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1477,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1506,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  1508,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1510,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  1512,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  1513,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  1514,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  1536,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  1645,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  1803,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  1804,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  1805,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  1968,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  1969,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  1970,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  2091,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  2092,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  2093,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  2094,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  2095,
   315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
   324,   325,   326,   327,   328,     0,     0,     0,     0,     0,
   329,     0,  2096,   315,   316,   317,   318,   319,     0,   320,
   321,   322,   323,   324,   325,   326,   327,   328,     0,     0,
     0,     0,     0,   329,     0,  2206,   315,   316,   317,   318,
   319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
   328,     0,     0,     0,     0,     0,   329,     0,  2207,   315,
   316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
   325,   326,   327,   328,     0,     0,     0,     0,     0,   329,
     0,  2208,   315,   316,   317,   318,   319,     0,   320,   321,
   322,   323,   324,   325,   326,   327,   328,     0,     0,     0,
     0,     0,   329,     0,  2266,   315,   316,   317,   318,   319,
     0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     0,     0,     0,     0,     0,   329,     0,  2267,   315,   316,
   317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
   326,   327,   328,     0,     0,     0,     0,     0,   329,     0,
  2268,   315,   316,   317,   318,   319,     0,   320,   321,   322,
   323,   324,   325,   326,   327,   328,     0,     0,     0,     0,
     0,   329,     0,  2326,   315,   316,   317,   318,   319,     0,
   320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
     0,     0,     0,     0,   329,     0,  2327,   315,   316,   317,
   318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
   327,   328,     0,     0,     0,     0,     0,   329,     0,  2328
};

static const short yycheck[] = {    23,
    69,    70,     4,    94,     4,    23,   308,     4,   374,   344,
     4,   748,     4,     4,   185,     4,     6,   188,     5,    67,
     3,     5,    43,     4,    72,     7,     6,    66,     6,    66,
    66,  1327,  1233,  1329,     4,     6,   215,  1407,   209,   104,
   211,  1411,     4,     6,  1414,     5,   168,    34,    35,    36,
    34,    35,    36,     4,     5,   187,   188,    67,     6,    67,
    67,  1128,    72,    67,    72,    72,   198,   198,    72,   200,
  1137,   187,   188,   205,    34,    35,    36,  1144,     7,    50,
   187,   188,     6,    34,    35,    36,   199,    50,   204,     5,
   206,   204,     6,   187,   188,   198,   198,   204,   200,   206,
   187,   188,   205,   187,   188,   187,   188,   131,   132,   133,
   199,   205,   136,   137,     6,   204,   140,   204,    34,    35,
    36,   205,   204,   147,   206,   149,   150,   151,   306,   153,
    67,   155,   156,   198,   158,    72,     6,   107,   108,     6,
   187,   188,  1343,     6,    67,   107,   108,   187,   188,    72,
    67,   175,   176,   198,     6,    72,     7,   204,   206,   198,
   205,   198,   187,   188,   198,   205,   344,   904,   205,   205,
   194,   195,   198,   197,   199,   199,   198,   198,   202,   203,
    45,    46,    39,   205,   198,    42,   187,   188,   523,   187,
   188,   173,   174,   175,   176,   198,   206,   499,   206,   206,
     6,   536,   206,   204,    66,   188,   204,    43,   205,   187,
   188,   205,   198,   205,   205,   205,   205,   198,   205,   205,
   200,   205,   164,   165,   395,   167,   250,   406,   297,   298,
   299,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   187,   188,    43,     8,  1344,   194,   195,
  1650,  1348,   306,   206,  1654,   198,   202,  1657,   198,   206,
   308,   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,    47,   172,  1604,   174,
   198,  1607,   336,  1609,   338,   180,     7,   187,   188,   343,
   344,  1058,   173,   174,   175,   176,     6,     7,   352,   353,
   354,   355,   356,    45,   358,   359,   360,   361,   362,   363,
   364,   194,   195,   194,   195,   523,     6,   187,   188,   202,
     3,   202,   376,   377,   378,   379,    67,    67,   536,   383,
   198,    72,    72,   198,   204,   187,   188,   391,   187,   188,
   199,   373,   374,   373,   374,   204,   400,   199,  1748,   205,
   187,   188,  1752,   198,  1754,   204,   187,   188,   253,    43,
   187,   188,    43,   189,   190,   191,    56,   204,   733,   199,
   198,   197,     8,   204,   204,    39,  1702,   204,    42,    43,
  1706,    45,  1708,   180,   181,   205,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   443,     6,   199,    43,   764,
   197,   500,   204,  1500,  1501,  1502,  1503,   199,    42,    43,
  1507,    45,   204,   194,   195,   177,   178,   179,   180,   181,
     6,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     6,   796,   797,   798,   799,   197,    57,    58,   492,     6,
     4,   495,   194,   195,   206,     6,     7,   501,   200,   198,
   202,   499,   173,   174,   175,   176,   139,   140,   141,   142,
   143,   144,   145,   146,   198,   206,   206,     6,    39,   523,
   524,    42,    43,   194,   195,   198,   371,   372,     6,   533,
   534,   198,   536,   200,   538,   539,     4,   177,   178,   179,
   180,   181,   546,   183,   184,   185,   186,   187,   188,   189,
   190,   191,   556,   557,   198,     4,   200,   197,    43,   198,
   198,   565,   200,   198,     7,   200,     5,  1614,  1615,   198,
   198,  1618,   200,   577,   198,   733,    60,    61,    62,    63,
   738,    65,   198,   632,   588,     4,   590,   591,     6,     6,
  1307,   177,   178,   179,   180,   181,     5,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   764,   198,   923,   200,
   198,   197,   200,   199,   896,   897,   198,   177,   178,   179,
   180,   181,   198,   183,   184,   185,   186,   187,   188,   189,
   190,   191,   205,   198,   632,   200,   198,   197,   796,   797,
   798,   799,   198,   198,   200,     6,   187,   188,   189,   190,
   191,   194,   195,   198,   205,   200,   197,   200,   205,   202,
   177,   178,   179,   180,   181,  1712,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   194,   195,     4,   194,   195,
   197,   200,   205,   202,   200,   734,   202,   205,   177,   178,
   179,   180,   181,   198,   183,   184,   185,   186,   187,   188,
   189,   190,   191,   198,     6,   200,   710,   711,   197,   205,
   555,   124,   125,   126,   127,   128,   198,   198,   200,   200,
   724,   725,   726,   727,   728,   729,   730,   198,   198,   733,
   173,   174,   175,   176,   738,   198,   198,   741,   200,   198,
   198,   200,   200,   198,   198,   200,   200,   751,   198,  1095,
   200,   194,   195,     6,  1801,   200,   204,   202,   206,   200,
   764,   198,   766,     6,   204,   923,   206,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   202,   848,   179,   180,
   181,   197,   183,   184,   185,   186,   187,   188,   189,   190,
   191,   205,   796,   797,   798,   799,   197,     6,   802,   803,
   110,   204,   806,   206,   204,   198,   206,     6,   204,   204,
   206,   206,     6,   817,   818,  1862,   177,   178,   179,   180,
   181,     6,   183,   184,   185,   186,   187,   188,   189,   190,
   191,   204,   204,   206,   206,   204,   197,   206,   204,   204,
   206,   206,   204,     3,   206,   204,   204,   206,   206,   853,
   854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
   864,   865,   866,   867,   868,   869,   870,   871,   872,   873,
   874,   875,   876,   877,   878,   177,   178,   179,   180,   181,
   198,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   204,   204,   206,   206,   892,   197,   204,     5,   206,   897,
   204,   905,   206,   204,   204,   206,   206,   911,   198,   204,
   755,   206,   204,   204,   206,   206,   204,   198,   206,   923,
   204,   925,   206,   927,   177,   178,   179,   180,   181,   198,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   943,
   944,   945,   198,   204,   197,   206,   198,   792,   793,   794,
   204,   199,   206,   204,   204,   206,   206,   204,   204,   206,
  1119,   965,   966,   967,   204,   204,   206,   206,   204,   204,
   206,   206,   198,   198,   819,  1321,   198,   198,   177,   178,
   179,   180,   181,   828,   183,   184,   185,   186,   187,   188,
   189,   190,   191,   204,   204,   206,   206,   198,   197,  2046,
   204,  1050,   206,   198,   204,     3,     4,   204,   198,   206,
  1008,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,   198,   198,   198,     4,   198,
   198,    39,  1091,   198,   198,   198,   198,  1051,   198,   198,
   198,   198,   198,   198,   198,   198,   197,     7,     7,     7,
   202,   200,    60,    61,    62,    63,    64,    65,   205,     7,
   199,     7,     7,   105,   107,  1079,  1080,  1081,  1082,  1150,
   205,     5,     5,     5,     5,     5,  1245,  1091,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,  1106,  1107,     5,     5,     5,     5,   157,     5,
     5,     5,     5,  1095,  1118,  1095,     6,  1121,     3,     5,
   204,     5,   199,     6,     5,     4,     6,  1131,   201,     6,
   202,     7,     7,     7,  1138,  1139,  1140,     7,     7,     7,
     7,  1145,   206,   206,   205,  1149,   205,     7,     7,  1153,
  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,
  1164,  1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,
  1174,  1175,  1176,  1177,  1178,   198,     7,   202,   169,     5,
   204,     6,  1341,   204,   204,  1189,   204,   204,   204,   187,
   188,   204,  1196,   204,   204,   193,   204,   204,   204,   204,
   198,   204,   204,   204,   204,   203,   199,   205,   204,   204,
   204,  1215,   204,   198,   204,   204,   204,   204,   204,  1064,
   204,  1066,   204,   204,   204,   204,   198,   198,   198,   198,
   198,   198,     4,   198,   198,  1239,   198,  1241,   198,   198,
   198,   198,   198,   198,   198,   198,   198,   198,     6,     6,
     6,  1096,   198,  1098,   198,  1100,   198,     3,     4,   198,
   201,   198,     7,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   177,   178,   179,
   180,   181,     6,   183,   184,   185,   186,   187,   188,   189,
   190,   191,     7,   200,     7,     7,   198,   197,     7,     7,
     7,  1315,  1316,     7,   205,     7,     7,     6,   170,     7,
  1324,     7,  1326,     7,  1328,     7,  1330,  1331,     7,     4,
     6,     3,     6,  1337,     7,     4,     7,     3,     3,  1321,
  1499,  1321,  1346,   189,     3,     3,     3,     3,     3,     3,
  1354,     3,     3,     3,     3,  1359,     3,     5,  1362,     5,
  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,
  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,  1383,
  1384,  1385,  1386,  1387,  1388,  1389,     6,     3,     3,  1393,
   199,     4,     6,   199,  1398,     6,  1400,  1401,  1402,     3,
     4,   202,  1561,   198,     7,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     6,
     6,     6,     6,   198,   205,     6,     6,   205,   106,   166,
   204,   187,   188,   204,   199,   204,   199,   193,   199,   199,
   204,     6,   198,   202,  1613,   201,   204,   203,   199,   205,
   204,   204,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   199,  1482,  1324,
   204,  1326,   197,  1328,  1488,   204,   201,  1491,   177,   178,
   179,   180,   181,     6,   183,   184,   185,   186,   187,   188,
   189,   190,   191,   204,   204,     6,   199,     4,   197,   204,
     6,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1522,  1523,
  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
  1534,  1535,     6,  1537,  1538,   177,   178,   179,   180,   181,
   204,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     6,   204,  1711,     6,     6,   197,  1401,   177,   178,   179,
   180,   181,   204,   183,   184,   185,   186,   187,   188,   189,
   190,   191,     8,   204,   204,   204,   204,   197,   204,   201,
     6,     6,     6,   187,   188,     7,     6,     8,     6,   193,
     6,     6,     6,     6,   198,  1644,     6,   201,  1757,   203,
     6,   205,     6,     6,     6,     6,   106,     3,     8,     6,
     3,     6,     6,     3,     6,     6,  1620,  1621,  1622,  1623,
  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,
  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,
   189,  1800,     3,     6,     6,     3,     6,     6,     3,     3,
     3,   157,     8,     4,     6,   202,     6,   163,     7,     6,
   201,     6,   205,   205,   177,   178,   179,   180,   181,   206,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   205,
   186,   205,   205,   199,   197,   191,   192,   204,   199,   204,
   204,   103,   204,     6,  1743,   204,  1745,   199,   106,   204,
   199,   199,     3,   108,   199,     3,  1710,   199,   199,     6,
   204,   204,  1716,     6,  1718,     6,  1720,     6,  1722,  1723,
  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,
  1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,     6,
     6,   177,   178,   179,   180,   181,     6,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   177,   178,   179,   180,
   181,   197,   183,   184,   185,   186,   187,   188,   189,   190,
   191,     8,     6,     3,     6,  1824,   197,   177,   178,   179,
   180,   181,     5,   183,   184,   185,   186,   187,   188,   189,
   190,   191,     6,     5,  1798,  1799,     6,   197,   166,   206,
   199,   199,  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,
  1814,  1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,
   205,   177,   178,   179,   180,   181,   205,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   177,   178,   179,   180,
   181,   197,   183,   184,   185,   186,   187,   188,   189,   190,
   191,   199,     6,     6,  1858,     6,   197,     6,   199,  1863,
  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
     3,     4,   204,   206,   204,   204,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   204,     6,  1916,     6,  1918,     6,  1920,   204,  1922,  1923,
  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,  1933,
  1934,  1935,  1936,  1937,  1938,  1939,   204,     6,     6,   204,
   177,   178,   179,   180,   181,     6,   183,   184,   185,   186,
   187,   188,   189,   190,   191,     6,     6,     6,     6,     6,
   197,   205,     5,     5,   204,   206,   205,  1971,  1972,  1973,
  1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,
  1984,  1985,   199,   205,   204,   204,   204,     6,   494,   204,
   199,   204,     6,     6,   205,     6,     6,   205,   205,   205,
   204,   103,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,
  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,
     6,   177,   178,   179,   180,   181,     6,   183,   184,   185,
   186,   187,   188,   189,   190,   191,     5,   205,     6,     5,
   205,   197,   205,  2047,   206,  2049,   205,  2051,   204,  2053,
  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,
  2064,  2065,  2066,  2067,   187,   188,   166,   204,   204,   199,
   193,   199,   205,     6,   206,   198,     6,     6,   201,     6,
   203,   103,   205,     6,     6,     6,     6,     6,     6,     6,
   206,   205,   204,  2097,  2098,  2099,  2100,  2101,  2102,  2103,
  2104,  2105,     6,   204,     6,     6,     6,     6,   171,   205,
   204,     6,   204,   172,   199,   205,   205,   204,  2122,  2123,
  2124,  2125,  2126,  2127,  2128,  2129,  2130,  2131,  2132,  2133,
  2134,  2135,  2136,   177,   178,   179,   180,   181,     6,   183,
   184,   185,   186,   187,   188,   189,   190,   191,     6,     6,
     6,     6,   204,   197,  2158,     6,  2160,   201,  2162,   204,
  2164,     6,  2166,   204,  2168,   205,  2170,  2171,  2172,  2173,
  2174,  2175,  2176,  2177,  2178,   177,   178,   179,   180,   181,
   205,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   205,     6,   199,     6,     6,   197,  2200,  2201,  2202,  2203,
  2204,  2205,   204,     6,   206,   205,   205,   205,   205,   205,
   205,     6,     6,     6,  2218,  2219,  2220,  2221,  2222,  2223,
  2224,  2225,  2226,     6,   205,     6,   205,   205,     6,     6,
   205,   205,   205,     6,     6,  2239,  2240,  2241,  2242,  2243,
  2244,  2245,     6,  2247,   205,  2249,   205,   205,     6,     6,
   756,   757,     6,   759,     0,   761,   762,     0,   634,  2263,
  2264,  2265,     4,     4,  1112,  1054,    -1,    -1,    -1,    -1,
    -1,  2275,  2276,  2277,  2278,  2279,  2280,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  2290,  2291,  2292,  2293,
    -1,  2295,    -1,  2297,    -1,    -1,    -1,    -1,   804,   805,
    -1,    -1,   808,    -1,  2308,  2309,  2310,    -1,    -1,    -1,
  2314,  2315,  2316,    -1,    -1,    -1,  2320,  2321,  2322,   825,
   826,    -1,    -1,    -1,    -1,   831,   832,    -1,  2332,  2333,
  2334,    -1,   838,    -1,   840,    -1,    -1,  2341,    -1,  2343,
    -1,  2345,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     3,     4,    -1,    -1,    -1,    -1,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   915,
    -1,   917,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   928,   929,   930,    -1,    -1,    -1,    -1,   935,
   936,   937,   938,   939,   940,   941,    -1,    -1,    -1,     3,
     4,     5,    -1,     7,    -1,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    34,    35,    36,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,     3,     4,
    -1,    -1,    -1,   197,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
    -1,    -1,    -1,    -1,    39,    -1,   187,   188,    -1,    -1,
    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,
    -1,    -1,   203,  1049,   205,    60,    61,    62,    63,    64,
    65,    -1,    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,
    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,    -1,     3,
     4,     5,   203,    -1,   205,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    34,    35,    36,    -1,    -1,    -1,    -1,    -1,  1114,   173,
   174,   175,   176,    -1,    -1,    -1,  1122,    -1,    -1,    -1,
    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,    -1,   193,
   194,   195,    -1,    -1,   198,  1141,   200,    -1,   202,   203,
    -1,     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    -1,   187,   188,    -1,    -1,    -1,    -1,   193,    -1,
    -1,    -1,    -1,   198,     3,     4,    -1,    -1,   203,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    -1,    -1,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
     4,    -1,    -1,   187,   188,    -1,    -1,    -1,    -1,   193,
    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,   203,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
    54,    55,    -1,    -1,    -1,    59,    60,    61,    62,    63,
    64,    65,    -1,    67,    68,    69,    70,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   187,   188,    -1,  1334,    -1,
  1336,   193,    -1,    -1,  1340,    -1,   198,    -1,    -1,    -1,
    -1,   203,    -1,    -1,    -1,    99,   100,   101,   102,   206,
  1356,    -1,    -1,   107,    -1,   109,    -1,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,    -1,   187,   188,
    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   198,
    -1,    -1,    -1,    -1,   203,   139,   140,   141,   142,   143,
   144,   145,   146,    39,    40,    41,    42,    43,    44,    45,
    46,    -1,    48,    -1,    50,    51,    52,    -1,    54,    55,
   164,   165,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
    39,    40,    41,    42,    43,    44,    45,    46,    -1,    48,
    -1,    50,    51,    52,    -1,    54,    55,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   100,   101,   102,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1476,  1477,   118,    -1,    -1,    -1,    -1,    -1,  1484,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1495,
  1496,   100,   101,   102,    -1,    39,    40,    41,    42,    43,
    44,    45,    46,    -1,    48,    -1,    50,    51,    52,   118,
    54,    55,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,
    42,    43,    44,    45,    46,    -1,    48,    71,    50,    51,
    52,    -1,    54,    55,  1540,  1541,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,   102,    -1,
   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,   100,   101,
   102,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   118,   206,    -1,    -1,
  1606,   197,    -1,   199,    -1,  1611,    39,    40,    41,    42,
    43,    44,    45,    46,    -1,    48,    -1,    50,    51,    52,
    -1,    54,    55,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    71,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
   204,    -1,   206,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    -1,    -1,   206,    -1,    -1,    -1,    -1,   100,   101,   102,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   206,   118,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1703,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1713,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    -1,    -1,    -1,   121,   122,   123,
    -1,    -1,    -1,    -1,    -1,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   206,   158,   159,   160,   161,   162,   163,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1802,    -1,    39,    40,
    41,    42,    43,    44,    45,    46,    -1,    48,    -1,    50,
    51,    52,    -1,    54,    55,    -1,    33,    -1,    -1,    -1,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    71,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
    -1,   206,    59,    60,    61,    62,    63,    64,    65,    -1,
    67,    68,    69,    70,    71,  1861,    -1,    -1,    -1,   100,
   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
   107,    -1,   109,    -1,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,    -1,    -1,  1914,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,   206,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,  1967,    -1,   177,   178,   179,   180,   181,   206,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   206,    -1,   177,   178,   179,   180,   181,  2005,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   177,   178,
   179,   180,   181,   206,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   177,   178,   179,   180,   181,   206,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,    -1,   177,   178,   179,   180,
   181,   206,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   177,   178,   179,   180,   181,   206,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   177,   178,   179,   180,   181,   206,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   177,   178,
   179,   180,   181,   206,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   177,   178,   179,   180,   181,   206,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,    -1,   177,   178,   179,   180,
   181,   206,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   177,   178,   179,   180,   181,   206,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   177,   178,   179,   180,   181,   206,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   177,   178,
   179,   180,   181,   206,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   177,   178,   179,   180,   181,   206,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,    -1,   177,   178,   179,   180,
   181,   206,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   177,   178,   179,   180,   181,   206,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   177,   178,   179,   180,   181,   206,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   177,   178,
   179,   180,   181,   206,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,   177,   178,   179,   180,   181,   206,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,    -1,    -1,   177,   178,   179,   180,
   181,   206,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
   177,   178,   179,   180,   181,   206,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,    -1,    -1,    -1,    -1,   204,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   177,   178,   179,   180,   181,   204,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   177,   178,   179,   180,   181,   204,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   177,   178,   179,   180,
   181,   204,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   177,   178,
   179,   180,   181,   204,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   177,   178,   179,   180,   181,   204,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,    -1,    -1,   201,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,   201,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
   177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
   197,    -1,   199,   177,   178,   179,   180,   181,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,
   181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,
   178,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,
    -1,   199,   177,   178,   179,   180,   181,    -1,   183,   184,
   185,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,   197,    -1,   199,   177,   178,   179,   180,   181,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,
   179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,
   199,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,   177,   178,   179,   180,   181,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,   197,    -1,   199,   177,   178,   179,
   180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 165 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 171 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 172 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 9:
#line 182 "Gmsh.y"
{
      yymsg(INFO, "Reading STL solid");
      STL_Surf = Create_Surface(NEWSURFACE(), MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 10:
#line 196 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet(yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
			       yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
			       yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d, CTX.geom.stl_create_elementary);
      return 1;
    ;
    break;}
case 11:
#line 203 "Gmsh.y"
{
      if(CTX.geom.stl_create_elementary){
	STL_Surf->STL->ReplaceDuplicate();
	if(CTX.geom.stl_create_physical)
	  STL_Surf->STL->CreatePhysicalSurface();
      }
      else{
	Tree_Add(THEM->Surfaces, &STL_Surf);
      }
      yymsg(INFO, "Read STL solid");
      return 1;
    ;
    break;}
case 14:
#line 225 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 226 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 227 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 232 "Gmsh.y"
{
      yymsg(INFO, "Reading Step Iso-10303-21 data");
      Create_Step_Solid_BRep();
    ;
    break;}
case 18:
#line 237 "Gmsh.y"
{
      Resolve_BREP ();
      yymsg(INFO, "Read Step Iso-10303-21 data");
    ;
    break;}
case 22:
#line 248 "Gmsh.y"
{
    ;
    break;}
case 23:
#line 251 "Gmsh.y"
{
    ;
    break;}
case 24:
#line 255 "Gmsh.y"
{
   ;
    break;}
case 25:
#line 261 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 26:
#line 267 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 27:
#line 274 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 28:
#line 280 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 29:
#line 284 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 1);
    ;
    break;}
case 30:
#line 288 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d, yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-2].i, 0);
    ;
    break;}
case 31:
#line 295 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d, yyvsp[-10].c, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 32:
#line 299 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d, yyvsp[-4].c, yyvsp[-2].l);
    ;
    break;}
case 33:
#line 304 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d, yyvsp[-8].c, yyvsp[-6].l, (int)yyvsp[-4].d, yyvsp[-2].i);
    ;
    break;}
case 34:
#line 308 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 36:
#line 316 "Gmsh.y"
{
      Add_Axis2_Placement3D  ((int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 37:
#line 320 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 38:
#line 324 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d, yyvsp[-4].c, (int)yyvsp[-2].d);
    ;
    break;}
case 39:
#line 328 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 40:
#line 332 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 41:
#line 338 "Gmsh.y"
{
    ;
    break;}
case 42:
#line 341 "Gmsh.y"
{
    ;
    break;}
case 43:
#line 344 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 348 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 352 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 356 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 47:
#line 360 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 48:
#line 365 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 372 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 375 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 379 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 382 "Gmsh.y"
{
    ;
    break;}
case 54:
#line 385 "Gmsh.y"
{
    ;
    break;}
case 57:
#line 397 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 401 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 62:
#line 402 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 63:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 406 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 67:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 69:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 70:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 71:
#line 415 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 72:
#line 419 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 73:
#line 436 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 74:
#line 440 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 75:
#line 447 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 102:
#line 480 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 103:
#line 482 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d); ;
    break;}
case 104:
#line 487 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);      
    ;
    break;}
case 105:
#line 492 "Gmsh.y"
{
      View->NbSP++;
    ;
    break;}
case 106:
#line 499 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 107:
#line 501 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d); ;
    break;}
case 108:
#line 506 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
      ntmp = List_Nbr(View->VP);
    ;
    break;}
case 109:
#line 512 "Gmsh.y"
{
      if((List_Nbr(View->VP) - ntmp) % 3)
	yymsg(GERROR, "Wrong number of values for vector point "
	      "(%d is not a multiple of 3)", List_Nbr(View->VP) - ntmp);
      View->NbVP++;
    ;
    break;}
case 110:
#line 522 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 111:
#line 524 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d); ;
    break;}
case 112:
#line 529 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TP);
    ;
    break;}
case 113:
#line 535 "Gmsh.y"
{
      if((List_Nbr(View->TP) - ntmp) % 9)
	yymsg(GERROR, "Wrong number of values for tensor point "
	      "(%d is not a multiple of 9)", List_Nbr(View->TP) - ntmp);
      View->NbTP++;
    ;
    break;}
case 114:
#line 545 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 115:
#line 547 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d); ;
    break;}
case 116:
#line 553 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SL);
    ;
    break;}
case 117:
#line 560 "Gmsh.y"
{
      if((List_Nbr(View->SL) - ntmp) % 2)
	yymsg(GERROR, "Wrong number of values for scalar line "
	      "(%d is not a multiple of 2)", List_Nbr(View->SL) - ntmp);
      View->NbSL++;
    ;
    break;}
case 118:
#line 570 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 119:
#line 572 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d); ;
    break;}
case 120:
#line 578 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VL);
    ;
    break;}
case 121:
#line 585 "Gmsh.y"
{
      if((List_Nbr(View->VL) - ntmp) % 6)
	yymsg(GERROR, "Wrong number of values for vector line "
	      "(%d is not a multiple of 6)", List_Nbr(View->VL) - ntmp);
      View->NbVL++;
    ;
    break;}
case 122:
#line 595 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 123:
#line 597 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d); ;
    break;}
case 124:
#line 603 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TL);
    ;
    break;}
case 125:
#line 610 "Gmsh.y"
{
      if((List_Nbr(View->TL) - ntmp) % 18)
	yymsg(GERROR, "Wrong number of values for tensor line "
	      "(%d is not a multiple of 18)", List_Nbr(View->TL) - ntmp);
      View->NbTL++;
    ;
    break;}
case 126:
#line 620 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 127:
#line 622 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d); ;
    break;}
case 128:
#line 629 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
      ntmp = List_Nbr(View->ST);
    ;
    break;}
case 129:
#line 639 "Gmsh.y"
{
      if((List_Nbr(View->ST) - ntmp) % 3)
	yymsg(GERROR, "Wrong number of values for scalar triangle "
	      "(%d is not a multiple of 3)", List_Nbr(View->ST) - ntmp);
      View->NbST++;
    ;
    break;}
case 130:
#line 649 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 131:
#line 651 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d); ;
    break;}
case 132:
#line 658 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VT);
    ;
    break;}
case 133:
#line 668 "Gmsh.y"
{
      if((List_Nbr(View->VT) - ntmp) % 9)
	yymsg(GERROR, "Wrong number of values for vector triangle "
	      "(%d is not a multiple of 9)", List_Nbr(View->VT) - ntmp);
      View->NbVT++;
    ;
    break;}
case 134:
#line 678 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 135:
#line 680 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d); ;
    break;}
case 136:
#line 687 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TT);
    ;
    break;}
case 137:
#line 697 "Gmsh.y"
{
      if((List_Nbr(View->TT) - ntmp) % 27)
	yymsg(GERROR, "Wrong number of values for tensor triangle "
	      "(%d is not a multiple of 27)", List_Nbr(View->TT) - ntmp);
      View->NbTT++;
    ;
    break;}
case 138:
#line 707 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 139:
#line 709 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d); ;
    break;}
case 140:
#line 717 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SQ);
    ;
    break;}
case 141:
#line 727 "Gmsh.y"
{
      if((List_Nbr(View->SQ) - ntmp) % 4)
	yymsg(GERROR, "Wrong number of values for scalar quadrangle "
	      "(%d is not a multiple of 4)", List_Nbr(View->SQ) - ntmp);
      View->NbSQ++;
    ;
    break;}
case 142:
#line 737 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 143:
#line 739 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d); ;
    break;}
case 144:
#line 747 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VQ);
    ;
    break;}
case 145:
#line 757 "Gmsh.y"
{
      if((List_Nbr(View->VQ) - ntmp) % 12)
	yymsg(GERROR, "Wrong number of values for vector quadrangle "
	      "(%d is not a multiple of 12)", List_Nbr(View->VQ) - ntmp);
      View->NbVQ++;
    ;
    break;}
case 146:
#line 767 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 147:
#line 769 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d); ;
    break;}
case 148:
#line 777 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TQ);
    ;
    break;}
case 149:
#line 787 "Gmsh.y"
{
      if((List_Nbr(View->TQ) - ntmp) % 36)
	yymsg(GERROR, "Wrong number of values for tensor quadrangle "
	      "(%d is not a multiple of 36)", List_Nbr(View->TQ) - ntmp);
      View->NbTQ++;
    ;
    break;}
case 150:
#line 797 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 151:
#line 799 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d); ;
    break;}
case 152:
#line 807 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SS);
    ;
    break;}
case 153:
#line 817 "Gmsh.y"
{
      if((List_Nbr(View->SS) - ntmp) % 4)
	yymsg(GERROR, "Wrong number of values for scalar tetrahedron "
	      "(%d is not a multiple of 4)", List_Nbr(View->SS) - ntmp);
      View->NbSS++;
    ;
    break;}
case 154:
#line 827 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 155:
#line 829 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d); ;
    break;}
case 156:
#line 837 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VS);
    ;
    break;}
case 157:
#line 847 "Gmsh.y"
{
      if((List_Nbr(View->VS) - ntmp) % 12)
	yymsg(GERROR, "Wrong number of values for vector tetrahedron "
	      "(%d is not a multiple of 12)", List_Nbr(View->VS) - ntmp);
      View->NbVS++;
    ;
    break;}
case 158:
#line 857 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 159:
#line 859 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d); ;
    break;}
case 160:
#line 867 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TS);
    ;
    break;}
case 161:
#line 877 "Gmsh.y"
{
      if((List_Nbr(View->TS) - ntmp) % 36)
	yymsg(GERROR, "Wrong number of values for tensor tetrahedron "
	      "(%d is not a multiple of 36)", List_Nbr(View->TS) - ntmp);
      View->NbTS++;
    ;
    break;}
case 162:
#line 887 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 163:
#line 889 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d); ;
    break;}
case 164:
#line 901 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SH);
    ;
    break;}
case 165:
#line 917 "Gmsh.y"
{
      if((List_Nbr(View->SH) - ntmp) % 8)
	yymsg(GERROR, "Wrong number of values for scalar hexahedron "
	      "(%d is not a multiple of 8)", List_Nbr(View->SH) - ntmp);
      View->NbSH++;
    ;
    break;}
case 166:
#line 927 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 167:
#line 929 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d); ;
    break;}
case 168:
#line 941 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VH);
    ;
    break;}
case 169:
#line 957 "Gmsh.y"
{
      if((List_Nbr(View->VH) - ntmp) % 24)
	yymsg(GERROR, "Wrong number of values for vector hexahedron "
	      "(%d is not a multiple of 24)", List_Nbr(View->VH) - ntmp);
      View->NbVH++;
    ;
    break;}
case 170:
#line 967 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 171:
#line 969 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d); ;
    break;}
case 172:
#line 981 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TH);
    ;
    break;}
case 173:
#line 997 "Gmsh.y"
{
      if((List_Nbr(View->TH) - ntmp) % 72)
	yymsg(GERROR, "Wrong number of values for tensor hexahedron "
	      "(%d is not a multiple of 72)", List_Nbr(View->TH) - ntmp);
      View->NbTH++;
    ;
    break;}
case 174:
#line 1007 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 175:
#line 1009 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d); ;
    break;}
case 176:
#line 1019 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SI);
    ;
    break;}
case 177:
#line 1032 "Gmsh.y"
{
      if((List_Nbr(View->SI) - ntmp) % 6)
	yymsg(GERROR, "Wrong number of values for scalar prism "
	      "(%d is not a multiple of 6)", List_Nbr(View->SI) - ntmp);
      View->NbSI++;
    ;
    break;}
case 178:
#line 1042 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 179:
#line 1044 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d); ;
    break;}
case 180:
#line 1054 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VI);
    ;
    break;}
case 181:
#line 1067 "Gmsh.y"
{
      if((List_Nbr(View->VI) - ntmp) % 18)
	yymsg(GERROR, "Wrong number of values for vector prism "
	      "(%d is not a multiple of 18)", List_Nbr(View->VI) - ntmp);
      View->NbVI++;
    ;
    break;}
case 182:
#line 1077 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 183:
#line 1079 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d); ;
    break;}
case 184:
#line 1089 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TI);
    ;
    break;}
case 185:
#line 1102 "Gmsh.y"
{
      if((List_Nbr(View->TI) - ntmp) % 54)
	yymsg(GERROR, "Wrong number of values for tensor prism "
	      "(%d is not a multiple of 54)", List_Nbr(View->TI) - ntmp);
      View->NbTI++;
    ;
    break;}
case 186:
#line 1112 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 187:
#line 1114 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d); ;
    break;}
case 188:
#line 1123 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->SY);
    ;
    break;}
case 189:
#line 1136 "Gmsh.y"
{
      if((List_Nbr(View->SY) - ntmp) % 5)
	yymsg(GERROR, "Wrong number of values for scalar pyramid "
	      "(%d is not a multiple of 5)", List_Nbr(View->SY) - ntmp);
      View->NbSY++;
    ;
    break;}
case 190:
#line 1146 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 191:
#line 1148 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d); ;
    break;}
case 192:
#line 1157 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->VY);
    ;
    break;}
case 193:
#line 1170 "Gmsh.y"
{
      if((List_Nbr(View->VY) - ntmp) % 15)
	yymsg(GERROR, "Wrong number of values for vector pyramid "
	      "(%d is not a multiple of 15)", List_Nbr(View->VY) - ntmp);
      View->NbVY++;
    ;
    break;}
case 194:
#line 1180 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 195:
#line 1182 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d); ;
    break;}
case 196:
#line 1191 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
      ntmp = List_Nbr(View->TY);
    ;
    break;}
case 197:
#line 1204 "Gmsh.y"
{
      if((List_Nbr(View->TY) - ntmp) % 45)
	yymsg(GERROR, "Wrong number of values for tensor pyramid "
	      "(%d is not a multiple of 45)", List_Nbr(View->TY) - ntmp);
      View->NbTY++;
    ;
    break;}
case 198:
#line 1214 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 199:
#line 1219 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1227 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 201:
#line 1234 "Gmsh.y"
{
      View->NbT2++;
    ;
    break;}
case 202:
#line 1241 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 203:
#line 1246 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 204:
#line 1254 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 205:
#line 1261 "Gmsh.y"
{
      View->NbT3++;
    ;
    break;}
case 206:
#line 1270 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 207:
#line 1271 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 208:
#line 1272 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 209:
#line 1273 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 210:
#line 1274 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 211:
#line 1278 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 212:
#line 1279 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 213:
#line 1287 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 214:
#line 1315 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
      }
    ;
    break;}
case 215:
#line 1351 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  if(!yyvsp[-2].i){
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 216:
#line 1400 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 1416 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 218:
#line 1426 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
    ;
    break;}
case 219:
#line 1444 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 220:
#line 1457 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
    ;
    break;}
case 221:
#line 1473 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 222:
#line 1498 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
    ;
    break;}
case 223:
#line 1524 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 224:
#line 1537 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
    ;
    break;}
case 225:
#line 1553 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 226:
#line 1566 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
    ;
    break;}
case 227:
#line 1582 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 228:
#line 1601 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 229:
#line 1623 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 230:
#line 1632 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
    ;
    break;}
case 231:
#line 1650 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num, THEM)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	Vertex *v = Create_Vertex(num, CTX.geom.scaling_factor * yyvsp[-1].v[0],
				  CTX.geom.scaling_factor * yyvsp[-1].v[1],
				  CTX.geom.scaling_factor * yyvsp[-1].v[2],
				  CTX.geom.scaling_factor * yyvsp[-1].v[3], 1.0);
	Tree_Add(THEM->Points, &v);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 232:
#line 1666 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT, THEM)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 233:
#line 1682 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
        Vertex *v = FindPoint((int)p, THEM);
        if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, v, NULL, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      List_Delete(yyvsp[-9].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 234:
#line 1701 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 235:
#line 1720 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 236:
#line 1738 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 237:
#line 1756 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 238:
#line 1774 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 239:
#line 1800 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 240:
#line 1818 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(THEM->Curves, &c);
	Curve *rc = CreateReversedCurve(THEM, c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 241:
#line 1845 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num, THEM)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(THEM->Curves, &c);
	CreateReversedCurve(THEM, c);
      }
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 242:
#line 1863 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 243:
#line 1887 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(List_Nbr(yyvsp[-1].l) < 4){
	yymsg(GERROR, "Too few control points for Bezier curve %d (%d < 4)", num,
	      List_Nbr(yyvsp[-1].l));
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 244:
#line 1911 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num, THEM)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(THEM->Curves, &c);
	  CreateReversedCurve(THEM, c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 245:
#line 1937 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num, THEM)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(THEM->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 246:
#line 1954 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-9].l); i++){
	double p;
      	List_Read(yyvsp[-9].l, i, &p);
	Curve *c = FindCurve((int)p, THEM);
        if(!c)
	  yymsg(WARNING, "Unknown curve %d", (int)p);
	else{
	  Attractor *a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
					  yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d, NULL, c, NULL);
	  List_Add(THEM->Metric->Attractors, &a);
        }
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 247:
#line 1972 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE, THEM)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 248:
#line 1991 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	s->Support = s;
	End_Surface(s);
	Tree_Add(THEM->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 249:
#line 2010 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)d, THEM);
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = s;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 250:
#line 2049 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      Surface *support = FindSurface((int)yyvsp[-4].d, THEM);
      if(!support){
	yymsg(GERROR, "Unknown support surface %d", (int)yyvsp[-4].d);
      }
      else{
	if(FindSurface(num, THEM)){
	  yymsg(GERROR, "Surface %d already exists", num);
	}
	else{
	  Surface *s = Create_Surface(num, MSH_SURF_TRIMMED);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-2].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  s->Support = support;
	  End_Surface(s);
	  Tree_Add(THEM->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-2].l);
      yyval.s.Type = MSH_SURF_TRIMMED;
      yyval.s.Num = num;
    ;
    break;}
case 251:
#line 2075 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	// FIXME: parameters not used; undocumented
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      //FIXME: do you copy the data?
      //List_Delete($12);
      //List_Delete($13);
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 252:
#line 2097 "Gmsh.y"
{
      int num = (int)yyvsp[-10].d, type = 0;
      Surface *s = FindSurface(num, THEM);
      if(!s) {
	yymsg(GERROR, "Unknown surface %d", num);
      }
      else{
	POLY_rep *rep = new POLY_rep(yyvsp[-2].l, yyvsp[-1].l);
	s->thePolyRep = rep;
	type = s->Typ;
      }
      yyval.s.Type = type;
      yyval.s.Num = (int)yyvsp[-10].d;
    ;
    break;}
case 253:
#line 2114 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurface(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 254:
#line 2133 "Gmsh.y"
{
      int num = (int)yyvsp[-16].d;
      if(FindSurface(num, THEM)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	CreateNurbsSurfaceSupport(num, (int)yyvsp[-4].d, (int)yyvsp[-2].d, yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      }
      for(int i = 0; i < List_Nbr(yyvsp[-13].l); i++)
	List_Delete((List_T*)List_Pointer(yyvsp[-13].l, i));
      List_Delete(yyvsp[-13].l);
      List_Delete(yyvsp[-10].l);
      List_Delete(yyvsp[-8].l);
      yyval.s.Type = MSH_SURF_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 255:
#line 2150 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num, THEM)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(THEM->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 256:
#line 2166 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE, THEM)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 257:
#line 2185 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 258:
#line 2202 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num, THEM)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(THEM->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 259:
#line 2219 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME, THEM)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(THEM->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 260:
#line 2240 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 261:
#line 2245 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 262:
#line 2250 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 263:
#line 2255 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l, 1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 264:
#line 2262 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 265:
#line 2263 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 266:
#line 2264 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 267:
#line 2269 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 268:
#line 2273 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 269:
#line 2277 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 270:
#line 2293 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 271:
#line 2309 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num, THEM);
	if(!s)
	  yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 272:
#line 2325 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num, THEM);
	if(!v)
	  yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	else{
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
      }
    ;
    break;}
case 273:
#line 2346 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	int j;
	CopyShape(TheShape.Type, TheShape.Num, &j);
	TheShape.Num = j;
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 274:
#line 2359 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d, 0);
      yyval.l = NULL;
    ;
    break;}
case 275:
#line 2370 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 276:
#line 2379 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) RemoveViewByIndex((int)yyvsp[-2].d);
    ;
    break;}
case 277:
#line 2383 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All"))
	Init_Mesh(THEM);
    ;
    break;}
case 278:
#line 2393 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 279:
#line 2407 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH : 
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, m);
    ;
    break;}
case 280:
#line 2414 "Gmsh.y"
{
      for(int i = 2; i < 6; i++)
	SetVisibilityByNumber(yyvsp[-1].c, i, 0);
    ;
    break;}
case 281:
#line 2419 "Gmsh.y"
{
      int m = (CTX.visibility_mode == 2) ? VIS_MESH :
	((CTX.visibility_mode == 1) ? VIS_GEOM : VIS_GEOM|VIS_MESH);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, m);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 282:
#line 2430 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 283:
#line 2444 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files. If you need to
	// include many files, use "Merge" instead: some OSes limit
	// the number of files a process can open simultaneously (500
	// for OS X)
	ParseFile(tmpstring, 0, 0, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  CreateOutputFile(tmpstring, CTX.print.format);
	}
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeProblem(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	SystemCall(yyvsp[-1].c);
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 284:
#line 2484 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	Post_View *v = (Post_View *)List_Pointer_Test(CTX.post.list, (int)yyvsp[-3].d);
	if(v){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  WriteView(v, tmpstring, 0, 0);
	}
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      }
    ;
    break;}
case 285:
#line 2498 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else{
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      }
    ;
    break;}
case 286:
#line 2513 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
      }
      catch(...) {
	yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
      }
   ;
    break;}
case 287:
#line 2522 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Views"))
	CombineViews(1, 0);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	CombineViews_Time(2, 0);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
    ;
    break;}
case 288:
#line 2531 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 289:
#line 2535 "Gmsh.y"
{
      SetBoundingBox();
    ;
    break;}
case 290:
#line 2539 "Gmsh.y"
{
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 291:
#line 2543 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch) // we're in interactive mode
	Draw();
#endif
    ;
    break;}
case 292:
#line 2556 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 293:
#line 2570 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = "";
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 294:
#line 2584 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 295:
#line 2609 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
    ;
    break;}
case 296:
#line 2634 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  Symbol TheSymbol;
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  Symbol *pSymbol;
	  if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	    yymsg(GERROR, "Unknown loop variable");
	  else
	    *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	      LoopControlVariablesTab[ImbricatedLoop-1][2];
	}
	fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
	if(ImbricatedLoop < 0){
	  yymsg(GERROR, "Problem with imbricated loops");
	  ImbricatedLoop = 0;
	}
      }
    ;
    break;}
case 297:
#line 2661 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 298:
#line 2667 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 299:
#line 2672 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
    ;
    break;}
case 300:
#line 2677 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 301:
#line 2681 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2692 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 303:
#line 2703 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 304:
#line 2714 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					  &pc, &prc, 1, NULL);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 305:
#line 2725 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 306:
#line 2730 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0.,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 307:
#line 2741 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 308:
#line 2746 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 309:
#line 2757 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 310:
#line 2762 "Gmsh.y"
{
      Curve *pc, *prc;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudePoint(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					  &pc, &prc, 1, &extr);
      TheShape.Type = MSH_POINT;
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 311:
#line 2775 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 312:
#line 2793 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 313:
#line 2811 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					  yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d, 
					  &ps, 1, NULL);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 314:
#line 2829 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 315:
#line 2834 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					  0., 0., 0., 0., 0., 0., 0., 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 316:
#line 2852 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 317:
#line 2857 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 318:
#line 2875 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 319:
#line 2880 "Gmsh.y"
{
      Surface *ps;
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeCurve(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					  yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					  &ps, 1, &extr);
      Curve *c = FindCurve(TheShape.Num, THEM);
      if(!c){
	//yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = c->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 320:
#line 2901 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-4].d, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 321:
#line 2918 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-8].d, 0., 0., 0.,
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 322:
#line 2935 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-10].d, yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2],
					    yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
					    0, NULL);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 323:
#line 2952 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 324:
#line 2957 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE, (int)yyvsp[-8].d, yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2],
					    0., 0., 0., 0., 0., 0., 0., 
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 325:
#line 2974 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 326:
#line 2980 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(ROTATE, (int)yyvsp[-12].d, 0., 0., 0.,
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d, 
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 327:
#line 2997 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 328:
#line 3003 "Gmsh.y"
{
      Shape TheShape;
      TheShape.Num = Extrude_ProtudeSurface(TRANSLATE_ROTATE, (int)yyvsp[-14].d, yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2],
					    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
					    NEWREG(), &extr);
      Surface *s = FindSurface(TheShape.Num, THEM);
      if(!s){
	//yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	TheShape.Type = 0;
      }
      else{
	TheShape.Type = s->Typ;
      }
      yyval.l = List_Create(1, 1, sizeof(Shape));
      List_Add(yyval.l, &TheShape);
    ;
    break;}
case 329:
#line 3023 "Gmsh.y"
{
    ;
    break;}
case 330:
#line 3026 "Gmsh.y"
{
    ;
    break;}
case 331:
#line 3032 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 332:
#line 3058 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 333:
#line 3082 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 334:
#line 3091 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 335:
#line 3109 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 336:
#line 3127 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j, THEM);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 337:
#line 3145 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k);
	}
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 338:
#line 3172 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d, THEM);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        int k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k);
        else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j, THEM);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 339:
#line 3198 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d, THEM);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k);
	else{
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j, THEM);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 340:
#line 3224 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 341:
#line 3238 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j, THEM);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 342:
#line 3257 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 343:
#line 3261 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 344:
#line 3270 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 345:
#line 3271 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 346:
#line 3272 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 347:
#line 3273 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 348:
#line 3274 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 349:
#line 3278 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 350:
#line 3279 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 351:
#line 3280 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 352:
#line 3281 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 353:
#line 3282 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 354:
#line 3283 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 355:
#line 3284 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 356:
#line 3285 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 357:
#line 3287 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 358:
#line 3293 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 359:
#line 3294 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 360:
#line 3295 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 361:
#line 3296 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 362:
#line 3297 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 363:
#line 3298 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 364:
#line 3299 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 365:
#line 3300 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 366:
#line 3301 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 367:
#line 3302 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 368:
#line 3303 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 369:
#line 3304 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 370:
#line 3305 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 371:
#line 3306 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 372:
#line 3307 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 373:
#line 3308 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 374:
#line 3309 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 375:
#line 3310 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 376:
#line 3311 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 377:
#line 3312 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 378:
#line 3313 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 379:
#line 3314 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 380:
#line 3315 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 381:
#line 3316 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 382:
#line 3317 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 383:
#line 3318 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 384:
#line 3319 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 385:
#line 3320 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 386:
#line 3321 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 387:
#line 3322 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 388:
#line 3323 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 389:
#line 3324 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 390:
#line 3326 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 391:
#line 3327 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 392:
#line 3328 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 393:
#line 3329 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 394:
#line 3330 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 395:
#line 3331 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 396:
#line 3332 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 397:
#line 3333 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 398:
#line 3334 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 399:
#line 3335 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 400:
#line 3336 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 401:
#line 3337 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 402:
#line 3338 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 403:
#line 3339 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 404:
#line 3340 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 405:
#line 3341 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 406:
#line 3342 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 407:
#line 3343 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 408:
#line 3344 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 409:
#line 3345 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 410:
#line 3346 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 411:
#line 3355 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 412:
#line 3356 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 413:
#line 3357 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 414:
#line 3358 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 415:
#line 3363 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
    ;
    break;}
case 416:
#line 3375 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 417:
#line 3394 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	yyval.d = List_Nbr(pSymbol->val);
      }
    ;
    break;}
case 418:
#line 3407 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
    ;
    break;}
case 419:
#line 3419 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
    ;
    break;}
case 420:
#line 3441 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 421:
#line 3458 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 422:
#line 3475 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 423:
#line 3492 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 424:
#line 3512 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 425:
#line 3516 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 426:
#line 3520 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 427:
#line 3524 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 428:
#line 3528 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 429:
#line 3535 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 430:
#line 3539 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 431:
#line 3543 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 432:
#line 3547 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 433:
#line 3554 "Gmsh.y"
{
    ;
    break;}
case 434:
#line 3557 "Gmsh.y"
{
    ;
    break;}
case 435:
#line 3563 "Gmsh.y"
{
    ;
    break;}
case 436:
#line 3566 "Gmsh.y"
{
    ;
    break;}
case 437:
#line 3572 "Gmsh.y"
{
    ;
    break;}
case 438:
#line 3575 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 439:
#line 3579 "Gmsh.y"
{
       yyval.l = yyvsp[-1].l;
    ;
    break;}
case 440:
#line 3586 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 441:
#line 3591 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 442:
#line 3599 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 443:
#line 3604 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 444:
#line 3608 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 445:
#line 3612 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      double *pd;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 446:
#line 3624 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 447:
#line 3630 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 448:
#line 3641 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d, THEM);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int) yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 449:
#line 3661 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 450:
#line 3671 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 451:
#line 3681 "Gmsh.y"
{
      // FIXME: The syntax for this is ugly: we get double semi-colons
      // at the end of the line
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 452:
#line 3693 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
    ;
    break;}
case 453:
#line 3709 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++){
	  double d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d);
	}
      }
    ;
    break;}
case 454:
#line 3727 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 455:
#line 3750 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    double d = - *pd;
	    List_Add(yyval.l, &d);
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 456:
#line 3778 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 457:
#line 3783 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 458:
#line 3787 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 459:
#line 3791 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 460:
#line 3804 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 461:
#line 3808 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 462:
#line 3820 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 463:
#line 3826 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else{
	  yyval.u = pColOpt(0, GMSH_GET, 0);
	}
      }
    ;
    break;}
case 464:
#line 3847 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 465:
#line 3851 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 466:
#line 3865 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 467:
#line 3870 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 468:
#line 3877 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 469:
#line 3881 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);  
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 470:
#line 3889 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 471:
#line 3903 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 472:
#line 3907 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 473:
#line 3926 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 474:
#line 3942 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3959 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
