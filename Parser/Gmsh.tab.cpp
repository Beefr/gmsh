
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tMPI_Rank	264
#define	tMPI_Size	265
#define	tEuclidian	266
#define	tCoordinates	267
#define	tExp	268
#define	tLog	269
#define	tLog10	270
#define	tSqrt	271
#define	tSin	272
#define	tAsin	273
#define	tCos	274
#define	tAcos	275
#define	tTan	276
#define	tRand	277
#define	tAtan	278
#define	tAtan2	279
#define	tSinh	280
#define	tCosh	281
#define	tTanh	282
#define	tFabs	283
#define	tFloor	284
#define	tCeil	285
#define	tFmod	286
#define	tModulo	287
#define	tHypot	288
#define	tPrintf	289
#define	tSprintf	290
#define	tStrCat	291
#define	tStrPrefix	292
#define	tStrRelative	293
#define	tBoundingBox	294
#define	tDraw	295
#define	tToday	296
#define	tPoint	297
#define	tCircle	298
#define	tEllipse	299
#define	tLine	300
#define	tSphere	301
#define	tPolarSphere	302
#define	tSurface	303
#define	tSpline	304
#define	tVolume	305
#define	tCharacteristic	306
#define	tLength	307
#define	tParametric	308
#define	tElliptic	309
#define	tPlane	310
#define	tRuled	311
#define	tTransfinite	312
#define	tComplex	313
#define	tPhysical	314
#define	tUsing	315
#define	tBump	316
#define	tProgression	317
#define	tPlugin	318
#define	tRotate	319
#define	tTranslate	320
#define	tSymmetry	321
#define	tDilate	322
#define	tExtrude	323
#define	tDuplicata	324
#define	tLoop	325
#define	tRecombine	326
#define	tDelete	327
#define	tCoherence	328
#define	tIntersect	329
#define	tBoundary	330
#define	tAttractor	331
#define	tLayers	332
#define	tHole	333
#define	tAlias	334
#define	tAliasWithOptions	335
#define	tText2D	336
#define	tText3D	337
#define	tInterpolationScheme	338
#define	tTime	339
#define	tCombine	340
#define	tBSpline	341
#define	tBezier	342
#define	tNurbs	343
#define	tOrder	344
#define	tKnots	345
#define	tColor	346
#define	tColorTable	347
#define	tFor	348
#define	tIn	349
#define	tEndFor	350
#define	tIf	351
#define	tEndIf	352
#define	tExit	353
#define	tField	354
#define	tThreshold	355
#define	tStructured	356
#define	tLatLon	357
#define	tGrad	358
#define	tPostView	359
#define	tReturn	360
#define	tCall	361
#define	tFunction	362
#define	tShow	363
#define	tHide	364
#define	tGetValue	365
#define	tGMSH_MAJOR_VERSION	366
#define	tGMSH_MINOR_VERSION	367
#define	tGMSH_PATCH_VERSION	368
#define	tAFFECTPLUS	369
#define	tAFFECTMINUS	370
#define	tAFFECTTIMES	371
#define	tAFFECTDIVIDE	372
#define	tOR	373
#define	tAND	374
#define	tEQUAL	375
#define	tNOTEQUAL	376
#define	tLESSOREQUAL	377
#define	tGREATEROREQUAL	378
#define	tPLUSPLUS	379
#define	tMINUSMINUS	380
#define	UNARYPREC	381

#line 1 "Gmsh.y"

// $Id: Gmsh.tab.cpp,v 1.336 2007-11-08 19:30:30 geuzaine Exp $
//
// Copyright (C) 1997-2007 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to <gmsh@geuz.org>.

#include <stdarg.h>
#include <time.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "GModel.h"
#include "Geo.h"
#include "GeoInterpolation.h"
#include "Generator.h"
#include "Draw.h"
#include "PView.h"
#include "PViewDataList.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "CommandLine.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "OS.h"
#include "CreateFile.h"
#include "gmshSurface.h"
#include "Field.h"
#include "BackgroundMesh.h"

Tree_T *Symbol_T = NULL;

extern Context_T CTX;

static ExtrudeParams extr;

static gmshSurface *myGmshSurface = 0;

static PViewDataList *ViewData;
static List_T *ViewValueList;
static double ViewCoord[100];
static int *ViewNumList, ViewCoordIdx;

#define MAX_RECUR_LOOPS 100
static int ImbricatedLoop = 0;
static fpos_t yyposImbricatedLoopsTab[MAX_RECUR_LOOPS];
static int yylinenoImbricatedLoopsTab[MAX_RECUR_LOOPS];
static double LoopControlVariablesTab[MAX_RECUR_LOOPS][3];
static char *LoopControlVariablesNameTab[MAX_RECUR_LOOPS];

void yyerror(char *s);
void yymsg(int type, char *fmt, ...);
void skip_until(char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);

#line 76 "Gmsh.y"
typedef union {
  char *c;
  int i;
  unsigned int u;
  double d;
  double v[5];
  Shape s;
  List_T *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1274
#define	YYFLAG		-32768
#define	YYNTBASE	148

#define YYTRANSLATE(x) ((unsigned)(x) <= 381 ? yytranslate[x] : 215)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   133,     2,   143,     2,   132,     2,     2,   138,
   139,   130,   128,   144,   129,   142,   131,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   124,
     2,   126,   119,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   140,     2,   141,   137,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   145,     2,   146,   147,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   120,   121,   122,   123,   125,   127,   134,   135,
   136
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     6,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    42,    48,    56,    64,    74,    81,    88,    95,    96,    99,
   102,   105,   108,   111,   113,   117,   119,   123,   124,   125,
   136,   138,   142,   143,   157,   159,   163,   164,   180,   189,
   204,   205,   212,   214,   216,   218,   220,   222,   224,   226,
   231,   239,   249,   256,   263,   267,   274,   279,   286,   296,
   303,   313,   319,   328,   337,   349,   356,   366,   376,   386,
   388,   390,   398,   407,   417,   426,   435,   444,   453,   463,
   472,   478,   485,   492,   499,   507,   515,   523,   533,   541,
   551,   569,   577,   585,   597,   606,   615,   624,   633,   637,
   642,   653,   661,   669,   678,   687,   696,   704,   713,   719,
   731,   737,   747,   752,   762,   767,   769,   771,   772,   775,
   782,   789,   796,   803,   808,   815,   819,   824,   830,   834,
   838,   843,   848,   852,   860,   868,   872,   880,   884,   887,
   890,   906,   909,   916,   925,   934,   945,   947,   950,   952,
   956,   961,   963,   969,   981,   995,   996,  1004,  1005,  1019,
  1020,  1036,  1037,  1044,  1045,  1056,  1065,  1074,  1083,  1096,
  1109,  1122,  1137,  1152,  1167,  1168,  1181,  1182,  1195,  1196,
  1209,  1210,  1227,  1228,  1245,  1246,  1263,  1264,  1283,  1284,
  1303,  1304,  1323,  1325,  1328,  1334,  1342,  1352,  1355,  1365,
  1372,  1382,  1392,  1401,  1411,  1420,  1429,  1436,  1441,  1452,
  1463,  1474,  1485,  1488,  1490,  1494,  1497,  1500,  1503,  1507,
  1511,  1515,  1519,  1523,  1527,  1531,  1535,  1539,  1543,  1547,
  1551,  1555,  1559,  1565,  1570,  1575,  1580,  1585,  1590,  1595,
  1600,  1605,  1610,  1615,  1622,  1627,  1632,  1637,  1642,  1647,
  1652,  1659,  1666,  1673,  1678,  1683,  1688,  1693,  1698,  1703,
  1708,  1713,  1718,  1723,  1728,  1735,  1740,  1745,  1750,  1755,
  1760,  1765,  1772,  1779,  1786,  1791,  1793,  1795,  1797,  1799,
  1801,  1803,  1805,  1807,  1813,  1818,  1823,  1826,  1832,  1836,
  1843,  1848,  1856,  1863,  1865,  1868,  1871,  1875,  1879,  1891,
  1901,  1909,  1917,  1919,  1923,  1925,  1927,  1930,  1934,  1939,
  1945,  1948,  1952,  1956,  1962,  1967,  1969,  1971,  1975,  1982,
  1984,  1986,  1990,  1994,  2004,  2012,  2014,  2020,  2024,  2031,
  2033,  2037,  2039,  2041,  2043,  2045,  2052,  2057,  2062,  2067,
  2074,  2081
};

static const short yyrhs[] = {   149,
     0,     1,     6,     0,     0,   149,   150,     0,   153,     0,
   152,     0,   171,     0,   173,     0,   174,     0,   177,     0,
   178,     0,   179,     0,   182,     0,   199,     0,   200,     0,
   201,     0,   181,     0,   180,     0,   126,     0,   126,   126,
     0,    35,   138,     5,   139,     6,     0,    35,   138,     5,
   139,   151,   213,     6,     0,    35,   138,     5,   144,   209,
   139,     6,     0,    35,   138,     5,   144,   209,   139,   151,
   213,     6,     0,     4,     5,   145,   154,   146,     6,     0,
    80,     4,   140,   202,   141,     6,     0,    81,     4,   140,
   202,   141,     6,     0,     0,   154,   157,     0,   154,   161,
     0,   154,   164,     0,   154,   166,     0,   154,   167,     0,
   202,     0,   155,   144,   202,     0,   202,     0,   156,   144,
   202,     0,     0,     0,     4,   158,   138,   155,   139,   159,
   145,   156,   146,     6,     0,   213,     0,   160,   144,   213,
     0,     0,    82,   138,   202,   144,   202,   144,   202,   139,
   162,   145,   160,   146,     6,     0,   213,     0,   163,   144,
   213,     0,     0,    83,   138,   202,   144,   202,   144,   202,
   144,   202,   139,   165,   145,   163,   146,     6,     0,    84,
   145,   206,   146,   145,   206,   146,     6,     0,    84,   145,
   206,   146,   145,   206,   146,   145,   206,   146,   145,   206,
   146,     6,     0,     0,    85,   168,   145,   156,   146,     6,
     0,     7,     0,   115,     0,   116,     0,   117,     0,   118,
     0,   134,     0,   135,     0,     4,   169,   202,     6,     0,
     4,   140,   202,   141,   169,   202,     6,     0,     4,   140,
   145,   209,   146,   141,   169,   207,     6,     0,     4,   140,
   141,     7,   207,     6,     0,     4,   140,   141,   115,   207,
     6,     0,     4,   170,     6,     0,     4,   140,   202,   141,
   170,     6,     0,     4,     7,   214,     6,     0,     4,   142,
     4,     7,   214,     6,     0,     4,   140,   202,   141,   142,
     4,     7,   214,     6,     0,     4,   142,     4,   169,   202,
     6,     0,     4,   140,   202,   141,   142,     4,   169,   202,
     6,     0,     4,   142,     4,   170,     6,     0,     4,   140,
   202,   141,   142,     4,   170,     6,     0,     4,   142,    92,
   142,     4,     7,   210,     6,     0,     4,   140,   202,   141,
   142,    92,   142,     4,     7,   210,     6,     0,     4,   142,
    93,     7,   211,     6,     0,     4,   140,   202,   141,   142,
    93,     7,   211,     6,     0,    64,   138,     4,   139,   142,
     4,     7,   202,     6,     0,    64,   138,     4,   139,   142,
     4,     7,   214,     6,     0,   202,     0,   214,     0,    43,
   138,   202,   139,     7,   204,     6,     0,    60,    43,   138,
   172,   139,     7,   207,     6,     0,    77,    43,   100,   138,
   202,   139,     7,   207,     6,     0,   103,   100,   138,   202,
   139,     7,   202,     6,     0,   105,   100,   138,   202,   139,
     7,   202,     6,     0,   101,   100,   138,   202,   139,     7,
   207,     6,     0,   108,   100,   138,   202,   139,     7,     5,
     6,     0,   108,   100,   138,   202,   139,     7,     5,   207,
     6,     0,   102,   100,   138,   202,   139,     7,     5,     6,
     0,    52,    53,   100,   207,     6,     0,    77,    43,   207,
     7,   207,     6,     0,    77,    46,   207,     7,   207,     6,
     0,    52,    53,   207,     7,   202,     6,     0,    46,   138,
   202,   139,     7,   207,     6,     0,    50,   138,   202,   139,
     7,   207,     6,     0,    44,   138,   202,   139,     7,   207,
     6,     0,    44,   138,   202,   139,     7,   207,    56,   204,
     6,     0,    45,   138,   202,   139,     7,   207,     6,     0,
    45,   138,   202,   139,     7,   207,    56,   204,     6,     0,
    54,   138,   202,   139,     7,   145,   202,   144,   202,   144,
     5,   144,     5,   144,     5,   146,     6,     0,    87,   138,
   202,   139,     7,   207,     6,     0,    88,   138,   202,   139,
     7,   207,     6,     0,    89,   138,   202,   139,     7,   207,
    91,   207,    90,   202,     6,     0,    46,    71,   138,   202,
   139,     7,   207,     6,     0,    60,    46,   138,   172,   139,
     7,   207,     6,     0,    56,    49,   138,   202,   139,     7,
   207,     6,     0,    57,    49,   138,   202,   139,     7,   207,
     6,     0,    12,    13,     6,     0,    13,    49,   202,     6,
     0,    54,    49,   138,   202,   139,     7,     5,     5,     5,
     6,     0,    47,   138,   202,   139,     7,   207,     6,     0,
    48,   138,   202,   139,     7,   207,     6,     0,    49,    71,
   138,   202,   139,     7,   207,     6,     0,    60,    49,   138,
   172,   139,     7,   207,     6,     0,    59,    51,   138,   202,
   139,     7,   207,     6,     0,    51,   138,   202,   139,     7,
   207,     6,     0,    60,    51,   138,   172,   139,     7,   207,
     6,     0,    66,   204,   145,   175,   146,     0,    65,   145,
   204,   144,   204,   144,   202,   146,   145,   175,   146,     0,
    67,   204,   145,   175,   146,     0,    68,   145,   204,   144,
   202,   146,   145,   175,   146,     0,    70,   145,   175,   146,
     0,    75,    46,   145,   209,   146,    49,   145,   202,   146,
     0,    76,   145,   175,   146,     0,   176,     0,   174,     0,
     0,   176,   173,     0,   176,    43,   145,   209,   146,     6,
     0,   176,    46,   145,   209,   146,     6,     0,   176,    49,
   145,   209,   146,     6,     0,   176,    51,   145,   209,   146,
     6,     0,    73,   145,   176,   146,     0,    73,     4,   140,
   202,   141,     6,     0,    73,     4,     6,     0,    73,     4,
     4,     6,     0,    92,   210,   145,   176,   146,     0,   109,
   213,     6,     0,   110,   213,     6,     0,   109,   145,   176,
   146,     0,   110,   145,   176,   146,     0,     4,   214,     6,
     0,     4,     4,   140,   202,   141,   213,     6,     0,     4,
     4,     4,   140,   202,   141,     6,     0,     4,   202,     6,
     0,    64,   138,     4,   139,   142,     4,     6,     0,    86,
     4,     6,     0,    99,     6,     0,    40,     6,     0,    40,
   145,   202,   144,   202,   144,   202,   144,   202,   144,   202,
   144,   202,   146,     6,     0,    41,     6,     0,    94,   138,
   202,     8,   202,   139,     0,    94,   138,   202,     8,   202,
     8,   202,   139,     0,    94,     4,    95,   145,   202,     8,
   202,   146,     0,    94,     4,    95,   145,   202,     8,   202,
     8,   202,   146,     0,    96,     0,   108,     4,     0,   106,
     0,   107,     4,     6,     0,    97,   138,   202,   139,     0,
    98,     0,    69,   204,   145,   176,   146,     0,    69,   145,
   204,   144,   204,   144,   202,   146,   145,   176,   146,     0,
    69,   145,   204,   144,   204,   144,   204,   144,   202,   146,
   145,   176,   146,     0,     0,    69,   204,   145,   176,   183,
   197,   146,     0,     0,    69,   145,   204,   144,   204,   144,
   202,   146,   145,   176,   184,   197,   146,     0,     0,    69,
   145,   204,   144,   204,   144,   204,   144,   202,   146,   145,
   176,   185,   197,   146,     0,     0,    69,   145,   176,   186,
   197,   146,     0,     0,    69,     4,   140,   202,   141,   145,
   176,   187,   197,   146,     0,    69,    43,   145,   202,   144,
   204,   146,     6,     0,    69,    46,   145,   202,   144,   204,
   146,     6,     0,    69,    49,   145,   202,   144,   204,   146,
     6,     0,    69,    43,   145,   202,   144,   204,   144,   204,
   144,   202,   146,     6,     0,    69,    46,   145,   202,   144,
   204,   144,   204,   144,   202,   146,     6,     0,    69,    49,
   145,   202,   144,   204,   144,   204,   144,   202,   146,     6,
     0,    69,    43,   145,   202,   144,   204,   144,   204,   144,
   204,   144,   202,   146,     6,     0,    69,    46,   145,   202,
   144,   204,   144,   204,   144,   204,   144,   202,   146,     6,
     0,    69,    49,   145,   202,   144,   204,   144,   204,   144,
   204,   144,   202,   146,     6,     0,     0,    69,    43,   145,
   202,   144,   204,   146,   188,   145,   197,   146,     6,     0,
     0,    69,    46,   145,   202,   144,   204,   146,   189,   145,
   197,   146,     6,     0,     0,    69,    49,   145,   202,   144,
   204,   146,   190,   145,   197,   146,     6,     0,     0,    69,
    43,   145,   202,   144,   204,   144,   204,   144,   202,   146,
   191,   145,   197,   146,     6,     0,     0,    69,    46,   145,
   202,   144,   204,   144,   204,   144,   202,   146,   192,   145,
   197,   146,     6,     0,     0,    69,    49,   145,   202,   144,
   204,   144,   204,   144,   202,   146,   193,   145,   197,   146,
     6,     0,     0,    69,    43,   145,   202,   144,   204,   144,
   204,   144,   204,   144,   202,   146,   194,   145,   197,   146,
     6,     0,     0,    69,    46,   145,   202,   144,   204,   144,
   204,   144,   204,   144,   202,   146,   195,   145,   197,   146,
     6,     0,     0,    69,    49,   145,   202,   144,   204,   144,
   204,   144,   204,   144,   202,   146,   196,   145,   197,   146,
     6,     0,   198,     0,   197,   198,     0,    78,   145,   202,
   146,     6,     0,    78,   145,   207,   144,   207,   146,     6,
     0,    78,   145,   207,   144,   207,   144,   207,   146,     6,
     0,    72,     6,     0,    79,   138,   202,   139,     7,   207,
    61,   202,     6,     0,    58,    46,   207,     7,   202,     6,
     0,    58,    46,   207,     7,   202,    61,    63,   202,     6,
     0,    58,    46,   207,     7,   202,    61,    62,   202,     6,
     0,    58,    49,   145,   202,   146,     7,   207,     6,     0,
    58,    49,   145,   202,   146,     7,   207,     4,     6,     0,
    55,    49,   145,   202,   146,     7,   207,     6,     0,    58,
    51,   145,   202,   146,     7,   207,     6,     0,    72,    49,
   207,     7,   202,     6,     0,    72,    49,   207,     6,     0,
    43,   145,   209,   146,    95,    49,   145,   202,   146,     6,
     0,    46,   145,   209,   146,    95,    49,   145,   202,   146,
     6,     0,    46,   145,   209,   146,    95,    51,   145,   202,
   146,     6,     0,    49,   145,   209,   146,    95,    51,   145,
   202,   146,     6,     0,    74,     6,     0,   203,     0,   138,
   202,   139,     0,   129,   202,     0,   128,   202,     0,   133,
   202,     0,   202,   129,   202,     0,   202,   128,   202,     0,
   202,   130,   202,     0,   202,   131,   202,     0,   202,   132,
   202,     0,   202,   137,   202,     0,   202,   124,   202,     0,
   202,   126,   202,     0,   202,   125,   202,     0,   202,   127,
   202,     0,   202,   122,   202,     0,   202,   123,   202,     0,
   202,   121,   202,     0,   202,   120,   202,     0,   202,   119,
   202,     8,   202,     0,    14,   138,   202,   139,     0,    15,
   138,   202,   139,     0,    16,   138,   202,   139,     0,    17,
   138,   202,   139,     0,    18,   138,   202,   139,     0,    19,
   138,   202,   139,     0,    20,   138,   202,   139,     0,    21,
   138,   202,   139,     0,    22,   138,   202,   139,     0,    24,
   138,   202,   139,     0,    25,   138,   202,   144,   202,   139,
     0,    26,   138,   202,   139,     0,    27,   138,   202,   139,
     0,    28,   138,   202,   139,     0,    29,   138,   202,   139,
     0,    30,   138,   202,   139,     0,    31,   138,   202,   139,
     0,    32,   138,   202,   144,   202,   139,     0,    33,   138,
   202,   144,   202,   139,     0,    34,   138,   202,   144,   202,
   139,     0,    23,   138,   202,   139,     0,    14,   140,   202,
   141,     0,    15,   140,   202,   141,     0,    16,   140,   202,
   141,     0,    17,   140,   202,   141,     0,    18,   140,   202,
   141,     0,    19,   140,   202,   141,     0,    20,   140,   202,
   141,     0,    21,   140,   202,   141,     0,    22,   140,   202,
   141,     0,    24,   140,   202,   141,     0,    25,   140,   202,
   144,   202,   141,     0,    26,   140,   202,   141,     0,    27,
   140,   202,   141,     0,    28,   140,   202,   141,     0,    29,
   140,   202,   141,     0,    30,   140,   202,   141,     0,    31,
   140,   202,   141,     0,    32,   140,   202,   144,   202,   141,
     0,    33,   140,   202,   144,   202,   141,     0,    34,   140,
   202,   144,   202,   141,     0,    23,   140,   202,   141,     0,
     3,     0,     9,     0,    10,     0,    11,     0,   112,     0,
   113,     0,   114,     0,     4,     0,     4,   147,   145,   202,
   146,     0,     4,   140,   202,   141,     0,   143,     4,   140,
   141,     0,     4,   170,     0,     4,   140,   202,   141,   170,
     0,     4,   142,     4,     0,     4,   140,   202,   141,   142,
     4,     0,     4,   142,     4,   170,     0,     4,   140,   202,
   141,   142,     4,   170,     0,   111,   138,     5,   144,   202,
   139,     0,   205,     0,   129,   204,     0,   128,   204,     0,
   204,   129,   204,     0,   204,   128,   204,     0,   145,   202,
   144,   202,   144,   202,   144,   202,   144,   202,   146,     0,
   145,   202,   144,   202,   144,   202,   144,   202,   146,     0,
   145,   202,   144,   202,   144,   202,   146,     0,   138,   202,
   144,   202,   144,   202,   139,     0,   207,     0,   206,   144,
   207,     0,   202,     0,   208,     0,   145,   146,     0,   145,
   209,   146,     0,   129,   145,   209,   146,     0,   202,   130,
   145,   209,   146,     0,   129,   208,     0,   202,   130,   208,
     0,   202,     8,   202,     0,   202,     8,   202,     8,   202,
     0,    43,   145,   202,   146,     0,   174,     0,   182,     0,
     4,   140,   141,     0,     4,   140,   145,   209,   146,   141,
     0,   202,     0,   208,     0,   209,   144,   202,     0,   209,
   144,   208,     0,   145,   202,   144,   202,   144,   202,   144,
   202,   146,     0,   145,   202,   144,   202,   144,   202,   146,
     0,     4,     0,     4,   142,    92,   142,     4,     0,   145,
   212,   146,     0,     4,   140,   202,   141,   142,    93,     0,
   210,     0,   212,   144,   210,     0,   214,     0,     4,     0,
     5,     0,    42,     0,    37,   138,   213,   144,   213,   139,
     0,    38,   138,   213,   139,     0,    39,   138,   213,   139,
     0,    36,   138,   213,   139,     0,    36,   138,   213,   144,
   209,   139,     0,    36,   138,     4,   142,     4,   139,     0,
    36,   138,     4,   140,   202,   141,   142,     4,   139,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   142,   144,   149,   151,   154,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   171,   176,
   182,   188,   203,   216,   244,   262,   271,   282,   287,   288,
   289,   290,   291,   294,   297,   301,   304,   308,   453,   461,
   467,   473,   480,   489,   495,   501,   508,   516,   522,   528,
   537,   542,   549,   551,   552,   553,   554,   557,   559,   562,
   597,   636,   690,   707,   725,   736,   753,   760,   774,   791,
   817,   844,   858,   875,   889,   906,   926,   949,   959,   973,
   978,   987,  1013,  1029,  1050,  1057,  1068,  1083,  1091,  1106,
  1113,  1125,  1159,  1195,  1217,  1235,  1253,  1271,  1297,  1315,
  1341,  1361,  1379,  1397,  1423,  1440,  1459,  1477,  1515,  1519,
  1523,  1528,  1550,  1572,  1588,  1608,  1625,  1642,  1662,  1668,
  1673,  1678,  1683,  1694,  1700,  1708,  1710,  1713,  1718,  1722,
  1745,  1768,  1791,  1818,  1828,  1841,  1857,  1871,  1885,  1892,
  1898,  1907,  1920,  1969,  1985,  2001,  2020,  2030,  2052,  2056,
  2061,  2066,  2076,  2093,  2109,  2134,  2160,  2191,  2198,  2203,
  2209,  2213,  2221,  2230,  2238,  2246,  2250,  2258,  2262,  2270,
  2274,  2282,  2286,  2293,  2297,  2309,  2316,  2323,  2330,  2337,
  2344,  2351,  2358,  2365,  2372,  2376,  2383,  2387,  2394,  2398,
  2405,  2409,  2416,  2420,  2427,  2431,  2438,  2442,  2449,  2453,
  2460,  2464,  2474,  2478,  2483,  2493,  2513,  2536,  2540,  2563,
  2582,  2600,  2618,  2647,  2682,  2687,  2714,  2728,  2746,  2753,
  2759,  2762,  2770,  2780,  2782,  2783,  2784,  2785,  2786,  2787,
  2788,  2789,  2796,  2797,  2798,  2799,  2800,  2801,  2802,  2803,
  2804,  2805,  2806,  2807,  2808,  2809,  2810,  2811,  2812,  2813,
  2814,  2815,  2816,  2817,  2818,  2819,  2820,  2821,  2822,  2823,
  2824,  2825,  2826,  2827,  2829,  2830,  2831,  2832,  2833,  2834,
  2835,  2836,  2837,  2838,  2839,  2840,  2841,  2842,  2843,  2844,
  2845,  2846,  2847,  2848,  2849,  2854,  2859,  2860,  2861,  2862,
  2863,  2864,  2868,  2884,  2899,  2919,  2932,  2945,  2968,  2986,
  3004,  3022,  3040,  3047,  3052,  3056,  3060,  3064,  3070,  3075,
  3079,  3083,  3089,  3095,  3102,  3108,  3112,  3117,  3121,  3129,
  3139,  3148,  3156,  3162,  3173,  3193,  3203,  3213,  3230,  3256,
  3262,  3266,  3270,  3282,  3287,  3299,  3306,  3326,  3331,  3345,
  3351,  3357,  3362,  3368,  3373,  3381,  3389,  3403,  3417,  3421,
  3440,  3462
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tMPI_Rank","tMPI_Size","tEuclidian",
"tCoordinates","tExp","tLog","tLog10","tSqrt","tSin","tAsin","tCos","tAcos",
"tTan","tRand","tAtan","tAtan2","tSinh","tCosh","tTanh","tFabs","tFloor","tCeil",
"tFmod","tModulo","tHypot","tPrintf","tSprintf","tStrCat","tStrPrefix","tStrRelative",
"tBoundingBox","tDraw","tToday","tPoint","tCircle","tEllipse","tLine","tSphere",
"tPolarSphere","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tBump","tProgression","tPlugin","tRotate","tTranslate","tSymmetry","tDilate",
"tExtrude","tDuplicata","tLoop","tRecombine","tDelete","tCoherence","tIntersect",
"tBoundary","tAttractor","tLayers","tHole","tAlias","tAliasWithOptions","tText2D",
"tText3D","tInterpolationScheme","tTime","tCombine","tBSpline","tBezier","tNurbs",
"tOrder","tKnots","tColor","tColorTable","tFor","tIn","tEndFor","tIf","tEndIf",
"tExit","tField","tThreshold","tStructured","tLatLon","tGrad","tPostView","tReturn",
"tCall","tFunction","tShow","tHide","tGetValue","tGMSH_MAJOR_VERSION","tGMSH_MINOR_VERSION",
"tGMSH_PATCH_VERSION","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES","tAFFECTDIVIDE",
"'?'","tOR","tAND","tEQUAL","tNOTEQUAL","'<'","tLESSOREQUAL","'>'","tGREATEROREQUAL",
"'+'","'-'","'*'","'/'","'%'","'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'",
"'('","')'","'['","']'","'.'","'#'","','","'{'","'}'","'~'","All","GeoFormatItems",
"GeoFormatItem","SendToFile","Printf","View","Views","ElementCoords","ElementValues",
"Element","@1","@2","Text2DValues","Text2D","@3","Text3DValues","Text3D","@4",
"InterpolationMatrix","Time","@5","NumericAffectation","NumericIncrement","Affectation",
"PhysicalId","Shape","Transform","MultipleShape","ListOfShapes","Delete","Colorify",
"Visibility","Command","Loop","Extrude","@6","@7","@8","@9","@10","@11","@12",
"@13","@14","@15","@16","@17","@18","@19","ExtrudeParameters","ExtrudeParameter",
"Transfinite","Embedding","Coherence","FExpr","FExpr_Single","VExpr","VExpr_Single",
"RecursiveListOfListOfDouble","ListOfDouble","FExpr_Multi","RecursiveListOfDouble",
"ColorExpr","ListOfColor","RecursiveListOfColor","StringExprVar","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   148,   148,   149,   149,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   151,   151,
   152,   152,   152,   152,   153,   153,   153,   154,   154,   154,
   154,   154,   154,   155,   155,   156,   156,   158,   159,   157,
   160,   160,   162,   161,   163,   163,   165,   164,   166,   166,
   168,   167,   169,   169,   169,   169,   169,   170,   170,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   172,
   172,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   174,   174,
   174,   174,   174,   174,   174,   175,   175,   176,   176,   176,
   176,   176,   176,   177,   177,   177,   177,   178,   179,   179,
   179,   179,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   182,   182,   182,   183,   182,   184,   182,   185,
   182,   186,   182,   187,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   188,   182,   189,   182,   190,   182,
   191,   182,   192,   182,   193,   182,   194,   182,   195,   182,
   196,   182,   197,   197,   198,   198,   198,   198,   198,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   200,   200,
   200,   200,   201,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   204,   204,   204,   204,   204,   205,   205,
   205,   205,   206,   206,   207,   207,   207,   207,   207,   207,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   209,
   209,   209,   209,   210,   210,   210,   210,   211,   211,   212,
   212,   213,   213,   214,   214,   214,   214,   214,   214,   214,
   214,   214
};

static const short yyr2[] = {     0,
     1,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     5,     7,     7,     9,     6,     6,     6,     0,     2,     2,
     2,     2,     2,     1,     3,     1,     3,     0,     0,    10,
     1,     3,     0,    13,     1,     3,     0,    15,     8,    14,
     0,     6,     1,     1,     1,     1,     1,     1,     1,     4,
     7,     9,     6,     6,     3,     6,     4,     6,     9,     6,
     9,     5,     8,     8,    11,     6,     9,     9,     9,     1,
     1,     7,     8,     9,     8,     8,     8,     8,     9,     8,
     5,     6,     6,     6,     7,     7,     7,     9,     7,     9,
    17,     7,     7,    11,     8,     8,     8,     8,     3,     4,
    10,     7,     7,     8,     8,     8,     7,     8,     5,    11,
     5,     9,     4,     9,     4,     1,     1,     0,     2,     6,
     6,     6,     6,     4,     6,     3,     4,     5,     3,     3,
     4,     4,     3,     7,     7,     3,     7,     3,     2,     2,
    15,     2,     6,     8,     8,    10,     1,     2,     1,     3,
     4,     1,     5,    11,    13,     0,     7,     0,    13,     0,
    15,     0,     6,     0,    10,     8,     8,     8,    12,    12,
    12,    14,    14,    14,     0,    12,     0,    12,     0,    12,
     0,    16,     0,    16,     0,    16,     0,    18,     0,    18,
     0,    18,     1,     2,     5,     7,     9,     2,     9,     6,
     9,     9,     8,     9,     8,     8,     6,     4,    10,    10,
    10,    10,     2,     1,     3,     2,     2,     2,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     5,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     6,     4,     4,     4,     4,     4,     4,
     6,     6,     6,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     4,     4,
     4,     6,     6,     6,     4,     1,     1,     1,     1,     1,
     1,     1,     1,     5,     4,     4,     2,     5,     3,     6,
     4,     7,     6,     1,     2,     2,     3,     3,    11,     9,
     7,     7,     1,     3,     1,     1,     2,     3,     4,     5,
     2,     3,     3,     5,     4,     1,     1,     3,     6,     1,
     1,     3,     3,     9,     7,     1,     5,     3,     6,     1,
     3,     1,     1,     1,     1,     6,     4,     4,     4,     6,
     6,     9
};

static const short yydefact[] = {     0,
     0,     1,     2,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   157,     0,   162,
     0,     0,     0,     0,     0,   159,     0,     0,     0,     0,
     4,     6,     5,     7,     8,     9,    10,    11,    12,    18,
    17,    13,    14,    15,    16,   286,   293,   344,    53,   287,
   288,   289,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   345,     0,   290,
   291,   292,    54,    55,    56,    57,     0,     0,     0,    58,
    59,     0,     0,     0,     0,     0,     0,     0,   224,     0,
     0,     0,     0,   150,     0,   152,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   304,     0,     0,     0,     0,     0,     0,   128,     0,   128,
     0,     0,   128,   223,     0,   128,     0,     0,     0,     0,
     0,     0,     0,     0,   336,     0,     0,     0,     0,     0,
   149,     0,     0,     0,     0,     0,   158,     0,   343,   344,
   128,     0,   342,   128,     0,     0,     0,     0,     0,   297,
    28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   293,
   227,   226,   228,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    65,   146,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   143,
   109,     0,     0,     0,     0,   293,     0,     0,   326,   327,
   330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   315,     0,   316,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   306,   305,     0,     0,     0,
     0,   128,   128,     0,     0,     0,     0,     0,     0,     0,
     0,   172,     0,   128,   127,     0,   126,     0,     0,   136,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     0,     0,     0,     0,     0,   128,     0,     0,     0,     0,
     0,     0,     0,   160,     0,     0,   139,     0,   140,     0,
     0,   299,     0,     0,    67,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   343,     0,     0,
     0,     0,     0,     0,   225,     0,     0,     0,     0,    53,
     0,     0,     0,     0,     0,    60,     0,   242,   241,   239,
   240,   235,   237,   236,   238,   230,   229,   231,   232,   233,
   234,   110,     0,     0,     0,     0,     0,     0,   226,   321,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   317,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    80,    81,     0,     0,     0,     0,     0,     0,     0,
   308,   307,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   129,     0,     0,   166,   123,
   218,     0,   137,     0,   134,     0,   125,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,     0,     0,     0,     0,     0,   141,   142,     0,   295,
   301,     0,    38,     0,     0,     0,    51,     0,    29,    30,
    31,    32,    33,   244,   265,   245,   266,   246,   267,   247,
   268,   248,   269,   249,   270,   250,   271,   251,   272,   252,
   273,   264,   285,   253,   274,     0,     0,   255,   276,   256,
   277,   257,   278,   258,   279,   259,   280,   260,   281,     0,
     0,     0,     0,     0,     0,     0,     0,   349,     0,     0,
   347,   348,     0,     0,     0,     0,     0,    53,     0,     0,
     0,     0,     0,    72,     0,     0,     0,     0,   296,     0,
    21,    19,     0,     0,     0,     0,   328,     0,     0,   323,
   231,   322,   332,   333,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    91,     0,   318,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   203,     0,   163,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   298,     0,   294,     0,     0,     0,     0,     0,    25,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   295,    63,    64,     0,     0,     0,     0,     0,
    66,    68,    70,     0,     0,   340,     0,    76,   243,    20,
     0,     0,     0,     0,     0,   325,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   319,     0,    94,     0,     0,     0,     0,     0,   210,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   128,     0,     0,     0,     0,     0,     0,     0,
   208,     0,     0,   173,   204,     0,     0,   217,   135,     0,
     0,    92,    93,    26,    27,     0,     0,     0,   337,     0,
     0,     0,   153,     0,     0,     0,     0,     0,   145,   300,
   144,     0,     0,     0,     0,   313,     0,   254,   275,   261,
   282,   262,   283,   263,   284,     0,   351,   350,   346,   303,
     0,    53,     0,     0,     0,     0,    61,     0,     0,     0,
   338,    22,    23,     0,     0,    82,     0,   324,     0,    97,
     0,    99,     0,     0,    95,     0,     0,   112,   113,     0,
     0,    96,   117,   320,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   147,     0,
     0,     0,     0,   128,   174,     0,   185,     0,   187,     0,
   189,     0,     0,     0,     0,   315,     0,     0,     0,     0,
   167,     0,     0,   102,   103,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   302,     0,    34,     0,     0,     0,
     0,     0,    36,     0,     0,     0,     0,    73,     0,     0,
    74,     0,   341,     0,     0,   329,     0,     0,     0,   105,
     0,     0,   114,     0,     0,     0,   215,   107,   108,     0,
     0,     0,   213,   216,   116,    83,   106,   115,   118,     0,
     0,     0,   312,     0,   311,     0,     0,     0,   176,     0,
     0,   177,     0,     0,   178,     0,   130,   131,   132,   133,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   335,
     0,   155,   154,    87,    90,    85,    86,    88,     0,    39,
     0,     0,     0,   314,     0,     0,     0,     0,    62,    69,
    71,     0,    77,     0,    24,     0,     0,    98,   100,     0,
     0,     0,     0,     0,   212,   211,   214,    78,    79,   128,
     0,   122,     0,     0,     0,     0,     0,     0,     0,   205,
     0,     0,   128,     0,   124,    84,     0,     0,     0,    89,
     0,    35,     0,     0,     0,    37,    52,   352,     0,   339,
     0,   219,   220,   221,   222,   111,     0,     0,     0,   310,
   175,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   168,     0,     0,   334,   156,     0,     0,
     0,     0,    75,     0,     0,   120,     0,   191,     0,     0,
   193,     0,     0,   195,     0,     0,     0,   206,     0,   164,
     0,   128,   104,     0,    43,     0,    49,     0,     0,     0,
   309,   179,     0,     0,   186,   180,     0,     0,   188,   181,
     0,     0,   190,     0,     0,     0,   170,     0,     0,     0,
     0,     0,     0,     0,   197,     0,   199,     0,   201,   207,
   209,   169,   165,     0,    40,     0,    47,     0,     0,     0,
     0,   182,     0,     0,   183,     0,     0,   184,     0,     0,
     0,    41,     0,     0,   151,     0,     0,     0,     0,     0,
     0,     0,   171,     0,     0,     0,     0,     0,   192,     0,
   194,     0,   196,     0,    42,    44,     0,    45,     0,   101,
     0,     0,     0,     0,     0,    50,   198,   200,   202,    46,
    48,     0,     0,     0
};

static const short yydefgoto[] = {  1272,
     2,    61,   663,    62,    63,   404,   976,   982,   589,   754,
  1111,  1231,   590,  1199,  1257,   591,  1233,   592,   593,   758,
   126,   220,    64,   521,   546,   309,   366,   367,    67,    68,
    69,    70,    71,   310,   727,  1171,  1214,   547,  1027,  1030,
  1033,  1036,  1183,  1187,  1191,  1223,  1226,  1229,   723,   724,
    73,    74,    75,   328,   129,   346,   171,   875,   876,   330,
   313,   197,   658,   787,   212,   213
};

static const short yypact[] = {  3190,
    75,  3268,-32768,  2425,    79,   -21,   -37,    24,   101,   -74,
    26,    43,   -62,    81,   128,   -51,   136,   140,   105,   -15,
   145,   250,   257,   273,   258,   697,   174,   178,   416,   416,
   190,    59,   216,   268,     7,   365,   342,   234,   133,   389,
   399,   443,   259,   272,   316,    15,    35,-32768,   331,-32768,
   467,   351,   385,   388,   402,-32768,   503,     9,    12,    20,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    19,   372,   510,-32768,
-32768,-32768,   129,   141,   211,   269,   279,   280,   324,   340,
   427,   462,   468,   472,   479,   501,   520,   642,   651,   657,
   675,   678,   687,   392,   395,   398,   405,-32768,   424,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2648,  2648,  2648,-32768,
-32768,  2648,  2145,    22,   523,  2648,   549,   887,-32768,   565,
   572,  2648,   578,-32768,  2648,-32768,  2648,  2480,  2648,  2648,
   452,  2648,  2480,  2648,  2648,   458,  2480,  2648,  2648,  1378,
   469,  2648,   473,   487,   509,  1803,   507,   512,   526,   530,
   545,   548,   557,   644,   416,   416,   416,  2648,  2648,   -92,
-32768,   -54,   416,   521,   575,   576,   579,  2288,   -50,   856,
  1803,    23,-32768,-32768,   602,   856,  1528,  1803,   561,   616,
   751,  2648,  2648,  2648,   625,  2648,   632,   690,  2648,  2648,
-32768,   656,   702,   705,   717,   820,-32768,   720,-32768,-32768,
-32768,   857,-32768,-32768,   868,   741,  2648,   890,   761,-32768,
-32768,   901,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,
  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,
  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,
  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,
  2648,  2648,  2648,  2648,   555,   722,   722,   722,   905,   308,
   777,   777,   777,  5325,    11,  2480,  4612,   406,   776,   926,
   788,   906,-32768,-32768,  2648,  2648,  2648,  2648,  2648,  2648,
  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,  2648,-32768,
-32768,  1068,   -97,  3858,  5346,   636,   792,  2480,-32768,-32768,
  1729,-32768,   688,  5367,  5388,  2648,  5409,   689,  5430,  5451,
  2648,   692,  5472,  5493,  1803,  1940,  1229,  1866,   934,-32768,
  2648,  5514,  2648,  2648,  2648,   935,  2648,  2648,  2648,  2611,
  2611,  2611,  2611,   823,   219,-32768,-32768,  3884,  3910,   416,
   416,   856,   856,   353,  2648,  2648,  2648,  2648,  2288,  2288,
  2648,  3338,   409,-32768,-32768,   799,  3338,    66,   952,-32768,
  2648,   685,  2480,   833,   842,   980,   981,  2648,  2648,-32768,
  5535,  5556,  5577,   897,  3936,-32768,   845,  2003,  5598,  2648,
  2648,  2648,  2648,-32768,  2648,  2751,-32768,  2817,-32768,  2648,
  4635,   230,  2648,     4,-32768,  5619,  4658,  5640,  4681,  5661,
  4704,  5682,  4727,  5703,  4750,  5724,  4773,  5745,  4796,  5766,
  4819,  5787,  4842,  5808,  4865,  5829,  4888,  3962,  3988,  5850,
  4911,  5871,  4934,  5892,  4957,  5913,  4980,  5934,  5003,  5955,
  5026,  4014,  4040,  4066,  4092,  4118,  4144,   711,   -84,   847,
   853,   854,   851,  2648,-32768,  1803,  1803,   708,   359,   510,
  2648,   990,   993,    17,   858,-32768,  2350,   582,  1223,   759,
   759,   562,   562,   562,   562,    80,    80,   777,   777,   777,
   777,-32768,    -2,  2480,  2648,   991,  2214,  2648,   777,-32768,
  2648,  2480,  2480,   907,   994,   996,  5976,  1013,   927,  1014,
  1032,  5997,   945,  1034,  1035,  1039,  2480,-32768,   718,  2077,
  2648,  6018,  1040,  1454,  6039,  6060,  2648,  2695,  2761,  6081,
   861,  6438,-32768,   910,   912,   913,   904,   416,  2648,  2648,
-32768,-32768,   908,   909,  2648,  5049,  4170,  4196,  4222,  3832,
   -45,   -39,   -10,   -42,   953,-32768,    41,   416,  2883,-32768,
-32768,  2648,-32768,  5072,-32768,   723,-32768,  2648,  1803,  1803,
  5095,  5118,  1049,  1050,  1051,   917,  2648,  2949,  2648,  2648,
-32768,  6102,  6123,  6144,  6165,  6186,-32768,-32768,  5141,   266,
-32768,  2827,-32768,   923,   924,   918,-32768,  1058,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  2648,  2648,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2648,
  2648,  2648,  2648,  2648,  2648,  2648,  1062,-32768,  2480,   722,
-32768,-32768,  2648,  5164,  1061,  1063,   929,-32768,    37,  2648,
  1065,  1066,  1156,-32768,  1071,   928,    15,  1067,-32768,  2648,
-32768,   949,   722,   -11,  4248,   416,-32768,  2480,  2893,  2452,
   777,-32768,  1729,-32768,  1031,  1803,  1803,  1076,  1803,   819,
  1803,  1803,  1077,  1036,  1803,  1803,-32768,   729,-32768,  2480,
  1196,  1081,   944,  1084,  1085,  1087,   844,  1089,  1091,  1092,
  1093,  1094,  1095,  1096,  1100,   445,  4274,  4300,-32768,-32768,
  2959,   960,   416,   416,   416,  2480,  2480,  2480,  2480,  1101,
   963,   971,   -34,-32768,   492,-32768,    41,  1303,  1104,  1069,
  6207,  1105,  1108,  1109,  1110,  1803,  1803,  1803,  1113,  4326,
-32768,  2577,   680,  1112,  1114,  1115,  1116,  1117,  1119,  1122,
-32768,  1121,-32768,   995,  2648,  2648,  1803,   984,-32768,  6228,
  5187,  6249,  5210,  6270,  5233,  6291,  5256,  5279,   992,     1,
  1000,  6312,   -65,-32768,-32768,   265,   528,   998,  1128,  1338,
-32768,-32768,-32768,    15,  2648,-32768,   733,-32768,  6438,-32768,
  1135,     6,  2648,    27,   734,-32768,  2648,   997,    29,    34,
  1803,  1137,   999,  1001,  1139,  1141,  1803,  1004,  1144,  1145,
-32768,   753,-32768,  1147,  2648,  1803,  1803,  1803,-32768,   313,
  1803,  1803,  1803,  1803,  1803,  1803,  1803,   378,  2648,  2648,
  2648,  1008,-32768,    56,   172,   185,   754,   757,   758,   767,
-32768,  1803,  2648,-32768,-32768,  2288,    32,-32768,-32768,  1009,
  1148,-32768,-32768,-32768,-32768,  1151,  1153,  1072,-32768,  2648,
  2648,  2648,-32768,  1803,  1155,  2648,  2648,  1160,-32768,   230,
-32768,  2648,  4352,  4378,   773,-32768,  2648,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1024,-32768,-32768,-32768,-32768,
  1803,   510,  2648,  1161,  1165,    17,-32768,  1164,  5302,    15,
-32768,-32768,-32768,   722,  4404,-32768,  1030,  6438,  2648,-32768,
   416,-32768,   416,  1166,-32768,  2648,  2648,-32768,-32768,  1167,
  2648,-32768,-32768,-32768,  1169,  4430,  1170,  1171,  1173,  2648,
  2648,   921,  1174,  1175,  1176,  1177,  1179,  1197,-32768,  2611,
  3025,  6333,  3328,   856,  3338,   416,  1200,   416,  1202,   416,
  1203,  1204,  1205,  1206,  1207,   303,  1070,  6354,  3086,   522,
-32768,  2648,  1803,-32768,-32768,  1803,  3356,   550,  6375,  1209,
  1213,  1487,  1593,  1666,-32768,    76,  6438,  2648,  2648,  1803,
  1075,   790,  6438,  1224,  1225,  1228,  1624,-32768,  1222,  1230,
-32768,  1088,-32768,  1231,  2648,-32768,  3282,    46,    61,-32768,
  3412,  3440,-32768,  3468,  1236,  2648,-32768,-32768,-32768,  1644,
  1776,  1259,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1903,
  1260,  1090,-32768,  2648,-32768,  1123,    41,   556,-32768,  1125,
   594,-32768,  1126,   624,-32768,  1129,-32768,-32768,-32768,-32768,
  1261,  1803,  1266,  1157,  2648,  3496,  1262,  1199,  2648,-32768,
  2648,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1284,-32768,
  2648,  4456,  4482,-32768,  1803,  2648,  1286,  1162,-32768,-32768,
-32768,    15,-32768,  1210,-32768,  4508,  1294,-32768,-32768,  1300,
  1301,  1302,  1304,  4534,-32768,-32768,-32768,-32768,-32768,   856,
  3384,-32768,   204,  2288,    41,  2288,    41,  2288,    41,-32768,
   794,  1803,-32768,  3524,-32768,-32768,  2648,  3552,  3580,-32768,
  1168,  6438,  2648,  2648,   802,  6438,-32768,-32768,  1305,-32768,
  2648,-32768,-32768,-32768,-32768,-32768,  1307,  1183,  2648,-32768,
-32768,  3608,   637,   249,  3636,   693,   290,  3664,   695,   295,
  1803,  1308,  1269,  3015,  1186,  2243,-32768,-32768,  2648,  6396,
  4560,    25,-32768,  4586,  1188,-32768,  3692,  1328,  2648,  1329,
  1330,  2648,  1331,  1332,  2648,  1333,  1215,-32768,  2648,-32768,
    41,-32768,-32768,   806,-32768,  2648,-32768,  1803,  2648,  1351,
-32768,-32768,  1214,  3720,-32768,-32768,  1219,  3748,-32768,-32768,
  1220,  3776,-32768,  1362,  2266,   333,  3081,  1363,  1226,  6417,
   807,  3804,  1232,    41,  1364,    41,  1367,    41,  1371,-32768,
-32768,-32768,-32768,    41,-32768,   722,-32768,  1233,  1373,  1379,
   367,-32768,  1238,   380,-32768,  1240,   393,-32768,  1241,   417,
   810,-32768,  1245,  1803,-32768,  1267,  1385,    41,  1408,    41,
  1409,    41,-32768,   722,  1410,   722,   811,  1411,-32768,   426,
-32768,   440,-32768,   453,-32768,-32768,   839,-32768,  1412,-32768,
  1413,  1414,  1430,   722,  1431,-32768,-32768,-32768,-32768,-32768,
-32768,  1438,  1439,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   649,-32768,-32768,-32768,-32768,   300,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -277,     2,-32768,    73,  1448,     0,  -181,  -168,-32768,-32768,
-32768,-32768,-32768,  1449,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -629,  -626,
-32768,-32768,-32768,    -1,-32768,    36,-32768, -1051,   400,   130,
   -63,  -635,   559,-32768,   -60,     3
};


#define	YYLAST		6575


static const short yytable[] = {   215,
   461,    66,   128,   661,   374,   127,   130,   583,   141,   362,
   182,   903,   207,  1115,   372,   209,   210,   456,   195,   146,
   656,   786,   216,   209,   210,   278,   369,   132,   370,   134,
  1177,   141,   906,   151,   910,   350,   351,   720,   198,   912,
   777,   483,   396,   721,   722,   398,   484,   104,   105,   106,
   107,  1078,   352,   108,   638,   104,   105,   106,   107,   639,
   146,   108,   174,   137,   170,   172,  1079,   179,   120,   121,
   138,   551,   552,   350,   351,   142,   750,   350,   351,   318,
     3,   222,   143,   322,   911,   584,   585,   586,   587,   913,
   353,   131,   137,   147,   364,   149,   845,   847,   142,   716,
   133,   175,   719,   720,   176,   717,   136,   177,   208,   721,
   722,   844,   720,   279,   280,   271,   272,   273,   721,   722,
   274,   277,   152,   662,   282,   457,  1201,   792,   778,   779,
   302,   662,   493,   304,   718,   305,   311,   314,   315,   888,
   317,   311,   319,   320,   493,   311,   323,   324,   898,   588,
   332,   183,   120,   121,   350,   351,   211,   150,   217,   196,
   218,   657,   371,   139,   214,   219,   348,   349,   135,  1178,
   533,   534,   199,   350,   351,   187,   349,   961,   188,   365,
   140,   650,  1247,   350,   351,   365,   166,   167,   350,   351,
   381,   382,   383,   153,   385,   549,   168,   388,   389,   946,
   345,   947,   347,   178,   449,   450,   451,   452,   354,   296,
   297,   298,   458,   363,  1060,   401,   299,   568,   144,  1061,
   845,   406,   407,   408,   409,   410,   411,   412,   413,   414,
   415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
   425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
   435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
   445,   446,   447,   509,   993,   145,   223,   312,   224,   209,
   210,   648,   312,   148,   311,   720,   312,   149,   225,   462,
   226,   721,   722,   467,   468,   469,   470,   471,   472,   473,
   474,   475,   476,   477,   478,   479,   480,   481,   154,   350,
   351,   104,   105,   106,   107,   155,   489,   108,   159,   556,
   491,   164,   350,   351,   497,   948,   181,   949,   156,   502,
   720,   157,   165,   158,   489,   311,   721,   722,   950,   512,
   951,   514,   515,   516,   173,   518,   519,   520,   522,   522,
   522,   522,   523,   523,   523,   523,   350,   351,   227,  1131,
   228,   365,   365,   536,   537,   538,   539,   271,   272,   540,
   180,   720,   528,   120,   121,   648,   720,   721,   722,   554,
   184,   311,   721,   722,   930,   931,   561,   562,   186,   113,
   114,   115,   116,   939,   940,   531,   532,   185,   572,   573,
   574,   575,   189,   576,  1160,   347,   192,  1093,   579,   120,
   121,   582,   190,   581,   720,   312,   229,   750,   230,   193,
   721,   722,   460,   524,   525,   526,   231,   233,   232,   234,
   664,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   510,   297,   298,  1163,  1119,   490,   720,   299,
  1166,   120,   121,   688,   721,   722,   191,   454,  1041,   218,
   202,   720,   644,   194,   219,   490,   312,   721,   722,   653,
   651,   235,   652,   236,   720,  1134,   845,  1137,   200,  1140,
   721,   722,   201,   113,   114,   115,   116,   237,  1212,   238,
   350,   351,   311,   665,   203,   644,   669,   204,   720,   670,
   671,   673,   120,   121,   721,   722,   535,   720,   891,   893,
   649,   205,   312,   721,   722,   311,   206,   845,   671,   691,
   845,   720,  1237,   845,   210,   697,   221,   721,   722,   752,
   113,   114,   115,   116,   720,  1239,   281,   707,   708,   265,
   721,   722,   266,   711,   892,   267,   350,   351,  1241,   120,
   121,  1196,   268,   166,   167,   104,   105,   106,   107,   329,
   728,   108,   548,   168,   283,   336,   731,  1051,   448,   210,
   169,   269,  1243,   706,   239,   740,   240,   742,   743,   845,
   300,  1261,   350,   351,  1221,   770,  1224,   301,  1227,   771,
   368,   751,   303,   725,  1230,  1262,   376,   377,   829,   316,
   104,   105,   106,   107,   845,   321,   108,   845,  1263,   241,
   845,   242,   791,   845,   795,   243,   331,   244,  1250,   245,
  1252,   246,  1254,   312,   760,   761,   247,   333,   248,   350,
   351,   672,   674,   845,   334,   845,   812,   845,   762,   763,
   764,   765,   766,   767,   768,   846,   312,   311,   249,   672,
   250,   772,   113,   114,   115,   116,   335,   344,   780,   350,
   351,   337,   837,   838,   839,   840,   338,   251,   789,   252,
   355,   120,   121,   339,   945,  1045,   311,   340,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   341,   350,   351,   342,   299,   862,   311,   294,
   295,   296,   297,   298,   343,  1052,     5,     6,   299,  1094,
   378,   794,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   311,   311,   311,   311,   299,   356,
   357,   350,   351,   358,   506,   209,   210,   541,    11,    12,
   542,    14,    15,   543,    17,   544,    19,  1096,    20,   160,
    22,    23,   161,    25,    26,   162,   373,   163,   834,   835,
   836,   350,   351,   873,   874,   379,   380,   104,   105,   106,
   107,    39,  1026,   108,   350,   351,   384,  1098,   312,   120,
   121,    43,    44,    45,   751,   487,   386,   218,   894,   253,
  1159,   254,   219,   899,   387,    52,    53,    54,   255,    55,
   256,   905,   545,   390,   257,   908,   258,   312,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   259,   926,   260,   261,   299,   262,   863,   312,
   350,   351,   350,   351,   263,   394,   264,   941,   942,   943,
   555,   493,   493,   494,   499,   493,  1162,   503,  1165,   391,
   956,   958,   392,   994,   959,   312,   312,   312,   312,   819,
   636,   493,   637,   647,   393,   645,   646,   395,   967,   968,
   969,   493,   397,   689,   972,   973,   493,   803,   730,   804,
   977,   975,   493,   399,   811,   983,   900,   493,   901,   907,
   400,   960,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   987,   284,   402,   986,   299,   493,   493,   924,   952,
   493,   493,   953,   954,   820,   403,   405,   997,  1128,   453,
   493,   466,   955,   299,  1001,  1002,   980,   463,   981,  1004,
    28,    29,    30,    31,  1012,    33,  1013,   465,  1010,  1011,
    37,    38,   464,  1066,  1144,  1067,   488,  1141,  1020,  1142,
   511,   517,  1021,   365,   550,   980,   998,  1152,   999,  1066,
   980,  1198,  1218,  1244,   980,  1245,  1259,   553,   732,   733,
  1046,   527,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,  1062,  1063,   557,   558,
   299,  1028,  1264,  1031,  1265,  1034,   559,   560,   566,   569,
   640,   641,   642,  1076,   643,   654,   655,   666,   659,   701,
   676,   675,   677,  1197,  1084,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   679,
   681,   680,  1091,   299,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   682,   684,
   685,   686,   299,  1104,   687,   705,   693,  1108,   702,  1109,
   703,   704,   208,   709,   710,   736,   737,   738,   739,  1112,
   755,   756,   757,   759,  1116,   769,   774,   785,   775,   776,
   781,   782,   788,   482,   790,   799,   800,   784,   802,   798,
   805,   806,   801,   807,   809,   810,   808,   814,   815,   365,
   816,   817,  1132,   818,  1135,   821,  1138,   822,   823,   824,
   825,   826,   827,   828,   833,  1146,   841,   842,   843,   849,
   852,  1150,  1151,   853,   854,   855,   859,   850,   864,  1154,
   865,   866,   867,   868,   869,   870,   871,  1157,   877,  1133,
   887,  1136,   872,  1139,   896,   856,   857,   858,   889,   895,
   902,   909,   915,   916,   918,   917,   919,   983,   921,   922,
   923,   925,   944,   962,   963,  1232,   964,  1184,   965,   971,
  1188,   783,   966,  1192,   974,   984,   988,  1195,   989,   991,
   996,  1000,  1003,  1005,  1200,  1007,  1008,  1202,  1009,  1014,
  1015,  1016,  1017,  1255,  1018,  1258,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   914,   813,  1019,  1270,   299,  1029,   920,  1032,  1035,  1037,
  1038,  1039,  1040,  1042,  1054,   927,   928,   929,  1055,  1065,
   932,   933,   934,   935,   936,   937,   938,  1068,  1072,  1074,
  1069,    76,   306,  1070,  1090,  1073,  1075,    80,    81,    82,
  1083,   957,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   970,  1087,  1089,  1100,  1106,  1092,  1095,
  1097,   307,  1102,  1099,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,  1107,  1110,
   985,  1117,   299,    28,    29,    30,    31,    32,    33,  1122,
  1118,  1103,  1120,    37,    38,  1123,  1124,  1125,   848,  1126,
  1153,  1155,  1149,  1168,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,  1156,  1169,
  1172,  1180,   299,  1182,  1185,  1186,  1189,  1190,  1193,   109,
   110,   111,   112,   897,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,  1203,   117,   308,  1204,   299,
  1194,   119,  1047,  1206,  1208,  1048,   122,  1210,  1215,  1222,
  1216,   125,  1225,  1059,   508,  1220,  1228,  1234,  1235,  1064,
    76,   306,  1238,  1236,  1240,  1242,    80,    81,    82,  1246,
  1249,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,  1248,  1251,  1253,  1256,  1260,  1266,  1267,  1268,
   307,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,  1269,  1271,  1273,  1274,   299,
   904,  1101,    28,    29,    30,    31,    32,    33,  1174,    65,
    72,     0,    37,    38,   990,     0,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,   325,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
   111,   112,  1056,     0,     0,     0,     0,     0,     0,     0,
     0,  1143,     0,     0,     0,   117,   326,     0,     0,     0,
   119,     0,     0,     0,     0,   122,     0,     0,     0,     0,
   125,     0,   327,     0,     0,     0,     0,     0,     0,     0,
    76,   306,     0,     0,     0,     0,    80,    81,    82,     0,
  1167,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,    28,    29,    30,    31,    32,    33,  1057,   694,
     0,     0,    37,    38,     0,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,     0,     0,   375,     0,  1071,
     0,     0,     0,     0,     0,     0,     0,     0,   109,   110,
   111,   112,     0,     0,     0,     0,     0,     0,     0,  1085,
     0,     0,     0,     0,     0,   117,   326,     0,     0,     0,
   119,     0,     0,     0,     0,   122,     0,     0,    76,   306,
   125,  1058,   327,     0,    80,    81,    82,     0,     0,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
     0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
    28,    29,    30,    31,    32,    33,   491,     0,     0,     0,
    37,    38,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   109,   110,   111,   112,
   299,  1086,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   117,   326,     0,     0,     0,   119,     0,
     0,     0,     0,   122,     0,    76,   306,     0,   125,     0,
   327,    80,    81,    82,     0,     0,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,     0,     0,     0,
     0,     0,     0,     0,     0,   307,     0,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   492,   297,
   298,     0,     0,     0,     0,   299,     0,    28,    29,    30,
    31,    32,    33,   491,     0,     0,     0,    37,    38,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,  1088,     0,
     0,     0,   299,   109,   110,   111,   112,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   117,   326,     0,     0,     0,   119,     0,     0,     0,     0,
   122,     0,    76,   306,     0,   125,     0,   327,    80,    81,
    82,     0,     0,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,     0,     0,     0,     0,     0,     0,
     0,     0,   307,     0,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   510,   297,   298,     0,     0,
     0,     0,   299,     0,    28,    29,    30,    31,    32,    33,
   570,     0,     0,     0,    37,    38,     0,     0,     0,     0,
     0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   109,   110,   111,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   117,   308,     0,
     0,     0,   119,     0,     0,     0,     0,   122,     0,    76,
   306,     0,   125,     0,   507,    80,    81,    82,     0,     0,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,    28,    29,    30,    31,    32,    33,    76,   270,     0,
     0,    37,    38,    80,    81,    82,     0,     0,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,     0,
     0,     0,     0,     0,     0,     0,     0,   109,   110,   111,
   112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   117,   308,     0,     0,     0,   119,
     0,     0,     0,     0,   122,     0,    76,   270,     0,   125,
     0,   690,    80,    81,    82,     0,     0,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,  1173,     0,
     0,     0,     0,     0,     0,   109,   110,   111,   112,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1211,   117,   118,     0,     0,     0,   119,     0,     0,
     0,     0,   122,     0,     0,   275,     0,   125,     0,   276,
    76,   270,     0,     0,     0,     0,    80,    81,    82,     0,
     0,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,     0,     0,   109,   110,   111,   112,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   117,   118,     0,     0,     0,   119,     0,     0,     0,
     0,   122,     0,     0,   667,     0,   125,   660,   668,     0,
     0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,     0,     0,     0,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   109,   110,
   111,   112,   299,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   359,   360,     0,     0,     0,
   119,     0,     0,     0,     0,   361,     0,    76,    77,    78,
   125,    79,   169,    80,    81,    82,     0,     0,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   797,
   104,   105,   106,   107,     0,     0,   108,     0,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,    76,   306,     0,     0,   299,     0,    80,    81,
    82,     0,     0,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,     0,     0,     0,     0,     0,     0,
     0,     0,   307,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,   110,   111,   112,   113,
   114,   115,   116,     0,    28,    29,    30,    31,    32,    33,
     0,     0,   117,   118,    37,    38,     0,   119,   120,   121,
     0,     0,   122,     0,   123,     0,   124,   125,     0,     0,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   861,     0,     0,     0,   299,     0,
   109,   110,   111,   112,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   117,   308,     0,
     0,     0,   119,    76,   270,   210,     0,   122,     0,    80,
    81,    82,   125,     0,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,     0,   104,   105,   106,   107,
    76,   270,   108,     0,     0,     0,    80,    81,    82,     0,
     0,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,     0,     0,     0,     0,     0,
     0,   109,   110,   111,   112,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   117,   118,
     0,     0,     0,   119,     0,     0,     0,     0,   122,     0,
     0,     0,     0,   125,     0,     0,     0,     0,   109,   110,
   111,   112,     5,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   117,   118,     0,     0,     0,
   119,     0,     0,     0,     0,   122,     0,     0,     0,     0,
   125,     0,     0,   541,    11,    12,   542,    14,    15,   543,
    17,   544,    19,     0,    20,     0,    22,    23,     0,    25,
    26,     0,     0,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,    39,     5,     6,
     0,   299,     0,     0,     0,     0,     0,    43,    44,    45,
   698,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    52,    53,    54,     0,    55,     0,     0,   545,   541,
    11,    12,   542,    14,    15,   543,    17,   544,    19,     0,
    20,     0,    22,    23,     0,    25,    26,     0,     0,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,    39,     5,     6,   577,   299,     0,     0,
     0,     0,     0,    43,    44,    45,   699,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    52,    53,    54,
     0,    55,     0,     0,   545,   541,    11,    12,   542,    14,
    15,   543,    17,   544,    19,     0,    20,     0,    22,    23,
     0,    25,    26,     0,     0,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,    39,
     5,     6,   578,   299,     0,     0,     0,     0,     0,    43,
    44,    45,   753,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    52,    53,    54,     0,    55,     0,     0,
   545,   541,    11,    12,   542,    14,    15,   543,    17,   544,
    19,     0,    20,     0,    22,    23,     0,    25,    26,     0,
     0,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,    39,     5,     6,   726,   299,
     0,     0,     0,     0,     0,    43,    44,    45,   796,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
    53,    54,     0,    55,     0,     0,   545,   541,    11,    12,
   542,    14,    15,   543,    17,   544,    19,     0,    20,     0,
    22,    23,     0,    25,    26,     0,     0,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,    39,     5,     6,   741,   299,     0,     0,     0,     0,
     0,    43,    44,    45,   832,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    52,    53,    54,     0,    55,
     0,     0,   545,   541,    11,    12,   542,    14,    15,   543,
    17,   544,    19,     0,    20,     0,    22,    23,     0,    25,
    26,     0,     0,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,    39,     0,     0,
  1170,   299,     0,     0,     0,     0,     0,    43,    44,    45,
  1022,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    52,    53,    54,     0,    55,     0,     0,   545,    -3,
     1,     0,     0,    -3,     0,     0,     0,     0,     0,     0,
     0,    -3,    -3,     0,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,    -3,     0,  1213,     0,     0,    -3,
    -3,  1044,    -3,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,     0,     0,    -3,    -3,    -3,    -3,    -3,    -3,    -3,
     0,    -3,    -3,    -3,    -3,    -3,    -3,     0,     0,    -3,
    -3,     4,     0,     0,     0,    -3,    -3,    -3,    -3,     5,
     6,    -3,     0,    -3,     0,    -3,    -3,    -3,    -3,     0,
    -3,    -3,    -3,     0,    -3,    -3,    -3,    -3,    -3,    -3,
     0,     0,     7,     0,     0,     0,     0,     8,     9,     0,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
     0,    20,    21,    22,    23,    24,    25,    26,     0,     0,
     0,    27,    28,    29,    30,    31,    32,    33,     0,    34,
    35,    36,    37,    38,    39,     0,     0,    40,    41,     5,
     6,     0,     0,    42,    43,    44,    45,     0,     0,    46,
     0,    47,     0,    48,    49,    50,    51,     0,    52,    53,
    54,     0,    55,    56,    57,    58,    59,    60,     0,     0,
   541,    11,    12,   542,    14,    15,   543,    17,   544,    19,
     0,    20,     0,    22,    23,     0,    25,    26,     0,     0,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,    39,     0,     0,     0,   299,     0,
     0,     0,     0,     0,    43,    44,    45,  1077,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    52,    53,
    54,     0,    55,     0,     0,   545,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,  1024,     0,  1025,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,  1049,
     0,  1050,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,  1129,     0,  1130,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,     0,     0,  1080,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,     0,     0,  1081,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,     0,     0,  1082,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,     0,
     0,  1105,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,     0,     0,  1145,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,     0,     0,  1147,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,     0,     0,  1148,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,     0,     0,  1158,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,     0,
     0,  1161,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,     0,     0,  1164,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,     0,     0,  1181,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,     0,     0,  1205,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,     0,     0,  1207,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,     0,
     0,  1209,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,     0,     0,  1219,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
   455,     0,     0,     0,     0,   529,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,   485,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,   529,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,   530,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,   567,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,   616,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,   617,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,   630,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,   631,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,   632,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,   633,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,   634,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,   635,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,   713,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,   714,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,   715,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,   793,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,   830,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,   831,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,   860,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,   978,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,   979,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,   995,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,  1006,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,  1113,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,     0,     0,     0,  1114,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,     0,     0,
     0,  1121,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,     0,     0,     0,  1127,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
     0,     0,     0,  1176,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,     0,  1179,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,   459,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,     0,     0,   580,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,   595,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,     0,
     0,   597,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,   599,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,     0,     0,   601,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
   603,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,     0,     0,   605,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,   607,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,     0,     0,   609,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,   611,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,     0,     0,   613,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,   615,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,     0,
     0,   619,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,   621,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,     0,     0,   623,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
   625,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,     0,     0,   627,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,   629,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,     0,     0,   712,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,   729,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,     0,     0,   734,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,     0,     0,   735,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,     0,
     0,   749,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,     0,     0,   773,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,     0,     0,   879,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,     0,     0,
   881,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,     0,     0,   883,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,     0,     0,   885,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,     0,     0,   886,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
     0,     0,   992,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,   455,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,   486,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,   495,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,   496,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,   498,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,   500,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,   501,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
   504,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,   505,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,   513,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,   563,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,   564,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,   565,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,   571,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,   594,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,   596,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,   598,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
   600,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,   602,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,   604,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,   606,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,   608,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,   610,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,   612,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,   614,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,   618,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,   620,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
   622,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,   624,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,   626,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,   628,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,   678,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,   683,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,   692,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,   695,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,   696,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,   700,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
   744,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,   745,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,   746,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,   747,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,   748,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,   851,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299,     0,   878,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,     0,     0,     0,     0,   299,     0,   880,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,     0,     0,     0,     0,   299,     0,   882,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,     0,     0,     0,     0,   299,     0,   884,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,     0,     0,     0,     0,   299,     0,
   890,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,     0,     0,     0,     0,   299,
     0,  1023,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,     0,     0,     0,     0,
   299,     0,  1043,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,     0,     0,     0,
     0,   299,     0,  1053,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,     0,
     0,     0,   299,     0,  1175,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     0,     0,     0,   299,     0,  1217,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     0,     0,     0,     0,   299
};

static const short yycheck[] = {    60,
   278,     2,     4,     6,   186,     4,     4,     4,    71,   178,
     4,     6,     4,  1065,   183,     4,     5,     7,     4,    71,
     4,   657,     4,     4,     5,     4,     4,    49,     6,     6,
     6,    71,     6,    49,     6,   128,   129,    72,     4,     6,
     4,   139,   211,    78,    79,   214,   144,    36,    37,    38,
    39,     6,   145,    42,   139,    36,    37,    38,    39,   144,
    71,    42,     4,   138,    29,    30,     6,    32,   134,   135,
   145,     6,     7,   128,   129,   138,   142,   128,   129,   143,
     6,    79,   145,   147,    56,    82,    83,    84,    85,    56,
   145,    13,   138,   145,   145,   138,   723,   727,   138,   145,
   138,    43,   145,    72,    46,   145,     6,    49,   100,    78,
    79,   146,    72,    92,    93,   117,   118,   119,    78,    79,
   122,   123,   138,   126,   126,   115,  1178,   139,    92,    93,
   132,   126,   144,   135,   145,   137,   138,   139,   140,   139,
   142,   143,   144,   145,   144,   147,   148,   149,   784,   146,
   152,   145,   134,   135,   128,   129,   145,    53,   140,   145,
   142,   145,   140,   138,   145,   147,   168,   169,   145,   145,
   352,   353,   138,   128,   129,    43,   178,   146,    46,   180,
   138,   459,  1234,   128,   129,   186,   128,   129,   128,   129,
   192,   193,   194,    49,   196,   364,   138,   199,   200,   144,
   165,   146,   167,   145,   265,   266,   267,   268,   173,   130,
   131,   132,   276,   178,   139,   217,   137,   386,   138,   144,
   847,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   264,   327,   900,   138,   138,   138,   140,     4,
     5,     7,   143,   138,   276,    72,   147,   138,   138,   278,
   140,    78,    79,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,    49,   128,
   129,    36,    37,    38,    39,    49,   308,    42,    51,   373,
     8,   138,   128,   129,   316,   144,    49,   146,    46,   321,
    72,    49,   145,    51,   326,   327,    78,    79,   144,   331,
   146,   333,   334,   335,   145,   337,   338,   339,   340,   341,
   342,   343,   340,   341,   342,   343,   128,   129,   138,   146,
   140,   352,   353,   355,   356,   357,   358,   359,   360,   361,
   145,    72,   144,   134,   135,     7,    72,    78,    79,   371,
     6,   373,    78,    79,    62,    63,   378,   379,   145,   115,
   116,   117,   118,     6,     7,   350,   351,    46,   390,   391,
   392,   393,     4,   395,   146,   360,   138,  1027,   400,   134,
   135,   403,     4,   402,    72,   276,   138,   142,   140,   138,
    78,    79,     7,   341,   342,   343,   138,   138,   140,   140,
   484,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   146,  1072,   308,    72,   137,
   146,   134,   135,   507,    78,    79,     4,   140,   146,   142,
   100,    72,   454,   138,   147,   326,   327,    78,    79,   461,
   459,   138,   460,   140,    72,  1095,  1093,  1097,   138,  1099,
    78,    79,     6,   115,   116,   117,   118,   138,   146,   140,
   128,   129,   484,   485,   100,   487,   488,   100,    72,   491,
   492,   493,   134,   135,    78,    79,   144,    72,   776,   777,
   142,   100,   373,    78,    79,   507,     4,  1134,   510,   511,
  1137,    72,   146,  1140,     5,   517,   145,    78,    79,   580,
   115,   116,   117,   118,    72,   146,     4,   529,   530,   138,
    78,    79,   138,   535,     7,   138,   128,   129,   146,   134,
   135,  1171,   138,   128,   129,    36,    37,    38,    39,   150,
   552,    42,   144,   138,     6,   156,   558,     8,     4,     5,
   145,   138,   146,   528,   138,   567,   140,   569,   570,  1196,
     6,   146,   128,   129,  1204,   639,  1206,     6,  1208,   640,
   181,   580,     5,   548,  1214,   146,   187,   188,   144,   138,
    36,    37,    38,    39,  1221,   138,    42,  1224,   146,   138,
  1227,   140,   663,  1230,   668,   138,   138,   140,  1238,   138,
  1240,   140,  1242,   484,   616,   617,   138,   145,   140,   128,
   129,   492,   493,  1250,   138,  1252,   690,  1254,   630,   631,
   632,   633,   634,   635,   636,   144,   507,   639,   138,   510,
   140,   643,   115,   116,   117,   118,   138,     4,   650,   128,
   129,   145,   716,   717,   718,   719,   145,   138,   660,   140,
   140,   134,   135,   138,   833,   144,   668,   138,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   138,   128,   129,   138,   137,     8,   690,   128,
   129,   130,   131,   132,   138,   146,    12,    13,   137,   144,
   140,   666,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   716,   717,   718,   719,   137,   145,
   145,   128,   129,   145,   325,     4,     5,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,   144,    54,    43,
    56,    57,    46,    59,    60,    49,   145,    51,   713,   714,
   715,   128,   129,   755,   756,   140,     6,    36,    37,    38,
    39,    77,   944,    42,   128,   129,   142,   144,   639,   134,
   135,    87,    88,    89,   773,   140,   145,   142,   777,   138,
   144,   140,   147,   785,    95,   101,   102,   103,   138,   105,
   140,   793,   108,   138,   138,   797,   140,   668,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   138,   815,   140,   138,   137,   140,   139,   690,
   128,   129,   128,   129,   138,     6,   140,   829,   830,   831,
   146,   144,   144,   146,   146,   144,   144,   146,   144,   138,
   842,   843,   138,   904,   846,   716,   717,   718,   719,     6,
   140,   144,   142,   146,   138,   456,   457,   138,   860,   861,
   862,   144,     6,   146,   866,   867,   144,    49,   146,    51,
   872,   870,   144,     6,   146,   877,   144,   144,   146,   146,
   140,   846,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   893,     6,     4,   892,   137,   144,   144,   146,   146,
   144,   144,   146,   146,    61,   145,     6,   909,  1090,     5,
   144,     6,   146,   137,   916,   917,   144,   142,   146,   921,
    65,    66,    67,    68,     4,    70,     6,   140,   930,   931,
    75,    76,     7,   144,  1103,   146,   145,   144,   940,   146,
     7,     7,   940,   944,   146,   144,   911,   146,   913,   144,
   144,   146,   146,   144,   144,   146,   146,     6,   559,   560,
   962,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   978,   979,   146,   138,
   137,   946,   144,   948,   146,   950,     7,     7,    92,   145,
   144,   139,   139,   995,   144,     6,     4,     7,   141,   139,
     7,    95,     7,  1172,  1006,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,     7,
     7,    95,  1024,   137,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,     7,    95,
     7,     7,   137,  1045,     6,   142,     7,  1049,   139,  1051,
   139,   139,   100,   146,   146,     7,     7,     7,   142,  1061,
   138,   138,   145,     6,  1066,     4,     6,   140,     6,   141,
     6,     6,     6,     6,   126,   676,   677,     7,   679,    49,
   681,   682,     7,     7,   685,   686,    51,     7,   145,  1090,
     7,     7,  1094,     7,  1096,     7,  1098,     7,     7,     7,
     7,     7,     7,     4,   145,  1107,     6,   145,   138,     6,
     6,  1113,  1114,     6,     6,     6,     4,    49,     7,  1121,
     7,     7,     7,     7,     6,     4,     6,  1129,   145,  1094,
   139,  1096,   138,  1098,     7,   736,   737,   738,   139,   142,
     6,   145,     6,   145,     6,   145,     6,  1149,   145,     6,
     6,     5,   145,   145,     7,  1216,     6,  1159,     6,     5,
  1162,     6,    91,  1165,     5,   142,     6,  1169,     4,     6,
   141,     6,     6,     5,  1176,     6,     6,  1179,     6,     6,
     6,     6,     6,  1244,     6,  1246,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   801,     6,     6,  1264,   137,     6,   807,     6,     6,     6,
     6,     6,     6,   144,     6,   816,   817,   818,     6,   145,
   821,   822,   823,   824,   825,   826,   827,     4,     7,   142,
     6,     3,     4,     6,   145,     6,     6,     9,    10,    11,
     5,   842,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,   864,     6,     6,     6,     6,   146,   145,
   145,    43,     7,   145,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    90,     6,
   891,     6,   137,    65,    66,    67,    68,    69,    70,     6,
   139,   145,    93,    75,    76,     6,     6,     6,     6,     6,
     6,     5,   145,     6,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   146,    61,
   145,   144,   137,     6,     6,     6,     6,     6,     6,   111,
   112,   113,   114,     6,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,     5,   128,   129,   145,   137,
   146,   133,   963,   145,   145,   966,   138,     6,     6,     6,
   145,   143,     6,   974,   146,   144,     6,   145,     6,   980,
     3,     4,   145,     5,   145,   145,     9,    10,    11,   145,
     6,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,   146,     6,     6,     6,     6,     6,     6,     6,
    43,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,     6,     6,     0,     0,   137,
   792,  1042,    65,    66,    67,    68,    69,    70,  1149,     2,
     2,    -1,    75,    76,   896,    -1,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,   100,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1102,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
   143,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
  1141,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    65,    66,    67,    68,    69,    70,     6,   146,
    -1,    -1,    75,    76,    -1,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   100,    -1,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,     3,     4,
   143,     6,   145,    -1,     9,    10,    11,    -1,    -1,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
    -1,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    65,    66,    67,    68,    69,    70,     8,    -1,    -1,    -1,
    75,    76,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   111,   112,   113,   114,
   137,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,    -1,
    -1,    -1,    -1,   138,    -1,     3,     4,    -1,   143,    -1,
   145,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,    -1,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    65,    66,    67,
    68,    69,    70,     8,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,     6,    -1,
    -1,    -1,   137,   111,   112,   113,   114,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   128,   129,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,
   138,    -1,     3,     4,    -1,   143,    -1,   145,     9,    10,
    11,    -1,    -1,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    65,    66,    67,    68,    69,    70,
     8,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,
    -1,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,    -1,     3,
     4,    -1,   143,    -1,   145,     9,    10,    11,    -1,    -1,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    -1,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    65,    66,    67,    68,    69,    70,     3,     4,    -1,
    -1,    75,    76,     9,    10,    11,    -1,    -1,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,
    -1,    -1,    -1,    -1,   138,    -1,     3,     4,    -1,   143,
    -1,   145,     9,    10,    11,    -1,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,     6,    -1,
    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     6,   128,   129,    -1,    -1,    -1,   133,    -1,    -1,
    -1,    -1,   138,    -1,    -1,   141,    -1,   143,    -1,   145,
     3,     4,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,   111,   112,   113,   114,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   128,   129,    -1,    -1,    -1,   133,    -1,    -1,    -1,
    -1,   138,    -1,    -1,   141,    -1,   143,     8,   145,    -1,
    -1,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   111,   112,
   113,   114,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
   133,    -1,    -1,    -1,    -1,   138,    -1,     3,     4,     5,
   143,     7,   145,     9,    10,    11,    -1,    -1,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,     8,
    36,    37,    38,    39,    -1,    -1,    42,    -1,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,     3,     4,    -1,    -1,   137,    -1,     9,    10,
    11,    -1,    -1,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   116,   117,   118,    -1,    65,    66,    67,    68,    69,    70,
    -1,    -1,   128,   129,    75,    76,    -1,   133,   134,   135,
    -1,    -1,   138,    -1,   140,    -1,   142,   143,    -1,    -1,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,     8,    -1,    -1,    -1,   137,    -1,
   111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
    -1,    -1,   133,     3,     4,     5,    -1,   138,    -1,     9,
    10,    11,   143,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,    36,    37,    38,    39,
     3,     4,    42,    -1,    -1,    -1,     9,    10,    11,    -1,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,   138,    -1,
    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
   133,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,
   143,    -1,    -1,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,    59,
    60,    -1,    -1,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    77,    12,    13,
    -1,   137,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   101,   102,   103,    -1,   105,    -1,    -1,   108,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
    54,    -1,    56,    57,    -1,    59,    60,    -1,    -1,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    77,    12,    13,   146,   137,    -1,    -1,
    -1,    -1,    -1,    87,    88,    89,   146,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,
    -1,   105,    -1,    -1,   108,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    -1,    54,    -1,    56,    57,
    -1,    59,    60,    -1,    -1,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    77,
    12,    13,   146,   137,    -1,    -1,    -1,    -1,    -1,    87,
    88,    89,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   101,   102,   103,    -1,   105,    -1,    -1,
   108,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    -1,    54,    -1,    56,    57,    -1,    59,    60,    -1,
    -1,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    77,    12,    13,   146,   137,
    -1,    -1,    -1,    -1,    -1,    87,    88,    89,   146,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
   102,   103,    -1,   105,    -1,    -1,   108,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    -1,    54,    -1,
    56,    57,    -1,    59,    60,    -1,    -1,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    77,    12,    13,   146,   137,    -1,    -1,    -1,    -1,
    -1,    87,    88,    89,   146,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   101,   102,   103,    -1,   105,
    -1,    -1,   108,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    -1,    54,    -1,    56,    57,    -1,    59,
    60,    -1,    -1,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    77,    -1,    -1,
   146,   137,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   101,   102,   103,    -1,   105,    -1,    -1,   108,     0,
     1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    12,    13,    -1,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    35,    -1,   146,    -1,    -1,    40,
    41,   146,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
    -1,    72,    73,    74,    75,    76,    77,    -1,    -1,    80,
    81,     4,    -1,    -1,    -1,    86,    87,    88,    89,    12,
    13,    92,    -1,    94,    -1,    96,    97,    98,    99,    -1,
   101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
    -1,    -1,    35,    -1,    -1,    -1,    -1,    40,    41,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
    73,    74,    75,    76,    77,    -1,    -1,    80,    81,    12,
    13,    -1,    -1,    86,    87,    88,    89,    -1,    -1,    92,
    -1,    94,    -1,    96,    97,    98,    99,    -1,   101,   102,
   103,    -1,   105,   106,   107,   108,   109,   110,    -1,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    -1,    54,    -1,    56,    57,    -1,    59,    60,    -1,    -1,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    77,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    87,    88,    89,   146,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
   103,    -1,   105,    -1,    -1,   108,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,   144,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,   141,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,   139,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,    -1,
   139,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,   137,
    -1,   139,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
   137,    -1,   139,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,   139,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
    -1,    -1,    -1,   137,    -1,   139,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
    -1,    -1,    -1,    -1,   137
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 144 "Gmsh.y"
{ yyerrok; return 1; ;
    break;}
case 5:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 6:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 7:
#line 157 "Gmsh.y"
{ return 1; ;
    break;}
case 8:
#line 158 "Gmsh.y"
{ return 1; ;
    break;}
case 9:
#line 159 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 10:
#line 160 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 161 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 162 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 163 "Gmsh.y"
{ List_Delete(yyvsp[0].l); return 1; ;
    break;}
case 14:
#line 164 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 165 "Gmsh.y"
{ return 1; ;
    break;}
case 16:
#line 166 "Gmsh.y"
{ return 1; ;
    break;}
case 17:
#line 167 "Gmsh.y"
{ return 1; ;
    break;}
case 18:
#line 168 "Gmsh.y"
{ return 1; ;
    break;}
case 19:
#line 173 "Gmsh.y"
{
      yyval.c = "w";
    ;
    break;}
case 20:
#line 177 "Gmsh.y"
{
      yyval.c = "a";
    ;
    break;}
case 21:
#line 184 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 22:
#line 189 "Gmsh.y"
{
      char tmpstring[1024];
      FixRelativePath(yyvsp[-1].c, tmpstring);
      FILE *fp = fopen(tmpstring, yyvsp[-2].c);
      if(!fp){
	yymsg(GERROR, "Unable to open file '%s'", tmpstring);
      }
      else{
	fprintf(fp, "%s\n", yyvsp[-4].c);
	fclose(fp);
      }
      Free(yyvsp[-4].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 23:
#line 204 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-4].c, yyvsp[-2].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else
	Msg(DIRECT, tmpstring);
      Free(yyvsp[-4].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 24:
#line 217 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-6].c, yyvsp[-4].l, tmpstring);
      if(i < 0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i > 0)
	yymsg(GERROR, "%d extra argument%s in Printf", i, (i>1)?"s":"");
      else{
	char tmpstring2[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring2);
	FILE *fp = fopen(tmpstring2, yyvsp[-2].c);
	if(!fp){
	  yymsg(GERROR, "Unable to open file '%s'", tmpstring2);
	}
	else{
	  fprintf(fp, "%s\n", tmpstring);
	  fclose(fp);
	}
      }
      Free(yyvsp[-6].c);
      Free(yyvsp[-1].c);
      List_Delete(yyvsp[-4].l);
    ;
    break;}
case 25:
#line 246 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View") && ViewData->finalize()){
	ViewData->setName(yyvsp[-4].c);
	ViewData->setFileName(yyname);
	ViewData->setFileIndex(yyviewindex++);
	if(ViewData->adaptive){
	  ViewData->adaptive->setGlobalResolutionLevel
	    (ViewData, PViewOptions::reference.MaxRecursionLevel);
	  ViewData->adaptive->setTolerance(PViewOptions::reference.TargetError);
	}
	new PView(ViewData);
      }
      else
	delete ViewData;
      Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 26:
#line 263 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	int index = (int)yyvsp[-2].d;
	if(index >= 0 && index < PView::list.size())
	  new PView(PView::list[index], false);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 27:
#line 272 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	int index = (int)yyvsp[-2].d;
	if(index >= 0 && index < PView::list.size())
	  new PView(PView::list[index], true);
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 28:
#line 284 "Gmsh.y"
{
      ViewData = new PViewDataList(true); 
    ;
    break;}
case 34:
#line 296 "Gmsh.y"
{ ViewCoord[ViewCoordIdx++] = yyvsp[0].d; ;
    break;}
case 35:
#line 298 "Gmsh.y"
{ ViewCoord[ViewCoordIdx++] = yyvsp[0].d; ;
    break;}
case 36:
#line 303 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 37:
#line 305 "Gmsh.y"
{ if(ViewValueList) List_Add(ViewValueList, &yyvsp[0].d); ;
    break;}
case 38:
#line 310 "Gmsh.y"
{
      if(!strcmp(yyvsp[0].c, "SP")){
	ViewValueList = ViewData->SP; ViewNumList = &ViewData->NbSP;
      }
      else if(!strcmp(yyvsp[0].c, "VP")){
	ViewValueList = ViewData->VP; ViewNumList = &ViewData->NbVP;
      }
      else if(!strcmp(yyvsp[0].c, "TP")){
	ViewValueList = ViewData->TP; ViewNumList = &ViewData->NbTP;
      }
      else if(!strcmp(yyvsp[0].c, "SL")){
	ViewValueList = ViewData->SL; ViewNumList = &ViewData->NbSL;
      }
      else if(!strcmp(yyvsp[0].c, "VL")){
	ViewValueList = ViewData->VL; ViewNumList = &ViewData->NbVL;
      }
      else if(!strcmp(yyvsp[0].c, "TL")){
	ViewValueList = ViewData->TL; ViewNumList = &ViewData->NbTL;
      }
      else if(!strcmp(yyvsp[0].c, "ST")){
	ViewValueList = ViewData->ST; ViewNumList = &ViewData->NbST;
      }
      else if(!strcmp(yyvsp[0].c, "VT")){
	ViewValueList = ViewData->VT; ViewNumList = &ViewData->NbVT;
      }
      else if(!strcmp(yyvsp[0].c, "TT")){
	ViewValueList = ViewData->TT; ViewNumList = &ViewData->NbTT;
      }
      else if(!strcmp(yyvsp[0].c, "SQ")){
	ViewValueList = ViewData->SQ; ViewNumList = &ViewData->NbSQ;
      }
      else if(!strcmp(yyvsp[0].c, "VQ")){
	ViewValueList = ViewData->VQ; ViewNumList = &ViewData->NbVQ;
      }
      else if(!strcmp(yyvsp[0].c, "TQ")){
	ViewValueList = ViewData->TQ; ViewNumList = &ViewData->NbTQ;
      }
      else if(!strcmp(yyvsp[0].c, "SS")){
	ViewValueList = ViewData->SS; ViewNumList = &ViewData->NbSS;
      }
      else if(!strcmp(yyvsp[0].c, "VS")){
	ViewValueList = ViewData->VS; ViewNumList = &ViewData->NbVS;
      }
      else if(!strcmp(yyvsp[0].c, "TS")){
	ViewValueList = ViewData->TS; ViewNumList = &ViewData->NbTS;
      }
      else if(!strcmp(yyvsp[0].c, "SH")){
	ViewValueList = ViewData->SH; ViewNumList = &ViewData->NbSH;
      }
      else if(!strcmp(yyvsp[0].c, "VH")){
	ViewValueList = ViewData->VH; ViewNumList = &ViewData->NbVH;
      }
      else if(!strcmp(yyvsp[0].c, "TH")){
	ViewValueList = ViewData->TH; ViewNumList = &ViewData->NbTH;
      }
      else if(!strcmp(yyvsp[0].c, "SI")){
	ViewValueList = ViewData->SI; ViewNumList = &ViewData->NbSI;
      }
      else if(!strcmp(yyvsp[0].c, "VI")){
	ViewValueList = ViewData->VI; ViewNumList = &ViewData->NbVI;
      }
      else if(!strcmp(yyvsp[0].c, "TI")){
	ViewValueList = ViewData->TI; ViewNumList = &ViewData->NbTI;
      }
      else if(!strcmp(yyvsp[0].c, "SY")){
	ViewValueList = ViewData->SY; ViewNumList = &ViewData->NbSY;
      }
      else if(!strcmp(yyvsp[0].c, "VY")){
	ViewValueList = ViewData->VY; ViewNumList = &ViewData->NbVY;
      }
      else if(!strcmp(yyvsp[0].c, "TY")){
	ViewValueList = ViewData->TY; ViewNumList = &ViewData->NbTY;
      }
      else if(!strcmp(yyvsp[0].c, "SL2")){
	ViewValueList = ViewData->SL2; ViewNumList = &ViewData->NbSL2;
      }
      else if(!strcmp(yyvsp[0].c, "VL2")){
	ViewValueList = ViewData->VL2; ViewNumList = &ViewData->NbVL2;
      }
      else if(!strcmp(yyvsp[0].c, "TL2")){
	ViewValueList = ViewData->TL2; ViewNumList = &ViewData->NbTL2;
      }
      else if(!strcmp(yyvsp[0].c, "ST2")){
	ViewValueList = ViewData->ST2; ViewNumList = &ViewData->NbST2;
      }
      else if(!strcmp(yyvsp[0].c, "VT2")){
	ViewValueList = ViewData->VT2; ViewNumList = &ViewData->NbVT2;
      }
      else if(!strcmp(yyvsp[0].c, "TT2")){
	ViewValueList = ViewData->TT2; ViewNumList = &ViewData->NbTT2;
      }
      else if(!strcmp(yyvsp[0].c, "SQ2")){
	ViewValueList = ViewData->SQ2; ViewNumList = &ViewData->NbSQ2;
      }
      else if(!strcmp(yyvsp[0].c, "VQ2")){
	ViewValueList = ViewData->VQ2; ViewNumList = &ViewData->NbVQ2;
      }
      else if(!strcmp(yyvsp[0].c, "TQ2")){
	ViewValueList = ViewData->TQ2; ViewNumList = &ViewData->NbTQ2;
      }
      else if(!strcmp(yyvsp[0].c, "SS2")){
	ViewValueList = ViewData->SS2; ViewNumList = &ViewData->NbSS2;
      }
      else if(!strcmp(yyvsp[0].c, "VS2")){
	ViewValueList = ViewData->VS2; ViewNumList = &ViewData->NbVS2;
      }
      else if(!strcmp(yyvsp[0].c, "TS2")){
	ViewValueList = ViewData->TS2; ViewNumList = &ViewData->NbTS2;
      }
      else if(!strcmp(yyvsp[0].c, "SH2")){
	ViewValueList = ViewData->SH2; ViewNumList = &ViewData->NbSH2;
      }
      else if(!strcmp(yyvsp[0].c, "VH2")){
	ViewValueList = ViewData->VH2; ViewNumList = &ViewData->NbVH2;
      }
      else if(!strcmp(yyvsp[0].c, "TH2")){
	ViewValueList = ViewData->TH2; ViewNumList = &ViewData->NbTH2;
      }
      else if(!strcmp(yyvsp[0].c, "SI2")){
	ViewValueList = ViewData->SI2; ViewNumList = &ViewData->NbSI2;
      }
      else if(!strcmp(yyvsp[0].c, "VI2")){
	ViewValueList = ViewData->VI2; ViewNumList = &ViewData->NbVI2;
      }
      else if(!strcmp(yyvsp[0].c, "TI2")){
	ViewValueList = ViewData->TI2; ViewNumList = &ViewData->NbTI2;
      }
      else if(!strcmp(yyvsp[0].c, "SY2")){
	ViewValueList = ViewData->SY2; ViewNumList = &ViewData->NbSY2;
      }
      else if(!strcmp(yyvsp[0].c, "VY2")){
	ViewValueList = ViewData->VY2; ViewNumList = &ViewData->NbVY2;
      }
      else if(!strcmp(yyvsp[0].c, "TY2")){
	ViewValueList = ViewData->TY2; ViewNumList = &ViewData->NbTY2;
      }
      else{
	yymsg(GERROR, "Unknown element type '%s'", yyvsp[0].c);	
	ViewValueList = 0; ViewNumList = 0;
      }
      Free(yyvsp[0].c);
      ViewCoordIdx = 0;
    ;
    break;}
case 39:
#line 454 "Gmsh.y"
{
      if(ViewValueList){
	for(int i = 0; i < 3; i++)
	  for(int j = 0; j < ViewCoordIdx / 3; j++)
	    List_Add(ViewValueList, &ViewCoord[3 * j + i]);
      }
    ;
    break;}
case 40:
#line 462 "Gmsh.y"
{
      if(ViewValueList) (*ViewNumList)++;
    ;
    break;}
case 41:
#line 469 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(ViewData->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 42:
#line 474 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(ViewData->T2C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 43:
#line 482 "Gmsh.y"
{ 
      List_Add(ViewData->T2D, &yyvsp[-5].d); 
      List_Add(ViewData->T2D, &yyvsp[-3].d);
      List_Add(ViewData->T2D, &yyvsp[-1].d); 
      double d = List_Nbr(ViewData->T2C);
      List_Add(ViewData->T2D, &d); 
    ;
    break;}
case 44:
#line 490 "Gmsh.y"
{
      ViewData->NbT2++;
    ;
    break;}
case 45:
#line 497 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(ViewData->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 46:
#line 502 "Gmsh.y"
{ 
      for(int i = 0; i < (int)strlen(yyvsp[0].c)+1; i++) List_Add(ViewData->T3C, &yyvsp[0].c[i]); 
      Free(yyvsp[0].c);
    ;
    break;}
case 47:
#line 510 "Gmsh.y"
{ 
      List_Add(ViewData->T3D, &yyvsp[-7].d); List_Add(ViewData->T3D, &yyvsp[-5].d);
      List_Add(ViewData->T3D, &yyvsp[-3].d); List_Add(ViewData->T3D, &yyvsp[-1].d); 
      double d = List_Nbr(ViewData->T3C);
      List_Add(ViewData->T3D, &d); 
    ;
    break;}
case 48:
#line 517 "Gmsh.y"
{
      ViewData->NbT3++;
    ;
    break;}
case 49:
#line 525 "Gmsh.y"
{
      ViewData->adaptive = new Adaptive_Post_View(ViewData, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 50:
#line 532 "Gmsh.y"
{
      ViewData->adaptive = new Adaptive_Post_View(ViewData, yyvsp[-11].l, yyvsp[-8].l, yyvsp[-5].l, yyvsp[-2].l);
    ;
    break;}
case 51:
#line 539 "Gmsh.y"
{
      ViewValueList = ViewData->Time;
    ;
    break;}
case 52:
#line 543 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 550 "Gmsh.y"
{ yyval.i = 0; ;
    break;}
case 54:
#line 551 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 55:
#line 552 "Gmsh.y"
{ yyval.i = 2; ;
    break;}
case 56:
#line 553 "Gmsh.y"
{ yyval.i = 3; ;
    break;}
case 57:
#line 554 "Gmsh.y"
{ yyval.i = 4; ;
    break;}
case 58:
#line 558 "Gmsh.y"
{ yyval.i = 1; ;
    break;}
case 59:
#line 559 "Gmsh.y"
{ yyval.i = -1; ;
    break;}
case 60:
#line 567 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(1, 1, sizeof(double));
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	  Free(yyvsp[-3].c);
	}
      }
      else{
	double *pd = (double*)List_Pointer_Fast(pSymbol->val, 0); 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break;
	case 1 : *pd += yyvsp[-1].d; break;
	case 2 : *pd -= yyvsp[-1].d; break;
	case 3 : *pd *= yyvsp[-1].d; break;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
	Free(yyvsp[-3].c);
      }
    ;
    break;}
case 61:
#line 598 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	if(!yyvsp[-2].i){
	  TheSymbol.val = List_Create(5, 5, sizeof(double));
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  Tree_Add(Symbol_T, &TheSymbol);
	}
	else{
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c);
	  Free(yyvsp[-6].c);
	}
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break;
	  case 1 : *pd += yyvsp[-1].d; break;
	  case 2 : *pd -= yyvsp[-1].d; break;
	  case 3 : *pd *= yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d);
	}
	Free(yyvsp[-6].c);
      }
    ;
    break;}
case 62:
#line 637 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l)){
	yymsg(GERROR, "Incompatible array dimensions in affectation");
	Free(yyvsp[-8].c);
      }
      else{
	Symbol TheSymbol;
	TheSymbol.Name = yyvsp[-8].c;
	Symbol *pSymbol;
	if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	  if(!yyvsp[-2].i){
	    TheSymbol.val = List_Create(5, 5, sizeof(double));
	    for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l, i)),
		       (double*)List_Pointer(yyvsp[-1].l, i));
	    }
	    Tree_Add(Symbol_T, &TheSymbol);
	  }
	  else{
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c);
	    Free(yyvsp[-8].c);
	  }
	}
	else{
	  for(int i = 0; i < List_Nbr(yyvsp[-5].l); i++){
	    int j = (int)(*(double*)List_Pointer(yyvsp[-5].l, i));
	    double d = *(double*)List_Pointer(yyvsp[-1].l, i);
	    double *pd;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break;
	      case 1 : *pd += d; break;
	      case 2 : *pd -= d; break;
	      case 3 : *pd *= d; break;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j);	  
	    }
	  }
	  Free(yyvsp[-8].c);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 63:
#line 691 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 64:
#line 708 "Gmsh.y"
{
      // appends to the list
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(5, 5, sizeof(double));
	List_Copy(yyvsp[-1].l, TheSymbol.val);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++)
	  List_Add(pSymbol->val, List_Pointer(yyvsp[-1].l, i));
	Free(yyvsp[-5].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 65:
#line 726 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c); 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i;
      Free(yyvsp[-2].c);
    ;
    break;}
case 66:
#line 737 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c); 
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 67:
#line 754 "Gmsh.y"
{ 
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 68:
#line 761 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $5
    ;
    break;}
case 69:
#line 775 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, yyvsp[-1].c);
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c); //FIXME: somtimes leak $8
    ;
    break;}
case 70:
#line 792 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt(0, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt(0, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt(0, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0, GMSH_GET, 0) / yyvsp[-1].d; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-5].c); Free(yyvsp[-3].c);
    ;
    break;}
case 71:
#line 818 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  double d = 0;
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) + yyvsp[-1].d; break;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) - yyvsp[-1].d; break;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) * yyvsp[-1].d; break;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d, GMSH_GET, 0) / yyvsp[-1].d;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d, GMSH_SET|GMSH_GUI, d);
	}
      }
      Free(yyvsp[-8].c); Free(yyvsp[-3].c);
    ;
    break;}
case 72:
#line 845 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-4].c); Free(yyvsp[-2].c);
    ;
    break;}
case 73:
#line 859 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-5].d, GMSH_GET, 0)+yyvsp[-1].i);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-2].c);
    ;
    break;}
case 74:
#line 876 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-7].c); Free(yyvsp[-3].c);
    ;
    break;}
case 75:
#line 890 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d, GMSH_SET|GMSH_GUI, yyvsp[-1].u);
      }
      Free(yyvsp[-10].c); Free(yyvsp[-3].c);
    ;
    break;}
case 76:
#line 907 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 77:
#line 927 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(int i = 0; i < ct->size; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 78:
#line 950 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].d); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c);
    ;
    break;}
case 79:
#line 960 "Gmsh.y"
{
      try {
	GMSH_PluginManager::instance()->setPluginOption(yyvsp[-6].c, yyvsp[-3].c, yyvsp[-1].c); 
      }
      catch (...) {
	yymsg(GERROR, "Unknown option '%s' or plugin '%s'", yyvsp[-3].c, yyvsp[-6].c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-3].c); // FIXME: sometimes leak $8
    ;
    break;}
case 80:
#line 975 "Gmsh.y"
{ 
      yyval.i = (int)yyvsp[0].d; 
    ;
    break;}
case 81:
#line 979 "Gmsh.y"
{ 
      yyval.i = GModel::current()->setPhysicalName
	(std::string(yyvsp[0].c), ++GModel::current()->getGEOInternals()->MaxPhysicalNum);
      Free(yyvsp[0].c);
    ;
    break;}
case 82:
#line 992 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindPoint(num)){
	yymsg(GERROR, "Point %d already exists", num);
      }
      else{
	double x = CTX.geom.scaling_factor * yyvsp[-1].v[0];
	double y = CTX.geom.scaling_factor * yyvsp[-1].v[1];
	double z = CTX.geom.scaling_factor * yyvsp[-1].v[2];
	double lc = CTX.geom.scaling_factor * yyvsp[-1].v[3];
	Vertex *v;
	if(!myGmshSurface)
	  v = Create_Vertex(num, x, y, z, lc, 1.0);
	else
	  v = Create_Vertex(num, x, y, myGmshSurface, lc);
	Tree_Add(GModel::current()->getGEOInternals()->Points, &v);
	AddToTemporaryBoundingBox(v->Pos.X, v->Pos.Y, v->Pos.Z);
      }
      yyval.s.Type = MSH_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 83:
#line 1014 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_POINT)){
	yymsg(GERROR, "Physical point %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_POINT, temp);
	List_Delete(temp);
	List_Add(GModel::current()->getGEOInternals()->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num = num;
    ;
    break;}
case 84:
#line 1030 "Gmsh.y"
{
      AttractorField *att = new AttractorField();
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
        double d;
        List_Read(yyvsp[-1].l, i, &d);
        Vertex *v = FindPoint((int)d); 
        if(v)
          att->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
        else{
          GVertex *gv = GModel::current()->vertexByTag((int)d);
          if(gv) 
            att->addPoint(gv->x(), gv->y(), gv->z());
        }
      }
      att->buildFastSearchStructures();
      fields.insert(att, (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 85:
#line 1051 "Gmsh.y"
{
      fields.insert(new LatLonField(fields.get((int)yyvsp[-1].d)), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 86:
#line 1058 "Gmsh.y"
{
      int index = (int)yyvsp[-1].d;
      if(index >= 0 && index < PView::list.size()) 
        fields.insert(new PostViewField(PView::list[index]), (int)yyvsp[-4].d);
      else
        yymsg(GERROR, "Field %i error, view %i does not exist", (int)yyvsp[-4].d, (int)yyvsp[-1].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 87:
#line 1069 "Gmsh.y"
{
      double pars[] = {0, CTX.lc/10, CTX.lc, CTX.lc/100, CTX.lc/20};
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4)
	  yymsg(GERROR, "Too many parameters for Thresold Field (max=5)");
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      fields.insert(new ThresholdField(fields.get((int)pars[0]), pars[1], 
				       pars[2], pars[3], pars[4]), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 88:
#line 1084 "Gmsh.y"
{
      std::list<Field*> *flist = new std::list<Field*>;
      fields.insert(new FunctionField(flist,yyvsp[-1].c), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 89:
#line 1092 "Gmsh.y"
{
      std::list<Field*> *flist = new std::list<Field*>;
      flist->resize(0);
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
	Field *pfield = fields.get((int)id);
	if(pfield) flist->push_front(pfield);
      }
      fields.insert(new FunctionField(flist,yyvsp[-2].c), (int)yyvsp[-5].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 90:
#line 1107 "Gmsh.y"
{
      fields.insert(new StructuredField(yyvsp[-1].c), (int)yyvsp[-4].d);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 91:
#line 1114 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double id;
	List_Read(yyvsp[-1].l, i, &id);
        BGMAddField(fields.get((int)id));
      }
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 92:
#line 1126 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 1, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *attractor = new AttractorField();
      fields.insert(attractor);
      Field *threshold = new ThresholdField(attractor, pars[0], pars[0] * pars[4], 
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 
	if(v)
	  attractor->addPoint(v->Pos.X, v->Pos.Y, v->Pos.Z);
	else{
	  GVertex *gv = GModel::current()->vertexByTag((int)d);
	  if(gv) 
	    attractor->addPoint(gv->x(), gv->y(), gv->z());
	}
      }
      attractor->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 93:
#line 1160 "Gmsh.y"
{
      double pars[] = { CTX.lc/10, CTX.lc/100., CTX.lc/20, 10, 3 };
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	if(i > 4) 
	  yymsg(GERROR, "Too many paramaters for attractor line (max = 5)");	  
	else
	  List_Read(yyvsp[-1].l, i, &pars[i]);
      }
      // treshold attractor: first parameter is the treshold, next two
      // are the in and out size fields, last is transition factor
      AttractorField *att = new AttractorField();
      fields.insert(att);
      Field *threshold = new ThresholdField(att, pars[0], pars[0] * pars[4],
					    pars[1], pars[2]);
      fields.insert(threshold);
      BGMAddField(threshold);
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Curve *c = FindCurve((int)d); 
	if(c){
	  att->addCurve(c, (int)pars[3]);
	}
	else{
	  GEdge *ge = GModel::current()->edgeByTag((int)d);
	  if(ge){
	    att->addGEdge(ge, (int)pars[3]);
	  }
	}
      }
      att->buildFastSearchStructures();
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 94:
#line 1196 "Gmsh.y"
{      
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	Vertex *v = FindPoint((int)d); 	 
	if(v)
	  v->lc = yyvsp[-1].d;
	else{
	  GVertex *gv = GModel::current()->vertexByTag((int)d);
	  if(gv) 
	    gv->setPrescribedMeshSizeAtVertex(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-3].l);
      // dummy values
      yyval.s.Type = 0;
      yyval.s.Num = 0;
    ;
    break;}
case 95:
#line 1218 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_LINE, 1, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 96:
#line 1236 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_SPLN, 3, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num = num;
    ;
    break;}
case 97:
#line 1254 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 98:
#line 1272 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_CIRC, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(rc);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_CIRC;
      yyval.s.Num = num;
    ;
    break;}
case 99:
#line 1298 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 100:
#line 1316 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-3].l);
	Curve *c = Create_Curve(num, MSH_SEGM_ELLI, 2, temp, NULL,
				-1, -1, 0., 1.);
	c->Circle.n[0] = yyvsp[-1].v[0];
	c->Circle.n[1] = yyvsp[-1].v[1];
	c->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	Curve *rc = CreateReversedCurve(c);
	rc->Circle.n[0] = yyvsp[-1].v[0];
	rc->Circle.n[1] = yyvsp[-1].v[1];
	rc->Circle.n[2] = yyvsp[-1].v[2];
	End_Curve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_ELLI;
      yyval.s.Num = num;
    ;
    break;}
case 101:
#line 1343 "Gmsh.y"
{
      int num = (int)yyvsp[-14].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	Curve *c = Create_Curve(num, MSH_SEGM_PARAMETRIC, 2, NULL, NULL,
				-1, -1, yyvsp[-10].d, yyvsp[-8].d);
	strcpy(c->functu, yyvsp[-6].c);
	strcpy(c->functv, yyvsp[-4].c);
	strcpy(c->functw, yyvsp[-2].c);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	CreateReversedCurve(c);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-4].c); Free(yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC;
      yyval.s.Num = num;
    ;
    break;}
case 102:
#line 1362 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_BSPLN, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num = num;
    ;
    break;}
case 103:
#line 1380 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindCurve(num)){
	yymsg(GERROR, "Curve %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	Curve *c = Create_Curve(num, MSH_SEGM_BEZIER, 2, temp, NULL,
				-1, -1, 0., 1.);
	Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	CreateReversedCurve(c);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_BEZIER;
      yyval.s.Num = num;
    ;
    break;}
case 104:
#line 1398 "Gmsh.y"
{
      int num = (int)yyvsp[-8].d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	if(FindCurve(num)){
	  yymsg(GERROR, "Curve %d already exists", num);
	}
	else{
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-5].l);
	  Curve *c = Create_Curve(num, MSH_SEGM_NURBS, (int)yyvsp[-1].d, temp, yyvsp[-3].l,
				  -1, -1, 0., 1.);
	  Tree_Add(GModel::current()->getGEOInternals()->Curves, &c);
	  CreateReversedCurve(c);
	  List_Delete(temp);
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-3].l);
      yyval.s.Type = MSH_SEGM_NURBS;
      yyval.s.Num = num;
    ;
    break;}
case 105:
#line 1424 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindEdgeLoop(num)){
	yymsg(GERROR, "Line loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	sortEdgesInLoop(num, temp);
	EdgeLoop *l = Create_EdgeLoop(num, temp);
	Tree_Add(GModel::current()->getGEOInternals()->EdgeLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SEGM_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 106:
#line 1441 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_LINE)){
	yymsg(GERROR, "Physical line %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_LINE, temp);
	List_Delete(temp);
	List_Add(GModel::current()->getGEOInternals()->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num = num;
    ;
    break;}
case 107:
#line 1460 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_PLAN);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setSurfaceGeneratrices(s, temp);
	List_Delete(temp);
	End_Surface(s);
	Tree_Add(GModel::current()->getGEOInternals()->Surfaces, &s);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num = num;
    ;
    break;}
case 108:
#line 1478 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	double d;
	List_Read(yyvsp[-1].l, 0, &d);
	EdgeLoop *el = FindEdgeLoop((int)fabs(d));
	if(!el){
	  yymsg(GERROR, "Unknown line loop %d", (int)d);
	}
	else{
	  int j = List_Nbr(el->Curves);
	  if(j == 4){
	    type = MSH_SURF_REGL;
	  }
	  else if(j == 3){
	    type = MSH_SURF_TRIC;
	  }
	  else{
	    yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		  "%d borders instead of 3 or 4", num, j);
	    type = MSH_SURF_PLAN;
	  }
	  Surface *s = Create_Surface(num, type);
	  List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	  setSurfaceGeneratrices(s, temp);
	  List_Delete(temp);
	  End_Surface(s);
	  Tree_Add(GModel::current()->getGEOInternals()->Surfaces, &s);
	}
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = type;
      yyval.s.Num = num;
    ;
    break;}
case 109:
#line 1516 "Gmsh.y"
{
      myGmshSurface = 0;
    ;
    break;}
case 110:
#line 1520 "Gmsh.y"
{
      myGmshSurface = gmshSurface :: surfaceByTag ( (int) yyvsp[-1].d);
    ;
    break;}
case 111:
#line 1524 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d, type = 0;
      myGmshSurface = gmshParametricSurface::NewParametricSurface ((int)yyvsp[-6].d,yyvsp[-3].c,yyvsp[-2].c,yyvsp[-1].c);
    ;
    break;}
case 112:
#line 1529 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "Sphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "Sphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshSphere::NewSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 113:
#line 1551 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d, type = 0;
      if (List_Nbr(yyvsp[-1].l) != 2){
	yymsg(GERROR, "PolarSphere %d has to be defined using 2 points (center + "
	      "any point) and not %d", num, List_Nbr(yyvsp[-1].l));
      }
      else{
	double p1,p2;
	List_Read(yyvsp[-1].l, 0, &p1);
	List_Read(yyvsp[-1].l, 1, &p2);
	Vertex *v1 = FindPoint((int)p1);
	Vertex *v2 = FindPoint((int)p2);
	if(!v1) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p1);
	if(!v2) yymsg(GERROR, "PolarSphere %d : unknown point %d", num, (int)p2);
	myGmshSurface = gmshPolarSphere::NewPolarSphere
	  (num, v1->Pos.X, v1->Pos.Y, v1->Pos.Z,
	   sqrt((v2->Pos.X - v1->Pos.X) * (v2->Pos.X - v1->Pos.X) +
		(v2->Pos.Y - v1->Pos.Y) * (v2->Pos.Y - v1->Pos.Y) +
		(v2->Pos.Z - v1->Pos.Z) * (v2->Pos.Z - v1->Pos.Z)));
      }      
    ;
    break;}
case 114:
#line 1573 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindSurfaceLoop(num)){
	yymsg(GERROR, "Surface loop %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	SurfaceLoop *l = Create_SurfaceLoop(num, temp);
	Tree_Add(GModel::current()->getGEOInternals()->SurfaceLoops, &l);
	List_Delete(temp);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num = num;
    ;
    break;}
case 115:
#line 1589 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_SURFACE)){
	yymsg(GERROR, "Physical surface %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_SURFACE, temp);
	List_Delete(temp);
	List_Add(GModel::current()->getGEOInternals()->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num = num;
    ;
    break;}
case 116:
#line 1609 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(GModel::current()->getGEOInternals()->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 117:
#line 1626 "Gmsh.y"
{
      int num = (int)yyvsp[-4].d;
      if(FindVolume(num)){
	yymsg(GERROR, "Volume %d already exists", num);
      }
      else{
	Volume *v = Create_Volume(num, MSH_VOLUME);
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	setVolumeSurfaces(v, temp);
	List_Delete(temp);
	Tree_Add(GModel::current()->getGEOInternals()->Volumes, &v);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 118:
#line 1643 "Gmsh.y"
{
      int num = (int)yyvsp[-4].i;
      if(FindPhysicalGroup(num, MSH_PHYSICAL_VOLUME)){
	yymsg(GERROR, "Physical volume %d already exists", num);
      }
      else{
	List_T *temp = ListOfDouble2ListOfInt(yyvsp[-1].l);
	PhysicalGroup *p = Create_PhysicalGroup(num, MSH_PHYSICAL_VOLUME, temp);
	List_Delete(temp);
	List_Add(GModel::current()->getGEOInternals()->PhysicalGroups, &p);
      }
      List_Delete(yyvsp[-1].l);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num = num;
    ;
    break;}
case 119:
#line 1664 "Gmsh.y"
{
      TranslateShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 120:
#line 1669 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 121:
#line 1674 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], yyvsp[-3].v[3], yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 122:
#line 1679 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d, yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 123:
#line 1684 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	CopyShape(TheShape.Type, TheShape.Num, &TheShape.Num);
	List_Add(yyval.l, &TheShape);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 124:
#line 1695 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(Shape));
      IntersectCurvesWithSurface(yyvsp[-5].l, (int)yyvsp[-1].d, yyval.l);
      List_Delete(yyvsp[-5].l);
    ;
    break;}
case 125:
#line 1701 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(Shape));
      BoundaryShapes(yyvsp[-1].l, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 126:
#line 1709 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 127:
#line 1710 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 128:
#line 1715 "Gmsh.y"
{
      yyval.l = List_Create(3, 3, sizeof(Shape));
    ;
    break;}
case 129:
#line 1719 "Gmsh.y"
{
      List_Add(yyval.l, &yyvsp[0].s);
    ;
    break;}
case 130:
#line 1723 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num);
	if(v){
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GVertex *gv = GModel::current()->vertexByTag(TheShape.Num);
	  if(gv){
	    TheShape.Type = MSH_POINT_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown point %d", TheShape.Num);
	}
      }
    ;
    break;}
case 131:
#line 1746 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num);
	if(c){
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GEdge *ge = GModel::current()->edgeByTag(TheShape.Num);
	  if(ge){
	    TheShape.Type = MSH_SEGM_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown curve %d", TheShape.Num);
	}
      }
    ;
    break;}
case 132:
#line 1769 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num);
	if(s){
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GFace *gf = GModel::current()->faceByTag(TheShape.Num);
	  if(gf){
	    TheShape.Type = MSH_SURF_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown surface %d", TheShape.Num);
	}
      }
    ;
    break;}
case 133:
#line 1792 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	double d;
	List_Read(yyvsp[-2].l, i, &d);
	Shape TheShape;
	TheShape.Num = (int)d;
	Volume *v = FindVolume(TheShape.Num);
	if(v){
	  TheShape.Type = v->Typ;
	  List_Add(yyval.l, &TheShape);
	}
	else{
	  GRegion *gr = GModel::current()->regionByTag(TheShape.Num);
	  if(gr){
	    TheShape.Type = MSH_VOLUME_FROM_GMODEL;
	    List_Add(yyval.l, &TheShape);
	  }
	  else
	    yymsg(WARNING, "Unknown volume %d", TheShape.Num);
	}
      }
    ;
    break;}
case 134:
#line 1820 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	DeleteShape(TheShape.Type, TheShape.Num);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 135:
#line 1829 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")){
	int index = (int)yyvsp[-2].d;
	if(index >= 0 && index < PView::list.size())
	  delete PView::list[index];
	else
	  yymsg(GERROR, "Unknown view %d", index);
      }
      else
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-4].c);
      Free(yyvsp[-4].c);
    ;
    break;}
case 136:
#line 1842 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "Meshes") || !strcmp(yyvsp[-1].c, "All")){
	GModel::current()->destroy();
	GModel::current()->getGEOInternals()->destroy();
      }
      else if(!strcmp(yyvsp[-1].c, "Physicals")){
	List_Action(GModel::current()->getGEOInternals()->PhysicalGroups, 
		    Free_PhysicalGroup);
	List_Reset(GModel::current()->getGEOInternals()->PhysicalGroups);
	GModel::current()->deletePhysicalGroups();
      }
      else
	yymsg(GERROR, "Unknown command 'Delete %s'", yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 137:
#line 1858 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Empty") && !strcmp(yyvsp[-1].c, "Views")){
	for(int i = PView::list.size() - 1; i >= 0; i--)
	  if(PView::list[i]->getData()->empty()) delete PView::list[i];
      }
      else
	yymsg(GERROR, "Unknown command 'Delete %s %s'", yyvsp[-2].c, yyvsp[-1].c);
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 138:
#line 1873 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	ColorShape(TheShape.Type, TheShape.Num, yyvsp[-3].u);
      }
      List_Delete(yyvsp[-1].l);      
    ;
    break;}
case 139:
#line 1887 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 1);
      Free(yyvsp[-1].c);
    ;
    break;}
case 140:
#line 1893 "Gmsh.y"
{
      for(int i = 0; i < 4; i++)
	VisibilityShape(yyvsp[-1].c, i, 0);
      Free(yyvsp[-1].c);
    ;
    break;}
case 141:
#line 1899 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 1);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 142:
#line 1908 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	Shape TheShape;
	List_Read(yyvsp[-1].l, i, &TheShape);
	VisibilityShape(TheShape.Type, TheShape.Num, 0);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 143:
#line 1922 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	// Warning: we *don't* close included files (to allow user
	// functions in these files). If you need to include many many
	// files and don't have functions in the files, use "Merge"
	// instead: some OSes limit the number of files a process can
	// open simultaneously. The right solution would be of course
	// to modify FunctionManager to reopen the files instead of
	// using the FILE pointer, but hey, I'm lazy...
	Msg(STATUS2, "Reading '%s'", tmpstring);
	ParseFile(tmpstring, 0, 1);
	SetBoundingBox();
	Msg(STATUS2, "Read '%s'", tmpstring);
      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	// make sure we have the latest data from GEO_Internals in GModel
	// (fixes bug where we would have no geometry in the picture if
	// the print command is in the same file as the geometry)
	GModel::current()->importGEOInternals();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	GModel::current()->importGEOInternals();
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	CreateOutputFile(tmpstring, CTX.mesh.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Merge") || !strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){
	// MergeWithBoundingBox is deprecated
	char tmpstring[1024];
	FixRelativePath(yyvsp[-1].c, tmpstring);
	MergeFile(tmpstring, 1);
      }
      else if(!strcmp(yyvsp[-2].c, "System"))
	SystemCall(yyvsp[-1].c);
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      Free(yyvsp[-2].c); Free(yyvsp[-1].c);
    ;
    break;}
case 144:
#line 1970 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Save") && !strcmp(yyvsp[-5].c, "View")){
	int index = (int)yyvsp[-3].d;
	if(index >= 0 && index < PView::list.size()){
	  char tmpstring[1024];
	  FixRelativePath(yyvsp[-1].c, tmpstring);
	  PView::list[index]->write(tmpstring, CTX.post.file_format);
	}
	else
	  yymsg(GERROR, "Unknown view %d", index);
      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-1].c);
    ;
    break;}
case 145:
#line 1986 "Gmsh.y"
{
      if(!strcmp(yyvsp[-6].c, "Background") && !strcmp(yyvsp[-5].c, "Mesh")  && !strcmp(yyvsp[-4].c, "View")){
	int index = (int)yyvsp[-2].d;
	if(index >= 0 && index < PView::list.size()){
	  Field *field = new PostViewField(PView::list[index]);
	  fields.insert(field);
	  BGMAddField(field);
	}
	else
	  yymsg(GERROR, "Unknown view %d", index);
      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-6].c);
      Free(yyvsp[-6].c); Free(yyvsp[-5].c); Free(yyvsp[-4].c);
    ;
    break;}
case 146:
#line 2002 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){
	SleepInSeconds(yyvsp[-1].d);
      }
      else if(!strcmp(yyvsp[-2].c, "Remesh")){
	Msg(GERROR, "Surface ReMeshing must be reinterfaced");
	//	ReMesh();
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else if(!strcmp(yyvsp[-2].c, "Status")){
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");
      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
      Free(yyvsp[-2].c);
    ;
    break;}
case 147:
#line 2021 "Gmsh.y"
{
       try {
	 GMSH_PluginManager::instance()->action(yyvsp[-4].c, yyvsp[-1].c, 0);
       }
       catch(...) {
	 yymsg(GERROR, "Unknown action '%s' or plugin '%s'", yyvsp[-1].c, yyvsp[-4].c);
       }
       Free(yyvsp[-4].c); Free(yyvsp[-1].c);
     ;
    break;}
case 148:
#line 2031 "Gmsh.y"
{
      if(!strcmp(yyvsp[-1].c, "ElementsFromAllViews"))
	PView::combine(false, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsFromVisibleViews"))
	PView::combine(false, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "ElementsByViewName"))
	PView::combine(false, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromAllViews"))
	PView::combine(true, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsFromVisibleViews"))
	PView::combine(true, 0, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeStepsByViewName"))
	PView::combine(true, 2, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "Views"))
	PView::combine(false, 1, CTX.post.combine_remove_orig);
      else if(!strcmp(yyvsp[-1].c, "TimeSteps"))
	PView::combine(true, 2, CTX.post.combine_remove_orig);
      else
	yymsg(GERROR, "Unknown 'Combine' command");
      Free(yyvsp[-1].c);
    ;
    break;}
case 149:
#line 2053 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 150:
#line 2057 "Gmsh.y"
{
      CTX.forced_bbox = 0;
      SetBoundingBox();
    ;
    break;}
case 151:
#line 2062 "Gmsh.y"
{
      CTX.forced_bbox = 1;
      SetBoundingBox(yyvsp[-12].d, yyvsp[-10].d, yyvsp[-8].d, yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 152:
#line 2067 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      Draw();
#endif
    ;
    break;}
case 153:
#line 2079 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 154:
#line 2094 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = NULL;
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 155:
#line 2110 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c;
      Symbol TheSymbol;      
      TheSymbol.Name = yyvsp[-6].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if(yyvsp[-3].d > yyvsp[-1].d) skip_until("For", "EndFor");
    ;
    break;}
case 156:
#line 2135 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c;
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-8].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))){
	TheSymbol.val = List_Create(1, 1, sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	Tree_Add(Symbol_T, &TheSymbol);
      }
      else
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      fgetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
      if(ImbricatedLoop > MAX_RECUR_LOOPS-1){
	yymsg(GERROR, "Reached maximum number of imbricated loops");
	ImbricatedLoop = MAX_RECUR_LOOPS-1;
      }
      if((yyvsp[-1].d > 0. && yyvsp[-5].d > yyvsp[-3].d) || (yyvsp[-1].d < 0. && yyvsp[-5].d < yyvsp[-3].d))
	skip_until("For", "EndFor");
    ;
    break;}
case 157:
#line 2161 "Gmsh.y"
{
      if(ImbricatedLoop <= 0){
	yymsg(GERROR, "Invalid For/EndFor loop");
	ImbricatedLoop = 0;
      }
      else{
	double x0 = LoopControlVariablesTab[ImbricatedLoop-1][0];
	double x1 = LoopControlVariablesTab[ImbricatedLoop-1][1];
	double step = LoopControlVariablesTab[ImbricatedLoop-1][2];
	int do_next = (step > 0.) ? (x0+step <= x1) : (x0+step >= x1);
	if(do_next){
	  LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	    LoopControlVariablesTab[ImbricatedLoop-1][2];
	  if(LoopControlVariablesNameTab[ImbricatedLoop-1]){
	    Symbol TheSymbol;
	    TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	    Symbol *pSymbol;
	    if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol)))
	      yymsg(GERROR, "Unknown loop variable");
	    else
	      *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
		LoopControlVariablesTab[ImbricatedLoop-1][2];
	  }
	  fsetpos(yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	  yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
	}
	else
	  ImbricatedLoop--;
      }
    ;
    break;}
case 158:
#line 2192 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c, yyin, yyname, yylineno))
	yymsg(GERROR, "Redefinition of function %s", yyvsp[0].c);
      skip_until(NULL, "Return");
      //FIXME: wee leak $2
    ;
    break;}
case 159:
#line 2199 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin, yyname, yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 160:
#line 2204 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c, &yyin, yyname, yylineno))
	yymsg(GERROR, "Unknown function %s", yyvsp[-1].c);
      //FIXME: wee leak $2
    ;
    break;}
case 161:
#line 2210 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 162:
#line 2214 "Gmsh.y"
{
    ;
    break;}
case 163:
#line 2223 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-1].l, 
		    yyvsp[-3].v[0], yyvsp[-3].v[1], yyvsp[-3].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 164:
#line 2231 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-1].l, 
		    0., 0., 0., yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 165:
#line 2239 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-1].l, 
		    yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].d,
		    NULL, yyval.l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 166:
#line 2247 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 167:
#line 2251 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE, yyvsp[-3].l, 
		    yyvsp[-5].v[0], yyvsp[-5].v[1], yyvsp[-5].v[2], 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 168:
#line 2259 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 169:
#line 2263 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(ROTATE, yyvsp[-3].l, 
		    0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 170:
#line 2271 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 171:
#line 2275 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(TRANSLATE_ROTATE, yyvsp[-3].l, 
		    yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 172:
#line 2283 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 173:
#line 2287 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 174:
#line 2294 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 175:
#line 2298 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      extr.mesh.ViewIndex = (int)yyvsp[-6].d;
      ExtrudeShapes(BOUNDARY_LAYER, yyvsp[-3].l, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
		    &extr, yyval.l);
      extr.mesh.ViewIndex = -1;
      Free(yyvsp[-8].c);
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 176:
#line 2310 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 177:
#line 2317 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 178:
#line 2324 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-4].d, 
		   yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   NULL, yyval.l);
    ;
    break;}
case 179:
#line 2331 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 180:
#line 2338 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 181:
#line 2345 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   0., 0., 0., yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 182:
#line 2352 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 183:
#line 2359 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 184:
#line 2366 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-10].d, 
		   yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], yyvsp[-4].v[0], yyvsp[-4].v[1], yyvsp[-4].v[2], yyvsp[-2].d,
		   NULL, yyval.l);
    ;
    break;}
case 185:
#line 2373 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 186:
#line 2377 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_POINT, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 187:
#line 2384 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 188:
#line 2388 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SEGM_LINE, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 189:
#line 2395 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 190:
#line 2399 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE, MSH_SURF_PLAN, (int)yyvsp[-8].d, 
		   yyvsp[-6].v[0], yyvsp[-6].v[1], yyvsp[-6].v[2], 0., 0., 0., 0., 0., 0., 0.,
		   &extr, yyval.l);
    ;
    break;}
case 191:
#line 2406 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 192:
#line 2410 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_POINT, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 193:
#line 2417 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 194:
#line 2421 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SEGM_LINE, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 195:
#line 2428 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 196:
#line 2432 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(ROTATE, MSH_SURF_PLAN, (int)yyvsp[-12].d, 
		   0., 0., 0., yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 197:
#line 2439 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 198:
#line 2443 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_POINT, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 199:
#line 2450 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 200:
#line 2454 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SEGM_LINE, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 201:
#line 2461 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = extr.mesh.Recombine = false;
    ;
    break;}
case 202:
#line 2465 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(Shape));
      ExtrudeShape(TRANSLATE_ROTATE, MSH_SURF_PLAN, (int)yyvsp[-14].d, 
		   yyvsp[-12].v[0], yyvsp[-12].v[1], yyvsp[-12].v[2], yyvsp[-10].v[0], yyvsp[-10].v[1], yyvsp[-10].v[2], yyvsp[-8].v[0], yyvsp[-8].v[1], yyvsp[-8].v[2], yyvsp[-6].d,
		   &extr, yyval.l);
    ;
    break;}
case 203:
#line 2476 "Gmsh.y"
{
    ;
    break;}
case 204:
#line 2479 "Gmsh.y"
{
    ;
    break;}
case 205:
#line 2485 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = 1;
      extr.mesh.NbElmLayer.clear();
      extr.mesh.hLayer.clear();
      extr.mesh.NbElmLayer.push_back((int)fabs(yyvsp[-2].d));
      extr.mesh.hLayer.push_back(1.);
    ;
    break;}
case 206:
#line 2494 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-4].l); i++){
	  List_Read(yyvsp[-4].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else
	yymsg(GERROR, "Wrong layer definition {%d, %d}", List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 207:
#line 2514 "Gmsh.y"
{
      yymsg(GERROR, "Explicit region numbers in layers are deprecated");
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer.clear();
	extr.mesh.hLayer.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	  List_Read(yyvsp[-6].l, i, &d);
	  extr.mesh.NbElmLayer.push_back((d > 0) ? (int)d : 1);
	  List_Read(yyvsp[-2].l, i, &d);
	  extr.mesh.hLayer.push_back(d);
	}
      }
      else
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", List_Nbr(yyvsp[-6].l), 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 208:
#line 2537 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 209:
#line 2541 "Gmsh.y"
{
      int num = (int)yyvsp[-6].d;
      if(FindSurface(num)){
	yymsg(GERROR, "Surface %d already exists", num);
      }
      else{
	Surface *s = Create_Surface(num, MSH_SURF_DISCRETE);
	Tree_Add(GModel::current()->getGEOInternals()->Surfaces, &s);
	extr.mesh.Holes[num].first = yyvsp[-1].d;
	extr.mesh.Holes[num].second.clear();
	for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	  double d;
	  List_Read(yyvsp[-3].l, i, &d);
	  extr.mesh.Holes[num].second.push_back((int)d);
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 210:
#line 2565 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 211:
#line 2583 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 212:
#line 2601 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-6].l); i++){
	double d;
	List_Read(yyvsp[-6].l, i, &d);
	int j = (int)fabs(d);
        Curve *c = FindCurve(j);
	if(!c)
	  yymsg(WARNING, "Unknown curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 213:
#line 2619 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	s->Recombine_Dir = -1;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-4].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 2648 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-5].d);
      if(!s)
	yymsg(WARNING, "Unknown surface %d", (int)yyvsp[-5].d);
      else{
	s->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-2].l);
	if(k != 3 && k != 4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , (int)yyvsp[-5].d, k);
	}
	else{
	  List_Reset(s->TrsfPoints);
	  if (!strcmp(yyvsp[-1].c, "Right"))
	    s->Recombine_Dir = 1;
	  else if (!strcmp(yyvsp[-1].c, "Left"))
	    s->Recombine_Dir = -1;
	  else
	    s->Recombine_Dir = 0;
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-2].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *v = FindPoint(j);
	    if(!v)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(s->TrsfPoints, &v);
	  }
	}
      }
      List_Delete(yyvsp[-2].l);
      Free(yyvsp[-1].c);
    ;
    break;}
case 215:
#line 2683 "Gmsh.y"
{
      yymsg(WARNING, "Elliptic Surface is deprecated: use Transfinite instead (with smoothing)");
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 216:
#line 2688 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d);
      if(!v)
	yymsg(WARNING, "Unknown volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	int k = List_Nbr(yyvsp[-1].l);
	if(k != 6 && k != 8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , (int)yyvsp[-4].d, k);
	else{
	  List_Reset(v->TrsfPoints);
	  for(int i = 0; i < k; i++){
	    double d;
	    List_Read(yyvsp[-1].l, i, &d);
	    int j = (int)fabs(d);
	    Vertex *vert = FindPoint(j);
	    if(!vert)
	      yymsg(WARNING, "Unknown point %d", j);
	    else
	      List_Add(v->TrsfPoints, &vert);
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 217:
#line 2715 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-3].l); i++){
	double d;
	List_Read(yyvsp[-3].l, i, &d);
	int j = (int)d;
	Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 218:
#line 2729 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[-1].l); i++){
	double d;
	List_Read(yyvsp[-1].l, i, &d);
	int j = (int)d;
        Surface *s = FindSurface(j);
	if(s){
	  s->Recombine = 1;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 219:
#line 2748 "Gmsh.y"
{ 
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedPoints(s, yyvsp[-7].l);
    ;
    break;}
case 220:
#line 2754 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-2].d);
      if(s)
	setSurfaceEmbeddedCurves(s, yyvsp[-7].l);
    ;
    break;}
case 221:
#line 2760 "Gmsh.y"
{
    ;
    break;}
case 222:
#line 2763 "Gmsh.y"
{
    ;
    break;}
case 223:
#line 2772 "Gmsh.y"
{ 
      ReplaceAllDuplicates();
    ;
    break;}
case 224:
#line 2781 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 225:
#line 2782 "Gmsh.y"
{ yyval.d = yyvsp[-1].d;           ;
    break;}
case 226:
#line 2783 "Gmsh.y"
{ yyval.d = -yyvsp[0].d;          ;
    break;}
case 227:
#line 2784 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 228:
#line 2785 "Gmsh.y"
{ yyval.d = !yyvsp[0].d;          ;
    break;}
case 229:
#line 2786 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d;      ;
    break;}
case 230:
#line 2787 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d;      ;
    break;}
case 231:
#line 2788 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d;      ;
    break;}
case 232:
#line 2790 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d;     
    ;
    break;}
case 233:
#line 2796 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d;  ;
    break;}
case 234:
#line 2797 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d);  ;
    break;}
case 235:
#line 2798 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d;      ;
    break;}
case 236:
#line 2799 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d;      ;
    break;}
case 237:
#line 2800 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d;     ;
    break;}
case 238:
#line 2801 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d;     ;
    break;}
case 239:
#line 2802 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d;     ;
    break;}
case 240:
#line 2803 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d;     ;
    break;}
case 241:
#line 2804 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d;     ;
    break;}
case 242:
#line 2805 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d;     ;
    break;}
case 243:
#line 2806 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d;  ;
    break;}
case 244:
#line 2807 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 245:
#line 2808 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 246:
#line 2809 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 247:
#line 2810 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 248:
#line 2811 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 249:
#line 2812 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 250:
#line 2813 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 251:
#line 2814 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 252:
#line 2815 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 253:
#line 2816 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 254:
#line 2817 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 255:
#line 2818 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 256:
#line 2819 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 257:
#line 2820 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 258:
#line 2821 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 259:
#line 2822 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 260:
#line 2823 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 261:
#line 2824 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 262:
#line 2825 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 263:
#line 2826 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 264:
#line 2827 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 265:
#line 2829 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 266:
#line 2830 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 267:
#line 2831 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 268:
#line 2832 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 269:
#line 2833 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 270:
#line 2834 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 271:
#line 2835 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 272:
#line 2836 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 273:
#line 2837 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 274:
#line 2838 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 275:
#line 2839 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d, yyvsp[-1].d);;
    break;}
case 276:
#line 2840 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 277:
#line 2841 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 278:
#line 2842 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 279:
#line 2843 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 280:
#line 2844 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 281:
#line 2845 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 282:
#line 2846 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 283:
#line 2847 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d, yyvsp[-1].d); ;
    break;}
case 284:
#line 2848 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 285:
#line 2849 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 286:
#line 2858 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 287:
#line 2859 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 288:
#line 2860 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 289:
#line 2861 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 290:
#line 2862 "Gmsh.y"
{ yyval.d = Get_GmshMajorVersion(); ;
    break;}
case 291:
#line 2863 "Gmsh.y"
{ yyval.d = Get_GmshMinorVersion(); ;
    break;}
case 292:
#line 2864 "Gmsh.y"
{ yyval.d = Get_GmshPatchVersion(); ;
    break;}
case 293:
#line 2869 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[0].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[0].c);
    ;
    break;}
case 294:
#line 2885 "Gmsh.y"
{
      char tmpstring[1024];
      sprintf(tmpstring, "%s_%d", yyvsp[-4].c, (int)yyvsp[-1].d) ;
      Symbol TheSymbol;
      TheSymbol.Name = tmpstring;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", tmpstring);
	yyval.d = 0.;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0);
      Free(yyvsp[-4].c);
    ;
    break;}
case 295:
#line 2900 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-3].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-3].c);
    ;
    break;}
case 296:
#line 2920 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else
	yyval.d = List_Nbr(pSymbol->val);
      Free(yyvsp[-2].c);
    ;
    break;}
case 297:
#line 2933 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-1].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c);
	yyval.d = 0.;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i);
      Free(yyvsp[-1].c);
    ;
    break;}
case 298:
#line 2946 "Gmsh.y"
{
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-4].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c);
	yyval.d = 0.;
      }
      else{
	double *pd;
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i);
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d);
	  yyval.d = 0.;
	}
      }
      Free(yyvsp[-4].c);
    ;
    break;}
case 299:
#line 2969 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-2].c); Free(yyvsp[0].c);
    ;
    break;}
case 300:
#line 2987 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
      Free(yyvsp[-5].c); Free(yyvsp[0].c);
    ;
    break;}
case 301:
#line 3005 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-3].c); Free(yyvsp[-1].c);
    ;
    break;}
case 302:
#line 3023 "Gmsh.y"
{
      double (*pNumOpt)(int num, int action, double value);
      StringXNumber *pNumCat;
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0.;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0.;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
      Free(yyvsp[-6].c); Free(yyvsp[-1].c);
    ;
    break;}
case 303:
#line 3041 "Gmsh.y"
{ 
      yyval.d = GetValue(yyvsp[-3].c, yyvsp[-1].d);
      Free(yyvsp[-3].c);
    ;
    break;}
case 304:
#line 3049 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double));
    ;
    break;}
case 305:
#line 3053 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = -yyvsp[0].v[i];
    ;
    break;}
case 306:
#line 3057 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 307:
#line 3061 "Gmsh.y"
{ 
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i];
    ;
    break;}
case 308:
#line 3065 "Gmsh.y"
{
      for(int i = 0; i < 5; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i];
    ;
    break;}
case 309:
#line 3072 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-9].d;  yyval.v[1] = yyvsp[-7].d;  yyval.v[2] = yyvsp[-5].d;  yyval.v[3] = yyvsp[-3].d; yyval.v[4] = yyvsp[-1].d;
    ;
    break;}
case 310:
#line 3076 "Gmsh.y"
{ 
      yyval.v[0] = yyvsp[-7].d;  yyval.v[1] = yyvsp[-5].d;  yyval.v[2] = yyvsp[-3].d;  yyval.v[3] = yyvsp[-1].d; yyval.v[4] = 1.0;
    ;
    break;}
case 311:
#line 3080 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 312:
#line 3084 "Gmsh.y"
{
      yyval.v[0] = yyvsp[-5].d;  yyval.v[1] = yyvsp[-3].d;  yyval.v[2] = yyvsp[-1].d;  yyval.v[3] = 0.0; yyval.v[4] = 1.0;
    ;
    break;}
case 313:
#line 3091 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(List_T*));
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 314:
#line 3096 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l));
    ;
    break;}
case 315:
#line 3104 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 316:
#line 3109 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 317:
#line 3113 "Gmsh.y"
{
      // creates an empty list
      yyval.l = List_Create(2, 1, sizeof(double));
    ;
    break;}
case 318:
#line 3118 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 319:
#line 3122 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 320:
#line 3130 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-4].d;
      }
    ;
    break;}
case 321:
#line 3141 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 322:
#line 3149 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
      for(int i = 0; i < List_Nbr(yyval.l); i++){
	double *pd = (double*)List_Pointer(yyval.l, i);
	(*pd) *= yyvsp[-2].d;
      }
    ;
    break;}
case 323:
#line 3157 "Gmsh.y"
{ 
      yyval.l = List_Create(2, 1, sizeof(double)); 
      for(double d = yyvsp[-2].d; (yyvsp[-2].d < yyvsp[0].d) ? (d <= yyvsp[0].d) : (d >= yyvsp[0].d); (yyvsp[-2].d < yyvsp[0].d) ? (d += 1.) : (d -= 1.)) 
	List_Add(yyval.l, &d);
    ;
    break;}
case 324:
#line 3163 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double)); 
      if(!yyvsp[0].d || (yyvsp[-4].d < yyvsp[-2].d && yyvsp[0].d < 0) || (yyvsp[-4].d > yyvsp[-2].d && yyvsp[0].d > 0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d);
	List_Add(yyval.l, &(yyvsp[-4].d));
      }
      else
	for(double d = yyvsp[-4].d; (yyvsp[0].d > 0) ? (d <= yyvsp[-2].d) : (d >= yyvsp[-2].d); d += yyvsp[0].d)
	  List_Add(yyval.l, &d);
   ;
    break;}
case 325:
#line 3174 "Gmsh.y"
{
      // Returns the coordinates of a point and fills a list with it.
      // This allows to ensure e.g. that relative point positions are
      // always conserved
      Vertex *v = FindPoint((int)yyvsp[-1].d);
      yyval.l = List_Create(3, 1, sizeof(double));      
      if(!v) {
	yymsg(GERROR, "Unknown point '%d'", (int)yyvsp[-1].d);
	double d = 0.0;
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
	List_Add(yyval.l, &d);
      }
      else{
	List_Add(yyval.l, &v->Pos.X);
	List_Add(yyval.l, &v->Pos.Y);
	List_Add(yyval.l, &v->Pos.Z);
      }
    ;
    break;}
case 326:
#line 3194 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 327:
#line 3204 "Gmsh.y"
{
      yyval.l = List_Create(List_Nbr(yyvsp[0].l), 1, sizeof(double));
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	Shape *s = (Shape*) List_Pointer(yyvsp[0].l, i);
	double d = s->Num;
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 328:
#line 3214 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-2].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(pSymbol->val); i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i));
      }
      Free(yyvsp[-2].c);
    ;
    break;}
case 329:
#line 3231 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      Symbol TheSymbol;
      TheSymbol.Name = yyvsp[-5].c;
      Symbol *pSymbol;
      if(!(pSymbol = (Symbol*)Tree_PQuery(Symbol_T, &TheSymbol))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c);
	double d = 0.0;
	List_Add(yyval.l, &d);
      }
      else{
	for(int i = 0; i < List_Nbr(yyvsp[-2].l); i++){
	  int j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  double *pd;
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j);	  
	}
      }
      Free(yyvsp[-5].c);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 330:
#line 3258 "Gmsh.y"
{
      yyval.l = List_Create(2, 1, sizeof(double));
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 331:
#line 3263 "Gmsh.y"
{
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 332:
#line 3267 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d));
    ;
    break;}
case 333:
#line 3271 "Gmsh.y"
{
      for(int i = 0; i < List_Nbr(yyvsp[0].l); i++){
	double d;
	List_Read(yyvsp[0].l, i, &d);
	List_Add(yyval.l, &d);
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 334:
#line 3284 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 335:
#line 3288 "Gmsh.y"
{
      yyval.u = CTX.PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 336:
#line 3300 "Gmsh.y"
{
      int flag;
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
      Free(yyvsp[0].c);
    ;
    break;}
case 337:
#line 3307 "Gmsh.y"
{
      unsigned int (*pColOpt)(int num, int action, unsigned int value);
      StringXColor *pColCat;
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0;
	}
	else
	  yyval.u = pColOpt(0, GMSH_GET, 0);
      }
      Free(yyvsp[-4].c); Free(yyvsp[0].c);
    ;
    break;}
case 338:
#line 3328 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 339:
#line 3332 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(int i = 0; i < ct->size; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
      Free(yyvsp[-5].c);
    ;
    break;}
case 340:
#line 3347 "Gmsh.y"
{
      yyval.l = List_Create(256, 10, sizeof(unsigned int));
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 341:
#line 3352 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u));
    ;
    break;}
case 342:
#line 3359 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 343:
#line 3363 "Gmsh.y"
{
      Msg(WARNING, "Named string expressions not implemented yet");
    ;
    break;}
case 344:
#line 3370 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 345:
#line 3374 "Gmsh.y"
{
      yyval.c = (char *)Malloc(32*sizeof(char));
      time_t now;
      time(&now);
      strcpy(yyval.c, ctime(&now));
      yyval.c[strlen(yyval.c) - 1] = '\0';
    ;
    break;}
case 346:
#line 3382 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char));
      strcpy(yyval.c, yyvsp[-3].c);
      strcat(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 347:
#line 3390 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c, yyvsp[-1].c, i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i <= 0) strcpy(yyval.c, yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 348:
#line 3404 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char));
      int i;
      for(i = strlen(yyvsp[-1].c)-1; i >= 0; i--){
	if(yyvsp[-1].c[i] == '/' || yyvsp[-1].c[i] == '\\')
	  break;
      }
      if(i <= 0)
	strcpy(yyval.c, yyvsp[-1].c);
      else
	strcpy(yyval.c, &yyvsp[-1].c[i+1]);
      Free(yyvsp[-1].c);
    ;
    break;}
case 349:
#line 3418 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 350:
#line 3422 "Gmsh.y"
{
      char tmpstring[1024];
      int i = PrintListOfDouble(yyvsp[-3].c, yyvsp[-1].l, tmpstring);
      if(i < 0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i > 0){
	yymsg(GERROR, "%d extra argument%s in Sprintf", i, (i>1)?"s":"");
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 351:
#line 3441 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt(0, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 352:
#line 3463 "Gmsh.y"
{ 
      char* (*pStrOpt)(int num, int action, char *value);
      StringXString *pStrCat;
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
	yyval.c = (char*)Malloc(sizeof(char));
	yyval.c[0] = '\0';
      }
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat))){
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.c = (char*)Malloc(sizeof(char));
	  yyval.c[0] = '\0';
	}
	else{
	  char *str = pStrOpt((int)yyvsp[-4].d, GMSH_GET, NULL);
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3486 "Gmsh.y"


void DeleteSymbol(void *a, void *b){
  Symbol *s = (Symbol*)a;
  Free(s->Name);
  List_Delete(s->val);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name, ((Symbol*)b)->Name));
}

void InitSymbols(void){
  if(Symbol_T){
    Tree_Action(Symbol_T, DeleteSymbol);
    Tree_Delete(Symbol_T);
  }
  Symbol_T = Tree_Create(sizeof(Symbol), CompareSymbols);
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int j, k;
  char tmp1[256], tmp2[256];

  j = 0;
  buffer[j] = '\0';

  while(j < (int)strlen(format) && format[j] != '%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(int i = 0; i < List_Nbr(list); i++){
    k = j;
    j++;
    if(j < (int)strlen(format)){
      if(format[j] == '%'){
	strcat(buffer, "%");
	j++;
      }
      while(j < (int)strlen(format) && format[j] != '%') j++;
      if(k != j){
	strncpy(tmp1, &(format[k]), j-k);
	tmp1[j-k] = '\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list, i)); 
	strcat(buffer, tmp2);
      }
    }
    else
      return List_Nbr(list)-i;
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)", yyname, yylineno-1, s, yytext);
  yyerrorstate++;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate++;
}
