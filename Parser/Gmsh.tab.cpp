
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tRand	273
#define	tAtan	274
#define	tAtan2	275
#define	tSinh	276
#define	tCosh	277
#define	tTanh	278
#define	tFabs	279
#define	tFloor	280
#define	tCeil	281
#define	tFmod	282
#define	tModulo	283
#define	tHypot	284
#define	tPrintf	285
#define	tSprintf	286
#define	tDraw	287
#define	tPoint	288
#define	tCircle	289
#define	tEllipsis	290
#define	tLine	291
#define	tSurface	292
#define	tSpline	293
#define	tVolume	294
#define	tCharacteristic	295
#define	tLength	296
#define	tParametric	297
#define	tElliptic	298
#define	tPlane	299
#define	tRuled	300
#define	tTransfinite	301
#define	tComplex	302
#define	tPhysical	303
#define	tUsing	304
#define	tBump	305
#define	tProgression	306
#define	tRotate	307
#define	tTranslate	308
#define	tSymmetry	309
#define	tDilate	310
#define	tExtrude	311
#define	tDuplicata	312
#define	tLoop	313
#define	tRecombine	314
#define	tDelete	315
#define	tCoherence	316
#define	tIntersect	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarTetrahedron	320
#define	tVectorTetrahedron	321
#define	tTensorTetrahedron	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tColorTable	339
#define	tFor	340
#define	tIn	341
#define	tEndFor	342
#define	tIf	343
#define	tEndIf	344
#define	tExit	345
#define	tReturn	346
#define	tCall	347
#define	tFunction	348
#define	tMesh	349
#define	tB_SPLINE_SURFACE_WITH_KNOTS	350
#define	tB_SPLINE_CURVE_WITH_KNOTS	351
#define	tCARTESIAN_POINT	352
#define	tTRUE	353
#define	tFALSE	354
#define	tUNSPECIFIED	355
#define	tU	356
#define	tV	357
#define	tEDGE_CURVE	358
#define	tVERTEX_POINT	359
#define	tORIENTED_EDGE	360
#define	tPLANE	361
#define	tFACE_OUTER_BOUND	362
#define	tEDGE_LOOP	363
#define	tADVANCED_FACE	364
#define	tVECTOR	365
#define	tDIRECTION	366
#define	tAXIS2_PLACEMENT_3D	367
#define	tISO	368
#define	tENDISO	369
#define	tENDSEC	370
#define	tDATA	371
#define	tHEADER	372
#define	tFILE_DESCRIPTION	373
#define	tFILE_SCHEMA	374
#define	tFILE_NAME	375
#define	tMANIFOLD_SOLID_BREP	376
#define	tCLOSED_SHELL	377
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	378
#define	tFACE_BOUND	379
#define	tCYLINDRICAL_SURFACE	380
#define	tCONICAL_SURFACE	381
#define	tCIRCLE	382
#define	tTRIMMED_CURVE	383
#define	tGEOMETRIC_SET	384
#define	tCOMPOSITE_CURVE_SEGMENT	385
#define	tCONTINUOUS	386
#define	tCOMPOSITE_CURVE	387
#define	tTOROIDAL_SURFACE	388
#define	tPRODUCT_DEFINITION	389
#define	tPRODUCT_DEFINITION_SHAPE	390
#define	tSHAPE_DEFINITION_REPRESENTATION	391
#define	tELLIPSE	392
#define	tTrimmed	393
#define	tSolid	394
#define	tEndSolid	395
#define	tVertex	396
#define	tFacet	397
#define	tNormal	398
#define	tOuter	399
#define	tLoopSTL	400
#define	tEndLoop	401
#define	tEndFacet	402
#define	tAFFECTPLUS	403
#define	tAFFECTMINUS	404
#define	tAFFECTTIMES	405
#define	tAFFECTDIVIDE	406
#define	tOR	407
#define	tAND	408
#define	tEQUAL	409
#define	tNOTEQUAL	410
#define	tAPPROXEQUAL	411
#define	tLESSOREQUAL	412
#define	tGREATEROREQUAL	413
#define	tCROSSPRODUCT	414
#define	tPLUSPLUS	415
#define	tMINUSMINUS	416
#define	UNARYPREC	417

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.78 2001-03-22 16:09:31 geuzaine Exp $

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"

#ifdef __DECCXX // bug in bison
#include <alloca.h>
#endif

int     Force_ViewNumber = 0 ;
List_T *Symbol_L;

extern Context_T  CTX;
extern Mesh      *THEM;
extern Post_View *ActualView;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][NAME_STR_L];
static char           tmpstring[NAME_STR_L];
static char           tmpstring2[NAME_STR_L], tmpstring3[NAME_STR_L];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static List_T         *ListOfListOfDouble_L, *ListOfColor_L=NULL;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);

char *strsave(char *ptr);
void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
void  skip_until (char *skip, char *until);

#line 68 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1503
#define	YYFLAG		-32768
#define	YYNTBASE	182

#define YYTRANSLATE(x) ((unsigned)(x) <= 417 ? yytranslate[x] : 263)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   169,     2,     2,     2,   167,     2,     2,   174,
   175,   165,   163,   179,   164,   178,   166,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   159,
     2,   161,   153,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   176,     2,   177,   173,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   180,     2,   181,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   154,   155,   156,   157,
   158,   160,   162,   168,   170,   171,   172
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     9,    11,    33,    35,    36,    39,
    41,    43,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   520,   526,   534,   541,   550,   551,
   554,   557,   560,   563,   566,   569,   572,   575,   578,   581,
   584,   587,   589,   593,   594,   608,   610,   614,   615,   629,
   631,   635,   636,   650,   652,   656,   657,   677,   679,   683,
   684,   704,   706,   710,   711,   731,   733,   737,   738,   764,
   766,   770,   771,   797,   799,   803,   804,   830,   832,   836,
   837,   869,   871,   875,   876,   908,   910,   914,   915,   947,
   949,   951,   953,   955,   957,   959,   961,   966,   974,   981,
   985,   992,   999,  1009,  1016,  1026,  1032,  1041,  1050,  1062,
  1069,  1079,  1087,  1096,  1109,  1116,  1122,  1130,  1138,  1151,
  1159,  1169,  1187,  1195,  1204,  1213,  1221,  1233,  1239,  1248,
  1261,  1270,  1293,  1314,  1323,  1332,  1338,  1347,  1355,  1364,
  1370,  1382,  1388,  1398,  1400,  1402,  1404,  1405,  1408,  1413,
  1418,  1425,  1429,  1433,  1437,  1440,  1443,  1450,  1459,  1468,
  1479,  1481,  1484,  1486,  1490,  1495,  1497,  1506,  1519,  1528,
  1541,  1550,  1563,  1575,  1591,  1593,  1596,  1606,  1609,  1616,
  1626,  1636,  1645,  1654,  1663,  1670,  1675,  1678,  1681,  1683,
  1686,  1688,  1690,  1692,  1694,  1696,  1698,  1702,  1705,  1708,
  1711,  1715,  1719,  1723,  1727,  1731,  1735,  1739,  1743,  1747,
  1751,  1755,  1759,  1763,  1767,  1773,  1778,  1783,  1788,  1793,
  1798,  1803,  1808,  1813,  1818,  1823,  1830,  1835,  1840,  1845,
  1850,  1855,  1860,  1867,  1874,  1881,  1886,  1888,  1890,  1892,
  1897,  1900,  1906,  1910,  1917,  1922,  1930,  1934,  1940,  1942,
  1945,  1948,  1952,  1956,  1968,  1978,  1986,  1994,  1995,  1999,
  2001,  2005,  2006,  2010,  2014,  2016,  2020,  2021,  2023,  2027,
  2034,  2038,  2040,  2042,  2046,  2053,  2057,  2061,  2067,  2076,
  2086,  2094,  2100,  2102,  2108,  2112,  2119,  2121,  2125,  2127,
  2132
};

static const short yyrhs[] = {   184,
     0,   183,     0,   189,     0,     1,     6,     0,   140,     0,
   143,   144,   246,   246,   246,   145,   146,   142,   246,   246,
   246,   142,   246,   246,   246,   142,   246,   246,   246,   147,
   148,     0,   141,     0,     0,   184,   185,     0,   186,     0,
   188,     0,   187,     0,   114,     6,     0,   115,     6,     0,
   117,     6,     0,   116,     6,     0,   118,     6,     0,   119,
   174,   253,   179,     5,   175,     6,     0,   120,   174,   253,
   175,     6,     0,   121,   174,     5,   179,     5,   179,   253,
   179,   253,   179,     5,   179,     5,   179,     5,   175,     6,
     0,     3,     7,    98,   174,     5,   179,   251,   175,     6,
     0,     3,     7,    97,   174,     5,   179,   248,   179,   257,
   179,   247,   179,   247,   179,   247,   179,   257,   179,   257,
   179,   247,   175,     6,     0,     3,     7,    96,   174,     5,
   179,   248,   179,   248,   179,   255,   179,   247,   179,   247,
   179,   247,   179,   247,   179,   257,   179,   257,   179,   257,
   179,   257,   179,   247,   175,     6,     0,     3,     7,   104,
   174,     5,   179,     3,   179,     3,   179,     3,   179,   247,
   175,     6,     0,     3,     7,   108,   174,     5,   179,     3,
   179,   247,   175,     6,     0,     3,     7,   125,   174,     5,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   106,
   174,     5,   179,   165,   179,   165,   179,   248,   179,   247,
   175,     6,     0,     3,     7,   109,   174,     5,   179,   257,
   175,     6,     0,     3,     7,   110,   174,     5,   179,   257,
   179,     3,   179,   247,   175,     6,     0,     3,     7,   105,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   111,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   113,   174,     5,   179,     3,   179,     3,   179,     3,
   175,     6,     0,     3,     7,   112,   174,     5,   179,   251,
   175,     6,     0,     3,     7,   107,   174,     5,   179,     3,
   175,     6,     0,     3,     7,    37,   174,     5,   179,     3,
   179,     3,   175,     6,     0,     3,     7,   123,   174,     5,
   179,   257,   175,     6,     0,     3,     7,   124,   174,     5,
   179,   257,   179,     3,   175,     6,     0,     3,     7,   122,
   174,     5,   179,     3,   175,     6,     0,     3,     7,   126,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   127,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   134,   174,     5,   179,     3,
   179,   248,   179,   248,   175,     6,     0,     3,     7,   128,
   174,     5,   179,     3,   179,   248,   175,     6,     0,     3,
     7,   138,   174,     5,   179,     3,   179,   248,   179,   248,
   175,     6,     0,     3,     7,   129,   174,     5,   179,     3,
   179,   257,   179,   257,   179,   247,   179,   247,   175,     6,
     0,     3,     7,   130,   174,     5,   179,   257,   175,     6,
     0,     3,     7,   131,   174,   132,   179,   247,   179,     3,
   175,     6,     0,     3,     7,   133,   174,     5,   179,   257,
   179,   247,   175,     6,     0,     3,     7,   135,   174,     5,
   179,     5,   179,     3,   179,     3,   175,     6,     0,     3,
     7,   136,   174,     5,   179,     5,   179,     3,   175,     6,
     0,     3,     7,   137,   174,     3,   179,     3,   175,     6,
     0,     0,   189,   190,     0,   192,     0,   191,     0,   232,
     0,   233,     0,   234,     0,   237,     0,   238,     0,   241,
     0,   244,     0,   245,     0,   240,     0,   239,     0,    31,
   174,     5,   175,     6,     0,    31,   174,     5,   179,   258,
   175,     6,     0,     4,     5,   180,   193,   181,     6,     0,
     4,     5,     4,   251,   180,   193,   181,     6,     0,     0,
   193,   195,     0,   193,   198,     0,   193,   201,     0,   193,
   204,     0,   193,   207,     0,   193,   210,     0,   193,   213,
     0,   193,   216,     0,   193,   219,     0,   193,   222,     0,
   193,   225,     0,   193,   228,     0,   248,     0,   194,   179,
   248,     0,     0,    75,   174,   248,   179,   248,   179,   248,
   175,   196,   180,   194,   181,     6,     0,   248,     0,   197,
   179,   248,     0,     0,    76,   174,   248,   179,   248,   179,
   248,   175,   199,   180,   197,   181,     6,     0,   248,     0,
   200,   179,   248,     0,     0,    77,   174,   248,   179,   248,
   179,   248,   175,   202,   180,   200,   181,     6,     0,   248,
     0,   203,   179,   248,     0,     0,    72,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   205,   180,   203,   181,     6,     0,   248,     0,   206,   179,
   248,     0,     0,    73,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   208,   180,   206,
   181,     6,     0,   248,     0,   209,   179,   248,     0,     0,
    74,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   175,   211,   180,   209,   181,     6,     0,
   248,     0,   212,   179,   248,     0,     0,    69,   174,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   175,   214,   180,   212,
   181,     6,     0,   248,     0,   215,   179,   248,     0,     0,
    70,   174,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   217,   180,   215,   181,     6,     0,   248,     0,   218,   179,
   248,     0,     0,    71,   174,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   175,   220,   180,   218,   181,     6,     0,   248,
     0,   221,   179,   248,     0,     0,    66,   174,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   175,   223,   180,   221,   181,     6,     0,   248,     0,
   224,   179,   248,     0,     0,    67,   174,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   179,   248,   179,   248,   179,   248,   179,   248,   179,   248,
   175,   226,   180,   224,   181,     6,     0,   248,     0,   227,
   179,   248,     0,     0,    68,   174,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   179,   248,   179,   248,   175,
   229,   180,   227,   181,     6,     0,     7,     0,   149,     0,
   150,     0,   151,     0,   152,     0,   170,     0,   171,     0,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   230,
   248,     6,     0,     4,   176,   177,     7,   257,     6,     0,
     4,   231,     6,     0,     4,   176,   248,   177,   231,     6,
     0,     4,   178,     4,     7,     5,     6,     0,     4,   176,
   248,   177,   178,     4,     7,     5,     6,     0,     4,   178,
     4,   230,   248,     6,     0,     4,   176,   248,   177,   178,
     4,   230,   248,     6,     0,     4,   178,     4,   231,     6,
     0,     4,   176,   248,   177,   178,     4,   231,     6,     0,
     4,   178,    84,   178,     4,     7,   259,     6,     0,     4,
   176,   248,   177,   178,    84,   178,     4,     7,   259,     6,
     0,     4,   178,    85,     7,   260,     6,     0,     4,   176,
   248,   177,   178,    85,     7,   260,     6,     0,    34,   174,
   248,   175,     7,   251,     6,     0,    49,    34,   174,   248,
   175,     7,   257,     6,     0,    64,    34,   257,     7,   180,
   248,   179,   248,   179,   248,   181,     6,     0,    41,    42,
   257,     7,   248,     6,     0,    34,   180,   248,   181,     6,
     0,    37,   174,   248,   175,     7,   257,     6,     0,    39,
   174,   248,   175,     7,   257,     6,     0,    64,    37,   257,
     7,   180,   248,   179,   248,   179,   248,   181,     6,     0,
    35,   174,   248,   175,     7,   257,     6,     0,    35,   174,
   248,   175,     7,   257,    45,   251,     6,     0,    43,   174,
   248,   175,     7,   180,   248,   179,   248,   179,     5,   179,
     5,   179,     5,   181,     6,     0,    36,   174,   248,   175,
     7,   257,     6,     0,    49,    37,   174,   248,   175,     7,
   257,     6,     0,    37,    59,   174,   248,   175,     7,   257,
     6,     0,    78,   174,   248,   175,     7,   257,     6,     0,
    79,   174,   248,   175,     7,   257,    83,   257,    80,   248,
     6,     0,    37,   180,   248,   181,     6,     0,    45,    38,
   174,   248,   175,     7,   257,     6,     0,   139,    38,   174,
   248,   175,     7,   180,   248,   179,   257,   181,     6,     0,
    46,    38,   174,   248,   175,     7,   257,     6,     0,    79,
    38,    81,    82,   174,   248,   175,     7,   255,    83,   180,
   257,   179,   257,   181,    80,   180,   248,   179,   248,   181,
     6,     0,    79,    38,   174,   248,   175,     7,   255,    83,
   180,   257,   179,   257,   181,    80,   180,   248,   179,   248,
   181,     6,     0,    49,    38,   174,   248,   175,     7,   257,
     6,     0,    38,    59,   174,   248,   175,     7,   257,     6,
     0,    38,   180,   248,   181,     6,     0,    48,    40,   174,
   248,   175,     7,   257,     6,     0,    40,   174,   248,   175,
     7,   257,     6,     0,    49,    40,   174,   248,   175,     7,
   257,     6,     0,    54,   251,   180,   235,   181,     0,    53,
   180,   251,   179,   251,   179,   248,   181,   180,   235,   181,
     0,    55,   251,   180,   235,   181,     0,    56,   180,   251,
   179,   248,   181,   180,   235,   181,     0,   237,     0,   236,
     0,   234,     0,     0,   236,   233,     0,    58,   180,   236,
   181,     0,    61,   180,   236,   181,     0,    61,     4,   176,
   248,   177,     6,     0,    61,    95,     6,     0,     4,   262,
     6,     0,     4,   248,     6,     0,    91,     6,     0,    33,
     6,     0,    86,   174,   248,     8,   248,   175,     0,    86,
   174,   248,     8,   248,     8,   248,   175,     0,    86,     4,
    87,   180,   248,     8,   248,   181,     0,    86,     4,    87,
   180,   248,     8,   248,     8,   248,   181,     0,    88,     0,
    94,     4,     0,    92,     0,    93,     4,     6,     0,    89,
   174,   248,   175,     0,    90,     0,    57,    34,   180,   248,
   179,   251,   181,     6,     0,    57,    34,   180,   248,   179,
   251,   179,   251,   179,   248,   181,     6,     0,    57,    37,
   180,   248,   179,   251,   181,     6,     0,    57,    37,   180,
   248,   179,   251,   179,   251,   179,   248,   181,     6,     0,
    57,    38,   180,   248,   179,   251,   181,     6,     0,    57,
    38,   180,   248,   179,   251,   179,   251,   179,   248,   181,
     6,     0,    57,    38,   180,   248,   179,   251,   181,   180,
   242,   181,     6,     0,    57,    38,   180,   248,   179,   251,
   179,   251,   179,   248,   181,   180,   242,   181,     6,     0,
   243,     0,   242,   243,     0,    65,   180,   257,   179,   257,
   179,   257,   181,     6,     0,    60,     6,     0,    47,    37,
   257,     7,   248,     6,     0,    47,    37,   257,     7,   248,
    50,    52,   248,     6,     0,    47,    37,   257,     7,   248,
    50,    51,   248,     6,     0,    47,    38,   180,   248,   181,
     7,   257,     6,     0,    44,    38,   180,   248,   181,     7,
   257,     6,     0,    47,    40,   180,   248,   181,     7,   257,
     6,     0,    60,    38,   257,     7,   248,     6,     0,    60,
    38,   257,     6,     0,    62,     6,     0,    63,     6,     0,
     3,     0,   164,     3,     0,    99,     0,   100,     0,   101,
     0,   102,     0,   103,     0,   249,     0,   174,   248,   175,
     0,   164,   248,     0,   163,   248,     0,   169,   248,     0,
   248,   164,   248,     0,   248,   163,   248,     0,   248,   165,
   248,     0,   248,   166,   248,     0,   248,   167,   248,     0,
   248,   173,   248,     0,   248,   159,   248,     0,   248,   161,
   248,     0,   248,   160,   248,     0,   248,   162,   248,     0,
   248,   156,   248,     0,   248,   157,   248,     0,   248,   155,
   248,     0,   248,   154,   248,     0,   248,   153,   248,     8,
   248,     0,    10,   174,   248,   175,     0,    11,   174,   248,
   175,     0,    12,   174,   248,   175,     0,    13,   174,   248,
   175,     0,    14,   174,   248,   175,     0,    15,   174,   248,
   175,     0,    16,   174,   248,   175,     0,    17,   174,   248,
   175,     0,    18,   174,   248,   175,     0,    20,   174,   248,
   175,     0,    21,   174,   248,   179,   248,   175,     0,    22,
   174,   248,   175,     0,    23,   174,   248,   175,     0,    24,
   174,   248,   175,     0,    25,   174,   248,   175,     0,    26,
   174,   248,   175,     0,    27,   174,   248,   175,     0,    28,
   174,   248,   179,   248,   175,     0,    29,   174,   248,   179,
   248,   175,     0,    30,   174,   248,   179,   248,   175,     0,
    19,   174,   248,   175,     0,     3,     0,     9,     0,     4,
     0,     4,   176,   248,   177,     0,     4,   231,     0,     4,
   176,   248,   177,   231,     0,     4,   178,     4,     0,     4,
   176,   248,   177,   178,     4,     0,     4,   178,     4,   231,
     0,     4,   176,   248,   177,   178,     4,   231,     0,   248,
     8,   248,     0,   248,     8,   248,     8,   248,     0,   252,
     0,   164,   251,     0,   163,   251,     0,   251,   164,   251,
     0,   251,   163,   251,     0,   180,   248,   179,   248,   179,
   248,   179,   248,   179,   248,   181,     0,   180,   248,   179,
   248,   179,   248,   179,   248,   181,     0,   180,   248,   179,
   248,   179,   248,   181,     0,   174,   248,   179,   248,   179,
   248,   175,     0,     0,   174,   254,   175,     0,     5,     0,
   254,   179,     5,     0,     0,   180,   256,   181,     0,   174,
   256,   175,     0,   257,     0,   256,   179,   257,     0,     0,
   248,     0,     4,   176,   177,     0,     4,   176,   180,   258,
   181,   177,     0,   180,   258,   181,     0,   248,     0,   250,
     0,     4,   176,   177,     0,     4,   176,   180,   258,   181,
   177,     0,   258,   179,   248,     0,   258,   179,   250,     0,
   258,   179,     4,   176,   177,     0,   258,   179,     4,   176,
   180,   258,   181,   177,     0,   180,   248,   179,   248,   179,
   248,   179,   248,   181,     0,   180,   248,   179,   248,   179,
   248,   181,     0,   180,     4,   179,   248,   181,     0,     4,
     0,     4,   178,    84,   178,     4,     0,   180,   261,   181,
     0,     4,   176,   248,   177,   178,    85,     0,   259,     0,
   261,   179,   259,     0,     5,     0,    32,   174,     5,   175,
     0,    32,   174,     5,   179,   258,   175,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   149,   151,   152,   153,   160,   168,   182,   194,   196,   199,
   201,   202,   205,   211,   216,   217,   218,   221,   225,   228,
   234,   239,   245,   253,   258,   262,   268,   273,   277,   282,
   286,   289,   294,   298,   302,   306,   311,   315,   318,   322,
   326,   330,   334,   338,   342,   345,   349,   352,   356,   359,
   368,   372,   378,   380,   381,   382,   383,   384,   385,   386,
   387,   388,   389,   390,   393,   398,   426,   432,   439,   444,
   445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
   455,   458,   461,   465,   471,   477,   480,   484,   490,   496,
   499,   503,   509,   515,   518,   522,   530,   536,   539,   543,
   551,   557,   560,   564,   572,   578,   581,   585,   597,   603,
   606,   610,   622,   628,   631,   635,   647,   653,   656,   660,
   673,   679,   682,   686,   699,   705,   708,   712,   725,   737,
   739,   740,   741,   742,   744,   746,   748,   779,   813,   827,
   836,   851,   863,   877,   900,   924,   936,   950,   962,   976,
   991,  1012,  1023,  1029,  1048,  1059,  1067,  1073,  1079,  1098,
  1104,  1120,  1127,  1133,  1139,  1145,  1151,  1170,  1182,  1188,
  1207,  1228,  1236,  1242,  1248,  1254,  1266,  1272,  1278,  1290,
  1296,  1301,  1306,  1313,  1315,  1316,  1319,  1324,  1335,  1353,
  1361,  1366,  1377,  1432,  1452,  1456,  1476,  1492,  1506,  1531,
  1556,  1582,  1588,  1593,  1598,  1602,  1612,  1618,  1624,  1628,
  1632,  1636,  1640,  1645,  1652,  1656,  1661,  1679,  1689,  1707,
  1724,  1741,  1762,  1782,  1802,  1819,  1843,  1848,  1859,  1861,
  1864,  1866,  1867,  1868,  1869,  1872,  1874,  1875,  1876,  1877,
  1878,  1879,  1880,  1881,  1888,  1889,  1890,  1891,  1892,  1893,
  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,
  1914,  1915,  1916,  1917,  1918,  1919,  1924,  1929,  1933,  1944,
  1961,  1972,  1991,  2007,  2023,  2039,  2056,  2063,  2076,  2081,
  2085,  2089,  2093,  2098,  2103,  2107,  2111,  2117,  2121,  2126,
  2130,  2135,  2139,  2143,  2149,  2155,  2161,  2165,  2170,  2184,
  2203,  2210,  2216,  2220,  2232,  2249,  2253,  2260,  2271,  2289,
  2294,  2298,  2303,  2308,  2326,  2331,  2348,  2357,  2363,  2368,
  2372
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tRand","tAtan","tAtan2","tSinh","tCosh",
"tTanh","tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPrintf","tSprintf",
"tDraw","tPoint","tCircle","tEllipsis","tLine","tSurface","tSpline","tVolume",
"tCharacteristic","tLength","tParametric","tElliptic","tPlane","tRuled","tTransfinite",
"tComplex","tPhysical","tUsing","tBump","tProgression","tRotate","tTranslate",
"tSymmetry","tDilate","tExtrude","tDuplicata","tLoop","tRecombine","tDelete",
"tCoherence","tIntersect","tAttractor","tLayers","tScalarTetrahedron","tVectorTetrahedron",
"tTensorTetrahedron","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tColorTable","tFor","tIn",
"tEndFor","tIf","tEndIf","tExit","tReturn","tCall","tFunction","tMesh","tB_SPLINE_SURFACE_WITH_KNOTS",
"tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT","tTRUE","tFALSE","tUNSPECIFIED",
"tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE","tPLANE","tFACE_OUTER_BOUND",
"tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION","tAXIS2_PLACEMENT_3D","tISO",
"tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION","tFILE_SCHEMA","tFILE_NAME",
"tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","tAFFECTPLUS","tAFFECTMINUS","tAFFECTTIMES",
"tAFFECTDIVIDE","'?'","tOR","tAND","tEQUAL","tNOTEQUAL","tAPPROXEQUAL","'<'",
"tLESSOREQUAL","'>'","tGREATEROREQUAL","'+'","'-'","'*'","'/'","'%'","tCROSSPRODUCT",
"'!'","tPLUSPLUS","tMINUSMINUS","UNARYPREC","'^'","'('","')'","'['","']'","'.'",
"','","'{'","'}'","All","STLFormatItem","StepFormatItems","StepFormatItem","StepSpecial",
"StepHeaderItem","StepDataItem","GeomFormatList","GeomFormat","Printf","View",
"Views","ScalarPointValues","ScalarPoint","@1","VectorPointValues","VectorPoint",
"@2","TensorPointValues","TensorPoint","@3","ScalarLineValues","ScalarLine",
"@4","VectorLineValues","VectorLine","@5","TensorLineValues","TensorLine","@6",
"ScalarTriangleValues","ScalarTriangle","@7","VectorTriangleValues","VectorTriangle",
"@8","TensorTriangleValues","TensorTriangle","@9","ScalarTetrahedronValues",
"ScalarTetrahedron","@10","VectorTetrahedronValues","VectorTetrahedron","@11",
"TensorTetrahedronValues","TensorTetrahedron","@12","NumericAffectation","NumericIncrement",
"Affectation","Shape","Transform","MultipleShape","ListOfShapes","Duplicata",
"Delete","Command","Loop","Extrude","ExtrudeParameters","ExtrudeParameter","Transfini",
"Coherence","SignedDouble","BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr",
"VExpr_Single","ListOfStrings","RecursiveListOfStrings","ListOfListOfDouble",
"RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble","ColorExpr",
"ListOfColor","RecursiveListOfColor","StringExpr", NULL
};
#endif

static const short yyr1[] = {     0,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   185,   185,   186,   186,   186,   186,   186,   187,   187,   187,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   189,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   191,   191,   192,   192,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   196,   195,   197,   197,   199,   198,   200,
   200,   202,   201,   203,   203,   205,   204,   206,   206,   208,
   207,   209,   209,   211,   210,   212,   212,   214,   213,   215,
   215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
   222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
   230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   232,
   232,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   234,
   234,   234,   234,   235,   235,   235,   236,   236,   237,   238,
   238,   238,   239,   239,   239,   239,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   241,   241,   241,   241,
   241,   241,   241,   241,   242,   242,   243,   243,   244,   244,
   244,   244,   244,   244,   244,   244,   245,   245,   246,   246,
   247,   247,   247,   247,   247,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   249,   249,   249,   249,
   249,   249,   249,   249,   249,   249,   250,   250,   251,   251,
   251,   251,   251,   252,   252,   252,   252,   253,   253,   254,
   254,   255,   255,   255,   256,   256,   257,   257,   257,   257,
   257,   258,   258,   258,   258,   258,   258,   258,   258,   259,
   259,   259,   259,   259,   260,   260,   261,   261,   262,   262,
   262
};

static const short yyr2[] = {     0,
     1,     1,     1,     2,     1,    21,     1,     0,     2,     1,
     1,     1,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     5,     7,     6,     8,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     0,    13,     1,     3,     0,    13,     1,
     3,     0,    13,     1,     3,     0,    19,     1,     3,     0,
    19,     1,     3,     0,    19,     1,     3,     0,    25,     1,
     3,     0,    25,     1,     3,     0,    25,     1,     3,     0,
    31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
     1,     1,     1,     1,     1,     1,     4,     7,     6,     3,
     6,     6,     9,     6,     9,     5,     8,     8,    11,     6,
     9,     7,     8,    12,     6,     5,     7,     7,    12,     7,
     9,    17,     7,     8,     8,     7,    11,     5,     8,    12,
     8,    22,    20,     8,     8,     5,     8,     7,     8,     5,
    11,     5,     9,     1,     1,     1,     0,     2,     4,     4,
     6,     3,     3,     3,     2,     2,     6,     8,     8,    10,
     1,     2,     1,     3,     4,     1,     8,    12,     8,    12,
     8,    12,    11,    15,     1,     2,     9,     2,     6,     9,
     9,     8,     8,     8,     6,     4,     2,     2,     1,     2,
     1,     1,     1,     1,     1,     1,     3,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     5,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     4,
     4,     4,     6,     6,     6,     4,     1,     1,     1,     4,
     2,     5,     3,     6,     4,     7,     3,     5,     1,     2,
     2,     3,     3,    11,     9,     7,     7,     0,     3,     1,
     3,     0,     3,     3,     1,     3,     0,     1,     3,     6,
     3,     1,     1,     3,     6,     3,     3,     5,     8,     9,
     7,     5,     1,     5,     3,     6,     1,     3,     1,     4,
     6
};

static const short yydefact[] = {     0,
     0,     5,     7,     0,     2,     1,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    10,
    12,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   201,     0,   206,     0,   203,     0,
     0,     0,    52,    54,    53,    55,    56,    57,    58,    59,
    64,    63,    60,    61,    62,   229,     0,     0,     0,    13,
    14,    16,    15,    17,   298,   298,     0,   277,   279,   329,
   130,   278,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   131,   132,   133,   134,     0,     0,
     0,   135,   136,     0,     0,     0,     0,     0,     0,   236,
     0,     0,   196,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   307,     0,     0,     0,     0,   307,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   289,     0,     0,     0,     0,     0,   187,
   307,     0,     0,   187,   227,   228,   307,   307,     0,     0,
     0,     0,     0,     0,   195,     0,   202,     0,   230,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   281,     0,    69,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   239,   238,   240,     0,     0,     0,     0,     0,     0,
     0,   140,   194,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   193,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   279,     0,   308,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   291,   290,
     0,     0,     0,     0,   187,   187,     0,     0,     0,     0,
     0,     0,     0,   192,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   300,     0,     0,
     0,     0,     0,   283,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   237,   307,
     0,   130,     0,     0,     0,     0,   137,     0,   254,   253,
   251,   252,   247,   249,   248,   250,   242,   241,   243,   244,
   245,   246,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   279,   312,   313,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   293,   292,   186,     0,
   185,   184,     0,     0,     0,     0,     0,   189,   188,   226,
     0,     0,   190,     0,     0,     0,     0,     0,     0,     0,
     0,   205,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   299,     0,     0,    19,     0,   280,
   285,    69,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,   256,   257,   258,
   259,   260,   261,   262,   263,   264,   276,   265,     0,   267,
   268,   269,   270,   271,   272,     0,     0,     0,   330,     0,
     0,     0,     0,     0,     0,     0,   146,     0,     0,     0,
     0,     0,    65,     0,     0,   156,   307,   307,     0,   307,
   168,     0,   176,   307,   307,   309,     0,     0,     0,     0,
   311,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   180,   182,     0,
     0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
   307,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   307,   307,     0,     0,     0,     0,
   307,   307,     0,     0,     0,     0,     0,   307,     0,   307,
     0,     0,     0,     0,     0,   301,     0,   298,     0,   282,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    67,     0,     0,     0,     0,     0,   139,
     0,     0,     0,     0,   141,   142,   144,     0,     0,   323,
     0,   327,     0,   150,   255,     0,     0,     0,     0,   307,
     0,   307,     0,     0,     0,   314,     0,   287,   279,   316,
   317,   155,     0,   307,   307,   307,   219,     0,   307,   307,
   307,   307,   307,   307,   307,     0,     0,     0,     0,     0,
     0,     0,   225,   191,     0,     0,     0,     0,   302,     0,
     0,     0,   197,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   231,   232,
   233,   234,   235,     0,     0,     0,     0,     0,     0,     0,
    18,     0,   284,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   266,   273,   274,   275,
   331,   130,     0,     0,     0,     0,   138,     0,     0,     0,
   279,     0,     0,   325,    66,   152,   160,     0,   163,     0,
   157,     0,   158,   178,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   187,     0,     0,     0,     0,     0,
     0,     0,     0,   166,     0,   307,   307,     0,   307,     0,
     0,     0,     0,     0,     0,   307,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   307,     0,     0,     0,     0,     0,
     0,     0,     0,   298,   286,    68,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   147,     0,     0,   148,     0,     0,     0,     0,   328,     0,
   165,   175,   310,     0,   288,   318,     0,     0,   223,   169,
   171,     0,     0,   222,   224,   177,   153,   164,   174,   179,
     0,   297,     0,   296,     0,     0,   207,     0,   209,     0,
   211,     0,     0,     0,   302,     0,   305,     0,     0,     0,
     0,   199,   198,     0,     0,     0,     0,     0,    21,     0,
    30,     0,    34,     0,    28,     0,     0,    33,     0,    38,
    36,     0,     0,     0,     0,     0,     0,    45,     0,     0,
     0,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   143,   145,
     0,   151,     0,     0,     0,     0,   161,   315,     0,     0,
   221,   220,   187,     0,   183,     0,     0,     0,     0,     0,
     0,   215,     0,     0,     0,   304,   307,   303,   307,     0,
     0,   307,     0,     0,   302,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   326,   324,
   322,     0,     0,     0,     0,     0,   295,     0,     0,     0,
   218,   307,     0,   216,     0,     0,     0,   306,     0,     0,
   200,     0,     0,    35,     0,     0,     0,     0,    25,     0,
    31,     0,    37,    26,    39,     0,    42,     0,    46,    47,
     0,     0,    49,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   149,     0,   319,
     0,   181,     0,     0,     0,     0,     0,   213,     0,     0,
   307,   307,   167,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    84,    88,    92,     0,
   321,     0,   294,   208,   210,   212,     0,   307,   154,   159,
     0,     0,   170,     0,     0,     0,     0,     0,    29,    32,
    40,     0,    41,    48,    43,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   307,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   320,     0,     0,   307,     0,     0,     0,
     0,     0,    24,    27,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    82,     0,    86,     0,
    90,     0,   214,     0,     0,     0,     0,     0,   307,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    44,    20,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    83,    85,    87,    89,    91,    93,
   162,   217,     0,     0,     0,     0,   307,     0,     0,     0,
     0,     0,     0,    96,   100,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     6,   307,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   173,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    94,     0,    98,     0,   102,
     0,   307,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   172,     0,    22,     0,     0,
     0,     0,     0,     0,    95,    97,    99,   101,   103,   105,
   307,     0,     0,     0,   108,   112,   116,     0,     0,     0,
     0,     0,     0,     0,   307,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   106,     0,   110,     0,
   114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   107,   109,   111,   113,   115,
   117,     0,   120,   124,   128,    23,     0,     0,     0,     0,
     0,     0,     0,   118,     0,   122,     0,   126,     0,     0,
     0,     0,     0,     0,   119,   121,   123,   125,   127,   129,
     0,     0,     0
};

static const short yydefgoto[] = {  1501,
     5,     6,    19,    20,    21,    22,     7,    63,    64,    65,
   376,  1276,   536,  1226,  1278,   537,  1227,  1280,   538,  1228,
  1385,   539,  1358,  1387,   540,  1359,  1389,   541,  1360,  1446,
   542,  1432,  1448,   543,  1433,  1450,   544,  1434,  1483,   545,
  1477,  1485,   546,  1478,  1487,   547,  1479,   127,   227,    66,
   469,   459,   460,   461,   462,    70,    71,    72,    73,  1041,
  1042,    74,    75,    78,   784,   294,   130,   439,   163,   164,
   222,   369,   868,   966,   967,   440,   702,   581,   703,   131
};

static const short yypact[] = {  1978,
    50,-32768,-32768,   -83,-32768,   256,  2100,-32768,    39,    69,
    93,   112,   136,   139,   146,   -27,   -17,   -10,-32768,-32768,
-32768,-32768,   971,     1,   164,   -80,    21,    32,   -11,   -18,
    57,    63,   235,   111,   277,   287,   320,   465,   348,   497,
   119,   -34,   -34,   125,   159,   219,   371,     8,   414,   434,
    71,   281,   -21,    56,-32768,   285,-32768,   454,-32768,   462,
   475,   445,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   483,    39,  2138,-32768,
-32768,-32768,-32768,-32768,   316,   316,   490,-32768,   267,     6,
-32768,-32768,   326,   332,   337,   338,   374,   383,   419,   420,
   421,   422,   423,   426,   427,   428,   431,   433,   435,   438,
   464,   466,   467,   468,-32768,-32768,-32768,-32768,  1468,  1468,
  1468,-32768,-32768,  1468,  1082,    70,  1468,   567,   425,-32768,
   593,   603,-32768,  1468,  1468,  1468,  1468,   469,  1468,  1468,
   470,  1468,  1468,  1468,   324,  1468,   459,   471,   473,   324,
   481,   482,   474,   499,   505,   519,   521,   -34,   -34,   -34,
  1468,  1468,  -105,-32768,   -32,   -34,   494,   516,   517,-32768,
   324,   437,   693,-32768,-32768,-32768,   324,   324,  1468,   -30,
  1468,   614,  1468,  1468,-32768,   696,-32768,   529,-32768,    39,
   530,   531,   532,   533,   534,   535,   536,   537,   538,   542,
   543,   544,   548,   549,   551,   552,   553,   556,   557,   558,
   559,   560,   561,   562,   564,   565,   566,   570,   571,   573,
   736,   594,   597,   596,  1468,   773,-32768,   -34,-32768,  1468,
  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
   774,   605,   605,   605,  4937,   775,  4837,   265,   602,   776,
   640,-32768,-32768,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,-32768,    88,
  4960,  2153,  4983,  5006,  1468,  5029,  2176,  1468,  2199,  5052,
  5075,   276,  1528,  6409,   778,  5098,  1468,  1468,  1468,   779,
  1468,  1468,  1468,  1468,  1468,  1468,  1468,   -29,-32768,-32768,
  2590,  2611,   -34,   -34,   500,   500,     4,  1468,  1468,  1468,
  1864,   229,  1468,-32768,  1881,   781,   782,  5121,   709,  1468,
  5144,   612,  1630,  5167,-32768,  1468,   663,   804,   805,   806,
   807,   811,   812,   813,   822,   832,   833,   836,   838,   839,
   840,   841,   842,   843,   845,   846,   848,   849,   850,   851,
   725,   853,   854,   855,   856,   860,   859,-32768,   135,   861,
   862,   867,  4862,   259,    18,    -4,  5190,  5213,  5236,  5259,
  5282,  5305,  5328,  5351,  5374,  5397,  5420,  2632,  5443,  5466,
  5489,  5512,  5535,  5558,  2653,  2674,  2695,   189,-32768,   324,
   152,   868,  1468,   869,   863,    11,-32768,  1653,   915,   525,
   504,   504,   261,   261,   261,   261,    67,    67,   605,   605,
   605,   605,   871,  1528,   858,   872,   874,   875,  5581,   876,
   873,  5604,   890,   891,   892,    10,   306,  1668,-32768,   -53,
  1468,   894,  2222,  5627,  5650,  1468,  2245,  2268,  5673,  5696,
  5719,  5742,  5765,   -34,  1468,  1468,-32768,-32768,-32768,   716,
  2162,-32768,   726,  1468,  2716,  2737,  2758,-32768,-32768,-32768,
  1468,  4887,-32768,   694,   729,   899,   737,  5788,   903,  1468,
  1468,-32768,  5811,   766,   738,   741,   742,   743,   744,   745,
   746,   748,   749,   750,   752,   753,   754,   755,   756,   757,
   758,   759,   760,   762,   763,   764,   765,   767,   768,   770,
   771,   772,   780,   783,-32768,   913,   777,-32768,   784,   141,
-32768,-32768,   786,   787,   790,   791,   793,   794,   796,   797,
   803,   828,   830,   831,   947,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1468,-32768,
-32768,-32768,-32768,-32768,-32768,  1468,  1468,  1468,-32768,  1528,
   949,    87,  1468,   951,   963,   669,-32768,   972,   834,    12,
  1000,  1468,-32768,   223,   -34,-32768,   324,   324,  1001,   324,
-32768,  1002,-32768,   324,   324,-32768,  1528,   607,  1468,  1556,
-32768,  1016,   827,  1004,  1005,  1009,   360,  1010,  1011,  1012,
  1017,  1018,  1019,  1021,   127,  2779,  2800,-32768,-32768,  2291,
   -34,   -34,   -34,  1043,  1023,  1468,  1468,   324,  1468,  1024,
   324,  1695,   230,  1025,   881,  1027,  1468,  1468,   -34,  1030,
  1031,   877,  1033,  1034,   324,   324,  1036,   -34,  1037,  1038,
   324,   324,  1041,  1042,  1044,  1047,  1049,   324,   439,   324,
  1062,  1061,  1063,  1064,  1080,-32768,  1040,   316,  1083,-32768,
    13,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
  1468,  1468,  1468,-32768,  5834,  5857,  5880,  5903,   225,-32768,
   358,   906,  1106,  1130,-32768,-32768,-32768,    12,  1468,   911,
  1584,-32768,    92,-32768,  6409,  1108,    37,    47,  1109,   324,
  1110,   324,  1111,  1112,   113,-32768,  1528,  1716,   321,  1668,
-32768,-32768,  1468,   324,   324,   324,-32768,   399,   324,   324,
   324,   324,   324,   324,   324,  1468,  1468,  1468,   939,   -86,
   -57,   -54,-32768,-32768,  2821,  2842,  1118,  5926,   -37,  1045,
  1468,  1468,-32768,   945,    39,   948,  2863,  2884,   154,   952,
   955,   953,   958,   959,   962,   960,   964,   157,   965,   973,
   975,   967,   974,   985,   986,   987,   989,   976,-32768,-32768,
-32768,-32768,-32768,  1007,  1008,  1013,  1014,  1015,   977,  1022,
-32768,  1032,   259,  1120,  2905,  2926,  2947,  2968,  2989,  3010,
  3031,  3052,  3073,  3094,  3115,  3136,-32768,-32768,-32768,-32768,
-32768,  1149,  1468,  1178,  1184,    11,-32768,  1185,  4912,  1129,
    90,  3157,    12,-32768,-32768,-32768,-32768,   -34,-32768,  1208,
-32768,  1209,-32768,-32768,  1054,   180,  1468,   739,  3178,  1211,
  1212,  1226,  1468,  1468,  1227,  1228,  1229,  1231,  1232,  1233,
  1234,  2314,  5949,  1578,   500,   -34,  1235,   -34,  1236,   -34,
    48,  1468,  1468,-32768,  1183,   324,   324,  1160,   324,   308,
  5972,  1468,    39,  1241,  1468,   324,  1242,  1244,  1243,  1085,
  1246,   439,  1247,  1251,  1468,  1249,  1254,  1252,  1255,  1257,
   439,  1468,  1468,  1468,   324,  1256,  1261,   439,  1468,  1262,
  1263,  1273,  1468,   316,-32768,-32768,  1468,  1468,  1468,  1468,
  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1275,  1168,
-32768,  1260,  1282,-32768,  1090,  1121,  1468,  1468,-32768,    41,
-32768,-32768,-32768,  1123,  6409,-32768,  1528,  1468,-32768,-32768,
-32768,  1463,  1493,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1122,-32768,  1468,-32768,  1117,   145,-32768,   199,-32768,   243,
-32768,    -8,  3199,  3220,   -37,   274,-32768,   188,  1124,  1221,
  1468,-32768,-32768,  3241,    39,  1131,  3262,  1126,-32768,  1128,
-32768,  1133,-32768,  1134,-32768,  1135,  5995,-32768,  1147,-32768,
-32768,  1138,  1161,  6018,  3283,  6041,  1158,-32768,  1164,  1165,
  3304,  1163,  1177,-32768,  3325,  1174,  3346,  3367,  3388,  3409,
  3430,  3451,  3472,  3493,  3514,  3535,  3556,  3577,-32768,-32768,
    12,-32768,  1223,  1350,  2337,  3598,-32768,-32768,   200,  3619,
-32768,-32768,   500,  1810,-32768,  1468,  1468,  1468,  1349,  1176,
   -16,-32768,  1468,  1468,  1274,-32768,   324,-32768,   324,  1468,
  2360,   324,  1216,  1353,   -37,   439,  1357,  1468,  1355,   439,
  1356,  1360,  1358,  1359,  1361,  1468,  1362,   324,  1363,  1364,
  1468,  1375,  1374,  1468,  1379,  1468,  1468,  1468,  1468,  1468,
  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1380,-32768,-32768,
-32768,  1468,  1189,  1382,  1207,  1468,-32768,  2383,  2406,  2429,
-32768,   324,  1385,-32768,  2452,  2475,  1213,-32768,  1215,  1609,
-32768,  1214,    39,-32768,  1217,  1218,  1219,  3640,-32768,  1230,
-32768,  1237,-32768,-32768,-32768,  6064,-32768,  1224,-32768,-32768,
  6087,  1245,-32768,  6110,  1225,  3661,  3682,  3703,  3724,  3745,
  3766,  3787,  3808,  3829,  6133,  6156,  6179,-32768,  2124,-32768,
  1240,-32768,  2498,  1386,  1396,    49,  1248,-32768,  1400,  1401,
   324,   324,-32768,  1402,    39,   439,   439,   439,   439,  1403,
  1404,  1405,   439,  1415,  1416,  1418,  1420,  1468,  1468,  1468,
  1468,  1468,  1468,  1468,  1468,  1468,-32768,-32768,-32768,  1468,
-32768,  1423,-32768,-32768,-32768,-32768,    -8,   324,-32768,-32768,
  1250,  1253,-32768,    39,  1259,  1264,  1267,  1269,-32768,-32768,
-32768,  1266,-32768,-32768,-32768,  1270,  3850,  3871,  3892,  3913,
  3934,  3955,  3976,  3997,  4018,  1268,  1271,  1272,  2521,  1277,
   -15,  1281,   324,  1370,  1294,   439,   439,  1433,  1448,   439,
  1456,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
  1468,  1468,  1468,-32768,  1457,  1458,   324,  1284,  1283,    39,
  1288,  1295,-32768,-32768,  1298,  1300,  4039,  4060,  4081,  4102,
  4123,  4144,  4165,  4186,  4207,   240,  6409,   263,  6409,   299,
  6409,  1319,-32768,  1320,  1422,  1468,    39,   439,   324,  1470,
  1497,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
  1468,  1498,  1468,  1500,  1468,  1502,  1503,  1504,  1331,  4228,
    39,  1333,  1334,-32768,-32768,  4249,  4270,  4291,  4312,  4333,
  4354,  6202,  6225,  6248,  6409,-32768,  6409,-32768,  6409,-32768,
-32768,-32768,  1468,  1468,  1367,   439,   324,  1468,  1468,  1468,
  1468,  1468,  1468,-32768,-32768,-32768,  4375,  2544,  1368,  1336,
  1338,  4396,  4417,  4438,  4459,  4480,  4501,  1342,  1343,  1354,
  1468,  1512,-32768,   324,   439,  1468,  1468,  1468,  1468,  1468,
  1468,  1468,  1468,  1468,  2567,-32768,  1383,  1388,  4522,  4543,
  4564,  4585,  4606,  4627,   315,  6409,   351,  6409,   370,  6409,
  1527,   324,  1529,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
  1530,  1468,  1555,  1468,  1558,-32768,  1410,-32768,  4648,  4669,
  4690,  6271,  6294,  6317,  6409,-32768,  6409,-32768,  6409,-32768,
   324,  1468,  1468,  1468,-32768,-32768,-32768,  1411,  4711,  4732,
  4753,  1412,  1441,  1453,   324,  1468,  1468,  1468,  1468,  1468,
  1468,  1455,  4774,  4795,  4816,   381,  6409,   382,  6409,   385,
  6409,   439,  1468,  1468,  1468,  1468,  1585,  1468,  1629,  1468,
  1633,  1465,  6340,  6363,  6386,  6409,-32768,  6409,-32768,  6409,
-32768,  1635,-32768,-32768,-32768,-32768,  1464,  1471,  1482,  1468,
  1468,  1468,   386,  6409,   389,  6409,   390,  6409,  1468,  1637,
  1468,  1639,  1468,  1657,  6409,-32768,  6409,-32768,  6409,-32768,
  1665,  1667,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1146,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -252,   -19,-32768,
  1662,  1663,  -309,    15,  1666,-32768,-32768,-32768,-32768,   477,
 -1032,-32768,-32768,   -75,  -880,   -23,-32768,  1072,    98,-32768,
   -85,-32768,  -919,   808,   795,  -419,  -690,   864,-32768,-32768
};


#define	YYLAST		6582


static const short yytable[] = {   129,
   223,   984,   190,   128,   584,   403,   463,   818,  1104,   228,
   993,   172,    88,    89,   579,   700,   180,  1000,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   141,    76,   826,  1039,  1039,  1045,  1027,   138,  1040,  1040,
   329,  1039,   827,   961,  1196,     8,  1040,   313,   314,   182,
     9,   523,   524,   525,   526,   527,   528,   529,   530,   531,
   532,   533,   534,   258,   315,    79,   313,   314,   523,   524,
   525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
   691,   828,   856,   134,   857,   252,   253,   254,    80,   135,
   255,   257,   173,   261,   177,   313,   314,   178,   313,   314,
   281,   282,   283,   284,   337,   286,   287,    81,   289,   290,
   291,   858,   296,   859,   860,   600,   861,   601,   159,   160,
   313,   314,   929,   313,   314,  1115,   866,   311,   312,   161,
   165,    82,   867,   330,    83,   162,    85,   316,   573,   454,
   689,    84,   181,   259,   260,   328,    86,   331,    91,   333,
   334,   142,   139,    87,  1103,  1256,   313,   314,   140,   133,
   692,   693,   119,   120,   132,  1116,   535,   715,   121,  1120,
   313,   314,   464,   124,   321,   229,   596,   174,   325,   597,
   580,   701,   167,   794,   136,   168,   169,   522,  1104,   313,
   314,   373,    77,   313,   314,   137,   377,   378,   379,   380,
   381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
   391,   392,   393,   394,   395,   396,   397,   962,  1197,   183,
   143,   275,   276,   277,   470,   471,   144,   752,   404,   278,
   408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
   418,   419,   420,   421,   422,   308,   309,   310,    10,   122,
   123,   429,   423,   317,   432,   225,   424,   226,   927,   438,
   823,   402,   824,   443,   444,   445,   145,   447,   448,   449,
   450,   451,   452,   453,   146,  1205,  1206,  1207,  1208,   313,
   314,   600,  1212,   835,   465,   466,   467,   836,   158,   472,
   115,   116,   117,   118,   166,   736,   478,   313,   314,   515,
   122,   123,   483,   516,   147,   971,   313,   314,   669,   313,
   314,   122,   123,  1036,   148,   375,    88,   292,   877,   572,
  1088,   886,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   521,  1261,  1262,   149,   600,  1265,
   934,   313,   314,   569,   812,   727,  1047,   570,  1048,    11,
    12,    13,    14,    15,    16,    17,    18,  1037,   600,   576,
  1093,   574,   264,   265,   266,   267,   268,   153,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   706,   170,   811,
   438,   600,   278,   600,   753,   313,   314,  1312,   171,   728,
   457,   458,   373,   115,   116,   117,   118,   602,  1301,   175,
  1302,  1038,   607,   273,   274,   275,   276,   277,   122,   123,
   263,   616,   617,   278,   122,   123,   122,   123,   813,   176,
   620,  1303,   225,  1304,   226,   122,   123,   624,  1046,   843,
   844,   436,  1047,   226,   179,  1350,   632,   633,   184,   185,
   264,   265,   266,   267,   268,   186,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   122,   123,  1305,   187,  1306,
   278,   598,   188,   226,  1378,   189,   119,   120,   972,   221,
   122,   123,   121,  1400,   224,  1401,   838,   124,   226,   230,
   670,   150,   151,   293,   152,   231,   115,   116,   117,   118,
   232,   233,   264,   265,   266,   267,   268,  1029,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   122,   123,  1402,
   154,  1403,   278,   155,   156,   685,   157,   779,   780,   781,
   782,   783,   686,   687,   688,   955,   438,   234,  1404,   694,
  1405,   615,    41,    42,    43,    44,   235,    46,   705,  1456,
  1458,  1457,  1459,  1460,  1489,  1461,  1490,  1491,  1493,  1492,
  1494,  1462,   262,   438,   373,   718,   720,   264,   265,   266,
   267,   268,   792,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   236,   237,   238,   239,   240,   278,   279,   241,
   242,   243,   745,   746,   244,   748,   245,   280,   246,    88,
    89,   247,   323,   757,   758,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   248,   297,   249,
   250,   251,   285,   288,   298,   407,   299,   303,   795,   796,
   797,   798,   799,   800,   801,   802,   803,   804,   805,   806,
   301,   302,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   814,   304,   318,   697,   819,   278,   822,   305,   873,
   267,   268,   707,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   306,   438,   307,   319,   320,   278,   324,   839,
   332,   335,   336,   338,   339,   340,   341,   342,   343,   344,
   345,   346,   852,   853,   854,   347,   348,   349,   740,   741,
   742,   350,   351,  1095,   352,   353,   354,   870,   871,   355,
   356,   357,   358,   359,   360,   361,   759,   362,   363,   364,
   368,    88,    89,   365,   366,   768,   367,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   119,
   120,   371,   370,   905,   372,   121,   374,   278,   398,   405,
   124,   400,   406,   716,   441,   446,   717,   474,   475,   920,
   477,   480,   264,   265,   266,   267,   268,   975,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   484,   485,   486,
   487,   488,   278,   935,   373,   489,   490,   491,  1006,   942,
   943,   264,   265,   266,   267,   268,   492,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   493,   494,   963,   964,
   495,   278,   496,   497,   498,   499,   500,   501,   974,   502,
   503,   977,   504,   505,   506,   507,   508,   509,   510,   511,
   512,   987,   513,   514,   585,   517,   578,   518,   994,   995,
   996,   519,   575,   626,   577,  1001,   583,   586,   591,  1005,
   587,   588,   590,  1007,  1008,  1009,  1010,  1011,  1012,  1013,
  1014,  1015,  1016,  1017,  1018,   593,   618,   594,   595,  1053,
   603,   119,   120,  1025,  1026,   628,   619,   121,   627,   631,
   629,   635,   124,   438,  1030,   936,   636,   666,   937,   637,
   638,   639,   640,   641,   642,   930,   643,   644,   645,  1034,
   646,   647,   648,   649,   650,   651,   652,   653,   654,   295,
   655,   656,   657,   658,   300,   659,   660,  1051,   661,   662,
   663,   667,   684,   956,   690,   958,   695,   960,   664,   672,
   673,   665,   668,   674,   675,   322,   676,   677,   696,   678,
   679,   326,   327,    88,    89,    90,   680,    91,   698,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   681,   114,   682,   683,   704,   723,   710,   712,   699,
   724,   725,  1098,  1099,  1100,   726,   729,   730,   731,  1105,
  1106,   722,   755,   732,   733,   734,  1110,   735,   744,   756,
   749,   754,   760,   761,  1118,   763,   764,  1165,   767,   769,
   770,   762,  1126,   773,   774,   791,   775,  1131,   743,   776,
  1134,   777,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
  1144,  1145,  1146,  1147,   786,   787,   789,   788,  1149,   266,
   267,   268,  1153,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   790,   815,    88,    89,   793,   278,   820,  1204,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   816,   825,   829,   831,   833,   834,   855,   115,
   116,   117,   118,   864,   872,   906,   874,   869,  1235,   879,
   878,   880,   881,   119,   120,   817,   883,   882,   884,   121,
   122,   123,   885,   887,   124,   890,   125,   888,   126,   889,
   896,   902,   891,   919,  1217,  1218,  1219,  1220,  1221,  1222,
  1223,  1224,  1225,   892,   893,   894,  1229,   895,   264,   265,
   266,   267,   268,  1020,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   921,  1287,   897,   898,   922,   278,   965,
   924,   899,   900,   901,   571,   264,   265,   266,   267,   268,
   903,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   904,  1311,   926,   931,   932,   278,   939,   940,  1267,  1268,
  1269,  1270,  1271,  1272,  1273,  1274,  1275,  1277,  1279,  1281,
   933,   941,   944,   945,   946,  1335,   947,   948,   949,   950,
   957,   959,   969,   976,   119,   120,   980,   979,   981,   982,
   121,   983,   985,   986,   988,   124,   989,   990,   256,   992,
   991,   998,  1310,   999,  1002,  1003,  1021,  1023,  1316,  1317,
  1318,  1319,  1320,  1321,  1322,  1323,  1324,  1325,  1004,  1327,
  1019,  1329,   264,   265,   266,   267,   268,  1022,   269,   270,
   271,   272,   273,   274,   275,   276,   277,  1035,  1024,  1028,
  1050,  1033,   278,  1049,  1056,  1054,  1057,  1089,  1059,  1347,
  1348,  1058,  1063,  1060,  1352,  1353,  1354,  1355,  1356,  1357,
   264,   265,   266,   267,   268,  1062,   269,   270,   271,   272,
   273,   274,   275,   276,   277,  1064,  1068,  1375,  1069,  1070,
   278,  1072,  1379,  1380,  1381,  1382,  1383,  1384,  1386,  1388,
  1390,  1073,  1075,  1090,  1101,  1102,  1107,  1113,  1114,  1117,
  1119,  1121,  1122,  1123,  1124,  1150,  1125,  1127,  1129,  1130,
  1409,  1410,  1411,  1412,  1413,  1414,  1415,  1132,  1417,  1133,
  1419,   708,   709,  1135,   711,  1148,  1151,  1152,   713,   714,
  1158,  1194,  1161,  1162,  1164,  1166,  1167,  1168,  1429,  1430,
  1431,  1195,  1173,  1177,  1170,  1199,  1200,  1203,  1209,  1210,
  1211,  1171,  1443,  1444,  1445,  1447,  1449,  1451,  1192,  1175,
  1213,  1214,   747,  1215,  1216,   750,  1198,  1230,  1233,  1463,
  1464,  1465,  1466,  1234,  1468,  1260,  1470,  1236,  1263,   765,
   766,  1238,  1237,  1239,  1240,   771,   772,  1251,  1241,  1259,
  1252,  1253,   778,  1264,   785,  1255,  1484,  1486,  1488,  1257,
  1266,  1282,  1286,  1283,  1285,  1495,  1288,  1497,  1031,  1499,
    88,    89,  1290,  1289,  1291,  1314,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,  1032,  1307,
  1308,  1309,  1315,  1326,   830,  1328,   832,  1330,  1331,  1332,
  1333,  1336,  1337,  1349,  1364,  1363,  1365,  1376,   840,   841,
   842,  1372,  1373,   845,   846,   847,   848,   849,   850,   851,
    88,   437,  1406,  1374,  1408,  1416,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,    88,   719,
  1418,  1392,  1393,  1420,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,    88,   821,  1421,  1435,
  1467,  1439,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,  1163,   264,   265,   266,   267,   268,
  1440,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   119,   120,  1441,  1452,  1469,   278,   121,   481,  1471,  1472,
  1476,   124,  1496,  1480,  1498,   264,   265,   266,   267,   268,
  1481,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   582,  1482,  1500,   970,  1502,   278,  1503,   671,    67,    68,
   978,   721,    69,  1231,   968,   599,     0,     0,     0,   923,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   997,
   119,   120,     0,     0,     0,     0,   121,     0,     0,     0,
     0,   124,   751,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     0,     0,     0,   837,   121,     0,     0,     0,     0,   124,
   264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,   119,   120,     0,     0,
   278,     0,   121,     0,     0,     0,   953,   124,   954,     0,
     0,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,     0,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   264,   265,   266,   267,   268,   278,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,  1108,     0,  1109,     0,     0,  1112,   264,   265,   266,
   267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
   276,   277,  1128,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
     0,     0,     0,     0,     0,     0,  1157,    26,    27,    28,
    29,    30,    31,    32,    33,     0,    34,     0,    36,    37,
     0,    39,    40,     0,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    34,     0,    36,    37,    51,    39,    40,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    52,    53,     0,    51,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1201,  1202,     0,    52,    53,
     0,     0,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,    -8,     1,     0,
    -8,   -51,   278,     0,     0,     0,     0,     0,  1096,     0,
  1097,     0,  1232,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    62,     0,     0,     0,     0,     0,   -51,     0,
   -51,   -51,   -51,   -51,   -51,   -51,   -51,   -51,   -51,    62,
   -51,   -51,   -51,   -51,   -51,   -51,   -51,  1258,     0,     0,
   -51,   -51,   -51,   -51,   -51,   -51,     0,   -51,   -51,   -51,
   -51,   -51,     0,     0,   468,     0,     0,     0,     0,     0,
     0,  1284,     0,     0,     0,   -51,   -51,     0,     0,     0,
     0,   473,     0,   -51,     0,   -51,   -51,   -51,   -51,   -51,
   -51,   -51,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1313,     0,     0,     0,     0,     0,     0,
     0,    -8,    -8,    -8,    -8,    -8,    -8,    -8,    -8,     0,
     0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   -51,     2,     3,     0,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    24,  1351,    25,    26,    27,    28,    29,    30,    31,    32,
    33,     0,    34,    35,    36,    37,    38,    39,    40,     0,
     0,     0,    41,    42,    43,    44,    45,    46,  1377,    47,
    48,    49,    50,    51,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   191,     0,     0,    52,    53,     0,
     0,     0,     0,     0,     0,    54,  1407,    55,    56,    57,
    58,    59,    60,    61,     0,    26,    27,    28,    29,    30,
    31,    32,    33,     0,    34,     0,    36,    37,     0,    39,
    40,     0,     0,     0,     0,  1428,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    51,     0,     0,     0,  1442,
     0,     0,     0,   192,   193,   194,     0,     0,    62,    52,
    53,   195,   196,   197,   198,   199,   200,   201,   202,   203,
   204,     0,     0,     0,     0,     0,     0,     0,     0,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,     0,
   215,   216,   217,   218,   219,   220,   264,   265,   266,   267,
   268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,     0,     0,
    62,     0,  1190,     0,  1191,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,     0,   264,   265,
   266,   267,   268,   426,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
     0,   264,   265,   266,   267,   268,   431,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,     0,   264,   265,   266,   267,   268,   433,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,     0,   264,   265,   266,
   267,   268,   604,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,     0,
   264,   265,   266,   267,   268,   608,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,     0,   264,   265,   266,   267,   268,   609,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,     0,   264,   265,   266,   267,
   268,   739,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,     0,   264,
   265,   266,   267,   268,   951,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,     0,   264,   265,   266,   267,   268,  1091,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,     0,   264,   265,   266,   267,   268,
  1111,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,     0,   264,   265,
   266,   267,   268,  1154,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
     0,   264,   265,   266,   267,   268,  1155,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,     0,   264,   265,   266,   267,   268,  1156,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,     0,   264,   265,   266,
   267,   268,  1159,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,     0,
   264,   265,   266,   267,   268,  1160,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,     0,   264,   265,   266,   267,   268,  1193,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,     0,   264,   265,   266,   267,
   268,  1254,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,     0,   264,
   265,   266,   267,   268,  1362,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,     0,   264,   265,   266,   267,   268,  1391,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,   455,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,   456,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
   559,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,   566,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,   567,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,   568,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,   621,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,   622,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,   623,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,   737,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,   738,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,   862,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
   863,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,   875,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,   876,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,   907,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,   908,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,   909,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,   910,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,   911,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,   912,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,   913,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
   914,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,   915,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,   916,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,   917,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,   918,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,   928,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,   938,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1043,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1044,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1052,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1055,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1066,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1071,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1074,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1076,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,  1077,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,  1078,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1079,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1080,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1081,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1082,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1083,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1084,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1085,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1086,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,  1087,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,  1092,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1094,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1169,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1178,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1179,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1180,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1181,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1182,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1183,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,  1184,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,  1185,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1186,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1242,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1243,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1244,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1245,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1246,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1247,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1248,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,  1249,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,  1250,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1292,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1293,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1294,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1295,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1296,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1297,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1298,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1299,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,  1300,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,  1334,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1338,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1339,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1340,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1341,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1342,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1343,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1361,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1366,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,  1367,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,  1368,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1369,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1370,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1371,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1394,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1395,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1396,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1397,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1398,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
   264,   265,   266,   267,   268,  1399,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,   264,   265,   266,   267,   268,  1422,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,   264,   265,   266,   267,   268,  1423,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,   264,   265,   266,   267,   268,  1424,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,   264,   265,   266,   267,   268,  1436,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,   264,   265,   266,   267,   268,
  1437,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,   264,   265,   266,   267,
   268,  1438,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,   264,   265,   266,
   267,   268,  1453,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,   264,   265,
   266,   267,   268,  1454,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,   264,
   265,   266,   267,   268,  1455,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,     0,     0,   401,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,     0,     0,   520,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,     0,     0,   625,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,     0,     0,   925,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,   399,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,   425,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,   427,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
   428,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,   430,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,   434,   264,   265,   266,
   267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,   435,
   264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,   442,   264,   265,   266,   267,   268,     0,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,   476,   264,   265,   266,   267,
   268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,   479,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,   482,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,   548,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,   549,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
   550,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,   551,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,   552,   264,   265,   266,
   267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,   553,
   264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,   554,   264,   265,   266,   267,   268,     0,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,   555,   264,   265,   266,   267,
   268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,   556,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,   557,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,   558,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,   560,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
   561,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,   562,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,   563,   264,   265,   266,
   267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,   564,
   264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,   565,   264,   265,   266,   267,   268,     0,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,   589,   264,   265,   266,   267,
   268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,   592,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,   605,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,   606,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,   610,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
   611,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,   612,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,   613,   264,   265,   266,
   267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,   614,
   264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,   630,   264,   265,   266,   267,   268,     0,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,   634,   264,   265,   266,   267,
   268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,   807,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,   808,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,   809,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,   810,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
   865,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,   952,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,   973,   264,   265,   266,
   267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,  1061,
   264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,  1065,   264,   265,   266,   267,   268,     0,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,  1067,   264,   265,   266,   267,
   268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,  1172,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,  1174,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,  1176,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,  1187,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
  1188,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278,     0,  1189,   264,   265,   266,   267,   268,     0,
   269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
     0,     0,     0,     0,   278,     0,  1344,   264,   265,   266,
   267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
   276,   277,     0,     0,     0,     0,     0,   278,     0,  1345,
   264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,     0,     0,     0,     0,     0,
   278,     0,  1346,   264,   265,   266,   267,   268,     0,   269,
   270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     0,     0,     0,   278,     0,  1425,   264,   265,   266,   267,
   268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
   277,     0,     0,     0,     0,     0,   278,     0,  1426,   264,
   265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
   274,   275,   276,   277,     0,     0,     0,     0,     0,   278,
     0,  1427,   264,   265,   266,   267,   268,     0,   269,   270,
   271,   272,   273,   274,   275,   276,   277,     0,     0,     0,
     0,     0,   278,     0,  1473,   264,   265,   266,   267,   268,
     0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     0,     0,     0,     0,     0,   278,     0,  1474,   264,   265,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,     0,     0,     0,     0,     0,   278,     0,
  1475,   264,   265,   266,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,     0,     0,     0,     0,
     0,   278
};

static const short yycheck[] = {    23,
    86,   882,    78,    23,   424,   258,   316,   698,  1041,     4,
   891,     4,     3,     4,     4,     4,    38,   898,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    59,     3,     6,    60,    60,   965,     6,    59,    65,    65,
    81,    60,     6,     6,     6,     6,    65,   163,   164,     4,
   144,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,     4,   180,     7,   163,   164,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
     4,    45,   179,   174,   181,   119,   120,   121,     6,   180,
   124,   125,    95,   127,    34,   163,   164,    37,   163,   164,
   134,   135,   136,   137,   190,   139,   140,     6,   142,   143,
   144,   179,   146,   181,   179,   179,   181,   181,   163,   164,
   163,   164,   823,   163,   164,  1055,   174,   161,   162,   174,
    43,     6,   180,   174,     6,   180,   174,   180,   401,   179,
   570,     6,   174,    84,    85,   179,   174,   181,     7,   183,
   184,   180,   174,   174,   181,   181,   163,   164,   180,     6,
    84,    85,   163,   164,   174,  1056,   181,   597,   169,  1060,
   163,   164,   179,   174,   170,   180,   177,   180,   174,   180,
   180,   180,    34,   181,   174,    37,    38,   180,  1231,   163,
   164,   225,   164,   163,   164,   174,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   180,   180,   174,
   174,   165,   166,   167,     6,     7,   174,     8,   258,   173,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   158,   159,   160,     3,   170,
   171,   285,   175,   166,   288,   176,   179,   178,   179,   293,
   179,     7,   181,   297,   298,   299,    42,   301,   302,   303,
   304,   305,   306,   307,   174,  1166,  1167,  1168,  1169,   163,
   164,   179,  1173,   181,   318,   319,   320,   717,   180,   323,
   149,   150,   151,   152,   180,   179,   330,   163,   164,   175,
   170,   171,   336,   179,    38,     8,   163,   164,   178,   163,
   164,   170,   171,   179,    38,   228,     3,     4,   175,   178,
  1021,   175,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,   374,  1236,  1237,    38,   179,  1240,
   181,   163,   164,   175,     7,     6,   179,   179,   181,   114,
   115,   116,   117,   118,   119,   120,   121,   179,   179,   403,
   181,   401,   153,   154,   155,   156,   157,    40,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   175,   180,   175,
   424,   179,   173,   179,   175,   163,   164,  1288,    38,    50,
   313,   314,   436,   149,   150,   151,   152,   441,   179,     6,
   181,   179,   446,   163,   164,   165,   166,   167,   170,   171,
     6,   455,   456,   173,   170,   171,   170,   171,   691,     6,
   464,   179,   176,   181,   178,   170,   171,   471,   175,    51,
    52,   176,   179,   178,   174,  1336,   480,   481,   174,     6,
   153,   154,   155,   156,   157,     4,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   170,   171,   179,     4,   181,
   173,   176,    38,   178,  1365,     3,   163,   164,   181,   174,
   170,   171,   169,   179,     5,   181,   176,   174,   178,   174,
   520,    37,    38,   180,    40,   174,   149,   150,   151,   152,
   174,   174,   153,   154,   155,   156,   157,   937,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   170,   171,   179,
    34,   181,   173,    37,    38,   559,    40,    99,   100,   101,
   102,   103,   566,   567,   568,   855,   570,   174,   179,   573,
   181,   454,    53,    54,    55,    56,   174,    58,   582,   179,
   179,   181,   181,   179,   179,   181,   181,   179,   179,   181,
   181,  1452,     6,   597,   598,   599,   600,   153,   154,   155,
   156,   157,   668,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   174,   174,   174,   174,   174,   173,     6,   174,
   174,   174,   626,   627,   174,   629,   174,     5,   174,     3,
     4,   174,   176,   637,   638,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,   174,   180,   174,
   174,   174,   174,   174,   174,     6,   174,   174,   672,   673,
   674,   675,   676,   677,   678,   679,   680,   681,   682,   683,
   180,   180,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   691,   174,   180,     6,   699,   173,   701,   174,   755,
   156,   157,   585,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   174,   717,   174,   180,   180,   173,     6,   723,
    87,     6,   174,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   736,   737,   738,   174,   174,   174,   621,   622,
   623,   174,   174,  1033,   174,   174,   174,   751,   752,   174,
   174,   174,   174,   174,   174,   174,   639,   174,   174,   174,
     5,     3,     4,   174,   174,   648,   174,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,   163,
   164,   175,   179,   793,   179,   169,     4,   173,     5,   178,
   174,     7,     7,   177,     7,     7,   180,     7,     7,   813,
    82,   180,   153,   154,   155,   156,   157,   873,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   145,     5,     5,
     5,     5,   173,   837,   838,     5,     5,     5,   904,   843,
   844,   153,   154,   155,   156,   157,     5,   159,   160,   161,
   162,   163,   164,   165,   166,   167,     5,     5,   862,   863,
     5,   173,     5,     5,     5,     5,     5,     5,   872,     5,
     5,   875,     5,     5,     5,     5,   132,     5,     5,     5,
     5,   885,     3,     5,     7,     5,     4,     6,   892,   893,
   894,     5,     5,   180,     6,   899,     6,     6,     6,   903,
     7,     7,     7,   907,   908,   909,   910,   911,   912,   913,
   914,   915,   916,   917,   918,     6,   181,     7,     7,   975,
     7,   163,   164,   927,   928,     7,   181,   169,   180,     7,
   174,   146,   174,   937,   938,   177,   179,     5,   180,   179,
   179,   179,   179,   179,   179,   828,   179,   179,   179,   953,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   145,
   179,   179,   179,   179,   150,   179,   179,   971,   179,   179,
   179,   175,     6,   856,     6,   858,     6,   860,   179,   174,
   174,   179,   179,   174,   174,   171,   174,   174,     6,   174,
   174,   177,   178,     3,     4,     5,   174,     7,     7,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   174,    32,   174,   174,     6,   180,     7,     7,   176,
     7,     7,  1036,  1037,  1038,     7,     7,     7,     7,  1043,
  1044,     6,   142,     7,     7,     7,  1050,     7,     6,     3,
     7,     7,     3,     3,  1058,     3,     3,  1113,     3,     3,
     3,   165,  1066,     3,     3,     6,     3,  1071,     6,     3,
  1074,     3,  1076,  1077,  1078,  1079,  1080,  1081,  1082,  1083,
  1084,  1085,  1086,  1087,     3,     5,     3,     5,  1092,   155,
   156,   157,  1096,   159,   160,   161,   162,   163,   164,   165,
   166,   167,     3,   178,     3,     4,     4,   173,   178,  1165,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,     7,     6,     6,     6,     6,     6,   180,   149,
   150,   151,   152,     6,   180,     6,   179,    83,  1204,   175,
   179,   179,   175,   163,   164,     6,   175,   179,   179,   169,
   170,   171,   179,   179,   174,   179,   176,   175,   178,   175,
   175,   175,   179,     5,  1178,  1179,  1180,  1181,  1182,  1183,
  1184,  1185,  1186,   179,   179,   179,  1190,   179,   153,   154,
   155,   156,   157,     6,   159,   160,   161,   162,   163,   164,
   165,   166,   167,     6,  1260,   179,   179,     4,   173,     7,
     6,   179,   179,   179,   400,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   179,  1287,    84,     6,     6,   173,     6,     6,  1242,  1243,
  1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
   177,     6,     6,     6,     6,  1311,     6,     6,     6,     6,
     6,     6,    83,     3,   163,   164,     3,     6,     6,   165,
   169,     6,     6,     3,     6,   174,     3,     6,   177,     3,
     6,     6,  1286,     3,     3,     3,     7,   178,  1292,  1293,
  1294,  1295,  1296,  1297,  1298,  1299,  1300,  1301,     6,  1303,
     6,  1305,   153,   154,   155,   156,   157,     6,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   181,   178,   177,
    80,   180,   173,   180,   179,   175,   179,    85,   175,  1333,
  1334,   179,   175,   179,  1338,  1339,  1340,  1341,  1342,  1343,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   175,   179,  1361,   175,   175,
   173,   179,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,
  1374,   175,   179,     4,     6,   180,    83,   142,     6,     3,
     6,     6,     3,     6,     6,   177,     6,     6,     6,     6,
  1394,  1395,  1396,  1397,  1398,  1399,  1400,     3,  1402,     6,
  1404,   587,   588,     5,   590,     6,     5,   181,   594,   595,
     6,     6,   180,   179,   181,   179,   179,   179,  1422,  1423,
  1424,     6,   179,   179,   175,     6,     6,     6,     6,     6,
     6,   175,  1436,  1437,  1438,  1439,  1440,  1441,   179,   175,
     6,     6,   628,     6,     5,   631,   179,     5,   179,  1453,
  1454,  1455,  1456,   181,  1458,   142,  1460,   179,     6,   645,
   646,   175,   179,   175,   179,   651,   652,   180,   179,    80,
   180,   180,   658,     6,   660,   179,  1480,  1481,  1482,   179,
     5,     5,   180,     6,   181,  1489,   179,  1491,     6,  1493,
     3,     4,   175,   179,   175,     6,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     6,   181,
   181,    80,     6,     6,   710,     6,   712,     6,     6,     6,
   180,   179,   179,   147,   179,   148,   179,     6,   724,   725,
   726,   180,   180,   729,   730,   731,   732,   733,   734,   735,
     3,     4,     6,   180,     6,     6,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     3,     4,
     6,   179,   175,     6,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,     3,     4,   179,   179,
     6,   180,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,     6,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   163,   164,   180,   179,     6,   173,   169,     8,     6,   175,
     6,   174,     6,   180,     6,   153,   154,   155,   156,   157,
   180,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     8,   180,     6,   869,     0,   173,     0,   522,     7,     7,
   876,   600,     7,  1197,   867,     8,    -1,    -1,    -1,   816,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   895,
   163,   164,    -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,
    -1,   174,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,
    -1,    -1,    -1,     8,   169,    -1,    -1,    -1,    -1,   174,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,   163,   164,    -1,    -1,
   173,    -1,   169,    -1,    -1,    -1,   179,   174,   181,    -1,
    -1,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   153,   154,   155,   156,   157,   173,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,  1047,    -1,  1049,    -1,    -1,  1052,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,  1068,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1102,    34,    35,    36,
    37,    38,    39,    40,    41,    -1,    43,    -1,    45,    46,
    -1,    48,    49,    -1,    34,    35,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    46,    64,    48,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    78,    79,    -1,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1161,  1162,    -1,    78,    79,
    -1,    -1,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,     0,     1,    -1,
     3,     4,   173,    -1,    -1,    -1,    -1,    -1,   179,    -1,
   181,    -1,  1198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    31,    -1,
    33,    34,    35,    36,    37,    38,    39,    40,    41,   139,
    43,    44,    45,    46,    47,    48,    49,  1233,    -1,    -1,
    53,    54,    55,    56,    57,    58,    -1,    60,    61,    62,
    63,    64,    -1,    -1,   181,    -1,    -1,    -1,    -1,    -1,
    -1,  1257,    -1,    -1,    -1,    78,    79,    -1,    -1,    -1,
    -1,   181,    -1,    86,    -1,    88,    89,    90,    91,    92,
    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1289,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
    -1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,   141,    -1,
   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    31,  1337,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    -1,    43,    44,    45,    46,    47,    48,    49,    -1,
    -1,    -1,    53,    54,    55,    56,    57,    58,  1364,    60,
    61,    62,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    37,    -1,    -1,    78,    79,    -1,
    -1,    -1,    -1,    -1,    -1,    86,  1392,    88,    89,    90,
    91,    92,    93,    94,    -1,    34,    35,    36,    37,    38,
    39,    40,    41,    -1,    43,    -1,    45,    46,    -1,    48,
    49,    -1,    -1,    -1,    -1,  1421,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,  1435,
    -1,    -1,    -1,    96,    97,    98,    -1,    -1,   139,    78,
    79,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
   133,   134,   135,   136,   137,   138,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,
   139,    -1,   179,    -1,   181,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,
   181,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,
   155,   156,   157,   181,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
    -1,   153,   154,   155,   156,   157,   181,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,    -1,   153,   154,   155,   156,   157,   181,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,
   156,   157,   181,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
   153,   154,   155,   156,   157,   181,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,    -1,   153,   154,   155,   156,   157,   181,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,    -1,   153,   154,   155,   156,
   157,   181,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,   153,
   154,   155,   156,   157,   181,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,   153,   154,   155,   156,   157,   181,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
   153,   154,   155,   156,   157,   179,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,   153,   154,   155,   156,   157,   179,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,   153,   154,   155,   156,   157,   179,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,   153,   154,   155,   156,   157,   179,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,   179,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,   157,
   179,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,   156,
   157,   179,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,   155,
   156,   157,   179,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,   154,
   155,   156,   157,   179,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,   153,
   154,   155,   156,   157,   179,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,    -1,    -1,   177,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,   177,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173,    -1,   175,   153,   154,   155,   156,   157,    -1,
   159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,
   156,   157,    -1,   159,   160,   161,   162,   163,   164,   165,
   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,
   153,   154,   155,   156,   157,    -1,   159,   160,   161,   162,
   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
   173,    -1,   175,   153,   154,   155,   156,   157,    -1,   159,
   160,   161,   162,   163,   164,   165,   166,   167,    -1,    -1,
    -1,    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,
   157,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,
   154,   155,   156,   157,    -1,   159,   160,   161,   162,   163,
   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,
    -1,   175,   153,   154,   155,   156,   157,    -1,   159,   160,
   161,   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,
    -1,    -1,   173,    -1,   175,   153,   154,   155,   156,   157,
    -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
    -1,    -1,    -1,    -1,    -1,   173,    -1,   175,   153,   154,
   155,   156,   157,    -1,   159,   160,   161,   162,   163,   164,
   165,   166,   167,    -1,    -1,    -1,    -1,    -1,   173,    -1,
   175,   153,   154,   155,   156,   157,    -1,   159,   160,   161,
   162,   163,   164,   165,   166,   167,    -1,    -1,    -1,    -1,
    -1,   173
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 153 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 162 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 6:
#line 176 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 7:
#line 183 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 10:
#line 200 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 201 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 202 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 207 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 212 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 223 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 226 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 230 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 236 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 242 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 249 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 255 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 259 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 263 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 270 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 274 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 279 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 283 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 287 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 291 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 295 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 299 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 303 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 307 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 313 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 316 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 319 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 323 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 327 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 331 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 335 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 340 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 343 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 347 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 350 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 354 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 357 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 360 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 370 "Gmsh.y"
{
  ;
    break;}
case 52:
#line 373 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 379 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 380 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 381 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 382 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 383 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 384 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 385 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 386 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 387 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 388 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 389 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 390 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 395 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 66:
#line 399 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-2].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-4].c, "%");
	  strcpy(tmpstring, str); 
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-2].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Printf Format",
		   List_Nbr(yyvsp[-2].l)-i);
	  break ;
	}
      }
      Msg(DIRECT, tmpstring);
    ;
    break;}
case 67:
#line 428 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-4].c); 
    ;
    break;}
case 68:
#line 433 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View"))
	EndView(1, Force_ViewNumber, yyname, yyvsp[-6].c);
    ;
    break;}
case 69:
#line 441 "Gmsh.y"
{
      BeginView(1, Force_ViewNumber); 
    ;
    break;}
case 82:
#line 460 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 83:
#line 462 "Gmsh.y"
{ List_Add(ActualView->SP, &yyvsp[0].d) ; ;
    break;}
case 84:
#line 467 "Gmsh.y"
{ 
      List_Add(ActualView->SP, &yyvsp[-5].d); List_Add(ActualView->SP, &yyvsp[-3].d);
      List_Add(ActualView->SP, &yyvsp[-1].d);
    ;
    break;}
case 85:
#line 472 "Gmsh.y"
{
      ActualView->NbSP++ ;
    ;
    break;}
case 86:
#line 479 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 87:
#line 481 "Gmsh.y"
{ List_Add(ActualView->VP, &yyvsp[0].d) ; ;
    break;}
case 88:
#line 486 "Gmsh.y"
{ 
      List_Add(ActualView->VP, &yyvsp[-5].d); List_Add(ActualView->VP, &yyvsp[-3].d);
      List_Add(ActualView->VP, &yyvsp[-1].d); 
    ;
    break;}
case 89:
#line 491 "Gmsh.y"
{
      ActualView->NbVP++ ;
    ;
    break;}
case 90:
#line 498 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 91:
#line 500 "Gmsh.y"
{ List_Add(ActualView->TP, &yyvsp[0].d) ; ;
    break;}
case 92:
#line 505 "Gmsh.y"
{ 
      List_Add(ActualView->TP, &yyvsp[-5].d); List_Add(ActualView->TP, &yyvsp[-3].d);
      List_Add(ActualView->TP, &yyvsp[-1].d);
    ;
    break;}
case 93:
#line 510 "Gmsh.y"
{
      ActualView->NbTP++ ;
    ;
    break;}
case 94:
#line 517 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 95:
#line 519 "Gmsh.y"
{ List_Add(ActualView->SL, &yyvsp[0].d) ; ;
    break;}
case 96:
#line 525 "Gmsh.y"
{ 
      List_Add(ActualView->SL, &yyvsp[-11].d); List_Add(ActualView->SL, &yyvsp[-5].d);
      List_Add(ActualView->SL, &yyvsp[-9].d); List_Add(ActualView->SL, &yyvsp[-3].d);
      List_Add(ActualView->SL, &yyvsp[-7].d); List_Add(ActualView->SL, &yyvsp[-1].d);
    ;
    break;}
case 97:
#line 531 "Gmsh.y"
{
      ActualView->NbSL++ ;
    ;
    break;}
case 98:
#line 538 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 99:
#line 540 "Gmsh.y"
{ List_Add(ActualView->VL, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 546 "Gmsh.y"
{ 
      List_Add(ActualView->VL, &yyvsp[-11].d); List_Add(ActualView->VL, &yyvsp[-5].d);
      List_Add(ActualView->VL, &yyvsp[-9].d); List_Add(ActualView->VL, &yyvsp[-3].d);
      List_Add(ActualView->VL, &yyvsp[-7].d); List_Add(ActualView->VL, &yyvsp[-1].d);
    ;
    break;}
case 101:
#line 552 "Gmsh.y"
{
      ActualView->NbVL++ ;
    ;
    break;}
case 102:
#line 559 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 103:
#line 561 "Gmsh.y"
{ List_Add(ActualView->TL, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 567 "Gmsh.y"
{ 
      List_Add(ActualView->TL, &yyvsp[-11].d); List_Add(ActualView->TL, &yyvsp[-5].d);
      List_Add(ActualView->TL, &yyvsp[-9].d); List_Add(ActualView->TL, &yyvsp[-3].d);
      List_Add(ActualView->TL, &yyvsp[-7].d); List_Add(ActualView->TL, &yyvsp[-1].d);
    ;
    break;}
case 105:
#line 573 "Gmsh.y"
{
      ActualView->NbTL++ ;
    ;
    break;}
case 106:
#line 580 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 107:
#line 582 "Gmsh.y"
{ List_Add(ActualView->ST, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 589 "Gmsh.y"
{ 
      List_Add(ActualView->ST, &yyvsp[-17].d); List_Add(ActualView->ST, &yyvsp[-11].d);
      List_Add(ActualView->ST, &yyvsp[-5].d);
      List_Add(ActualView->ST, &yyvsp[-15].d); List_Add(ActualView->ST, &yyvsp[-9].d);
      List_Add(ActualView->ST, &yyvsp[-3].d);
      List_Add(ActualView->ST, &yyvsp[-13].d); List_Add(ActualView->ST, &yyvsp[-7].d);
      List_Add(ActualView->ST, &yyvsp[-1].d);
    ;
    break;}
case 109:
#line 598 "Gmsh.y"
{
      ActualView->NbST++ ;
    ;
    break;}
case 110:
#line 605 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 111:
#line 607 "Gmsh.y"
{ List_Add(ActualView->VT, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 614 "Gmsh.y"
{ 
      List_Add(ActualView->VT, &yyvsp[-17].d); List_Add(ActualView->VT, &yyvsp[-11].d);
      List_Add(ActualView->VT, &yyvsp[-5].d);
      List_Add(ActualView->VT, &yyvsp[-15].d); List_Add(ActualView->VT, &yyvsp[-9].d);
      List_Add(ActualView->VT, &yyvsp[-3].d);
      List_Add(ActualView->VT, &yyvsp[-13].d); List_Add(ActualView->VT, &yyvsp[-7].d);
      List_Add(ActualView->VT, &yyvsp[-1].d);
    ;
    break;}
case 113:
#line 623 "Gmsh.y"
{
      ActualView->NbVT++ ;
    ;
    break;}
case 114:
#line 630 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 115:
#line 632 "Gmsh.y"
{ List_Add(ActualView->TT, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 639 "Gmsh.y"
{ 
      List_Add(ActualView->TT, &yyvsp[-17].d); List_Add(ActualView->TT, &yyvsp[-11].d);
      List_Add(ActualView->TT, &yyvsp[-5].d);
      List_Add(ActualView->TT, &yyvsp[-15].d); List_Add(ActualView->TT, &yyvsp[-9].d);
      List_Add(ActualView->TT, &yyvsp[-3].d);
      List_Add(ActualView->TT, &yyvsp[-13].d); List_Add(ActualView->TT, &yyvsp[-7].d);
      List_Add(ActualView->TT, &yyvsp[-1].d);
    ;
    break;}
case 117:
#line 648 "Gmsh.y"
{
      ActualView->NbTT++ ;
    ;
    break;}
case 118:
#line 655 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 119:
#line 657 "Gmsh.y"
{ List_Add(ActualView->SS, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 665 "Gmsh.y"
{ 
      List_Add(ActualView->SS, &yyvsp[-23].d);  List_Add(ActualView->SS, &yyvsp[-17].d);
      List_Add(ActualView->SS, &yyvsp[-11].d); List_Add(ActualView->SS, &yyvsp[-5].d);
      List_Add(ActualView->SS, &yyvsp[-21].d);  List_Add(ActualView->SS, &yyvsp[-15].d);
      List_Add(ActualView->SS, &yyvsp[-9].d); List_Add(ActualView->SS, &yyvsp[-3].d);
      List_Add(ActualView->SS, &yyvsp[-19].d);  List_Add(ActualView->SS, &yyvsp[-13].d);
      List_Add(ActualView->SS, &yyvsp[-7].d); List_Add(ActualView->SS, &yyvsp[-1].d);
    ;
    break;}
case 121:
#line 674 "Gmsh.y"
{
      ActualView->NbSS++ ;
    ;
    break;}
case 122:
#line 681 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 123:
#line 683 "Gmsh.y"
{ List_Add(ActualView->VS, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 691 "Gmsh.y"
{ 
      List_Add(ActualView->VS, &yyvsp[-23].d);  List_Add(ActualView->VS, &yyvsp[-17].d);
      List_Add(ActualView->VS, &yyvsp[-11].d); List_Add(ActualView->VS, &yyvsp[-5].d);
      List_Add(ActualView->VS, &yyvsp[-21].d);  List_Add(ActualView->VS, &yyvsp[-15].d);
      List_Add(ActualView->VS, &yyvsp[-9].d); List_Add(ActualView->VS, &yyvsp[-3].d);
      List_Add(ActualView->VS, &yyvsp[-19].d);  List_Add(ActualView->VS, &yyvsp[-13].d);
      List_Add(ActualView->VS, &yyvsp[-7].d); List_Add(ActualView->VS, &yyvsp[-1].d);
    ;
    break;}
case 125:
#line 700 "Gmsh.y"
{
      ActualView->NbVS++ ;
    ;
    break;}
case 126:
#line 707 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 127:
#line 709 "Gmsh.y"
{ List_Add(ActualView->TS, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 717 "Gmsh.y"
{ 
      List_Add(ActualView->TS, &yyvsp[-23].d);  List_Add(ActualView->TS, &yyvsp[-17].d);
      List_Add(ActualView->TS, &yyvsp[-11].d); List_Add(ActualView->TS, &yyvsp[-5].d);
      List_Add(ActualView->TS, &yyvsp[-21].d);  List_Add(ActualView->TS, &yyvsp[-15].d);
      List_Add(ActualView->TS, &yyvsp[-9].d); List_Add(ActualView->TS, &yyvsp[-3].d);
      List_Add(ActualView->TS, &yyvsp[-19].d);  List_Add(ActualView->TS, &yyvsp[-13].d);
      List_Add(ActualView->TS, &yyvsp[-7].d); List_Add(ActualView->TS, &yyvsp[-1].d);
    ;
    break;}
case 129:
#line 726 "Gmsh.y"
{
      ActualView->NbTS++ ;
    ;
    break;}
case 130:
#line 738 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 131:
#line 739 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 132:
#line 740 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 133:
#line 741 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 134:
#line 742 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 135:
#line 745 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 136:
#line 746 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 137:
#line 753 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else vyyerror("Division by Zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 138:
#line 780 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  vyyerror("Unknown Variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;	  
	}
      }
    ;
    break;}
case 139:
#line 814 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
    ;
    break;}
case 140:
#line 828 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 141:
#line 837 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 142:
#line 852 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 143:
#line 864 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown String Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  vyyerror("Unknown String Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 144:
#line 878 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else vyyerror("Division by Zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 145:
#line 901 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else vyyerror("Division by Zero in '%s[%d].%s /= %g'", 
			  yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 146:
#line 925 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 147:
#line 937 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 148:
#line 951 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 149:
#line 963 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  vyyerror("Unknown Color Option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 150:
#line 977 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable(0);
      if(!ct)
	vyyerror("View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too Many (%d>%d) Colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
    ;
    break;}
case 151:
#line 992 "Gmsh.y"
{
      ColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  vyyerror("Too Many (%d>%d) Colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
      }
    ;
    break;}
case 152:
#line 1017 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 153:
#line 1024 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 154:
#line 1030 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 155:
#line 1049 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 156:
#line 1060 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 157:
#line 1068 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 158:
#line 1074 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 159:
#line 1080 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 160:
#line 1099 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 161:
#line 1105 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 162:
#line 1122 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 163:
#line 1128 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 164:
#line 1134 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 165:
#line 1140 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 166:
#line 1146 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 167:
#line 1152 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if((int)yyvsp[-1].d + 1 + List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-3].l)){
	vyyerror("Wrong Definition of Nurbs Curve %d: "
		"[Degree]%d + 1 + [NbPts]%d != [NbKnots]%d",
		(int)yyvsp[-8].d, (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l), List_Nbr(yyvsp[-3].l));
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 168:
#line 1171 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 169:
#line 1183 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 170:
#line 1189 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 171:
#line 1208 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Wrong Definition of Ruled Surface %d: "
		   "%d Borders Instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 172:
#line 1231 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 173:
#line 1239 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 174:
#line 1243 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 175:
#line 1249 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 176:
#line 1255 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unknown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 177:
#line 1267 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 178:
#line 1273 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 179:
#line 1279 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 180:
#line 1292 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 181:
#line 1297 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 182:
#line 1302 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 183:
#line 1307 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 184:
#line 1314 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 185:
#line 1315 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 186:
#line 1316 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 187:
#line 1321 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 188:
#line 1325 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 189:
#line 1337 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 190:
#line 1355 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 191:
#line 1362 "Gmsh.y"
{
	if(!strcmp(yyvsp[-4].c, "View"))
	  FreeView((int)yyvsp[-2].d);
      ;
    break;}
case 192:
#line 1367 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 193:
#line 1379 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  vyyerror("Unknown File '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
      }
      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	Msg(PARSER_INFO, "Executing System Call \"%s\"", yyvsp[-1].c);
	system(yyvsp[-1].c);

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 194:
#line 1433 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	vyyerror("Mesh directives are not (yet) allowed in scripts");

      }
      else
	vyyerror("Unknown Command '%s'", yyvsp[-2].c);
    ;
    break;}
case 195:
#line 1453 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 196:
#line 1457 "Gmsh.y"
{
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
    ;
    break;}
case 197:
#line 1479 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 198:
#line 1493 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 199:
#line 1507 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 200:
#line 1532 "Gmsh.y"
{
      FILE* ff;
      if(RecursionLevel)
	ff = yyinTab[RecursionLevel-1];
      else
	ff = yyin;
      // here, we seek remember the position in yyin
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( ff, &yyposImbricatedLoopsTab[ImbricatedLoop++]);
    ;
    break;}
case 201:
#line 1557 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	FILE* ff;
	if(RecursionLevel)
	  ff = yyinTab[RecursionLevel-1];
	else
	  ff = yyin;
	
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 202:
#line 1583 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yylineno))
	vyyerror("Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 203:
#line 1589 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yylineno))
	vyyerror("Error while exiting function");
    ;
    break;}
case 204:
#line 1594 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yylineno))
	vyyerror("Unknown Function %s",yyvsp[-1].c);
    ;
    break;}
case 205:
#line 1599 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 206:
#line 1603 "Gmsh.y"
{
    ;
    break;}
case 207:
#line 1614 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 208:
#line 1619 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 209:
#line 1625 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 210:
#line 1629 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 211:
#line 1633 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 212:
#line 1637 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 213:
#line 1641 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 214:
#line 1646 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 215:
#line 1654 "Gmsh.y"
{
    ;
    break;}
case 216:
#line 1657 "Gmsh.y"
{
    ;
    break;}
case 217:
#line 1663 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 218:
#line 1680 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 219:
#line 1691 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 220:
#line 1708 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 221:
#line 1725 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
    ;
    break;}
case 222:
#line 1742 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Wrong Definition of Transfinite Surface %d: "
		   "%d Points Instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 223:
#line 1763 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  vyyerror("Wrong Definition of Elliptic Surface %d: "
		   "%d Points Instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 224:
#line 1783 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Wrong Definition of Transfinite Volume %d: "
		   "%d Points Instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 225:
#line 1803 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 226:
#line 1820 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s){
	  /* Allow generic lists, even if the surfaces don't exist
	     vyyerror("Unkown Surface %d", j); */
	}
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 227:
#line 1845 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 228:
#line 1849 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 229:
#line 1860 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 230:
#line 1861 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 231:
#line 1865 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 232:
#line 1866 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 233:
#line 1867 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 234:
#line 1868 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 235:
#line 1869 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 236:
#line 1873 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 237:
#line 1874 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 238:
#line 1875 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 239:
#line 1876 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 240:
#line 1877 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 241:
#line 1878 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 242:
#line 1879 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 243:
#line 1880 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 244:
#line 1882 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	vyyerror("Division by Zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 245:
#line 1888 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 246:
#line 1889 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 247:
#line 1890 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 248:
#line 1891 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 249:
#line 1892 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 250:
#line 1893 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 251:
#line 1894 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 252:
#line 1895 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 253:
#line 1896 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 254:
#line 1897 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 255:
#line 1898 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 256:
#line 1899 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 257:
#line 1900 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 258:
#line 1901 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 259:
#line 1902 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 260:
#line 1903 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 261:
#line 1904 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 262:
#line 1905 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 263:
#line 1906 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 264:
#line 1907 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 265:
#line 1908 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 266:
#line 1909 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 267:
#line 1910 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 268:
#line 1911 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 269:
#line 1912 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 270:
#line 1913 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 271:
#line 1914 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 272:
#line 1915 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 273:
#line 1916 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 274:
#line 1917 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 275:
#line 1918 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 276:
#line 1919 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 277:
#line 1928 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 278:
#line 1929 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 279:
#line 1934 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 280:
#line 1945 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 281:
#line 1962 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 282:
#line 1973 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 283:
#line 1992 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 284:
#line 2008 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 285:
#line 2024 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 286:
#line 2040 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	vyyerror("Unknown Numeric Option Class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  vyyerror("Unknown Numeric Option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 287:
#line 2058 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 288:
#line 2064 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        vyyerror("Wrong Increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 289:
#line 2078 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 290:
#line 2082 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 291:
#line 2086 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 292:
#line 2090 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 293:
#line 2094 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 294:
#line 2100 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 295:
#line 2104 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 296:
#line 2108 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 297:
#line 2112 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 298:
#line 2119 "Gmsh.y"
{
    ;
    break;}
case 299:
#line 2122 "Gmsh.y"
{
    ;
    break;}
case 300:
#line 2128 "Gmsh.y"
{
    ;
    break;}
case 301:
#line 2131 "Gmsh.y"
{
    ;
    break;}
case 302:
#line 2137 "Gmsh.y"
{
    ;
    break;}
case 303:
#line 2140 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 304:
#line 2144 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 305:
#line 2151 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 306:
#line 2156 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 307:
#line 2163 "Gmsh.y"
{
    ;
    break;}
case 308:
#line 2166 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 309:
#line 2171 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 310:
#line 2185 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
    ;
    break;}
case 311:
#line 2204 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 312:
#line 2212 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 313:
#line 2217 "Gmsh.y"
{ 
      yyval.l = yyvsp[0].l;
    ;
    break;}
case 314:
#line 2221 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 315:
#line 2233 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
    ;
    break;}
case 316:
#line 2250 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 317:
#line 2254 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
    ;
    break;}
case 318:
#line 2261 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-2].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 319:
#line 2272 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	vyyerror("Unknown Variable '%s'", yyvsp[-5].c) ;
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    vyyerror("Uninitialized Variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
    ;
    break;}
case 320:
#line 2291 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 321:
#line 2295 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 322:
#line 2299 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, (int)yyvsp[-1].d, yyvsp[-3].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[-3].c);
    ;
    break;}
case 323:
#line 2304 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) vyyerror("Unknown Color '%s'", yyvsp[0].c);
    ;
    break;}
case 324:
#line 2309 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	vyyerror("Unknown Color Option Class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  vyyerror("Unknown Color Option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 325:
#line 2328 "Gmsh.y"
{
      yyval.l = ListOfColor_L;
    ;
    break;}
case 326:
#line 2332 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      ColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	vyyerror("View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(ListOfColor_L, &ct->table[i]);
      }
      yyval.l = ListOfColor_L;
    ;
    break;}
case 327:
#line 2350 "Gmsh.y"
{
      if(!ListOfColor_L)
	ListOfColor_L = List_Create(256,10,sizeof(unsigned int)) ;
      else
	List_Reset(ListOfColor_L) ;
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 328:
#line 2358 "Gmsh.y"
{
      List_Add(ListOfColor_L, &(yyvsp[0].u)) ;
    ;
    break;}
case 329:
#line 2365 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 330:
#line 2369 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 331:
#line 2373 "Gmsh.y"
{
      for(i = 0 ; i<List_Nbr(yyvsp[-1].l) ; i++){
	if(!i){
	  str = strtok(yyvsp[-3].c, "%");
	  strcpy(tmpstring, str);
	}
	str = strtok(NULL, "%");
	if(str){
	  strcpy(tmpstring2, "%");
	  strcat(tmpstring2, str);
	  sprintf(tmpstring3, tmpstring2, *(double*)List_Pointer(yyvsp[-1].l,i)); 
	  strcat(tmpstring, tmpstring3);
	}
	else{
	  vyyerror("Missing %d Parameter(s) in Sprintf Format",
		   List_Nbr(yyvsp[-1].l)-i);
	  break ;
	}
      }
      yyval.c = (char*)Malloc(strlen(tmpstring)+1);
      strcpy(yyval.c, tmpstring);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2397 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void vyyerror(char *fmt, ...){
  va_list args;
  char tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}


